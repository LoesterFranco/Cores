Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 1
noc_boot11.a

                                        ; ============================================================================
                                        ;        __
                                        ;   \\__/ o\    (C) 2017  Robert Finch, Waterloo
                                        ;    \  __ /    All rights reserved.
                                        ;     \/_//     robfinch<remove>@finitron.ca
                                        ;       ||
                                        ;  
                                        ;
                                        ; This source file is free software: you can redistribute it and/or modify 
                                        ; it under the terms of the GNU Lesser General Public License as published 
                                        ; by the Free Software Foundation, either version 3 of the License, or     
                                        ; (at your option) any later version.                                      
                                        ;                                                                          
                                        ; This source file is distributed in the hope that it will be useful,      
                                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                                        ; GNU General Public License for more details.                             
                                        ;                                                                          
                                        ; You should have received a copy of the GNU General Public License        
                                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                                        ;                                    
                                        ;                                      
                                        ; This boot rom for the special node $11. This node is responsible for
                                        ; bringing the system up, and controls the text display and leds.
                                        ; ============================================================================
                                        ;
     27 = 0D                            CR	= 13
     28 = 0A                            LF	= 10
     29 = 08                            CTRLH	equ		8
                                        
     31 = 01                            MT_RST		equ		1
     32 = 02                            MT_RST_ACK	equ		2
     33 = 03                            MT_STOP		equ		3
     34 = 04                            MT_KEYSTROKE			equ	4
     35 = 05                            MT_SET_INPUT_FOCUS		equ	5
     36 = 06                            MT_BUTTON_STATUS		equ	6
     37 = 07                            MT_REQ_INP_FOCUS		equ	7
     38 = 08                            MT_GRNT_INP_FOCUS		equ 8
     39 = 09                            MT_PING					equ	9
     40 = 0A                            MT_START_BASIC_LOAD		equ	10
     41 = 0B                            MT_LOAD_BASIC_CHAR		equ	11
     42 = 0C                            MT_RUN_BASIC_PROG		equ	12
     43 = 0D                            MT_BASIC_EXIT			equ	13
     44 = 0F                            MT_REQ_OUT_FOCUS		equ	15
     45 = 10                            MT_GRNT_OUT_FOCUS		equ	16
     46 = 11                            MT_OUT_CHAR				equ	17
     47 = 12                            MT_PING_ACK				equ	18
                                        
                                        		bss
                                        		org		0x0040
     52 00000040                        txBuf	fill.b	16,0
     53 00000050                        rxBuf	fill.b	16,0
     54 00000060                        FocusTbl	fill.b	64,0
     55 000000A0                        HTOutFocus	db		0
                                        
     56 = 2000                          TXTSCR		equ	$2000
     57 = 000000000000B100                              TXTCTRL		equ	$B100
     58 = 000000000000B200                              LEDS		equ	$B200
     59 = 000000000000B000                              ROUTER		equ	$B000
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 2
noc_boot11.a
     60 = 10                            RTR_RXSTAT	equ	$10
     61 = 12                            RTR_TXSTAT	equ	$12
                                        
     63 = 0F                            MSG_DST		equ	15
     64 = 0E                            MSG_SRC		equ	14
     65 = 07                            MSG_TYPE	equ	7
                                        
     67 = 00                            ROUTER_TRB	equ	0
                                        
                                        		.code
                                        		cpu		Butterfly16
                                        		.org	$C000
                                        ; ============================================================================
                                        ;        __
                                        ;   \\__/ o\    (C) 2017  Robert Finch, Waterloo
                                        ;    \  __ /    All rights reserved.
                                        ;     \/_//     robfinch<remove>@finitron.ca
                                        ;       ||
                                        ;  
                                        ;
                                        ; This source file is free software: you can redistribute it and/or modify 
                                        ; it under the terms of the GNU Lesser General Public License as published 
                                        ; by the Free Software Foundation, either version 3 of the License, or     
                                        ; (at your option) any later version.                                      
                                        ;                                                                          
                                        ; This source file is distributed in the hope that it will be useful,      
                                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                                        ; GNU General Public License for more details.                             
                                        ;                                                                          
                                        ; You should have received a copy of the GNU General Public License        
                                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                                        ;                                    
                                        ;                                      
                                        ; Networking software components
                                        ; ============================================================================
                                        ;
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Zero out the transmit buffer.
                                        ; Used before building transmit buffer.
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	<none>
                                        ;----------------------------------------------------------------------------
                                        
    111 0000C000                        zeroTxBuf:
    112 0000C000 FE 6E                   		add		sp,sp,#-2
    113 0000C002 E0 D2                   		sw		r2,[sp]
    114 0000C004 00 40 0F 12             		lw		r2,#15
    115 0000C008                        zeroTxBuf1:
    116 0000C008 04 40 20 C0             		sb		r0,txBuf[r2]
    117 0000C00C FF 62                   		sub		r2,r2,#1
    118 0000C00E FC BB                   		bpl		zeroTxBuf1
    119 0000C010 E0 F2                   		lw		r2,[sp]
    120 0000C012 02 6E                   		add		sp,sp,#2
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 3
noc_boot11.a
    121 0000C014 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Transmit on the network.
                                        ; Blocks until the transmit buffer is open.
                                        ;
                                        ; Prerequisites:
                                        ;	The transmit buffer txBuf must have already been loaded.
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	<none>
                                        ;----------------------------------------------------------------------------
                                        
    137 0000C016 FC 6E                  Xmit:	
    138 0000C018 E0 D1                   		sw		r1,[sp]
    139 0000C01A E2 D2                   		sw		r2,2[sp]
                                        		; wait for transmit buffer to empty
    141 0000C01C                        Xmit2:
    142 0000C01C 01 4B 02 E1             		lb		r1,ROUTER+RTR_TXSTAT
    143 0000C020 FD B9                   		bne		Xmit2
    144 0000C022 00 40 0F 12             		lw		r2,#15
    145 0000C026                        Xmit1:
    146 0000C026 04 40 20 E1             		lb		r1,txBuf[r2]
    147 0000C02A 00 4B 20 C1             		sb		r1,ROUTER[r2]
    148 0000C02E FF 62                   		add		r2,r2,#-1
    149 0000C030 FA BB                   		bpl		Xmit1
                                        		; trigger a transmit
    151 0000C032 01 11                   		lw		r1,#1
    152 0000C034 01 4B 02 C2             		sb		r2,ROUTER+RTR_TXSTAT
    153 0000C038 E2 F2                   		lw		r2,2[sp]
    154 0000C03A E0 F1                   		lw		r1,[sp]
    155 0000C03C 04 6E                   		add		sp,sp,#4
    156 0000C03E F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Receive from network.
                                        ; Receive status must have already indicated a message present.
                                        ; Copies recieve buffer from router to rxBuf.
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	<none>
                                        ;----------------------------------------------------------------------------
                                        
    171 0000C040                        Recv:
    172 0000C040 FC 6E                   		add		sp,sp,#-4
    173 0000C042 E0 D1                   		sw		r1,[sp]
    174 0000C044 E2 D2                   		sw		r2,2[sp]
    175 0000C046 00 40 0F 12             		lw		r2,#15
    176 0000C04A 01 4B 00 E1             		lb		r1,ROUTER+RTR_RXSTAT
    177 0000C04E 04 40 60 31             		or		r1,#$40
    178 0000C052 01 4B 00 C1             		sb		r1,ROUTER+RTR_RXSTAT	; pop the rx fifo
    179 0000C056 20 00                   		nop								; wait a couple of clock cycles
    180 0000C058 20 00                   		nop								; before reading
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 4
noc_boot11.a
    181 0000C05A                        Recv1:
    182 0000C05A 00 4B 20 E1             		lb		r1,ROUTER[r2]			; copy message to local buffer
    183 0000C05E 05 40 20 C1             		sb		r1,rxBuf[r2]
    184 0000C062 FF 62                   		add		r2,r2,#-1
    185 0000C064 FA BB                   		bpl		Recv1
    186 0000C066 E0 F1                   		lw		r1,[sp]
    187 0000C068 E2 F2                   		lw		r2,2[sp]
    188 0000C06A 04 6E                   		add		sp,sp,#4
    189 0000C06C F0 80                   		ret
                                        
                                        ;****************************************************************;
                                        ;                                                                ;
                                        ;		Tiny BASIC for the Finitron Butterfly                    ;
                                        ;                                                                ;
                                        ; Derived from a 68000 derivative of Palo Alto Tiny BASIC as     ;
                                        ; published in the May 1976 issue of Dr. Dobb's Journal.         ;
                                        ; Adapted to the 68000 by:                                       ;
                                        ;	Gordon brndly						                         ;
                                        ;	12147 - 51 Street					                         ;
                                        ;	Edmonton AB  T5W 3G8					                     ;
                                        ;	Canada							                             ;
                                        ;	(updated mailing address for 1996)			                 ;
                                        ;                                                                ;
                                        ; Adapted to the Butterfly by:                                    ;
                                        ;    Robert Finch                                                ;
                                        ;    Ontario, Canada                                             ;
                                        ;	 rob<remove>@finitron.ca                                     ;  
                                        ;****************************************************************;
                                        ;    Copyright (C) 2005 by Robert Finch. This program may be	 ;
                                        ;    freely distributed for personal use only. All commercial	 ;
                                        ;		       rights are reserved.			                     ;
                                        ;****************************************************************;
                                        ;
                                        ; Register Usage
                                        ; r8 = text pointer (global usage)
                                        ; r3,r4 = inputs parameters to subroutines
                                        ; r2 = return value
                                        ;
                                        ;* Vers. 1.0  1984/7/17	- Original version by Gordon brndly
                                        ;*	1.1  1984/12/9	- Addition of '0x' print term by Marvin Lipford
                                        ;*	1.2  1985/4/9	- Bug fix in multiply routine by Rick Murray
                                        
                                        ;	OPT	FRS,BRS 	forward ref.'s & brnches default to short
                                        
                                        ;XMIT_FULL		equ	0x40		; the transmit buffer is full
                                        ;DATA_PRESENT	equ	0x08		; there is data preset at the serial port bc_uart3
    226 = 01                            DATA_PRESENT	equ	0x01		; there is data preset at the serial port bc_uart3
    227 = 20                            XMIT_NOT_FULL	equ	0x20
                                        
    229 = 00000000FFFFDC40                              TS_TIMER	equ		0xFFFFDC40		; system time slice timer
    230 = 00000000FFFFDC50                              KBD			equ		0xFFFFDC50
                                        
    232 = 00000000FFFFDCA0                              RAND		equ		0xFFFFDCA0
    233 = 00000000FFFFD800                              VIC			equ		0xFFFFD800
                                        
    235 = 2000                          VIDEORAM	equ		0x00002000
                                        
                                        ; BOOT ROM routines
                                        
    239 = 0000000FFFFFF804                              getSerial	equ		0xFFFFFF804	; get a serial port character
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 5
noc_boot11.a
    240 = 0000000FFFFFF808                              peekSerial	equ		0xFFFFFF808	; get a serial port character
    241 = 0000000FFFFFF80C                              putSerial	equ		0xFFFFFF80C	; put a character to serial port
    242 = 0000000FFFFFF82C                              clearScreen	equ		0xFFFFFF82C	; clear the screen
    243 = 0000000FFFFFF840                              getKbdCharWait	equ	0xFFFFFF840
    244 = 0000000FFFFFF844                              getKbdChar		equ	0xFFFFFF844
                                        
    246 = 20                            warmStart   equ     0x20
    247 = 24                            usrJmp      equ     0x24
                                        
    249 = 0D                            CR		equ	0x0D		; ASCII equates
    250 = 0A                            LF		equ	0x0A
    251 = 09                            TAB		equ	0x09
    252 = 03                            CTRLC	equ	0x03
    253 = 08                            CTRLH	equ	0x08
    254 = 13                            CTRLS	equ	0x13
    255 = 18                            CTRLX	equ	0x18
                                        
    257 = 50                            BUFLEN	equ	80	;	length of keyboard input buffer
                                        
                                        	code
                                        ;	org	0xC000	;
                                        ;
                                        ; Standard jump table. You can change these addresses if you are
                                        ; customizing this interpreter for a different environment.
                                        ;
    266 0000C06E 0D AE                  START	jmp	CSTART	;	Cold Start entry point
    267 0000C070 45 AE                  GOWARM	jmp	WSTART	;	Warm Start entry point
    268 0000C072 86 40 01 AE            GOOUT	jmp	OUTC	;	Jump to character-out routine
    269 0000C076 86 40 00 AE            GOIN	jmp	INC		;Jump to character-in routine
    270 0000C07A 89 40 01 AE            GOAUXO	jmp	AUXOUT	;	Jump to auxiliary-out routine
    271 0000C07E 8A 40 0E AE            GOAUXI	jmp	AUXIN	;	Jump to auxiliary-in routine
    272 0000C082 8E 40 04 AE            GOBYE	jmp	BYEBYE	;	Jump to monitor, DOS, etc.
                                        ;
                                        ; Modifiable system constants:
                                        ;
    276 0000C086 00 02                  TXTBGN	dw	0x0200		;beginning of program memory
    277 0000C088 00 1E                  ENDMEM	dw	0x1E00	;	end of available memory
                                        ;
                                        ; The main interpreter starts here:
                                        ;
                                        ; Usage
                                        ; r1 = temp
                                        ; r8 = text buffer pointer
                                        ; r12 = end of text in text buffer
                                        ;
    286 0000C08A                        CSTART
                                        	; First save off the link register and OS sp value
    288 0000C08A FC 6E                   	sub		sp,sp,#4
    289 0000C08C E0 DF                   	sw		lr,[sp]
    290 0000C08E 08 40 04 DE             	sw		sp,OSSP
    291 0000C092 08 4C 08 FE             	lw		sp,ENDMEM	; initialize stack pointer
    292 0000C096 E0 DF                   	sw      lr,[sp]    ; save off return address
                                        ;	lw		r1,#TXT_WIDTH
                                        ;	sb		r1,txtWidth
                                        ;	lw		r1,#TXT_HEIGHT
                                        ;	sb		r1,txtHeight
    297 0000C098 03 40 02 C0             	sb		r0,cursx	; set screen output
    298 0000C09C 03 40 03 C0             	sb		r0,cursy
    299 0000C0A0 03 40 0C C0             	sb		r0,cursFlash
    300 0000C0A4 03 40 04 D0             	sw		r0,pos
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 6
noc_boot11.a
    301 0000C0A8 F2 4B 00 12             	lw		r2,#0xBF20	; black chars, yellow background
    302 0000C0AC 03 40 08 D2             	sw		r2,charToPrint
    303 0000C0B0 BB 49 0B AF             	call	clearScreen
    304 0000C0B4 25 4D 08 11             	lea		r1,msgInit	;	tell who we are
    305 0000C0B8 82 40 0F AF             	call	PRMESGAUX
    306 0000C0BC 25 4D 08 11             	lea		r1,msgInit	;	tell who we are
    307 0000C0C0 81 40 0C AF             	call	PRMESG
    308 0000C0C4 08 4C 06 F1             	lw		r1,TXTBGN	;	init. end-of-program pointer
    309 0000C0C8 09 40 06 D1             	sw		r1,TXTUNF
    310 0000C0CC 08 4C 08 F1             	lw		r1,ENDMEM	;	get address of end of memory
    311 0000C0D0 80 4F 10 11             	sub		r1,r1,#2048	; 	reserve 2K for the stack
    312 0000C0D4 0A 40 00 D1             	sw		r1,STKBOT
    313 0000C0D8 E0 4F 10 11             	sub     r1,r1,#512 ;   128 vars
    314 0000C0DC 09 40 08 D1             	sw      r1,VARBGN
    315 0000C0E0 15 40 0F AF             	call    clearVars   ; clear the variable area
    316 0000C0E4 09 40 08 F1             	lw      r1,VARBGN   ; calculate number of bytes free
    317 0000C0E8 09 40 06 F3             	lw		r3,TXTUNF
    318 0000C0EC 32 21                   	sub     r1,r3
    319 0000C0EE 00 12                   	lw		r2,#0
    320 0000C0F0 6F 40 0B AF             	call	PRTNUM
    321 0000C0F4 30 4D 06 11             	lea		r1,msgBytesFree
    322 0000C0F8 80 40 00 AF             	call	PRMESG
    323 0000C0FC                        WSTART
    324 0000C0FC 08 40 0C D0             	sw		r0,LOPVAR   ; initialize internal variables
    325 0000C100 08 40 08 D0             	sw		r0,STKGOS
    326 0000C104 08 40 06 D0             	sw		r0,CURRNT	;	current line number pointer = 0
    327 0000C108 08 4C 08 FE             	lw		sp,ENDMEM	;	init S.P. again, just in case
    328 0000C10C 31 4D 04 11             	lea		r1,msgReady	;	display "Ready"
    329 0000C110 7F 40 04 AF             	call	PRMESG
    330 0000C114                        ST3
    331 0000C114 03 40 0E 11             	lw		r1,#'>'		; Prompt with a '>' and
    332 0000C118 5E 40 0B AF             	call	GETLN		; read a line.
    333 0000C11C 7B 40 04 AF             	call	TOUPBUF 	; convert to upper case
    334 0000C120 80 1C                   	lw		r12,r8		; save pointer to end of line
    335 0000C122 0A 40 0E 18             	lea		r8,BUFFER	; point to the beginning of line
    336 0000C126 78 40 00 AF             	call	TSTNUM		; is there a number there?
    337 0000C12A 79 40 0F AF             	call	IGNBLK		; skip trailing blanks
    338 0000C12E 16 21                   	or      r1,r1       ; does line no. exist? (or nonzero?)
    339 0000C130 C1 A8                   	beq		DIRECT		; if not, it's a direct statement
    340 0000C132 00 40 11 10             	cmp		r1,#0xFFFF	; see if line no. is <= 16 bits
    341 0000C136 04 A6                   	bleu	ST2
    342 0000C138 33 4D 02 11             	lea		r1,msgLineRange	; if not, we've overflowed
    343 0000C13C 5B 40 0F AE             	br		ERROR
    344 0000C140                        ST2
                                            ; ugliness - store a character at potentially an
                                            ; odd address (unaligned).
    347 0000C140 10 12                   	lw		r2,r1       ; r2 = line number
    348 0000C142 8E C2                   	sb		r2,-2[r8]
    349 0000C144 A1 32                   	shr		r2,#1
    350 0000C146 A1 32                   	shr		r2,#1
    351 0000C148 A1 32                   	shr		r2,#1
    352 0000C14A A1 32                   	shr		r2,#1
    353 0000C14C A1 32                   	shr		r2,#1
    354 0000C14E A1 32                   	shr		r2,#1
    355 0000C150 A1 32                   	shr		r2,#1
    356 0000C152 A1 32                   	shr		r2,#1
    357 0000C154 8F C2                   	sb		r2,-1[r8]	; store the binary line no.
    358 0000C156 FE 68                   	sub		r8,r8,#2
    359 0000C158 61 40 0F AF             	call	FNDLN		; find this line in save area
    360 0000C15C E0 31                   	tsr		r1,sr
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 7
noc_boot11.a
    361 0000C15E 90 1D                   	lw		r13,r9		; save possible line pointer
    362 0000C160 F0 31                   	trs		r1,sr
    363 0000C162 11 A9                   	bne		ST4			; if not found, insert
                                        	; here we found the line, so we're replacing the line
                                        	; in the text area
                                        	; first step - delete the line
    367 0000C164 00 11                   	lw		r1,#0
    368 0000C166 63 40 05 AF             	call	FNDNXT		; find the next line (into r9)
    369 0000C16A 0A A7                   	bgtu	ST6			; no more lines
    370 0000C16C 90 11                   	lw		r1,r9		; r1 = pointer to next line
    371 0000C16E D0 12                   	lw		r2,r13		; pointer to line to be deleted
    372 0000C170 09 40 06 F3             	lw		r3,TXTUNF	; points to top of save area
    373 0000C174 63 40 09 AF             	call	MVUP		; move up to delete
    374 0000C178 09 40 06 D2             	sw		r2,TXTUNF	; update the end pointer
                                        	; we moved the lines of text after the line being
                                        	; deleted down, so the pointer to the next line
                                        	; needs to be reset
    378 0000C17C D0 19                   	lw		r9,r13
    379 0000C17E 03 AE                   	br		ST4
                                        	; here there were no more lines, so just move the
                                        	; end of text pointer down
    382 0000C180                        ST6
    383 0000C180 09 40 06 DD             	sw		r13,TXTUNF
    384 0000C184 D0 19                   	lw		r9,r13
    385 0000C186                        ST4
                                        	; here we're inserting because the line wasn't found
                                        	; or it was deleted	from the text area
    388 0000C186 C0 11                   	lw		r1,r12		; calculate the length of new line
    389 0000C188 82 21                   	sub		r1,r8
    390 0000C18A 1D 10                   	cmp		r1,#3		; is it just a line no. & CR?
    391 0000C18C C3 B2                   	ble		ST3			; if so, it was just a delete
                                        
    393 0000C18E 09 40 06 FB             	lw		r11,TXTUNF	; compute new end of text
    394 0000C192 B0 1A                   	lw		r10,r11		; r10 = old TXTUNF
    395 0000C194 10 2B                   	add		r11,r1		; r11 = new top of TXTUNF (r1=line length)
                                        
    397 0000C196 09 40 08 F1             	lw		r1,VARBGN	; see if there's enough room
    398 0000C19A 1D 2B                   	cmp		r11,r1
    399 0000C19C 04 A4                   	bltu	ST5
    400 0000C19E 40 4D 0D 11             	lea		r1,msgTooBig	; if not, say so
    401 0000C1A2 58 40 0C AE             	jmp		ERROR
                                        
                                        	; open a space in the text area
    404 0000C1A6                        ST5
    405 0000C1A6 09 40 06 DB             	sw		r11,TXTUNF	; if so, store new end position
    406 0000C1AA A0 11                   	lw		r1,r10		; points to old end of text
    407 0000C1AC B0 12                   	lw		r2,r11		; points to new end of text
    408 0000C1AE 90 13                   	lw		r3,r9       ; points to start of line after insert line
    409 0000C1B0 62 40 02 AF             	call	MVDOWN		; move things out of the way
                                        
                                        	; copy line into text space
    412 0000C1B4 80 11                   	lw		r1,r8		; set up to do the insertion; move from buffer
    413 0000C1B6 D0 12                   	lw		r2,r13		; to vacated space
    414 0000C1B8 C0 13                   	lw		r3,r12		; until end of buffer
    415 0000C1BA 61 40 06 AF             	call	MVUP		; do it
    416 0000C1BE AA BE                   	br		ST3			; go back and get another line
                                        
                                        
                                        ;******************************************************************
                                        ;
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 8
noc_boot11.a
                                        ; *** Tables *** DIRECT *** EXEC ***
                                        ;
                                        ; This section of the code tests a string against a table. When
                                        ; a match is found, control is transferred to the section of
                                        ; code according to the table.
                                        ;
                                        ; At 'EXEC', r8 should point to the string, r9 should point to
                                        ; the character table, and r10 should point to the execution
                                        ; table. At 'DIRECT', r8 should point to the string, r9 and
                                        ; r10 will be set up to point to TAB1 and TAB1_1, which are
                                        ; the tables of all direct and statement commands.
                                        ;
                                        ; A '.' in the string will terminate the test and the partial
                                        ; match will be considered as a match, e.g. 'P.', 'PR.','PRI.',
                                        ; 'PRIN.', or 'PRINT' will all match 'PRINT'.
                                        ;
                                        ; There are two tables: the character table and the execution
                                        ; table. The character table consists of any number of text items.
                                        ; Each item is a string of characters with the last character's
                                        ; high bit set to one. The execution table holds a 32-bit
                                        ; execution addresses that correspond to each entry in the
                                        ; character table.
                                        ;
                                        ; The end of the character table is a 0 byte which corresponds
                                        ; to the default routine in the execution table, which is
                                        ; executed if none of the other table items are matched.
                                        ;
                                        ; Character-matching tables:
    449 0000C1C0                        TAB1
    450 0000C1C0 4C 49 53 D4             	db	"LIS",('T'+0x80)        ; Direct commands
    451 0000C1C4 4C 4F 41 C4             	db	"LOA",('D'+0x80)
    452 0000C1C8 4E 45 D7                	db	"NE",('W'+0x80)
    453 0000C1CB 52 55 CE                	db	"RU",('N'+0x80)
    454 0000C1CE 53 41 56 C5             	db	"SAV",('E'+0x80)
    455 0000C1D2                        TAB2
    456 0000C1D2 4E 45 58 D4             	db	"NEX",('T'+0x80)         ; Direct / statement
    457 0000C1D6 4C 45 D4                	db	"LE",('T'+0x80)
    458 0000C1D9 49 C6                   	db	"I",('F'+0x80)
    459 0000C1DB 47 4F 54 CF             	db	"GOT",('O'+0x80)
    460 0000C1DF 47 4F 53 55 C2          	db	"GOSU",('B'+0x80)
    461 0000C1E4 52 45 54 55 52 CE       	db	"RETUR",('N'+0x80)
    462 0000C1EA 52 45 CD                	db	"RE",('M'+0x80)
    463 0000C1ED 46 4F D2                	db	"FO",('R'+0x80)
    464 0000C1F0 49 4E 50 55 D4          	db	"INPU",('T'+0x80)
    465 0000C1F5 50 52 49 4E D4          	db	"PRIN",('T'+0x80)
    466 0000C1FA 50 4F 4B 45 D7          	db	"POKE",('W'+0x80)
    467 0000C1FF 50 4F 4B C5             	db	"POK",('E'+0x80)
    468 0000C203 53 54 4F D0             	db	"STO",('P'+0x80)
    469 0000C207 42 59 C5                	db	"BY",('E'+0x80)
    470 0000C20A 53 59 D3                	db	"SY",('S'+0x80)
    471 0000C20D 43 4C D3                	db	"CL",('S'+0x80)
    472 0000C210 43 4C D2                    db  "CL",('R'+0x80)
    473 0000C213 52 44 43 C6                 db	"RDC",('F'+0x80)
    474 0000C217 00                      	db	0
    475 0000C218                        TAB4
    476 0000C218 4E 4F 44 45 4E 55 CD    	db	"NODENU",('M'+0x80)
                                      
    477 0000C21F 50 45 45 4B C3          	db	"PEEK",('C'+0x80)        ;Functions
    478 0000C224 50 45 45 4B D7          	db	"PEEK",('W'+0x80)        ;Functions
    479 0000C229 50 45 45 CB             	db	"PEE",('K'+0x80)         ;Functions
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 9
noc_boot11.a
    480 0000C22D 52 4E C4                	db	"RN",('D'+0x80)
    481 0000C230 41 42 D3                	db	"AB",('S'+0x80)
    482 0000C233 53 49 5A C5             	db	"SIZ",('E'+0x80)
    483 0000C237 55 53 D2                	db  "US",('R'+0x80)
    484 0000C23A 00                      	db	0
    485 0000C23B                        TAB5
    486 0000C23B 54 CF                   	db	"T",('O'+0x80)           ;"TO" in "FOR"
    487 0000C23D 00                      	db	0
    488 0000C23E                        TAB6
    489 0000C23E 53 54 45 D0             	db	"STE",('P'+0x80)         ;"STEP" in "FOR"
    490 0000C242 00                      	db	0
    491 0000C243                        TAB8
    492 0000C243 3E BD                   	db	'>',('='+0x80)           ;Relational operators
    493 0000C245 3C BE                   	db	'<',('>'+0x80)
    494 0000C247 BE                      	db	('>'+0x80)
    495 0000C248 BD                      	db	('='+0x80)
    496 0000C249 3C BD                   	db	'<',('='+0x80)
    497 0000C24B BC                      	db	('<'+0x80)
    498 0000C24C 00                      	db	0
    499 0000C24D                        TAB9
    500 0000C24D 41 4E C4                    db  "AN",('D'+0x80)
    501 0000C250 00                          db  0
    502 0000C251                        TAB10
    503 0000C251 4F D2                       db  "O",('R'+0x80)
    504 0000C253 00                          db  0
                                        
                                        	.align	4
                                        
                                        ;* Execution address tables:
    509 0000C254                        TAB1_1
    510 0000C254 C0 C3                   	dw	LISTX			;Direct commands
    511 0000C256 26 C6                   	dw	LOAD
    512 0000C258 0A C3                   	dw	NEW
    513 0000C25A 20 C3                   	dw	RUN
    514 0000C25C BA C6                   	dw	SAVE
    515 0000C25E                        TAB2_1
    516 0000C25E 18 C5                   	dw	NEXT		;	Direct / statement
    517 0000C260 18 C6                   	dw	LET
    518 0000C262 72 C5                   	dw	IF
    519 0000C264 84 C3                   	dw	GOTO
    520 0000C266 5A C4                   	dw	GOSUB
    521 0000C268 8A C4                   	dw	RETURN
    522 0000C26A 7C C5                   	dw	IF2			; REM
    523 0000C26C B4 C4                   	dw	FOR
    524 0000C26E 9A C5                   	dw	INPUT
    525 0000C270 F6 C3                   	dw	PRINT
    526 0000C272 E6 C7                   	dw	POKEW
    527 0000C274 C6 C7                   	dw	POKE
    528 0000C276 18 C3                   	dw	STOP
    529 0000C278 82 C0                   	dw	GOBYE
    530 0000C27A FE C7                   	dw	SYSX
    531 0000C27C 46 D2                   	dw	_cls
    532 0000C27E 9E C3                   	dw  _clr
    533 0000C280 80 C2                   	dw	_rdcf
    534 0000C282 10 C6                   	dw	DEFLT
    535 0000C284                        TAB4_1
    536 0000C284 3A CC                   	dw	NODENUM
    537 0000C286 7C CB                   	dw  PEEKC
    538 0000C288 8A CB                   	dw  PEEKW
    539 0000C28A 70 CB                   	dw	PEEK			;Functions
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 10
noc_boot11.a
    540 0000C28C AA CB                   	dw	RND
    541 0000C28E 04 CC                   	dw	ABS
    542 0000C290 2A CC                   	dw	SIZEX
    543 0000C292 96 CB                   	dw  USRX
    544 0000C294 A6 C9                   	dw	XP40
    545 0000C296                        TAB5_1
    546 0000C296 CC C4                   	dw	FR1			;"TO" in "FOR"
    547 0000C298 BA CC                   	dw	QWHAT
    548 0000C29A                        TAB6_1
    549 0000C29A E0 C4                   	dw	FR2			;"STEP" in "FOR"
    550 0000C29C E6 C4                   	dw	FR3
    551 0000C29E                        TAB8_1
    552 0000C29E C8 C8                   	dw	XP11	;>=		Relational operators
    553 0000C2A0 D2 C8                   	dw	XP12	;<>
    554 0000C2A2 DC C8                   	dw	XP13	;>
    555 0000C2A4 F0 C8                   	dw	XP15	;=
    556 0000C2A6 E6 C8                   	dw	XP14	;<=
    557 0000C2A8 FA C8                   	dw	XP16	;<
    558 0000C2AA 14 C9                   	dw	XP17
    559 0000C2AC                        TAB9_1
    560 0000C2AC 54 C8                       dw  XP_AND
    561 0000C2AE 5C C8                       dw  XP_ANDX
    562 0000C2B0                        TAB10_1
    563 0000C2B0 30 C8                       dw  XP_OR
    564 0000C2B2 38 C8                       dw  XP_ORX
                                        
                                        ;*
                                        ; r3 = match flag (trashed)
                                        ; r9 = text table
                                        ; r10 = exec table
                                        ; r11 = trashed
    571 0000C2B4                        DIRECT
    572 0000C2B4 1C 4C 00 19             	lea		r9,TAB1
    573 0000C2B8 25 4C 04 1A             	lea		r10,TAB1_1
    574 0000C2BC                        EXEC
    575 0000C2BC F0 1B                   	lw		r11,lr		; save link reg
    576 0000C2BE 6D 40 05 AF             	call	IGNBLK		; ignore leading blanks
    577 0000C2C2 B0 1F                   	lw		lr,r11		; restore link reg
    578 0000C2C4 80 1B                   	lw		r11,r8		; save the pointer
    579 0000C2C6 00 13                   	lw		r3,#0		; clear match flag
    580 0000C2C8                        EXLP
    581 0000C2C8 80 E1                   	lb		r1,[r8]		; get the program character
    582 0000C2CA 01 68                   	add		r8,r8,#1
    583 0000C2CC 90 E2                   	lb		r2,[r9]		; get the table character
    584 0000C2CE 02 A9                   	bne		EXNGO		; If end of table,
    585 0000C2D0 B0 18                   	lw		r8,r11		;	restore the text pointer and...
    586 0000C2D2 12 AE                   	br		EXGO		;   execute the default.
    587 0000C2D4                        EXNGO
    588 0000C2D4 3D 21                   	cmp		r1,r3		; Else check for period...
    589 0000C2D6 10 A8                   	beq		EXGO		; if so, execute
    590 0000C2D8 07 40 5F 32             	and		r2,#0x7f	; ignore the table's high bit
    591 0000C2DC 1D 22                   	cmp		r2,r1		;		is there a match?
    592 0000C2DE 07 A8                   	beq		EXMAT
    593 0000C2E0 04 6A                   	add		r10,r10,#4	;if not, try the next entry
    594 0000C2E2 B0 18                   	lw		r8,r11		; reset the program pointer
    595 0000C2E4 00 13                   	lw		r3,#0		; sorry, no match
    596 0000C2E6                        EX1
    597 0000C2E6 01 69                   	add		r9,r9,#1
    598 0000C2E8 9F E1                   	lb		r1,-1[r9]	; get to the end of the entry
    599 0000C2EA FD BB                   	bpl		EX1
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 11
noc_boot11.a
    600 0000C2EC ED BE                   	br		EXLP		; back for more matching
    601 0000C2EE                        EXMAT
    602 0000C2EE 02 40 0E 13             	lw		r3,#'.'		; we've got a match so far
    603 0000C2F2 01 69                   	add		r9,r9,#1
    604 0000C2F4 9F E1                   	lb		r1,-1[r9]	; end of table entry?
    605 0000C2F6 E8 BB                   	bpl		EXLP		; if not, go back for more
    606 0000C2F8                        EXGO
    607 0000C2F8 01 4B 00 E1             	lb		r1,ROUTER+RTR_RXSTAT
    608 0000C2FC 04 A8                   	beq		EXGO1
    609 0000C2FE E9 4F 0F AF             	call	Recv
    610 0000C302 B0 40 00 AF             	call	RecvDispatch
    611 0000C306                        EXGO1
    612 0000C306 A0 FB                   	lw		r11,[r10]	; execute the appropriate routine
    613 0000C308 B0 80                   	jmp		[r11]
                                        
                                        
                                        ;    lb      r1,[r8]     ; get token from text space
                                        ;    bpl
                                        ;    and     r1,#0x7f
                                        ;    shl     r1,#2       ; * 4 - word offset
                                        ;    add     r1,r1,#TAB1_1
                                        ;    lw      r1,[r1]
                                        ;    jmp     [r1]
                                        
                                            
                                        ;
                                        ; What follows is the code to execute direct and statement
                                        ; commands. Control is transferred to these points via the command
                                        ; table lookup code of 'DIRECT' and 'EXEC' in the last section.
                                        ; After the command is executed, control is transferred to other
                                        ; sections as follows:
                                        ;
                                        ; For 'LISTX', 'NEW', and 'STOP': go back to the warm start point.
                                        ; For 'RUN': go execute the first stored line if any; else go
                                        ; back to the warm start point.
                                        ; For 'GOTO' and 'GOSUB': go execute the target line.
                                        ; For 'RETURN' and 'NEXT'; go back to saved return line.
                                        ; For all others: if 'CURRNT' is 0, go to warm start; else go
                                        ; execute next command. (This is done in 'FINISH'.)
                                        ;
                                        ;******************************************************************
                                        ;
                                        ; *** NEW *** STOP *** RUN (& friends) *** GOTO ***
                                        ;
                                        ; 'NEW<CR>' sets TXTUNF to point to TXTBGN
                                        ;
                                        ; 'STOP<CR>' goes back to WSTART
                                        ;
                                        ; 'RUN<CR>' finds the first stored line, stores its address
                                        ; in CURRNT, and starts executing it. Note that only those
                                        ; commands in TAB2 are legal for a stored program.
                                        ;
                                        ; RUN ON <node number> sends a run command to the specified node
                                        ;
                                        ; There are 3 more entries in 'RUN':
                                        ; 'RUNNXL' finds next line, stores it's address and executes it.
                                        ; 'RUNTSL' stores the address of this line and executes it.
                                        ; 'RUNSML' continues the execution on same line.
                                        ;
                                        ; 'GOTO expr<CR>' evaluates the expression, finds the target
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 12
noc_boot11.a
                                        ; line, and jumps to 'RUNTSL' to do it.
                                        ;
    662 0000C30A                        NEW
    663 0000C30A 4C 40 02 AF             	call	ENDCHK
    664 0000C30E 08 4C 06 F1             	lw		r1,TXTBGN
    665 0000C312 09 40 06 D1             	sw		r1,TXTUNF	;	set the end pointer
    666 0000C316 45 AF                   	call    clearVars
                                        
    668 0000C318                        STOP
    669 0000C318 4B 40 0B AF             	call	ENDCHK
    670 0000C31C EE 4F 0E AE             	br		WSTART		; WSTART will reset the stack
                                        
    672 0000C320                        RUN
    673 0000C320 6A 40 04 AF             	call	IGNBLK
    674 0000C324 80 E1                   	lb		r1,[r8]
    675 0000C326 FB 4F 11 10             	cmp		r1,#'O'
    676 0000C32A 11 A9                   	bne		RUN1
    677 0000C32C 81 E1                   	lb		r1,1[r8]
    678 0000C32E FB 4F 12 10             	cmp		r1,#'N'
    679 0000C332 0D A9                   	bne		RUN1
    680 0000C334 02 68                   	add		r8,r8,#2
    681 0000C336 27 40 01 AF             	call	OREXPR
    682 0000C33A 04 40 0F C1             	sb		r1,txBuf+MSG_DST
                                        	lb		r1,#$11
    684 0000C33E 04 40 0E C1             	sb		r1,txBuf+MSG_SRC
                                        	lb		r1,#MT_RUN_BASIC_PROG
    686 0000C342 04 40 07 C1             	sb		r1,txBuf+MSG_TYPE
    687 0000C346 E6 4F 06 AF             	call	Xmit
    688 0000C34A ED 4F 07 AE             	br		WSTART
    689 0000C34E                        RUN1
    690 0000C34E 4A 40 00 AF             	call	ENDCHK
    691 0000C352 08 4C 06 F8             	lw		r8,TXTBGN	;	set pointer to beginning
    692 0000C356 08 40 06 D8             	sw		r8,CURRNT
    693 0000C35A 23 AF                   	call    clearVars
                                        
    695 0000C35C                        RUNNXL					; RUN <next line>
    696 0000C35C 08 40 06 F1             	lw		r1,CURRNT	; executing a program?
    697 0000C360 EC 4F 0C A8             	beq		WSTART		; if not, we've finished a direct stat.
    698 0000C364 00 11                   	lw		r1,#0	    ; else find the next line number
    699 0000C366 80 19                   	lw		r9,r8
    700 0000C368 51 40 0F AF             	call	FNDLNP		; search for the next line
    701 0000C36C EC 4F 06 A7             	bgtu	WSTART		; if we've fallen off the end, stop
                                        
    703 0000C370                        RUNTSL					; RUN <this line>
    704 0000C370 08 40 06 D9             	sw		r9,CURRNT	; set CURRNT to point to the line no.
    705 0000C374 92 18                   	lea		r8,2[r9]	; set the text pointer to
                                        
    707 0000C376                        RUNSML                  ; RUN <same line>
    708 0000C376 6A 40 0F AF             	call	CHKIO		; see if a control-C was pressed
    709 0000C37A 1D 4C 02 19             	lea		r9,TAB2		; find command in TAB2
    710 0000C37E 25 4C 0E 1A             	lea		r10,TAB2_1
    711 0000C382 9C BE                   	br		EXEC		; and execute it
                                        
    713 0000C384                        GOTO
    714 0000C384 24 40 0A AF             	call	OREXPR		;evaluate the following expression
    715 0000C388 10 15                   	lw      r5,r1
    716 0000C38A 48 40 02 AF             	call	ENDCHK		;must find end of line
    717 0000C38E 50 11                   	lw      r1,r5
    718 0000C390 50 40 03 AF             	call	FNDLN		; find the target line
    719 0000C394 ED B8                   	beq		RUNTSL		; go do it
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 13
noc_boot11.a
    720 0000C396 3D 4D 09 11             	lea		r1,msgBadGotoGosub
    721 0000C39A 49 40 00 AE             	br		ERROR		; no such line no.
                                        
                                        
    724 0000C39E                        _clr
    725 0000C39E 01 AF                       call    clearVars
    726 0000C3A0 58 AE                       br      FINISH
                                        
                                        ; Clear the variable area of memory
    729 0000C3A2                        clearVars
    730 0000C3A2 FC 6E                       sub     sp,sp,#4
    731 0000C3A4 E0 DF                       sw      lr,[sp]
    732 0000C3A6 E2 D6                       sw      r6,2[sp]
    733 0000C3A8 80 40 00 16                 lw      r6,#2048    ; number of words to clear
    734 0000C3AC 09 40 08 F1                 lw      r1,VARBGN
    735 0000C3B0                        cv1
    736 0000C3B0 10 D0                       sw      r0,[r1]
    737 0000C3B2 04 61                       add     r1,r1,#4
    738 0000C3B4 FF 66                       sub		r6,r6,#1
    739 0000C3B6 FC B9                       bne     cv1
    740 0000C3B8 E0 FF                       lw      lr,[sp]
    741 0000C3BA E2 F6                       lw      r6,2[sp]
    742 0000C3BC 04 6E                       add     sp,sp,#4
    743 0000C3BE F0 80                       ret    
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; LIST
                                        ;
                                        ; LISTX has two forms:
                                        ; 'LIST<CR>' lists all saved lines
                                        ; 'LIST #<CR>' starts listing at the line #
                                        ; Control-S pauses the listing, control-C stops it.
                                        ;
                                        
    756 0000C3C0                        LISTX
    757 0000C3C0 63 40 03 AF             	call	TSTNUM		; see if there's a line no.
    758 0000C3C4 10 15                   	lw      r5,r1
    759 0000C3C6 46 40 04 AF             	call	ENDCHK		; if not, we get a zero
    760 0000C3CA 50 11                   	lw      r1,r5
    761 0000C3CC 4E 40 05 AF             	call	FNDLN		; find this or next line
    762 0000C3D0                        LS1
    763 0000C3D0 E9 4F 04 A7             	bgtu	WSTART		; warm start if we passed the end
                                        
    765 0000C3D4 90 11                   	lw		r1,r9
    766 0000C3D6 5F 40 08 AF             	call	PRTLN		; print the line
    767 0000C3DA 10 19                   	lw		r9,r1		; set pointer for next
    768 0000C3DC 67 40 0C AF             	call	CHKIO		; check for listing halt request
    769 0000C3E0 06 A8                   	beq		LS3
    770 0000C3E2 FE 4F 1D 10             	cmp		r1,#CTRLS	; pause the listing?
    771 0000C3E6 03 A9                   	bne		LS3
    772 0000C3E8                        LS2
    773 0000C3E8 67 40 06 AF             	call	CHKIO		; if so, wait for another keypress
    774 0000C3EC FD B8                   	beq		LS2
    775 0000C3EE                        LS3
    776 0000C3EE 00 11                   	lw		r1,#0
    777 0000C3F0 4D 40 0B AF             	call	FNDLNP		; find the next line
    778 0000C3F4 ED BE                   	br		LS1
                                        
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 14
noc_boot11.a
                                        
                                        ;******************************************************************
                                        ; PRINT command is 'PRINT ....:' or 'PRINT ....<CR>'
                                        ; where '....' is a list of expressions, formats, back-arrows,
                                        ; and strings.	These items a separated by commas.
                                        ;
                                        ; A format is a pound sign followed by a number.  It controls
                                        ; the number of spaces the value of an expression is going to
                                        ; be printed in.  It stays effective for the rest of the print
                                        ; command unless changed by another format.  If no format is
                                        ; specified, 11 positions will be used.
                                        ;
                                        ; A string is quoted in a pair of single- or double-quotes.
                                        ;
                                        ; An underline (back-arrow) means generate a <CR> without a <LF>
                                        ;
                                        ; A <CR LF> is generated after the entire list has been printed
                                        ; or if the list is empty.  If the list ends with a semicolon,
                                        ; however, no <CR LF> is generated.
                                        ;
                                        
    801 0000C3F6                        PRINT
    802 0000C3F6 0B 15                   	lw		r5,#11		; D4 = number of print spaces
    803 0000C3F8 60 40 05 AF             	call	TSTC		; if null list and ":"
    804 0000C3FC 3A 08                   	db	':',PR2-*+1
    805 0000C3FE 67 40 0B AF             	call	CRLF		; give CR-LF and continue
    806 0000C402 B9 BE                   	br		RUNSML		;		execution on the same line
    807 0000C404                        PR2
    808 0000C404 5F 40 0F AF             	call	TSTC		;if null list and <CR>
    809 0000C408 0D 08                   	db	CR,PR0-*+1
    810 0000C40A 67 40 05 AF             	call	CRLF		;also give CR-LF and
    811 0000C40E A6 BE                   	br		RUNNXL		;execute the next line
    812 0000C410                        PR0
    813 0000C410 5F 40 09 AF             	call	TSTC		;else is it a format?
    814 0000C414 23 0A                   	db	'#',PR1-*+1
    815 0000C416 20 40 01 AF             	call	OREXPR		; yes, evaluate expression
    816 0000C41A 10 15                   	lw		r5,r1		; and save it as print width
    817 0000C41C 0B AE                   	br		PR3		; look for more to print
    818 0000C41E                        PR1
    819 0000C41E 5F 40 02 AF             	call	TSTC	;	is character expression? (MRL)
    820 0000C422 24 0C                   	db	'$',PR4-*+1
    821 0000C424 1F 40 0A AF             	call	OREXPR	;	yep. Evaluate expression (MRL)
    822 0000C428 E2 4F 03 AF             	call	GOOUT	;	print low byte (MRL)
    823 0000C42C 03 AE                   	br		PR3		;look for more. (MRL)
    824 0000C42E                        PR4
    825 0000C42E 53 40 00 AF             	call	QTSTG	;	is it a string?
                                        	; the following branch must occupy only two bytes!
    827 0000C432 09 AE                   	br		PR8		;	if not, must be an expression
    828 0000C434                        PR3
    829 0000C434 5E 40 07 AF             	call	TSTC	;	if ",", go find next
    830 0000C438 2C 08                   	db	',',PR6-*+1
    831 0000C43A 41 40 08 AF             	call	FIN		;in the list.
    832 0000C43E E8 BE                   	br		PR0
    833 0000C440                        PR6
    834 0000C440 65 40 0A AF             	call	CRLF		;list ends here
    835 0000C444 06 AE                   	br		FINISH
    836 0000C446                        PR8
    837 0000C446 1E 40 09 AF             	call	OREXPR		; evaluate the expression
    838 0000C44A 50 12                   	lw		r2,r5		; set the width
    839 0000C44C 54 40 0D AF             	call	PRTNUM		; print its value
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 15
noc_boot11.a
    840 0000C450 F1 BE                   	br		PR3			; more to print?
                                        
    842 0000C452                        FINISH
    843 0000C452 40 40 0C AF             	call	FIN		; Check end of command
    844 0000C456 43 40 00 AE             	jmp		QWHAT	; print "What?" if wrong
                                        
                                        
                                        ;*******************************************************************
                                        ;
                                        ; *** GOSUB *** & RETURN ***
                                        ;
                                        ; 'GOSUB expr:' or 'GOSUB expr<CR>' is like the 'GOTO' command,
                                        ; except that the current text pointer, stack pointer, etc. are
                                        ; saved so that execution can be continued after the subroutine
                                        ; 'RETURN's.  In order that 'GOSUB' can be nested (and even
                                        ; recursive), the save area must be stacked.  The stack pointer
                                        ; is saved in 'STKGOS'.  The old 'STKGOS' is saved on the stack.
                                        ; If we are in the main routine, 'STKGOS' is zero (this was done
                                        ; in the initialization section of the interpreter), but we still
                                        ; save it as a flag for no further 'RETURN's.
                                        ;
    861 0000C45A                        GOSUB
    862 0000C45A 4E 40 04 AF             	call	PUSHA		; save the current 'FOR' parameters
    863 0000C45E 1D 40 0D AF             	call	OREXPR		; get line number
    864 0000C462 49 40 0A AF             	call	FNDLN		; find the target line
    865 0000C466 04 A8                   	beq		gosub1
    866 0000C468 3D 4D 09 11             	lea		r1,msgBadGotoGosub
    867 0000C46C 42 40 07 AE             	br		ERROR		; if not there, say "How?"
    868 0000C470                        gosub1
    869 0000C470 FA 6E                   	sub		sp,sp,#6
    870 0000C472 E0 D8                   	sw		r8,[sp]		; save text pointer
    871 0000C474 08 40 06 F1             	lw		r1,CURRNT
    872 0000C478 E2 D1                   	sw		r1,2[sp]	; found it, save old 'CURRNT'...
    873 0000C47A 08 40 08 F1             	lw		r1,STKGOS
    874 0000C47E E4 D1                   	sw		r1,4[sp]	; and 'STKGOS'
    875 0000C480 08 40 0C D0             	sw		r0,LOPVAR	; load new values
    876 0000C484 08 40 08 DE             	sw		sp,STKGOS
    877 0000C488 73 BE                   	br		RUNTSL
                                        
                                        
                                        ; 'RETURN<CR>' undoes everything that 'GOSUB' did, and thus
                                        ; returns the execution to the command after the most recent
                                        ; 'GOSUB'.  If 'STKGOS' is zero, it indicates that we never had
                                        ; a 'GOSUB' and is thus an error.
                                        ;
    885 0000C48A                        RETURN
    886 0000C48A 40 40 02 AF             	call	ENDCHK		; there should be just a <CR>
    887 0000C48E 08 40 08 F1             	lw		r1,STKGOS	; get old stack pointer
    888 0000C492 04 A9                   	bne		return1
    889 0000C494 3F 4D 06 11             	lea		r1,msgRetWoGosub
    890 0000C498 41 40 01 AE             	br		ERROR		; if zero, it doesn't exist
    891 0000C49C                        return1
    892 0000C49C 10 1E                   	lw		sp,r1		; else restore it
    893 0000C49E E4 F1                   	lw		r1,4[sp]
    894 0000C4A0 08 40 08 D1             	sw		r1,STKGOS	; and the old 'STKGOS'
    895 0000C4A4 E2 F1                   	lw		r1,2[sp]
    896 0000C4A6 08 40 06 D1             	sw		r1,CURRNT	; and the old 'CURRNT'
    897 0000C4AA E0 F8                   	lw		r8,[sp]		; and the old text pointer
    898 0000C4AC 06 6E                   	add		sp,sp,#6
    899 0000C4AE 4A 40 06 AF             	call	POPA		;and the old 'FOR' parameters
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 16
noc_boot11.a
    900 0000C4B2 CF BE                   	br		FINISH		;and we are back home
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** FOR *** & NEXT ***
                                        ;
                                        ; 'FOR' has two forms:
                                        ; 'FOR var=exp1 TO exp2 STEP exp1' and 'FOR var=exp1 TO exp2'
                                        ; The second form means the same thing as the first form with a
                                        ; STEP of positive 1.  The interpreter will find the variable 'var'
                                        ; and set its value to the current value of 'exp1'.  It also
                                        ; evaluates 'exp2' and 'exp1' and saves all these together with
                                        ; the text pointer, etc. in the 'FOR' save area, which consisits of
                                        ; 'LOPVAR', 'LOPINC', 'LOPLMT', 'LOPLN', and 'LOPPT'.  If there is
                                        ; already something in the save area (indicated by a non-zero
                                        ; 'LOPVAR'), then the old save area is saved on the stack before
                                        ; the new values are stored.  The interpreter will then dig in the
                                        ; stack and find out if this same variable was used in another
                                        ; currently active 'FOR' loop.  If that is the case, then the old
                                        ; 'FOR' loop is deactivated. (i.e. purged from the stack)
                                        ;
    922 0000C4B4                        FOR
    923 0000C4B4 4B 40 07 AF             	call	PUSHA		; save the old 'FOR' save area
    924 0000C4B8 3C 40 03 AF             	call	SETVAL		; set the control variable
    925 0000C4BC 08 40 0C D1             	sw		r1,LOPVAR	; save its address
    926 0000C4C0 23 4C 0B 19             	lea		r9,TAB5		; use 'EXEC' to test for 'TO'
    927 0000C4C4 29 4C 06 1A             	lea		r10,TAB5_1
    928 0000C4C8 EF 4F 08 AE             	jmp		EXEC
    929 0000C4CC                        FR1
    930 0000C4CC 1A 40 06 AF             	call	OREXPR		; evaluate the limit
    931 0000C4D0 09 40 00 D1             	sw		r1,LOPLMT	; save that
    932 0000C4D4 23 4C 0E 19             	lea		r9,TAB6		; use 'EXEC' to look for the
    933 0000C4D8 29 4C 0A 1A             	lea		r10,TAB6_1	; word 'STEP'
    934 0000C4DC EE 4F 0E AE             	jmp		EXEC
    935 0000C4E0                        FR2
    936 0000C4E0 19 40 0C AF             	call	OREXPR		; found it, get the step value
    937 0000C4E4 01 AE                   	br		FR4
    938 0000C4E6                        FR3
    939 0000C4E6 01 11                   	lw		r1,#1		; not found, step defaults to 1
    940 0000C4E8                        FR4
    941 0000C4E8 08 40 0E D1             	sw		r1,LOPINC	; save that too
                                        
    943 0000C4EC                        FR5
    944 0000C4EC 08 40 06 F2             	lw		r2,CURRNT
    945 0000C4F0 09 40 02 D2             	sw		r2,LOPLN	; save address of current line number
    946 0000C4F4 09 40 04 D8             	sw		r8,LOPPT	; and text pointer
                                        
                                        
    949 0000C4F8 E0 13                   	lw		r3,sp		; dig into the stack to find 'LOPVAR'
    950 0000C4FA 08 40 0C F6             	lw		r6,LOPVAR
    951 0000C4FE 01 AE                   	br		FR7
    952 0000C500                        FR6
    953 0000C500 3A 13                   	lea		r3,10[r3]	; look at next stack frame
    954 0000C502                        FR7
    955 0000C502 30 F2                   	lw		r2,[r3]		; is it zero?
    956 0000C504 08 A8                   	beq		FR8			; if so, we're done
    957 0000C506 6D 22                   	cmp		r2,r6		; same as current LOPVAR?
    958 0000C508 FB B9                   	bne		FR6			; nope, look some more
                                        
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 17
noc_boot11.a
    960 0000C50A 30 11                       lw      r1,r3       ; Else remove 5 words from...
    961 0000C50C 3A 12                   	lea		r2,10[r3]   ; inside the stack.
    962 0000C50E E0 13                   	lw		r3,sp		
    963 0000C510 47 40 02 AF             	call	MVDOWN
    964 0000C514 0A 6E                   	add		sp,sp,#10	; set the SP 5 words up
    965 0000C516                        FR8
    966 0000C516 9D BE                       br	    FINISH		; and continue execution
                                        
                                        
                                        ; 'NEXT var' serves as the logical (not necessarily physical) end
                                        ; of the 'FOR' loop.  The control variable 'var' is checked with
                                        ; the 'LOPVAR'.  If they are not the same, the interpreter digs in
                                        ; the stack to find the right one and purges all those that didn't
                                        ; match.  Either way, it then adds the 'STEP' to that variable and
                                        ; checks the result with against the limit value.  If it is within
                                        ; the limit, control loops back to the command following the
                                        ; 'FOR'.  If it's outside the limit, the save area is purged and
                                        ; execution continues.
                                        ;
    979 0000C518                        NEXT
    980 0000C518 00 11                   	lw		r1,#0		; don't allocate it
    981 0000C51A 26 40 03 AF             	call	TSTV		; get address of variable
    982 0000C51E 04 A9                   	bne		NX4
    983 0000C520 3B 4D 05 11             	lea		r1,msgNextVar
    984 0000C524 3C 40 0B AE             	br		ERROR		; if no variable, say "What?"
    985 0000C528                        NX4
    986 0000C528 10 19                   	lw		r9,r1		; save variable's address
    987 0000C52A                        NX0
    988 0000C52A 08 40 0C F1             	lw		r1,LOPVAR	; If 'LOPVAR' is zero, we never...
    989 0000C52E 04 A9                   	bne		NX5         ; had a FOR loop
    990 0000C530 3A 4D 02 11             	lea		r1,msgNextFor
    991 0000C534 3C 40 03 AE             	br		ERROR		
    992 0000C538                        NX5
    993 0000C538 9D 21                   	cmp		r1,r9		; else we check them
    994 0000C53A 03 A8                   	beq		NX2			; OK, they agree
    995 0000C53C 45 40 0F AF             	call	POPA		; nope, let's see the next frame
    996 0000C540 F4 BE                   	br		NX0
    997 0000C542                        NX2
    998 0000C542 90 F1                   	lw		r1,[r9]		; get control variable's value
    999 0000C544 08 40 0E F2             	lw		r2,LOPINC
   1000 0000C548 20 21                   	add		r1,r2		; add in loop increment
                                        ;	BVS.L	QHOW		say "How?" for 32-bit overflow
   1002 0000C54A 90 D1                   	sw		r1,[r9]		; save control variable's new value
   1003 0000C54C 09 40 00 F3             	lw		r3,LOPLMT	; get loop's limit value
   1004 0000C550 26 22                   	or		r2,r2       ; check loop increment
   1005 0000C552 03 AB                   	bpl		NX1			; branch if loop increment is positive
   1006 0000C554 3D 21                   	cmp		r1,r3		; test against limit
   1007 0000C556 0A A0                   	blt		NXPurge
   1008 0000C558 02 AE                   	br      NX3
   1009 0000C55A                        NX1
   1010 0000C55A 3D 21                   	cmp		r1,r3
   1011 0000C55C 07 A3                   	bgt		NXPurge
   1012 0000C55E                        NX3	
   1013 0000C55E 09 40 02 F8             	lw		r8,LOPLN	; Within limit, go back to the...
   1014 0000C562 08 40 06 D8             	sw		r8,CURRNT
   1015 0000C566 09 40 04 F8             	lw		r8,LOPPT	; saved 'CURRNT' and text pointer.
   1016 0000C56A 73 BE                   	br		FINISH
                                        
   1018 0000C56C                        NXPurge
   1019 0000C56C 44 40 07 AF                 call    POPA        ; purge this loop
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 18
noc_boot11.a
   1020 0000C570 70 BE                       br      FINISH
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** REM *** IF *** INPUT *** LET (& DEFLT) ***
                                        ;
                                        ; 'REM' can be followed by anything and is ignored by the
                                        ; interpreter.
                                        ;
                                        ;REM
                                        ;    br	    IF2		    ; skip the rest of the line
                                        
                                        ; 'IF' is followed by an expression, as a condition and one or
                                        ; more commands (including other 'IF's) separated by colons.
                                        ; Note that the word 'THEN' is not used.  The interpreter evaluates
                                        ; the expression.  If it is non-zero, execution continues.  If it
                                        ; is zero, the commands that follow are ignored and execution
                                        ; continues on the next line.
                                        ;
   1040 0000C572                        IF
   1041 0000C572 15 40 03 AF                 call	OREXPR		; evaluate the expression
   1042 0000C576                        IF1
   1043 0000C576 16 21                       or      r1,r1       ; is it zero?
   1044 0000C578 EF 4F 0D A9                 bne	    RUNSML		; if not, continue
   1045 0000C57C                        IF2
   1046 0000C57C 80 19                       lw		r9,r8		; set lookup pointer
   1047 0000C57E 00 11                   	lw		r1,#0		; find line #0 (impossible)
   1048 0000C580 42 40 09 AF             	call	FNDSKP		; if so, skip the rest of the line
   1049 0000C584 DB 4F 0A A7             	bgtu	WSTART		; if no next line, do a warm start
   1050 0000C588                        IF3
   1051 0000C588 EF 4F 02 AE             	br		RUNTSL		; run the next line
                                        
                                        
                                        ; INPUT is called first and establishes a stack frame
   1055 0000C58C                        INPERR
   1056 0000C58C 08 40 0A FE             	lw		sp,STKINP	; restore the old stack pointer
   1057 0000C590 E4 F8                   	lw		r8,4[sp]
   1058 0000C592 08 40 06 D8             	sw		r8,CURRNT	; and old 'CURRNT'
   1059 0000C596 E2 F8                   	lw		r8,2[sp]	; and old text pointer
   1060 0000C598 0A 6E                   	add		sp,sp,#10	; fall through will subtract 10
                                        
                                        ; 'INPUT' is like the 'PRINT' command, and is followed by a list
                                        ; of items.  If the item is a string in single or double quotes,
                                        ; or is an underline (back arrow), it has the same effect as in
                                        ; 'PRINT'.  If an item is a variable, this variable name is
                                        ; printed out followed by a colon, then the interpreter waits for
                                        ; an expression to be typed in.  The variable is then set to the
                                        ; value of this expression.  If the variable is preceeded by a
                                        ; string (again in single or double quotes), the string will be
                                        ; displayed followed by a colon.  The interpreter the waits for an
                                        ; expression to be entered and sets the variable equal to the
                                        ; expression's value.  If the input expression is invalid, the
                                        ; interpreter will print "What?", "How?", or "Sorry" and reprint
                                        ; the prompt and redo the input.  The execution will not terminate
                                        ; unless you press control-C.  This is handled in 'INPERR'.
                                        ;
   1077 0000C59A                        INPUT
   1078 0000C59A F6 6E                   	sub		sp,sp,#10	; allocate stack frame
   1079 0000C59C E8 D5                   	sw      r5,8[sp]
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 19
noc_boot11.a
   1080 0000C59E                        IP6
   1081 0000C59E E0 D8                   	sw		r8,[sp]		; save in case of error
   1082 0000C5A0 47 40 07 AF             	call	QTSTG		; is next item a string?
   1083 0000C5A4 06 AE                   	br		IP2			; nope - this branch must take only two bytes
   1084 0000C5A6 01 11                   	lw		r1,#1		; allocate var
   1085 0000C5A8 21 40 0C AF             	call	TSTV		; yes, but is it followed by a variable?
   1086 0000C5AC 2A A8                   	beq     IP4		    ; if not, brnch
   1087 0000C5AE 10 1A                   	lw		r10,r1		; put away the variable's address
   1088 0000C5B0 10 AE                   	br		IP3			; if so, input to variable
   1089 0000C5B2                        IP2
   1090 0000C5B2 E2 D8                   	sw		r8,2[sp]	; save for 'PRTSTG'
   1091 0000C5B4 01 11                   	lw		r1,#1
   1092 0000C5B6 21 40 05 AF             	call	TSTV		; must be a variable now
   1093 0000C5BA 04 A9                   	bne		IP7
   1094 0000C5BC 38 4D 05 11             	lea		r1,msgInputVar
   1095 0000C5C0 37 40 0D AE             	br		ERROR		; "What?" it isn't?
   1096 0000C5C4                        IP7
   1097 0000C5C4 10 1A                   	lw		r10,r1		; put away the variable's address
   1098 0000C5C6 80 E5                   	lb		r5,[r8]		; get ready for 'PRTSTG' by null terminating
   1099 0000C5C8 80 C0                   	sb		r0,[r8]
   1100 0000C5CA E2 F1                   	lw		r1,2[sp]	; get back text pointer
   1101 0000C5CC 44 40 05 AF             	call	PRTSTG		; print string as prompt
   1102 0000C5D0 80 C5                   	sb		r5,[r8]		; un-null terminate
   1103 0000C5D2                        IP3
   1104 0000C5D2 E2 D8                   	sw		r8,2[sp]	; save in case of error
   1105 0000C5D4 08 40 06 F1             	lw		r1,CURRNT
   1106 0000C5D8 E4 D1                   	sw		r1,4[sp]	; also save 'CURRNT'
   1107 0000C5DA 0F 11                   	lw		r1,#-1
   1108 0000C5DC 08 40 06 D1             	sw		r1,CURRNT	; flag that we are in INPUT
   1109 0000C5E0 08 40 0A DE             	sw		sp,STKINP	; save the stack pointer too
   1110 0000C5E4 E6 DA                   	sw		r10,6[sp]	; save the variable address
   1111 0000C5E6 03 40 0A 11             	lw		r1,#':'		; print a colon first
   1112 0000C5EA 38 40 02 AF             	call	GETLN		; then get an input line
   1113 0000C5EE 0A 40 0E 18             	lea		r8,BUFFER	; point to the buffer
   1114 0000C5F2 11 40 03 AF             	call	OREXPR		; evaluate the input
   1115 0000C5F6 E6 FA                   	lw		r10,6[sp]	; restore the variable address
   1116 0000C5F8 A0 D1                   	sw		r1,[r10]	; save value in variable
   1117 0000C5FA E4 F1                   	lw		r1,4[sp]	; restore old 'CURRNT'
   1118 0000C5FC 08 40 06 D1             	sw		r1,CURRNT
   1119 0000C600 E2 F8                   	lw		r8,2[sp]	; and the old text pointer
   1120 0000C602                        IP4
   1121 0000C602 50 40 00 AF             	call	TSTC		; is the next thing a comma?
   1122 0000C606 2C 04                   	db	',',IP5-*+1
   1123 0000C608 CA BE                   	br		IP6			; yes, more items
   1124 0000C60A                        IP5
   1125 0000C60A E8 F5                       lw      r5,8[sp]
   1126 0000C60C 0A 6E                   	add		sp,sp,#10	; clean up the stack
   1127 0000C60E 21 BE                   	jmp		FINISH
                                        
                                        
   1130 0000C610                        DEFLT
   1131 0000C610 80 E1                       lb      r1,[r8]
   1132 0000C612 FF 4F 13 10                 cmp     r1,#CR      ; empty line is OK
   1133 0000C616 1D B8                   	beq	    FINISH	    ; else it is 'LET'
                                        
                                        
                                        ; 'LET' is followed by a list of items separated by commas.
                                        ; Each item consists of a variable, an equals sign, and an
                                        ; expression.  The interpreter evaluates the expression and sets
                                        ; the variable to that value.  The interpreter will also handle
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 20
noc_boot11.a
                                        ; 'LET' commands without the word 'LET'.  This is done by 'DEFLT'.
                                        ;
   1142 0000C618                        LET
   1143 0000C618 31 40 03 AF                 call	SETVAL		; do the assignment
   1144 0000C61C 4F 40 03 AF             	call	TSTC		; check for more 'LET' items
   1145 0000C620 2C 04                   	db	',',LT1-*+1
   1146 0000C622 FA BE                   	br	    LET
   1147 0000C624                        LT1
   1148 0000C624 16 BE                       br	    FINISH		; until we are finished.
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** LOAD *** & SAVE ***
                                        ;
                                        ; These two commands transfer a program to/from an auxiliary
                                        ; device such as a cassette, another computer, etc.  The program
                                        ; is converted to an easily-stored format: each line starts with
                                        ; a colon, the line no. as 4 hex digits, and the rest of the line.
                                        ; At the end, a line starting with an '@' sign is sent.  This
                                        ; format can be read back with a minimum of processing time by
                                        ; the Butterfly.
                                        ;
   1163 0000C626                        LOAD
   1164 0000C626 08 4C 06 F8             	lw		r8,TXTBGN	; set pointer to start of prog. area
   1165 0000C62A 00 40 0D 11             	lw		r1,#CR		; For a CP/M host, tell it we're ready...
   1166 0000C62E D2 4F 04 AF             	call	GOAUXO		; by sending a CR to finish PIP command.
   1167 0000C632                        LOD1
   1168 0000C632 D2 4F 04 AF             	call	GOAUXI		; look for start of line
   1169 0000C636 FD BA                   	bmi		LOD1
   1170 0000C638 FC 4F 10 10             	cmp		r1,#'@'		; end of program?
   1171 0000C63C 1B A8                   	beq		LODEND
   1172 0000C63E FE 4F 16 10             	cmp     r1,#0x1A    ; or EOF marker
   1173 0000C642 18 A8                   	beq     LODEND
   1174 0000C644 FC 4F 16 10             	cmp		r1,#':'		; if not, is it start of line?
   1175 0000C648 F4 B9                   	bne		LOD1		; if not, wait for it
   1176 0000C64A 18 AF                   	call	GCHAR		; get line number
   1177 0000C64C 80 C1                   	sb		r1,[r8]		; store it
   1178 0000C64E A1 31                   	shr		r1,#1
   1179 0000C650 A1 31                   	shr		r1,#1
   1180 0000C652 A1 31                   	shr		r1,#1
   1181 0000C654 A1 31                   	shr		r1,#1
   1182 0000C656 A1 31                   	shr		r1,#1
   1183 0000C658 A1 31                   	shr		r1,#1
   1184 0000C65A A1 31                   	shr		r1,#1
   1185 0000C65C A1 31                   	shr		r1,#1
   1186 0000C65E 81 C1                   	sb		r1,1[r8]
   1187 0000C660 02 68                   	add		r8,r8,#2
   1188 0000C662                        LOD2
   1189 0000C662 D0 4F 0C AF             	call	GOAUXI		; get another text char.
   1190 0000C666 FD BA                   	bmi		LOD2
   1191 0000C668 80 C1                   	sb		r1,[r8]
   1192 0000C66A 01 68                   	add		r8,r8,#1	; store it
   1193 0000C66C FF 4F 13 10             	cmp		r1,#CR		; is it the end of the line?
   1194 0000C670 F8 B9                   	bne		LOD2		; if not, go back for more
   1195 0000C672 DF BE                   	br		LOD1		; if so, start a new line
   1196 0000C674                        LODEND
   1197 0000C674 09 40 06 D8             	sw		r8,TXTUNF	; set end-of program pointer
   1198 0000C678 D4 4F 00 AE             	br		WSTART		; back to direct mode
                                        
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 21
noc_boot11.a
                                        ; get character from input (16 bit value)
   1201 0000C67C                        GCHAR
   1202 0000C67C FA 6E                   	sub		sp,sp,#6
   1203 0000C67E E0 DF                   	sw		lr,[sp]
   1204 0000C680 E2 D5                   	sw		r5,2[sp]
   1205 0000C682 E4 D6                   	sw		r6,4[sp]
   1206 0000C684 04 16                   	lw      r6,#4       ; repeat four times
   1207 0000C686 00 15                   	lw		r5,#0
   1208 0000C688                        GCHAR1
   1209 0000C688 CF 4F 09 AF             	call	GOAUXI		; get a char
   1210 0000C68C FD BA                   	bmi		GCHAR1
   1211 0000C68E 0D AF                   	call	asciiToHex
   1212 0000C690 81 35                   	shl		r5,#1
   1213 0000C692 81 35                   	shl		r5,#1
   1214 0000C694 81 35                   	shl		r5,#1
   1215 0000C696 81 35                   	shl		r5,#1
   1216 0000C698 16 25                   	or		r5,r1
   1217 0000C69A FF 66                   	sub		r6,r6,#1
   1218 0000C69C F5 B9                   	bne     GCHAR1
   1219 0000C69E 50 11                   	lw		r1,r5
   1220 0000C6A0 E0 FF                   	lw		lr,[sp]
   1221 0000C6A2 E2 F5                   	lw		r5,2[sp]
   1222 0000C6A4 E4 F6                   	lw		r6,4[sp]
   1223 0000C6A6 06 6E                   	add     sp,sp,#6
   1224 0000C6A8 F0 80                   	ret
                                        
                                        ; convert an ascii char to hex code
                                        ; input
                                        ;	r2 = char to convert
                                        
   1230 0000C6AA                        asciiToHex
   1231 0000C6AA FC 4F 17 10             	cmp		r1,#'9'
   1232 0000C6AE 01 A2                   	ble		a2h1		; less than '9'
   1233 0000C6B0 F9 61                   	sub		r1,r1,#7	; shift 'A' to '9'+1
   1234 0000C6B2                        a2h1
   1235 0000C6B2 D0 61                   	sub		r1,r1,#'0'	;
   1236 0000C6B4 00 40 5F 31             	and		r1,#15		; make sure a nybble
   1237 0000C6B8 F0 80                   	ret
                                        
                                        ; SAVE
                                        ; SAVE ON <node number> - copies the code to the specified node
                                        
   1242 0000C6BA                        SAVE
   1243 0000C6BA 4D 40 07 AF             	call	IGNBLK		; ignore blanks
   1244 0000C6BE 80 E1                   	lb		r1,[r8]
   1245 0000C6C0 FB 4F 11 10             	cmp		r1,#'O'
   1246 0000C6C4 0A A9                   	bne		SAVE3
   1247 0000C6C6 81 E1                   	lb		r1,1[r8]
   1248 0000C6C8 FB 4F 12 10             	cmp		r1,#'N'
   1249 0000C6CC 06 A9                   	bne		SAVE3
   1250 0000C6CE 02 68                   	add		r8,r8,#2
   1251 0000C6D0 A5 AF                   	call	OREXPR		; get core #
   1252 0000C6D2 03 40 06 C1             	sb		r1,tgtNode
   1253 0000C6D6 55 40 01 AF             	call	TriggerTgtLoad
   1254 0000C6DA                        SAVE3:
   1255 0000C6DA 08 4C 06 F8             	lw		r8,TXTBGN	;set pointer to start of prog. area
   1256 0000C6DE 09 40 06 F9             	lw		r9,TXTUNF	;set pointer to end of prog. area
   1257 0000C6E2                        SAVE1
   1258 0000C6E2 41 AF                   	call    AUXOCRLF    ; send out a CR & LF (CP/M likes this)
   1259 0000C6E4 9D 28                   	cmp		r8,r9		; are we finished?
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 22
noc_boot11.a
   1260 0000C6E6 34 A5                   	bgeu	SAVEND
   1261 0000C6E8 03 40 06 E2             	lb		r2,tgtNode
   1262 0000C6EC FE 4F 2F 10             	cmp		r2,#$11
   1263 0000C6F0 14 A8                   	beq		SAVE4
                                        	lb		r1,#':'
   1265 0000C6F2 04 40 00 C1             	sb		r1,txBuf
   1266 0000C6F6 80 E1                   	lb		r1,[r8]
   1267 0000C6F8 04 40 01 C1             	sb		r1,txBuf+1
   1268 0000C6FC 81 E1                   	lb		r1,1[r8]
   1269 0000C6FE 04 40 02 C1             	sb		r1,txBuf+2
   1270 0000C702 03 40 06 E1             	lb		r1,tgtNode
   1271 0000C706 04 40 0F C1             	sb		r1,txBuf+MSG_DST
                                        	lb		r1,#$11
   1273 0000C70A 04 40 0E C1             	sb		r1,txBuf+MSG_SRC
                                        	lb		r1,#11
   1275 0000C70E 04 40 07 C1             	sb		r1,txBuf+MSG_TYPE
   1276 0000C712 C8 4F 00 AF             	call	Xmit
   1277 0000C716 02 68                   	add		r8,r8,#2
   1278 0000C718 13 AE                   	br		SAVE2
   1279 0000C71A                        SAVE4:
   1280 0000C71A 03 40 0A 11             	lw		r1,#':'		; if not, start a line
   1281 0000C71E CA 4F 0C AF             	call	GOAUXO
   1282 0000C722 80 E1                   	lb		r1,[r8]		; get line number
   1283 0000C724 0E 21                   	zxb		r1
   1284 0000C726 81 E2                   	lb		r2,1[r8]
   1285 0000C728 0E 22                   	zxb		r2
   1286 0000C72A 81 32                   	shl		r2,#1
   1287 0000C72C 81 32                   	shl		r2,#1
   1288 0000C72E 81 32                   	shl		r2,#1
   1289 0000C730 81 32                   	shl		r2,#1
   1290 0000C732 81 32                   	shl		r2,#1
   1291 0000C734 81 32                   	shl		r2,#1
   1292 0000C736 81 32                   	shl		r2,#1
   1293 0000C738 81 32                   	shl		r2,#1
   1294 0000C73A 26 21                   	or		r1,r2
   1295 0000C73C 02 68                   	add		r8,r8,#2
   1296 0000C73E 1F AF                   	call	PWORD       ; output line number as 4-digit hex
   1297 0000C740                        SAVE2
   1298 0000C740 80 E1                   	lb		r1,[r8]		; get a text char.
   1299 0000C742 01 68                   	add		r8,r8,#1
   1300 0000C744 FF 4F 13 10             	cmp		r1,#CR		; is it the end of the line?
   1301 0000C748 CC B8                   	beq		SAVE1		; if so, send CR & LF and start new line
   1302 0000C74A C9 4F 06 AF             	call	GOAUXO		; send it out
   1303 0000C74E F8 BE                   	br		SAVE2		; go back for more text
   1304 0000C750                        SAVEND
   1305 0000C750 04 40 00 11             	lw		r1,#'@'		; send end-of-program indicator
   1306 0000C754 C9 4F 01 AF             	call	GOAUXO
   1307 0000C758 06 AF                   	call    AUXOCRLF    ; followed by a CR & LF
   1308 0000C75A 01 40 0A 11             	lw		r1,#0x1A	; and a control-Z to end the CP/M file
   1309 0000C75E C8 4F 0C AF             	call	GOAUXO
   1310 0000C762 CC 4F 0B AE             	br		WSTART		; then go do a warm start
                                        
                                        
                                        ; output a CR LF sequence to auxillary output
                                        ; Registers Affected
                                        ;   r3 = LF
   1316 0000C766                        AUXOCRLF
   1317 0000C766 FE 6E                       sub     sp,sp,#2
   1318 0000C768 E0 DF                       sw      lr,[sp]
   1319 0000C76A 00 40 0D 11                 lw      r1,#CR
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 23
noc_boot11.a
   1320 0000C76E C8 4F 04 AF                 call    GOAUXO
   1321 0000C772 0A 11                       lw      r1,#LF
   1322 0000C774 C8 4F 01 AF                 call    GOAUXO
   1323 0000C778 E0 FF                       lw      lr,[sp]
   1324 0000C77A 02 6E                   	add		sp,sp,#2
   1325 0000C77C F0 80                       ret
                                        
                                        
                                        ; output a word in hex format
                                        ; tricky because of the need to reverse the order of the chars
   1330 0000C77E                        PWORD
   1331 0000C77E FC 6E                   	sub		sp,sp,#4
   1332 0000C780 E0 DF                   	sw		lr,[sp]
   1333 0000C782 E2 D5                   	sw		r5,2[sp]
   1334 0000C784 0A 40 05 15             	lea     r5,NUMWKA+3
   1335 0000C788 10 14                   	lw		r4,r1		; r4 = value
   1336 0000C78A                        pword1
   1337 0000C78A 40 11                       lw      r1,r4       ; r1 = value
   1338 0000C78C A1 34                       shr     r4,#1       ; shift over to next nybble
   1339 0000C78E A1 34                       shr     r4,#1
   1340 0000C790 A1 34                       shr     r4,#1
   1341 0000C792 A1 34                       shr     r4,#1
   1342 0000C794 10 AF                       call    toAsciiHex  ; convert LS nybble to ascii hex
   1343 0000C796 50 C1                       sb      r1,[r5]     ; save in work area
   1344 0000C798 FF 65                       sub     r5,r5,#1
   1345 0000C79A F5 4F 5E 10                 cmp     r5,#NUMWKA
   1346 0000C79E F5 B5                       bgeu    pword1
   1347 0000C7A0                        pword2
   1348 0000C7A0 01 65                       add     r5,r5,#1
   1349 0000C7A2 50 E1                       lb      r1,[r5]     ; get char to output
   1350 0000C7A4 C6 4F 09 AF             	call	GOAUXO		; send it
   1351 0000C7A8 F5 4F 5B 10             	cmp     r5,#NUMWKA+3
   1352 0000C7AC F9 B4                   	bltu    pword2
                                        
   1354 0000C7AE E2 F5                   	lw		r5,2[sp]
   1355 0000C7B0 E0 FF                   	lw		lr,[sp]
   1356 0000C7B2 04 6E                   	add		sp,sp,#4
   1357 0000C7B4 F0 80                   	ret
                                        
                                        
                                        ; convert nybble in r2 to ascii hex char2
                                        ; r2 = character to convert
                                        
   1363 0000C7B6                        toAsciiHex
   1364 0000C7B6 00 40 5F 31             	and		r1,#15		; make sure it's a nybble
   1365 0000C7BA FF 4F 16 10             	cmp		r1,#10		; > 10 ?
   1366 0000C7BE 01 A0                   	blt		tah1
   1367 0000C7C0 07 61                   	add		r1,r1,#7	; bump it up to the letter 'A'
   1368 0000C7C2                        tah1
   1369 0000C7C2 30 61                   	add		r1,r1,#'0'	; bump up to ascii '0'
   1370 0000C7C4 F0 80                   	ret
                                        
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** POKE *** & SYSX ***
                                        ;
                                        ; 'POKE expr1,expr2' stores the byte from 'expr2' into the memory
                                        ; address specified by 'expr1'.
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 24
noc_boot11.a
                                        ;
                                        ; 'SYSX expr' jumps to the machine language subroutine whose
                                        ; starting address is specified by 'expr'.  The subroutine can use
                                        ; all registers but must leave the stack the way it found it.
                                        ; The subroutine returns to the interpreter by executing an RET.
                                        ;
   1386 0000C7C6                        POKE
   1387 0000C7C6 FE 6E                   	sub		sp,sp,#2
   1388 0000C7C8 29 AF                   	call	OREXPR		; get the memory address
   1389 0000C7CA 41 40 0C AF             	call	TSTC		; it must be followed by a comma
   1390 0000C7CE 2C 10                   	db	',',PKER-*+1
   1391 0000C7D0 E0 D1                   	sw		r1,[sp]	    ; save the address
   1392 0000C7D2 24 AF                   	call	OREXPR		; get the byte to be POKE'd
   1393 0000C7D4 E0 F2                   	lw		r2,[sp]	    ; get the address back
   1394 0000C7D6 20 C1                   	sb		r1,[r2]		; store the byte in memory
   1395 0000C7D8 02 6E                   	add		sp,sp,#2
   1396 0000C7DA E3 4F 0A AE             	br		FINISH
   1397 0000C7DE                        PKER
   1398 0000C7DE 31 4D 0E 11             	lea		r1,msgComma
   1399 0000C7E2 26 40 0C AE             	br		ERROR		; if no comma, say "What?"
                                        
                                        
   1402 0000C7E6                        POKEW
   1403 0000C7E6 FE 6E                   	sub		sp,sp,#2
   1404 0000C7E8 19 AF                   	call	OREXPR		; get the memory address
   1405 0000C7EA 40 40 0C AF             	call	TSTC		; it must be followed by a comma
   1406 0000C7EE 2C F0                   	db	',',PKER-*+1
   1407 0000C7F0 E0 D1                   	sw		r1,[sp]	    ; save the address
   1408 0000C7F2 14 AF                   	call	OREXPR		; get the byte to be POKE'd
   1409 0000C7F4 E0 F2                   	lw		r2,[sp]	    ; get the address back
   1410 0000C7F6 20 D1                   	sw		r1,[r2]		; store the word in memory
   1411 0000C7F8 02 6E                   	add		sp,sp,#2
   1412 0000C7FA E2 4F 0A AE             	jmp		FINISH
                                        
                                        
   1415 0000C7FE                        SYSX
   1416 0000C7FE FE 6E                   	sub		sp,sp,#2
   1417 0000C800 0D AF                   	call	OREXPR		; get the subroutine's address
   1418 0000C802 16 20                   	or		r0,r1		; make sure we got a valid address
   1419 0000C804 04 A9                   	bne		sysx1
   1420 0000C806 37 4D 03 11             	lea		r1,msgSYSBad
   1421 0000C80A 25 40 08 AE             	br		ERROR
   1422 0000C80E                        sysx1
   1423 0000C80E E0 D8                   	sw		r8,[sp]	    ; save the text pointer
   1424 0000C810 BF 49 06 AF             	call	[r1]		; jump to the subroutine
   1425 0000C814 E0 F8                   	lw		r8,[sp]	    ; restore the text pointer
   1426 0000C816 02 6E                   	add		sp,sp,#2
   1427 0000C818 E1 4F 0B AE             	br		FINISH
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** EXPR ***
                                        ;
                                        ; 'EXPR' evaluates arithmetical or logical expressions.
                                        ; <OREXPR>::= <ANDEXPR> OR <ANDEXPR> ...
                                        ; <ANDEXPR>::=<EXPR> AND <EXPR> ...
                                        ; <EXPR>::=<EXPR2>
                                        ;	   <EXPR2><rel.op.><EXPR2>
                                        ; where <rel.op.> is one of the operators in TAB8 and the result
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 25
noc_boot11.a
                                        ; of these operations is 1 if true and 0 if false.
                                        ; <EXPR2>::=(+ or -)<EXPR3>(+ or -)<EXPR3>(...
                                        ; where () are optional and (... are optional repeats.
                                        ; <EXPR3>::=<EXPR4>( <* or /><EXPR4> )(...
                                        ; <EXPR4>::=<variable>
                                        ;	    <function>
                                        ;	    (<EXPR>)
                                        ; <EXPR> is recursive so that the variable '@' can have an <EXPR>
                                        ; as an index, functions can have an <EXPR> as arguments, and
                                        ; <EXPR4> can be an <EXPR> in parenthesis.
                                        ;
                                        
                                        
                                        ; <OREXPR>::=<ANDEXPR> OR <ANDEXPR> ...
                                        ;
   1455 0000C81C                        OREXPR
   1456 0000C81C FC 6E                   	sub		sp,sp,#4
   1457 0000C81E E0 DF                   	sw		lr,[sp]
   1458 0000C820 0F AF                   	call	ANDEXPR		; get first <ANDEXPR>
   1459 0000C822                        XP_OR1
   1460 0000C822 E2 D1                   	sw		r1,2[sp]	; save <ANDEXPR> value
   1461 0000C824 25 4C 01 19             	lea		r9,TAB10		; look up a logical operator
   1462 0000C828 2B 4C 00 1A             	lea		r10,TAB10_1
   1463 0000C82C D4 4F 06 AE             	jmp		EXEC		; go do it
                                        
   1465 0000C830                        XP_OR
   1466 0000C830 07 AF                       call    ANDEXPR
   1467 0000C832 E2 F2                       lw      r2,2[sp]
   1468 0000C834 26 21                       or      r1,r2
   1469 0000C836 F5 BE                       br      XP_OR1
                                        
   1471 0000C838                        XP_ORX
   1472 0000C838 E2 F1                   	lw		r1,2[sp]
   1473 0000C83A E0 FF                       lw      lr,[sp]
   1474 0000C83C 04 6E                       add     sp,sp,#4
   1475 0000C83E F0 80                       ret
                                        
                                        
                                        ; <ANDEXPR>::=<EXPR> AND <EXPR> ...
                                        ;
   1480 0000C840                        ANDEXPR
   1481 0000C840 FC 6E                   	sub		sp,sp,#4
   1482 0000C842 E0 DF                   	sw		lr,[sp]
   1483 0000C844 37 AF                   	call	EXPR		; get first <EXPR>
   1484 0000C846                        XP_AND1
   1485 0000C846 E2 D1                   	sw		r1,2[sp]	; save <EXPR> value
   1486 0000C848 24 4C 0D 19             	lea		r9,TAB9		; look up a logical operator
   1487 0000C84C 2A 4C 0C 1A             	lea		r10,TAB9_1
   1488 0000C850 D3 4F 04 AE             	jmp		EXEC		; go do it
                                        
   1490 0000C854                        XP_AND
   1491 0000C854 2F AF                       call    EXPR
   1492 0000C856 E2 F2                       lw      r2,2[sp]
   1493 0000C858 25 21                       and     r1,r2
   1494 0000C85A F5 BE                       br      XP_AND1
                                        
   1496 0000C85C                        XP_ANDX
   1497 0000C85C E2 F1                   	lw		r1,2[sp]
   1498 0000C85E E0 FF                       lw      lr,[sp]
   1499 0000C860 04 6E                       add     sp,sp,#4
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 26
noc_boot11.a
   1500 0000C862 F0 80                       ret
                                        
                                        
                                        ; Determine if the character is a digit
                                        ;   Parameters
                                        ;       r2 = char to test
                                        ;   Returns
                                        ;       r1 = 1 if digit, otherwise 0
                                        ;
   1509 0000C864                        isDigit
   1510 0000C864 FD 4F 10 10                 cmp     r1,#'0'
   1511 0000C868 05 A0                       blt     isDigitFalse
   1512 0000C86A FC 4F 17 10                 cmp     r1,#'9'
   1513 0000C86E 02 A3                       bgt     isDigitFalse
   1514 0000C870 01 11                       lw      r1,#1
   1515 0000C872 F0 80                       ret
   1516 0000C874                        isDigitFalse
   1517 0000C874 00 11                       lw      r1,#0
   1518 0000C876 F0 80                       ret
                                        
                                        
                                        ; Determine if the character is a alphabetic
                                        ;   Parameters
                                        ;       r2 = char to test
                                        ;   Returns
                                        ;       r1 = 1 if alpha, otherwise 0
                                        ;
   1527 0000C878                        isAlpha
   1528 0000C878 FB 4F 1F 10                 cmp     r1,#'A'
   1529 0000C87C 0B A0                       blt     isAlphaFalse
   1530 0000C87E FA 4F 16 10                 cmp     r1,#'Z'
   1531 0000C882 06 A2                       ble     isAlphaTrue
   1532 0000C884 F9 4F 1F 10                 cmp     r1,#'a'
   1533 0000C888 05 A0                       blt     isAlphaFalse
   1534 0000C88A F8 4F 16 10                 cmp     r1,#'z'
   1535 0000C88E 02 A3                       bgt     isAlphaFalse
   1536 0000C890                        isAlphaTrue
   1537 0000C890 01 11                       lw      r1,#1
   1538 0000C892 F0 80                       ret
   1539 0000C894                        isAlphaFalse
   1540 0000C894 00 11                       lw      r1,#0
   1541 0000C896 F0 80                       ret
                                        
                                        
                                        ; Determine if the character is a alphanumeric
                                        ;   Parameters
                                        ;       r1 = char to test
                                        ;   Returns
                                        ;       r1 = 1 if alpha, otherwise 0
                                        ;
   1550 0000C898                        isAlnum
   1551 0000C898 FE 6E                       sub     sp,sp,#2
   1552 0000C89A E0 DF                       sw      lr,[sp]
   1553 0000C89C 10 12                       lw      r2,r1		; save test char
   1554 0000C89E E2 BF                       call    isDigit
   1555 0000C8A0 06 A9                       bne		isDigitx	; if it is a digit
   1556 0000C8A2 20 11                       lw      r1,r2		; get back test char
   1557 0000C8A4 E9 BF                       call    isAlpha
   1558 0000C8A6 E0 FF                       lw      lr,[sp]
   1559 0000C8A8 02 6E                       add		sp,sp,#2
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 27
noc_boot11.a
   1560 0000C8AA 16 21                       or      r1,r1
   1561 0000C8AC F0 80                       ret
   1562 0000C8AE                        isDigitx
   1563 0000C8AE E0 FF                       lw      lr,[sp]
   1564 0000C8B0 02 6E                       add     sp,sp,#2	; return Z=0
   1565 0000C8B2 F0 80                       ret
                                        
                                        
   1568 0000C8B4                        EXPR
   1569 0000C8B4 FC 6E                   	sub		sp,sp,#4
   1570 0000C8B6 E0 DF                   	sw		lr,[sp]
   1571 0000C8B8 39 AF                   	call	EXPR2
   1572 0000C8BA E2 D1                   	sw		r1,2[sp]	; save <EXPR2> value
   1573 0000C8BC 24 4C 03 19             	lea		r9,TAB8		; look up a relational operator
   1574 0000C8C0 29 4C 0E 1A             	lea		r10,TAB8_1
   1575 0000C8C4 CF 4F 0A AE             	jmp		EXEC		; go do it
                                        
   1577 0000C8C8                        XP11
   1578 0000C8C8 E2 F1                   	lw		r1,2[sp]
   1579 0000C8CA 28 AF                   	call	XP18	; is it ">="?
   1580 0000C8CC 1D 22                   	cmp		r2,r1
   1581 0000C8CE 1E A1                   	bge		XPRT1	; no, return r2=1
   1582 0000C8D0 19 AE                   	br		XPRT0	; else return r2=0
                                        
   1584 0000C8D2                        XP12
   1585 0000C8D2 E2 F1                   	lw		r1,2[sp]
   1586 0000C8D4 23 AF                   	call	XP18	; is it "<>"?
   1587 0000C8D6 1D 22                   	cmp		r2,r1
   1588 0000C8D8 19 A9                   	bne		XPRT1	; no, return r2=1
   1589 0000C8DA 14 AE                   	br		XPRT0	; else return r2=0
                                        
   1591 0000C8DC                        XP13
   1592 0000C8DC E2 F1                   	lw		r1,2[sp]
   1593 0000C8DE 1E AF                   	call	XP18	; is it ">"?
   1594 0000C8E0 1D 22                   	cmp		r2,r1
   1595 0000C8E2 14 A3                   	bgt		XPRT1	; no, return r2=1
   1596 0000C8E4 0F AE                   	br		XPRT0	; else return r2=0
                                        
   1598 0000C8E6                        XP14
   1599 0000C8E6 E2 F1                   	lw		r1,2[sp]
   1600 0000C8E8 19 AF                   	call	XP18	; is it "<="?
   1601 0000C8EA 1D 22                   	cmp		r2,r1
   1602 0000C8EC 0F A2                   	ble		XPRT1	; no, return r2=1
   1603 0000C8EE 0A AE                   	br		XPRT0	; else return r2=0
                                        
   1605 0000C8F0                        XP15
   1606 0000C8F0 E2 F1                   	lw		r1,2[sp]
   1607 0000C8F2 14 AF                   	call	XP18	; is it "="?
   1608 0000C8F4 1D 22                   	cmp		r2,r1
   1609 0000C8F6 0A A8                   	beq		XPRT1	; if not, return r2=1
   1610 0000C8F8 05 AE                   	br		XPRT0	; else return r2=0
                                        
                                        
   1613 0000C8FA                        XP16
   1614 0000C8FA E2 F1                   	lw		r1,2[sp]
   1615 0000C8FC 0F AF                   	call	XP18	; is it "<"?
   1616 0000C8FE 1D 22                   	cmp		r2,r1
   1617 0000C900 05 A0                   	blt		XPRT1	; if not, return r2=1
   1618 0000C902 00 AE                   	br		XPRT0	; else return r2=0
                                        
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 28
noc_boot11.a
   1620 0000C904                        XPRT0
   1621 0000C904 E0 FF                   	lw		lr,[sp]
   1622 0000C906 04 6E                   	add		sp,sp,#4
   1623 0000C908 00 11                   	lw		r1,#0   ; return r1=0 (false)
   1624 0000C90A F0 80                   	ret
                                        
   1626 0000C90C                        XPRT1
   1627 0000C90C E0 FF                   	lw		lr,[sp]
   1628 0000C90E 04 6E                   	add		sp,sp,#4
   1629 0000C910 01 11                   	lw		r1,#1	; return r1=1 (true)
   1630 0000C912 F0 80                   	ret
                                        
   1632 0000C914                        XP17				; it's not a rel. operator
   1633 0000C914 E2 F1                   	lw		r1,2[sp]	; return r2=<EXPR2>
   1634 0000C916 E0 FF                   	lw		lr,[sp]
   1635 0000C918 04 6E                   	add		sp,sp,#4
   1636 0000C91A F0 80                   	ret
                                        
   1638 0000C91C                        XP18
   1639 0000C91C FC 6E                   	sub		sp,sp,#4
   1640 0000C91E E0 DF                   	sw		lr,[sp]
   1641 0000C920 E2 D1                   	sw		r1,2[sp]
   1642 0000C922 04 AF                   	call	EXPR2		; do a second <EXPR2>
   1643 0000C924 E2 F2                   	lw		r2,2[sp]
   1644 0000C926 E0 FF                   	lw		lr,[sp]
   1645 0000C928 04 6E                   	add		sp,sp,#4
   1646 0000C92A F0 80                   	ret
                                        
                                        ; <EXPR2>::=(+ or -)<EXPR3>(+ or -)<EXPR3>(...
                                        
   1650 0000C92C                        EXPR2
   1651 0000C92C FC 6E                   	sub		sp,sp,#4
   1652 0000C92E E0 DF                   	sw		lr,[sp]
   1653 0000C930 36 40 09 AF             	call	TSTC		; negative sign?
   1654 0000C934 2D 08                   	db	'-',XP21-*+1
   1655 0000C936 00 11                   	lw		r1,#0		; yes, fake '0-'
   1656 0000C938 E2 D1                   	sw		r1,2[sp]
   1657 0000C93A 0F AE                   	br		XP26
   1658 0000C93C                        XP21
   1659 0000C93C 36 40 03 AF             	call	TSTC		; positive sign? ignore it
   1660 0000C940 2B 02                   	db	'+',XP22-*+1
   1661 0000C942                        XP22
   1662 0000C942 12 AF                   	call	EXPR3		; first <EXPR3>
   1663 0000C944                        XP23
   1664 0000C944 E2 D1                   	sw		r1,2[sp]	; yes, save the value
   1665 0000C946 35 40 0E AF             	call	TSTC		; add?
   1666 0000C94A 2B 0A                   	db	'+',XP25-*+1
   1667 0000C94C 0D AF                   	call	EXPR3		; get the second <EXPR3>
   1668 0000C94E                        XP24
   1669 0000C94E E2 F2                   	lw		r2,2[sp]
   1670 0000C950 20 21                   	add		r1,r2		; add it to the first <EXPR3>
                                        ;	BVS.L	QHOW		brnch if there's an overflow
   1672 0000C952 F8 BE                   	br		XP23		; else go back for more operations
   1673 0000C954                        XP25
   1674 0000C954 35 40 07 AF             	call	TSTC		; subtract?
   1675 0000C958 2D 08                   	db	'-',XP45-*+1
   1676 0000C95A                        XP26
   1677 0000C95A 06 AF                   	call	EXPR3		; get second <EXPR3>
   1678 0000C95C 20 31                   	neg		r1			; change its sign
   1679 0000C95E F7 BE                   	br		XP24		; and do an addition
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 29
noc_boot11.a
                                        
   1681 0000C960                        XP45
   1682 0000C960 E2 F1                   	lw		r1,2[sp]
   1683 0000C962 E0 FF                   	lw		lr,[sp]
   1684 0000C964 04 6E                   	add		sp,sp,#4
   1685 0000C966 F0 80                   	ret
                                        
                                        
                                        ; <EXPR3>::=<EXPR4>( <* or /><EXPR4> )(...
                                        
   1690 0000C968                        EXPR3
   1691 0000C968 FC 6E                   	sub		sp,sp,#4
   1692 0000C96A E0 DF                   	sw		lr,[sp]
   1693 0000C96C 14 AF                   	call	EXPR4		; get first <EXPR4>
   1694 0000C96E                        XP31
   1695 0000C96E E2 D1                   	sw		r1,2[sp]	; yes, save that first result
   1696 0000C970 34 40 09 AF             	call	TSTC		; multiply?
   1697 0000C974 2A 0A                   	db	'*',XP34-*+1
   1698 0000C976 0F AF                   	call	EXPR4		; get second <EXPR4>
   1699 0000C978 E2 F2                   	lw		r2,2[sp]
   1700 0000C97A B8 AF                   	call	MULT32		; multiply the two
   1701 0000C97C F8 BE                   	br		XP31		 ; then look for more terms
   1702 0000C97E                        XP34
   1703 0000C97E 34 40 02 AF             	call	TSTC		; divide?
   1704 0000C982 2F 0C                   	db	'/',XP47-*+1
   1705 0000C984 08 AF                   	call	EXPR4		; get second <EXPR4>
   1706 0000C986 10 12                   	lw      r2,r1
   1707 0000C988 E2 F1                   	lw		r1,2[sp]
   1708 0000C98A CD AF                   	call	DIV32		; do the division
   1709 0000C98C F0 BE                   	br		XP31		; go back for any more terms
                                        
   1711 0000C98E                        XP47
   1712 0000C98E E2 F1                   	lw		r1,2[sp]
   1713 0000C990 E0 FF                   	lw		lr,[sp]
   1714 0000C992 04 6E                   	add		sp,sp,#4
   1715 0000C994 F0 80                   	ret
                                        
                                        
                                        ; Functions are called through EXPR4
                                        ; <EXPR4>::=<variable>
                                        ;	    <function>
                                        ;	    (<EXPR>)
                                        
   1723 0000C996                        EXPR4
   1724 0000C996 FA 6E                       sub     sp,sp,#6
   1725 0000C998 E0 DF                       sw      lr,[sp]
   1726 0000C99A 21 4C 08 19             	lea		r9,TAB4		; find possible function
   1727 0000C99E 28 4C 04 1A             	lea		r10,TAB4_1
   1728 0000C9A2 C8 4F 0B AE             	jmp		EXEC        ; branch to function which does subsequent
                                        	                    ; ret for EXPR4
                                        
   1731 0000C9A6                        XP40                    ; we get here if it wasn't a function
   1732 0000C9A6 00 11                   	lw		r1,#0
   1733 0000C9A8 1D AF                   	call	TSTV		
   1734 0000C9AA 04 A8                   	beq     XP41        ; nor a variable
   1735 0000C9AC 10 F1                   	lw		r1,[r1]		; if a variable, return its value in r1
   1736 0000C9AE E0 FF                   	lw      lr,[sp]
   1737 0000C9B0 06 6E                   	add     sp,sp,#6
   1738 0000C9B2 F0 80                   	ret
   1739 0000C9B4                        XP41
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 30
noc_boot11.a
   1740 0000C9B4 33 40 09 AF             	call	TSTNUM		; or is it a number?
   1741 0000C9B8 26 22                   	or		r2,r2		; (if not, # of digits will be zero)
   1742 0000C9BA 01 A9                   	bne		XP46		; if so, return it in r1
   1743 0000C9BC 03 AF                   	call    PARN        ; check for (EXPR)
   1744 0000C9BE                        XP46
   1745 0000C9BE E0 FF                   	lw      lr,[sp]
   1746 0000C9C0 06 6E                   	add     sp,sp,#6
   1747 0000C9C2 F0 80                   	ret
                                        
                                        
                                        ; Check for a parenthesized expression
   1751 0000C9C4                        PARN
   1752 0000C9C4 FE 6E                   	sub		sp,sp,#2
   1753 0000C9C6 E0 DF                   	sw		lr,[sp]
   1754 0000C9C8 31 40 0D AF             	call	TSTC		; else look for ( OREXPR )
   1755 0000C9CC 28 10                   	db	'(',XP43-*+1
   1756 0000C9CE 26 BF                   	call	OREXPR
   1757 0000C9D0 31 40 09 AF             	call	TSTC
   1758 0000C9D4 29 08                   	db	')',XP43-*+1
   1759 0000C9D6                        XP42
   1760 0000C9D6 E0 FF                   	lw		lr,[sp]
   1761 0000C9D8 02 6E                   	add		sp,sp,#2
   1762 0000C9DA F0 80                   	ret
   1763 0000C9DC                        XP43
   1764 0000C9DC 29 4D 0B 11             	lea		r1,msgWhat
   1765 0000C9E0 16 40 0D AE             	br		ERROR
                                        
                                        
                                        ; ===== Test for a valid variable name.  Returns Z=1 if not
                                        ;	found, else returns Z=0 and the address of the
                                        ;	variable in r1.
                                        ; Parameters
                                        ;	r1 = 1 = allocate if not found
                                        ; Returns
                                        ;	r1 = address of variable, zero if not found
                                        
   1776 0000C9E4                        TSTV
   1777 0000C9E4 FA 6E                   	sub		sp,sp,#6
   1778 0000C9E6 E0 DF                   	sw		lr,[sp]
   1779 0000C9E8 E2 D5                   	sw		r5,2[sp]
   1780 0000C9EA 10 15                   	lw		r5,r1		; allocate flag
   1781 0000C9EC 33 40 0E AF             	call	IGNBLK
   1782 0000C9F0 80 E1                   	lb		r1,[r8]		; look at the program text
   1783 0000C9F2 FC 4F 10 10             	cmp     r1,#'@'
   1784 0000C9F6 1C A0                   	blt     tstv_notfound   ; C=1: not a variable
   1785 0000C9F8 12 A9                   	bne		TV1			; brnch if not "@" array
   1786 0000C9FA 01 68                   	add		r8,r8,#1	; If it is, it should be
   1787 0000C9FC E3 BF                   	call	PARN		; followed by (EXPR) as its index.
   1788 0000C9FE 81 31                   	shl     r1,#1
   1789 0000CA00 81 31                   	shl     r1,#1
                                        ;	BCS.L	QHOW		say "How?" if index is too big
   1791 0000CA02 E4 D1                       sw      r1,4[sp]    ; save the index
   1792 0000CA04 F4 6E                       sub		sp,sp,#12
   1793 0000CA06 E0 DF                       sw		lr,[sp]
   1794 0000CA08 10 40 0F AF             	call	SIZEX		; get amount of free memory
   1795 0000CA0C E4 F2                   	lw      r2,4[sp]    ; get back the index
   1796 0000CA0E 1D 22                   	cmp     r2,r1       ; see if there's enough memory
   1797 0000CA10 02 A4                   	bltu	TV2
   1798 0000CA12 14 40 0F AE             	jmp    	QSORRY		; if not, say "Sorry"
   1799 0000CA16                        TV2
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 31
noc_boot11.a
   1800 0000CA16 09 40 08 F1             	lw      r1,VARBGN   ; put address of array element...
   1801 0000CA1A 22 21                   	sub     r1,r2       ; into r1 (neg. offset is used)
   1802 0000CA1C 05 AE                   	br      TSTVRT
   1803 0000CA1E                        TV1	
   1804 0000CA1E 0D AF                       call    getVarName      ; get variable name
   1805 0000CA20 07 A8                       beq     tstv_notfound   ; if not, set Z=1 and return
   1806 0000CA22 50 12                       lw		r2,r5
   1807 0000CA24 45 AF                       call    findVar     ; find or allocate
   1808 0000CA26 04 A8                       beq		tstv_notfound
   1809 0000CA28                        TSTVRT
   1810 0000CA28 E2 F5                   	lw		r5,2[sp]
   1811 0000CA2A E0 FF                   	lw		lr,[sp]
   1812 0000CA2C 06 6E                   	add		sp,sp,#6    ; Z=0 (found)
   1813 0000CA2E F0 80                   	ret
   1814 0000CA30                        tstv_notfound
   1815 0000CA30 E2 F5                   	lw		r5,2[sp]
   1816 0000CA32 E0 FF                       lw      lr,[sp]
   1817 0000CA34 06 6E                       add     sp,sp,#6
   1818 0000CA36 00 11                       lw      r1,#0       ; Z=1 if not found
   1819 0000CA38 F0 80                       ret
                                        
                                        
                                        ; Returns
                                        ;   r1 = 3 character variable name + type
                                        ;
   1825 0000CA3A                        getVarName
   1826 0000CA3A FA 6E                       sub     sp,sp,#6
   1827 0000CA3C E0 DF                       sw      lr,[sp]
   1828 0000CA3E E4 D5                       sw		r5,4[sp]
                                        
   1830 0000CA40 80 E1                       lb      r1,[r8]     ; get first character
   1831 0000CA42 E2 D1                       sw		r1,2[sp]	; save off current name
   1832 0000CA44 19 BF                       call    isAlpha
   1833 0000CA46 2F A8                       beq     gvn1
   1834 0000CA48 02 15                       lw      r5,#2       ; loop twice more
                                        
                                        	; check for second/third character
   1837 0000CA4A                        gvn4
   1838 0000CA4A 01 68                   	add     r8,r8,#1
   1839 0000CA4C 80 E1                   	lb      r1,[r8]     ; do we have another char ?
   1840 0000CA4E 24 BF                   	call    isAlnum
   1841 0000CA50 12 A8                   	beq     gvn2        ; nope
   1842 0000CA52 E2 F1                   	lw      r1,2[sp]    ; get varname
   1843 0000CA54 81 31                   	shl     r1,#1       ; shift left by eight
   1844 0000CA56 81 31                   	shl     r1,#1       ; shift left by eight
   1845 0000CA58 81 31                   	shl     r1,#1       ; shift left by eight
   1846 0000CA5A 81 31                   	shl     r1,#1       ; shift left by eight
   1847 0000CA5C 81 31                   	shl     r1,#1       ; shift left by eight
   1848 0000CA5E 81 31                   	shl     r1,#1       ; shift left by eight
   1849 0000CA60 81 31                   	shl     r1,#1       ; shift left by eight
   1850 0000CA62 81 31                   	shl     r1,#1       ; shift left by eight
   1851 0000CA64 80 E2                   	lb      r2,[r8]
   1852 0000CA66 26 21                   	or      r1,r2       ; add in new char
   1853 0000CA68 E2 D1                       sw      r1,2[sp]   ; save off name again
   1854 0000CA6A FF 65                       sub		r5,r5,#1
   1855 0000CA6C EE B9                       bne     gvn4
                                        
                                            ; now ignore extra variable name characters
   1858 0000CA6E                        gvn6
   1859 0000CA6E 01 68                       add     r8,r8,#1
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 32
noc_boot11.a
   1860 0000CA70 80 E1                       lb      r1,[r8]
   1861 0000CA72 12 BF                       call    isAlnum
   1862 0000CA74 FC B9                       bne     gvn6        ; keep looping as long as we have identifier chars
                                            
   1864 0000CA76                        gvn2
   1865 0000CA76 80 E1                   	lb		r1,[r8]
   1866 0000CA78 FD 4F 1B 10                 cmp     r1,#'%'
   1867 0000CA7C 05 A8                       beq     gvn3
   1868 0000CA7E FD 4F 1C 10                 cmp     r1,#'$'
   1869 0000CA82 02 A8                       beq     gvn3
   1870 0000CA84 00 11                       lw      r1,#0
   1871 0000CA86 FF 68                       sub     r8,r8,#1
                                        
                                            ; insert variable type indicator and return
   1874 0000CA88                        gvn3
   1875 0000CA88 01 68                       add     r8,r8,#1
   1876 0000CA8A E2 F2                       lw      r2,2[sp]
   1877 0000CA8C 81 32                       shl     r2,#1
   1878 0000CA8E 81 32                       shl     r2,#1
   1879 0000CA90 81 32                       shl     r2,#1
   1880 0000CA92 81 32                       shl     r2,#1
   1881 0000CA94 81 32                       shl     r2,#1
   1882 0000CA96 81 32                       shl     r2,#1
   1883 0000CA98 81 32                       shl     r2,#1
   1884 0000CA9A 81 32                       shl     r2,#1
   1885 0000CA9C 26 21                       or      r1,r2       ; add in variable type
   1886 0000CA9E E0 FF                       lw      lr,[sp]
   1887 0000CAA0 E4 F5                       lw		r5,4[sp]
   1888 0000CAA2 06 6E                       add     sp,sp,#6   ; return Z = 0, r1 = varname
   1889 0000CAA4 F0 80                       ret
                                        
                                            ; not a variable name
   1892 0000CAA6                        gvn1
   1893 0000CAA6 E0 FF                       lw      lr,[sp]
   1894 0000CAA8 E4 F5                       lw		r5,4[sp]
   1895 0000CAAA 06 6E                       add     sp,sp,#6
   1896 0000CAAC 00 11                       lw      r1,#0       ; return Z = 1 if not a varname
   1897 0000CAAE F0 80                       ret
                                        
                                        
                                        ; Find variable
                                        ;   r1 = varname
                                        ;	r2 = allocate flag
                                        ; Returns
                                        ;   r1 = variable address, Z =0 if found / allocated, Z=1 if not found
                                        
   1906 0000CAB0                        findVar
   1907 0000CAB0 FC 6E                       sub     sp,sp,#4
   1908 0000CAB2 E0 DF                       sw      lr,[sp]
   1909 0000CAB4 E2 D7                       sw      r7,2[sp]
   1910 0000CAB6 09 40 08 F3                 lw      r3,VARBGN
   1911 0000CABA                        fv4
   1912 0000CABA 30 F7                       lw      r7,[r3]     ; get varname / type
   1913 0000CABC 0A A8                       beq     fv3         ; no more vars ?
   1914 0000CABE 7D 21                       cmp     r1,r7       ; match ?
   1915 0000CAC0 0B A8                       beq     fv1
   1916 0000CAC2 08 63                       add     r3,r3,#8    ; move to next var
   1917 0000CAC4 0A 40 00 F7                 lw      r7,STKBOT
   1918 0000CAC8 7D 23                       cmp     r3,r7
   1919 0000CACA F7 B0                       blt     fv4         ; loop back to look at next var
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 33
noc_boot11.a
                                        
                                            ; variable not found
                                            ; no more memory
   1923 0000CACC 2E 4D 0E 11                 lea     r1,msgVarSpace
   1924 0000CAD0 F6 AE                       br      ERROR
                                        ;    lw      lr,[sp]
                                        ;    lw      r7,2[sp]
                                        ;    add     sp,sp,#4
                                        ;    lw      r1,#0
                                        ;    ret
                                        
                                            ; variable not found
                                            ; allocate new ?
   1933 0000CAD2                        fv3
   1934 0000CAD2 26 22                   	or		r2,r2
   1935 0000CAD4 06 A8                   	beq		fv2
   1936 0000CAD6 30 D1                       sw      r1,[r3]     ; save varname / type
                                            ; found variable
                                            ; return address
   1939 0000CAD8                        fv1
   1940 0000CAD8 34 11                       add     r1,r3,#4
   1941 0000CADA E0 FF                       lw      lr,[sp]
   1942 0000CADC E2 F7                       lw      r7,2[sp]
   1943 0000CADE 04 6E                       add     sp,sp,#4    ; Z = 0, r1 = address
   1944 0000CAE0 F0 80                       ret
                                        
                                            ; didn't find var and not allocating
   1947 0000CAE2                        fv2
   1948 0000CAE2 E0 FF                       lw      lr,[sp]
   1949 0000CAE4 E2 F7                       lw      r7,2[sp]
   1950 0000CAE6 04 6E                       add     sp,sp,#4    ; Z = 0, r1 = address
   1951 0000CAE8 00 11                   	lw		r1,#0		; Z = 1, r1 = 0
   1952 0000CAEA F0 80                       ret
                                        
                                        
                                        ; ===== Multiplies the 32 bit values in r1 and r2, returning
                                        ;	the 32 bit result in r1.
                                        ;
                                        
   1959 0000CAEC                        MULT32
   1960 0000CAEC FA 6E                   	sub		sp,sp,#6
   1961 0000CAEE E0 D5                   	sw		r5,[sp]		; w
   1962 0000CAF0 E2 D6                   	sw		r6,2[sp]	; s
   1963 0000CAF2 E4 D7                   	sw		r7,4[sp]
                                        
   1965 0000CAF4 00 15                   	lw		r5,#0		; w = 0;
   1966 0000CAF6 10 16                   	lw		r6,r1
   1967 0000CAF8 24 26                   	xor		r6,r2		; s = a ^ b
   1968 0000CAFA 16 21                   	or		r1,r1
   1969 0000CAFC 01 AB                   	bpl		mult1
   1970 0000CAFE 20 31                   	neg		r1
   1971 0000CB00                        mult1
   1972 0000CB00 26 22                   	or		r2,r2
   1973 0000CB02 01 AB                   	bpl		mult2
   1974 0000CB04 20 32                   	neg		r2
   1975 0000CB06                        mult2
   1976 0000CB06 10 17                   	lw		r7,r1
   1977 0000CB08 51 37                   	and		r7,#1
   1978 0000CB0A 01 A8                   	beq		mult3
   1979 0000CB0C 20 25                   	add		r5,r2		; w += b
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 34
noc_boot11.a
   1980 0000CB0E                        mult3
   1981 0000CB0E 81 32                   	shl		r2,#1		; b <<= 1
   1982 0000CB10 A1 31                   	shr		r1,#1		; a >>= 1
   1983 0000CB12 F9 B9                   	bne		mult2       ; a = 0 ?
   1984 0000CB14                        mult4
   1985 0000CB14 66 26                       or      r6,r6
   1986 0000CB16 01 AB                   	bpl		mult5
   1987 0000CB18 20 35                   	neg		r5
   1988 0000CB1A                        mult5
   1989 0000CB1A 50 11                   	lw		r1,r5
   1990 0000CB1C E4 F7                   	lw		r7,4[sp]
   1991 0000CB1E E2 F6                   	lw		r6,2[sp]
   1992 0000CB20 E0 F5                   	lw		r5,[sp]
   1993 0000CB22 06 6E                   	add		sp,sp,#6
   1994 0000CB24 F0 80                   	ret
                                        
                                        
                                        ; ===== Divide the 32 bit value in r2 by the 32 bit value in r3.
                                        ;	Returns the 32 bit quotient in r1, remainder in r2
                                        ;
                                        ; r2 = a
                                        ; r3 = b
                                        ; r6 = remainder
                                        ; r7 = iteration count
                                        ; r8 = sign
                                        ;
                                        
                                        ; q = a / b
                                        ; a = r1
                                        ; b = r2
                                        ; q = r2
                                        
   2012 0000CB26                        DIV32
   2013 0000CB26 26 22                       or      r2,r2       ; check for divide-by-zero
   2014 0000CB28 03 A9                       bne		div6
   2015 0000CB2A 2D 4D 0B 11                 lea		r1,msgDivZero
   2016 0000CB2E C7 AE                       br		ERROR		; divide by zero error
   2017 0000CB30                        div6
   2018 0000CB30 FA 6E                   	sub		sp,sp,#6
   2019 0000CB32 E0 D6                   	sw		r6,[sp]
   2020 0000CB34 E2 D7                   	sw		r7,2[sp]
   2021 0000CB36 E4 D8                   	sw		r8,4[sp]
                                        
   2023 0000CB38 02 40 00 18                 lw      r8,#32      ; iteration count for 32 bits
   2024 0000CB3C 00 16                   	lw		r6,#0		; r = 0
   2025 0000CB3E 20 17                       lw      r7,r2       ; r7 = sign of result
   2026 0000CB40 14 27                       xor     r7,r1
   2027 0000CB42 16 21                   	or	    r1,r1	    ; take absolute value of r1 (a)
   2028 0000CB44 01 AB                   	bpl     div1
   2029 0000CB46 20 31                   	neg     r1
   2030 0000CB48                        div1
   2031 0000CB48 26 22                       or      r2,r2	    ; take absolute value of r2 (b)
   2032 0000CB4A 01 AB                   	bpl	    div2
   2033 0000CB4C 20 32                   	neg     r2
   2034 0000CB4E                        div2
   2035 0000CB4E 81 31                   	shl		r1,#1		; a <<= 1
   2036 0000CB50 61 26                   	adc		r6,r6		; r <<= 1
   2037 0000CB52 6D 22                   	cmp		r2,r6		; b < r ?
   2038 0000CB54 02 A7                   	bgtu	div4
   2039 0000CB56 22 26                   	sub		r6,r2		; r -= b
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 35
noc_boot11.a
   2040 0000CB58 61 31                   	or      r1,#1       ; a |= 1
   2041 0000CB5A                        div4
   2042 0000CB5A FF 68                   	sub		r8,r8,#1
   2043 0000CB5C F8 B9                       bne     div2        ; n--
   2044 0000CB5E 76 27                   	or      r7,r7
   2045 0000CB60 01 AB                   	bpl     div5
   2046 0000CB62 20 31                   	neg     r1
   2047 0000CB64                        div5
   2048 0000CB64 60 12                   	lw		r2,r6		; r2 = r
   2049 0000CB66 E2 F7                   	lw		r7,2[sp]
   2050 0000CB68 E4 F8                   	lw		r8,4[sp]
   2051 0000CB6A E0 F6                   	lw		r6,[sp]
   2052 0000CB6C 06 6E                   	add		sp,sp,#6
   2053 0000CB6E F0 80                   	ret
                                        
                                        ; ===== The PEEK function returns the byte stored at the address
                                        ;	contained in the following expression.
                                        ;
   2058 0000CB70                        PEEK
   2059 0000CB70 29 BF                   	call	PARN		; get the memory address
   2060 0000CB72 10 E1                   	lb		r1,[r1]		; get the addressed byte
   2061 0000CB74 0E 21                   	zxb		r1			; upper 3 bytes will be zero
   2062 0000CB76 E0 FF                   	lw		lr,[sp]	; and return it
   2063 0000CB78 06 6E                   	add		sp,sp,#6
   2064 0000CB7A F0 80                   	ret
                                        
                                        
                                        ; ===== The PEEK function returns the byte stored at the address
                                        ;	contained in the following expression.
                                        ;
   2070 0000CB7C                        PEEKC
   2071 0000CB7C 23 BF                   	call	PARN		; get the memory address
   2072 0000CB7E 5E 31                   	and		r1,#-2		; align to char address
   2073 0000CB80 10 F1                   	lh		r1,[r1]		; get the addressed char
   2074 0000CB82 1E 21                   	zxc		r1
   2075 0000CB84 E0 FF                   	lw		lr,[sp]	; and return it
   2076 0000CB86 06 6E                   	add		sp,sp,#6
   2077 0000CB88 F0 80                   	ret
                                        
                                        
                                        ; ===== The PEEK function returns the byte stored at the address
                                        ;	contained in the following expression.
                                        ;
   2083 0000CB8A                        PEEKW
   2084 0000CB8A 1C BF                   	call	PARN		; get the memory address
   2085 0000CB8C 5C 31                   	and		r1,#-4		; align to word address
   2086 0000CB8E 10 F1                   	lw		r1,[r1]		; get the addressed word
   2087 0000CB90 E0 FF                   	lw		lr,[sp]	; and return it
   2088 0000CB92 06 6E                   	add		sp,sp,#6
   2089 0000CB94 F0 80                   	ret
                                        
                                        
                                        ; user function call
                                        ; call the user function with argument in r1
   2094 0000CB96                        USRX
   2095 0000CB96 16 BF                   	call	PARN		; get expression value
   2096 0000CB98 E2 D8                   	sw		r8,2[sp]	; save the text pointer
   2097 0000CB9A 02 40 04 F2             	lw      r2,usrJmp   ; get usr vector
   2098 0000CB9E A2 49 0F AF             	call	[r2]		; jump to the subroutine
   2099 0000CBA2 E2 F8                   	lw		r8,2[sp]	; restore the text pointer
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 36
noc_boot11.a
   2100 0000CBA4 E0 FF                   	lw		lr,[sp]
   2101 0000CBA6 06 6E                   	add		sp,sp,#6
   2102 0000CBA8 F0 80                   	ret
                                        
                                        
                                        ; ===== The RND function returns a random number from 1 to
                                        ;	the value of the following expression in D0.
                                        ;
   2108 0000CBAA                        RND
   2109 0000CBAA 0C BF                   	call	PARN		; get the upper limit
   2110 0000CBAC 16 21                   	or		r1,r1		; it must be positive and non-zero
   2111 0000CBAE 0E A8                   	beq		rnd2
   2112 0000CBB0 0A AA                   	bmi		rnd1
   2113 0000CBB2 10 12                   	lw		r2,r1
   2114 0000CBB4 CA 4D 04 D0             	sh		r0,RAND+4	; read command
   2115 0000CBB8 CA 4D 00 F1             	lw		r1,RAND		; get a number
   2116 0000CBBC 0E AF                   	call	modu4		; RND(n)=MOD(number,n)+1
   2117 0000CBBE 01 61                   	add		r1,r1,#1
   2118 0000CBC0 E0 FF                   	lw		lr,[sp]
   2119 0000CBC2 06 6E                   	add		sp,sp,#6
   2120 0000CBC4 F0 80                   	ret
   2121 0000CBC6                        rnd1
   2122 0000CBC6 35 4D 0F 11             	lea		r1,msgRNDBad
   2123 0000CBCA 79 AE                   	br		ERROR
   2124 0000CBCC                        rnd2
   2125 0000CBCC CA 4D 04 D0             	sh		r0,RAND+4
   2126 0000CBD0 CA 4D 00 F1             	lw		r1,RAND
   2127 0000CBD4 E0 FF                   	lw		lr,[sp]
   2128 0000CBD6 06 6E                   	add		sp,sp,#6
   2129 0000CBD8 F0 80                   	ret
                                        
                                        
                                        ; r = a mod b
                                        ; a = r2
                                        ; b = r3
                                        ; r = r1
   2136 0000CBDA                        modu4
   2137 0000CBDA FA 6E                   	sub		sp,sp,#6
   2138 0000CBDC E0 D5                   	sw		r5,[sp]
   2139 0000CBDE E2 D6                   	sw		r6,2[sp]
   2140 0000CBE0 E4 D7                   	sw		r7,4[sp]
   2141 0000CBE2 02 40 00 17             	lw      r7,#32		; n = 32
   2142 0000CBE6 00 15                   	lw		r5,#0		; w = 0
   2143 0000CBE8 00 16                   	lw		r6,#0		; r = 0
   2144 0000CBEA                        mod2
   2145 0000CBEA 81 31                   	shl		r1,#1		; a <<= 1
   2146 0000CBEC 61 26                   	adc		r6,r6		; r <<= 1
   2147 0000CBEE 6D 22                   	cmp		r2,r6		; b < r ?
   2148 0000CBF0 01 A7                   	bgtu	mod1
   2149 0000CBF2 22 26                   	sub		r6,r2		; r -= b
   2150 0000CBF4                        mod1
   2151 0000CBF4 FF 67                   	sub		r7,r7,#1
   2152 0000CBF6 F9 B9                       bne     mod2        ; n--
   2153 0000CBF8 60 11                   	lw		r1,r6
   2154 0000CBFA E0 F5                   	lw		r5,[sp]
   2155 0000CBFC E2 F6                   	lw		r6,2[sp]
   2156 0000CBFE E4 F7                   	lw		r7,4[sp]
   2157 0000CC00 06 6E                   	add		sp,sp,#6
   2158 0000CC02 F0 80                   	ret
                                        
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 37
noc_boot11.a
                                        
                                        
                                        ; ===== The ABS function returns an absolute value in r2.
                                        ;
   2164 0000CC04                        ABS
   2165 0000CC04 ED 4F 0E AF             	call	PARN		; get the following expr.'s value
   2166 0000CC08 16 21                   	or		r1,r1
   2167 0000CC0A 01 AB                   	bpl		abs1
   2168 0000CC0C 20 31                   	neg		r1			; if negative, complement it
                                        ;	bmi		QHOW		; if still negative, it was too big
   2170 0000CC0E                        abs1
   2171 0000CC0E E0 FF                   	lw		lr,[sp]
   2172 0000CC10 06 6E                   	add		sp,sp,#6
   2173 0000CC12 F0 80                   	ret
                                        
                                        
                                        ; ===== The SGN function returns the sign in r1. +1,0, or -1
                                        ;
   2178 0000CC14                        SGN
   2179 0000CC14 ED 4F 06 AF             	call	PARN		; get the following expr.'s value
   2180 0000CC18 16 21                   	or		r1,r1
   2181 0000CC1A 04 A8                   	beq		sgn1
   2182 0000CC1C 02 AB                   	bpl		sgn2
   2183 0000CC1E 0F 11                   	lw		r1,#-1
   2184 0000CC20 01 AE                   	br		sgn1
   2185 0000CC22                        sgn2
   2186 0000CC22 01 11                   	lw		r1,#1
   2187 0000CC24                        sgn1
   2188 0000CC24 E0 FF                   	lw		lr,[sp]
   2189 0000CC26 06 6E                   	add		sp,sp,#6
   2190 0000CC28 F0 80                   	ret
                                        
                                        
                                        ; ===== The SIZE function returns the size of free memory in r1.
                                        ;
   2195 0000CC2A                        SIZEX
   2196 0000CC2A 09 40 08 F1             	lw		r1,VARBGN	; get the number of free bytes...
   2197 0000CC2E 09 40 06 F2             	lw		r2,TXTUNF	; between 'TXTUNF' and 'VARBGN'
   2198 0000CC32 22 21                   	sub		r1,r2
   2199 0000CC34 E0 FF                   	lw		lr,[sp]
   2200 0000CC36 06 6E                   	add		sp,sp,#6
   2201 0000CC38 F0 80                   	ret					; return the number in r2
                                        
                                        ; ==== Return the node number that the code is running on
                                        ;
   2205 0000CC3A                        NODENUM
   2206 0000CC3A E4 31                   	tsr		r1,ID
   2207 0000CC3C E0 FF                   	lw		lr,[sp]
   2208 0000CC3E 06 6E                   	add		sp,sp,#6
   2209 0000CC40 F0 80                   	ret
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** SETVAL *** FIN *** ENDCHK *** ERROR (& friends) ***
                                        ;
                                        ; 'SETVAL' expects a variable, followed by an equal sign and then
                                        ; an expression.  It evaluates the expression and sets the variable
                                        ; to that value.
                                        ;
                                        ; 'FIN' checks the end of a command.  If it ended with ":",
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 38
noc_boot11.a
                                        ; execution continues.	If it ended with a CR, it finds the
                                        ; the next line and continues from there.
                                        ;
                                        ; 'ENDCHK' checks if a command is ended with a CR. This is
                                        ; required in certain commands, such as GOTO, RETURN, STOP, etc.
                                        ;
                                        ; 'ERROR' prints the string pointed to by A0. It then prints the
                                        ; line pointed to by CURRNT with a "?" inserted at where the
                                        ; old text pointer (should be on top of the stack) points to.
                                        ; Execution of Tiny BASIC is stopped and a warm start is done.
                                        ; If CURRNT is zero (indicating a direct command), the direct
                                        ; command is not printed. If CURRNT is -1 (indicating
                                        ; 'INPUT' command in progress), the input line is not printed
                                        ; and execution is not terminated but continues at 'INPERR'.
                                        ;
                                        ; Related to 'ERROR' are the following:
                                        ; 'QWHAT' saves text pointer on stack and gets "What?" message.
                                        ; 'AWHAT' just gets the "What?" message and jumps to 'ERROR'.
                                        ; 'QSORRY' and 'ASORRY' do the same kind of thing.
                                        ; 'QHOW' and 'AHOW' also do this for "How?".
                                        ;
                                        
                                        ; returns
                                        ; r2 = variable's address
                                        ;
   2245 0000CC42                        SETVAL
   2246 0000CC42 FC 6E                       sub     sp,sp,#4
   2247 0000CC44 E0 DF                       sw      lr,[sp]
   2248 0000CC46 01 11                       lw		r1,#1		; allocate var
   2249 0000CC48 EC 4F 0C AF                 call	TSTV		; variable name?
   2250 0000CC4C 03 A9                       bne		sv2
   2251 0000CC4E 34 4D 08 11                	lea		r1,msgVar
   2252 0000CC52 35 AE                      	br		ERROR 
   2253 0000CC54                        sv2
   2254 0000CC54 E2 D1                   	sw      r1,2[sp]    ; save the variable's address
   2255 0000CC56 1D 40 06 AF             	call	TSTC		; get past the "=" sign
   2256 0000CC5A 3D 12                   	db	'=',SV1-*+1
   2257 0000CC5C DD 4F 0E AF             	call	OREXPR		; evaluate the expression
   2258 0000CC60 E2 F2                   	lw      r2,2[sp]    ; get back the variable's address
   2259 0000CC62 20 D1                   	sw      r1,[r2]     ; and save value in the variable
   2260 0000CC64 20 11                   	lw		r1,r2		; return r1 = variable address
   2261 0000CC66 E0 FF                   	lw      lr,[sp]
   2262 0000CC68 04 6E                   	add     sp,sp,#4
   2263 0000CC6A F0 80                   	ret
   2264 0000CC6C                        SV1
   2265 0000CC6C 26 AE                       br	    QWHAT		; if no "=" sign
                                        
                                        
   2268 0000CC6E                        FIN
   2269 0000CC6E FE 6E                   	sub		sp,sp,#2
   2270 0000CC70 E0 DF                   	sw		lr,[sp]
   2271 0000CC72 1C 40 08 AF             	call	TSTC		; *** FIN ***
   2272 0000CC76 3A 08                   	db	':',FI1-*+1
   2273 0000CC78 02 6E                   	add		sp,sp,#2	; if ":", discard return address
   2274 0000CC7A B7 4F 0C AE             	br		RUNSML		; continue on the same line
   2275 0000CC7E                        FI1
   2276 0000CC7E 1C 40 02 AF             	call	TSTC		; not ":", is it a CR?
   2277 0000CC82 0D 0A                   	db	CR,FI2-*+1
   2278 0000CC84 E0 FF                   	lw		lr,[sp]	; else return to the caller
   2279 0000CC86 02 6E                   	add		sp,sp,#2	; yes, purge return address
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 39
noc_boot11.a
   2280 0000CC88 B6 4F 08 AE             	br		RUNNXL		; execute the next line
   2281 0000CC8C                        FI2
   2282 0000CC8C E0 FF                   	lw		lr,[sp]	; else return to the caller
   2283 0000CC8E 02 6E                   	add		sp,sp,#2
   2284 0000CC90 F0 80                   	ret
                                        
                                        
                                        ; Check that there is nothing else on the line
                                        ; Registers Affected
                                        ;   r1
                                        ;
   2291 0000CC92                        ENDCHK
   2292 0000CC92 FE 6E                   	sub		sp,sp,#2
   2293 0000CC94 E0 DF                   	sw		lr,[sp]
   2294 0000CC96 1E 40 09 AF             	call	IGNBLK
   2295 0000CC9A 80 E1                   	lb		r1,[r8]
   2296 0000CC9C FF 4F 13 10             	cmp		r1,#CR		; does it end with a CR?
   2297 0000CCA0 03 A8                   	beq		ec1
   2298 0000CCA2 42 4D 02 11             	lea		r1,msgExtraChars
   2299 0000CCA6 0B AE                   	jmp		ERROR
   2300 0000CCA8                        ec1
   2301 0000CCA8 E0 FF                   	lw		lr,[sp]
   2302 0000CCAA 02 6E                   	add		sp,sp,#2
   2303 0000CCAC F0 80                   	ret
                                        
                                        
   2306 0000CCAE                        TOOBIG
   2307 0000CCAE 40 4D 0D 11             	lea		r1,msgTooBig
   2308 0000CCB2 05 AE                   	br		ERROR
   2309 0000CCB4                        QSORRY
   2310 0000CCB4 2A 4D 03 11                 lea     r1,SRYMSG
   2311 0000CCB8 02 AE                   	br	    ERROR
   2312 0000CCBA                        QWHAT
   2313 0000CCBA 29 4D 0B 11             	lea		r1,msgWhat
   2314 0000CCBE                        ERROR
   2315 0000CCBE 21 40 0D AF             	call	PRMESG		; display the error message
   2316 0000CCC2 08 40 06 F1             	lw		r1,CURRNT	; get the current line number
   2317 0000CCC6 A1 4F 09 A8             	beq		WSTART		; if zero, do a warm start
   2318 0000CCCA 11 10                   	cmp		r1,#-1		; is the line no. pointer = -1?
   2319 0000CCCC C5 4F 0E A8             	beq		INPERR		; if so, redo input
   2320 0000CCD0 80 E5                   	lb		r5,[r8]		; save the char. pointed to
   2321 0000CCD2 80 C0                   	sb		r0,[r8]		; put a zero where the error is
   2322 0000CCD4 08 40 06 F1             	lw		r1,CURRNT	; point to start of current line
   2323 0000CCD8 17 40 07 AF             	call	PRTLN		; display the line in error up to the 0
   2324 0000CCDC 10 16                   	lw      r6,r1       ; save off end pointer
   2325 0000CCDE 80 C5                   	sb		r5,[r8]		; restore the character
   2326 0000CCE0 03 40 0F 11             	lw		r1,#'?'		; display a "?"
   2327 0000CCE4 9C 4F 05 AF             	call	GOOUT
   2328 0000CCE8 00 12                   	lw      r2,#0       ; stop char = 0
   2329 0000CCEA 6F 11                   	sub		r1,r6,#1	; point back to the error char.
   2330 0000CCEC B6 AF                   	call	PRTSTG		; display the rest of the line
   2331 0000CCEE A0 4F 05 AE             	jmp	    WSTART		; and do a warm start
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** GETLN *** FNDLN (& friends) ***
                                        ;
                                        ; 'GETLN' reads in input line into 'BUFFER'. It first prompts with
                                        ; the character in r3 (given by the caller), then it fills the
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 40
noc_boot11.a
                                        ; buffer and echos. It ignores LF's but still echos
                                        ; them back. Control-H is used to delete the last character
                                        ; entered (if there is one), and control-X is used to delete the
                                        ; whole line and start over again. CR signals the end of a line,
                                        ; and causes 'GETLN' to return.
                                        ;
                                        ;
   2347 0000CCF2                        GETLN
   2348 0000CCF2 FC 6E                   	sub		sp,sp,#4
   2349 0000CCF4 E0 DF                   	sw		lr,[sp]
   2350 0000CCF6 E2 D5                   	sw		r5,2[sp]
   2351 0000CCF8 9B 4F 0B AF             	call	GOOUT		; display the prompt
   2352 0000CCFC 01 11                   	lw		r1,#1		; turn on cursor flash
   2353 0000CCFE 03 40 0C C1             	sb		r1,cursFlash
   2354 0000CD02 02 40 00 11             	lw		r1,#' '		; and a space
   2355 0000CD06 9B 4F 04 AF             	call	GOOUT
   2356 0000CD0A 0A 40 0E 18             	lea		r8,BUFFER	; r8 is the buffer pointer
   2357 0000CD0E                        GL1
   2358 0000CD0E 1E 40 03 AF             	call	CHKIO		; check keyboard
   2359 0000CD12 FD B8                   	beq		GL1			; wait for a char. to come in
   2360 0000CD14 FF 4F 18 10             	cmp		r1,#CTRLH	; delete last character?
   2361 0000CD18 14 A8                   	beq		GL3			; if so
   2362 0000CD1A FE 4F 18 10             	cmp		r1,#CTRLX	; delete the whole line?
   2363 0000CD1E 20 A8                   	beq		GL4			; if so
   2364 0000CD20 FF 4F 13 10             	cmp		r1,#CR		; accept a CR
   2365 0000CD24 03 A8                   	beq		GL2
   2366 0000CD26 FE 4F 10 10             	cmp		r1,#' '		; if other control char., discard it
   2367 0000CD2A F1 B4                   	bltu	GL1
   2368 0000CD2C                        GL2
   2369 0000CD2C 80 C1                   	sb		r1,[r8]		; save the char.
   2370 0000CD2E 01 68                   	add		r8,r8,#1
   2371 0000CD30 99 4F 0F AF             	call	GOOUT		; echo the char back out
   2372 0000CD34 8F E1                   	lb      r1,-1[r8]   ; get char back (GOOUT destroys r1)
   2373 0000CD36 FF 4F 13 10             	cmp		r1,#CR		; if it's a CR, end the line
   2374 0000CD3A 25 A8                   	beq		GL7
   2375 0000CD3C F0 4F 83 10             	cmp		r8,#(BUFFER+BUFLEN-1)	; any more room?
   2376 0000CD40 E6 B4                   	bltu	GL1			; yes: get some more, else delete last char.
                                        
   2378 0000CD42                        GL3
   2379 0000CD42 08 11                   	lw		r1,#CTRLH	; delete a char. if possible
   2380 0000CD44 99 4F 05 AF             	call	GOOUT
   2381 0000CD48 02 40 00 11             	lw		r1,#' '
   2382 0000CD4C 99 4F 01 AF             	call	GOOUT
   2383 0000CD50 F5 4F 82 10             	cmp		r8,#BUFFER	; any char.'s left?
   2384 0000CD54 DC B6                   	bleu	GL1			; if not
   2385 0000CD56 08 11                   	lw		r1,#CTRLH	; if so, finish the BS-space-BS sequence
   2386 0000CD58 98 4F 0B AF             	call	GOOUT
   2387 0000CD5C FF 68                   	sub		r8,r8,#1	; decrement the text pointer
   2388 0000CD5E D7 BE                   	br		GL1			; back for more
                                        
   2390 0000CD60                        GL4
   2391 0000CD60 80 11                   	lw		r1,r8		; delete the whole line
   2392 0000CD62 F5 4F 12 15             	sub		r5,r1,#BUFFER   ; figure out how many backspaces we need
   2393 0000CD66 0C A8                   	beq		GL6			; if none needed, brnch
   2394 0000CD68                        GL5	
   2395 0000CD68 08 11                   	lw		r1,#CTRLH	; and display BS-space-BS sequences
   2396 0000CD6A 98 4F 02 AF             	call	GOOUT
   2397 0000CD6E 02 40 00 11             	lw		r1,#' '
   2398 0000CD72 97 4F 0E AF             	call	GOOUT
   2399 0000CD76 08 11                   	lw		r1,#CTRLH
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 41
noc_boot11.a
   2400 0000CD78 97 4F 0B AF             	call	GOOUT
   2401 0000CD7C FF 65                   	sub		r5,r5,#1
   2402 0000CD7E F4 B9                   	bne     GL5
   2403 0000CD80                        GL6
   2404 0000CD80 0A 40 0E 18             	lea		r8,BUFFER	; reinitialize the text pointer
   2405 0000CD84 C4 BE                   	br		GL1			; and go back for more
   2406 0000CD86                        GL7
   2407 0000CD86 00 11                   	lw		r1,#0		; turn off cursor flash
   2408 0000CD88 03 40 0C C1             	sb		r1,cursFlash
   2409 0000CD8C 0A 11                   	lw		r1,#LF		; echo a LF for the CR
   2410 0000CD8E 97 4F 00 AF             	call	GOOUT
   2411 0000CD92 E0 FF                   	lw		lr,[sp]
   2412 0000CD94 E2 F5                   	lw		r5,2[sp]
   2413 0000CD96 04 6E                   	add		sp,sp,#4
   2414 0000CD98 F0 80                   	ret
                                        
                                        
                                        ; 'FNDLN' finds a line with a given line no. (in r1) in the
                                        ; text save area.  r9 is used as the text pointer. If the line
                                        ; is found, r9 will point to the beginning of that line
                                        ; (i.e. the high byte of the line no.), and flags are Z.
                                        ; If that line is not there and a line with a higher line no.
                                        ; is found, r9 points there and flags are NC & NZ. If we reached
                                        ; the end of the text save area and cannot find the line, flags
                                        ; are C & NZ.
                                        ; Z=1 if line found
                                        ; N=1 if end of text save area
                                        ; Z=0 & N=0 if higher line found
                                        ;
                                        ; 'FNDLN' will initialize r9 to the beginning of the text save
                                        ; area to start the search. Some other entries of this routine
                                        ; will not initialize r9 and do the search.
                                        ; 'FNDLNP' will start with r9 and search for the line no.
                                        ; 'FNDNXT' will bump r9 by 2, find a CR and then start search.
                                        ; 'FNDSKP' uses r9 to find a CR, and then starts the search.
                                        ; return Z=1 if line is found, r9 = pointer to line
                                        ;
                                        ; Parameters
                                        ;	r1 = line number to find
                                        ;
   2440 0000CD9A                        FNDLN
   2441 0000CD9A 00 40 11 10             	cmp		r1,#0xFFFF	; line no. must be < 65535
   2442 0000CD9E 03 A6                   	bleu	fl1
   2443 0000CDA0 33 4D 02 11             	lea		r1,msgLineRange
   2444 0000CDA4 8C BE                   	br		ERROR
   2445 0000CDA6                        fl1
   2446 0000CDA6 08 4C 06 F9             	lw		r9,TXTBGN	; init. the text save pointer
                                        
   2448 0000CDAA                        FNDLNP
   2449 0000CDAA 09 40 06 FA             	lw		r10,TXTUNF	; check if we passed the end
   2450 0000CDAE FF 6A                   	sub		r10,r10,#1
   2451 0000CDB0 AD 29                   	cmp		r9,r10
   2452 0000CDB2 0F A7                   	bgtu	FNDRET		; if so, return with Z=0 & C=1
   2453 0000CDB4 90 E3                   	lb		r3,[r9]		; get low order byte of line number
   2454 0000CDB6 0E 23                   	zxb		r3
   2455 0000CDB8 91 E2                   	lb		r2,1[r9]	; get high order byte
   2456 0000CDBA 0E 22                   	zxb		r2
   2457 0000CDBC 81 32                   	shl		r2,#1
   2458 0000CDBE 81 32                   	shl		r2,#1
   2459 0000CDC0 81 32                   	shl		r2,#1
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 42
noc_boot11.a
   2460 0000CDC2 81 32                   	shl		r2,#1
   2461 0000CDC4 81 32                   	shl		r2,#1
   2462 0000CDC6 81 32                   	shl		r2,#1
   2463 0000CDC8 81 32                   	shl		r2,#1
   2464 0000CDCA 81 32                   	shl		r2,#1
   2465 0000CDCC 36 22                   	or		r2,r3		; build whole line number
   2466 0000CDCE 2D 21                   	cmp		r1,r2		; is this the line we want?
   2467 0000CDD0 01 A7                   	bgtu	FNDNXT		; no, not there yet
   2468 0000CDD2                        FNDRET
   2469 0000CDD2 F0 80                   	ret			; return the cond. codes
                                        
   2471 0000CDD4                        FNDNXT
   2472 0000CDD4 02 69                   	add		r9,r9,#2	; find the next line
                                        
   2474 0000CDD6                        FNDSKP
   2475 0000CDD6 90 E2                   	lb		r2,[r9]
   2476 0000CDD8 01 69                   	add		r9,r9,#1
   2477 0000CDDA FF 4F 23 10             	cmp		r2,#CR		; try to find a CR
   2478 0000CDDE FB B9                   	bne		FNDSKP		; keep looking
   2479 0000CDE0 E4 BE                   	br		FNDLNP		; check if end of text
                                        
                                        
                                        ;******************************************************************
                                        ; 'MVUP' moves a block up from where r1 points to where r2 points
                                        ; until r1=r3
                                        ;
   2486 0000CDE2                        MVUP1
   2487 0000CDE2 10 E4                   	lb		r4,[r1]
   2488 0000CDE4 20 C4                   	sb		r4,[r2]
   2489 0000CDE6 01 61                   	add		r1,r1,#1
   2490 0000CDE8 01 62                   	add		r2,r2,#1
   2491 0000CDEA                        MVUP
   2492 0000CDEA 3D 21                   	cmp		r1,r3
   2493 0000CDEC FA B9                   	bne		MVUP1
   2494 0000CDEE                        MVRET
   2495 0000CDEE F0 80                   	ret
                                        
                                        
                                        ; 'MVDOWN' moves a block down from where r1 points to where r2
                                        ; points until r1=r3
                                        ;
   2501 0000CDF0                        MVDOWN1
   2502 0000CDF0 FF 61                   	sub		r1,r1,#1
   2503 0000CDF2 FF 62                   	sub		r2,r2,#1
   2504 0000CDF4 10 E4                   	lb		r4,[r1]
   2505 0000CDF6 20 C4                   	sb		r4,[r2]
   2506 0000CDF8                        MVDOWN
   2507 0000CDF8 3D 21                   	cmp		r1,r3
   2508 0000CDFA FA B9                   	bne		MVDOWN1
   2509 0000CDFC F0 80                   	ret
                                        
                                        
                                        ; 'POPA' restores the 'FOR' loop variable save area from the stack
                                        ;
                                        ; 'PUSHA' stacks for 'FOR' loop variable save area onto the stack
                                        ;
                                        ; Note: a single zero word is stored on the stack in the
                                        ; case that no FOR loops need to be saved. This needs to be
                                        ; done because PUSHA / POPA is called all the time.
                                        
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 43
noc_boot11.a
   2520 0000CDFE                        POPA
   2521 0000CDFE E0 F1                   	lw		r1,[sp]		; restore LOPVAR, but zero means no more
   2522 0000CE00 08 40 0C D1             	sw		r1,LOPVAR
   2523 0000CE04 0E A8                   	beq		PP1
   2524 0000CE06 E8 F1                   	lw		r1,8[sp]	; if not zero, restore the rest
   2525 0000CE08 09 40 04 D1             	sw		r1,LOPPT
   2526 0000CE0C E6 F1                   	lw		r1,6[sp]
   2527 0000CE0E 09 40 02 D1             	sw		r1,LOPLN
   2528 0000CE12 E4 F1                   	lw		r1,4[sp]
   2529 0000CE14 09 40 00 D1             	sw		r1,LOPLMT
   2530 0000CE18 E2 F1                   	lw		r1,2[sp]
   2531 0000CE1A 08 40 0E D1             	sw		r1,LOPINC
   2532 0000CE1E 0A 6E                   	add		sp,sp,#10
   2533 0000CE20 F0 80                   	ret
   2534 0000CE22                        PP1
   2535 0000CE22 02 6E                   	add		sp,sp,#2
   2536 0000CE24 F0 80                   	ret
                                        
                                        
   2539 0000CE26                        PUSHA
   2540 0000CE26 0A 40 00 F1             	lw		r1,STKBOT	; Are we running out of stack room?
   2541 0000CE2A 0A 61                   	add		r1,r1,#10	; we might need this many bytes
   2542 0000CE2C 1D 2E                   	cmp		sp,r1
   2543 0000CE2E 42 B4                   	bltu	QSORRY		; out of stack space
   2544 0000CE30 08 40 0C F1             	lw		r1,LOPVAR	; save loop variables
   2545 0000CE34 0F A8                   	beq		PU1			; if LOPVAR is zero, that's all
   2546 0000CE36 F6 6E                   	sub		sp,sp,#10
   2547 0000CE38 E0 D1                   	sw		r1,[sp]
   2548 0000CE3A 09 40 04 F1             	lw		r1,LOPPT
   2549 0000CE3E E8 D1                   	sw		r1,8[sp]	; else save all the others
   2550 0000CE40 09 40 02 F1             	lw		r1,LOPLN
   2551 0000CE44 E6 D1                   	sw		r1,6[sp]
   2552 0000CE46 09 40 00 F1             	lw		r1,LOPLMT
   2553 0000CE4A E4 D1                   	sw		r1,4[sp]
   2554 0000CE4C 08 40 0E F1             	lw		r1,LOPINC
   2555 0000CE50 E2 D1                   	sw		r1,2[sp]
   2556 0000CE52 F0 80                   	ret
   2557 0000CE54                        PU1
   2558 0000CE54 FE 6E                   	sub		sp,sp,#2
   2559 0000CE56 E0 D1                   	sw		r1,[sp]
   2560 0000CE58 F0 80                   	ret
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** PRTSTG *** QTSTG *** PRTNUM *** PRTLN ***
                                        ;
                                        ; 'PRTSTG' prints a string pointed to by r3. It stops printing
                                        ; and returns to the caller when either a CR is printed or when
                                        ; the next byte is the same as what was passed in r4 by the
                                        ; caller.
                                        ;
                                        ; 'QTSTG' looks for an underline (back-arrow on some systems),
                                        ; single-quote, or double-quote.  If none of these are found, returns
                                        ; to the caller.  If underline, outputs a CR without a LF.  If single
                                        ; or double quote, prints the quoted string and demands a matching
                                        ; end quote.  After the printing, the next 2 bytes of the caller are
                                        ; skipped over (usually a short brnch instruction).
                                        ;
                                        ; 'PRTNUM' prints the 32 bit number in r3, leading blanks are added if
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 44
noc_boot11.a
                                        ; needed to pad the number of spaces to the number in r4.
                                        ; However, if the number of digits is larger than the no. in
                                        ; r4, all digits are printed anyway. Negative sign is also
                                        ; printed and counted in, positive sign is not.
                                        ;
                                        ; 'PRTLN' prints the saved text line pointed to by r3
                                        ; with line no. and all.
                                        ;
                                        
                                        ; r1 = pointer to string
                                        ; r2 = stop character
                                        ; return r1 = pointer to end of line + 1
                                        
   2593 0000CE5A                        PRTSTG
   2594 0000CE5A F8 6E                       sub     sp,sp,#8
   2595 0000CE5C E0 DF                       sw      lr,[sp]
   2596 0000CE5E E2 D5                       sw      r5,2[sp]
   2597 0000CE60 E4 D6                       sw      r6,4[sp]
   2598 0000CE62 E6 D7                       sw      r7,6[sp]
   2599 0000CE64 10 15                       lw      r5,r1       ; r5 = pointer
   2600 0000CE66 20 16                       lw      r6,r2       ; r6 = stop char
   2601 0000CE68                        PS1
   2602 0000CE68 50 E7                       lb      r7,[r5]     ; get a text character
   2603 0000CE6A 01 65                       add     r5,r5,#1
   2604 0000CE6C 6D 27                   	cmp     r7,r6		; same as stop character?
   2605 0000CE6E 09 A8                   	beq	    PRTRET		; if so, return
   2606 0000CE70 70 11                   	lw      r1,r7
   2607 0000CE72 8F 4F 0E AF             	call	GOOUT		; display the char.
   2608 0000CE76 FF 4F 73 10             	cmp     r7,#CR      ; is it a C.R.?
   2609 0000CE7A F6 B9                   	bne	    PS1		    ; no, go back for more
   2610 0000CE7C 0A 11                   	lw      r1,#LF      ; yes, add a L.F.
   2611 0000CE7E 8F 4F 08 AF             	call	GOOUT
   2612 0000CE82                        PRTRET
   2613 0000CE82 70 12                       lw      r2,r7       ; return r2 = stop char
   2614 0000CE84 50 11                   	lw		r1,r5		; return r1 = line pointer
   2615 0000CE86 E2 F5                       lw      r5,2[sp]
   2616 0000CE88 E4 F6                       lw      r6,4[sp]
   2617 0000CE8A E6 F7                       lw      r7,6[sp]
   2618 0000CE8C E0 FF                       lw      lr,[sp]
   2619 0000CE8E 08 6E                       add     sp,sp,#8
   2620 0000CE90 F0 80                       ret			        ; then return
                                        
                                        
   2623 0000CE92                        QTSTG
   2624 0000CE92 FE 6E                   	sub		sp,sp,#2
   2625 0000CE94 E0 DF                   	sw		lr,[sp]
   2626 0000CE96 B7 AF                   	call	TSTC		; *** QTSTG ***
   2627 0000CE98 22 18                   	db	'"',QT3-*+1
   2628 0000CE9A 02 40 02 12             	lw		r2,#'"'		; it is a "
   2629 0000CE9E                        QT1
   2630 0000CE9E 80 11                   	lw		r1,r8
   2631 0000CEA0 DC BF                   	call	PRTSTG		; print until another
   2632 0000CEA2 10 18                   	lw		r8,r1
   2633 0000CEA4 FF 4F 26 10             	cmp		r2,#LF		; was last one a CR?
   2634 0000CEA8 0E A9                   	bne		QT2
   2635 0000CEAA 02 6E                   	add		sp,sp,#2
   2636 0000CEAC A5 4F 06 AE             	br		RUNNXL		; if so, run next line
   2637 0000CEB0                        QT3
   2638 0000CEB0 AA AF                   	call	TSTC		; is it a single quote?
   2639 0000CEB2 27 08                   	db	"'",QT4-*+1
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 45
noc_boot11.a
   2640 0000CEB4 02 40 07 12             	lw		r2,#''''	; if so, do same as above
   2641 0000CEB8 F2 BE                   	br		QT1
   2642 0000CEBA                        QT4
   2643 0000CEBA A5 AF                   	call	TSTC		; is it an underline?
   2644 0000CEBC 5F 10                   	db	'_',QT5-*+1
   2645 0000CEBE 00 40 0D 11             	lw		r1,#CR		; if so, output a CR without LF
   2646 0000CEC2 8D 4F 06 AF             	call	GOOUT
   2647 0000CEC6                        QT2
   2648 0000CEC6 E0 FF                   	lw		lr,[sp]
   2649 0000CEC8 02 6E                   	add		sp,sp,#2
   2650 0000CECA F2 80                   	jmp		2[lr]		; skip over 2 bytes when returning
   2651 0000CECC                        QT5						; not " ' or _
   2652 0000CECC E0 FF                   	lw		lr,[sp]
   2653 0000CECE 02 6E                   	add		sp,sp,#2
   2654 0000CED0 F0 80                   	ret
                                        
                                        
                                        ; Output a CR LF sequence
                                        ;
   2659 0000CED2                        prCRLF
   2660 0000CED2 FE 6E                   	sub		sp,sp,#2
   2661 0000CED4 E0 DF                   	sw		lr,[sp]
   2662 0000CED6 00 40 0D 11             	lw		r1,#CR
   2663 0000CEDA 8C 4F 0A AF             	call	GOOUT
   2664 0000CEDE 0A 11                   	lw		r1,#LF
   2665 0000CEE0 8C 4F 07 AF             	call	GOOUT
   2666 0000CEE4 E0 FF                   	lw		lr,[sp]
   2667 0000CEE6 02 6E                   	add		sp,sp,#2
   2668 0000CEE8 F0 80                   	ret
                                        
                                        
                                        ; r1 = number to print
                                        ; r2 = number of digits
                                        ; Register Usage
                                        ;	r5 = number of padding spaces
   2675 0000CEEA                        PRTNUM
   2676 0000CEEA F8 6E                   	sub		sp,sp,#8
   2677 0000CEEC E0 DF                   	sw		lr,[sp]
   2678 0000CEEE E2 D5                   	sw		r5,2[sp]
   2679 0000CEF0 E4 D6                   	sw		r6,4[sp]
   2680 0000CEF2 E6 D7                   	sw		r7,6[sp]
                                        
   2682 0000CEF4 0A 40 02 17             	lea		r7,NUMWKA	; r7 = pointer to numeric work area
   2683 0000CEF8 10 16                   	lw		r6,r1		; save number for later
   2684 0000CEFA 20 15                   	lw		r5,r2		; r5 = min number of chars
   2685 0000CEFC 16 21                   	
   2686 0000CEFE 02 AB                   	bpl		PN1			; if not
   2687 0000CF00 20 31                   	neg		r1			; else make it positive
   2688 0000CF02 FF 65                   	sub		r5,r5,#1	; one less for width count
   2689 0000CF04                        PN1
   2690 0000CF04 0A 12                   	lw		r2,#10		; divide by 10
   2691 0000CF06 E0 4F 0E AF             	call	DIV32
   2692 0000CF0A 30 62                   	add		r2,r2,#'0'	; convert remainder to ascii
   2693 0000CF0C 70 C2                   	sb		r2,[r7]		; and store in buffer
   2694 0000CF0E 01 67                   	add		r7,r7,#1
   2695 0000CF10 FF 65                   	sub		r5,r5,#1	; decrement width
   2696 0000CF12 10 10                   	cmp		r1,#0
   2697 0000CF14 F7 B9                   	bne		PN1
   2698 0000CF16                        PN6
   2699 0000CF16 56 25                   	or		r5,r5		; test pad count
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 46
noc_boot11.a
   2700 0000CF18 06 A2                   	ble		PN4			; skip padding if not needed
   2701 0000CF1A                        PN3
   2702 0000CF1A 02 40 00 11             	lw		r1,#' '		; display the required leading spaces
   2703 0000CF1E 8A 4F 08 AF             	call	GOOUT
   2704 0000CF22 FF 65                   	sub		r5,r5,#1
   2705 0000CF24 FA B9                   	bne		PN3
   2706 0000CF26                        PN4
   2707 0000CF26 66 26                   	or		r6,r6		; is number negative?
   2708 0000CF28 04 AB                   	bpl		PN5
   2709 0000CF2A 02 40 0D 11             	lw		r1,#'-'		; if so, display the sign
   2710 0000CF2E 8A 4F 00 AF             	call	GOOUT
   2711 0000CF32                        PN5
   2712 0000CF32 FF 67                   	sub		r7,r7,#1
   2713 0000CF34 70 E1                   	lb		r1,[r7]		; now unstack the digits and display
   2714 0000CF36 89 4F 0C AF             	call	GOOUT
   2715 0000CF3A F5 4F 7E 10             	cmp		r7,#NUMWKA
   2716 0000CF3E F9 B7                   	bgtu	PN5
   2717 0000CF40                        PNRET
   2718 0000CF40 E0 FF                   	lw		lr,[sp]
   2719 0000CF42 E2 F5                   	lw		r5,2[sp]
   2720 0000CF44 E4 F6                   	lw		r6,4[sp]
   2721 0000CF46 E6 F7                   	lw		r7,6[sp]
   2722 0000CF48 08 6E                   	add		sp,sp,#8
   2723 0000CF4A F0 80                   	ret
                                        
                                        
                                        ; r1 = number to print
                                        ; r2 = number of digits
   2728 0000CF4C                        PRTHEXNUM
   2729 0000CF4C F6 6E                   	sub		sp,sp,#10
   2730 0000CF4E E0 DF                   	sw		lr,[sp]
   2731 0000CF50 E2 D5                   	sw		r5,2[sp]
   2732 0000CF52 E4 D6                   	sw		r6,4[sp]
   2733 0000CF54 E6 D7                   	sw		r7,6[sp]
   2734 0000CF56 E8 D8                   	sw		r8,8[sp]
                                        
   2736 0000CF58 0A 40 02 17             	lea		r7,NUMWKA	; r7 = pointer to numeric work area
   2737 0000CF5C 10 16                   	lw		r6,r1		; save number for later
   2738 0000CF5E 0A 15                   	lw		r5,#10		; r5 = min number of chars
   2739 0000CF60 10 14                   	lw		r4,r1
   2740 0000CF62 46 24                   	
   2741 0000CF64 03 AB                   	bpl		PHN1		; if not
   2742 0000CF66 20 34                   	neg		r4			; else make it positive
   2743 0000CF68 FF 65                   	sub		r5,r5,#1	; one less for width count
   2744 0000CF6A 0A 18                   	lw		r8,#10		; maximum of 10 digits
   2745 0000CF6C                        PHN1
   2746 0000CF6C 40 11                   	lw		r1,r4
   2747 0000CF6E 00 40 5F 31             	and		r1,#15
   2748 0000CF72 FF 4F 16 10             	cmp		r1,#10
   2749 0000CF76 02 A0                   	blt		PHN7
   2750 0000CF78 37 61                   	add		r1,r1,#'A'-10
   2751 0000CF7A 01 AE                   	br		PHN8
   2752 0000CF7C                        PHN7
   2753 0000CF7C 30 61                   	add		r1,r1,#'0'		; convert remainder to ascii
   2754 0000CF7E                        PHN8
   2755 0000CF7E 70 C1                   	sb		r1,[r7]		; and store in buffer
   2756 0000CF80 01 67                   	add		r7,r7,#1
   2757 0000CF82 FF 65                   	sub		r5,r5,#1	; decrement width
   2758 0000CF84 A1 34                   	shr		r4,#1
   2759 0000CF86 A1 34                   	shr		r4,#1
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 47
noc_boot11.a
   2760 0000CF88 A1 34                   	shr		r4,#1
   2761 0000CF8A A1 34                   	shr		r4,#1
   2762 0000CF8C 02 A8                   	beq		PHN6			; is it zero yet ?
   2763 0000CF8E FF 68                   	sub		r8,r8,#1	; safety
   2764 0000CF90 ED B9                   	bne		PHN1
   2765 0000CF92                        PHN6
   2766 0000CF92 56 25                   	or		r5,r5		; test pad count
   2767 0000CF94 06 A2                   	ble		PHN4			; skip padding if not needed
   2768 0000CF96                        PHN3
   2769 0000CF96 02 40 00 11             	lw		r1,#' '		; display the required leading spaces
   2770 0000CF9A 86 4F 0A AF             	call	GOOUT
   2771 0000CF9E FF 65                   	sub		r5,r5,#1
   2772 0000CFA0 FA B9                   	bne		PHN3
   2773 0000CFA2                        PHN4
   2774 0000CFA2 66 26                   	or		r6,r6		; is number negative?
   2775 0000CFA4 04 AB                   	bpl		PHN5
   2776 0000CFA6 02 40 0D 11             	lw		r1,#'-'		; if so, display the sign
   2777 0000CFAA 86 4F 02 AF             	call	GOOUT
   2778 0000CFAE                        PHN5
   2779 0000CFAE FF 67                   	sub		r7,r7,#1
   2780 0000CFB0 70 E1                   	lb		r1,[r7]		; now unstack the digits and display
   2781 0000CFB2 85 4F 0E AF             	call	GOOUT
   2782 0000CFB6 F5 4F 7E 10             	cmp		r7,#NUMWKA
   2783 0000CFBA F9 B7                   	bgtu	PHN5
   2784 0000CFBC                        PHNRET
   2785 0000CFBC E0 FF                   	lw		lr,[sp]
   2786 0000CFBE E2 F5                   	lw		r5,2[sp]
   2787 0000CFC0 E4 F6                   	lw		r6,4[sp]
   2788 0000CFC2 E6 F7                   	lw		r7,6[sp]
   2789 0000CFC4 E8 F8                   	lw		r8,8[sp]
   2790 0000CFC6 0A 6E                   	add		sp,sp,#10
   2791 0000CFC8 F0 80                   	ret
                                        
                                        
                                        ; r1 = pointer to line
                                        ; returns r1 = pointer to end of line + 1
   2796 0000CFCA                        PRTLN
   2797 0000CFCA FC 6E                       sub     sp,sp,#4
   2798 0000CFCC E0 DF                       sw      lr,[sp]
   2799 0000CFCE E2 D5                       sw      r5,2[sp]
   2800 0000CFD0 12 15                       add     r5,r1,#2
   2801 0000CFD2 5E E1                       lb		r1,-2[r5]	; get the binary line number
   2802 0000CFD4 0E 21                       zxb		r1
   2803 0000CFD6 5F E2                       lb		r2,-1[r5]
   2804 0000CFD8 0E 22                       zxb		r2
   2805 0000CFDA 81 32                       shl		r2,#1
   2806 0000CFDC 81 32                       shl		r2,#1
   2807 0000CFDE 81 32                       shl		r2,#1
   2808 0000CFE0 81 32                       shl		r2,#1
   2809 0000CFE2 81 32                       shl		r2,#1
   2810 0000CFE4 81 32                       shl		r2,#1
   2811 0000CFE6 81 32                       shl		r2,#1
   2812 0000CFE8 81 32                       shl		r2,#1
   2813 0000CFEA 26 21                       or		r1,r2
   2814 0000CFEC 00 12                       lw      r2,#0       ; display a 0 or more digit line no.
   2815 0000CFEE 7D BF                   	call	PRTNUM
   2816 0000CFF0 02 40 00 11             	lw      r1,#' '     ; followed by a blank
   2817 0000CFF4 83 4F 0D AF             	call	GOOUT
   2818 0000CFF8 00 12                   	lw      r2,#0       ; stop char. is a zero
   2819 0000CFFA 50 11                   	lw      r1,r5
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 48
noc_boot11.a
   2820 0000CFFC 2E BF                   	call    PRTSTG		; display the rest of the line
   2821 0000CFFE E2 F5                   	lw      r5,2[sp]
   2822 0000D000 E0 FF                   	lw      lr,[sp]
   2823 0000D002 04 6E                   	add     sp,sp,#4
   2824 0000D004 F0 80                   	ret
                                        
                                        
                                        ; ===== Test text byte following the call to this subroutine. If it
                                        ;	equals the byte pointed to by r8, return to the code following
                                        ;	the call. If they are not equal, brnch to the point
                                        ;	indicated by the offset byte following the text byte.
                                        ;
                                        ; Registers Affected
                                        ;   r3,r8
                                        ; Returns
                                        ;	r8 = updated text pointer
                                        ;
   2837 0000D006                        TSTC
   2838 0000D006 FC 6E                   	sub		sp,sp,#4
   2839 0000D008 E0 DF                   	sw		lr,[sp]
   2840 0000D00A E2 D1                   	sw		r1,2[sp]
   2841 0000D00C 2F AF                   	call	IGNBLK		; ignore leading blanks
   2842 0000D00E E0 FF                   	lw		lr,[sp]	; get the return address
   2843 0000D010 F0 E3                   	lb		r3,[lr]	; get the byte to compare
   2844 0000D012 80 E1                   	lb		r1,[r8]
   2845 0000D014 1D 23                   	cmp		r3,r1		; is it = to what r8 points to?
   2846 0000D016 05 A8                   	beq		TC1			; if so
                                        						; If not, add the second
   2848 0000D018 F1 E3                   	lb		r3,1[lr]	; byte following the call to
   2849 0000D01A 30 2F                   	add		lr,r3		; the return address.
   2850 0000D01C E2 F1                   	lw		r1,2[sp]
   2851 0000D01E 04 6E                   	add		sp,sp,#4
   2852 0000D020 F0 80                   	ret					; jump to the routine
   2853 0000D022                        TC1
   2854 0000D022 01 68                   	add		r8,r8,#1	; if equal, bump text pointer
   2855 0000D024 E2 F1                   	lw		r1,2[sp]
   2856 0000D026 04 6E                   	add     sp,sp,#4
   2857 0000D028 F2 80                   	jmp		2[lr]		; Skip the 2 bytes following
                                        						; the call and continue.
                                        
                                        
                                        ; ===== See if the text pointed to by r8 is a number. If so,
                                        ;	return the number in r2 and the number of digits in r3,
                                        ;	else return zero in r2 and r3.
                                        ; Registers Affected
                                        ;   r1,r2,r3,r4
                                        ; Returns
                                        ; 	r1 = number
                                        ;	r2 = number of digits in number
                                        ;	r8 = updated text pointer
                                        ;
   2871 0000D02A                        TSTNUM
   2872 0000D02A FE 6E                   	sub		sp,sp,#2
   2873 0000D02C E0 DF                   	sw		lr,[sp]
   2874 0000D02E 1E AF                   	call	IGNBLK		; skip over blanks
   2875 0000D030 00 11                   	lw		r1,#0		; initialize return parameters
   2876 0000D032 00 12                   	lw		r2,#0
   2877 0000D034                        TN1
   2878 0000D034 80 E3                   	lb		r3,[r8]
   2879 0000D036 FD 4F 30 10             	cmp		r3,#'0'		; is it less than zero?
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 49
noc_boot11.a
   2880 0000D03A 15 A4                   	bltu	TSNMRET 	; if so, that's all
   2881 0000D03C FC 4F 37 10             	cmp		r3,#'9'		; is it greater than nine?
   2882 0000D040 12 A7                   	bgtu	TSNMRET 	; if so, return
   2883 0000D042 33 43 14 10             	cmp		r1,#214748364	; see if there's room for new digit
   2884 0000D046 04 A6                   	bleu	TN2
   2885 0000D048 2C 4D 07 11             	lea		r1,msgNumTooBig
   2886 0000D04C E3 4F 07 AE             	br		ERROR		; if not, we've overflowd
   2887 0000D050                        TN2
   2888 0000D050 10 14                   	lw		r4,r1		; quickly multiply result by 10
   2889 0000D052 81 31                   	shl		r1,#1		; * 2
   2890 0000D054 81 31                   	shl		r1,#1		; * 4
   2891 0000D056 40 21                   	add		r1,r4		; * 5
   2892 0000D058 81 31                   	shl		r1,#1		; * 10
   2893 0000D05A 01 68                   	add		r8,r8,#1	; adjust text pointer
   2894 0000D05C 00 40 5F 33             	and		r3,#0xF		; add in the new digit
   2895 0000D060 30 21                   	add		r1,r3
   2896 0000D062 01 62                   	add		r2,r2,#1	; increment the no. of digits
   2897 0000D064 E7 BE                   	br		TN1
   2898 0000D066                        TSNMRET
   2899 0000D066 E0 FF                   	lw		lr,[sp]
   2900 0000D068 02 6E                   	add		sp,sp,#2
   2901 0000D06A F0 80                   	ret
                                        
                                        
                                        ;===== Skip over blanks in the text pointed to by r8.
                                        ;
                                        ; Registers Affected:
                                        ;	r8
                                        ; Returns
                                        ;	r8 = pointer updateded past any spaces or tabs
                                        ;
   2911 0000D06C                        IGNBLK
   2912 0000D06C FE 6E                   	sub		sp,sp,#2
   2913 0000D06E E0 D1                   	sw		r1,[sp]
   2914 0000D070                        IGB2
   2915 0000D070 80 E1                   	lb		r1,[r8]			; get char
   2916 0000D072 FE 4F 10 10             	cmp		r1,#' '			; see if it's a space
   2917 0000D076 03 A8                   	beq		IGB1			; if so, swallow it
   2918 0000D078 FF 4F 17 10             	cmp		r1,#'\t'		; or a tab
   2919 0000D07C 02 A9                   	bne		IGBRET
   2920 0000D07E                        IGB1
   2921 0000D07E 01 68                   	add		r8,r8,#1		; increment the text pointer
   2922 0000D080 F7 BE                   	br		IGB2
   2923 0000D082                        IGBRET
   2924 0000D082 E0 F1                   	lw		r1,[sp]
   2925 0000D084 02 6E                   	add		sp,sp,#2
   2926 0000D086 F0 80                   	ret
                                        
                                        
                                        ; ===== Convert the line of text in the input buffer to upper
                                        ;	case (except for stuff between quotes).
                                        ;
                                        ; Registers Affected
                                        ;   r1,r3
                                        ; Returns
                                        ;	r8 = pointing to end of text in buffer
                                        ;
   2937 0000D088                        TOUPBUF
   2938 0000D088 FE 6E                   	sub		sp,sp,#2
   2939 0000D08A E0 DF                   	sw		lr,[sp]
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 50
noc_boot11.a
   2940 0000D08C 0A 40 0E 18             	lea		r8,BUFFER	; set up text pointer
   2941 0000D090 00 13                   	lw		r3,#0		; clear quote flag
   2942 0000D092                        TOUPB1
   2943 0000D092 80 E1                   	lb		r1,[r8]		; get the next text char.
   2944 0000D094 01 68                   	add		r8,r8,#1
   2945 0000D096 FF 4F 13 10             	cmp		r1,#CR		; is it end of line?
   2946 0000D09A 13 A8                   	beq		TOUPBRT 	; if so, return
   2947 0000D09C FD 4F 1E 10             	cmp		r1,#'"'		; a double quote?
   2948 0000D0A0 08 A8                   	beq		DOQUO
   2949 0000D0A2 FD 4F 19 10             	cmp		r1,#''''	; or a single quote?
   2950 0000D0A6 05 A8                   	beq		DOQUO
   2951 0000D0A8 30 10                   	cmp		r3,#0		; inside quotes?
   2952 0000D0AA F3 B9                   	bne		TOUPB1		; if so, do the next one
   2953 0000D0AC 0D AF                   	call	toUpper 	; convert to upper case
   2954 0000D0AE 8F C1                   	sb		r1,-1[r8]	; store it
   2955 0000D0B0 F0 BE                   	br		TOUPB1		; and go back for more
   2956 0000D0B2                        DOQUO
   2957 0000D0B2 30 10                   	cmp		r3,#0		; are we inside quotes?
   2958 0000D0B4 02 A9                   	bne		DOQUO1
   2959 0000D0B6 10 13                   	lw		r3,r1		; if not, toggle inside-quotes flag
   2960 0000D0B8 EC BE                   	br		TOUPB1
   2961 0000D0BA                        DOQUO1
   2962 0000D0BA 1D 23                   	cmp		r3,r1		; make sure we're ending proper quote
   2963 0000D0BC EA B9                   	bne		TOUPB1		; if not, ignore it
   2964 0000D0BE 00 13                   	lw		r3,#0		; else clear quote flag
   2965 0000D0C0 E8 BE                   	br		TOUPB1
   2966 0000D0C2                        TOUPBRT
   2967 0000D0C2 E0 FF                   	lw		lr,[sp]
   2968 0000D0C4 02 6E                   	add		sp,sp,#2
   2969 0000D0C6 F0 80                   	ret
                                        
                                        
                                        ; ===== Convert the character in r1 to upper case
                                        ;
   2974 0000D0C8                        toUpper
   2975 0000D0C8 F9 4F 1F 10             	cmp		r1,#'a'		; is it < 'a'?
   2976 0000D0CC 04 A0                   	blt	    TOUPRET
   2977 0000D0CE F8 4F 16 10             	cmp		r1,#'z'		; or > 'z'?
   2978 0000D0D2 01 A3                   	bgt	    TOUPRET
   2979 0000D0D4 E0 61                   	sub		r1,r1,#32	; if not, make it upper case
   2980 0000D0D6                        TOUPRET
   2981 0000D0D6 F0 80                   	ret
                                        
                                        
                                        ; 'CHKIO' checks the input. If there's no input, it will return
                                        ; to the caller with the Z flag set. If there is input, the Z
                                        ; flag is cleared and the input byte is in r2. However, if a
                                        ; control-C is read, 'CHKIO' will warm-start BASIC and will not
                                        ; return to the caller.
                                        ;
   2990 0000D0D8                        CHKIO
   2991 0000D0D8 FE 6E                   	sub		sp,sp,#2	; save link reg
   2992 0000D0DA E0 DF                   	sw		lr,[sp]
   2993 0000D0DC 7C 4F 0B AF             	call	GOIN		; get input if possible
   2994 0000D0E0 07 A8                   	beq		CHKRET2		; if Zero, no input
   2995 0000D0E2 1D 10                   	cmp		r1,#CTRLC	; is it control-C?
   2996 0000D0E4 02 A9                   	bne		CHKRET		; if not
   2997 0000D0E6 80 4F 09 AE             	jmp		WSTART		; if so, do a warm start
   2998 0000D0EA                        CHKRET
   2999 0000D0EA E0 FF                   	lw		lr,[sp]
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 51
noc_boot11.a
   3000 0000D0EC 02 6E                   	add		sp,sp,#2	; Z=0
   3001 0000D0EE F0 80                   	ret
   3002 0000D0F0                        CHKRET2
   3003 0000D0F0 E0 FF                   	lw		lr,[sp]
   3004 0000D0F2 02 6E                   	add		sp,sp,#2
   3005 0000D0F4 00 11                   	lw		r1,#0		; Z=1
   3006 0000D0F6 F0 80                   	ret
                                        
                                        
                                        ; ===== Display a CR-LF sequence
                                        ;
   3011 0000D0F8                        CRLF
   3012 0000D0F8 2A 4D 09 11             	lea		r1,CLMSG
                                        
                                        
                                        ; ===== Display a zero-ended string pointed to by register r1
                                        ; Registers Affected
                                        ;   r1,r2,r4
                                        ;
   3019 0000D0FC                        PRMESG
   3020 0000D0FC FC 6E                   	sub		sp,sp,#4
   3021 0000D0FE E0 DF                   	sw		lr,[sp]
   3022 0000D100 E2 D5                   	sw		r5,2[sp]
   3023 0000D102 10 15                   	lw      r5,r1       ; r5 = pointer to message
   3024 0000D104                        PRMESG1
   3025 0000D104 01 65                   	add		r5,r5,#1
   3026 0000D106 5F E1                   	lb		r1,-1[r5]	; 	get the char.
   3027 0000D108 03 A8                   	beq		PRMRET
   3028 0000D10A 7B 4F 02 AF             	call	GOOUT		;else display it trashes r4
   3029 0000D10E FA BE                   	br		PRMESG1
   3030 0000D110                        PRMRET
   3031 0000D110 50 11                   	lw		r1,r5
   3032 0000D112 E2 F5                   	lw		r5,2[sp]
   3033 0000D114 E0 FF                   	lw		lr,[sp]
   3034 0000D116 04 6E                   	add		sp,sp,#4
   3035 0000D118 F0 80                   	ret
                                        
                                        
                                        ; ===== Display a zero-ended string pointed to by register r1
                                        ; Registers Affected
                                        ;   r1,r2,r3
                                        ;
   3042 0000D11A                        PRMESGAUX
   3043 0000D11A FC 6E                   	sub		sp,sp,#4
   3044 0000D11C E0 DF                   	sw		lr,[sp]
   3045 0000D11E E2 D5                   	sw		r5,2[sp]
   3046 0000D120 10 15                   	lw      r5,r1       ; r3 = pointer
   3047 0000D122                        PRMESGA1
   3048 0000D122 01 65                   	add		r5,r5,#1
   3049 0000D124 5F E1                   	lb		r1,-1[r5]	; 	get the char.
   3050 0000D126 03 A8                   	beq		PRMRETA
   3051 0000D128 7A 4F 07 AF             	call	GOAUXO		;else display it
   3052 0000D12C FA BE                   	br		PRMESGA1
   3053 0000D12E                        PRMRETA
   3054 0000D12E 50 11                   	lw		r1,r5
   3055 0000D130 E2 F5                   	lw		r5,2[sp]
   3056 0000D132 E0 FF                   	lw		lr,[sp]
   3057 0000D134 04 6E                   	add		sp,sp,#4
   3058 0000D136 F0 80                   	ret
                                        
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 52
noc_boot11.a
                                        ;*****************************************************
                                        ; The following routines are the only ones that need *
                                        ; to be changed for a different I/O environment.     *
                                        ;*****************************************************
                                        
                                        
                                        ; ===== Output character to the console (Port 1) from register D0
                                        ;	(Preserves all registers.)
                                        ;
   3069 0000D138                        OUTC
   3070 0000D138 FF BE                   	jmp		_putChar
                                        
                                        
                                        ; ===== Input a character from the console into register D0 (or
                                        ;	return Zero status if there's no character available).
                                        ;
   3076 0000D13A                        INC
   3077 0000D13A FE 6E                   	add		sp,sp,#-2
   3078 0000D13C E0 DF                   	sw		lr,[sp]
   3079 0000D13E 01 4B 00 E1             	lb		r1,ROUTER+RTR_RXSTAT
   3080 0000D142 04 A8                   	beq		INC1
   3081 0000D144 77 4F 0C AF             	call	Recv
   3082 0000D148 3D 40 0D AF             	call	RecvDispatch
   3083 0000D14C                        INC1
                                        ; get char from keyboard
                                        ; returns char in r1
   3086 0000D14C                        _getChar
   3087 0000D14C C5 4D 02 E1             	lb		r1,KBD+2	; get keyboard strobe
   3088 0000D150 08 AB                   	bpl		gc1
   3089 0000D152 C5 4D 00 E1             	lb		r1,KBD		; get character and clear keyboard strobe
   3090 0000D156 05 AA                   	bmi		gc1			; was it a keyup event ? (ignore)
   3091 0000D158 07 40 5F 31             	and		r1,#0x7f
   3092 0000D15C E0 FF                   	lw		lr,[sp]
   3093 0000D15E 02 6E                   	add		sp,sp,#2
   3094 0000D160 F0 80                   	ret
   3095 0000D162                        gc1
   3096 0000D162 E0 FF                   	lw		lr,[sp]
   3097 0000D164 02 6E                   	add		sp,sp,#2
   3098 0000D166 00 11                   	lw		r1,#0		; return Z=1 (no character)
   3099 0000D168 F0 80                   	ret
                                        
                                        
                                        ; get char from keyboard
                                        ; returns char in r1
   3104 0000D16A                        _getCharWait
   3105 0000D16A                        gc2
   3106 0000D16A C5 4D 02 E1             	lb		r1,KBD+2	; get keyboard strobe
   3107 0000D16E FD BB                   	bpl		gc2
   3108 0000D170 C5 4D 00 E1             	lb		r1,KBD		; get character and clear keyboard strobe
   3109 0000D174 FA BA                   	bmi		gc2			; was it a keyup event ? (ignore)
   3110 0000D176 07 40 5F 31             	and		r1,#0x7f
   3111 0000D17A F0 80                   	ret
                                        
                                        
                                        ; Trigger a load operation on the target node.
                                        
   3116 0000D17C                        TriggerTgtLoad:
   3117 0000D17C 74 4F 00 AF             	call	zeroTxBuf
   3118 0000D180 03 40 06 E2             	lb		r2,tgtNode
   3119 0000D184 04 40 0F C2             	sb		r2,txBuf+MSG_DST
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 53
noc_boot11.a
   3120 0000D188 01 40 01 12             	lw		r2,#$11
   3121 0000D18C 04 40 0E C2             	sb		r2,txBuf+MSG_SRC
   3122 0000D190 0A 12                   	lw		r2,#10				; trigger load on target node
   3123 0000D192 04 40 07 C2             	sb		r2,txBuf+MSG_TYPE
   3124 0000D196 73 4F 0E AF             	call	Xmit
   3125 0000D19A E2 F2                   	lw		r2,2[sp]
   3126 0000D19C E0 FF                   	lw		lr,[sp]
   3127 0000D19E F0 80                   	ret
                                        
                                        ; ===== Output character to the host (Port 2) from register r1
                                        ;	(Preserves all registers.)
                                        ;
   3132 0000D1A0                        AUXOUT
   3133 0000D1A0 FC 6E                   	add		sp,sp,#-4
   3134 0000D1A2 E0 DF                   	sw		lr,[sp]
   3135 0000D1A4 E2 D2                   	sw		r2,2[sp]
   3136 0000D1A6 03 40 06 E2             	lb		r2,tgtNode
                                        	cmp		#$11
   3138 0000D1AA 05 A9                   	bne		auxout1
   3139 0000D1AC 32 49 0D AF             	call	putSerial	; call boot rom routine
   3140 0000D1B0 E2 F2                   	lw		r2,2[sp]
   3141 0000D1B2 E0 FF                   	lw		lr,[sp]
   3142 0000D1B4 F0 80                   	ret
   3143 0000D1B6                        auxout1:
   3144 0000D1B6 72 4F 03 AF             	call	zeroTxBuf
   3145 0000D1BA 04 40 00 C1             	sb		r1,txBuf
   3146 0000D1BE 03 40 06 E2             	lb		r2,tgtNode
   3147 0000D1C2 04 40 0F C2             	sb		r2,txBuf+MSG_DST
   3148 0000D1C6 01 40 01 12             	lw		r2,#$11
   3149 0000D1CA 04 40 0E C2             	sb		r2,txBuf+MSG_SRC
   3150 0000D1CE 0B 12                   	lw		r2,#11				; recieve BASIC program char
   3151 0000D1D0 04 40 07 C2             	sb		r2,txBuf+MSG_TYPE
   3152 0000D1D4 71 4F 0F AF             	call	Xmit
   3153 0000D1D8 E2 F2                   	lw		r2,2[sp]
   3154 0000D1DA E0 FF                   	lw		lr,[sp]
   3155 0000D1DC F0 80                   	ret
                                        ;
                                        ; ===== Input a character from the host into register D0 (or
                                        ;	return negative status if there's no character available).
                                        ;
   3160 0000D1DE                        AUXIN
                                        ; get character from serial port
                                        ; return  N=1 if no character available
   3163 0000D1DE 31 49 02 AE             	jmp		peekSerial
                                        
                                        
   3166 0000D1E2                        _scrollScreen
   3167 0000D1E2 FC 6E                   	sub		sp,sp,#4
   3168 0000D1E4 E0 D5                   	sw		r5,[sp]
   3169 0000D1E6 60 40 00 13             	lw		r3,#1536	; number of chars to move - 1
   3170 0000D1EA 00 42 00 12             	lw		r2,#VIDEORAM
   3171 0000D1EE 03 40 00 E1             	lb		r1,txtWidth
   3172 0000D1F2 81 31                   	shl		r1,#1
   3173 0000D1F4 81 31                   	shl		r1,#1
   3174 0000D1F6                        ss1:
   3175 0000D1F6 20 15                   	lw		r5,r2
   3176 0000D1F8 10 25                   	add		r5,r1
   3177 0000D1FA 50 F4                   	lw		r4,[r5]		; char at next line
   3178 0000D1FC 20 D4                   	sw		r4,[r2]		; goes to this line
   3179 0000D1FE 04 62                   	add		r2,r2,#4
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 54
noc_boot11.a
   3180 0000D200 FF 63                   	sub		r3,r3,#1
   3181 0000D202 F9 B9                   	bne     ss1
                                        	; blank out last line
   3183 0000D204 02 40 00 13             	lw		r3,#' '
   3184 0000D208 03 40 08 D3             	sh		r3,charToPrint
   3185 0000D20C 03 40 00 E3             	lb		r3,txtWidth
   3186 0000D210 03 40 08 F4             	lw		r4,charToPrint	; and colors
   3187 0000D214                        ss2
   3188 0000D214 20 D4                   	sw		r4,[r2]
   3189 0000D216 04 62                   	add		r2,r2,#4
   3190 0000D218 FF 63                   	sub		r3,r3,#1
   3191 0000D21A FC B9                   	bne     ss2
   3192 0000D21C E0 F5                   	lw		r5,[sp]
   3193 0000D21E 04 6E                   	add		sp,sp,#4
   3194 0000D220 F0 80                   	ret
                                        
                                        
                                        ; flash the character at the screen position
                                        ;   r1: 1 = flash, 0 = no flash
   3199 0000D222                        _flashCursor
   3200 0000D222 00 42 00 12             	lw		r2,#VIDEORAM
   3201 0000D226 03 40 04 F3             	lh		r3,pos
   3202 0000D22A 81 33                   	shl		r3,#1
   3203 0000D22C 81 33                   	shl		r3,#1
   3204 0000D22E 20 23                   	add		r3,r2		; r3 = scr[pos]
                                        
   3206 0000D230 16 21                   	or		r1,r1
   3207 0000D232 04 A8                   	beq		fc1
   3208 0000D234 33 E2                   	lb		r2,3[r3]	; get background color
   3209 0000D236 08 40 60 32             	or		r2,#0x80	; set flash indicator
   3210 0000D23A 03 AE                   	br		fcx
   3211 0000D23C                        fc1
   3212 0000D23C 33 E2                   	lb		r2,3[r3]	; get background color
   3213 0000D23E 07 40 5F 32             	and		r2,#0x7f	; clear flash indicator
   3214 0000D242                        fcx:
   3215 0000D242 33 C2                   	sb		r2,3[r3]
   3216 0000D244 F0 80                   	ret
                                        
                                        
   3219 0000D246                        _cls
   3220 0000D246 2F 49 00 AF             	call	clearScreen
   3221 0000D24A 90 4F 02 AE             	br		FINISH
                                        
                                        
                                        ; ===== Return to the resident monitor, operating system, etc.
                                        ;
   3226 0000D24E                        BYEBYE
   3227 0000D24E 08 40 04 FE             	lw		sp,OSSP
   3228 0000D252 E0 FF                       lw      lr,[sp]
   3229 0000D254 02 6E                       add		sp,sp,#2
   3230 0000D256 F0 80                   	ret
                                        
                                        ;	MOVE.B	#228,D7 	return to Tutor
                                        ;	TRAP	#14
                                        
   3235 0000D258 0D 0A 42 75 74 74      msgInit db	CR,LF,"Butterfly Tiny BASIC v1.1",CR,LF,"(C) 2005-2017  Robert Finch",CR,LF,LF,0
   3235 0000D25E 65 72 66 6C 79 20 54  
   3235 0000D265 69 6E 79 20 42 41 53  
   3235 0000D26C 49 43 20 76 31 2E 31  
   3235 0000D273 0D 0A 28 43 29 20 32  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 55
noc_boot11.a
   3235 0000D27A 30 30 35 2D 32 30 31  
   3235 0000D281 37 20 20 52 6F 62 65  
   3235 0000D288 72 74 20 46 69 6E 63  
   3235 0000D28F 68 0D 0A 0A 00        
   3236 0000D294 0D 0A 4F 4B 0D 0A      OKMSG	db	CR,LF,"OK",CR,LF,0
   3236 0000D29A 00                    
   3237 0000D29B 57 68 61 74 3F 0D      msgWhat	db	"What?",CR,LF,0
   3237 0000D2A1 0A 00                 
   3238 0000D2A3 53 6F 72 72 79 2E      SRYMSG	db	"Sorry."
                                      
   3239 0000D2A9 0D 0A 00               CLMSG	db	CR,LF,0
   3240 0000D2AC 43 6F 6D 70 61 63      msgReadError	db	"Compact FLASH read error",CR,LF,0
   3240 0000D2B2 74 20 46 4C 41 53 48  
   3240 0000D2B9 20 72 65 61 64 20 65  
   3240 0000D2C0 72 72 6F 72 0D 0A 00  
                                      
   3241 0000D2C7 4E 75 6D 62 65 72      msgNumTooBig	db	"Number is too big",CR,LF,0
   3241 0000D2CD 20 69 73 20 74 6F 6F  
   3241 0000D2D4 20 62 69 67 0D 0A 00  
                                      
   3242 0000D2DB 44 69 76 69 73 69      msgDivZero		db	"Division by zero",CR,LF,0
   3242 0000D2E1 6F 6E 20 62 79 20 7A  
   3242 0000D2E8 65 72 6F 0D 0A 00     
   3243 0000D2EE 4F 75 74 20 6F 66      msgVarSpace     db  "Out of variable space",CR,LF,0
   3243 0000D2F4 20 76 61 72 69 61 62  
   3243 0000D2FB 6C 65 20 73 70 61 63  
   3243 0000D302 65 0D 0A 00           
   3244 0000D306 20 62 79 74 65 73      msgBytesFree	db	" bytes free",CR,LF,0
   3244 0000D30C 20 66 72 65 65 0D 0A  
   3244 0000D313 00                    
   3245 0000D314 0D 0A 52 65 61 64      msgReady		db	CR,LF,"Ready",CR,LF,0
   3245 0000D31A 79 0D 0A 00           
   3246 0000D31E 45 78 70 65 63 74      msgComma		db	"Expecting a comma",CR,LF,0
   3246 0000D324 69 6E 67 20 61 20 63  
   3246 0000D32B 6F 6D 6D 61 0D 0A 00  
                                      
   3247 0000D332 4C 69 6E 65 20 6E      msgLineRange	db	"Line number too big",CR,LF,0
   3247 0000D338 75 6D 62 65 72 20 74  
   3247 0000D33F 6F 6F 20 62 69 67 0D  
   3247 0000D346 0A 00                 
   3248 0000D348 45 78 70 65 63 74      msgVar			db	"Expecting a variable",CR,LF,0
   3248 0000D34E 69 6E 67 20 61 20 76  
   3248 0000D355 61 72 69 61 62 6C 65  
   3248 0000D35C 0D 0A 00              
   3249 0000D35F 52 4E 44 20 62 61      msgRNDBad		db	"RND bad parameter",CR,LF,0
   3249 0000D365 64 20 70 61 72 61 6D  
   3249 0000D36C 65 74 65 72 0D 0A 00  
                                      
   3250 0000D373 53 59 53 20 62 61      msgSYSBad		db	"SYS bad address",CR,LF,0
   3250 0000D379 64 20 61 64 64 72 65  
   3250 0000D380 73 73 0D 0A 00        
   3251 0000D385 49 4E 50 55 54 20      msgInputVar		db	"INPUT expecting a variable",CR,LF,0
   3251 0000D38B 65 78 70 65 63 74 69  
   3251 0000D392 6E 67 20 61 20 76 61  
   3251 0000D399 72 69 61 62 6C 65 0D  
   3251 0000D3A0 0A 00                 
   3252 0000D3A2 4E 45 58 54 20 77      msgNextFor		db	"NEXT without FOR",CR,LF,0
   3252 0000D3A8 69 74 68 6F 75 74 20  
   3252 0000D3AF 46 4F 52 0D 0A 00     
   3253 0000D3B5 4E 45 58 54 20 65      msgNextVar		db	"NEXT expecting a defined variable",CR,LF,0
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 56
noc_boot11.a
   3253 0000D3BB 78 70 65 63 74 69 6E  
   3253 0000D3C2 67 20 61 20 64 65 66  
   3253 0000D3C9 69 6E 65 64 20 76 61  
   3253 0000D3D0 72 69 61 62 6C 65 0D  
   3253 0000D3D7 0A 00                 
   3254 0000D3D9 47 4F 54 4F 2F 47      msgBadGotoGosub	db	"GOTO/GOSUB bad line number",CR,LF,0
   3254 0000D3DF 4F 53 55 42 20 62 61  
   3254 0000D3E6 64 20 6C 69 6E 65 20  
   3254 0000D3ED 6E 75 6D 62 65 72 0D  
   3254 0000D3F4 0A 00                 
   3255 0000D3F6 52 45 54 55 52 4E      msgRetWoGosub   db	"RETURN without GOSUB",CR,LF,0
   3255 0000D3FC 20 77 69 74 68 6F 75  
   3255 0000D403 74 20 47 4F 53 55 42  
   3255 0000D40A 0D 0A 00              
   3256 0000D40D 50 72 6F 67 72 61      msgTooBig		db	"Program is too big",CR,LF,0
   3256 0000D413 6D 20 69 73 20 74 6F  
   3256 0000D41A 6F 20 62 69 67 0D 0A  
   3256 0000D421 00                    
   3257 0000D422 45 78 74 72 61 20      msgExtraChars	db	"Extra characters on line ignored",CR,LF,0
   3257 0000D428 63 68 61 72 61 63 74  
   3257 0000D42F 65 72 73 20 6F 6E 20  
   3257 0000D436 6C 69 6E 65 20 69 67  
   3257 0000D43D 6E 6F 72 65 64 0D 0A  
   3257 0000D444 00                    
                                        
   3259 0000D445 FF FF FF                	.align	4
   3326 = 0000D448                      LSTROM	equ	*		; end of possible ROM area
                                        ;
                                        ; Internal variables follow:
                                        ;
                                        		bss
                                        		org		0x0030
   3266 00000030                        txtWidth	db	0		; BIOS var =60
   3267 00000031                        txtHeight	db	0		; BIOS var =27
   3268 00000032                        cursx	db		0		; cursor x position
   3269 00000033                        cursy	db		0		; cursor y position
   3270 00000034                        pos		dw		0		; text screen position
   3271 00000036                        tgtNode	db		0
   3272 00000037                        srcNode	db		0
                                        		org		0x0038
   3274 00000038                        charToPrint		dw		0
   3275 0000003A                        fgColor			db		0
   3276 0000003B                        bkColor			db		0
   3277 0000003C                        cursFlash		db		0	; flash the cursor ?
   3278 0000003D                         				db		0
   3279 0000003E                        NormAttr		dw		0
                                        
   3281 00000040                        lineLinkTbl		fill.b	25,0	; screen line link table
   3282 00000059                         	align 4
                                        
                                        		org		0x0080
   3285 00000080                        typef   db      0   ; variable / expression type
   3286 00000081                                 align   4
   3287 00000084                        OSSP	dw	1	; OS value of sp
   3288 00000086                        CURRNT	dw	1	;	Current line pointer
   3289 00000088                        STKGOS	dw	1	;	Saves stack pointer in 'GOSUB'
   3290 0000008A                        STKINP	dw	1	;	Saves stack pointer during 'INPUT'
   3291 0000008C                        LOPVAR	dw	1	;	'FOR' loop save area
   3292 0000008E                        LOPINC	dw	1	;	increment
   3293 00000090                        LOPLMT	dw	1	;	limit
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 57
noc_boot11.a
   3294 00000092                        LOPLN	dw	1	;	line number
   3295 00000094                        LOPPT	dw	1	;	text pointer
   3296 00000096                        TXTUNF	dw	1	;	points to unfilled text area
   3297 00000098                        VARBGN	dw	1	;	points to variable area
   3298 0000009A                        IVARBGN dw  1   ;   points to integer variable area
   3299 0000009C                        SVARBGN dw  1   ;   points to string variable area
   3300 0000009E                        FVARBGN dw  1   ;   points to float variable area
   3301 000000A0                        STKBOT	dw	1	;	holds lower limit for stack growth
   3302 000000A2                        NUMWKA	fill.b	12,0			; numeric work area
   3303 000000AE                        BUFFER	fill.b	BUFLEN,0x00		;		Keyboard input buffer
                                        
                                                bss
                                                org     0x2000
   3307 00002000                        textScr1
                                                org     0x2000
                                        ;	END
                                        		.code
   3311 0000D448 FF FF FF FF FF FF FF    		.org	$D800
   3311 0000D44F FF FF FF FF FF FF FF  
   3311 0000D456 FF FF FF FF FF FF FF  
   3311 0000D45D FF FF FF FF FF FF FF  
   3311 0000D464 FF FF FF FF FF FF FF  
   3311 0000D46B FF FF FF FF FF FF FF  
   3311 0000D472 FF FF FF FF FF FF FF  
   3311 0000D479 FF FF FF FF FF FF FF  
   3311 0000D480 FF FF FF FF FF FF FF  
   3311 0000D487 FF FF FF FF FF FF FF  
   3311 0000D48E FF FF FF FF FF FF FF  
   3311 0000D495 FF FF FF FF FF FF FF  
   3311 0000D49C FF FF FF FF FF FF FF  
   3311 0000D4A3 FF FF FF FF FF FF FF  
   3311 0000D4AA FF FF FF FF FF FF FF  
   3311 0000D4B1 FF FF FF FF FF FF FF  
   3311 0000D4B8 FF FF FF FF FF FF FF  
   3311 0000D4BF FF FF FF FF FF FF FF  
   3311 0000D4C6 FF FF FF FF FF FF FF  
   3311 0000D4CD FF FF FF FF FF FF FF  
   3311 0000D4D4 FF FF FF FF FF FF FF  
   3311 0000D4DB FF FF FF FF FF FF FF  
   3311 0000D4E2 FF FF FF FF FF FF FF  
   3311 0000D4E9 FF FF FF FF FF FF FF  
   3311 0000D4F0 FF FF FF FF FF FF FF  
   3311 0000D4F7 FF FF FF FF FF FF FF  
   3311 0000D4FE FF FF FF FF FF FF FF  
   3311 0000D505 FF FF FF FF FF FF FF  
   3311 0000D50C FF FF FF FF FF FF FF  
   3311 0000D513 FF FF FF FF FF FF FF  
   3311 0000D51A FF FF FF FF FF FF FF  
   3311 0000D521 FF FF FF FF FF FF FF  
   3311 0000D528 FF FF FF FF FF FF FF  
   3311 0000D52F FF FF FF FF FF FF FF  
   3311 0000D536 FF FF FF FF FF FF FF  
   3311 0000D53D FF FF FF FF FF FF FF  
   3311 0000D544 FF FF FF FF FF FF FF  
   3311 0000D54B FF FF FF FF FF FF FF  
   3311 0000D552 FF FF FF FF FF FF FF  
   3311 0000D559 FF FF FF FF FF FF FF  
   3311 0000D560 FF FF FF FF FF FF FF  
   3311 0000D567 FF FF FF FF FF FF FF  
   3311 0000D56E FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 58
noc_boot11.a
   3311 0000D575 FF FF FF FF FF FF FF  
   3311 0000D57C FF FF FF FF FF FF FF  
   3311 0000D583 FF FF FF FF FF FF FF  
   3311 0000D58A FF FF FF FF FF FF FF  
   3311 0000D591 FF FF FF FF FF FF FF  
   3311 0000D598 FF FF FF FF FF FF FF  
   3311 0000D59F FF FF FF FF FF FF FF  
   3311 0000D5A6 FF FF FF FF FF FF FF  
   3311 0000D5AD FF FF FF FF FF FF FF  
   3311 0000D5B4 FF FF FF FF FF FF FF  
   3311 0000D5BB FF FF FF FF FF FF FF  
   3311 0000D5C2 FF FF FF FF FF FF FF  
   3311 0000D5C9 FF FF FF FF FF FF FF  
   3311 0000D5D0 FF FF FF FF FF FF FF  
   3311 0000D5D7 FF FF FF FF FF FF FF  
   3311 0000D5DE FF FF FF FF FF FF FF  
   3311 0000D5E5 FF FF FF FF FF FF FF  
   3311 0000D5EC FF FF FF FF FF FF FF  
   3311 0000D5F3 FF FF FF FF FF FF FF  
   3311 0000D5FA FF FF FF FF FF FF FF  
   3311 0000D601 FF FF FF FF FF FF FF  
   3311 0000D608 FF FF FF FF FF FF FF  
   3311 0000D60F FF FF FF FF FF FF FF  
   3311 0000D616 FF FF FF FF FF FF FF  
   3311 0000D61D FF FF FF FF FF FF FF  
   3311 0000D624 FF FF FF FF FF FF FF  
   3311 0000D62B FF FF FF FF FF FF FF  
   3311 0000D632 FF FF FF FF FF FF FF  
   3311 0000D639 FF FF FF FF FF FF FF  
   3311 0000D640 FF FF FF FF FF FF FF  
   3311 0000D647 FF FF FF FF FF FF FF  
   3311 0000D64E FF FF FF FF FF FF FF  
   3311 0000D655 FF FF FF FF FF FF FF  
   3311 0000D65C FF FF FF FF FF FF FF  
   3311 0000D663 FF FF FF FF FF FF FF  
   3311 0000D66A FF FF FF FF FF FF FF  
   3311 0000D671 FF FF FF FF FF FF FF  
   3311 0000D678 FF FF FF FF FF FF FF  
   3311 0000D67F FF FF FF FF FF FF FF  
   3311 0000D686 FF FF FF FF FF FF FF  
   3311 0000D68D FF FF FF FF FF FF FF  
   3311 0000D694 FF FF FF FF FF FF FF  
   3311 0000D69B FF FF FF FF FF FF FF  
   3311 0000D6A2 FF FF FF FF FF FF FF  
   3311 0000D6A9 FF FF FF FF FF FF FF  
   3311 0000D6B0 FF FF FF FF FF FF FF  
   3311 0000D6B7 FF FF FF FF FF FF FF  
   3311 0000D6BE FF FF FF FF FF FF FF  
   3311 0000D6C5 FF FF FF FF FF FF FF  
   3311 0000D6CC FF FF FF FF FF FF FF  
   3311 0000D6D3 FF FF FF FF FF FF FF  
   3311 0000D6DA FF FF FF FF FF FF FF  
   3311 0000D6E1 FF FF FF FF FF FF FF  
   3311 0000D6E8 FF FF FF FF FF FF FF  
   3311 0000D6EF FF FF FF FF FF FF FF  
   3311 0000D6F6 FF FF FF FF FF FF FF  
   3311 0000D6FD FF FF FF FF FF FF FF  
   3311 0000D704 FF FF FF FF FF FF FF  
   3311 0000D70B FF FF FF FF FF FF FF  
   3311 0000D712 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 59
noc_boot11.a
   3311 0000D719 FF FF FF FF FF FF FF  
   3311 0000D720 FF FF FF FF FF FF FF  
   3311 0000D727 FF FF FF FF FF FF FF  
   3311 0000D72E FF FF FF FF FF FF FF  
   3311 0000D735 FF FF FF FF FF FF FF  
   3311 0000D73C FF FF FF FF FF FF FF  
   3311 0000D743 FF FF FF FF FF FF FF  
   3311 0000D74A FF FF FF FF FF FF FF  
   3311 0000D751 FF FF FF FF FF FF FF  
   3311 0000D758 FF FF FF FF FF FF FF  
   3311 0000D75F FF FF FF FF FF FF FF  
   3311 0000D766 FF FF FF FF FF FF FF  
   3311 0000D76D FF FF FF FF FF FF FF  
   3311 0000D774 FF FF FF FF FF FF FF  
   3311 0000D77B FF FF FF FF FF FF FF  
   3311 0000D782 FF FF FF FF FF FF FF  
   3311 0000D789 FF FF FF FF FF FF FF  
   3311 0000D790 FF FF FF FF FF FF FF  
   3311 0000D797 FF FF FF FF FF FF FF  
   3311 0000D79E FF FF FF FF FF FF FF  
   3311 0000D7A5 FF FF FF FF FF FF FF  
   3311 0000D7AC FF FF FF FF FF FF FF  
   3311 0000D7B3 FF FF FF FF FF FF FF  
   3311 0000D7BA FF FF FF FF FF FF FF  
   3311 0000D7C1 FF FF FF FF FF FF FF  
   3311 0000D7C8 FF FF FF FF FF FF FF  
   3311 0000D7CF FF FF FF FF FF FF FF  
   3311 0000D7D6 FF FF FF FF FF FF FF  
   3311 0000D7DD FF FF FF FF FF FF FF  
   3311 0000D7E4 FF FF FF FF FF FF FF  
   3311 0000D7EB FF FF FF FF FF FF FF  
   3311 0000D7F2 FF FF FF FF FF FF FF  
   3311 0000D7F9 FF FF FF FF FF FF FF  
                                      
   3312 0000D800                        start:
   3313 0000D800 E4 31                   		tsr		r1,ID		; id register
   3314 0000D802 20 4B 00 C1             		sb		r1,LEDS
   3315 0000D806 FF 41 0E 1E             		lw		sp,#$1FFE
                                        ;		br		start2
   3317 0000D80A C0 AF                   		call	InitTxtCtrl
   3318 0000D80C 04 11                   		lw		r1,#4
   3319 0000D80E 20 4B 00 C1             		sb		r1,LEDS
   3320 0000D812 01 40 0F 11             		lw		r1,#31
   3321 0000D816 03 40 01 C1             		sb		r1,txtHeight
   3322 0000D81A 03 40 04 11             		lw		r1,#52
   3323 0000D81E 03 40 00 C1             		sb		r1,txtWidth
   3324 0000D822 F0 4B 00 11             		lw		r1,#$BF00
   3325 0000D826 03 40 0E D1             		sw		r1,NormAttr
   3326 0000D82A 12 40 0E AF             		call	ClearScreen
   3327 0000D82E 14 40 00 AF             		call	HomeCursor
   3328 0000D832 C4 4D 08 11             		lw		r1,#msgStarting
   3329 0000D836 14 40 04 AF             		call	putmsgScr
                                        ;		lw		r1,#$80					; set router in snoop mode
                                        ;		sb		r1,ROUTER+RTR_RXSTAT
                                        		;call	broadcastReset
   3333 0000D83A                        start2:
   3334 0000D83A 08 40 00 11             		lw		r1,#$80					; set router in snoop mode
   3335 0000D83E 01 4B 00 C1             		sb		r1,ROUTER+RTR_RXSTAT
   3336 0000D842 1F AF                   		call	ping44
   3337 0000D844                        RecvLoop:
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 60
noc_boot11.a
   3338 0000D844                        noMsg1:
   3339 0000D844 01 4B 00 E1             		lb		r1,ROUTER+RTR_RXSTAT
   3340 0000D848 03 40 5F 31             		and		r1,#63
   3341 0000D84C FB B8                   		beq		noMsg1
   3342 0000D84E 3F 4F 07 AF             		call	Recv
   3343 0000D852 AC AF                   		call	RecvDump
   3344 0000D854 58 AF                   		call	RecvDispatch
   3345 0000D856 F6 BE                   		bra		RecvLoop
   3346 0000D858                        lockup:
   3347 0000D858 FF BE                   		bra		lockup
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Broadcast a reset message on the network.
                                        ;----------------------------------------------------------------------------
                                        
   3353 0000D85A                        broadcastReset:
   3354 0000D85A FE 6E                   		add		sp,sp,#-2
   3355 0000D85C E0 DF                   		sw		lr,[sp]
   3356 0000D85E 3C 4F 0F AF             		call	zeroTxBuf
   3357 0000D862 0F 40 0F 11             		lw		r1,#$FF		; global broadcast address
   3358 0000D866 04 40 0F C1             		sb		r1,txBuf+MSG_DST
   3359 0000D86A 01 40 01 11             		lw		r1,#$11		; source of message
   3360 0000D86E 04 40 0E C1             		sb		r1,txBuf+MSG_SRC
   3361 0000D872 01 11                   		lw		r1,#MT_RST
   3362 0000D874 04 40 07 C1             		sb		r1,txBuf+MSG_TYPE	; reset message
   3363 0000D878 3C 4F 0D AF             		call	Xmit
   3364 0000D87C E0 FF                   		lw		lr,[sp]
   3365 0000D87E 02 6E                   		add		sp,sp,#2
   3366 0000D880 F0 80                   		ret
                                        
   3368 0000D882                        ping44:
   3369 0000D882 FC 6E                   		add		sp,sp,#-4
   3370 0000D884 E0 DF                   		sw		lr,[sp]
   3371 0000D886 00 12                   		lw		r2,#0
   3372 0000D888                        ping441:
   3373 0000D888 E2 D2                   		sw		r2,2[sp]
   3374 0000D88A 3B 4F 09 AF             		call	zeroTxBuf
   3375 0000D88E 8C 4D 26 E1             		lb		r1,NodeNumTbl[r2]
   3376 0000D892 04 40 0F C1             		sb		r1,txBuf+MSG_DST
   3377 0000D896 E4 31                   		tsr		r1,ID		; source of message
   3378 0000D898 04 40 0E C1             		sb		r1,txBuf+MSG_SRC
   3379 0000D89C 09 11                   		lw		r1,#MT_PING
   3380 0000D89E 04 40 07 C1             		sb		r1,txBuf+MSG_TYPE
   3381 0000D8A2 3B 4F 08 AF             		call	Xmit
   3382 0000D8A6 01 4B 00 E1             		lb		r1,ROUTER+RTR_RXSTAT
   3383 0000D8AA 03 40 5F 31             		and		r1,#63
   3384 0000D8AE 03 A8                   		beq		ping442
   3385 0000D8B0 3C 4F 06 AF             		call	Recv
   3386 0000D8B4 7B AF                   		call	RecvDump
   3387 0000D8B6                        ping442:
   3388 0000D8B6 E2 F2                   		lw		r2,2[sp]
   3389 0000D8B8 01 62                   		add		r2,r2,#1
   3390 0000D8BA FC 4F 20 10             		cmp		r2,#64
   3391 0000D8BE E4 B4                   		bltu	ping441
   3392 0000D8C0 E0 FF                   		lw		lr,[sp]
   3393 0000D8C2 04 6E                   		add		sp,sp,#4
   3394 0000D8C4 F0 80                   		ret
                                        
   3396 0000D8C6                        NodeNumTbl:
   3397 0000D8C6 11 12 13 14 15 16 17    	db	$11,$12,$13,$14,$15,$16,$17,$18	
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 61
noc_boot11.a
   3397 0000D8CD 18                    
   3398 0000D8CE 21 22 23 24 25 26 27    	db	$21,$22,$23,$24,$25,$26,$27,$28	
   3398 0000D8D5 28                    
   3399 0000D8D6 31 32 33 34 35 36 37    	db	$31,$32,$33,$34,$35,$36,$37,$38	
   3399 0000D8DD 38                    
   3400 0000D8DE 41 42 43 44 45 46 47    	db	$41,$42,$43,$44,$45,$46,$47,$48	
   3400 0000D8E5 48                    
   3401 0000D8E6 51 52 53 54 55 56 57    	db	$51,$52,$53,$54,$55,$56,$57,$58	
   3401 0000D8ED 58                    
   3402 0000D8EE 61 62 63 64 65 66 67    	db	$61,$62,$63,$64,$65,$66,$67,$68	
   3402 0000D8F5 68                    
   3403 0000D8F6 71 72 73 74 75 76 77    	db	$71,$72,$73,$74,$75,$76,$77,$78	
   3403 0000D8FD 78                    
   3404 0000D8FE 81 82 83 84 85 86 87    	db	$81,$82,$83,$84,$85,$86,$87,$88	
   3404 0000D905 88                    
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Dispatch routine for recieved messages.
                                        ;----------------------------------------------------------------------------
                                        
   3410 0000D906                        RecvDispatch:
   3411 0000D906 F8 6E                   		add		sp,sp,#-8
   3412 0000D908 E0 DF                   		sw		lr,[sp]
   3413 0000D90A E2 D1                   		sw		r1,2[sp]
   3414 0000D90C E4 D2                   		sw		r2,4[sp]
   3415 0000D90E E6 D3                   		sw		r3,6[sp]
   3416 0000D910 05 40 07 E1             		lb		r1,rxBuf+MSG_TYPE
   3417 0000D914 1E 10                   		cmp		r1,#MT_RST_ACK	; status display ?
   3418 0000D916 1A A9                   		bne		RecvDispatch2
   3419 0000D918                        RecvDispatch4:
   3420 0000D918 05 40 0E E1             		lb		r1,rxBuf+MSG_SRC; message source
   3421 0000D91C 10 12                   		mov		r2,r1
   3422 0000D91E 57 32                   		and		r2,#$7			; get Y coord
   3423 0000D920 81 32                   		shl		r2,#1			; shift left once
   3424 0000D922 C7 4D 2A F2             		lw		r2,lineTbl[r2]
   3425 0000D926 58 62                   		add		r2,r2,#88		; position table along right edge of screen
   3426 0000D928 10 13                   		mov		r3,r1			; r3 = ID
   3427 0000D92A A1 33                   		shr		r3,#1
   3428 0000D92C A1 33                   		shr		r3,#1
   3429 0000D92E A1 33                   		shr		r3,#1
   3430 0000D930 A1 33                   		shr		r3,#1
   3431 0000D932 81 33                   		shl		r3,#1			; character screen pos = *2
   3432 0000D934 00 40 5E 33             		and		r3,#$0E
   3433 0000D938 20 23                   		add		r3,r2
   3434 0000D93A 02 40 0A 11             		lw		r1,#'*'
   3435 0000D93E 94 AF                   		call	AsciiToScreen
   3436 0000D940 03 40 0E F2             		lw		r2,NormAttr
   3437 0000D944 26 21                   		or		r1,r2
   3438 0000D946 00 42 30 D1             		sw		r1,TXTSCR[r3]
   3439 0000D94A 1A AE                   		bra		RecvDispatchXit
   3440 0000D94C                        RecvDispatch2:
   3441 0000D94C FE 4F 1E 10             		cmp		r1,#MT_PING_ACK
   3442 0000D950 E3 B8                   		beq		RecvDispatch4
   3443 0000D952 FF 4F 11 10             		cmp		r1,#MT_REQ_OUT_FOCUS
   3444 0000D956 14 A9                   		bne		RecvDispatch3
   3445 0000D958 05 40 0E E1             		lb		r1,rxBuf+MSG_SRC
   3446 0000D95C 10 12                   		mov		r2,r1
   3447 0000D95E FF 61                   		sub		r1,r1,#1
   3448 0000D960 57 31                   		and		r1,#$7
   3449 0000D962 F0 62                   		sub		r2,r2,#$10
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 62
noc_boot11.a
   3450 0000D964 07 40 50 32             		and		r2,#$70
   3451 0000D968 A1 32                   		shr		r2,#1
   3452 0000D96A 26 21                   		or		r1,r2
   3453 0000D96C 01 12                   		lw		r2,#1
   3454 0000D96E 06 40 10 C2             		sb		r2,FocusTbl[r1]
   3455 0000D972 0A 40 00 E1             		lb		r1,HTOutFocus
   3456 0000D976 04 A9                   		bne		RecvDispatch3
   3457 0000D978 05 40 0E E1             		lb		r1,rxBuf+MSG_SRC
   3458 0000D97C 0A 40 00 C1             		sb		r1,HTOutFocus
   3459 0000D980                        RecvDispatch3:
   3460 0000D980                        RecvDispatchXit:
   3461 0000D980 E0 FF                   		lw		lr,[sp]
   3462 0000D982 E2 F1                   		lw		r1,2[sp]
   3463 0000D984 E4 F2                   		lw		r2,4[sp]
   3464 0000D986 E6 F3                   		lw		r3,6[sp]
   3465 0000D988 08 6E                   		add		sp,sp,#8
   3466 0000D98A F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Initialize the text controller.
                                        ;----------------------------------------------------------------------------
                                        
   3472 0000D98C                        InitTxtCtrl:
   3473 0000D98C 02 11                   		lw		r1,#2
   3474 0000D98E 20 4B 00 C1             		sb		r1,LEDS
   3475 0000D992 00 12                   		lw		r2,#0
   3476 0000D994                        itc1:
   3477 0000D994 C6 4D 29 E1             		lb		r1,txtctrl_dat[r2]
   3478 0000D998 10 4B 20 C1             		sb		r1,TXTCTRL[r2]
   3479 0000D99C 01 62                   		add		r2,r2,#1
   3480 0000D99E FF 4F 21 10             		cmp		r2,#15
   3481 0000D9A2 F8 B2                   		ble		itc1
   3482 0000D9A4 03 11                   		lw		r1,#3
   3483 0000D9A6 20 4B 00 C1             		sb		r1,LEDS
   3484 0000D9AA F0 80                   		ret
                                        
                                        ;------------------------------------------------------------------------------
                                        ; Dump recieved message to screen.
                                        ;------------------------------------------------------------------------------
                                        
   3490 0000D9AC                        RecvDump:
   3491 0000D9AC FE 6E                   		sub		sp,sp,#2
   3492 0000D9AE E0 DF                   		sw		lr,[sp]
   3493 0000D9B0 1B AF                   		call	DispCRLF
   3494 0000D9B2 05 40 0F E1             		lb		r1,rxBuf+MSG_DST
   3495 0000D9B6 37 AF                   		call	DispByte
   3496 0000D9B8 1E AF                   		call	DispSpace
   3497 0000D9BA 05 40 0E E1             		lb		r1,rxBuf+MSG_SRC
   3498 0000D9BE 33 AF                   		call	DispByte
   3499 0000D9C0 1A AF                   		call	DispSpace
   3500 0000D9C2 05 40 06 F1             		lw		r1,rxBuf+MSG_TYPE
   3501 0000D9C6 2F AF                   		call	DispByte
   3502 0000D9C8 16 AF                   		call	DispSpace
   3503 0000D9CA 05 40 08 F1             		lw		r1,rxBuf+8
   3504 0000D9CE 19 AF                   		call	DispWord
   3505 0000D9D0 05 40 0A F1             		lw		r1,rxBuf+10
   3506 0000D9D4 16 AF                   		call	DispWord
   3507 0000D9D6 05 40 0C F1             		lw		r1,rxBuf+12
   3508 0000D9DA 13 AF                   		call	DispWord
   3509 0000D9DC 05 40 0E F1             		lw		r1,rxBuf+14
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 63
noc_boot11.a
   3510 0000D9E0 10 AF                   		call	DispWord
   3511 0000D9E2 E0 FF                   		lw		lr,[sp]
   3512 0000D9E4 02 6E                   		add		sp,sp,#2
   3513 0000D9E6 F0 80                   		ret
                                        
                                        ;------------------------------------------------------------------------------
                                        ;------------------------------------------------------------------------------
                                        
   3518 0000D9E8                        DispCRLF:
   3519 0000D9E8 FE 6E                   		sub		sp,sp,#2
   3520 0000D9EA E0 DF                   		sw		lr,[sp]
                                        		lb		r1,#13
   3522 0000D9EC 78 AF                   		call	putcharScr
                                        		lb		r1,#10
   3524 0000D9EE 77 AF                   		call	putcharScr
   3525 0000D9F0 E0 FF                   		lw		lr,[sp]
   3526 0000D9F2 02 6E                   		add		sp,sp,#2
   3527 0000D9F4 F0 80                   		ret
                                        
   3529 0000D9F6                        DispSpace:
   3530 0000D9F6 FE 6E                   		sub		sp,sp,#2
   3531 0000D9F8 E0 DF                   		sw		lr,[sp]
                                        		lb		r1,#' '
   3533 0000D9FA 71 AF                   		call	putcharScr
   3534 0000D9FC E0 FF                   		lw		lr,[sp]
   3535 0000D9FE 02 6E                   		add		sp,sp,#2
   3536 0000DA00 F0 80                   		ret
                                        
   3538 0000DA02                        DispWord:
   3539 0000DA02 FC 6E                   		add		sp,sp,#-4
   3540 0000DA04 E0 DF                   		sw		lr,[sp]
   3541 0000DA06 E2 D1                   		sw		r1,2[sp]
   3542 0000DA08 A1 31                   		shr		r1,#1
   3543 0000DA0A A1 31                   		shr		r1,#1
   3544 0000DA0C A1 31                   		shr		r1,#1
   3545 0000DA0E A1 31                   		shr		r1,#1
   3546 0000DA10 A1 31                   		shr		r1,#1
   3547 0000DA12 A1 31                   		shr		r1,#1
   3548 0000DA14 A1 31                   		shr		r1,#1
   3549 0000DA16 A1 31                   		shr		r1,#1
   3550 0000DA18 06 AF                   		call	DispByte
   3551 0000DA1A E2 F1                   		lw		r1,2[sp]
   3552 0000DA1C 04 AF                   		call	DispByte
   3553 0000DA1E E2 F1                   		lw		r1,2[sp]
   3554 0000DA20 E0 FF                   		lw		lr,[sp]
   3555 0000DA22 04 6E                   		add		sp,sp,#4
   3556 0000DA24 F0 80                   		ret
                                        
   3558 0000DA26                        DispByte:
   3559 0000DA26 FC 6E                   		add		sp,sp,#-4
   3560 0000DA28 E0 DF                   		sw		lr,[sp]
   3561 0000DA2A E2 D1                   		sw		r1,2[sp]
   3562 0000DA2C A1 31                   		shr		r1,#1
   3563 0000DA2E A1 31                   		shr		r1,#1
   3564 0000DA30 A1 31                   		shr		r1,#1
   3565 0000DA32 A1 31                   		shr		r1,#1
   3566 0000DA34 06 AF                   		call	DispNybble
   3567 0000DA36 E2 F1                   		lw		r1,2[sp]
   3568 0000DA38 04 AF                   		call	DispNybble
   3569 0000DA3A E2 F1                   		lw		r1,2[sp]
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 64
noc_boot11.a
   3570 0000DA3C E0 FF                   		lw		lr,[sp]
   3571 0000DA3E 04 6E                   		add		sp,sp,#4
   3572 0000DA40 F0 80                   		ret
                                        
   3574 0000DA42                        DispNybble:
   3575 0000DA42 FC 6E                   		add		sp,sp,#-4
   3576 0000DA44 E0 DF                   		sw		lr,[sp]
   3577 0000DA46 E2 D1                   		sw		r1,2[sp]
   3578 0000DA48 00 40 5F 31             		and		r1,#$0F
   3579 0000DA4C FF 4F 16 10             		cmp		r1,#10
   3580 0000DA50 04 A1                   		bge		DispNybble1
   3581 0000DA52 03 40 60 31             		or		r1,#$30
   3582 0000DA56 43 AF                   		call	putcharScr
   3583 0000DA58 03 AE                   		br		DispNybble2
   3584 0000DA5A                        DispNybble1:
   3585 0000DA5A F6 61                   		sub		r1,r1,#10
   3586 0000DA5C 41 61                   		add		r1,#'A'
   3587 0000DA5E 3F AF                   		call	putcharScr
   3588 0000DA60                        DispNybble2:
   3589 0000DA60 E2 F1                   		lw		r1,2[sp]
   3590 0000DA62 E0 FF                   		lw		lr,[sp]
   3591 0000DA64 04 6E                   		add		sp,sp,#4
   3592 0000DA66 F0 80                   		ret
                                        				
                                        ; Convert Ascii character to screen character.
                                        ;
                                        ; Parameters:
                                        ;	r1 = character to convert
                                        ; Returns:
                                        ;	r1 = converted character
                                        ;
                                        ;------------------------------------------------------------------------------
                                        
   3603 0000DA68                        AsciiToScreen:
   3604 0000DA68 FE 6E                   		add		sp,sp,#-2
   3605 0000DA6A E0 D2                   		sw		r2,[sp]
   3606 0000DA6C 0F 40 5F 31             		and		r1,#$FF
   3607 0000DA70 10 12                   		mov		r2,r1
   3608 0000DA72 02 40 50 32             		and		r2,#%00100000	; if bit 5 isn't set
   3609 0000DA76 06 A8                   		beq		ats1
   3610 0000DA78 10 12                   		mov		r2,r1
   3611 0000DA7A 04 40 50 32             		and		r2,#%01000000	; or bit 6 isn't set
   3612 0000DA7E 02 A8                   		beq		ats1
   3613 0000DA80 09 40 5F 31             		and		r1,#%10011111
   3614 0000DA84                        ats1:
   3615 0000DA84 E0 F2                   		lw		r2,[sp]
   3616 0000DA86 02 6E                   		add		sp,sp,#2
   3617 0000DA88 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Clear the screen.
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	r1,r2,r3
                                        ;----------------------------------------------------------------------------
                                        
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 65
noc_boot11.a
   3630 0000DA8A                        ClearScreen:
   3631 0000DA8A FE 6E                   		add		sp,sp,#-2
   3632 0000DA8C E0 DF                   		sw		lr,[sp]
   3633 0000DA8E 02 40 00 11             		lw		r1,#' '
   3634 0000DA92 EA BF                   		call	AsciiToScreen
   3635 0000DA94 03 40 0E F2             		lw		r2,NormAttr
   3636 0000DA98 26 21                   		or		r1,r2
   3637 0000DA9A 10 13                   		mov		r3,r1
   3638 0000DA9C 64 40 0C 11             		lw		r1,#1612	; 52x31
   3639 0000DAA0 00 42 00 12             		lw		r2,#TXTSCR
   3640 0000DAA4                        cs1:
   3641 0000DAA4 20 D3                   		sw		r3,[r2]
   3642 0000DAA6 02 62                   		add		r2,r2,#2
   3643 0000DAA8 FF 61                   		add		r1,r1,#-1
   3644 0000DAAA FC BB                   		bpl		cs1
   3645 0000DAAC E0 FF                   		lw		lr,[sp]
   3646 0000DAAE 02 6E                   		add		sp,sp,#2
   3647 0000DAB0 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Home the cursor
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	<none>
                                        ;----------------------------------------------------------------------------
                                        
   3660 0000DAB2                        HomeCursor:
   3661 0000DAB2 03 40 03 C0             		sb		r0,cursy
   3662 0000DAB6 03 40 02 C0             		sb		r0,cursx
   3663 0000DABA 03 40 04 D0             		sw		r0,pos
   3664 0000DABE F0 80                   		ret
                                        
                                        ; flash the character at the screen position
                                        ;   r1: 1 = flash, 0 = no flash
   3668 0000DAC0                        flashCursor:
   3669 0000DAC0 F0 80                   		ret
                                        
                                        ;-----------------------------------------------------------------
                                        ; Display a message on the screen
                                        ;
                                        ; Parameters:
                                        ;	r1 = message address
                                        ;	screen pos controls where message is displayed
                                        ; Returns:
                                        ; 	r1 = points to null character
                                        ;-----------------------------------------------------------------
                                        
   3681 0000DAC2                        putmsgScr:
   3682 0000DAC2 FC 6E                   	sub		sp,sp,#4	; allocate stack frame
   3683 0000DAC4 E0 DF                   	sw		lr,[sp]	; save off link reg
   3684 0000DAC6 E2 D3                   	sw		r3,2[sp]
   3685 0000DAC8 10 13                   	mov		r3,r1		; r3 = msg address
   3686 0000DACA                        putmsg3:
   3687 0000DACA 30 E1                   	lb		r1,[r3]		; get char to display
   3688 0000DACC 03 A8                   	beq		putmsg4
   3689 0000DACE 07 AF                   	call	putcharScr	; store to screen
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 66
noc_boot11.a
   3690 0000DAD0 01 63                   	add		r3,r3,#1	; inc msg pointer
   3691 0000DAD2 FB BE                   	br		putmsg3
   3692 0000DAD4                        putmsg4:
   3693 0000DAD4 30 11                   	mov		r1,r3
   3694 0000DAD6 E2 F3                   	lw		r3,2[sp]
   3695 0000DAD8 E0 FF                   	lw		lr,[sp]
   3696 0000DADA 04 6E                   	add		sp,sp,#4
   3697 0000DADC F0 80                   	ret
                                        
                                        
                                        ;-----------------------------------------------------------------
                                        ; Put a character to the screen
                                        ;
                                        ; Parameters:
                                        ;	r1.b = character to put
                                        ;-----------------------------------------------------------------
                                        
   3707 0000DADE                        putcharScr
   3708 0000DADE F8 6E                   	sub		sp,sp,#8
   3709 0000DAE0 E0 DF                   	sw		lr,[sp]
   3710 0000DAE2 E2 D4                   	sw		r4,2[sp]
   3711 0000DAE4 E4 D5                   	sw		r5,4[sp]
   3712 0000DAE6 E6 D6                   	sw		r6,6[sp]
                                        
   3714 0000DAE8 0E 21                   	zxb		r1			; mask
                                        
                                        	; first turn off any flashing cursor - it may be moved
   3717 0000DAEA 10 14                   	lw		r4,r1
   3718 0000DAEC 00 11                   	lw		r1,#0
   3719 0000DAEE E8 BF                   	call	flashCursor
   3720 0000DAF0 40 11                   	lw		r1,r4
                                        
                                        	; process carriage return
   3723 0000DAF2 FF 4F 13 10             	cmp		r1,#CR		; carriage return ?
   3724 0000DAF6 0A A9                   	bne		pc1
   3725 0000DAF8 03 40 04 F1             	lw		r1,pos		; subtract X from position
   3726 0000DAFC 03 40 02 E4             	lb		r4,cursx
   3727 0000DB00 42 21                   	sub		r1,r4
   3728 0000DB02 03 40 04 D1             	sw		r1,pos
   3729 0000DB06 03 40 02 C0             	sb		r0,cursx	; and set X to zero
   3730 0000DB0A 70 AE                   	jmp		pc7
                                        
                                        	; process line feed
   3733 0000DB0C                        pc1
   3734 0000DB0C FF 4F 16 10             	cmp		r1,#LF		; line feed ?
   3735 0000DB10 14 A9                   	bne		pc2
   3736 0000DB12 03 40 03 E1             	lb		r1,cursy	; past line 31 ?
   3737 0000DB16 03 40 01 E4             	lb		r4,txtHeight
   3738 0000DB1A FE 64                   	sub		r4,r4,#2
   3739 0000DB1C 4D 21                   	cmp		r1,r4
   3740 0000DB1E 02 A4                   	bltu	pc3			; if we are, then just scroll the screen
   3741 0000DB20 72 AF                   	call	scrollScreenUp
   3742 0000DB22 64 AE                   	jmp		pc7
   3743 0000DB24                        pc3
   3744 0000DB24 01 61                   	add		r1,r1,#1	; increment Y
   3745 0000DB26 03 40 03 C1             	sb		r1,cursy
   3746 0000DB2A 03 40 04 F1             	lw		r1,pos		; and the cursor position
   3747 0000DB2E 03 40 00 E4             	lb		r4,txtWidth
   3748 0000DB32 40 21                   	add		r1,r4
   3749 0000DB34 03 40 04 D1             	sw		r1,pos
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 67
noc_boot11.a
   3750 0000DB38 59 AE                   	jmp		pc7
                                        
                                        	; backspace
   3753 0000DB3A                        pc2
   3754 0000DB3A FF 4F 18 10             	cmp		r1,#CTRLH	; backspace ?
   3755 0000DB3E 21 A9                   	bne		pc4
   3756 0000DB40 03 40 02 E1             	lb		r1,cursx	; is cursor.x already zero ?
   3757 0000DB44 01 A9                   	bne		pc5			
   3758 0000DB46 52 AE                   	jmp		pc7			; can't backspace
   3759 0000DB48                        pc5
   3760 0000DB48 FF 61                   	sub		r1,r1,#1
   3761 0000DB4A 03 40 02 C1             	sb		r1,cursx
   3762 0000DB4E 03 40 04 F4             	lw		r4,pos
   3763 0000DB52 FF 64                   	sub		r4,r4,#1
   3764 0000DB54 03 40 04 D4             	sw		r4,pos
                                        	; shift remaining characters on line over
   3766 0000DB58 81 34                   	shl		r4,#1		; r4 = n
   3767 0000DB5A 00 42 00 16             	lw		r6,#TXTSCR
   3768 0000DB5E 40 26                   	add		r6,r4		; r6 = target pos
   3769 0000DB60 03 40 00 E4             	lb		r4,txtWidth
   3770 0000DB64 FE 64                   	sub		r4,r4,#2
   3771 0000DB66                        pc6
   3772 0000DB66 62 F5                   	lw		r5,2[r6]	; shift next char
   3773 0000DB68 60 D5                   	sw		r5,[r6]		; over to this one
   3774 0000DB6A 02 66                   	add		r6,r6,#2
   3775 0000DB6C 01 61                   	add		r1,r1,#1	; until X = 39
   3776 0000DB6E 4D 21                   	cmp		r1,r4
   3777 0000DB70 FA B4                   	bltu	pc6
                                        	; blank trailing character
   3779 0000DB72 02 40 00 11             	lw		r1,#' '
   3780 0000DB76 78 BF                   	call	AsciiToScreen
   3781 0000DB78 03 40 0E F5             	lw		r5,NormAttr
   3782 0000DB7C 56 21                   	or		r1,r5
   3783 0000DB7E 60 D1                   	sw		r1,[r6]
   3784 0000DB80 35 AE                   	jmp		pc7
                                        
                                        	; control character (non-printable)
   3787 0000DB82                        pc4
   3788 0000DB82 FE 4F 10 10             	cmp		r1,#' '
   3789 0000DB86 01 A5                   	bgeu	pc11
   3790 0000DB88 31 AE                   	jmp		pc7
                                        
                                        
                                        	; some other character
                                        	; put the character to the screen, then advance cursor
   3795 0000DB8A                        pc11
   3796 0000DB8A 6E BF                   	call	AsciiToScreen
   3797 0000DB8C 03 40 0E F4             	lw		r4,NormAttr
   3798 0000DB90 46 21                   	or		r1,r4
   3799 0000DB92 00 42 00 14             	lw		r4,#TXTSCR
   3800 0000DB96 03 40 04 F5             	lw		r5,pos
   3801 0000DB9A 81 35                   	shl		r5,#1		; pos * 2
   3802 0000DB9C 50 24                   	add		r4,r5		; scr[pos]
   3803 0000DB9E 40 D1                   	sw		r1,[r4]		; = char
                                        	; advance cursor
   3805 0000DBA0 03 40 04 F5             	lw		r5,pos
   3806 0000DBA4 03 40 00 E1             	lb		r1,txtWidth
   3807 0000DBA8 FE 61                   	sub		r1,r1,#2
   3808 0000DBAA 03 40 02 E4             	lb		r4,cursx
   3809 0000DBAE 1D 24                   	cmp		r4,r1		; would we be at end of line ?
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 68
noc_boot11.a
   3810 0000DBB0 17 A6                   	bleu	pc8
   3811 0000DBB2 42 25                   	sub		r5,r4		; pos -= cursx
   3812 0000DBB4 03 40 04 D5             	sw		r5,pos
   3813 0000DBB8 03 40 02 C0             	sb		r0,cursx	; cursor.x = 0
   3814 0000DBBC 03 40 03 E4             	lb		r4,cursy
   3815 0000DBC0 03 40 01 E1             	lb		r1,txtHeight
   3816 0000DBC4 FE 61                   	sub		r1,r1,#2
   3817 0000DBC6 1D 24                   	cmp		r4,r1		; at last line of screen ?
   3818 0000DBC8 02 A6                   	bleu	pc9
   3819 0000DBCA 1D AF                   	call	scrollScreenUp	; yes, scroll
   3820 0000DBCC 0F AE                   	br		pc7
   3821 0000DBCE                        pc9
   3822 0000DBCE 01 64                   	add		r4,r4,#1	; cursor.y++
   3823 0000DBD0 03 40 03 C4             	sb		r4,cursy
   3824 0000DBD4 03 40 00 E1             	lb		r1,txtWidth
   3825 0000DBD8 10 25                   	add		r5,r1		; pos += txtWidth
   3826 0000DBDA 03 40 04 D5             	sw		r5,pos
   3827 0000DBDE 06 AE                   	br		pc7
   3828 0000DBE0                        pc8						; not at EOL
   3829 0000DBE0 01 64                   	add		r4,r4,#1	; cursor.x++
   3830 0000DBE2 03 40 02 C4             	sb		r4,cursx
   3831 0000DBE6 01 65                   	add		r5,r5,#1	; pos++
   3832 0000DBE8 03 40 04 D5             	sw		r5,pos
                                        
   3834 0000DBEC                        pc7
   3835 0000DBEC 03 40 0C E1             	lb		r1,cursFlash	; flash or don't flash the cursor
   3836 0000DBF0 67 BF                   	call	flashCursor
   3837 0000DBF2 03 40 04 F5             	lw		r5,pos
   3838 0000DBF6 10 4B 0E D5             	sw		r5,TXTCTRL+14
   3839 0000DBFA E0 FF                   	lw		lr,[sp]
   3840 0000DBFC E2 F4                   	lw		r4,2[sp]
   3841 0000DBFE E4 F5                   	lw		r5,4[sp]
   3842 0000DC00 E6 F6                   	lw		r6,6[sp]
   3843 0000DC02 08 6E                   	add		sp,sp,#8
   3844 0000DC04 F0 80                   	ret
                                        
   3846 0000DC06                        scrollScreenUp:
   3847 0000DC06 FC 6E                   	sub		sp,sp,#4
   3848 0000DC08 E0 DF                   	sw		lr,[sp]
   3849 0000DC0A E2 D5                   	sw		r5,2[sp]
   3850 0000DC0C 61 40 07 13             	lw		r3,#1559	; number of chars to move - 1
   3851 0000DC10 00 42 00 12             	lw		r2,#TXTSCR
   3852 0000DC14 03 40 00 E1             	lb		r1,txtWidth
   3853 0000DC18 81 31                   	shl		r1,#1
   3854 0000DC1A                        scrollScreenUp1:
   3855 0000DC1A 20 15                   	mov		r5,r2
   3856 0000DC1C 10 25                   	add		r5,r1
   3857 0000DC1E 50 F4                   	lw		r4,[r5]		; char at next line
   3858 0000DC20 20 D4                   	sw		r4,[r2]		; goes to this line
   3859 0000DC22 02 62                   	add		r2,r2,#2
   3860 0000DC24 FF 63                   	sub		r3,r3,#1
   3861 0000DC26 F9 B9                   	bne     scrollScreenUp1
                                        	; blank out last line
   3863 0000DC28 02 40 00 11             	lw		r1,#' '
   3864 0000DC2C 1D BF                   	call	AsciiToScreen
   3865 0000DC2E 03 40 0E F3             	lw		r3,NormAttr
   3866 0000DC32 36 21                   	or		r1,r3
   3867 0000DC34 03 40 00 E3             	lb		r3,txtWidth
   3868 0000DC38                        scrollScreenUp2:
   3869 0000DC38 20 D1                   	sw		r1,[r2]
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 69
noc_boot11.a
   3870 0000DC3A 02 62                   	add		r2,r2,#2
   3871 0000DC3C FF 63                   	sub		r3,r3,#1
   3872 0000DC3E FC B9                   	bne     scrollScreenUp2
   3873 0000DC40 E0 FF                   	lw		lr,[sp]
   3874 0000DC42 E2 F5                   	lw		r5,2[sp]
   3875 0000DC44 04 6E                   	add		sp,sp,#4
   3876 0000DC46 F0 80                   	ret
                                        
   3878 0000DC48                        		
   3879 0000DC48 42 75 74 74 65 72 66    	db	"Butterfly Grid Computer Starting",0
   3879 0000DC4F 6C 79 20 47 72 69 64  
   3879 0000DC56 20 43 6F 6D 70 75 74  
   3879 0000DC5D 65 72 20 53 74 61 72  
   3879 0000DC64 74 69 6E 67 00        
                                        
   3881 0000DC69                        txtctrl_dat:
   3882 0000DC69 34 1F 34 00 10 00 07    	db	52,31,52,0,16,0,7,$22,$1F,$E0,31,0,0,0,3,0
   3882 0000DC70 22 1F E0 1F 00 00 00  
   3882 0000DC77 03 00                 
                                        
                                        	; Table of offsets of start of video line in video
                                        	; memory assuming 52 chars per line.
   3886 0000DC79 FF                      	.align	2
   3887 0000DC7A                        lineTbl:
   3888 0000DC7A 00 00 68 00 D0 00 38    	dw	0,104,208,312,416,520,624,728
   3888 0000DC81 01 A0 01 08 02 70 02  
   3888 0000DC88 D8 02                 
   3889 0000DC8A 40 03 A8 03 10 04 78    	dw	832,936,1040,1144,1248,1352,1456,1560,
   3889 0000DC91 04 E0 04 48 05 B0 05  
   3889 0000DC98 18 06                 
   3890 0000DC9A 80 06 E8 06 50 07 B8    	dw	1664,1768,1872,1976,2080,2184,2288,2392,
   3890 0000DCA1 07 20 08 88 08 F0 08  
   3890 0000DCA8 58 09                 
   3891 0000DCAA C0 09 28 0A 90 0A F8    	dw	2496,2600,2704,2808,2912,3016,3120,3224
   3891 0000DCB1 0A 60 0B C8 0B 30 0C  
   3891 0000DCB8 98 0C                 
                                        ; 56 columns display table
                                        ;	dw	0,112,224,336,448,560,672,784
                                        ;	dw	896,1008,1120,1232,1344,1456,1568,1680
                                        ;	dw	1792,1804,1916,2028,2140,2252,2364,2476
                                        ;	dw	2588,2700,2812,2924,3036,3148,3260,3372
                                        
   3898 0000DCBA FF FF FF FF FF FF FF    		org		0xFFFE
   3898 0000DCC1 FF FF FF FF FF FF FF  
   3898 0000DCC8 FF FF FF FF FF FF FF  
   3898 0000DCCF FF FF FF FF FF FF FF  
   3898 0000DCD6 FF FF FF FF FF FF FF  
   3898 0000DCDD FF FF FF FF FF FF FF  
   3898 0000DCE4 FF FF FF FF FF FF FF  
   3898 0000DCEB FF FF FF FF FF FF FF  
   3898 0000DCF2 FF FF FF FF FF FF FF  
   3898 0000DCF9 FF FF FF FF FF FF FF  
   3898 0000DD00 FF FF FF FF FF FF FF  
   3898 0000DD07 FF FF FF FF FF FF FF  
   3898 0000DD0E FF FF FF FF FF FF FF  
   3898 0000DD15 FF FF FF FF FF FF FF  
   3898 0000DD1C FF FF FF FF FF FF FF  
   3898 0000DD23 FF FF FF FF FF FF FF  
   3898 0000DD2A FF FF FF FF FF FF FF  
   3898 0000DD31 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 70
noc_boot11.a
   3898 0000DD38 FF FF FF FF FF FF FF  
   3898 0000DD3F FF FF FF FF FF FF FF  
   3898 0000DD46 FF FF FF FF FF FF FF  
   3898 0000DD4D FF FF FF FF FF FF FF  
   3898 0000DD54 FF FF FF FF FF FF FF  
   3898 0000DD5B FF FF FF FF FF FF FF  
   3898 0000DD62 FF FF FF FF FF FF FF  
   3898 0000DD69 FF FF FF FF FF FF FF  
   3898 0000DD70 FF FF FF FF FF FF FF  
   3898 0000DD77 FF FF FF FF FF FF FF  
   3898 0000DD7E FF FF FF FF FF FF FF  
   3898 0000DD85 FF FF FF FF FF FF FF  
   3898 0000DD8C FF FF FF FF FF FF FF  
   3898 0000DD93 FF FF FF FF FF FF FF  
   3898 0000DD9A FF FF FF FF FF FF FF  
   3898 0000DDA1 FF FF FF FF FF FF FF  
   3898 0000DDA8 FF FF FF FF FF FF FF  
   3898 0000DDAF FF FF FF FF FF FF FF  
   3898 0000DDB6 FF FF FF FF FF FF FF  
   3898 0000DDBD FF FF FF FF FF FF FF  
   3898 0000DDC4 FF FF FF FF FF FF FF  
   3898 0000DDCB FF FF FF FF FF FF FF  
   3898 0000DDD2 FF FF FF FF FF FF FF  
   3898 0000DDD9 FF FF FF FF FF FF FF  
   3898 0000DDE0 FF FF FF FF FF FF FF  
   3898 0000DDE7 FF FF FF FF FF FF FF  
   3898 0000DDEE FF FF FF FF FF FF FF  
   3898 0000DDF5 FF FF FF FF FF FF FF  
   3898 0000DDFC FF FF FF FF FF FF FF  
   3898 0000DE03 FF FF FF FF FF FF FF  
   3898 0000DE0A FF FF FF FF FF FF FF  
   3898 0000DE11 FF FF FF FF FF FF FF  
   3898 0000DE18 FF FF FF FF FF FF FF  
   3898 0000DE1F FF FF FF FF FF FF FF  
   3898 0000DE26 FF FF FF FF FF FF FF  
   3898 0000DE2D FF FF FF FF FF FF FF  
   3898 0000DE34 FF FF FF FF FF FF FF  
   3898 0000DE3B FF FF FF FF FF FF FF  
   3898 0000DE42 FF FF FF FF FF FF FF  
   3898 0000DE49 FF FF FF FF FF FF FF  
   3898 0000DE50 FF FF FF FF FF FF FF  
   3898 0000DE57 FF FF FF FF FF FF FF  
   3898 0000DE5E FF FF FF FF FF FF FF  
   3898 0000DE65 FF FF FF FF FF FF FF  
   3898 0000DE6C FF FF FF FF FF FF FF  
   3898 0000DE73 FF FF FF FF FF FF FF  
   3898 0000DE7A FF FF FF FF FF FF FF  
   3898 0000DE81 FF FF FF FF FF FF FF  
   3898 0000DE88 FF FF FF FF FF FF FF  
   3898 0000DE8F FF FF FF FF FF FF FF  
   3898 0000DE96 FF FF FF FF FF FF FF  
   3898 0000DE9D FF FF FF FF FF FF FF  
   3898 0000DEA4 FF FF FF FF FF FF FF  
   3898 0000DEAB FF FF FF FF FF FF FF  
   3898 0000DEB2 FF FF FF FF FF FF FF  
   3898 0000DEB9 FF FF FF FF FF FF FF  
   3898 0000DEC0 FF FF FF FF FF FF FF  
   3898 0000DEC7 FF FF FF FF FF FF FF  
   3898 0000DECE FF FF FF FF FF FF FF  
   3898 0000DED5 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 71
noc_boot11.a
   3898 0000DEDC FF FF FF FF FF FF FF  
   3898 0000DEE3 FF FF FF FF FF FF FF  
   3898 0000DEEA FF FF FF FF FF FF FF  
   3898 0000DEF1 FF FF FF FF FF FF FF  
   3898 0000DEF8 FF FF FF FF FF FF FF  
   3898 0000DEFF FF FF FF FF FF FF FF  
   3898 0000DF06 FF FF FF FF FF FF FF  
   3898 0000DF0D FF FF FF FF FF FF FF  
   3898 0000DF14 FF FF FF FF FF FF FF  
   3898 0000DF1B FF FF FF FF FF FF FF  
   3898 0000DF22 FF FF FF FF FF FF FF  
   3898 0000DF29 FF FF FF FF FF FF FF  
   3898 0000DF30 FF FF FF FF FF FF FF  
   3898 0000DF37 FF FF FF FF FF FF FF  
   3898 0000DF3E FF FF FF FF FF FF FF  
   3898 0000DF45 FF FF FF FF FF FF FF  
   3898 0000DF4C FF FF FF FF FF FF FF  
   3898 0000DF53 FF FF FF FF FF FF FF  
   3898 0000DF5A FF FF FF FF FF FF FF  
   3898 0000DF61 FF FF FF FF FF FF FF  
   3898 0000DF68 FF FF FF FF FF FF FF  
   3898 0000DF6F FF FF FF FF FF FF FF  
   3898 0000DF76 FF FF FF FF FF FF FF  
   3898 0000DF7D FF FF FF FF FF FF FF  
   3898 0000DF84 FF FF FF FF FF FF FF  
   3898 0000DF8B FF FF FF FF FF FF FF  
   3898 0000DF92 FF FF FF FF FF FF FF  
   3898 0000DF99 FF FF FF FF FF FF FF  
   3898 0000DFA0 FF FF FF FF FF FF FF  
   3898 0000DFA7 FF FF FF FF FF FF FF  
   3898 0000DFAE FF FF FF FF FF FF FF  
   3898 0000DFB5 FF FF FF FF FF FF FF  
   3898 0000DFBC FF FF FF FF FF FF FF  
   3898 0000DFC3 FF FF FF FF FF FF FF  
   3898 0000DFCA FF FF FF FF FF FF FF  
   3898 0000DFD1 FF FF FF FF FF FF FF  
   3898 0000DFD8 FF FF FF FF FF FF FF  
   3898 0000DFDF FF FF FF FF FF FF FF  
   3898 0000DFE6 FF FF FF FF FF FF FF  
   3898 0000DFED FF FF FF FF FF FF FF  
   3898 0000DFF4 FF FF FF FF FF FF FF  
   3898 0000DFFB FF FF FF FF FF FF FF  
   3898 0000E002 FF FF FF FF FF FF FF  
   3898 0000E009 FF FF FF FF FF FF FF  
   3898 0000E010 FF FF FF FF FF FF FF  
   3898 0000E017 FF FF FF FF FF FF FF  
   3898 0000E01E FF FF FF FF FF FF FF  
   3898 0000E025 FF FF FF FF FF FF FF  
   3898 0000E02C FF FF FF FF FF FF FF  
   3898 0000E033 FF FF FF FF FF FF FF  
   3898 0000E03A FF FF FF FF FF FF FF  
   3898 0000E041 FF FF FF FF FF FF FF  
   3898 0000E048 FF FF FF FF FF FF FF  
   3898 0000E04F FF FF FF FF FF FF FF  
   3898 0000E056 FF FF FF FF FF FF FF  
   3898 0000E05D FF FF FF FF FF FF FF  
   3898 0000E064 FF FF FF FF FF FF FF  
   3898 0000E06B FF FF FF FF FF FF FF  
   3898 0000E072 FF FF FF FF FF FF FF  
   3898 0000E079 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 72
noc_boot11.a
   3898 0000E080 FF FF FF FF FF FF FF  
   3898 0000E087 FF FF FF FF FF FF FF  
   3898 0000E08E FF FF FF FF FF FF FF  
   3898 0000E095 FF FF FF FF FF FF FF  
   3898 0000E09C FF FF FF FF FF FF FF  
   3898 0000E0A3 FF FF FF FF FF FF FF  
   3898 0000E0AA FF FF FF FF FF FF FF  
   3898 0000E0B1 FF FF FF FF FF FF FF  
   3898 0000E0B8 FF FF FF FF FF FF FF  
   3898 0000E0BF FF FF FF FF FF FF FF  
   3898 0000E0C6 FF FF FF FF FF FF FF  
   3898 0000E0CD FF FF FF FF FF FF FF  
   3898 0000E0D4 FF FF FF FF FF FF FF  
   3898 0000E0DB FF FF FF FF FF FF FF  
   3898 0000E0E2 FF FF FF FF FF FF FF  
   3898 0000E0E9 FF FF FF FF FF FF FF  
   3898 0000E0F0 FF FF FF FF FF FF FF  
   3898 0000E0F7 FF FF FF FF FF FF FF  
   3898 0000E0FE FF FF FF FF FF FF FF  
   3898 0000E105 FF FF FF FF FF FF FF  
   3898 0000E10C FF FF FF FF FF FF FF  
   3898 0000E113 FF FF FF FF FF FF FF  
   3898 0000E11A FF FF FF FF FF FF FF  
   3898 0000E121 FF FF FF FF FF FF FF  
   3898 0000E128 FF FF FF FF FF FF FF  
   3898 0000E12F FF FF FF FF FF FF FF  
   3898 0000E136 FF FF FF FF FF FF FF  
   3898 0000E13D FF FF FF FF FF FF FF  
   3898 0000E144 FF FF FF FF FF FF FF  
   3898 0000E14B FF FF FF FF FF FF FF  
   3898 0000E152 FF FF FF FF FF FF FF  
   3898 0000E159 FF FF FF FF FF FF FF  
   3898 0000E160 FF FF FF FF FF FF FF  
   3898 0000E167 FF FF FF FF FF FF FF  
   3898 0000E16E FF FF FF FF FF FF FF  
   3898 0000E175 FF FF FF FF FF FF FF  
   3898 0000E17C FF FF FF FF FF FF FF  
   3898 0000E183 FF FF FF FF FF FF FF  
   3898 0000E18A FF FF FF FF FF FF FF  
   3898 0000E191 FF FF FF FF FF FF FF  
   3898 0000E198 FF FF FF FF FF FF FF  
   3898 0000E19F FF FF FF FF FF FF FF  
   3898 0000E1A6 FF FF FF FF FF FF FF  
   3898 0000E1AD FF FF FF FF FF FF FF  
   3898 0000E1B4 FF FF FF FF FF FF FF  
   3898 0000E1BB FF FF FF FF FF FF FF  
   3898 0000E1C2 FF FF FF FF FF FF FF  
   3898 0000E1C9 FF FF FF FF FF FF FF  
   3898 0000E1D0 FF FF FF FF FF FF FF  
   3898 0000E1D7 FF FF FF FF FF FF FF  
   3898 0000E1DE FF FF FF FF FF FF FF  
   3898 0000E1E5 FF FF FF FF FF FF FF  
   3898 0000E1EC FF FF FF FF FF FF FF  
   3898 0000E1F3 FF FF FF FF FF FF FF  
   3898 0000E1FA FF FF FF FF FF FF FF  
   3898 0000E201 FF FF FF FF FF FF FF  
   3898 0000E208 FF FF FF FF FF FF FF  
   3898 0000E20F FF FF FF FF FF FF FF  
   3898 0000E216 FF FF FF FF FF FF FF  
   3898 0000E21D FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 73
noc_boot11.a
   3898 0000E224 FF FF FF FF FF FF FF  
   3898 0000E22B FF FF FF FF FF FF FF  
   3898 0000E232 FF FF FF FF FF FF FF  
   3898 0000E239 FF FF FF FF FF FF FF  
   3898 0000E240 FF FF FF FF FF FF FF  
   3898 0000E247 FF FF FF FF FF FF FF  
   3898 0000E24E FF FF FF FF FF FF FF  
   3898 0000E255 FF FF FF FF FF FF FF  
   3898 0000E25C FF FF FF FF FF FF FF  
   3898 0000E263 FF FF FF FF FF FF FF  
   3898 0000E26A FF FF FF FF FF FF FF  
   3898 0000E271 FF FF FF FF FF FF FF  
   3898 0000E278 FF FF FF FF FF FF FF  
   3898 0000E27F FF FF FF FF FF FF FF  
   3898 0000E286 FF FF FF FF FF FF FF  
   3898 0000E28D FF FF FF FF FF FF FF  
   3898 0000E294 FF FF FF FF FF FF FF  
   3898 0000E29B FF FF FF FF FF FF FF  
   3898 0000E2A2 FF FF FF FF FF FF FF  
   3898 0000E2A9 FF FF FF FF FF FF FF  
   3898 0000E2B0 FF FF FF FF FF FF FF  
   3898 0000E2B7 FF FF FF FF FF FF FF  
   3898 0000E2BE FF FF FF FF FF FF FF  
   3898 0000E2C5 FF FF FF FF FF FF FF  
   3898 0000E2CC FF FF FF FF FF FF FF  
   3898 0000E2D3 FF FF FF FF FF FF FF  
   3898 0000E2DA FF FF FF FF FF FF FF  
   3898 0000E2E1 FF FF FF FF FF FF FF  
   3898 0000E2E8 FF FF FF FF FF FF FF  
   3898 0000E2EF FF FF FF FF FF FF FF  
   3898 0000E2F6 FF FF FF FF FF FF FF  
   3898 0000E2FD FF FF FF FF FF FF FF  
   3898 0000E304 FF FF FF FF FF FF FF  
   3898 0000E30B FF FF FF FF FF FF FF  
   3898 0000E312 FF FF FF FF FF FF FF  
   3898 0000E319 FF FF FF FF FF FF FF  
   3898 0000E320 FF FF FF FF FF FF FF  
   3898 0000E327 FF FF FF FF FF FF FF  
   3898 0000E32E FF FF FF FF FF FF FF  
   3898 0000E335 FF FF FF FF FF FF FF  
   3898 0000E33C FF FF FF FF FF FF FF  
   3898 0000E343 FF FF FF FF FF FF FF  
   3898 0000E34A FF FF FF FF FF FF FF  
   3898 0000E351 FF FF FF FF FF FF FF  
   3898 0000E358 FF FF FF FF FF FF FF  
   3898 0000E35F FF FF FF FF FF FF FF  
   3898 0000E366 FF FF FF FF FF FF FF  
   3898 0000E36D FF FF FF FF FF FF FF  
   3898 0000E374 FF FF FF FF FF FF FF  
   3898 0000E37B FF FF FF FF FF FF FF  
   3898 0000E382 FF FF FF FF FF FF FF  
   3898 0000E389 FF FF FF FF FF FF FF  
   3898 0000E390 FF FF FF FF FF FF FF  
   3898 0000E397 FF FF FF FF FF FF FF  
   3898 0000E39E FF FF FF FF FF FF FF  
   3898 0000E3A5 FF FF FF FF FF FF FF  
   3898 0000E3AC FF FF FF FF FF FF FF  
   3898 0000E3B3 FF FF FF FF FF FF FF  
   3898 0000E3BA FF FF FF FF FF FF FF  
   3898 0000E3C1 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 74
noc_boot11.a
   3898 0000E3C8 FF FF FF FF FF FF FF  
   3898 0000E3CF FF FF FF FF FF FF FF  
   3898 0000E3D6 FF FF FF FF FF FF FF  
   3898 0000E3DD FF FF FF FF FF FF FF  
   3898 0000E3E4 FF FF FF FF FF FF FF  
   3898 0000E3EB FF FF FF FF FF FF FF  
   3898 0000E3F2 FF FF FF FF FF FF FF  
   3898 0000E3F9 FF FF FF FF FF FF FF  
   3898 0000E400 FF FF FF FF FF FF FF  
   3898 0000E407 FF FF FF FF FF FF FF  
   3898 0000E40E FF FF FF FF FF FF FF  
   3898 0000E415 FF FF FF FF FF FF FF  
   3898 0000E41C FF FF FF FF FF FF FF  
   3898 0000E423 FF FF FF FF FF FF FF  
   3898 0000E42A FF FF FF FF FF FF FF  
   3898 0000E431 FF FF FF FF FF FF FF  
   3898 0000E438 FF FF FF FF FF FF FF  
   3898 0000E43F FF FF FF FF FF FF FF  
   3898 0000E446 FF FF FF FF FF FF FF  
   3898 0000E44D FF FF FF FF FF FF FF  
   3898 0000E454 FF FF FF FF FF FF FF  
   3898 0000E45B FF FF FF FF FF FF FF  
   3898 0000E462 FF FF FF FF FF FF FF  
   3898 0000E469 FF FF FF FF FF FF FF  
   3898 0000E470 FF FF FF FF FF FF FF  
   3898 0000E477 FF FF FF FF FF FF FF  
   3898 0000E47E FF FF FF FF FF FF FF  
   3898 0000E485 FF FF FF FF FF FF FF  
   3898 0000E48C FF FF FF FF FF FF FF  
   3898 0000E493 FF FF FF FF FF FF FF  
   3898 0000E49A FF FF FF FF FF FF FF  
   3898 0000E4A1 FF FF FF FF FF FF FF  
   3898 0000E4A8 FF FF FF FF FF FF FF  
   3898 0000E4AF FF FF FF FF FF FF FF  
   3898 0000E4B6 FF FF FF FF FF FF FF  
   3898 0000E4BD FF FF FF FF FF FF FF  
   3898 0000E4C4 FF FF FF FF FF FF FF  
   3898 0000E4CB FF FF FF FF FF FF FF  
   3898 0000E4D2 FF FF FF FF FF FF FF  
   3898 0000E4D9 FF FF FF FF FF FF FF  
   3898 0000E4E0 FF FF FF FF FF FF FF  
   3898 0000E4E7 FF FF FF FF FF FF FF  
   3898 0000E4EE FF FF FF FF FF FF FF  
   3898 0000E4F5 FF FF FF FF FF FF FF  
   3898 0000E4FC FF FF FF FF FF FF FF  
   3898 0000E503 FF FF FF FF FF FF FF  
   3898 0000E50A FF FF FF FF FF FF FF  
   3898 0000E511 FF FF FF FF FF FF FF  
   3898 0000E518 FF FF FF FF FF FF FF  
   3898 0000E51F FF FF FF FF FF FF FF  
   3898 0000E526 FF FF FF FF FF FF FF  
   3898 0000E52D FF FF FF FF FF FF FF  
   3898 0000E534 FF FF FF FF FF FF FF  
   3898 0000E53B FF FF FF FF FF FF FF  
   3898 0000E542 FF FF FF FF FF FF FF  
   3898 0000E549 FF FF FF FF FF FF FF  
   3898 0000E550 FF FF FF FF FF FF FF  
   3898 0000E557 FF FF FF FF FF FF FF  
   3898 0000E55E FF FF FF FF FF FF FF  
   3898 0000E565 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 75
noc_boot11.a
   3898 0000E56C FF FF FF FF FF FF FF  
   3898 0000E573 FF FF FF FF FF FF FF  
   3898 0000E57A FF FF FF FF FF FF FF  
   3898 0000E581 FF FF FF FF FF FF FF  
   3898 0000E588 FF FF FF FF FF FF FF  
   3898 0000E58F FF FF FF FF FF FF FF  
   3898 0000E596 FF FF FF FF FF FF FF  
   3898 0000E59D FF FF FF FF FF FF FF  
   3898 0000E5A4 FF FF FF FF FF FF FF  
   3898 0000E5AB FF FF FF FF FF FF FF  
   3898 0000E5B2 FF FF FF FF FF FF FF  
   3898 0000E5B9 FF FF FF FF FF FF FF  
   3898 0000E5C0 FF FF FF FF FF FF FF  
   3898 0000E5C7 FF FF FF FF FF FF FF  
   3898 0000E5CE FF FF FF FF FF FF FF  
   3898 0000E5D5 FF FF FF FF FF FF FF  
   3898 0000E5DC FF FF FF FF FF FF FF  
   3898 0000E5E3 FF FF FF FF FF FF FF  
   3898 0000E5EA FF FF FF FF FF FF FF  
   3898 0000E5F1 FF FF FF FF FF FF FF  
   3898 0000E5F8 FF FF FF FF FF FF FF  
   3898 0000E5FF FF FF FF FF FF FF FF  
   3898 0000E606 FF FF FF FF FF FF FF  
   3898 0000E60D FF FF FF FF FF FF FF  
   3898 0000E614 FF FF FF FF FF FF FF  
   3898 0000E61B FF FF FF FF FF FF FF  
   3898 0000E622 FF FF FF FF FF FF FF  
   3898 0000E629 FF FF FF FF FF FF FF  
   3898 0000E630 FF FF FF FF FF FF FF  
   3898 0000E637 FF FF FF FF FF FF FF  
   3898 0000E63E FF FF FF FF FF FF FF  
   3898 0000E645 FF FF FF FF FF FF FF  
   3898 0000E64C FF FF FF FF FF FF FF  
   3898 0000E653 FF FF FF FF FF FF FF  
   3898 0000E65A FF FF FF FF FF FF FF  
   3898 0000E661 FF FF FF FF FF FF FF  
   3898 0000E668 FF FF FF FF FF FF FF  
   3898 0000E66F FF FF FF FF FF FF FF  
   3898 0000E676 FF FF FF FF FF FF FF  
   3898 0000E67D FF FF FF FF FF FF FF  
   3898 0000E684 FF FF FF FF FF FF FF  
   3898 0000E68B FF FF FF FF FF FF FF  
   3898 0000E692 FF FF FF FF FF FF FF  
   3898 0000E699 FF FF FF FF FF FF FF  
   3898 0000E6A0 FF FF FF FF FF FF FF  
   3898 0000E6A7 FF FF FF FF FF FF FF  
   3898 0000E6AE FF FF FF FF FF FF FF  
   3898 0000E6B5 FF FF FF FF FF FF FF  
   3898 0000E6BC FF FF FF FF FF FF FF  
   3898 0000E6C3 FF FF FF FF FF FF FF  
   3898 0000E6CA FF FF FF FF FF FF FF  
   3898 0000E6D1 FF FF FF FF FF FF FF  
   3898 0000E6D8 FF FF FF FF FF FF FF  
   3898 0000E6DF FF FF FF FF FF FF FF  
   3898 0000E6E6 FF FF FF FF FF FF FF  
   3898 0000E6ED FF FF FF FF FF FF FF  
   3898 0000E6F4 FF FF FF FF FF FF FF  
   3898 0000E6FB FF FF FF FF FF FF FF  
   3898 0000E702 FF FF FF FF FF FF FF  
   3898 0000E709 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 76
noc_boot11.a
   3898 0000E710 FF FF FF FF FF FF FF  
   3898 0000E717 FF FF FF FF FF FF FF  
   3898 0000E71E FF FF FF FF FF FF FF  
   3898 0000E725 FF FF FF FF FF FF FF  
   3898 0000E72C FF FF FF FF FF FF FF  
   3898 0000E733 FF FF FF FF FF FF FF  
   3898 0000E73A FF FF FF FF FF FF FF  
   3898 0000E741 FF FF FF FF FF FF FF  
   3898 0000E748 FF FF FF FF FF FF FF  
   3898 0000E74F FF FF FF FF FF FF FF  
   3898 0000E756 FF FF FF FF FF FF FF  
   3898 0000E75D FF FF FF FF FF FF FF  
   3898 0000E764 FF FF FF FF FF FF FF  
   3898 0000E76B FF FF FF FF FF FF FF  
   3898 0000E772 FF FF FF FF FF FF FF  
   3898 0000E779 FF FF FF FF FF FF FF  
   3898 0000E780 FF FF FF FF FF FF FF  
   3898 0000E787 FF FF FF FF FF FF FF  
   3898 0000E78E FF FF FF FF FF FF FF  
   3898 0000E795 FF FF FF FF FF FF FF  
   3898 0000E79C FF FF FF FF FF FF FF  
   3898 0000E7A3 FF FF FF FF FF FF FF  
   3898 0000E7AA FF FF FF FF FF FF FF  
   3898 0000E7B1 FF FF FF FF FF FF FF  
   3898 0000E7B8 FF FF FF FF FF FF FF  
   3898 0000E7BF FF FF FF FF FF FF FF  
   3898 0000E7C6 FF FF FF FF FF FF FF  
   3898 0000E7CD FF FF FF FF FF FF FF  
   3898 0000E7D4 FF FF FF FF FF FF FF  
   3898 0000E7DB FF FF FF FF FF FF FF  
   3898 0000E7E2 FF FF FF FF FF FF FF  
   3898 0000E7E9 FF FF FF FF FF FF FF  
   3898 0000E7F0 FF FF FF FF FF FF FF  
   3898 0000E7F7 FF FF FF FF FF FF FF  
   3898 0000E7FE FF FF FF FF FF FF FF  
   3898 0000E805 FF FF FF FF FF FF FF  
   3898 0000E80C FF FF FF FF FF FF FF  
   3898 0000E813 FF FF FF FF FF FF FF  
   3898 0000E81A FF FF FF FF FF FF FF  
   3898 0000E821 FF FF FF FF FF FF FF  
   3898 0000E828 FF FF FF FF FF FF FF  
   3898 0000E82F FF FF FF FF FF FF FF  
   3898 0000E836 FF FF FF FF FF FF FF  
   3898 0000E83D FF FF FF FF FF FF FF  
   3898 0000E844 FF FF FF FF FF FF FF  
   3898 0000E84B FF FF FF FF FF FF FF  
   3898 0000E852 FF FF FF FF FF FF FF  
   3898 0000E859 FF FF FF FF FF FF FF  
   3898 0000E860 FF FF FF FF FF FF FF  
   3898 0000E867 FF FF FF FF FF FF FF  
   3898 0000E86E FF FF FF FF FF FF FF  
   3898 0000E875 FF FF FF FF FF FF FF  
   3898 0000E87C FF FF FF FF FF FF FF  
   3898 0000E883 FF FF FF FF FF FF FF  
   3898 0000E88A FF FF FF FF FF FF FF  
   3898 0000E891 FF FF FF FF FF FF FF  
   3898 0000E898 FF FF FF FF FF FF FF  
   3898 0000E89F FF FF FF FF FF FF FF  
   3898 0000E8A6 FF FF FF FF FF FF FF  
   3898 0000E8AD FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 77
noc_boot11.a
   3898 0000E8B4 FF FF FF FF FF FF FF  
   3898 0000E8BB FF FF FF FF FF FF FF  
   3898 0000E8C2 FF FF FF FF FF FF FF  
   3898 0000E8C9 FF FF FF FF FF FF FF  
   3898 0000E8D0 FF FF FF FF FF FF FF  
   3898 0000E8D7 FF FF FF FF FF FF FF  
   3898 0000E8DE FF FF FF FF FF FF FF  
   3898 0000E8E5 FF FF FF FF FF FF FF  
   3898 0000E8EC FF FF FF FF FF FF FF  
   3898 0000E8F3 FF FF FF FF FF FF FF  
   3898 0000E8FA FF FF FF FF FF FF FF  
   3898 0000E901 FF FF FF FF FF FF FF  
   3898 0000E908 FF FF FF FF FF FF FF  
   3898 0000E90F FF FF FF FF FF FF FF  
   3898 0000E916 FF FF FF FF FF FF FF  
   3898 0000E91D FF FF FF FF FF FF FF  
   3898 0000E924 FF FF FF FF FF FF FF  
   3898 0000E92B FF FF FF FF FF FF FF  
   3898 0000E932 FF FF FF FF FF FF FF  
   3898 0000E939 FF FF FF FF FF FF FF  
   3898 0000E940 FF FF FF FF FF FF FF  
   3898 0000E947 FF FF FF FF FF FF FF  
   3898 0000E94E FF FF FF FF FF FF FF  
   3898 0000E955 FF FF FF FF FF FF FF  
   3898 0000E95C FF FF FF FF FF FF FF  
   3898 0000E963 FF FF FF FF FF FF FF  
   3898 0000E96A FF FF FF FF FF FF FF  
   3898 0000E971 FF FF FF FF FF FF FF  
   3898 0000E978 FF FF FF FF FF FF FF  
   3898 0000E97F FF FF FF FF FF FF FF  
   3898 0000E986 FF FF FF FF FF FF FF  
   3898 0000E98D FF FF FF FF FF FF FF  
   3898 0000E994 FF FF FF FF FF FF FF  
   3898 0000E99B FF FF FF FF FF FF FF  
   3898 0000E9A2 FF FF FF FF FF FF FF  
   3898 0000E9A9 FF FF FF FF FF FF FF  
   3898 0000E9B0 FF FF FF FF FF FF FF  
   3898 0000E9B7 FF FF FF FF FF FF FF  
   3898 0000E9BE FF FF FF FF FF FF FF  
   3898 0000E9C5 FF FF FF FF FF FF FF  
   3898 0000E9CC FF FF FF FF FF FF FF  
   3898 0000E9D3 FF FF FF FF FF FF FF  
   3898 0000E9DA FF FF FF FF FF FF FF  
   3898 0000E9E1 FF FF FF FF FF FF FF  
   3898 0000E9E8 FF FF FF FF FF FF FF  
   3898 0000E9EF FF FF FF FF FF FF FF  
   3898 0000E9F6 FF FF FF FF FF FF FF  
   3898 0000E9FD FF FF FF FF FF FF FF  
   3898 0000EA04 FF FF FF FF FF FF FF  
   3898 0000EA0B FF FF FF FF FF FF FF  
   3898 0000EA12 FF FF FF FF FF FF FF  
   3898 0000EA19 FF FF FF FF FF FF FF  
   3898 0000EA20 FF FF FF FF FF FF FF  
   3898 0000EA27 FF FF FF FF FF FF FF  
   3898 0000EA2E FF FF FF FF FF FF FF  
   3898 0000EA35 FF FF FF FF FF FF FF  
   3898 0000EA3C FF FF FF FF FF FF FF  
   3898 0000EA43 FF FF FF FF FF FF FF  
   3898 0000EA4A FF FF FF FF FF FF FF  
   3898 0000EA51 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 78
noc_boot11.a
   3898 0000EA58 FF FF FF FF FF FF FF  
   3898 0000EA5F FF FF FF FF FF FF FF  
   3898 0000EA66 FF FF FF FF FF FF FF  
   3898 0000EA6D FF FF FF FF FF FF FF  
   3898 0000EA74 FF FF FF FF FF FF FF  
   3898 0000EA7B FF FF FF FF FF FF FF  
   3898 0000EA82 FF FF FF FF FF FF FF  
   3898 0000EA89 FF FF FF FF FF FF FF  
   3898 0000EA90 FF FF FF FF FF FF FF  
   3898 0000EA97 FF FF FF FF FF FF FF  
   3898 0000EA9E FF FF FF FF FF FF FF  
   3898 0000EAA5 FF FF FF FF FF FF FF  
   3898 0000EAAC FF FF FF FF FF FF FF  
   3898 0000EAB3 FF FF FF FF FF FF FF  
   3898 0000EABA FF FF FF FF FF FF FF  
   3898 0000EAC1 FF FF FF FF FF FF FF  
   3898 0000EAC8 FF FF FF FF FF FF FF  
   3898 0000EACF FF FF FF FF FF FF FF  
   3898 0000EAD6 FF FF FF FF FF FF FF  
   3898 0000EADD FF FF FF FF FF FF FF  
   3898 0000EAE4 FF FF FF FF FF FF FF  
   3898 0000EAEB FF FF FF FF FF FF FF  
   3898 0000EAF2 FF FF FF FF FF FF FF  
   3898 0000EAF9 FF FF FF FF FF FF FF  
   3898 0000EB00 FF FF FF FF FF FF FF  
   3898 0000EB07 FF FF FF FF FF FF FF  
   3898 0000EB0E FF FF FF FF FF FF FF  
   3898 0000EB15 FF FF FF FF FF FF FF  
   3898 0000EB1C FF FF FF FF FF FF FF  
   3898 0000EB23 FF FF FF FF FF FF FF  
   3898 0000EB2A FF FF FF FF FF FF FF  
   3898 0000EB31 FF FF FF FF FF FF FF  
   3898 0000EB38 FF FF FF FF FF FF FF  
   3898 0000EB3F FF FF FF FF FF FF FF  
   3898 0000EB46 FF FF FF FF FF FF FF  
   3898 0000EB4D FF FF FF FF FF FF FF  
   3898 0000EB54 FF FF FF FF FF FF FF  
   3898 0000EB5B FF FF FF FF FF FF FF  
   3898 0000EB62 FF FF FF FF FF FF FF  
   3898 0000EB69 FF FF FF FF FF FF FF  
   3898 0000EB70 FF FF FF FF FF FF FF  
   3898 0000EB77 FF FF FF FF FF FF FF  
   3898 0000EB7E FF FF FF FF FF FF FF  
   3898 0000EB85 FF FF FF FF FF FF FF  
   3898 0000EB8C FF FF FF FF FF FF FF  
   3898 0000EB93 FF FF FF FF FF FF FF  
   3898 0000EB9A FF FF FF FF FF FF FF  
   3898 0000EBA1 FF FF FF FF FF FF FF  
   3898 0000EBA8 FF FF FF FF FF FF FF  
   3898 0000EBAF FF FF FF FF FF FF FF  
   3898 0000EBB6 FF FF FF FF FF FF FF  
   3898 0000EBBD FF FF FF FF FF FF FF  
   3898 0000EBC4 FF FF FF FF FF FF FF  
   3898 0000EBCB FF FF FF FF FF FF FF  
   3898 0000EBD2 FF FF FF FF FF FF FF  
   3898 0000EBD9 FF FF FF FF FF FF FF  
   3898 0000EBE0 FF FF FF FF FF FF FF  
   3898 0000EBE7 FF FF FF FF FF FF FF  
   3898 0000EBEE FF FF FF FF FF FF FF  
   3898 0000EBF5 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 79
noc_boot11.a
   3898 0000EBFC FF FF FF FF FF FF FF  
   3898 0000EC03 FF FF FF FF FF FF FF  
   3898 0000EC0A FF FF FF FF FF FF FF  
   3898 0000EC11 FF FF FF FF FF FF FF  
   3898 0000EC18 FF FF FF FF FF FF FF  
   3898 0000EC1F FF FF FF FF FF FF FF  
   3898 0000EC26 FF FF FF FF FF FF FF  
   3898 0000EC2D FF FF FF FF FF FF FF  
   3898 0000EC34 FF FF FF FF FF FF FF  
   3898 0000EC3B FF FF FF FF FF FF FF  
   3898 0000EC42 FF FF FF FF FF FF FF  
   3898 0000EC49 FF FF FF FF FF FF FF  
   3898 0000EC50 FF FF FF FF FF FF FF  
   3898 0000EC57 FF FF FF FF FF FF FF  
   3898 0000EC5E FF FF FF FF FF FF FF  
   3898 0000EC65 FF FF FF FF FF FF FF  
   3898 0000EC6C FF FF FF FF FF FF FF  
   3898 0000EC73 FF FF FF FF FF FF FF  
   3898 0000EC7A FF FF FF FF FF FF FF  
   3898 0000EC81 FF FF FF FF FF FF FF  
   3898 0000EC88 FF FF FF FF FF FF FF  
   3898 0000EC8F FF FF FF FF FF FF FF  
   3898 0000EC96 FF FF FF FF FF FF FF  
   3898 0000EC9D FF FF FF FF FF FF FF  
   3898 0000ECA4 FF FF FF FF FF FF FF  
   3898 0000ECAB FF FF FF FF FF FF FF  
   3898 0000ECB2 FF FF FF FF FF FF FF  
   3898 0000ECB9 FF FF FF FF FF FF FF  
   3898 0000ECC0 FF FF FF FF FF FF FF  
   3898 0000ECC7 FF FF FF FF FF FF FF  
   3898 0000ECCE FF FF FF FF FF FF FF  
   3898 0000ECD5 FF FF FF FF FF FF FF  
   3898 0000ECDC FF FF FF FF FF FF FF  
   3898 0000ECE3 FF FF FF FF FF FF FF  
   3898 0000ECEA FF FF FF FF FF FF FF  
   3898 0000ECF1 FF FF FF FF FF FF FF  
   3898 0000ECF8 FF FF FF FF FF FF FF  
   3898 0000ECFF FF FF FF FF FF FF FF  
   3898 0000ED06 FF FF FF FF FF FF FF  
   3898 0000ED0D FF FF FF FF FF FF FF  
   3898 0000ED14 FF FF FF FF FF FF FF  
   3898 0000ED1B FF FF FF FF FF FF FF  
   3898 0000ED22 FF FF FF FF FF FF FF  
   3898 0000ED29 FF FF FF FF FF FF FF  
   3898 0000ED30 FF FF FF FF FF FF FF  
   3898 0000ED37 FF FF FF FF FF FF FF  
   3898 0000ED3E FF FF FF FF FF FF FF  
   3898 0000ED45 FF FF FF FF FF FF FF  
   3898 0000ED4C FF FF FF FF FF FF FF  
   3898 0000ED53 FF FF FF FF FF FF FF  
   3898 0000ED5A FF FF FF FF FF FF FF  
   3898 0000ED61 FF FF FF FF FF FF FF  
   3898 0000ED68 FF FF FF FF FF FF FF  
   3898 0000ED6F FF FF FF FF FF FF FF  
   3898 0000ED76 FF FF FF FF FF FF FF  
   3898 0000ED7D FF FF FF FF FF FF FF  
   3898 0000ED84 FF FF FF FF FF FF FF  
   3898 0000ED8B FF FF FF FF FF FF FF  
   3898 0000ED92 FF FF FF FF FF FF FF  
   3898 0000ED99 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 80
noc_boot11.a
   3898 0000EDA0 FF FF FF FF FF FF FF  
   3898 0000EDA7 FF FF FF FF FF FF FF  
   3898 0000EDAE FF FF FF FF FF FF FF  
   3898 0000EDB5 FF FF FF FF FF FF FF  
   3898 0000EDBC FF FF FF FF FF FF FF  
   3898 0000EDC3 FF FF FF FF FF FF FF  
   3898 0000EDCA FF FF FF FF FF FF FF  
   3898 0000EDD1 FF FF FF FF FF FF FF  
   3898 0000EDD8 FF FF FF FF FF FF FF  
   3898 0000EDDF FF FF FF FF FF FF FF  
   3898 0000EDE6 FF FF FF FF FF FF FF  
   3898 0000EDED FF FF FF FF FF FF FF  
   3898 0000EDF4 FF FF FF FF FF FF FF  
   3898 0000EDFB FF FF FF FF FF FF FF  
   3898 0000EE02 FF FF FF FF FF FF FF  
   3898 0000EE09 FF FF FF FF FF FF FF  
   3898 0000EE10 FF FF FF FF FF FF FF  
   3898 0000EE17 FF FF FF FF FF FF FF  
   3898 0000EE1E FF FF FF FF FF FF FF  
   3898 0000EE25 FF FF FF FF FF FF FF  
   3898 0000EE2C FF FF FF FF FF FF FF  
   3898 0000EE33 FF FF FF FF FF FF FF  
   3898 0000EE3A FF FF FF FF FF FF FF  
   3898 0000EE41 FF FF FF FF FF FF FF  
   3898 0000EE48 FF FF FF FF FF FF FF  
   3898 0000EE4F FF FF FF FF FF FF FF  
   3898 0000EE56 FF FF FF FF FF FF FF  
   3898 0000EE5D FF FF FF FF FF FF FF  
   3898 0000EE64 FF FF FF FF FF FF FF  
   3898 0000EE6B FF FF FF FF FF FF FF  
   3898 0000EE72 FF FF FF FF FF FF FF  
   3898 0000EE79 FF FF FF FF FF FF FF  
   3898 0000EE80 FF FF FF FF FF FF FF  
   3898 0000EE87 FF FF FF FF FF FF FF  
   3898 0000EE8E FF FF FF FF FF FF FF  
   3898 0000EE95 FF FF FF FF FF FF FF  
   3898 0000EE9C FF FF FF FF FF FF FF  
   3898 0000EEA3 FF FF FF FF FF FF FF  
   3898 0000EEAA FF FF FF FF FF FF FF  
   3898 0000EEB1 FF FF FF FF FF FF FF  
   3898 0000EEB8 FF FF FF FF FF FF FF  
   3898 0000EEBF FF FF FF FF FF FF FF  
   3898 0000EEC6 FF FF FF FF FF FF FF  
   3898 0000EECD FF FF FF FF FF FF FF  
   3898 0000EED4 FF FF FF FF FF FF FF  
   3898 0000EEDB FF FF FF FF FF FF FF  
   3898 0000EEE2 FF FF FF FF FF FF FF  
   3898 0000EEE9 FF FF FF FF FF FF FF  
   3898 0000EEF0 FF FF FF FF FF FF FF  
   3898 0000EEF7 FF FF FF FF FF FF FF  
   3898 0000EEFE FF FF FF FF FF FF FF  
   3898 0000EF05 FF FF FF FF FF FF FF  
   3898 0000EF0C FF FF FF FF FF FF FF  
   3898 0000EF13 FF FF FF FF FF FF FF  
   3898 0000EF1A FF FF FF FF FF FF FF  
   3898 0000EF21 FF FF FF FF FF FF FF  
   3898 0000EF28 FF FF FF FF FF FF FF  
   3898 0000EF2F FF FF FF FF FF FF FF  
   3898 0000EF36 FF FF FF FF FF FF FF  
   3898 0000EF3D FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 81
noc_boot11.a
   3898 0000EF44 FF FF FF FF FF FF FF  
   3898 0000EF4B FF FF FF FF FF FF FF  
   3898 0000EF52 FF FF FF FF FF FF FF  
   3898 0000EF59 FF FF FF FF FF FF FF  
   3898 0000EF60 FF FF FF FF FF FF FF  
   3898 0000EF67 FF FF FF FF FF FF FF  
   3898 0000EF6E FF FF FF FF FF FF FF  
   3898 0000EF75 FF FF FF FF FF FF FF  
   3898 0000EF7C FF FF FF FF FF FF FF  
   3898 0000EF83 FF FF FF FF FF FF FF  
   3898 0000EF8A FF FF FF FF FF FF FF  
   3898 0000EF91 FF FF FF FF FF FF FF  
   3898 0000EF98 FF FF FF FF FF FF FF  
   3898 0000EF9F FF FF FF FF FF FF FF  
   3898 0000EFA6 FF FF FF FF FF FF FF  
   3898 0000EFAD FF FF FF FF FF FF FF  
   3898 0000EFB4 FF FF FF FF FF FF FF  
   3898 0000EFBB FF FF FF FF FF FF FF  
   3898 0000EFC2 FF FF FF FF FF FF FF  
   3898 0000EFC9 FF FF FF FF FF FF FF  
   3898 0000EFD0 FF FF FF FF FF FF FF  
   3898 0000EFD7 FF FF FF FF FF FF FF  
   3898 0000EFDE FF FF FF FF FF FF FF  
   3898 0000EFE5 FF FF FF FF FF FF FF  
   3898 0000EFEC FF FF FF FF FF FF FF  
   3898 0000EFF3 FF FF FF FF FF FF FF  
   3898 0000EFFA FF FF FF FF FF FF FF  
   3898 0000F001 FF FF FF FF FF FF FF  
   3898 0000F008 FF FF FF FF FF FF FF  
   3898 0000F00F FF FF FF FF FF FF FF  
   3898 0000F016 FF FF FF FF FF FF FF  
   3898 0000F01D FF FF FF FF FF FF FF  
   3898 0000F024 FF FF FF FF FF FF FF  
   3898 0000F02B FF FF FF FF FF FF FF  
   3898 0000F032 FF FF FF FF FF FF FF  
   3898 0000F039 FF FF FF FF FF FF FF  
   3898 0000F040 FF FF FF FF FF FF FF  
   3898 0000F047 FF FF FF FF FF FF FF  
   3898 0000F04E FF FF FF FF FF FF FF  
   3898 0000F055 FF FF FF FF FF FF FF  
   3898 0000F05C FF FF FF FF FF FF FF  
   3898 0000F063 FF FF FF FF FF FF FF  
   3898 0000F06A FF FF FF FF FF FF FF  
   3898 0000F071 FF FF FF FF FF FF FF  
   3898 0000F078 FF FF FF FF FF FF FF  
   3898 0000F07F FF FF FF FF FF FF FF  
   3898 0000F086 FF FF FF FF FF FF FF  
   3898 0000F08D FF FF FF FF FF FF FF  
   3898 0000F094 FF FF FF FF FF FF FF  
   3898 0000F09B FF FF FF FF FF FF FF  
   3898 0000F0A2 FF FF FF FF FF FF FF  
   3898 0000F0A9 FF FF FF FF FF FF FF  
   3898 0000F0B0 FF FF FF FF FF FF FF  
   3898 0000F0B7 FF FF FF FF FF FF FF  
   3898 0000F0BE FF FF FF FF FF FF FF  
   3898 0000F0C5 FF FF FF FF FF FF FF  
   3898 0000F0CC FF FF FF FF FF FF FF  
   3898 0000F0D3 FF FF FF FF FF FF FF  
   3898 0000F0DA FF FF FF FF FF FF FF  
   3898 0000F0E1 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 82
noc_boot11.a
   3898 0000F0E8 FF FF FF FF FF FF FF  
   3898 0000F0EF FF FF FF FF FF FF FF  
   3898 0000F0F6 FF FF FF FF FF FF FF  
   3898 0000F0FD FF FF FF FF FF FF FF  
   3898 0000F104 FF FF FF FF FF FF FF  
   3898 0000F10B FF FF FF FF FF FF FF  
   3898 0000F112 FF FF FF FF FF FF FF  
   3898 0000F119 FF FF FF FF FF FF FF  
   3898 0000F120 FF FF FF FF FF FF FF  
   3898 0000F127 FF FF FF FF FF FF FF  
   3898 0000F12E FF FF FF FF FF FF FF  
   3898 0000F135 FF FF FF FF FF FF FF  
   3898 0000F13C FF FF FF FF FF FF FF  
   3898 0000F143 FF FF FF FF FF FF FF  
   3898 0000F14A FF FF FF FF FF FF FF  
   3898 0000F151 FF FF FF FF FF FF FF  
   3898 0000F158 FF FF FF FF FF FF FF  
   3898 0000F15F FF FF FF FF FF FF FF  
   3898 0000F166 FF FF FF FF FF FF FF  
   3898 0000F16D FF FF FF FF FF FF FF  
   3898 0000F174 FF FF FF FF FF FF FF  
   3898 0000F17B FF FF FF FF FF FF FF  
   3898 0000F182 FF FF FF FF FF FF FF  
   3898 0000F189 FF FF FF FF FF FF FF  
   3898 0000F190 FF FF FF FF FF FF FF  
   3898 0000F197 FF FF FF FF FF FF FF  
   3898 0000F19E FF FF FF FF FF FF FF  
   3898 0000F1A5 FF FF FF FF FF FF FF  
   3898 0000F1AC FF FF FF FF FF FF FF  
   3898 0000F1B3 FF FF FF FF FF FF FF  
   3898 0000F1BA FF FF FF FF FF FF FF  
   3898 0000F1C1 FF FF FF FF FF FF FF  
   3898 0000F1C8 FF FF FF FF FF FF FF  
   3898 0000F1CF FF FF FF FF FF FF FF  
   3898 0000F1D6 FF FF FF FF FF FF FF  
   3898 0000F1DD FF FF FF FF FF FF FF  
   3898 0000F1E4 FF FF FF FF FF FF FF  
   3898 0000F1EB FF FF FF FF FF FF FF  
   3898 0000F1F2 FF FF FF FF FF FF FF  
   3898 0000F1F9 FF FF FF FF FF FF FF  
   3898 0000F200 FF FF FF FF FF FF FF  
   3898 0000F207 FF FF FF FF FF FF FF  
   3898 0000F20E FF FF FF FF FF FF FF  
   3898 0000F215 FF FF FF FF FF FF FF  
   3898 0000F21C FF FF FF FF FF FF FF  
   3898 0000F223 FF FF FF FF FF FF FF  
   3898 0000F22A FF FF FF FF FF FF FF  
   3898 0000F231 FF FF FF FF FF FF FF  
   3898 0000F238 FF FF FF FF FF FF FF  
   3898 0000F23F FF FF FF FF FF FF FF  
   3898 0000F246 FF FF FF FF FF FF FF  
   3898 0000F24D FF FF FF FF FF FF FF  
   3898 0000F254 FF FF FF FF FF FF FF  
   3898 0000F25B FF FF FF FF FF FF FF  
   3898 0000F262 FF FF FF FF FF FF FF  
   3898 0000F269 FF FF FF FF FF FF FF  
   3898 0000F270 FF FF FF FF FF FF FF  
   3898 0000F277 FF FF FF FF FF FF FF  
   3898 0000F27E FF FF FF FF FF FF FF  
   3898 0000F285 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 83
noc_boot11.a
   3898 0000F28C FF FF FF FF FF FF FF  
   3898 0000F293 FF FF FF FF FF FF FF  
   3898 0000F29A FF FF FF FF FF FF FF  
   3898 0000F2A1 FF FF FF FF FF FF FF  
   3898 0000F2A8 FF FF FF FF FF FF FF  
   3898 0000F2AF FF FF FF FF FF FF FF  
   3898 0000F2B6 FF FF FF FF FF FF FF  
   3898 0000F2BD FF FF FF FF FF FF FF  
   3898 0000F2C4 FF FF FF FF FF FF FF  
   3898 0000F2CB FF FF FF FF FF FF FF  
   3898 0000F2D2 FF FF FF FF FF FF FF  
   3898 0000F2D9 FF FF FF FF FF FF FF  
   3898 0000F2E0 FF FF FF FF FF FF FF  
   3898 0000F2E7 FF FF FF FF FF FF FF  
   3898 0000F2EE FF FF FF FF FF FF FF  
   3898 0000F2F5 FF FF FF FF FF FF FF  
   3898 0000F2FC FF FF FF FF FF FF FF  
   3898 0000F303 FF FF FF FF FF FF FF  
   3898 0000F30A FF FF FF FF FF FF FF  
   3898 0000F311 FF FF FF FF FF FF FF  
   3898 0000F318 FF FF FF FF FF FF FF  
   3898 0000F31F FF FF FF FF FF FF FF  
   3898 0000F326 FF FF FF FF FF FF FF  
   3898 0000F32D FF FF FF FF FF FF FF  
   3898 0000F334 FF FF FF FF FF FF FF  
   3898 0000F33B FF FF FF FF FF FF FF  
   3898 0000F342 FF FF FF FF FF FF FF  
   3898 0000F349 FF FF FF FF FF FF FF  
   3898 0000F350 FF FF FF FF FF FF FF  
   3898 0000F357 FF FF FF FF FF FF FF  
   3898 0000F35E FF FF FF FF FF FF FF  
   3898 0000F365 FF FF FF FF FF FF FF  
   3898 0000F36C FF FF FF FF FF FF FF  
   3898 0000F373 FF FF FF FF FF FF FF  
   3898 0000F37A FF FF FF FF FF FF FF  
   3898 0000F381 FF FF FF FF FF FF FF  
   3898 0000F388 FF FF FF FF FF FF FF  
   3898 0000F38F FF FF FF FF FF FF FF  
   3898 0000F396 FF FF FF FF FF FF FF  
   3898 0000F39D FF FF FF FF FF FF FF  
   3898 0000F3A4 FF FF FF FF FF FF FF  
   3898 0000F3AB FF FF FF FF FF FF FF  
   3898 0000F3B2 FF FF FF FF FF FF FF  
   3898 0000F3B9 FF FF FF FF FF FF FF  
   3898 0000F3C0 FF FF FF FF FF FF FF  
   3898 0000F3C7 FF FF FF FF FF FF FF  
   3898 0000F3CE FF FF FF FF FF FF FF  
   3898 0000F3D5 FF FF FF FF FF FF FF  
   3898 0000F3DC FF FF FF FF FF FF FF  
   3898 0000F3E3 FF FF FF FF FF FF FF  
   3898 0000F3EA FF FF FF FF FF FF FF  
   3898 0000F3F1 FF FF FF FF FF FF FF  
   3898 0000F3F8 FF FF FF FF FF FF FF  
   3898 0000F3FF FF FF FF FF FF FF FF  
   3898 0000F406 FF FF FF FF FF FF FF  
   3898 0000F40D FF FF FF FF FF FF FF  
   3898 0000F414 FF FF FF FF FF FF FF  
   3898 0000F41B FF FF FF FF FF FF FF  
   3898 0000F422 FF FF FF FF FF FF FF  
   3898 0000F429 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 84
noc_boot11.a
   3898 0000F430 FF FF FF FF FF FF FF  
   3898 0000F437 FF FF FF FF FF FF FF  
   3898 0000F43E FF FF FF FF FF FF FF  
   3898 0000F445 FF FF FF FF FF FF FF  
   3898 0000F44C FF FF FF FF FF FF FF  
   3898 0000F453 FF FF FF FF FF FF FF  
   3898 0000F45A FF FF FF FF FF FF FF  
   3898 0000F461 FF FF FF FF FF FF FF  
   3898 0000F468 FF FF FF FF FF FF FF  
   3898 0000F46F FF FF FF FF FF FF FF  
   3898 0000F476 FF FF FF FF FF FF FF  
   3898 0000F47D FF FF FF FF FF FF FF  
   3898 0000F484 FF FF FF FF FF FF FF  
   3898 0000F48B FF FF FF FF FF FF FF  
   3898 0000F492 FF FF FF FF FF FF FF  
   3898 0000F499 FF FF FF FF FF FF FF  
   3898 0000F4A0 FF FF FF FF FF FF FF  
   3898 0000F4A7 FF FF FF FF FF FF FF  
   3898 0000F4AE FF FF FF FF FF FF FF  
   3898 0000F4B5 FF FF FF FF FF FF FF  
   3898 0000F4BC FF FF FF FF FF FF FF  
   3898 0000F4C3 FF FF FF FF FF FF FF  
   3898 0000F4CA FF FF FF FF FF FF FF  
   3898 0000F4D1 FF FF FF FF FF FF FF  
   3898 0000F4D8 FF FF FF FF FF FF FF  
   3898 0000F4DF FF FF FF FF FF FF FF  
   3898 0000F4E6 FF FF FF FF FF FF FF  
   3898 0000F4ED FF FF FF FF FF FF FF  
   3898 0000F4F4 FF FF FF FF FF FF FF  
   3898 0000F4FB FF FF FF FF FF FF FF  
   3898 0000F502 FF FF FF FF FF FF FF  
   3898 0000F509 FF FF FF FF FF FF FF  
   3898 0000F510 FF FF FF FF FF FF FF  
   3898 0000F517 FF FF FF FF FF FF FF  
   3898 0000F51E FF FF FF FF FF FF FF  
   3898 0000F525 FF FF FF FF FF FF FF  
   3898 0000F52C FF FF FF FF FF FF FF  
   3898 0000F533 FF FF FF FF FF FF FF  
   3898 0000F53A FF FF FF FF FF FF FF  
   3898 0000F541 FF FF FF FF FF FF FF  
   3898 0000F548 FF FF FF FF FF FF FF  
   3898 0000F54F FF FF FF FF FF FF FF  
   3898 0000F556 FF FF FF FF FF FF FF  
   3898 0000F55D FF FF FF FF FF FF FF  
   3898 0000F564 FF FF FF FF FF FF FF  
   3898 0000F56B FF FF FF FF FF FF FF  
   3898 0000F572 FF FF FF FF FF FF FF  
   3898 0000F579 FF FF FF FF FF FF FF  
   3898 0000F580 FF FF FF FF FF FF FF  
   3898 0000F587 FF FF FF FF FF FF FF  
   3898 0000F58E FF FF FF FF FF FF FF  
   3898 0000F595 FF FF FF FF FF FF FF  
   3898 0000F59C FF FF FF FF FF FF FF  
   3898 0000F5A3 FF FF FF FF FF FF FF  
   3898 0000F5AA FF FF FF FF FF FF FF  
   3898 0000F5B1 FF FF FF FF FF FF FF  
   3898 0000F5B8 FF FF FF FF FF FF FF  
   3898 0000F5BF FF FF FF FF FF FF FF  
   3898 0000F5C6 FF FF FF FF FF FF FF  
   3898 0000F5CD FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 85
noc_boot11.a
   3898 0000F5D4 FF FF FF FF FF FF FF  
   3898 0000F5DB FF FF FF FF FF FF FF  
   3898 0000F5E2 FF FF FF FF FF FF FF  
   3898 0000F5E9 FF FF FF FF FF FF FF  
   3898 0000F5F0 FF FF FF FF FF FF FF  
   3898 0000F5F7 FF FF FF FF FF FF FF  
   3898 0000F5FE FF FF FF FF FF FF FF  
   3898 0000F605 FF FF FF FF FF FF FF  
   3898 0000F60C FF FF FF FF FF FF FF  
   3898 0000F613 FF FF FF FF FF FF FF  
   3898 0000F61A FF FF FF FF FF FF FF  
   3898 0000F621 FF FF FF FF FF FF FF  
   3898 0000F628 FF FF FF FF FF FF FF  
   3898 0000F62F FF FF FF FF FF FF FF  
   3898 0000F636 FF FF FF FF FF FF FF  
   3898 0000F63D FF FF FF FF FF FF FF  
   3898 0000F644 FF FF FF FF FF FF FF  
   3898 0000F64B FF FF FF FF FF FF FF  
   3898 0000F652 FF FF FF FF FF FF FF  
   3898 0000F659 FF FF FF FF FF FF FF  
   3898 0000F660 FF FF FF FF FF FF FF  
   3898 0000F667 FF FF FF FF FF FF FF  
   3898 0000F66E FF FF FF FF FF FF FF  
   3898 0000F675 FF FF FF FF FF FF FF  
   3898 0000F67C FF FF FF FF FF FF FF  
   3898 0000F683 FF FF FF FF FF FF FF  
   3898 0000F68A FF FF FF FF FF FF FF  
   3898 0000F691 FF FF FF FF FF FF FF  
   3898 0000F698 FF FF FF FF FF FF FF  
   3898 0000F69F FF FF FF FF FF FF FF  
   3898 0000F6A6 FF FF FF FF FF FF FF  
   3898 0000F6AD FF FF FF FF FF FF FF  
   3898 0000F6B4 FF FF FF FF FF FF FF  
   3898 0000F6BB FF FF FF FF FF FF FF  
   3898 0000F6C2 FF FF FF FF FF FF FF  
   3898 0000F6C9 FF FF FF FF FF FF FF  
   3898 0000F6D0 FF FF FF FF FF FF FF  
   3898 0000F6D7 FF FF FF FF FF FF FF  
   3898 0000F6DE FF FF FF FF FF FF FF  
   3898 0000F6E5 FF FF FF FF FF FF FF  
   3898 0000F6EC FF FF FF FF FF FF FF  
   3898 0000F6F3 FF FF FF FF FF FF FF  
   3898 0000F6FA FF FF FF FF FF FF FF  
   3898 0000F701 FF FF FF FF FF FF FF  
   3898 0000F708 FF FF FF FF FF FF FF  
   3898 0000F70F FF FF FF FF FF FF FF  
   3898 0000F716 FF FF FF FF FF FF FF  
   3898 0000F71D FF FF FF FF FF FF FF  
   3898 0000F724 FF FF FF FF FF FF FF  
   3898 0000F72B FF FF FF FF FF FF FF  
   3898 0000F732 FF FF FF FF FF FF FF  
   3898 0000F739 FF FF FF FF FF FF FF  
   3898 0000F740 FF FF FF FF FF FF FF  
   3898 0000F747 FF FF FF FF FF FF FF  
   3898 0000F74E FF FF FF FF FF FF FF  
   3898 0000F755 FF FF FF FF FF FF FF  
   3898 0000F75C FF FF FF FF FF FF FF  
   3898 0000F763 FF FF FF FF FF FF FF  
   3898 0000F76A FF FF FF FF FF FF FF  
   3898 0000F771 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 86
noc_boot11.a
   3898 0000F778 FF FF FF FF FF FF FF  
   3898 0000F77F FF FF FF FF FF FF FF  
   3898 0000F786 FF FF FF FF FF FF FF  
   3898 0000F78D FF FF FF FF FF FF FF  
   3898 0000F794 FF FF FF FF FF FF FF  
   3898 0000F79B FF FF FF FF FF FF FF  
   3898 0000F7A2 FF FF FF FF FF FF FF  
   3898 0000F7A9 FF FF FF FF FF FF FF  
   3898 0000F7B0 FF FF FF FF FF FF FF  
   3898 0000F7B7 FF FF FF FF FF FF FF  
   3898 0000F7BE FF FF FF FF FF FF FF  
   3898 0000F7C5 FF FF FF FF FF FF FF  
   3898 0000F7CC FF FF FF FF FF FF FF  
   3898 0000F7D3 FF FF FF FF FF FF FF  
   3898 0000F7DA FF FF FF FF FF FF FF  
   3898 0000F7E1 FF FF FF FF FF FF FF  
   3898 0000F7E8 FF FF FF FF FF FF FF  
   3898 0000F7EF FF FF FF FF FF FF FF  
   3898 0000F7F6 FF FF FF FF FF FF FF  
   3898 0000F7FD FF FF FF FF FF FF FF  
   3898 0000F804 FF FF FF FF FF FF FF  
   3898 0000F80B FF FF FF FF FF FF FF  
   3898 0000F812 FF FF FF FF FF FF FF  
   3898 0000F819 FF FF FF FF FF FF FF  
   3898 0000F820 FF FF FF FF FF FF FF  
   3898 0000F827 FF FF FF FF FF FF FF  
   3898 0000F82E FF FF FF FF FF FF FF  
   3898 0000F835 FF FF FF FF FF FF FF  
   3898 0000F83C FF FF FF FF FF FF FF  
   3898 0000F843 FF FF FF FF FF FF FF  
   3898 0000F84A FF FF FF FF FF FF FF  
   3898 0000F851 FF FF FF FF FF FF FF  
   3898 0000F858 FF FF FF FF FF FF FF  
   3898 0000F85F FF FF FF FF FF FF FF  
   3898 0000F866 FF FF FF FF FF FF FF  
   3898 0000F86D FF FF FF FF FF FF FF  
   3898 0000F874 FF FF FF FF FF FF FF  
   3898 0000F87B FF FF FF FF FF FF FF  
   3898 0000F882 FF FF FF FF FF FF FF  
   3898 0000F889 FF FF FF FF FF FF FF  
   3898 0000F890 FF FF FF FF FF FF FF  
   3898 0000F897 FF FF FF FF FF FF FF  
   3898 0000F89E FF FF FF FF FF FF FF  
   3898 0000F8A5 FF FF FF FF FF FF FF  
   3898 0000F8AC FF FF FF FF FF FF FF  
   3898 0000F8B3 FF FF FF FF FF FF FF  
   3898 0000F8BA FF FF FF FF FF FF FF  
   3898 0000F8C1 FF FF FF FF FF FF FF  
   3898 0000F8C8 FF FF FF FF FF FF FF  
   3898 0000F8CF FF FF FF FF FF FF FF  
   3898 0000F8D6 FF FF FF FF FF FF FF  
   3898 0000F8DD FF FF FF FF FF FF FF  
   3898 0000F8E4 FF FF FF FF FF FF FF  
   3898 0000F8EB FF FF FF FF FF FF FF  
   3898 0000F8F2 FF FF FF FF FF FF FF  
   3898 0000F8F9 FF FF FF FF FF FF FF  
   3898 0000F900 FF FF FF FF FF FF FF  
   3898 0000F907 FF FF FF FF FF FF FF  
   3898 0000F90E FF FF FF FF FF FF FF  
   3898 0000F915 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 87
noc_boot11.a
   3898 0000F91C FF FF FF FF FF FF FF  
   3898 0000F923 FF FF FF FF FF FF FF  
   3898 0000F92A FF FF FF FF FF FF FF  
   3898 0000F931 FF FF FF FF FF FF FF  
   3898 0000F938 FF FF FF FF FF FF FF  
   3898 0000F93F FF FF FF FF FF FF FF  
   3898 0000F946 FF FF FF FF FF FF FF  
   3898 0000F94D FF FF FF FF FF FF FF  
   3898 0000F954 FF FF FF FF FF FF FF  
   3898 0000F95B FF FF FF FF FF FF FF  
   3898 0000F962 FF FF FF FF FF FF FF  
   3898 0000F969 FF FF FF FF FF FF FF  
   3898 0000F970 FF FF FF FF FF FF FF  
   3898 0000F977 FF FF FF FF FF FF FF  
   3898 0000F97E FF FF FF FF FF FF FF  
   3898 0000F985 FF FF FF FF FF FF FF  
   3898 0000F98C FF FF FF FF FF FF FF  
   3898 0000F993 FF FF FF FF FF FF FF  
   3898 0000F99A FF FF FF FF FF FF FF  
   3898 0000F9A1 FF FF FF FF FF FF FF  
   3898 0000F9A8 FF FF FF FF FF FF FF  
   3898 0000F9AF FF FF FF FF FF FF FF  
   3898 0000F9B6 FF FF FF FF FF FF FF  
   3898 0000F9BD FF FF FF FF FF FF FF  
   3898 0000F9C4 FF FF FF FF FF FF FF  
   3898 0000F9CB FF FF FF FF FF FF FF  
   3898 0000F9D2 FF FF FF FF FF FF FF  
   3898 0000F9D9 FF FF FF FF FF FF FF  
   3898 0000F9E0 FF FF FF FF FF FF FF  
   3898 0000F9E7 FF FF FF FF FF FF FF  
   3898 0000F9EE FF FF FF FF FF FF FF  
   3898 0000F9F5 FF FF FF FF FF FF FF  
   3898 0000F9FC FF FF FF FF FF FF FF  
   3898 0000FA03 FF FF FF FF FF FF FF  
   3898 0000FA0A FF FF FF FF FF FF FF  
   3898 0000FA11 FF FF FF FF FF FF FF  
   3898 0000FA18 FF FF FF FF FF FF FF  
   3898 0000FA1F FF FF FF FF FF FF FF  
   3898 0000FA26 FF FF FF FF FF FF FF  
   3898 0000FA2D FF FF FF FF FF FF FF  
   3898 0000FA34 FF FF FF FF FF FF FF  
   3898 0000FA3B FF FF FF FF FF FF FF  
   3898 0000FA42 FF FF FF FF FF FF FF  
   3898 0000FA49 FF FF FF FF FF FF FF  
   3898 0000FA50 FF FF FF FF FF FF FF  
   3898 0000FA57 FF FF FF FF FF FF FF  
   3898 0000FA5E FF FF FF FF FF FF FF  
   3898 0000FA65 FF FF FF FF FF FF FF  
   3898 0000FA6C FF FF FF FF FF FF FF  
   3898 0000FA73 FF FF FF FF FF FF FF  
   3898 0000FA7A FF FF FF FF FF FF FF  
   3898 0000FA81 FF FF FF FF FF FF FF  
   3898 0000FA88 FF FF FF FF FF FF FF  
   3898 0000FA8F FF FF FF FF FF FF FF  
   3898 0000FA96 FF FF FF FF FF FF FF  
   3898 0000FA9D FF FF FF FF FF FF FF  
   3898 0000FAA4 FF FF FF FF FF FF FF  
   3898 0000FAAB FF FF FF FF FF FF FF  
   3898 0000FAB2 FF FF FF FF FF FF FF  
   3898 0000FAB9 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 88
noc_boot11.a
   3898 0000FAC0 FF FF FF FF FF FF FF  
   3898 0000FAC7 FF FF FF FF FF FF FF  
   3898 0000FACE FF FF FF FF FF FF FF  
   3898 0000FAD5 FF FF FF FF FF FF FF  
   3898 0000FADC FF FF FF FF FF FF FF  
   3898 0000FAE3 FF FF FF FF FF FF FF  
   3898 0000FAEA FF FF FF FF FF FF FF  
   3898 0000FAF1 FF FF FF FF FF FF FF  
   3898 0000FAF8 FF FF FF FF FF FF FF  
   3898 0000FAFF FF FF FF FF FF FF FF  
   3898 0000FB06 FF FF FF FF FF FF FF  
   3898 0000FB0D FF FF FF FF FF FF FF  
   3898 0000FB14 FF FF FF FF FF FF FF  
   3898 0000FB1B FF FF FF FF FF FF FF  
   3898 0000FB22 FF FF FF FF FF FF FF  
   3898 0000FB29 FF FF FF FF FF FF FF  
   3898 0000FB30 FF FF FF FF FF FF FF  
   3898 0000FB37 FF FF FF FF FF FF FF  
   3898 0000FB3E FF FF FF FF FF FF FF  
   3898 0000FB45 FF FF FF FF FF FF FF  
   3898 0000FB4C FF FF FF FF FF FF FF  
   3898 0000FB53 FF FF FF FF FF FF FF  
   3898 0000FB5A FF FF FF FF FF FF FF  
   3898 0000FB61 FF FF FF FF FF FF FF  
   3898 0000FB68 FF FF FF FF FF FF FF  
   3898 0000FB6F FF FF FF FF FF FF FF  
   3898 0000FB76 FF FF FF FF FF FF FF  
   3898 0000FB7D FF FF FF FF FF FF FF  
   3898 0000FB84 FF FF FF FF FF FF FF  
   3898 0000FB8B FF FF FF FF FF FF FF  
   3898 0000FB92 FF FF FF FF FF FF FF  
   3898 0000FB99 FF FF FF FF FF FF FF  
   3898 0000FBA0 FF FF FF FF FF FF FF  
   3898 0000FBA7 FF FF FF FF FF FF FF  
   3898 0000FBAE FF FF FF FF FF FF FF  
   3898 0000FBB5 FF FF FF FF FF FF FF  
   3898 0000FBBC FF FF FF FF FF FF FF  
   3898 0000FBC3 FF FF FF FF FF FF FF  
   3898 0000FBCA FF FF FF FF FF FF FF  
   3898 0000FBD1 FF FF FF FF FF FF FF  
   3898 0000FBD8 FF FF FF FF FF FF FF  
   3898 0000FBDF FF FF FF FF FF FF FF  
   3898 0000FBE6 FF FF FF FF FF FF FF  
   3898 0000FBED FF FF FF FF FF FF FF  
   3898 0000FBF4 FF FF FF FF FF FF FF  
   3898 0000FBFB FF FF FF FF FF FF FF  
   3898 0000FC02 FF FF FF FF FF FF FF  
   3898 0000FC09 FF FF FF FF FF FF FF  
   3898 0000FC10 FF FF FF FF FF FF FF  
   3898 0000FC17 FF FF FF FF FF FF FF  
   3898 0000FC1E FF FF FF FF FF FF FF  
   3898 0000FC25 FF FF FF FF FF FF FF  
   3898 0000FC2C FF FF FF FF FF FF FF  
   3898 0000FC33 FF FF FF FF FF FF FF  
   3898 0000FC3A FF FF FF FF FF FF FF  
   3898 0000FC41 FF FF FF FF FF FF FF  
   3898 0000FC48 FF FF FF FF FF FF FF  
   3898 0000FC4F FF FF FF FF FF FF FF  
   3898 0000FC56 FF FF FF FF FF FF FF  
   3898 0000FC5D FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 89
noc_boot11.a
   3898 0000FC64 FF FF FF FF FF FF FF  
   3898 0000FC6B FF FF FF FF FF FF FF  
   3898 0000FC72 FF FF FF FF FF FF FF  
   3898 0000FC79 FF FF FF FF FF FF FF  
   3898 0000FC80 FF FF FF FF FF FF FF  
   3898 0000FC87 FF FF FF FF FF FF FF  
   3898 0000FC8E FF FF FF FF FF FF FF  
   3898 0000FC95 FF FF FF FF FF FF FF  
   3898 0000FC9C FF FF FF FF FF FF FF  
   3898 0000FCA3 FF FF FF FF FF FF FF  
   3898 0000FCAA FF FF FF FF FF FF FF  
   3898 0000FCB1 FF FF FF FF FF FF FF  
   3898 0000FCB8 FF FF FF FF FF FF FF  
   3898 0000FCBF FF FF FF FF FF FF FF  
   3898 0000FCC6 FF FF FF FF FF FF FF  
   3898 0000FCCD FF FF FF FF FF FF FF  
   3898 0000FCD4 FF FF FF FF FF FF FF  
   3898 0000FCDB FF FF FF FF FF FF FF  
   3898 0000FCE2 FF FF FF FF FF FF FF  
   3898 0000FCE9 FF FF FF FF FF FF FF  
   3898 0000FCF0 FF FF FF FF FF FF FF  
   3898 0000FCF7 FF FF FF FF FF FF FF  
   3898 0000FCFE FF FF FF FF FF FF FF  
   3898 0000FD05 FF FF FF FF FF FF FF  
   3898 0000FD0C FF FF FF FF FF FF FF  
   3898 0000FD13 FF FF FF FF FF FF FF  
   3898 0000FD1A FF FF FF FF FF FF FF  
   3898 0000FD21 FF FF FF FF FF FF FF  
   3898 0000FD28 FF FF FF FF FF FF FF  
   3898 0000FD2F FF FF FF FF FF FF FF  
   3898 0000FD36 FF FF FF FF FF FF FF  
   3898 0000FD3D FF FF FF FF FF FF FF  
   3898 0000FD44 FF FF FF FF FF FF FF  
   3898 0000FD4B FF FF FF FF FF FF FF  
   3898 0000FD52 FF FF FF FF FF FF FF  
   3898 0000FD59 FF FF FF FF FF FF FF  
   3898 0000FD60 FF FF FF FF FF FF FF  
   3898 0000FD67 FF FF FF FF FF FF FF  
   3898 0000FD6E FF FF FF FF FF FF FF  
   3898 0000FD75 FF FF FF FF FF FF FF  
   3898 0000FD7C FF FF FF FF FF FF FF  
   3898 0000FD83 FF FF FF FF FF FF FF  
   3898 0000FD8A FF FF FF FF FF FF FF  
   3898 0000FD91 FF FF FF FF FF FF FF  
   3898 0000FD98 FF FF FF FF FF FF FF  
   3898 0000FD9F FF FF FF FF FF FF FF  
   3898 0000FDA6 FF FF FF FF FF FF FF  
   3898 0000FDAD FF FF FF FF FF FF FF  
   3898 0000FDB4 FF FF FF FF FF FF FF  
   3898 0000FDBB FF FF FF FF FF FF FF  
   3898 0000FDC2 FF FF FF FF FF FF FF  
   3898 0000FDC9 FF FF FF FF FF FF FF  
   3898 0000FDD0 FF FF FF FF FF FF FF  
   3898 0000FDD7 FF FF FF FF FF FF FF  
   3898 0000FDDE FF FF FF FF FF FF FF  
   3898 0000FDE5 FF FF FF FF FF FF FF  
   3898 0000FDEC FF FF FF FF FF FF FF  
   3898 0000FDF3 FF FF FF FF FF FF FF  
   3898 0000FDFA FF FF FF FF FF FF FF  
   3898 0000FE01 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 90
noc_boot11.a
   3898 0000FE08 FF FF FF FF FF FF FF  
   3898 0000FE0F FF FF FF FF FF FF FF  
   3898 0000FE16 FF FF FF FF FF FF FF  
   3898 0000FE1D FF FF FF FF FF FF FF  
   3898 0000FE24 FF FF FF FF FF FF FF  
   3898 0000FE2B FF FF FF FF FF FF FF  
   3898 0000FE32 FF FF FF FF FF FF FF  
   3898 0000FE39 FF FF FF FF FF FF FF  
   3898 0000FE40 FF FF FF FF FF FF FF  
   3898 0000FE47 FF FF FF FF FF FF FF  
   3898 0000FE4E FF FF FF FF FF FF FF  
   3898 0000FE55 FF FF FF FF FF FF FF  
   3898 0000FE5C FF FF FF FF FF FF FF  
   3898 0000FE63 FF FF FF FF FF FF FF  
   3898 0000FE6A FF FF FF FF FF FF FF  
   3898 0000FE71 FF FF FF FF FF FF FF  
   3898 0000FE78 FF FF FF FF FF FF FF  
   3898 0000FE7F FF FF FF FF FF FF FF  
   3898 0000FE86 FF FF FF FF FF FF FF  
   3898 0000FE8D FF FF FF FF FF FF FF  
   3898 0000FE94 FF FF FF FF FF FF FF  
   3898 0000FE9B FF FF FF FF FF FF FF  
   3898 0000FEA2 FF FF FF FF FF FF FF  
   3898 0000FEA9 FF FF FF FF FF FF FF  
   3898 0000FEB0 FF FF FF FF FF FF FF  
   3898 0000FEB7 FF FF FF FF FF FF FF  
   3898 0000FEBE FF FF FF FF FF FF FF  
   3898 0000FEC5 FF FF FF FF FF FF FF  
   3898 0000FECC FF FF FF FF FF FF FF  
   3898 0000FED3 FF FF FF FF FF FF FF  
   3898 0000FEDA FF FF FF FF FF FF FF  
   3898 0000FEE1 FF FF FF FF FF FF FF  
   3898 0000FEE8 FF FF FF FF FF FF FF  
   3898 0000FEEF FF FF FF FF FF FF FF  
   3898 0000FEF6 FF FF FF FF FF FF FF  
   3898 0000FEFD FF FF FF FF FF FF FF  
   3898 0000FF04 FF FF FF FF FF FF FF  
   3898 0000FF0B FF FF FF FF FF FF FF  
   3898 0000FF12 FF FF FF FF FF FF FF  
   3898 0000FF19 FF FF FF FF FF FF FF  
   3898 0000FF20 FF FF FF FF FF FF FF  
   3898 0000FF27 FF FF FF FF FF FF FF  
   3898 0000FF2E FF FF FF FF FF FF FF  
   3898 0000FF35 FF FF FF FF FF FF FF  
   3898 0000FF3C FF FF FF FF FF FF FF  
   3898 0000FF43 FF FF FF FF FF FF FF  
   3898 0000FF4A FF FF FF FF FF FF FF  
   3898 0000FF51 FF FF FF FF FF FF FF  
   3898 0000FF58 FF FF FF FF FF FF FF  
   3898 0000FF5F FF FF FF FF FF FF FF  
   3898 0000FF66 FF FF FF FF FF FF FF  
   3898 0000FF6D FF FF FF FF FF FF FF  
   3898 0000FF74 FF FF FF FF FF FF FF  
   3898 0000FF7B FF FF FF FF FF FF FF  
   3898 0000FF82 FF FF FF FF FF FF FF  
   3898 0000FF89 FF FF FF FF FF FF FF  
   3898 0000FF90 FF FF FF FF FF FF FF  
   3898 0000FF97 FF FF FF FF FF FF FF  
   3898 0000FF9E FF FF FF FF FF FF FF  
   3898 0000FFA5 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 15 19:02:50 2017     Page 91
noc_boot11.a
   3898 0000FFAC FF FF FF FF FF FF FF  
   3898 0000FFB3 FF FF FF FF FF FF FF  
   3898 0000FFBA FF FF FF FF FF FF FF  
   3898 0000FFC1 FF FF FF FF FF FF FF  
   3898 0000FFC8 FF FF FF FF FF FF FF  
   3898 0000FFCF FF FF FF FF FF FF FF  
   3898 0000FFD6 FF FF FF FF FF FF FF  
   3898 0000FFDD FF FF FF FF FF FF FF  
   3898 0000FFE4 FF FF FF FF FF FF FF  
   3898 0000FFEB FF FF FF FF FF FF FF  
   3898 0000FFF2 FF FF FF FF FF FF FF  
   3898 0000FFF9 FF FF FF FF FF        
   3899 0000FFFE 00 D8                   		dw		start
