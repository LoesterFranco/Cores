Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 1
noc_boot11.asm


Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 1
noc_boot11.asm


Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 1
noc_boot11.asm


Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 1
noc_boot11.asm


Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 1
noc_boot11.asm


Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 1
noc_boot11.asm


Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 1
noc_boot11.asm


Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 1
noc_boot11.asm


Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 1
noc_boot11.asm


Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 1
noc_boot11.asm


Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 1
noc_boot11.asm


Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 1
noc_boot11.asm


Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 1
noc_boot11.asm

                                        ; ============================================================================
                                        ;        __
                                        ;   \\__/ o\    (C) 2017  Robert Finch, Waterloo
                                        ;    \  __ /    All rights reserved.
                                        ;     \/_//     robfinch<remove>@finitron.ca
                                        ;       ||
                                        ;  
                                        ;
                                        ; This source file is free software: you can redistribute it and/or modify 
                                        ; it under the terms of the GNU Lesser General Public License as published 
                                        ; by the Free Software Foundation, either version 3 of the License, or     
                                        ; (at your option) any later version.                                      
                                        ;                                                                          
                                        ; This source file is distributed in the hope that it will be useful,      
                                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                                        ; GNU General Public License for more details.                             
                                        ;                                                                          
                                        ; You should have received a copy of the GNU General Public License        
                                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                                        ;                                    
                                        ;                                      
                                        ; This boot rom for the special node $11. This node is responsible for
                                        ; bringing the system up, and controls the text display and leds.
                                        ; ============================================================================
                                        ;
     27 = 0D                            CR	= 13
     28 = 0A                            LF	= 10
     29 = 08                            CTRLH	equ		8
                                        
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 1
MessageTypes.asm

                                        
     32 = 01                            MT_RST		equ		1
     33 = 02                            MT_RST_ACK	equ		2
     34 = 03                            MT_STOP		equ		3
     35 = 04                            MT_KEYSTROKE			equ	4
     36 = 05                            MT_SET_INPUT_FOCUS		equ	5
     37 = 06                            MT_BUTTON_STATUS		equ	6
     38 = 0A                            MT_START_BASIC_LOAD		equ	10
     39 = 0B                            MT_LOAD_BASIC_CHAR		equ	11
     40 = 0C                            MT_RUN_BASIC_PROG		equ	12
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 1
noc_boot11.asm


                                      
                                        
                                        		bss
                                        		org		0x0030
     46 00000030                        txtWidth	db	0		; BIOS var =60
     47 00000031                        txtHeight	db	0		; BIOS var =27
     48 00000032                        cursx	db		0		; cursor x position
     49 00000033                        cursy	db		0		; cursor y position
     50 00000034                        pos		dw		0		; text screen position
                                        		org		0x0038
     52 00000038                        charToPrint		dw		0
     53 0000003C                        fgColor			db		0
     54 0000003D                        bkColor			db		0
     55 0000003E                        cursFlash		db		0	; flash the cursor ?
     56 0000003F                         				db		0	; padding
     57 00000040                        NormAttr		dw		0
                                        
     59 00000044                        txBuf	fill.b	16,0
     60 00000054                        rxBuf	fill.b	16,0
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 2
noc_boot11.asm
                                        
     61 = 2000                          TXTSCR		equ	$2000
     62 = 000000000000B100                              TXTCTRL		equ	$B100
     63 = 000000000000B200                              LEDS		equ	$B200
     64 = 000000000000B000                              ROUTER		equ	$B000
     65 = 10                            RTR_RXSTAT	equ	$10
     66 = 12                            RTR_TXSTAT	equ	$12
                                        
     68 = 0F                            MSG_DST		equ	15
     69 = 0E                            MSG_SRC		equ	14
     70 = 07                            MSG_TYPE	equ	7
                                        
     72 = 00                            ROUTER_TRB	equ	0
                                        
                                        		.code
                                        		cpu		Butterfly16
                                        		.org	$C000
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 1
tb.asm

                                        ;****************************************************************;
                                        ;                                                                ;
                                        ;		Tiny BASIC for the Finitron Butterfly                    ;
                                        ;                                                                ;
                                        ; Derived from a 68000 derivative of Palo Alto Tiny BASIC as     ;
                                        ; published in the May 1976 issue of Dr. Dobb's Journal.         ;
                                        ; Adapted to the 68000 by:                                       ;
                                        ;	Gordon brndly						                         ;
                                        ;	12147 - 51 Street					                         ;
                                        ;	Edmonton AB  T5W 3G8					                     ;
                                        ;	Canada							                             ;
                                        ;	(updated mailing address for 1996)			                 ;
                                        ;                                                                ;
                                        ; Adapted to the Butterfly by:                                    ;
                                        ;    Robert Finch                                                ;
                                        ;    Ontario, Canada                                             ;
                                        ;	 rob<remove>@finitron.ca                                     ;  
                                        ;****************************************************************;
                                        ;    Copyright (C) 2005 by Robert Finch. This program may be	 ;
                                        ;    freely distributed for personal use only. All commercial	 ;
                                        ;		       rights are reserved.			                     ;
                                        ;****************************************************************;
                                        ;
                                        ; Register Usage
                                        ; r8 = text pointer (global usage)
                                        ; r3,r4 = inputs parameters to subroutines
                                        ; r2 = return value
                                        ;
                                        ;* Vers. 1.0  1984/7/17	- Original version by Gordon brndly
                                        ;*	1.1  1984/12/9	- Addition of '0x' print term by Marvin Lipford
                                        ;*	1.2  1985/4/9	- Bug fix in multiply routine by Rick Murray
                                        
                                        ;	OPT	FRS,BRS 	forward ref.'s & brnches default to short
                                        
                                        ;XMIT_FULL		equ	0x40		; the transmit buffer is full
                                        ;DATA_PRESENT	equ	0x08		; there is data preset at the serial port bc_uart3
    113 = 01                            DATA_PRESENT	equ	0x01		; there is data preset at the serial port bc_uart3
    114 = 20                            XMIT_NOT_FULL	equ	0x20
                                        
    116 = 00000000FFFFDC40                              TS_TIMER	equ		0xFFFFDC40		; system time slice timer
    117 = 00000000FFFFDC50                              KBD			equ		0xFFFFDC50
                                        
    119 = 00000000FFFFDCA0                              RAND		equ		0xFFFFDCA0
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 2
tb.asm
    120 = 00000000FFFFD800                              VIC			equ		0xFFFFD800
                                        
    122 = 2000                          VIDEORAM	equ		0x00002000
                                        
                                        ; BOOT ROM routines
                                        
    126 = 0000000FFFFFF804                              getSerial	equ		0xFFFFFF804	; get a serial port character
    127 = 0000000FFFFFF808                              peekSerial	equ		0xFFFFFF808	; get a serial port character
    128 = 0000000FFFFFF80C                              putSerial	equ		0xFFFFFF80C	; put a character to serial port
    129 = 0000000FFFFFF82C                              clearScreen	equ		0xFFFFFF82C	; clear the screen
    130 = 0000000FFFFFF840                              getKbdCharWait	equ	0xFFFFFF840
    131 = 0000000FFFFFF844                              getKbdChar		equ	0xFFFFFF844
                                        
    133 = 20                            warmStart   equ     0x20
    134 = 24                            usrJmp      equ     0x24
                                        
    136 = 0D                            CR		equ	0x0D		; ASCII equates
    137 = 0A                            LF		equ	0x0A
    138 = 09                            TAB		equ	0x09
    139 = 03                            CTRLC	equ	0x03
    140 = 08                            CTRLH	equ	0x08
    141 = 13                            CTRLS	equ	0x13
    142 = 18                            CTRLX	equ	0x18
                                        
    144 = 50                            BUFLEN	equ	80	;	length of keyboard input buffer
                                        
                                        	code
                                        ;	org	0xC000	;
                                        ;
                                        ; Standard jump table. You can change these addresses if you are
                                        ; customizing this interpreter for a different environment.
                                        ;
    154 0000C000 0D AE                  START	jmp	CSTART	;	Cold Start entry point
    155 0000C002 45 AE                  GOWARM	jmp	WSTART	;	Warm Start entry point
    156 0000C004 85 40 0F AE            GOOUT	jmp	OUTC	;	Jump to character-out routine
    157 0000C008 85 40 0E AE            GOIN	jmp	INC		;Jump to character-in routine
    158 0000C00C 88 40 0C AE            GOAUXO	jmp	AUXOUT	;	Jump to auxiliary-out routine
    159 0000C010 8A 40 07 AE            GOAUXI	jmp	AUXIN	;	Jump to auxiliary-in routine
    160 0000C014 8D 40 0D AE            GOBYE	jmp	BYEBYE	;	Jump to monitor, DOS, etc.
                                        ;
                                        ; Modifiable system constants:
                                        ;
    164 0000C018 00 02                  TXTBGN	dw	0x0200		;beginning of program memory
    165 0000C01A 00 1E                  ENDMEM	dw	0x1E00	;	end of available memory
                                        ;
                                        ; The main interpreter starts here:
                                        ;
                                        ; Usage
                                        ; r1 = temp
                                        ; r8 = text buffer pointer
                                        ; r12 = end of text in text buffer
                                        ;
    174 0000C01C                        CSTART
                                        	; First save off the link register and OS sp value
    176 0000C01C FC 6E                   	sub		sp,sp,#4
    177 0000C01E E1 DF                   	sw		lr,[sp]
    178 0000C020 08 40 05 DE             	sw		sp,OSSP
    179 0000C024 01 4C 0B FE             	lw		sp,ENDMEM	; initialize stack pointer
    180 0000C028 E1 DF                   	sw      lr,[sp]    ; save off return address
                                        ;	lw		r1,#TXT_WIDTH
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 3
tb.asm
                                        ;	sb		r1,txtWidth
                                        ;	lw		r1,#TXT_HEIGHT
                                        ;	sb		r1,txtHeight
    185 0000C02A 03 40 02 C0             	sb		r0,cursx	; set screen output
    186 0000C02E 03 40 03 C0             	sb		r0,cursy
    187 0000C032 03 40 0C C0             	sb		r0,cursFlash
    188 0000C036 03 40 05 D0             	sw		r0,pos
    189 0000C03A F2 4B 00 12             	lw		r2,#0xBF20	; black chars, yellow background
    190 0000C03E 03 40 09 D2             	sw		r2,charToPrint
    191 0000C042 BF 49 02 AF             	call	clearScreen
    192 0000C046 1D 4D 0C 11             	lea		r1,msgInit	;	tell who we are
    193 0000C04A 82 40 0D AF             	call	PRMESGAUX
    194 0000C04E 1D 4D 0C 11             	lea		r1,msgInit	;	tell who we are
    195 0000C052 81 40 0A AF             	call	PRMESG
    196 0000C056 01 4C 09 F1             	lw		r1,TXTBGN	;	init. end-of-program pointer
    197 0000C05A 09 40 07 D1             	sw		r1,TXTUNF
    198 0000C05E 01 4C 0B F1             	lw		r1,ENDMEM	;	get address of end of memory
    199 0000C062 80 4F 10 11             	sub		r1,r1,#2048	; 	reserve 2K for the stack
    200 0000C066 0A 40 01 D1             	sw		r1,STKBOT
    201 0000C06A 00 4E 10 11             	sub     r1,r1,#8192 ;   1000 vars
    202 0000C06E 09 40 09 D1             	sw      r1,VARBGN
    203 0000C072 15 40 0E AF             	call    clearVars   ; clear the variable area
    204 0000C076 09 40 09 F1             	lw      r1,VARBGN   ; calculate number of bytes free
    205 0000C07A 09 40 07 F3             	lw		r3,TXTUNF
    206 0000C07E 32 21                   	sub     r1,r3
    207 0000C080 00 12                   	lw		r2,#0
    208 0000C082 6F 40 09 AF             	call	PRTNUM
    209 0000C086 28 4D 0A 11             	lea		r1,msgBytesFree
    210 0000C08A 7F 40 0E AF             	call	PRMESG
    211 0000C08E                        WSTART
    212 0000C08E 08 40 0D D0             	sw		r0,LOPVAR   ; initialize internal variables
    213 0000C092 08 40 09 D0             	sw		r0,STKGOS
    214 0000C096 08 40 07 D0             	sw		r0,CURRNT	;	current line number pointer = 0
    215 0000C09A 01 4C 0B FE             	lw		sp,ENDMEM	;	init S.P. again, just in case
    216 0000C09E 29 4D 08 11             	lea		r1,msgReady	;	display "Ready"
    217 0000C0A2 7F 40 02 AF             	call	PRMESG
    218 0000C0A6                        ST3
    219 0000C0A6 03 40 0E 11             	lw		r1,#'>'		; Prompt with a '>' and
    220 0000C0AA 5E 40 09 AF             	call	GETLN		; read a line.
    221 0000C0AE 7B 40 02 AF             	call	TOUPBUF 	; convert to upper case
    222 0000C0B2 80 1C                   	lw		r12,r8		; save pointer to end of line
    223 0000C0B4 0A 40 0E 18             	lea		r8,BUFFER	; point to the beginning of line
    224 0000C0B8 77 40 0E AF             	call	TSTNUM		; is there a number there?
    225 0000C0BC 79 40 0D AF             	call	IGNBLK		; skip trailing blanks
    226 0000C0C0 16 21                   	or      r1,r1       ; does line no. exist? (or nonzero?)
    227 0000C0C2 C2 A8                   	beq		DIRECT		; if not, it's a direct statement
    228 0000C0C4 00 40 11 10             	cmp		r1,#0xFFFF	; see if line no. is <= 16 bits
    229 0000C0C8 04 A6                   	bleu	ST2
    230 0000C0CA 2B 4D 06 11             	lea		r1,msgLineRange	; if not, we've overflowed
    231 0000C0CE 5B 40 0D AE             	br		ERROR
    232 0000C0D2                        ST2
                                            ; ugliness - store a character at potentially an
                                            ; odd address (unaligned).
    235 0000C0D2 10 12                   	lw		r2,r1       ; r2 = line number
    236 0000C0D4 8E C2                   	sb		r2,-2[r8]
    237 0000C0D6 A1 32                   	shr		r2,#1
    238 0000C0D8 A1 32                   	shr		r2,#1
    239 0000C0DA A1 32                   	shr		r2,#1
    240 0000C0DC A1 32                   	shr		r2,#1
    241 0000C0DE A1 32                   	shr		r2,#1
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 4
tb.asm
    242 0000C0E0 A1 32                   	shr		r2,#1
    243 0000C0E2 A1 32                   	shr		r2,#1
    244 0000C0E4 A1 32                   	shr		r2,#1
    245 0000C0E6 8F C2                   	sb		r2,-1[r8]	; store the binary line no.
    246 0000C0E8 FE 68                   	sub		r8,r8,#2
    247 0000C0EA 61 40 0D AF             	call	FNDLN		; find this line in save area
    248 0000C0EE E0 31                   	tsr		r1,sr
    249 0000C0F0 90 1D                   	lw		r13,r9		; save possible line pointer
    250 0000C0F2 F0 31                   	trs		r1,sr
    251 0000C0F4 11 A9                   	bne		ST4			; if not found, insert
                                        	; here we found the line, so we're replacing the line
                                        	; in the text area
                                        	; first step - delete the line
    255 0000C0F6 00 11                   	lw		r1,#0
    256 0000C0F8 63 40 03 AF             	call	FNDNXT		; find the next line (into r9)
    257 0000C0FC 0A A7                   	bgtu	ST6			; no more lines
    258 0000C0FE 90 11                   	lw		r1,r9		; r1 = pointer to next line
    259 0000C100 D0 12                   	lw		r2,r13		; pointer to line to be deleted
    260 0000C102 09 40 07 F3             	lw		r3,TXTUNF	; points to top of save area
    261 0000C106 63 40 07 AF             	call	MVUP		; move up to delete
    262 0000C10A 09 40 07 D2             	sw		r2,TXTUNF	; update the end pointer
                                        	; we moved the lines of text after the line being
                                        	; deleted down, so the pointer to the next line
                                        	; needs to be reset
    266 0000C10E D0 19                   	lw		r9,r13
    267 0000C110 03 AE                   	br		ST4
                                        	; here there were no more lines, so just move the
                                        	; end of text pointer down
    270 0000C112                        ST6
    271 0000C112 09 40 07 DD             	sw		r13,TXTUNF
    272 0000C116 D0 19                   	lw		r9,r13
    273 0000C118                        ST4
                                        	; here we're inserting because the line wasn't found
                                        	; or it was deleted	from the text area
    276 0000C118 C0 11                   	lw		r1,r12		; calculate the length of new line
    277 0000C11A 82 21                   	sub		r1,r8
    278 0000C11C 1D 10                   	cmp		r1,#3		; is it just a line no. & CR?
    279 0000C11E C3 B2                   	ble		ST3			; if so, it was just a delete
                                        
    281 0000C120 09 40 07 FB             	lw		r11,TXTUNF	; compute new end of text
    282 0000C124 B0 1A                   	lw		r10,r11		; r10 = old TXTUNF
    283 0000C126 10 2B                   	add		r11,r1		; r11 = new top of TXTUNF (r1=line length)
                                        
    285 0000C128 09 40 09 F1             	lw		r1,VARBGN	; see if there's enough room
    286 0000C12C 1D 2B                   	cmp		r11,r1
    287 0000C12E 04 A4                   	bltu	ST5
    288 0000C130 39 4D 01 11             	lea		r1,msgTooBig	; if not, say so
    289 0000C134 58 40 0A AE             	jmp		ERROR
                                        
                                        	; open a space in the text area
    292 0000C138                        ST5
    293 0000C138 09 40 07 DB             	sw		r11,TXTUNF	; if so, store new end position
    294 0000C13C A0 11                   	lw		r1,r10		; points to old end of text
    295 0000C13E B0 12                   	lw		r2,r11		; points to new end of text
    296 0000C140 90 13                   	lw		r3,r9       ; points to start of line after insert line
    297 0000C142 62 40 00 AF             	call	MVDOWN		; move things out of the way
                                        
                                        	; copy line into text space
    300 0000C146 80 11                   	lw		r1,r8		; set up to do the insertion; move from buffer
    301 0000C148 D0 12                   	lw		r2,r13		; to vacated space
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 5
tb.asm
    302 0000C14A C0 13                   	lw		r3,r12		; until end of buffer
    303 0000C14C 61 40 04 AF             	call	MVUP		; do it
    304 0000C150 AA BE                   	br		ST3			; go back and get another line
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** Tables *** DIRECT *** EXEC ***
                                        ;
                                        ; This section of the code tests a string against a table. When
                                        ; a match is found, control is transferred to the section of
                                        ; code according to the table.
                                        ;
                                        ; At 'EXEC', r8 should point to the string, r9 should point to
                                        ; the character table, and r10 should point to the execution
                                        ; table. At 'DIRECT', r8 should point to the string, r9 and
                                        ; r10 will be set up to point to TAB1 and TAB1_1, which are
                                        ; the tables of all direct and statement commands.
                                        ;
                                        ; A '.' in the string will terminate the test and the partial
                                        ; match will be considered as a match, e.g. 'P.', 'PR.','PRI.',
                                        ; 'PRIN.', or 'PRINT' will all match 'PRINT'.
                                        ;
                                        ; There are two tables: the character table and the execution
                                        ; table. The character table consists of any number of text items.
                                        ; Each item is a string of characters with the last character's
                                        ; high bit set to one. The execution table holds a 32-bit
                                        ; execution addresses that correspond to each entry in the
                                        ; character table.
                                        ;
                                        ; The end of the character table is a 0 byte which corresponds
                                        ; to the default routine in the execution table, which is
                                        ; executed if none of the other table items are matched.
                                        ;
                                        ; Character-matching tables:
    337 0000C152                        TAB1
    338 0000C152 4C 49 53 D4             	db	"LIS",('T'+0x80)        ; Direct commands
    339 0000C156 4C 4F 41 C4             	db	"LOA",('D'+0x80)
    340 0000C15A 4E 45 D7                	db	"NE",('W'+0x80)
    341 0000C15D 52 55 CE                	db	"RU",('N'+0x80)
    342 0000C160 53 41 56 C5             	db	"SAV",('E'+0x80)
    343 0000C164                        TAB2
    344 0000C164 4E 45 58 D4             	db	"NEX",('T'+0x80)         ; Direct / statement
    345 0000C168 4C 45 D4                	db	"LE",('T'+0x80)
    346 0000C16B 49 C6                   	db	"I",('F'+0x80)
    347 0000C16D 47 4F 54 CF             	db	"GOT",('O'+0x80)
    348 0000C171 47 4F 53 55 C2          	db	"GOSU",('B'+0x80)
    349 0000C176 52 45 54 55 52 CE       	db	"RETUR",('N'+0x80)
    350 0000C17C 52 45 CD                	db	"RE",('M'+0x80)
    351 0000C17F 46 4F D2                	db	"FO",('R'+0x80)
    352 0000C182 49 4E 50 55 D4          	db	"INPU",('T'+0x80)
    353 0000C187 50 52 49 4E D4          	db	"PRIN",('T'+0x80)
    354 0000C18C 50 4F 4B 45 D7          	db	"POKE",('W'+0x80)
    355 0000C191 50 4F 4B C5             	db	"POK",('E'+0x80)
    356 0000C195 53 54 4F D0             	db	"STO",('P'+0x80)
    357 0000C199 42 59 C5                	db	"BY",('E'+0x80)
    358 0000C19C 53 59 D3                	db	"SY",('S'+0x80)
    359 0000C19F 43 4C D3                	db	"CL",('S'+0x80)
    360 0000C1A2 43 4C D2                    db  "CL",('R'+0x80)
    361 0000C1A5 52 44 43 C6                 db	"RDC",('F'+0x80)
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 6
tb.asm
    362 0000C1A9 00                      	db	0
    363 0000C1AA                        TAB4
    364 0000C1AA 4E 4F 44 45 4E 55 CD    	db	"NODENU",('M'+0x80)
                                      
    365 0000C1B1 50 45 45 4B C3          	db	"PEEK",('C'+0x80)        ;Functions
    366 0000C1B6 50 45 45 4B D7          	db	"PEEK",('W'+0x80)        ;Functions
    367 0000C1BB 50 45 45 CB             	db	"PEE",('K'+0x80)         ;Functions
    368 0000C1BF 52 4E C4                	db	"RN",('D'+0x80)
    369 0000C1C2 41 42 D3                	db	"AB",('S'+0x80)
    370 0000C1C5 53 49 5A C5             	db	"SIZ",('E'+0x80)
    371 0000C1C9 55 53 D2                	db  "US",('R'+0x80)
    372 0000C1CC 00                      	db	0
    373 0000C1CD                        TAB5
    374 0000C1CD 54 CF                   	db	"T",('O'+0x80)           ;"TO" in "FOR"
    375 0000C1CF 00                      	db	0
    376 0000C1D0                        TAB6
    377 0000C1D0 53 54 45 D0             	db	"STE",('P'+0x80)         ;"STEP" in "FOR"
    378 0000C1D4 00                      	db	0
    379 0000C1D5                        TAB8
    380 0000C1D5 3E BD                   	db	'>',('='+0x80)           ;Relational operators
    381 0000C1D7 3C BE                   	db	'<',('>'+0x80)
    382 0000C1D9 BE                      	db	('>'+0x80)
    383 0000C1DA BD                      	db	('='+0x80)
    384 0000C1DB 3C BD                   	db	'<',('='+0x80)
    385 0000C1DD BC                      	db	('<'+0x80)
    386 0000C1DE 00                      	db	0
    387 0000C1DF                        TAB9
    388 0000C1DF 41 4E C4                    db  "AN",('D'+0x80)
    389 0000C1E2 00                          db  0
    390 0000C1E3                        TAB10
    391 0000C1E3 4F D2                       db  "O",('R'+0x80)
    392 0000C1E5 00                          db  0
                                        
    394 0000C1E6 FF FF                   	.align	4
                                        
                                        ;* Execution address tables:
    397 0000C1E8                        TAB1_1
    398 0000C1E8 50 C3                   	dw	LISTX			;Direct commands
    399 0000C1EA B6 C5                   	dw	LOAD
    400 0000C1EC 9C C2                   	dw	NEW
    401 0000C1EE B2 C2                   	dw	RUN
    402 0000C1F0 4A C6                   	dw	SAVE
    403 0000C1F2                        TAB2_1
    404 0000C1F2 A8 C4                   	dw	NEXT		;	Direct / statement
    405 0000C1F4 A8 C5                   	dw	LET
    406 0000C1F6 02 C5                   	dw	IF
    407 0000C1F8 14 C3                   	dw	GOTO
    408 0000C1FA EA C3                   	dw	GOSUB
    409 0000C1FC 1A C4                   	dw	RETURN
    410 0000C1FE 0C C5                   	dw	IF2			; REM
    411 0000C200 44 C4                   	dw	FOR
    412 0000C202 2A C5                   	dw	INPUT
    413 0000C204 86 C3                   	dw	PRINT
    414 0000C206 74 C7                   	dw	POKEW
    415 0000C208 54 C7                   	dw	POKE
    416 0000C20A AA C2                   	dw	STOP
    417 0000C20C 14 C0                   	dw	GOBYE
    418 0000C20E 8C C7                   	dw	SYSX
    419 0000C210 CA D1                   	dw	_cls
    420 0000C212 2E C3                   	dw  _clr
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 7
tb.asm
    421 0000C214 14 C2                   	dw	_rdcf
    422 0000C216 A0 C5                   	dw	DEFLT
    423 0000C218                        TAB4_1
    424 0000C218 C8 CB                   	dw	NODENUM
    425 0000C21A 0A CB                   	dw  PEEKC
    426 0000C21C 18 CB                   	dw  PEEKW
    427 0000C21E FE CA                   	dw	PEEK			;Functions
    428 0000C220 38 CB                   	dw	RND
    429 0000C222 92 CB                   	dw	ABS
    430 0000C224 B8 CB                   	dw	SIZEX
    431 0000C226 24 CB                   	dw  USRX
    432 0000C228 34 C9                   	dw	XP40
    433 0000C22A                        TAB5_1
    434 0000C22A 5C C4                   	dw	FR1			;"TO" in "FOR"
    435 0000C22C 48 CC                   	dw	QWHAT
    436 0000C22E                        TAB6_1
    437 0000C22E 70 C4                   	dw	FR2			;"STEP" in "FOR"
    438 0000C230 76 C4                   	dw	FR3
    439 0000C232                        TAB8_1
    440 0000C232 56 C8                   	dw	XP11	;>=		Relational operators
    441 0000C234 60 C8                   	dw	XP12	;<>
    442 0000C236 6A C8                   	dw	XP13	;>
    443 0000C238 7E C8                   	dw	XP15	;=
    444 0000C23A 74 C8                   	dw	XP14	;<=
    445 0000C23C 88 C8                   	dw	XP16	;<
    446 0000C23E A2 C8                   	dw	XP17
    447 0000C240                        TAB9_1
    448 0000C240 E2 C7                       dw  XP_AND
    449 0000C242 EA C7                       dw  XP_ANDX
    450 0000C244                        TAB10_1
    451 0000C244 BE C7                       dw  XP_OR
    452 0000C246 C6 C7                       dw  XP_ORX
                                        
                                        ;*
                                        ; r3 = match flag (trashed)
                                        ; r9 = text table
                                        ; r10 = exec table
                                        ; r11 = trashed
    459 0000C248                        DIRECT
    460 0000C248 15 4C 02 19             	lea		r9,TAB1
    461 0000C24C 1E 4C 08 1A             	lea		r10,TAB1_1
    462 0000C250                        EXEC
    463 0000C250 F0 1B                   	lw		r11,lr		; save link reg
    464 0000C252 6D 40 02 AF             	call	IGNBLK		; ignore leading blanks
    465 0000C256 B0 1F                   	lw		lr,r11		; restore link reg
    466 0000C258 80 1B                   	lw		r11,r8		; save the pointer
    467 0000C25A 00 13                   	lw		r3,#0		; clear match flag
    468 0000C25C                        EXLP
    469 0000C25C 80 E1                   	lb		r1,[r8]		; get the program character
    470 0000C25E 01 68                   	add		r8,r8,#1
    471 0000C260 90 E2                   	lb		r2,[r9]		; get the table character
    472 0000C262 02 A9                   	bne		EXNGO		; If end of table,
    473 0000C264 B0 18                   	lw		r8,r11		;	restore the text pointer and...
    474 0000C266 12 AE                   	br		EXGO		;   execute the default.
    475 0000C268                        EXNGO
    476 0000C268 3D 21                   	cmp		r1,r3		; Else check for period...
    477 0000C26A 10 A8                   	beq		EXGO		; if so, execute
    478 0000C26C 07 40 5F 32             	and		r2,#0x7f	; ignore the table's high bit
    479 0000C270 1D 22                   	cmp		r2,r1		;		is there a match?
    480 0000C272 07 A8                   	beq		EXMAT
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 8
tb.asm
    481 0000C274 04 6A                   	add		r10,r10,#4	;if not, try the next entry
    482 0000C276 B0 18                   	lw		r8,r11		; reset the program pointer
    483 0000C278 00 13                   	lw		r3,#0		; sorry, no match
    484 0000C27A                        EX1
    485 0000C27A 01 69                   	add		r9,r9,#1
    486 0000C27C 9F E1                   	lb		r1,-1[r9]	; get to the end of the entry
    487 0000C27E FD BB                   	bpl		EX1
    488 0000C280 ED BE                   	br		EXLP		; back for more matching
    489 0000C282                        EXMAT
    490 0000C282 02 40 0E 13             	lw		r3,#'.'		; we've got a match so far
    491 0000C286 01 69                   	add		r9,r9,#1
    492 0000C288 9F E1                   	lb		r1,-1[r9]	; end of table entry?
    493 0000C28A E8 BB                   	bpl		EXLP		; if not, go back for more
    494 0000C28C                        EXGO
    495 0000C28C 01 4B 00 E1             	lb		r1,ROUTER+RTR_RXSTAT
    496 0000C290 03 A8                   	beq		EXGO1
    497 0000C292 FF BF                   	call	Recv
    498 0000C294 B1 40 0B AF             	call	RecvDispatch
    499 0000C298                        EXGO1
    500 0000C298 A1 FB                   	lw		r11,[r10]	; execute the appropriate routine
    501 0000C29A B0 80                   	jmp		[r11]
                                        
                                        
                                        ;    lb      r1,[r8]     ; get token from text space
                                        ;    bpl
                                        ;    and     r1,#0x7f
                                        ;    shl     r1,#2       ; * 4 - word offset
                                        ;    add     r1,r1,#TAB1_1
                                        ;    lw      r1,[r1]
                                        ;    jmp     [r1]
                                        
                                            
                                        ;
                                        ; What follows is the code to execute direct and statement
                                        ; commands. Control is transferred to these points via the command
                                        ; table lookup code of 'DIRECT' and 'EXEC' in the last section.
                                        ; After the command is executed, control is transferred to other
                                        ; sections as follows:
                                        ;
                                        ; For 'LISTX', 'NEW', and 'STOP': go back to the warm start point.
                                        ; For 'RUN': go execute the first stored line if any; else go
                                        ; back to the warm start point.
                                        ; For 'GOTO' and 'GOSUB': go execute the target line.
                                        ; For 'RETURN' and 'NEXT'; go back to saved return line.
                                        ; For all others: if 'CURRNT' is 0, go to warm start; else go
                                        ; execute next command. (This is done in 'FINISH'.)
                                        ;
                                        ;******************************************************************
                                        ;
                                        ; *** NEW *** STOP *** RUN (& friends) *** GOTO ***
                                        ;
                                        ; 'NEW<CR>' sets TXTUNF to point to TXTBGN
                                        ;
                                        ; 'STOP<CR>' goes back to WSTART
                                        ;
                                        ; 'RUN<CR>' finds the first stored line, stores its address
                                        ; in CURRNT, and starts executing it. Note that only those
                                        ; commands in TAB2 are legal for a stored program.
                                        ;
                                        ; RUN ON <node number> sends a run command to the specified node
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 9
tb.asm
                                        ;
                                        ; There are 3 more entries in 'RUN':
                                        ; 'RUNNXL' finds next line, stores it's address and executes it.
                                        ; 'RUNTSL' stores the address of this line and executes it.
                                        ; 'RUNSML' continues the execution on same line.
                                        ;
                                        ; 'GOTO expr<CR>' evaluates the expression, finds the target
                                        ; line, and jumps to 'RUNTSL' to do it.
                                        ;
    550 0000C29C                        NEW
    551 0000C29C 4C 40 00 AF             	call	ENDCHK
    552 0000C2A0 01 4C 09 F1             	lw		r1,TXTBGN
    553 0000C2A4 09 40 07 D1             	sw		r1,TXTUNF	;	set the end pointer
    554 0000C2A8 44 AF                   	call    clearVars
                                        
    556 0000C2AA                        STOP
    557 0000C2AA 4B 40 09 AF             	call	ENDCHK
    558 0000C2AE EE 4F 0E AE             	br		WSTART		; WSTART will reset the stack
                                        
    560 0000C2B2                        RUN
    561 0000C2B2 6A 40 02 AF             	call	IGNBLK
    562 0000C2B6 80 E1                   	lb		r1,[r8]
    563 0000C2B8 FB 4F 11 10             	cmp		r1,#'O'
    564 0000C2BC 10 A9                   	bne		RUN1
    565 0000C2BE 81 E1                   	lb		r1,1[r8]
    566 0000C2C0 FB 4F 12 10             	cmp		r1,#'N'
    567 0000C2C4 0C A9                   	bne		RUN1
    568 0000C2C6 02 68                   	add		r8,r8,#2
    569 0000C2C8 26 40 0F AF             	call	OREXPR
    570 0000C2CC 05 40 03 C1             	sb		r1,txBuf+MSG_DST
                                        	lb		r1,#$11
    572 0000C2D0 05 40 02 C1             	sb		r1,txBuf+MSG_SRC
                                        	lb		r1,#13
    574 0000C2D4 04 40 0B C1             	sb		r1,txBuf+MSG_TYPE
    575 0000C2D8 FF BF                   	call	Xmit
    576 0000C2DA ED 4F 08 AE             	br		WSTART
    577 0000C2DE                        RUN1
    578 0000C2DE 49 40 0F AF             	call	ENDCHK
    579 0000C2E2 01 4C 09 F8             	lw		r8,TXTBGN	;	set pointer to beginning
    580 0000C2E6 08 40 07 D8             	sw		r8,CURRNT
    581 0000C2EA 23 AF                   	call    clearVars
                                        
    583 0000C2EC                        RUNNXL					; RUN <next line>
    584 0000C2EC 08 40 07 F1             	lw		r1,CURRNT	; executing a program?
    585 0000C2F0 EC 4F 0D A8             	beq		WSTART		; if not, we've finished a direct stat.
    586 0000C2F4 00 11                   	lw		r1,#0	    ; else find the next line number
    587 0000C2F6 80 19                   	lw		r9,r8
    588 0000C2F8 51 40 0E AF             	call	FNDLNP		; search for the next line
    589 0000C2FC EC 4F 07 A7             	bgtu	WSTART		; if we've fallen off the end, stop
                                        
    591 0000C300                        RUNTSL					; RUN <this line>
    592 0000C300 08 40 07 D9             	sw		r9,CURRNT	; set CURRNT to point to the line no.
    593 0000C304 92 18                   	lea		r8,2[r9]	; set the text pointer to
                                        
    595 0000C306                        RUNSML                  ; RUN <same line>
    596 0000C306 6A 40 0E AF             	call	CHKIO		; see if a control-C was pressed
    597 0000C30A 16 4C 04 19             	lea		r9,TAB2		; find command in TAB2
    598 0000C30E 1F 4C 02 1A             	lea		r10,TAB2_1
    599 0000C312 9E BE                   	br		EXEC		; and execute it
                                        
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 10
tb.asm
    601 0000C314                        GOTO
    602 0000C314 24 40 09 AF             	call	OREXPR		;evaluate the following expression
    603 0000C318 10 15                   	lw      r5,r1
    604 0000C31A 48 40 01 AF             	call	ENDCHK		;must find end of line
    605 0000C31E 50 11                   	lw      r1,r5
    606 0000C320 50 40 02 AF             	call	FNDLN		; find the target line
    607 0000C324 ED B8                   	beq		RUNTSL		; go do it
    608 0000C326 35 4D 0D 11             	lea		r1,msgBadGotoGosub
    609 0000C32A 48 40 0F AE             	br		ERROR		; no such line no.
                                        
                                        
    612 0000C32E                        _clr
    613 0000C32E 01 AF                       call    clearVars
    614 0000C330 58 AE                       br      FINISH
                                        
                                        ; Clear the variable area of memory
    617 0000C332                        clearVars
    618 0000C332 FC 6E                       sub     sp,sp,#4
    619 0000C334 E1 DF                       sw      lr,[sp]
    620 0000C336 E3 D6                       sw      r6,2[sp]
    621 0000C338 80 40 00 16                 lw      r6,#2048    ; number of words to clear
    622 0000C33C 09 40 09 F1                 lw      r1,VARBGN
    623 0000C340                        cv1
    624 0000C340 11 D0                       sw      r0,[r1]
    625 0000C342 04 61                       add     r1,r1,#4
    626 0000C344 FF 66                       sub		r6,r6,#1
    627 0000C346 FC B9                       bne     cv1
    628 0000C348 E1 FF                       lw      lr,[sp]
    629 0000C34A E3 F6                       lw      r6,2[sp]
    630 0000C34C 04 6E                       add     sp,sp,#4
    631 0000C34E F0 80                       ret    
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; LIST
                                        ;
                                        ; LISTX has two forms:
                                        ; 'LIST<CR>' lists all saved lines
                                        ; 'LIST #<CR>' starts listing at the line #
                                        ; Control-S pauses the listing, control-C stops it.
                                        ;
                                        
    644 0000C350                        LISTX
    645 0000C350 63 40 02 AF             	call	TSTNUM		; see if there's a line no.
    646 0000C354 10 15                   	lw      r5,r1
    647 0000C356 46 40 03 AF             	call	ENDCHK		; if not, we get a zero
    648 0000C35A 50 11                   	lw      r1,r5
    649 0000C35C 4E 40 04 AF             	call	FNDLN		; find this or next line
    650 0000C360                        LS1
    651 0000C360 E9 4F 05 A7             	bgtu	WSTART		; warm start if we passed the end
                                        
    653 0000C364 90 11                   	lw		r1,r9
    654 0000C366 5F 40 07 AF             	call	PRTLN		; print the line
    655 0000C36A 10 19                   	lw		r9,r1		; set pointer for next
    656 0000C36C 67 40 0B AF             	call	CHKIO		; check for listing halt request
    657 0000C370 06 A8                   	beq		LS3
    658 0000C372 FE 4F 1D 10             	cmp		r1,#CTRLS	; pause the listing?
    659 0000C376 03 A9                   	bne		LS3
    660 0000C378                        LS2
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 11
tb.asm
    661 0000C378 67 40 05 AF             	call	CHKIO		; if so, wait for another keypress
    662 0000C37C FD B8                   	beq		LS2
    663 0000C37E                        LS3
    664 0000C37E 00 11                   	lw		r1,#0
    665 0000C380 4D 40 0A AF             	call	FNDLNP		; find the next line
    666 0000C384 ED BE                   	br		LS1
                                        
                                        
                                        ;******************************************************************
                                        ; PRINT command is 'PRINT ....:' or 'PRINT ....<CR>'
                                        ; where '....' is a list of expressions, formats, back-arrows,
                                        ; and strings.	These items a separated by commas.
                                        ;
                                        ; A format is a pound sign followed by a number.  It controls
                                        ; the number of spaces the value of an expression is going to
                                        ; be printed in.  It stays effective for the rest of the print
                                        ; command unless changed by another format.  If no format is
                                        ; specified, 11 positions will be used.
                                        ;
                                        ; A string is quoted in a pair of single- or double-quotes.
                                        ;
                                        ; An underline (back-arrow) means generate a <CR> without a <LF>
                                        ;
                                        ; A <CR LF> is generated after the entire list has been printed
                                        ; or if the list is empty.  If the list ends with a semicolon,
                                        ; however, no <CR LF> is generated.
                                        ;
                                        
    689 0000C386                        PRINT
    690 0000C386 0B 15                   	lw		r5,#11		; D4 = number of print spaces
    691 0000C388 60 40 04 AF             	call	TSTC		; if null list and ":"
    692 0000C38C 3A 08                   	db	':',PR2-*+1
    693 0000C38E 67 40 0A AF             	call	CRLF		; give CR-LF and continue
    694 0000C392 B9 BE                   	br		RUNSML		;		execution on the same line
    695 0000C394                        PR2
    696 0000C394 5F 40 0E AF             	call	TSTC		;if null list and <CR>
    697 0000C398 0D 08                   	db	CR,PR0-*+1
    698 0000C39A 67 40 04 AF             	call	CRLF		;also give CR-LF and
    699 0000C39E A6 BE                   	br		RUNNXL		;execute the next line
    700 0000C3A0                        PR0
    701 0000C3A0 5F 40 08 AF             	call	TSTC		;else is it a format?
    702 0000C3A4 23 0A                   	db	'#',PR1-*+1
    703 0000C3A6 20 40 00 AF             	call	OREXPR		; yes, evaluate expression
    704 0000C3AA 10 15                   	lw		r5,r1		; and save it as print width
    705 0000C3AC 0B AE                   	br		PR3		; look for more to print
    706 0000C3AE                        PR1
    707 0000C3AE 5F 40 01 AF             	call	TSTC	;	is character expression? (MRL)
    708 0000C3B2 24 0C                   	db	'$',PR4-*+1
    709 0000C3B4 1F 40 09 AF             	call	OREXPR	;	yep. Evaluate expression (MRL)
    710 0000C3B8 E2 4F 04 AF             	call	GOOUT	;	print low byte (MRL)
    711 0000C3BC 03 AE                   	br		PR3		;look for more. (MRL)
    712 0000C3BE                        PR4
    713 0000C3BE 52 40 0F AF             	call	QTSTG	;	is it a string?
                                        	; the following branch must occupy only two bytes!
    715 0000C3C2 09 AE                   	br		PR8		;	if not, must be an expression
    716 0000C3C4                        PR3
    717 0000C3C4 5E 40 06 AF             	call	TSTC	;	if ",", go find next
    718 0000C3C8 2C 08                   	db	',',PR6-*+1
    719 0000C3CA 41 40 07 AF             	call	FIN		;in the list.
    720 0000C3CE E8 BE                   	br		PR0
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 12
tb.asm
    721 0000C3D0                        PR6
    722 0000C3D0 65 40 09 AF             	call	CRLF		;list ends here
    723 0000C3D4 06 AE                   	br		FINISH
    724 0000C3D6                        PR8
    725 0000C3D6 1E 40 08 AF             	call	OREXPR		; evaluate the expression
    726 0000C3DA 50 12                   	lw		r2,r5		; set the width
    727 0000C3DC 54 40 0C AF             	call	PRTNUM		; print its value
    728 0000C3E0 F1 BE                   	br		PR3			; more to print?
                                        
    730 0000C3E2                        FINISH
    731 0000C3E2 40 40 0B AF             	call	FIN		; Check end of command
    732 0000C3E6 42 40 0F AE             	jmp		QWHAT	; print "What?" if wrong
                                        
                                        
                                        ;*******************************************************************
                                        ;
                                        ; *** GOSUB *** & RETURN ***
                                        ;
                                        ; 'GOSUB expr:' or 'GOSUB expr<CR>' is like the 'GOTO' command,
                                        ; except that the current text pointer, stack pointer, etc. are
                                        ; saved so that execution can be continued after the subroutine
                                        ; 'RETURN's.  In order that 'GOSUB' can be nested (and even
                                        ; recursive), the save area must be stacked.  The stack pointer
                                        ; is saved in 'STKGOS'.  The old 'STKGOS' is saved on the stack.
                                        ; If we are in the main routine, 'STKGOS' is zero (this was done
                                        ; in the initialization section of the interpreter), but we still
                                        ; save it as a flag for no further 'RETURN's.
                                        ;
    749 0000C3EA                        GOSUB
    750 0000C3EA 4E 40 03 AF             	call	PUSHA		; save the current 'FOR' parameters
    751 0000C3EE 1D 40 0C AF             	call	OREXPR		; get line number
    752 0000C3F2 49 40 09 AF             	call	FNDLN		; find the target line
    753 0000C3F6 04 A8                   	beq		gosub1
    754 0000C3F8 35 4D 0D 11             	lea		r1,msgBadGotoGosub
    755 0000C3FC 42 40 06 AE             	br		ERROR		; if not there, say "How?"
    756 0000C400                        gosub1
    757 0000C400 FA 6E                   	sub		sp,sp,#6
    758 0000C402 E1 D8                   	sw		r8,[sp]		; save text pointer
    759 0000C404 08 40 07 F1             	lw		r1,CURRNT
    760 0000C408 E3 D1                   	sw		r1,2[sp]	; found it, save old 'CURRNT'...
    761 0000C40A 08 40 09 F1             	lw		r1,STKGOS
    762 0000C40E E5 D1                   	sw		r1,4[sp]	; and 'STKGOS'
    763 0000C410 08 40 0D D0             	sw		r0,LOPVAR	; load new values
    764 0000C414 08 40 09 DE             	sw		sp,STKGOS
    765 0000C418 73 BE                   	br		RUNTSL
                                        
                                        
                                        ; 'RETURN<CR>' undoes everything that 'GOSUB' did, and thus
                                        ; returns the execution to the command after the most recent
                                        ; 'GOSUB'.  If 'STKGOS' is zero, it indicates that we never had
                                        ; a 'GOSUB' and is thus an error.
                                        ;
    773 0000C41A                        RETURN
    774 0000C41A 40 40 01 AF             	call	ENDCHK		; there should be just a <CR>
    775 0000C41E 08 40 09 F1             	lw		r1,STKGOS	; get old stack pointer
    776 0000C422 04 A9                   	bne		return1
    777 0000C424 37 4D 0A 11             	lea		r1,msgRetWoGosub
    778 0000C428 41 40 00 AE             	br		ERROR		; if zero, it doesn't exist
    779 0000C42C                        return1
    780 0000C42C 10 1E                   	lw		sp,r1		; else restore it
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 13
tb.asm
    781 0000C42E E5 F1                   	lw		r1,4[sp]
    782 0000C430 08 40 09 D1             	sw		r1,STKGOS	; and the old 'STKGOS'
    783 0000C434 E3 F1                   	lw		r1,2[sp]
    784 0000C436 08 40 07 D1             	sw		r1,CURRNT	; and the old 'CURRNT'
    785 0000C43A E1 F8                   	lw		r8,[sp]		; and the old text pointer
    786 0000C43C 06 6E                   	add		sp,sp,#6
    787 0000C43E 4A 40 05 AF             	call	POPA		;and the old 'FOR' parameters
    788 0000C442 CF BE                   	br		FINISH		;and we are back home
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** FOR *** & NEXT ***
                                        ;
                                        ; 'FOR' has two forms:
                                        ; 'FOR var=exp1 TO exp2 STEP exp1' and 'FOR var=exp1 TO exp2'
                                        ; The second form means the same thing as the first form with a
                                        ; STEP of positive 1.  The interpreter will find the variable 'var'
                                        ; and set its value to the current value of 'exp1'.  It also
                                        ; evaluates 'exp2' and 'exp1' and saves all these together with
                                        ; the text pointer, etc. in the 'FOR' save area, which consisits of
                                        ; 'LOPVAR', 'LOPINC', 'LOPLMT', 'LOPLN', and 'LOPPT'.  If there is
                                        ; already something in the save area (indicated by a non-zero
                                        ; 'LOPVAR'), then the old save area is saved on the stack before
                                        ; the new values are stored.  The interpreter will then dig in the
                                        ; stack and find out if this same variable was used in another
                                        ; currently active 'FOR' loop.  If that is the case, then the old
                                        ; 'FOR' loop is deactivated. (i.e. purged from the stack)
                                        ;
    810 0000C444                        FOR
    811 0000C444 4B 40 06 AF             	call	PUSHA		; save the old 'FOR' save area
    812 0000C448 3C 40 02 AF             	call	SETVAL		; set the control variable
    813 0000C44C 08 40 0D D1             	sw		r1,LOPVAR	; save its address
    814 0000C450 1C 4C 0D 19             	lea		r9,TAB5		; use 'EXEC' to test for 'TO'
    815 0000C454 22 4C 0A 1A             	lea		r10,TAB5_1
    816 0000C458 EF 4F 0A AE             	jmp		EXEC
    817 0000C45C                        FR1
    818 0000C45C 1A 40 05 AF             	call	OREXPR		; evaluate the limit
    819 0000C460 09 40 01 D1             	sw		r1,LOPLMT	; save that
    820 0000C464 1D 4C 00 19             	lea		r9,TAB6		; use 'EXEC' to look for the
    821 0000C468 22 4C 0E 1A             	lea		r10,TAB6_1	; word 'STEP'
    822 0000C46C EF 4F 00 AE             	jmp		EXEC
    823 0000C470                        FR2
    824 0000C470 19 40 0B AF             	call	OREXPR		; found it, get the step value
    825 0000C474 01 AE                   	br		FR4
    826 0000C476                        FR3
    827 0000C476 01 11                   	lw		r1,#1		; not found, step defaults to 1
    828 0000C478                        FR4
    829 0000C478 08 40 0F D1             	sw		r1,LOPINC	; save that too
                                        
    831 0000C47C                        FR5
    832 0000C47C 08 40 07 F2             	lw		r2,CURRNT
    833 0000C480 09 40 03 D2             	sw		r2,LOPLN	; save address of current line number
    834 0000C484 09 40 05 D8             	sw		r8,LOPPT	; and text pointer
                                        
                                        
    837 0000C488 E0 13                   	lw		r3,sp		; dig into the stack to find 'LOPVAR'
    838 0000C48A 08 40 0D F6             	lw		r6,LOPVAR
    839 0000C48E 01 AE                   	br		FR7
    840 0000C490                        FR6
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 14
tb.asm
    841 0000C490 3A 13                   	lea		r3,10[r3]	; look at next stack frame
    842 0000C492                        FR7
    843 0000C492 31 F2                   	lw		r2,[r3]		; is it zero?
    844 0000C494 08 A8                   	beq		FR8			; if so, we're done
    845 0000C496 6D 22                   	cmp		r2,r6		; same as current LOPVAR?
    846 0000C498 FB B9                   	bne		FR6			; nope, look some more
                                        
    848 0000C49A 30 11                       lw      r1,r3       ; Else remove 5 words from...
    849 0000C49C 3A 12                   	lea		r2,10[r3]   ; inside the stack.
    850 0000C49E E0 13                   	lw		r3,sp		
    851 0000C4A0 47 40 01 AF             	call	MVDOWN
    852 0000C4A4 0A 6E                   	add		sp,sp,#10	; set the SP 5 words up
    853 0000C4A6                        FR8
    854 0000C4A6 9D BE                       br	    FINISH		; and continue execution
                                        
                                        
                                        ; 'NEXT var' serves as the logical (not necessarily physical) end
                                        ; of the 'FOR' loop.  The control variable 'var' is checked with
                                        ; the 'LOPVAR'.  If they are not the same, the interpreter digs in
                                        ; the stack to find the right one and purges all those that didn't
                                        ; match.  Either way, it then adds the 'STEP' to that variable and
                                        ; checks the result with against the limit value.  If it is within
                                        ; the limit, control loops back to the command following the
                                        ; 'FOR'.  If it's outside the limit, the save area is purged and
                                        ; execution continues.
                                        ;
    867 0000C4A8                        NEXT
    868 0000C4A8 00 11                   	lw		r1,#0		; don't allocate it
    869 0000C4AA 26 40 02 AF             	call	TSTV		; get address of variable
    870 0000C4AE 04 A9                   	bne		NX4
    871 0000C4B0 33 4D 09 11             	lea		r1,msgNextVar
    872 0000C4B4 3C 40 0A AE             	br		ERROR		; if no variable, say "What?"
    873 0000C4B8                        NX4
    874 0000C4B8 10 19                   	lw		r9,r1		; save variable's address
    875 0000C4BA                        NX0
    876 0000C4BA 08 40 0D F1             	lw		r1,LOPVAR	; If 'LOPVAR' is zero, we never...
    877 0000C4BE 04 A9                   	bne		NX5         ; had a FOR loop
    878 0000C4C0 32 4D 06 11             	lea		r1,msgNextFor
    879 0000C4C4 3C 40 02 AE             	br		ERROR		
    880 0000C4C8                        NX5
    881 0000C4C8 9D 21                   	cmp		r1,r9		; else we check them
    882 0000C4CA 03 A8                   	beq		NX2			; OK, they agree
    883 0000C4CC 45 40 0E AF             	call	POPA		; nope, let's see the next frame
    884 0000C4D0 F4 BE                   	br		NX0
    885 0000C4D2                        NX2
    886 0000C4D2 91 F1                   	lw		r1,[r9]		; get control variable's value
    887 0000C4D4 08 40 0F F2             	lw		r2,LOPINC
    888 0000C4D8 20 21                   	add		r1,r2		; add in loop increment
                                        ;	BVS.L	QHOW		say "How?" for 32-bit overflow
    890 0000C4DA 91 D1                   	sw		r1,[r9]		; save control variable's new value
    891 0000C4DC 09 40 01 F3             	lw		r3,LOPLMT	; get loop's limit value
    892 0000C4E0 26 22                   	or		r2,r2       ; check loop increment
    893 0000C4E2 03 AB                   	bpl		NX1			; branch if loop increment is positive
    894 0000C4E4 3D 21                   	cmp		r1,r3		; test against limit
    895 0000C4E6 0A A0                   	blt		NXPurge
    896 0000C4E8 02 AE                   	br      NX3
    897 0000C4EA                        NX1
    898 0000C4EA 3D 21                   	cmp		r1,r3
    899 0000C4EC 07 A3                   	bgt		NXPurge
    900 0000C4EE                        NX3	
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 15
tb.asm
    901 0000C4EE 09 40 03 F8             	lw		r8,LOPLN	; Within limit, go back to the...
    902 0000C4F2 08 40 07 D8             	sw		r8,CURRNT
    903 0000C4F6 09 40 05 F8             	lw		r8,LOPPT	; saved 'CURRNT' and text pointer.
    904 0000C4FA 73 BE                   	br		FINISH
                                        
    906 0000C4FC                        NXPurge
    907 0000C4FC 44 40 06 AF                 call    POPA        ; purge this loop
    908 0000C500 70 BE                       br      FINISH
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** REM *** IF *** INPUT *** LET (& DEFLT) ***
                                        ;
                                        ; 'REM' can be followed by anything and is ignored by the
                                        ; interpreter.
                                        ;
                                        ;REM
                                        ;    br	    IF2		    ; skip the rest of the line
                                        
                                        ; 'IF' is followed by an expression, as a condition and one or
                                        ; more commands (including other 'IF's) separated by colons.
                                        ; Note that the word 'THEN' is not used.  The interpreter evaluates
                                        ; the expression.  If it is non-zero, execution continues.  If it
                                        ; is zero, the commands that follow are ignored and execution
                                        ; continues on the next line.
                                        ;
    928 0000C502                        IF
    929 0000C502 15 40 02 AF                 call	OREXPR		; evaluate the expression
    930 0000C506                        IF1
    931 0000C506 16 21                       or      r1,r1       ; is it zero?
    932 0000C508 EF 4F 0D A9                 bne	    RUNSML		; if not, continue
    933 0000C50C                        IF2
    934 0000C50C 80 19                       lw		r9,r8		; set lookup pointer
    935 0000C50E 00 11                   	lw		r1,#0		; find line #0 (impossible)
    936 0000C510 42 40 08 AF             	call	FNDSKP		; if so, skip the rest of the line
    937 0000C514 DB 4F 0B A7             	bgtu	WSTART		; if no next line, do a warm start
    938 0000C518                        IF3
    939 0000C518 EF 4F 02 AE             	br		RUNTSL		; run the next line
                                        
                                        
                                        ; INPUT is called first and establishes a stack frame
    943 0000C51C                        INPERR
    944 0000C51C 08 40 0B FE             	lw		sp,STKINP	; restore the old stack pointer
    945 0000C520 E5 F8                   	lw		r8,4[sp]
    946 0000C522 08 40 07 D8             	sw		r8,CURRNT	; and old 'CURRNT'
    947 0000C526 E3 F8                   	lw		r8,2[sp]	; and old text pointer
    948 0000C528 0A 6E                   	add		sp,sp,#10	; fall through will subtract 10
                                        
                                        ; 'INPUT' is like the 'PRINT' command, and is followed by a list
                                        ; of items.  If the item is a string in single or double quotes,
                                        ; or is an underline (back arrow), it has the same effect as in
                                        ; 'PRINT'.  If an item is a variable, this variable name is
                                        ; printed out followed by a colon, then the interpreter waits for
                                        ; an expression to be typed in.  The variable is then set to the
                                        ; value of this expression.  If the variable is preceeded by a
                                        ; string (again in single or double quotes), the string will be
                                        ; displayed followed by a colon.  The interpreter the waits for an
                                        ; expression to be entered and sets the variable equal to the
                                        ; expression's value.  If the input expression is invalid, the
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 16
tb.asm
                                        ; interpreter will print "What?", "How?", or "Sorry" and reprint
                                        ; the prompt and redo the input.  The execution will not terminate
                                        ; unless you press control-C.  This is handled in 'INPERR'.
                                        ;
    965 0000C52A                        INPUT
    966 0000C52A F6 6E                   	sub		sp,sp,#10	; allocate stack frame
    967 0000C52C E9 D5                   	sw      r5,8[sp]
    968 0000C52E                        IP6
    969 0000C52E E1 D8                   	sw		r8,[sp]		; save in case of error
    970 0000C530 47 40 06 AF             	call	QTSTG		; is next item a string?
    971 0000C534 06 AE                   	br		IP2			; nope - this branch must take only two bytes
    972 0000C536 01 11                   	lw		r1,#1		; allocate var
    973 0000C538 21 40 0B AF             	call	TSTV		; yes, but is it followed by a variable?
    974 0000C53C 2A A8                   	beq     IP4		    ; if not, brnch
    975 0000C53E 10 1A                   	lw		r10,r1		; put away the variable's address
    976 0000C540 10 AE                   	br		IP3			; if so, input to variable
    977 0000C542                        IP2
    978 0000C542 E3 D8                   	sw		r8,2[sp]	; save for 'PRTSTG'
    979 0000C544 01 11                   	lw		r1,#1
    980 0000C546 21 40 04 AF             	call	TSTV		; must be a variable now
    981 0000C54A 04 A9                   	bne		IP7
    982 0000C54C 30 4D 09 11             	lea		r1,msgInputVar
    983 0000C550 37 40 0C AE             	br		ERROR		; "What?" it isn't?
    984 0000C554                        IP7
    985 0000C554 10 1A                   	lw		r10,r1		; put away the variable's address
    986 0000C556 80 E5                   	lb		r5,[r8]		; get ready for 'PRTSTG' by null terminating
    987 0000C558 80 C0                   	sb		r0,[r8]
    988 0000C55A E3 F1                   	lw		r1,2[sp]	; get back text pointer
    989 0000C55C 44 40 04 AF             	call	PRTSTG		; print string as prompt
    990 0000C560 80 C5                   	sb		r5,[r8]		; un-null terminate
    991 0000C562                        IP3
    992 0000C562 E3 D8                   	sw		r8,2[sp]	; save in case of error
    993 0000C564 08 40 07 F1             	lw		r1,CURRNT
    994 0000C568 E5 D1                   	sw		r1,4[sp]	; also save 'CURRNT'
    995 0000C56A 0F 11                   	lw		r1,#-1
    996 0000C56C 08 40 07 D1             	sw		r1,CURRNT	; flag that we are in INPUT
    997 0000C570 08 40 0B DE             	sw		sp,STKINP	; save the stack pointer too
    998 0000C574 E7 DA                   	sw		r10,6[sp]	; save the variable address
    999 0000C576 03 40 0A 11             	lw		r1,#':'		; print a colon first
   1000 0000C57A 38 40 01 AF             	call	GETLN		; then get an input line
   1001 0000C57E 0A 40 0E 18             	lea		r8,BUFFER	; point to the buffer
   1002 0000C582 11 40 02 AF             	call	OREXPR		; evaluate the input
   1003 0000C586 E7 FA                   	lw		r10,6[sp]	; restore the variable address
   1004 0000C588 A1 D1                   	sw		r1,[r10]	; save value in variable
   1005 0000C58A E5 F1                   	lw		r1,4[sp]	; restore old 'CURRNT'
   1006 0000C58C 08 40 07 D1             	sw		r1,CURRNT
   1007 0000C590 E3 F8                   	lw		r8,2[sp]	; and the old text pointer
   1008 0000C592                        IP4
   1009 0000C592 4F 40 0F AF             	call	TSTC		; is the next thing a comma?
   1010 0000C596 2C 04                   	db	',',IP5-*+1
   1011 0000C598 CA BE                   	br		IP6			; yes, more items
   1012 0000C59A                        IP5
   1013 0000C59A E9 F5                       lw      r5,8[sp]
   1014 0000C59C 0A 6E                   	add		sp,sp,#10	; clean up the stack
   1015 0000C59E 21 BE                   	jmp		FINISH
                                        
                                        
   1018 0000C5A0                        DEFLT
   1019 0000C5A0 80 E1                       lb      r1,[r8]
   1020 0000C5A2 FF 4F 13 10                 cmp     r1,#CR      ; empty line is OK
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 17
tb.asm
   1021 0000C5A6 1D B8                   	beq	    FINISH	    ; else it is 'LET'
                                        
                                        
                                        ; 'LET' is followed by a list of items separated by commas.
                                        ; Each item consists of a variable, an equals sign, and an
                                        ; expression.  The interpreter evaluates the expression and sets
                                        ; the variable to that value.  The interpreter will also handle
                                        ; 'LET' commands without the word 'LET'.  This is done by 'DEFLT'.
                                        ;
   1030 0000C5A8                        LET
   1031 0000C5A8 31 40 02 AF                 call	SETVAL		; do the assignment
   1032 0000C5AC 4F 40 02 AF             	call	TSTC		; check for more 'LET' items
   1033 0000C5B0 2C 04                   	db	',',LT1-*+1
   1034 0000C5B2 FA BE                   	br	    LET
   1035 0000C5B4                        LT1
   1036 0000C5B4 16 BE                       br	    FINISH		; until we are finished.
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** LOAD *** & SAVE ***
                                        ;
                                        ; These two commands transfer a program to/from an auxiliary
                                        ; device such as a cassette, another computer, etc.  The program
                                        ; is converted to an easily-stored format: each line starts with
                                        ; a colon, the line no. as 4 hex digits, and the rest of the line.
                                        ; At the end, a line starting with an '@' sign is sent.  This
                                        ; format can be read back with a minimum of processing time by
                                        ; the Butterfly.
                                        ;
   1051 0000C5B6                        LOAD
   1052 0000C5B6 01 4C 09 F8             	lw		r8,TXTBGN	; set pointer to start of prog. area
   1053 0000C5BA 00 40 0D 11             	lw		r1,#CR		; For a CP/M host, tell it we're ready...
   1054 0000C5BE D2 4F 05 AF             	call	GOAUXO		; by sending a CR to finish PIP command.
   1055 0000C5C2                        LOD1
   1056 0000C5C2 D2 4F 05 AF             	call	GOAUXI		; look for start of line
   1057 0000C5C6 FD BA                   	bmi		LOD1
   1058 0000C5C8 FC 4F 10 10             	cmp		r1,#'@'		; end of program?
   1059 0000C5CC 1B A8                   	beq		LODEND
   1060 0000C5CE FE 4F 16 10             	cmp     r1,#0x1A    ; or EOF marker
   1061 0000C5D2 18 A8                   	beq     LODEND
   1062 0000C5D4 FC 4F 16 10             	cmp		r1,#':'		; if not, is it start of line?
   1063 0000C5D8 F4 B9                   	bne		LOD1		; if not, wait for it
   1064 0000C5DA 18 AF                   	call	GCHAR		; get line number
   1065 0000C5DC 80 C1                   	sb		r1,[r8]		; store it
   1066 0000C5DE A1 31                   	shr		r1,#1
   1067 0000C5E0 A1 31                   	shr		r1,#1
   1068 0000C5E2 A1 31                   	shr		r1,#1
   1069 0000C5E4 A1 31                   	shr		r1,#1
   1070 0000C5E6 A1 31                   	shr		r1,#1
   1071 0000C5E8 A1 31                   	shr		r1,#1
   1072 0000C5EA A1 31                   	shr		r1,#1
   1073 0000C5EC A1 31                   	shr		r1,#1
   1074 0000C5EE 81 C1                   	sb		r1,1[r8]
   1075 0000C5F0 02 68                   	add		r8,r8,#2
   1076 0000C5F2                        LOD2
   1077 0000C5F2 D0 4F 0D AF             	call	GOAUXI		; get another text char.
   1078 0000C5F6 FD BA                   	bmi		LOD2
   1079 0000C5F8 80 C1                   	sb		r1,[r8]
   1080 0000C5FA 01 68                   	add		r8,r8,#1	; store it
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 18
tb.asm
   1081 0000C5FC FF 4F 13 10             	cmp		r1,#CR		; is it the end of the line?
   1082 0000C600 F8 B9                   	bne		LOD2		; if not, go back for more
   1083 0000C602 DF BE                   	br		LOD1		; if so, start a new line
   1084 0000C604                        LODEND
   1085 0000C604 09 40 07 D8             	sw		r8,TXTUNF	; set end-of program pointer
   1086 0000C608 D4 4F 01 AE             	br		WSTART		; back to direct mode
                                        
                                        ; get character from input (16 bit value)
   1089 0000C60C                        GCHAR
   1090 0000C60C FA 6E                   	sub		sp,sp,#6
   1091 0000C60E E1 DF                   	sw		lr,[sp]
   1092 0000C610 E3 D5                   	sw		r5,2[sp]
   1093 0000C612 E5 D6                   	sw		r6,4[sp]
   1094 0000C614 04 16                   	lw      r6,#4       ; repeat four times
   1095 0000C616 00 15                   	lw		r5,#0
   1096 0000C618                        GCHAR1
   1097 0000C618 CF 4F 0A AF             	call	GOAUXI		; get a char
   1098 0000C61C FD BA                   	bmi		GCHAR1
   1099 0000C61E 0D AF                   	call	asciiToHex
   1100 0000C620 81 35                   	shl		r5,#1
   1101 0000C622 81 35                   	shl		r5,#1
   1102 0000C624 81 35                   	shl		r5,#1
   1103 0000C626 81 35                   	shl		r5,#1
   1104 0000C628 16 25                   	or		r5,r1
   1105 0000C62A FF 66                   	sub		r6,r6,#1
   1106 0000C62C F5 B9                   	bne     GCHAR1
   1107 0000C62E 50 11                   	lw		r1,r5
   1108 0000C630 E1 FF                   	lw		lr,[sp]
   1109 0000C632 E3 F5                   	lw		r5,2[sp]
   1110 0000C634 E5 F6                   	lw		r6,4[sp]
   1111 0000C636 06 6E                   	add     sp,sp,#6
   1112 0000C638 F0 80                   	ret
                                        
                                        ; convert an ascii char to hex code
                                        ; input
                                        ;	r2 = char to convert
                                        
   1118 0000C63A                        asciiToHex
   1119 0000C63A FC 4F 17 10             	cmp		r1,#'9'
   1120 0000C63E 01 A2                   	ble		a2h1		; less than '9'
   1121 0000C640 F9 61                   	sub		r1,r1,#7	; shift 'A' to '9'+1
   1122 0000C642                        a2h1
   1123 0000C642 D0 61                   	sub		r1,r1,#'0'	;
   1124 0000C644 00 40 5F 31             	and		r1,#15		; make sure a nybble
   1125 0000C648 F0 80                   	ret
                                        
                                        ; SAVE
                                        ; SAVE ON <node number> - copies the code to the specified node
                                        
   1130 0000C64A                        SAVE
   1131 0000C64A 4D 40 06 AF             	call	IGNBLK		; ignore blanks
   1132 0000C64E 80 E1                   	lb		r1,[r8]
   1133 0000C650 FB 4F 11 10             	cmp		r1,#'O'
   1134 0000C654 0A A9                   	bne		SAVE3
   1135 0000C656 81 E1                   	lb		r1,1[r8]
   1136 0000C658 FB 4F 12 10             	cmp		r1,#'N'
   1137 0000C65C 06 A9                   	bne		SAVE3
   1138 0000C65E 02 68                   	add		r8,r8,#2
   1139 0000C660 A4 AF                   	call	OREXPR		; get core #
   1140 0000C662 03 40 06 C1             	sb		r1,tgtNode
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 19
tb.asm
   1141 0000C666 54 40 0F AF             	call	TriggerTgtLoad
   1142 0000C66A                        SAVE3:
   1143 0000C66A 01 4C 09 F8             	lw		r8,TXTBGN	;set pointer to start of prog. area
   1144 0000C66E 09 40 07 F9             	lw		r9,TXTUNF	;set pointer to end of prog. area
   1145 0000C672                        SAVE1
   1146 0000C672 40 AF                   	call    AUXOCRLF    ; send out a CR & LF (CP/M likes this)
   1147 0000C674 9D 28                   	cmp		r8,r9		; are we finished?
   1148 0000C676 33 A5                   	bgeu	SAVEND
   1149 0000C678 03 40 06 E2             	lb		r2,tgtNode
   1150 0000C67C FE 4F 2F 10             	cmp		r2,#$11
   1151 0000C680 13 A8                   	beq		SAVE4
                                        	lb		r1,#':'
   1153 0000C682 04 40 04 C1             	sb		r1,txBuf
   1154 0000C686 80 E1                   	lb		r1,[r8]
   1155 0000C688 04 40 05 C1             	sb		r1,txBuf+1
   1156 0000C68C 81 E1                   	lb		r1,1[r8]
   1157 0000C68E 04 40 06 C1             	sb		r1,txBuf+2
   1158 0000C692 03 40 06 E1             	lb		r1,tgtNode
   1159 0000C696 05 40 03 C1             	sb		r1,txBuf+MSG_DST
                                        	lb		r1,#$11
   1161 0000C69A 05 40 02 C1             	sb		r1,txBuf+MSG_SRC
                                        	lb		r1,#11
   1163 0000C69E 04 40 0B C1             	sb		r1,txBuf+MSG_TYPE
   1164 0000C6A2 FF BF                   	call	Xmit
   1165 0000C6A4 02 68                   	add		r8,r8,#2
   1166 0000C6A6 13 AE                   	br		SAVE2
   1167 0000C6A8                        SAVE4:
   1168 0000C6A8 03 40 0A 11             	lw		r1,#':'		; if not, start a line
   1169 0000C6AC CA 4F 0E AF             	call	GOAUXO
   1170 0000C6B0 80 E1                   	lb		r1,[r8]		; get line number
   1171 0000C6B2 0E 21                   	zxb		r1
   1172 0000C6B4 81 E2                   	lb		r2,1[r8]
   1173 0000C6B6 0E 22                   	zxb		r2
   1174 0000C6B8 81 32                   	shl		r2,#1
   1175 0000C6BA 81 32                   	shl		r2,#1
   1176 0000C6BC 81 32                   	shl		r2,#1
   1177 0000C6BE 81 32                   	shl		r2,#1
   1178 0000C6C0 81 32                   	shl		r2,#1
   1179 0000C6C2 81 32                   	shl		r2,#1
   1180 0000C6C4 81 32                   	shl		r2,#1
   1181 0000C6C6 81 32                   	shl		r2,#1
   1182 0000C6C8 26 21                   	or		r1,r2
   1183 0000C6CA 02 68                   	add		r8,r8,#2
   1184 0000C6CC 1F AF                   	call	PWORD       ; output line number as 4-digit hex
   1185 0000C6CE                        SAVE2
   1186 0000C6CE 80 E1                   	lb		r1,[r8]		; get a text char.
   1187 0000C6D0 01 68                   	add		r8,r8,#1
   1188 0000C6D2 FF 4F 13 10             	cmp		r1,#CR		; is it the end of the line?
   1189 0000C6D6 CD B8                   	beq		SAVE1		; if so, send CR & LF and start new line
   1190 0000C6D8 C9 4F 08 AF             	call	GOAUXO		; send it out
   1191 0000C6DC F8 BE                   	br		SAVE2		; go back for more text
   1192 0000C6DE                        SAVEND
   1193 0000C6DE 04 40 00 11             	lw		r1,#'@'		; send end-of-program indicator
   1194 0000C6E2 C9 4F 03 AF             	call	GOAUXO
   1195 0000C6E6 06 AF                   	call    AUXOCRLF    ; followed by a CR & LF
   1196 0000C6E8 01 40 0A 11             	lw		r1,#0x1A	; and a control-Z to end the CP/M file
   1197 0000C6EC C8 4F 0E AF             	call	GOAUXO
   1198 0000C6F0 CC 4F 0D AE             	br		WSTART		; then go do a warm start
                                        
                                        
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 20
tb.asm
                                        ; output a CR LF sequence to auxillary output
                                        ; Registers Affected
                                        ;   r3 = LF
   1204 0000C6F4                        AUXOCRLF
   1205 0000C6F4 FE 6E                       sub     sp,sp,#2
   1206 0000C6F6 E1 DF                       sw      lr,[sp]
   1207 0000C6F8 00 40 0D 11                 lw      r1,#CR
   1208 0000C6FC C8 4F 06 AF                 call    GOAUXO
   1209 0000C700 0A 11                       lw      r1,#LF
   1210 0000C702 C8 4F 03 AF                 call    GOAUXO
   1211 0000C706 E1 FF                       lw      lr,[sp]
   1212 0000C708 02 6E                   	add		sp,sp,#2
   1213 0000C70A F0 80                       ret
                                        
                                        
                                        ; output a word in hex format
                                        ; tricky because of the need to reverse the order of the chars
   1218 0000C70C                        PWORD
   1219 0000C70C FC 6E                   	sub		sp,sp,#4
   1220 0000C70E E1 DF                   	sw		lr,[sp]
   1221 0000C710 E3 D5                   	sw		r5,2[sp]
   1222 0000C712 0A 40 05 15             	lea     r5,NUMWKA+3
   1223 0000C716 10 14                   	lw		r4,r1		; r4 = value
   1224 0000C718                        pword1
   1225 0000C718 40 11                       lw      r1,r4       ; r1 = value
   1226 0000C71A A1 34                       shr     r4,#1       ; shift over to next nybble
   1227 0000C71C A1 34                       shr     r4,#1
   1228 0000C71E A1 34                       shr     r4,#1
   1229 0000C720 A1 34                       shr     r4,#1
   1230 0000C722 10 AF                       call    toAsciiHex  ; convert LS nybble to ascii hex
   1231 0000C724 50 C1                       sb      r1,[r5]     ; save in work area
   1232 0000C726 FF 65                       sub     r5,r5,#1
   1233 0000C728 F5 4F 5E 10                 cmp     r5,#NUMWKA
   1234 0000C72C F5 B5                       bgeu    pword1
   1235 0000C72E                        pword2
   1236 0000C72E 01 65                       add     r5,r5,#1
   1237 0000C730 50 E1                       lb      r1,[r5]     ; get char to output
   1238 0000C732 C6 4F 0B AF             	call	GOAUXO		; send it
   1239 0000C736 F5 4F 5B 10             	cmp     r5,#NUMWKA+3
   1240 0000C73A F9 B4                   	bltu    pword2
                                        
   1242 0000C73C E3 F5                   	lw		r5,2[sp]
   1243 0000C73E E1 FF                   	lw		lr,[sp]
   1244 0000C740 04 6E                   	add		sp,sp,#4
   1245 0000C742 F0 80                   	ret
                                        
                                        
                                        ; convert nybble in r2 to ascii hex char2
                                        ; r2 = character to convert
                                        
   1251 0000C744                        toAsciiHex
   1252 0000C744 00 40 5F 31             	and		r1,#15		; make sure it's a nybble
   1253 0000C748 FF 4F 16 10             	cmp		r1,#10		; > 10 ?
   1254 0000C74C 01 A0                   	blt		tah1
   1255 0000C74E 07 61                   	add		r1,r1,#7	; bump it up to the letter 'A'
   1256 0000C750                        tah1
   1257 0000C750 30 61                   	add		r1,r1,#'0'	; bump up to ascii '0'
   1258 0000C752 F0 80                   	ret
                                        
                                        
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 21
tb.asm
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** POKE *** & SYSX ***
                                        ;
                                        ; 'POKE expr1,expr2' stores the byte from 'expr2' into the memory
                                        ; address specified by 'expr1'.
                                        ;
                                        ; 'SYSX expr' jumps to the machine language subroutine whose
                                        ; starting address is specified by 'expr'.  The subroutine can use
                                        ; all registers but must leave the stack the way it found it.
                                        ; The subroutine returns to the interpreter by executing an RET.
                                        ;
   1274 0000C754                        POKE
   1275 0000C754 FE 6E                   	sub		sp,sp,#2
   1276 0000C756 29 AF                   	call	OREXPR		; get the memory address
   1277 0000C758 41 40 0C AF             	call	TSTC		; it must be followed by a comma
   1278 0000C75C 2C 10                   	db	',',PKER-*+1
   1279 0000C75E E1 D1                   	sw		r1,[sp]	    ; save the address
   1280 0000C760 24 AF                   	call	OREXPR		; get the byte to be POKE'd
   1281 0000C762 E1 F2                   	lw		r2,[sp]	    ; get the address back
   1282 0000C764 20 C1                   	sb		r1,[r2]		; store the byte in memory
   1283 0000C766 02 6E                   	add		sp,sp,#2
   1284 0000C768 E3 4F 0B AE             	br		FINISH
   1285 0000C76C                        PKER
   1286 0000C76C 2A 4D 02 11             	lea		r1,msgComma
   1287 0000C770 26 40 0C AE             	br		ERROR		; if no comma, say "What?"
                                        
                                        
   1290 0000C774                        POKEW
   1291 0000C774 FE 6E                   	sub		sp,sp,#2
   1292 0000C776 19 AF                   	call	OREXPR		; get the memory address
   1293 0000C778 40 40 0C AF             	call	TSTC		; it must be followed by a comma
   1294 0000C77C 2C F0                   	db	',',PKER-*+1
   1295 0000C77E E1 D1                   	sw		r1,[sp]	    ; save the address
   1296 0000C780 14 AF                   	call	OREXPR		; get the byte to be POKE'd
   1297 0000C782 E1 F2                   	lw		r2,[sp]	    ; get the address back
   1298 0000C784 21 D1                   	sw		r1,[r2]		; store the word in memory
   1299 0000C786 02 6E                   	add		sp,sp,#2
   1300 0000C788 E2 4F 0B AE             	jmp		FINISH
                                        
                                        
   1303 0000C78C                        SYSX
   1304 0000C78C FE 6E                   	sub		sp,sp,#2
   1305 0000C78E 0D AF                   	call	OREXPR		; get the subroutine's address
   1306 0000C790 16 20                   	or		r0,r1		; make sure we got a valid address
   1307 0000C792 04 A9                   	bne		sysx1
   1308 0000C794 2F 4D 07 11             	lea		r1,msgSYSBad
   1309 0000C798 25 40 08 AE             	br		ERROR
   1310 0000C79C                        sysx1
   1311 0000C79C E1 D8                   	sw		r8,[sp]	    ; save the text pointer
   1312 0000C79E C2 49 0F AF             	call	[r1]		; jump to the subroutine
   1313 0000C7A2 E1 F8                   	lw		r8,[sp]	    ; restore the text pointer
   1314 0000C7A4 02 6E                   	add		sp,sp,#2
   1315 0000C7A6 E1 4F 0C AE             	br		FINISH
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** EXPR ***
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 22
tb.asm
                                        ;
                                        ; 'EXPR' evaluates arithmetical or logical expressions.
                                        ; <OREXPR>::= <ANDEXPR> OR <ANDEXPR> ...
                                        ; <ANDEXPR>::=<EXPR> AND <EXPR> ...
                                        ; <EXPR>::=<EXPR2>
                                        ;	   <EXPR2><rel.op.><EXPR2>
                                        ; where <rel.op.> is one of the operators in TAB8 and the result
                                        ; of these operations is 1 if true and 0 if false.
                                        ; <EXPR2>::=(+ or -)<EXPR3>(+ or -)<EXPR3>(...
                                        ; where () are optional and (... are optional repeats.
                                        ; <EXPR3>::=<EXPR4>( <* or /><EXPR4> )(...
                                        ; <EXPR4>::=<variable>
                                        ;	    <function>
                                        ;	    (<EXPR>)
                                        ; <EXPR> is recursive so that the variable '@' can have an <EXPR>
                                        ; as an index, functions can have an <EXPR> as arguments, and
                                        ; <EXPR4> can be an <EXPR> in parenthesis.
                                        ;
                                        
                                        
                                        ; <OREXPR>::=<ANDEXPR> OR <ANDEXPR> ...
                                        ;
   1343 0000C7AA                        OREXPR
   1344 0000C7AA FC 6E                   	sub		sp,sp,#4
   1345 0000C7AC E1 DF                   	sw		lr,[sp]
   1346 0000C7AE 0F AF                   	call	ANDEXPR		; get first <ANDEXPR>
   1347 0000C7B0                        XP_OR1
   1348 0000C7B0 E3 D1                   	sw		r1,2[sp]	; save <ANDEXPR> value
   1349 0000C7B2 1E 4C 03 19             	lea		r9,TAB10		; look up a logical operator
   1350 0000C7B6 24 4C 04 1A             	lea		r10,TAB10_1
   1351 0000C7BA D4 4F 09 AE             	jmp		EXEC		; go do it
                                        
   1353 0000C7BE                        XP_OR
   1354 0000C7BE 07 AF                       call    ANDEXPR
   1355 0000C7C0 E3 F2                       lw      r2,2[sp]
   1356 0000C7C2 26 21                       or      r1,r2
   1357 0000C7C4 F5 BE                       br      XP_OR1
                                        
   1359 0000C7C6                        XP_ORX
   1360 0000C7C6 E3 F1                   	lw		r1,2[sp]
   1361 0000C7C8 E1 FF                       lw      lr,[sp]
   1362 0000C7CA 04 6E                       add     sp,sp,#4
   1363 0000C7CC F0 80                       ret
                                        
                                        
                                        ; <ANDEXPR>::=<EXPR> AND <EXPR> ...
                                        ;
   1368 0000C7CE                        ANDEXPR
   1369 0000C7CE FC 6E                   	sub		sp,sp,#4
   1370 0000C7D0 E1 DF                   	sw		lr,[sp]
   1371 0000C7D2 37 AF                   	call	EXPR		; get first <EXPR>
   1372 0000C7D4                        XP_AND1
   1373 0000C7D4 E3 D1                   	sw		r1,2[sp]	; save <EXPR> value
   1374 0000C7D6 1D 4C 0F 19             	lea		r9,TAB9		; look up a logical operator
   1375 0000C7DA 24 4C 00 1A             	lea		r10,TAB9_1
   1376 0000C7DE D3 4F 07 AE             	jmp		EXEC		; go do it
                                        
   1378 0000C7E2                        XP_AND
   1379 0000C7E2 2F AF                       call    EXPR
   1380 0000C7E4 E3 F2                       lw      r2,2[sp]
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 23
tb.asm
   1381 0000C7E6 25 21                       and     r1,r2
   1382 0000C7E8 F5 BE                       br      XP_AND1
                                        
   1384 0000C7EA                        XP_ANDX
   1385 0000C7EA E3 F1                   	lw		r1,2[sp]
   1386 0000C7EC E1 FF                       lw      lr,[sp]
   1387 0000C7EE 04 6E                       add     sp,sp,#4
   1388 0000C7F0 F0 80                       ret
                                        
                                        
                                        ; Determine if the character is a digit
                                        ;   Parameters
                                        ;       r2 = char to test
                                        ;   Returns
                                        ;       r1 = 1 if digit, otherwise 0
                                        ;
   1397 0000C7F2                        isDigit
   1398 0000C7F2 FD 4F 10 10                 cmp     r1,#'0'
   1399 0000C7F6 05 A0                       blt     isDigitFalse
   1400 0000C7F8 FC 4F 17 10                 cmp     r1,#'9'
   1401 0000C7FC 02 A3                       bgt     isDigitFalse
   1402 0000C7FE 01 11                       lw      r1,#1
   1403 0000C800 F0 80                       ret
   1404 0000C802                        isDigitFalse
   1405 0000C802 00 11                       lw      r1,#0
   1406 0000C804 F0 80                       ret
                                        
                                        
                                        ; Determine if the character is a alphabetic
                                        ;   Parameters
                                        ;       r2 = char to test
                                        ;   Returns
                                        ;       r1 = 1 if alpha, otherwise 0
                                        ;
   1415 0000C806                        isAlpha
   1416 0000C806 FB 4F 1F 10                 cmp     r1,#'A'
   1417 0000C80A 0B A0                       blt     isAlphaFalse
   1418 0000C80C FA 4F 16 10                 cmp     r1,#'Z'
   1419 0000C810 06 A2                       ble     isAlphaTrue
   1420 0000C812 F9 4F 1F 10                 cmp     r1,#'a'
   1421 0000C816 05 A0                       blt     isAlphaFalse
   1422 0000C818 F8 4F 16 10                 cmp     r1,#'z'
   1423 0000C81C 02 A3                       bgt     isAlphaFalse
   1424 0000C81E                        isAlphaTrue
   1425 0000C81E 01 11                       lw      r1,#1
   1426 0000C820 F0 80                       ret
   1427 0000C822                        isAlphaFalse
   1428 0000C822 00 11                       lw      r1,#0
   1429 0000C824 F0 80                       ret
                                        
                                        
                                        ; Determine if the character is a alphanumeric
                                        ;   Parameters
                                        ;       r1 = char to test
                                        ;   Returns
                                        ;       r1 = 1 if alpha, otherwise 0
                                        ;
   1438 0000C826                        isAlnum
   1439 0000C826 FE 6E                       sub     sp,sp,#2
   1440 0000C828 E1 DF                       sw      lr,[sp]
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 24
tb.asm
   1441 0000C82A 10 12                       lw      r2,r1		; save test char
   1442 0000C82C E2 BF                       call    isDigit
   1443 0000C82E 06 A9                       bne		isDigitx	; if it is a digit
   1444 0000C830 20 11                       lw      r1,r2		; get back test char
   1445 0000C832 E9 BF                       call    isAlpha
   1446 0000C834 E1 FF                       lw      lr,[sp]
   1447 0000C836 02 6E                       add		sp,sp,#2
   1448 0000C838 16 21                       or      r1,r1
   1449 0000C83A F0 80                       ret
   1450 0000C83C                        isDigitx
   1451 0000C83C E1 FF                       lw      lr,[sp]
   1452 0000C83E 02 6E                       add     sp,sp,#2	; return Z=0
   1453 0000C840 F0 80                       ret
                                        
                                        
   1456 0000C842                        EXPR
   1457 0000C842 FC 6E                   	sub		sp,sp,#4
   1458 0000C844 E1 DF                   	sw		lr,[sp]
   1459 0000C846 39 AF                   	call	EXPR2
   1460 0000C848 E3 D1                   	sw		r1,2[sp]	; save <EXPR2> value
   1461 0000C84A 1D 4C 05 19             	lea		r9,TAB8		; look up a relational operator
   1462 0000C84E 23 4C 02 1A             	lea		r10,TAB8_1
   1463 0000C852 CF 4F 0D AE             	jmp		EXEC		; go do it
                                        
   1465 0000C856                        XP11
   1466 0000C856 E3 F1                   	lw		r1,2[sp]
   1467 0000C858 28 AF                   	call	XP18	; is it ">="?
   1468 0000C85A 1D 22                   	cmp		r2,r1
   1469 0000C85C 1E A1                   	bge		XPRT1	; no, return r2=1
   1470 0000C85E 19 AE                   	br		XPRT0	; else return r2=0
                                        
   1472 0000C860                        XP12
   1473 0000C860 E3 F1                   	lw		r1,2[sp]
   1474 0000C862 23 AF                   	call	XP18	; is it "<>"?
   1475 0000C864 1D 22                   	cmp		r2,r1
   1476 0000C866 19 A9                   	bne		XPRT1	; no, return r2=1
   1477 0000C868 14 AE                   	br		XPRT0	; else return r2=0
                                        
   1479 0000C86A                        XP13
   1480 0000C86A E3 F1                   	lw		r1,2[sp]
   1481 0000C86C 1E AF                   	call	XP18	; is it ">"?
   1482 0000C86E 1D 22                   	cmp		r2,r1
   1483 0000C870 14 A3                   	bgt		XPRT1	; no, return r2=1
   1484 0000C872 0F AE                   	br		XPRT0	; else return r2=0
                                        
   1486 0000C874                        XP14
   1487 0000C874 E3 F1                   	lw		r1,2[sp]
   1488 0000C876 19 AF                   	call	XP18	; is it "<="?
   1489 0000C878 1D 22                   	cmp		r2,r1
   1490 0000C87A 0F A2                   	ble		XPRT1	; no, return r2=1
   1491 0000C87C 0A AE                   	br		XPRT0	; else return r2=0
                                        
   1493 0000C87E                        XP15
   1494 0000C87E E3 F1                   	lw		r1,2[sp]
   1495 0000C880 14 AF                   	call	XP18	; is it "="?
   1496 0000C882 1D 22                   	cmp		r2,r1
   1497 0000C884 0A A8                   	beq		XPRT1	; if not, return r2=1
   1498 0000C886 05 AE                   	br		XPRT0	; else return r2=0
                                        
                                        
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 25
tb.asm
   1501 0000C888                        XP16
   1502 0000C888 E3 F1                   	lw		r1,2[sp]
   1503 0000C88A 0F AF                   	call	XP18	; is it "<"?
   1504 0000C88C 1D 22                   	cmp		r2,r1
   1505 0000C88E 05 A0                   	blt		XPRT1	; if not, return r2=1
   1506 0000C890 00 AE                   	br		XPRT0	; else return r2=0
                                        
   1508 0000C892                        XPRT0
   1509 0000C892 E1 FF                   	lw		lr,[sp]
   1510 0000C894 04 6E                   	add		sp,sp,#4
   1511 0000C896 00 11                   	lw		r1,#0   ; return r1=0 (false)
   1512 0000C898 F0 80                   	ret
                                        
   1514 0000C89A                        XPRT1
   1515 0000C89A E1 FF                   	lw		lr,[sp]
   1516 0000C89C 04 6E                   	add		sp,sp,#4
   1517 0000C89E 01 11                   	lw		r1,#1	; return r1=1 (true)
   1518 0000C8A0 F0 80                   	ret
                                        
   1520 0000C8A2                        XP17				; it's not a rel. operator
   1521 0000C8A2 E3 F1                   	lw		r1,2[sp]	; return r2=<EXPR2>
   1522 0000C8A4 E1 FF                   	lw		lr,[sp]
   1523 0000C8A6 04 6E                   	add		sp,sp,#4
   1524 0000C8A8 F0 80                   	ret
                                        
   1526 0000C8AA                        XP18
   1527 0000C8AA FC 6E                   	sub		sp,sp,#4
   1528 0000C8AC E1 DF                   	sw		lr,[sp]
   1529 0000C8AE E3 D1                   	sw		r1,2[sp]
   1530 0000C8B0 04 AF                   	call	EXPR2		; do a second <EXPR2>
   1531 0000C8B2 E3 F2                   	lw		r2,2[sp]
   1532 0000C8B4 E1 FF                   	lw		lr,[sp]
   1533 0000C8B6 04 6E                   	add		sp,sp,#4
   1534 0000C8B8 F0 80                   	ret
                                        
                                        ; <EXPR2>::=(+ or -)<EXPR3>(+ or -)<EXPR3>(...
                                        
   1538 0000C8BA                        EXPR2
   1539 0000C8BA FC 6E                   	sub		sp,sp,#4
   1540 0000C8BC E1 DF                   	sw		lr,[sp]
   1541 0000C8BE 36 40 09 AF             	call	TSTC		; negative sign?
   1542 0000C8C2 2D 08                   	db	'-',XP21-*+1
   1543 0000C8C4 00 11                   	lw		r1,#0		; yes, fake '0-'
   1544 0000C8C6 E3 D1                   	sw		r1,2[sp]
   1545 0000C8C8 0F AE                   	br		XP26
   1546 0000C8CA                        XP21
   1547 0000C8CA 36 40 03 AF             	call	TSTC		; positive sign? ignore it
   1548 0000C8CE 2B 02                   	db	'+',XP22-*+1
   1549 0000C8D0                        XP22
   1550 0000C8D0 12 AF                   	call	EXPR3		; first <EXPR3>
   1551 0000C8D2                        XP23
   1552 0000C8D2 E3 D1                   	sw		r1,2[sp]	; yes, save the value
   1553 0000C8D4 35 40 0E AF             	call	TSTC		; add?
   1554 0000C8D8 2B 0A                   	db	'+',XP25-*+1
   1555 0000C8DA 0D AF                   	call	EXPR3		; get the second <EXPR3>
   1556 0000C8DC                        XP24
   1557 0000C8DC E3 F2                   	lw		r2,2[sp]
   1558 0000C8DE 20 21                   	add		r1,r2		; add it to the first <EXPR3>
                                        ;	BVS.L	QHOW		brnch if there's an overflow
   1560 0000C8E0 F8 BE                   	br		XP23		; else go back for more operations
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 26
tb.asm
   1561 0000C8E2                        XP25
   1562 0000C8E2 35 40 07 AF             	call	TSTC		; subtract?
   1563 0000C8E6 2D 08                   	db	'-',XP45-*+1
   1564 0000C8E8                        XP26
   1565 0000C8E8 06 AF                   	call	EXPR3		; get second <EXPR3>
   1566 0000C8EA 20 31                   	neg		r1			; change its sign
   1567 0000C8EC F7 BE                   	br		XP24		; and do an addition
                                        
   1569 0000C8EE                        XP45
   1570 0000C8EE E3 F1                   	lw		r1,2[sp]
   1571 0000C8F0 E1 FF                   	lw		lr,[sp]
   1572 0000C8F2 04 6E                   	add		sp,sp,#4
   1573 0000C8F4 F0 80                   	ret
                                        
                                        
                                        ; <EXPR3>::=<EXPR4>( <* or /><EXPR4> )(...
                                        
   1578 0000C8F6                        EXPR3
   1579 0000C8F6 FC 6E                   	sub		sp,sp,#4
   1580 0000C8F8 E1 DF                   	sw		lr,[sp]
   1581 0000C8FA 14 AF                   	call	EXPR4		; get first <EXPR4>
   1582 0000C8FC                        XP31
   1583 0000C8FC E3 D1                   	sw		r1,2[sp]	; yes, save that first result
   1584 0000C8FE 34 40 09 AF             	call	TSTC		; multiply?
   1585 0000C902 2A 0A                   	db	'*',XP34-*+1
   1586 0000C904 0F AF                   	call	EXPR4		; get second <EXPR4>
   1587 0000C906 E3 F2                   	lw		r2,2[sp]
   1588 0000C908 B8 AF                   	call	MULT32		; multiply the two
   1589 0000C90A F8 BE                   	br		XP31		 ; then look for more terms
   1590 0000C90C                        XP34
   1591 0000C90C 34 40 02 AF             	call	TSTC		; divide?
   1592 0000C910 2F 0C                   	db	'/',XP47-*+1
   1593 0000C912 08 AF                   	call	EXPR4		; get second <EXPR4>
   1594 0000C914 10 12                   	lw      r2,r1
   1595 0000C916 E3 F1                   	lw		r1,2[sp]
   1596 0000C918 CD AF                   	call	DIV32		; do the division
   1597 0000C91A F0 BE                   	br		XP31		; go back for any more terms
                                        
   1599 0000C91C                        XP47
   1600 0000C91C E3 F1                   	lw		r1,2[sp]
   1601 0000C91E E1 FF                   	lw		lr,[sp]
   1602 0000C920 04 6E                   	add		sp,sp,#4
   1603 0000C922 F0 80                   	ret
                                        
                                        
                                        ; Functions are called through EXPR4
                                        ; <EXPR4>::=<variable>
                                        ;	    <function>
                                        ;	    (<EXPR>)
                                        
   1611 0000C924                        EXPR4
   1612 0000C924 FA 6E                       sub     sp,sp,#6
   1613 0000C926 E1 DF                       sw      lr,[sp]
   1614 0000C928 1A 4C 0A 19             	lea		r9,TAB4		; find possible function
   1615 0000C92C 21 4C 08 1A             	lea		r10,TAB4_1
   1616 0000C930 C8 4F 0E AE             	jmp		EXEC        ; branch to function which does subsequent
                                        	                    ; ret for EXPR4
                                        
   1619 0000C934                        XP40                    ; we get here if it wasn't a function
   1620 0000C934 00 11                   	lw		r1,#0
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 27
tb.asm
   1621 0000C936 1D AF                   	call	TSTV		
   1622 0000C938 04 A8                   	beq     XP41        ; nor a variable
   1623 0000C93A 11 F1                   	lw		r1,[r1]		; if a variable, return its value in r1
   1624 0000C93C E1 FF                   	lw      lr,[sp]
   1625 0000C93E 06 6E                   	add     sp,sp,#6
   1626 0000C940 F0 80                   	ret
   1627 0000C942                        XP41
   1628 0000C942 33 40 09 AF             	call	TSTNUM		; or is it a number?
   1629 0000C946 26 22                   	or		r2,r2		; (if not, # of digits will be zero)
   1630 0000C948 01 A9                   	bne		XP46		; if so, return it in r1
   1631 0000C94A 03 AF                   	call    PARN        ; check for (EXPR)
   1632 0000C94C                        XP46
   1633 0000C94C E1 FF                   	lw      lr,[sp]
   1634 0000C94E 06 6E                   	add     sp,sp,#6
   1635 0000C950 F0 80                   	ret
                                        
                                        
                                        ; Check for a parenthesized expression
   1639 0000C952                        PARN
   1640 0000C952 FE 6E                   	sub		sp,sp,#2
   1641 0000C954 E1 DF                   	sw		lr,[sp]
   1642 0000C956 31 40 0D AF             	call	TSTC		; else look for ( OREXPR )
   1643 0000C95A 28 10                   	db	'(',XP43-*+1
   1644 0000C95C 26 BF                   	call	OREXPR
   1645 0000C95E 31 40 09 AF             	call	TSTC
   1646 0000C962 29 08                   	db	')',XP43-*+1
   1647 0000C964                        XP42
   1648 0000C964 E1 FF                   	lw		lr,[sp]
   1649 0000C966 02 6E                   	add		sp,sp,#2
   1650 0000C968 F0 80                   	ret
   1651 0000C96A                        XP43
   1652 0000C96A 21 4D 0F 11             	lea		r1,msgWhat
   1653 0000C96E 16 40 0D AE             	br		ERROR
                                        
                                        
                                        ; ===== Test for a valid variable name.  Returns Z=1 if not
                                        ;	found, else returns Z=0 and the address of the
                                        ;	variable in r1.
                                        ; Parameters
                                        ;	r1 = 1 = allocate if not found
                                        ; Returns
                                        ;	r1 = address of variable, zero if not found
                                        
   1664 0000C972                        TSTV
   1665 0000C972 FA 6E                   	sub		sp,sp,#6
   1666 0000C974 E1 DF                   	sw		lr,[sp]
   1667 0000C976 E3 D5                   	sw		r5,2[sp]
   1668 0000C978 10 15                   	lw		r5,r1		; allocate flag
   1669 0000C97A 33 40 0E AF             	call	IGNBLK
   1670 0000C97E 80 E1                   	lb		r1,[r8]		; look at the program text
   1671 0000C980 FC 4F 10 10             	cmp     r1,#'@'
   1672 0000C984 1C A0                   	blt     tstv_notfound   ; C=1: not a variable
   1673 0000C986 12 A9                   	bne		TV1			; brnch if not "@" array
   1674 0000C988 01 68                   	add		r8,r8,#1	; If it is, it should be
   1675 0000C98A E3 BF                   	call	PARN		; followed by (EXPR) as its index.
   1676 0000C98C 81 31                   	shl     r1,#1
   1677 0000C98E 81 31                   	shl     r1,#1
                                        ;	BCS.L	QHOW		say "How?" if index is too big
   1679 0000C990 E5 D1                       sw      r1,4[sp]    ; save the index
   1680 0000C992 F4 6E                       sub		sp,sp,#12
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 28
tb.asm
   1681 0000C994 E1 DF                       sw		lr,[sp]
   1682 0000C996 10 40 0F AF             	call	SIZEX		; get amount of free memory
   1683 0000C99A E5 F2                   	lw      r2,4[sp]    ; get back the index
   1684 0000C99C 1D 22                   	cmp     r2,r1       ; see if there's enough memory
   1685 0000C99E 02 A4                   	bltu	TV2
   1686 0000C9A0 14 40 0F AE             	jmp    	QSORRY		; if not, say "Sorry"
   1687 0000C9A4                        TV2
   1688 0000C9A4 09 40 09 F1             	lw      r1,VARBGN   ; put address of array element...
   1689 0000C9A8 22 21                   	sub     r1,r2       ; into r1 (neg. offset is used)
   1690 0000C9AA 05 AE                   	br      TSTVRT
   1691 0000C9AC                        TV1	
   1692 0000C9AC 0D AF                       call    getVarName      ; get variable name
   1693 0000C9AE 07 A8                       beq     tstv_notfound   ; if not, set Z=1 and return
   1694 0000C9B0 50 12                       lw		r2,r5
   1695 0000C9B2 45 AF                       call    findVar     ; find or allocate
   1696 0000C9B4 04 A8                       beq		tstv_notfound
   1697 0000C9B6                        TSTVRT
   1698 0000C9B6 E3 F5                   	lw		r5,2[sp]
   1699 0000C9B8 E1 FF                   	lw		lr,[sp]
   1700 0000C9BA 06 6E                   	add		sp,sp,#6    ; Z=0 (found)
   1701 0000C9BC F0 80                   	ret
   1702 0000C9BE                        tstv_notfound
   1703 0000C9BE E3 F5                   	lw		r5,2[sp]
   1704 0000C9C0 E1 FF                       lw      lr,[sp]
   1705 0000C9C2 06 6E                       add     sp,sp,#6
   1706 0000C9C4 00 11                       lw      r1,#0       ; Z=1 if not found
   1707 0000C9C6 F0 80                       ret
                                        
                                        
                                        ; Returns
                                        ;   r1 = 3 character variable name + type
                                        ;
   1713 0000C9C8                        getVarName
   1714 0000C9C8 FA 6E                       sub     sp,sp,#6
   1715 0000C9CA E1 DF                       sw      lr,[sp]
   1716 0000C9CC E5 D5                       sw		r5,4[sp]
                                        
   1718 0000C9CE 80 E1                       lb      r1,[r8]     ; get first character
   1719 0000C9D0 E3 D1                       sw		r1,2[sp]	; save off current name
   1720 0000C9D2 19 BF                       call    isAlpha
   1721 0000C9D4 2F A8                       beq     gvn1
   1722 0000C9D6 02 15                       lw      r5,#2       ; loop twice more
                                        
                                        	; check for second/third character
   1725 0000C9D8                        gvn4
   1726 0000C9D8 01 68                   	add     r8,r8,#1
   1727 0000C9DA 80 E1                   	lb      r1,[r8]     ; do we have another char ?
   1728 0000C9DC 24 BF                   	call    isAlnum
   1729 0000C9DE 12 A8                   	beq     gvn2        ; nope
   1730 0000C9E0 E3 F1                   	lw      r1,2[sp]    ; get varname
   1731 0000C9E2 81 31                   	shl     r1,#1       ; shift left by eight
   1732 0000C9E4 81 31                   	shl     r1,#1       ; shift left by eight
   1733 0000C9E6 81 31                   	shl     r1,#1       ; shift left by eight
   1734 0000C9E8 81 31                   	shl     r1,#1       ; shift left by eight
   1735 0000C9EA 81 31                   	shl     r1,#1       ; shift left by eight
   1736 0000C9EC 81 31                   	shl     r1,#1       ; shift left by eight
   1737 0000C9EE 81 31                   	shl     r1,#1       ; shift left by eight
   1738 0000C9F0 81 31                   	shl     r1,#1       ; shift left by eight
   1739 0000C9F2 80 E2                   	lb      r2,[r8]
   1740 0000C9F4 26 21                   	or      r1,r2       ; add in new char
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 29
tb.asm
   1741 0000C9F6 E3 D1                       sw      r1,2[sp]   ; save off name again
   1742 0000C9F8 FF 65                       sub		r5,r5,#1
   1743 0000C9FA EE B9                       bne     gvn4
                                        
                                            ; now ignore extra variable name characters
   1746 0000C9FC                        gvn6
   1747 0000C9FC 01 68                       add     r8,r8,#1
   1748 0000C9FE 80 E1                       lb      r1,[r8]
   1749 0000CA00 12 BF                       call    isAlnum
   1750 0000CA02 FC B9                       bne     gvn6        ; keep looping as long as we have identifier chars
                                            
   1752 0000CA04                        gvn2
   1753 0000CA04 80 E1                   	lb		r1,[r8]
   1754 0000CA06 FD 4F 1B 10                 cmp     r1,#'%'
   1755 0000CA0A 05 A8                       beq     gvn3
   1756 0000CA0C FD 4F 1C 10                 cmp     r1,#'$'
   1757 0000CA10 02 A8                       beq     gvn3
   1758 0000CA12 00 11                       lw      r1,#0
   1759 0000CA14 FF 68                       sub     r8,r8,#1
                                        
                                            ; insert variable type indicator and return
   1762 0000CA16                        gvn3
   1763 0000CA16 01 68                       add     r8,r8,#1
   1764 0000CA18 E3 F2                       lw      r2,2[sp]
   1765 0000CA1A 81 32                       shl     r2,#1
   1766 0000CA1C 81 32                       shl     r2,#1
   1767 0000CA1E 81 32                       shl     r2,#1
   1768 0000CA20 81 32                       shl     r2,#1
   1769 0000CA22 81 32                       shl     r2,#1
   1770 0000CA24 81 32                       shl     r2,#1
   1771 0000CA26 81 32                       shl     r2,#1
   1772 0000CA28 81 32                       shl     r2,#1
   1773 0000CA2A 26 21                       or      r1,r2       ; add in variable type
   1774 0000CA2C E1 FF                       lw      lr,[sp]
   1775 0000CA2E E5 F5                       lw		r5,4[sp]
   1776 0000CA30 06 6E                       add     sp,sp,#6   ; return Z = 0, r1 = varname
   1777 0000CA32 F0 80                       ret
                                        
                                            ; not a variable name
   1780 0000CA34                        gvn1
   1781 0000CA34 E1 FF                       lw      lr,[sp]
   1782 0000CA36 E5 F5                       lw		r5,4[sp]
   1783 0000CA38 06 6E                       add     sp,sp,#6
   1784 0000CA3A 00 11                       lw      r1,#0       ; return Z = 1 if not a varname
   1785 0000CA3C F0 80                       ret
                                        
                                        
                                        ; Find variable
                                        ;   r1 = varname
                                        ;	r2 = allocate flag
                                        ; Returns
                                        ;   r1 = variable address, Z =0 if found / allocated, Z=1 if not found
                                        
   1794 0000CA3E                        findVar
   1795 0000CA3E FC 6E                       sub     sp,sp,#4
   1796 0000CA40 E1 DF                       sw      lr,[sp]
   1797 0000CA42 E3 D7                       sw      r7,2[sp]
   1798 0000CA44 09 40 09 F3                 lw      r3,VARBGN
   1799 0000CA48                        fv4
   1800 0000CA48 31 F7                       lw      r7,[r3]     ; get varname / type
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 30
tb.asm
   1801 0000CA4A 0A A8                       beq     fv3         ; no more vars ?
   1802 0000CA4C 7D 21                       cmp     r1,r7       ; match ?
   1803 0000CA4E 0B A8                       beq     fv1
   1804 0000CA50 08 63                       add     r3,r3,#8    ; move to next var
   1805 0000CA52 0A 40 01 F7                 lw      r7,STKBOT
   1806 0000CA56 7D 23                       cmp     r3,r7
   1807 0000CA58 F7 B0                       blt     fv4         ; loop back to look at next var
                                        
                                            ; variable not found
                                            ; no more memory
   1811 0000CA5A 27 4D 02 11                 lea     r1,msgVarSpace
   1812 0000CA5E F6 AE                       br      ERROR
                                        ;    lw      lr,[sp]
                                        ;    lw      r7,2[sp]
                                        ;    add     sp,sp,#4
                                        ;    lw      r1,#0
                                        ;    ret
                                        
                                            ; variable not found
                                            ; allocate new ?
   1821 0000CA60                        fv3
   1822 0000CA60 26 22                   	or		r2,r2
   1823 0000CA62 06 A8                   	beq		fv2
   1824 0000CA64 31 D1                       sw      r1,[r3]     ; save varname / type
                                            ; found variable
                                            ; return address
   1827 0000CA66                        fv1
   1828 0000CA66 34 11                       add     r1,r3,#4
   1829 0000CA68 E1 FF                       lw      lr,[sp]
   1830 0000CA6A E3 F7                       lw      r7,2[sp]
   1831 0000CA6C 04 6E                       add     sp,sp,#4    ; Z = 0, r1 = address
   1832 0000CA6E F0 80                       ret
                                        
                                            ; didn't find var and not allocating
   1835 0000CA70                        fv2
   1836 0000CA70 E1 FF                       lw      lr,[sp]
   1837 0000CA72 E3 F7                       lw      r7,2[sp]
   1838 0000CA74 04 6E                       add     sp,sp,#4    ; Z = 0, r1 = address
   1839 0000CA76 00 11                   	lw		r1,#0		; Z = 1, r1 = 0
   1840 0000CA78 F0 80                       ret
                                        
                                        
                                        ; ===== Multiplies the 32 bit values in r1 and r2, returning
                                        ;	the 32 bit result in r1.
                                        ;
                                        
   1847 0000CA7A                        MULT32
   1848 0000CA7A FA 6E                   	sub		sp,sp,#6
   1849 0000CA7C E1 D5                   	sw		r5,[sp]		; w
   1850 0000CA7E E3 D6                   	sw		r6,2[sp]	; s
   1851 0000CA80 E5 D7                   	sw		r7,4[sp]
                                        
   1853 0000CA82 00 15                   	lw		r5,#0		; w = 0;
   1854 0000CA84 10 16                   	lw		r6,r1
   1855 0000CA86 24 26                   	xor		r6,r2		; s = a ^ b
   1856 0000CA88 16 21                   	or		r1,r1
   1857 0000CA8A 01 AB                   	bpl		mult1
   1858 0000CA8C 20 31                   	neg		r1
   1859 0000CA8E                        mult1
   1860 0000CA8E 26 22                   	or		r2,r2
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 31
tb.asm
   1861 0000CA90 01 AB                   	bpl		mult2
   1862 0000CA92 20 32                   	neg		r2
   1863 0000CA94                        mult2
   1864 0000CA94 10 17                   	lw		r7,r1
   1865 0000CA96 51 37                   	and		r7,#1
   1866 0000CA98 01 A8                   	beq		mult3
   1867 0000CA9A 20 25                   	add		r5,r2		; w += b
   1868 0000CA9C                        mult3
   1869 0000CA9C 81 32                   	shl		r2,#1		; b <<= 1
   1870 0000CA9E A1 31                   	shr		r1,#1		; a >>= 1
   1871 0000CAA0 F9 B9                   	bne		mult2       ; a = 0 ?
   1872 0000CAA2                        mult4
   1873 0000CAA2 66 26                       or      r6,r6
   1874 0000CAA4 01 AB                   	bpl		mult5
   1875 0000CAA6 20 35                   	neg		r5
   1876 0000CAA8                        mult5
   1877 0000CAA8 50 11                   	lw		r1,r5
   1878 0000CAAA E5 F7                   	lw		r7,4[sp]
   1879 0000CAAC E3 F6                   	lw		r6,2[sp]
   1880 0000CAAE E1 F5                   	lw		r5,[sp]
   1881 0000CAB0 06 6E                   	add		sp,sp,#6
   1882 0000CAB2 F0 80                   	ret
                                        
                                        
                                        ; ===== Divide the 32 bit value in r2 by the 32 bit value in r3.
                                        ;	Returns the 32 bit quotient in r1, remainder in r2
                                        ;
                                        ; r2 = a
                                        ; r3 = b
                                        ; r6 = remainder
                                        ; r7 = iteration count
                                        ; r8 = sign
                                        ;
                                        
                                        ; q = a / b
                                        ; a = r1
                                        ; b = r2
                                        ; q = r2
                                        
   1900 0000CAB4                        DIV32
   1901 0000CAB4 26 22                       or      r2,r2       ; check for divide-by-zero
   1902 0000CAB6 03 A9                       bne		div6
   1903 0000CAB8 25 4D 0F 11                 lea		r1,msgDivZero
   1904 0000CABC C7 AE                       br		ERROR		; divide by zero error
   1905 0000CABE                        div6
   1906 0000CABE FA 6E                   	sub		sp,sp,#6
   1907 0000CAC0 E1 D6                   	sw		r6,[sp]
   1908 0000CAC2 E3 D7                   	sw		r7,2[sp]
   1909 0000CAC4 E5 D8                   	sw		r8,4[sp]
                                        
   1911 0000CAC6 02 40 00 18                 lw      r8,#32      ; iteration count for 32 bits
   1912 0000CACA 00 16                   	lw		r6,#0		; r = 0
   1913 0000CACC 20 17                       lw      r7,r2       ; r7 = sign of result
   1914 0000CACE 14 27                       xor     r7,r1
   1915 0000CAD0 16 21                   	or	    r1,r1	    ; take absolute value of r1 (a)
   1916 0000CAD2 01 AB                   	bpl     div1
   1917 0000CAD4 20 31                   	neg     r1
   1918 0000CAD6                        div1
   1919 0000CAD6 26 22                       or      r2,r2	    ; take absolute value of r2 (b)
   1920 0000CAD8 01 AB                   	bpl	    div2
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 32
tb.asm
   1921 0000CADA 20 32                   	neg     r2
   1922 0000CADC                        div2
   1923 0000CADC 81 31                   	shl		r1,#1		; a <<= 1
   1924 0000CADE 61 26                   	adc		r6,r6		; r <<= 1
   1925 0000CAE0 6D 22                   	cmp		r2,r6		; b < r ?
   1926 0000CAE2 02 A7                   	bgtu	div4
   1927 0000CAE4 22 26                   	sub		r6,r2		; r -= b
   1928 0000CAE6 61 31                   	or      r1,#1       ; a |= 1
   1929 0000CAE8                        div4
   1930 0000CAE8 FF 68                   	sub		r8,r8,#1
   1931 0000CAEA F8 B9                       bne     div2        ; n--
   1932 0000CAEC 76 27                   	or      r7,r7
   1933 0000CAEE 01 AB                   	bpl     div5
   1934 0000CAF0 20 31                   	neg     r1
   1935 0000CAF2                        div5
   1936 0000CAF2 60 12                   	lw		r2,r6		; r2 = r
   1937 0000CAF4 E3 F7                   	lw		r7,2[sp]
   1938 0000CAF6 E5 F8                   	lw		r8,4[sp]
   1939 0000CAF8 E1 F6                   	lw		r6,[sp]
   1940 0000CAFA 06 6E                   	add		sp,sp,#6
   1941 0000CAFC F0 80                   	ret
                                        
                                        ; ===== The PEEK function returns the byte stored at the address
                                        ;	contained in the following expression.
                                        ;
   1946 0000CAFE                        PEEK
   1947 0000CAFE 29 BF                   	call	PARN		; get the memory address
   1948 0000CB00 10 E1                   	lb		r1,[r1]		; get the addressed byte
   1949 0000CB02 0E 21                   	zxb		r1			; upper 3 bytes will be zero
   1950 0000CB04 E1 FF                   	lw		lr,[sp]	; and return it
   1951 0000CB06 06 6E                   	add		sp,sp,#6
   1952 0000CB08 F0 80                   	ret
                                        
                                        
                                        ; ===== The PEEK function returns the byte stored at the address
                                        ;	contained in the following expression.
                                        ;
   1958 0000CB0A                        PEEKC
   1959 0000CB0A 23 BF                   	call	PARN		; get the memory address
   1960 0000CB0C 5E 31                   	and		r1,#-2		; align to char address
   1961 0000CB0E 10 F1                   	lh		r1,[r1]		; get the addressed char
   1962 0000CB10 1E 21                   	zxc		r1
   1963 0000CB12 E1 FF                   	lw		lr,[sp]	; and return it
   1964 0000CB14 06 6E                   	add		sp,sp,#6
   1965 0000CB16 F0 80                   	ret
                                        
                                        
                                        ; ===== The PEEK function returns the byte stored at the address
                                        ;	contained in the following expression.
                                        ;
   1971 0000CB18                        PEEKW
   1972 0000CB18 1C BF                   	call	PARN		; get the memory address
   1973 0000CB1A 5C 31                   	and		r1,#-4		; align to word address
   1974 0000CB1C 11 F1                   	lw		r1,[r1]		; get the addressed word
   1975 0000CB1E E1 FF                   	lw		lr,[sp]	; and return it
   1976 0000CB20 06 6E                   	add		sp,sp,#6
   1977 0000CB22 F0 80                   	ret
                                        
                                        
                                        ; user function call
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 33
tb.asm
                                        ; call the user function with argument in r1
   1982 0000CB24                        USRX
   1983 0000CB24 16 BF                   	call	PARN		; get expression value
   1984 0000CB26 E3 D8                   	sw		r8,2[sp]	; save the text pointer
   1985 0000CB28 02 40 05 F2             	lw      r2,usrJmp   ; get usr vector
   1986 0000CB2C A6 49 08 AF             	call	[r2]		; jump to the subroutine
   1987 0000CB30 E3 F8                   	lw		r8,2[sp]	; restore the text pointer
   1988 0000CB32 E1 FF                   	lw		lr,[sp]
   1989 0000CB34 06 6E                   	add		sp,sp,#6
   1990 0000CB36 F0 80                   	ret
                                        
                                        
                                        ; ===== The RND function returns a random number from 1 to
                                        ;	the value of the following expression in D0.
                                        ;
   1996 0000CB38                        RND
   1997 0000CB38 0C BF                   	call	PARN		; get the upper limit
   1998 0000CB3A 16 21                   	or		r1,r1		; it must be positive and non-zero
   1999 0000CB3C 0E A8                   	beq		rnd2
   2000 0000CB3E 0A AA                   	bmi		rnd1
   2001 0000CB40 10 12                   	lw		r2,r1
   2002 0000CB42 CA 4D 04 D0             	sh		r0,RAND+4	; read command
   2003 0000CB46 CA 4D 01 F1             	lw		r1,RAND		; get a number
   2004 0000CB4A 0E AF                   	call	modu4		; RND(n)=MOD(number,n)+1
   2005 0000CB4C 01 61                   	add		r1,r1,#1
   2006 0000CB4E E1 FF                   	lw		lr,[sp]
   2007 0000CB50 06 6E                   	add		sp,sp,#6
   2008 0000CB52 F0 80                   	ret
   2009 0000CB54                        rnd1
   2010 0000CB54 2E 4D 03 11             	lea		r1,msgRNDBad
   2011 0000CB58 79 AE                   	br		ERROR
   2012 0000CB5A                        rnd2
   2013 0000CB5A CA 4D 04 D0             	sh		r0,RAND+4
   2014 0000CB5E CA 4D 01 F1             	lw		r1,RAND
   2015 0000CB62 E1 FF                   	lw		lr,[sp]
   2016 0000CB64 06 6E                   	add		sp,sp,#6
   2017 0000CB66 F0 80                   	ret
                                        
                                        
                                        ; r = a mod b
                                        ; a = r2
                                        ; b = r3
                                        ; r = r1
   2024 0000CB68                        modu4
   2025 0000CB68 FA 6E                   	sub		sp,sp,#6
   2026 0000CB6A E1 D5                   	sw		r5,[sp]
   2027 0000CB6C E3 D6                   	sw		r6,2[sp]
   2028 0000CB6E E5 D7                   	sw		r7,4[sp]
   2029 0000CB70 02 40 00 17             	lw      r7,#32		; n = 32
   2030 0000CB74 00 15                   	lw		r5,#0		; w = 0
   2031 0000CB76 00 16                   	lw		r6,#0		; r = 0
   2032 0000CB78                        mod2
   2033 0000CB78 81 31                   	shl		r1,#1		; a <<= 1
   2034 0000CB7A 61 26                   	adc		r6,r6		; r <<= 1
   2035 0000CB7C 6D 22                   	cmp		r2,r6		; b < r ?
   2036 0000CB7E 01 A7                   	bgtu	mod1
   2037 0000CB80 22 26                   	sub		r6,r2		; r -= b
   2038 0000CB82                        mod1
   2039 0000CB82 FF 67                   	sub		r7,r7,#1
   2040 0000CB84 F9 B9                       bne     mod2        ; n--
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 34
tb.asm
   2041 0000CB86 60 11                   	lw		r1,r6
   2042 0000CB88 E1 F5                   	lw		r5,[sp]
   2043 0000CB8A E3 F6                   	lw		r6,2[sp]
   2044 0000CB8C E5 F7                   	lw		r7,4[sp]
   2045 0000CB8E 06 6E                   	add		sp,sp,#6
   2046 0000CB90 F0 80                   	ret
                                        
                                        
                                        
                                        ; ===== The ABS function returns an absolute value in r2.
                                        ;
   2052 0000CB92                        ABS
   2053 0000CB92 ED 4F 0E AF             	call	PARN		; get the following expr.'s value
   2054 0000CB96 16 21                   	or		r1,r1
   2055 0000CB98 01 AB                   	bpl		abs1
   2056 0000CB9A 20 31                   	neg		r1			; if negative, complement it
                                        ;	bmi		QHOW		; if still negative, it was too big
   2058 0000CB9C                        abs1
   2059 0000CB9C E1 FF                   	lw		lr,[sp]
   2060 0000CB9E 06 6E                   	add		sp,sp,#6
   2061 0000CBA0 F0 80                   	ret
                                        
                                        
                                        ; ===== The SGN function returns the sign in r1. +1,0, or -1
                                        ;
   2066 0000CBA2                        SGN
   2067 0000CBA2 ED 4F 06 AF             	call	PARN		; get the following expr.'s value
   2068 0000CBA6 16 21                   	or		r1,r1
   2069 0000CBA8 04 A8                   	beq		sgn1
   2070 0000CBAA 02 AB                   	bpl		sgn2
   2071 0000CBAC 0F 11                   	lw		r1,#-1
   2072 0000CBAE 01 AE                   	br		sgn1
   2073 0000CBB0                        sgn2
   2074 0000CBB0 01 11                   	lw		r1,#1
   2075 0000CBB2                        sgn1
   2076 0000CBB2 E1 FF                   	lw		lr,[sp]
   2077 0000CBB4 06 6E                   	add		sp,sp,#6
   2078 0000CBB6 F0 80                   	ret
                                        
                                        
                                        ; ===== The SIZE function returns the size of free memory in r1.
                                        ;
   2083 0000CBB8                        SIZEX
   2084 0000CBB8 09 40 09 F1             	lw		r1,VARBGN	; get the number of free bytes...
   2085 0000CBBC 09 40 07 F2             	lw		r2,TXTUNF	; between 'TXTUNF' and 'VARBGN'
   2086 0000CBC0 22 21                   	sub		r1,r2
   2087 0000CBC2 E1 FF                   	lw		lr,[sp]
   2088 0000CBC4 06 6E                   	add		sp,sp,#6
   2089 0000CBC6 F0 80                   	ret					; return the number in r2
                                        
                                        ; ==== Return the node number that the code is running on
                                        ;
   2093 0000CBC8                        NODENUM
   2094 0000CBC8 E4 31                   	tsr		r1,ID
   2095 0000CBCA E1 FF                   	lw		lr,[sp]
   2096 0000CBCC 06 6E                   	add		sp,sp,#6
   2097 0000CBCE F0 80                   	ret
                                        
                                        ;******************************************************************
                                        ;
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 35
tb.asm
                                        ; *** SETVAL *** FIN *** ENDCHK *** ERROR (& friends) ***
                                        ;
                                        ; 'SETVAL' expects a variable, followed by an equal sign and then
                                        ; an expression.  It evaluates the expression and sets the variable
                                        ; to that value.
                                        ;
                                        ; 'FIN' checks the end of a command.  If it ended with ":",
                                        ; execution continues.	If it ended with a CR, it finds the
                                        ; the next line and continues from there.
                                        ;
                                        ; 'ENDCHK' checks if a command is ended with a CR. This is
                                        ; required in certain commands, such as GOTO, RETURN, STOP, etc.
                                        ;
                                        ; 'ERROR' prints the string pointed to by A0. It then prints the
                                        ; line pointed to by CURRNT with a "?" inserted at where the
                                        ; old text pointer (should be on top of the stack) points to.
                                        ; Execution of Tiny BASIC is stopped and a warm start is done.
                                        ; If CURRNT is zero (indicating a direct command), the direct
                                        ; command is not printed. If CURRNT is -1 (indicating
                                        ; 'INPUT' command in progress), the input line is not printed
                                        ; and execution is not terminated but continues at 'INPERR'.
                                        ;
                                        ; Related to 'ERROR' are the following:
                                        ; 'QWHAT' saves text pointer on stack and gets "What?" message.
                                        ; 'AWHAT' just gets the "What?" message and jumps to 'ERROR'.
                                        ; 'QSORRY' and 'ASORRY' do the same kind of thing.
                                        ; 'QHOW' and 'AHOW' also do this for "How?".
                                        ;
                                        
                                        ; returns
                                        ; r2 = variable's address
                                        ;
   2133 0000CBD0                        SETVAL
   2134 0000CBD0 FC 6E                       sub     sp,sp,#4
   2135 0000CBD2 E1 DF                       sw      lr,[sp]
   2136 0000CBD4 01 11                       lw		r1,#1		; allocate var
   2137 0000CBD6 EC 4F 0C AF                 call	TSTV		; variable name?
   2138 0000CBDA 03 A9                       bne		sv2
   2139 0000CBDC 2C 4D 0C 11                	lea		r1,msgVar
   2140 0000CBE0 35 AE                      	br		ERROR 
   2141 0000CBE2                        sv2
   2142 0000CBE2 E3 D1                   	sw      r1,2[sp]    ; save the variable's address
   2143 0000CBE4 1D 40 06 AF             	call	TSTC		; get past the "=" sign
   2144 0000CBE8 3D 12                   	db	'=',SV1-*+1
   2145 0000CBEA DD 4F 0E AF             	call	OREXPR		; evaluate the expression
   2146 0000CBEE E3 F2                   	lw      r2,2[sp]    ; get back the variable's address
   2147 0000CBF0 21 D1                   	sw      r1,[r2]     ; and save value in the variable
   2148 0000CBF2 20 11                   	lw		r1,r2		; return r1 = variable address
   2149 0000CBF4 E1 FF                   	lw      lr,[sp]
   2150 0000CBF6 04 6E                   	add     sp,sp,#4
   2151 0000CBF8 F0 80                   	ret
   2152 0000CBFA                        SV1
   2153 0000CBFA 26 AE                       br	    QWHAT		; if no "=" sign
                                        
                                        
   2156 0000CBFC                        FIN
   2157 0000CBFC FE 6E                   	sub		sp,sp,#2
   2158 0000CBFE E1 DF                   	sw		lr,[sp]
   2159 0000CC00 1C 40 08 AF             	call	TSTC		; *** FIN ***
   2160 0000CC04 3A 08                   	db	':',FI1-*+1
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 36
tb.asm
   2161 0000CC06 02 6E                   	add		sp,sp,#2	; if ":", discard return address
   2162 0000CC08 B7 4F 0D AE             	br		RUNSML		; continue on the same line
   2163 0000CC0C                        FI1
   2164 0000CC0C 1C 40 02 AF             	call	TSTC		; not ":", is it a CR?
   2165 0000CC10 0D 0A                   	db	CR,FI2-*+1
   2166 0000CC12 E1 FF                   	lw		lr,[sp]	; else return to the caller
   2167 0000CC14 02 6E                   	add		sp,sp,#2	; yes, purge return address
   2168 0000CC16 B6 4F 09 AE             	br		RUNNXL		; execute the next line
   2169 0000CC1A                        FI2
   2170 0000CC1A E1 FF                   	lw		lr,[sp]	; else return to the caller
   2171 0000CC1C 02 6E                   	add		sp,sp,#2
   2172 0000CC1E F0 80                   	ret
                                        
                                        
                                        ; Check that there is nothing else on the line
                                        ; Registers Affected
                                        ;   r1
                                        ;
   2179 0000CC20                        ENDCHK
   2180 0000CC20 FE 6E                   	sub		sp,sp,#2
   2181 0000CC22 E1 DF                   	sw		lr,[sp]
   2182 0000CC24 1E 40 09 AF             	call	IGNBLK
   2183 0000CC28 80 E1                   	lb		r1,[r8]
   2184 0000CC2A FF 4F 13 10             	cmp		r1,#CR		; does it end with a CR?
   2185 0000CC2E 03 A8                   	beq		ec1
   2186 0000CC30 3A 4D 06 11             	lea		r1,msgExtraChars
   2187 0000CC34 0B AE                   	jmp		ERROR
   2188 0000CC36                        ec1
   2189 0000CC36 E1 FF                   	lw		lr,[sp]
   2190 0000CC38 02 6E                   	add		sp,sp,#2
   2191 0000CC3A F0 80                   	ret
                                        
                                        
   2194 0000CC3C                        TOOBIG
   2195 0000CC3C 39 4D 01 11             	lea		r1,msgTooBig
   2196 0000CC40 05 AE                   	br		ERROR
   2197 0000CC42                        QSORRY
   2198 0000CC42 22 4D 07 11                 lea     r1,SRYMSG
   2199 0000CC46 02 AE                   	br	    ERROR
   2200 0000CC48                        QWHAT
   2201 0000CC48 21 4D 0F 11             	lea		r1,msgWhat
   2202 0000CC4C                        ERROR
   2203 0000CC4C 21 40 0D AF             	call	PRMESG		; display the error message
   2204 0000CC50 08 40 07 F1             	lw		r1,CURRNT	; get the current line number
   2205 0000CC54 A1 4F 0B A8             	beq		WSTART		; if zero, do a warm start
   2206 0000CC58 11 10                   	cmp		r1,#-1		; is the line no. pointer = -1?
   2207 0000CC5A C5 4F 0F A8             	beq		INPERR		; if so, redo input
   2208 0000CC5E 80 E5                   	lb		r5,[r8]		; save the char. pointed to
   2209 0000CC60 80 C0                   	sb		r0,[r8]		; put a zero where the error is
   2210 0000CC62 08 40 07 F1             	lw		r1,CURRNT	; point to start of current line
   2211 0000CC66 17 40 07 AF             	call	PRTLN		; display the line in error up to the 0
   2212 0000CC6A 10 16                   	lw      r6,r1       ; save off end pointer
   2213 0000CC6C 80 C5                   	sb		r5,[r8]		; restore the character
   2214 0000CC6E 03 40 0F 11             	lw		r1,#'?'		; display a "?"
   2215 0000CC72 9C 4F 07 AF             	call	GOOUT
   2216 0000CC76 00 12                   	lw      r2,#0       ; stop char = 0
   2217 0000CC78 6F 11                   	sub		r1,r6,#1	; point back to the error char.
   2218 0000CC7A B6 AF                   	call	PRTSTG		; display the rest of the line
   2219 0000CC7C A0 4F 07 AE             	jmp	    WSTART		; and do a warm start
                                        
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 37
tb.asm
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** GETLN *** FNDLN (& friends) ***
                                        ;
                                        ; 'GETLN' reads in input line into 'BUFFER'. It first prompts with
                                        ; the character in r3 (given by the caller), then it fills the
                                        ; buffer and echos. It ignores LF's but still echos
                                        ; them back. Control-H is used to delete the last character
                                        ; entered (if there is one), and control-X is used to delete the
                                        ; whole line and start over again. CR signals the end of a line,
                                        ; and causes 'GETLN' to return.
                                        ;
                                        ;
   2235 0000CC80                        GETLN
   2236 0000CC80 FC 6E                   	sub		sp,sp,#4
   2237 0000CC82 E1 DF                   	sw		lr,[sp]
   2238 0000CC84 E3 D5                   	sw		r5,2[sp]
   2239 0000CC86 9B 4F 0D AF             	call	GOOUT		; display the prompt
   2240 0000CC8A 01 11                   	lw		r1,#1		; turn on cursor flash
   2241 0000CC8C 03 40 0C C1             	sb		r1,cursFlash
   2242 0000CC90 02 40 00 11             	lw		r1,#' '		; and a space
   2243 0000CC94 9B 4F 06 AF             	call	GOOUT
   2244 0000CC98 0A 40 0E 18             	lea		r8,BUFFER	; r8 is the buffer pointer
   2245 0000CC9C                        GL1
   2246 0000CC9C 1E 40 03 AF             	call	CHKIO		; check keyboard
   2247 0000CCA0 FD B8                   	beq		GL1			; wait for a char. to come in
   2248 0000CCA2 FF 4F 18 10             	cmp		r1,#CTRLH	; delete last character?
   2249 0000CCA6 14 A8                   	beq		GL3			; if so
   2250 0000CCA8 FE 4F 18 10             	cmp		r1,#CTRLX	; delete the whole line?
   2251 0000CCAC 20 A8                   	beq		GL4			; if so
   2252 0000CCAE FF 4F 13 10             	cmp		r1,#CR		; accept a CR
   2253 0000CCB2 03 A8                   	beq		GL2
   2254 0000CCB4 FE 4F 10 10             	cmp		r1,#' '		; if other control char., discard it
   2255 0000CCB8 F1 B4                   	bltu	GL1
   2256 0000CCBA                        GL2
   2257 0000CCBA 80 C1                   	sb		r1,[r8]		; save the char.
   2258 0000CCBC 01 68                   	add		r8,r8,#1
   2259 0000CCBE 9A 4F 01 AF             	call	GOOUT		; echo the char back out
   2260 0000CCC2 8F E1                   	lb      r1,-1[r8]   ; get char back (GOOUT destroys r1)
   2261 0000CCC4 FF 4F 13 10             	cmp		r1,#CR		; if it's a CR, end the line
   2262 0000CCC8 25 A8                   	beq		GL7
   2263 0000CCCA F0 4F 83 10             	cmp		r8,#(BUFFER+BUFLEN-1)	; any more room?
   2264 0000CCCE E6 B4                   	bltu	GL1			; yes: get some more, else delete last char.
                                        
   2266 0000CCD0                        GL3
   2267 0000CCD0 08 11                   	lw		r1,#CTRLH	; delete a char. if possible
   2268 0000CCD2 99 4F 07 AF             	call	GOOUT
   2269 0000CCD6 02 40 00 11             	lw		r1,#' '
   2270 0000CCDA 99 4F 03 AF             	call	GOOUT
   2271 0000CCDE F5 4F 82 10             	cmp		r8,#BUFFER	; any char.'s left?
   2272 0000CCE2 DC B6                   	bleu	GL1			; if not
   2273 0000CCE4 08 11                   	lw		r1,#CTRLH	; if so, finish the BS-space-BS sequence
   2274 0000CCE6 98 4F 0D AF             	call	GOOUT
   2275 0000CCEA FF 68                   	sub		r8,r8,#1	; decrement the text pointer
   2276 0000CCEC D7 BE                   	br		GL1			; back for more
                                        
   2278 0000CCEE                        GL4
   2279 0000CCEE 80 11                   	lw		r1,r8		; delete the whole line
   2280 0000CCF0 F5 4F 12 15             	sub		r5,r1,#BUFFER   ; figure out how many backspaces we need
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 38
tb.asm
   2281 0000CCF4 0C A8                   	beq		GL6			; if none needed, brnch
   2282 0000CCF6                        GL5	
   2283 0000CCF6 08 11                   	lw		r1,#CTRLH	; and display BS-space-BS sequences
   2284 0000CCF8 98 4F 04 AF             	call	GOOUT
   2285 0000CCFC 02 40 00 11             	lw		r1,#' '
   2286 0000CD00 98 4F 00 AF             	call	GOOUT
   2287 0000CD04 08 11                   	lw		r1,#CTRLH
   2288 0000CD06 97 4F 0D AF             	call	GOOUT
   2289 0000CD0A FF 65                   	sub		r5,r5,#1
   2290 0000CD0C F4 B9                   	bne     GL5
   2291 0000CD0E                        GL6
   2292 0000CD0E 0A 40 0E 18             	lea		r8,BUFFER	; reinitialize the text pointer
   2293 0000CD12 C4 BE                   	br		GL1			; and go back for more
   2294 0000CD14                        GL7
   2295 0000CD14 00 11                   	lw		r1,#0		; turn off cursor flash
   2296 0000CD16 03 40 0C C1             	sb		r1,cursFlash
   2297 0000CD1A 0A 11                   	lw		r1,#LF		; echo a LF for the CR
   2298 0000CD1C 97 4F 02 AF             	call	GOOUT
   2299 0000CD20 E1 FF                   	lw		lr,[sp]
   2300 0000CD22 E3 F5                   	lw		r5,2[sp]
   2301 0000CD24 04 6E                   	add		sp,sp,#4
   2302 0000CD26 F0 80                   	ret
                                        
                                        
                                        ; 'FNDLN' finds a line with a given line no. (in r1) in the
                                        ; text save area.  r9 is used as the text pointer. If the line
                                        ; is found, r9 will point to the beginning of that line
                                        ; (i.e. the high byte of the line no.), and flags are Z.
                                        ; If that line is not there and a line with a higher line no.
                                        ; is found, r9 points there and flags are NC & NZ. If we reached
                                        ; the end of the text save area and cannot find the line, flags
                                        ; are C & NZ.
                                        ; Z=1 if line found
                                        ; N=1 if end of text save area
                                        ; Z=0 & N=0 if higher line found
                                        ;
                                        ; 'FNDLN' will initialize r9 to the beginning of the text save
                                        ; area to start the search. Some other entries of this routine
                                        ; will not initialize r9 and do the search.
                                        ; 'FNDLNP' will start with r9 and search for the line no.
                                        ; 'FNDNXT' will bump r9 by 2, find a CR and then start search.
                                        ; 'FNDSKP' uses r9 to find a CR, and then starts the search.
                                        ; return Z=1 if line is found, r9 = pointer to line
                                        ;
                                        ; Parameters
                                        ;	r1 = line number to find
                                        ;
   2328 0000CD28                        FNDLN
   2329 0000CD28 00 40 11 10             	cmp		r1,#0xFFFF	; line no. must be < 65535
   2330 0000CD2C 03 A6                   	bleu	fl1
   2331 0000CD2E 2B 4D 06 11             	lea		r1,msgLineRange
   2332 0000CD32 8C BE                   	br		ERROR
   2333 0000CD34                        fl1
   2334 0000CD34 01 4C 09 F9             	lw		r9,TXTBGN	; init. the text save pointer
                                        
   2336 0000CD38                        FNDLNP
   2337 0000CD38 09 40 07 FA             	lw		r10,TXTUNF	; check if we passed the end
   2338 0000CD3C FF 6A                   	sub		r10,r10,#1
   2339 0000CD3E AD 29                   	cmp		r9,r10
   2340 0000CD40 0F A7                   	bgtu	FNDRET		; if so, return with Z=0 & C=1
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 39
tb.asm
   2341 0000CD42 90 E3                   	lb		r3,[r9]		; get low order byte of line number
   2342 0000CD44 0E 23                   	zxb		r3
   2343 0000CD46 91 E2                   	lb		r2,1[r9]	; get high order byte
   2344 0000CD48 0E 22                   	zxb		r2
   2345 0000CD4A 81 32                   	shl		r2,#1
   2346 0000CD4C 81 32                   	shl		r2,#1
   2347 0000CD4E 81 32                   	shl		r2,#1
   2348 0000CD50 81 32                   	shl		r2,#1
   2349 0000CD52 81 32                   	shl		r2,#1
   2350 0000CD54 81 32                   	shl		r2,#1
   2351 0000CD56 81 32                   	shl		r2,#1
   2352 0000CD58 81 32                   	shl		r2,#1
   2353 0000CD5A 36 22                   	or		r2,r3		; build whole line number
   2354 0000CD5C 2D 21                   	cmp		r1,r2		; is this the line we want?
   2355 0000CD5E 01 A7                   	bgtu	FNDNXT		; no, not there yet
   2356 0000CD60                        FNDRET
   2357 0000CD60 F0 80                   	ret			; return the cond. codes
                                        
   2359 0000CD62                        FNDNXT
   2360 0000CD62 02 69                   	add		r9,r9,#2	; find the next line
                                        
   2362 0000CD64                        FNDSKP
   2363 0000CD64 90 E2                   	lb		r2,[r9]
   2364 0000CD66 01 69                   	add		r9,r9,#1
   2365 0000CD68 FF 4F 23 10             	cmp		r2,#CR		; try to find a CR
   2366 0000CD6C FB B9                   	bne		FNDSKP		; keep looking
   2367 0000CD6E E4 BE                   	br		FNDLNP		; check if end of text
                                        
                                        
                                        ;******************************************************************
                                        ; 'MVUP' moves a block up from where r1 points to where r2 points
                                        ; until r1=r3
                                        ;
   2374 0000CD70                        MVUP1
   2375 0000CD70 10 E4                   	lb		r4,[r1]
   2376 0000CD72 20 C4                   	sb		r4,[r2]
   2377 0000CD74 01 61                   	add		r1,r1,#1
   2378 0000CD76 01 62                   	add		r2,r2,#1
   2379 0000CD78                        MVUP
   2380 0000CD78 3D 21                   	cmp		r1,r3
   2381 0000CD7A FA B9                   	bne		MVUP1
   2382 0000CD7C                        MVRET
   2383 0000CD7C F0 80                   	ret
                                        
                                        
                                        ; 'MVDOWN' moves a block down from where r1 points to where r2
                                        ; points until r1=r3
                                        ;
   2389 0000CD7E                        MVDOWN1
   2390 0000CD7E FF 61                   	sub		r1,r1,#1
   2391 0000CD80 FF 62                   	sub		r2,r2,#1
   2392 0000CD82 10 E4                   	lb		r4,[r1]
   2393 0000CD84 20 C4                   	sb		r4,[r2]
   2394 0000CD86                        MVDOWN
   2395 0000CD86 3D 21                   	cmp		r1,r3
   2396 0000CD88 FA B9                   	bne		MVDOWN1
   2397 0000CD8A F0 80                   	ret
                                        
                                        
                                        ; 'POPA' restores the 'FOR' loop variable save area from the stack
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 40
tb.asm
                                        ;
                                        ; 'PUSHA' stacks for 'FOR' loop variable save area onto the stack
                                        ;
                                        ; Note: a single zero word is stored on the stack in the
                                        ; case that no FOR loops need to be saved. This needs to be
                                        ; done because PUSHA / POPA is called all the time.
                                        
   2408 0000CD8C                        POPA
   2409 0000CD8C E1 F1                   	lw		r1,[sp]		; restore LOPVAR, but zero means no more
   2410 0000CD8E 08 40 0D D1             	sw		r1,LOPVAR
   2411 0000CD92 0E A8                   	beq		PP1
   2412 0000CD94 E9 F1                   	lw		r1,8[sp]	; if not zero, restore the rest
   2413 0000CD96 09 40 05 D1             	sw		r1,LOPPT
   2414 0000CD9A E7 F1                   	lw		r1,6[sp]
   2415 0000CD9C 09 40 03 D1             	sw		r1,LOPLN
   2416 0000CDA0 E5 F1                   	lw		r1,4[sp]
   2417 0000CDA2 09 40 01 D1             	sw		r1,LOPLMT
   2418 0000CDA6 E3 F1                   	lw		r1,2[sp]
   2419 0000CDA8 08 40 0F D1             	sw		r1,LOPINC
   2420 0000CDAC 0A 6E                   	add		sp,sp,#10
   2421 0000CDAE F0 80                   	ret
   2422 0000CDB0                        PP1
   2423 0000CDB0 02 6E                   	add		sp,sp,#2
   2424 0000CDB2 F0 80                   	ret
                                        
                                        
   2427 0000CDB4                        PUSHA
   2428 0000CDB4 0A 40 01 F1             	lw		r1,STKBOT	; Are we running out of stack room?
   2429 0000CDB8 0A 61                   	add		r1,r1,#10	; we might need this many bytes
   2430 0000CDBA 1D 2E                   	cmp		sp,r1
   2431 0000CDBC 42 B4                   	bltu	QSORRY		; out of stack space
   2432 0000CDBE 08 40 0D F1             	lw		r1,LOPVAR	; save loop variables
   2433 0000CDC2 0F A8                   	beq		PU1			; if LOPVAR is zero, that's all
   2434 0000CDC4 F6 6E                   	sub		sp,sp,#10
   2435 0000CDC6 E1 D1                   	sw		r1,[sp]
   2436 0000CDC8 09 40 05 F1             	lw		r1,LOPPT
   2437 0000CDCC E9 D1                   	sw		r1,8[sp]	; else save all the others
   2438 0000CDCE 09 40 03 F1             	lw		r1,LOPLN
   2439 0000CDD2 E7 D1                   	sw		r1,6[sp]
   2440 0000CDD4 09 40 01 F1             	lw		r1,LOPLMT
   2441 0000CDD8 E5 D1                   	sw		r1,4[sp]
   2442 0000CDDA 08 40 0F F1             	lw		r1,LOPINC
   2443 0000CDDE E3 D1                   	sw		r1,2[sp]
   2444 0000CDE0 F0 80                   	ret
   2445 0000CDE2                        PU1
   2446 0000CDE2 FE 6E                   	sub		sp,sp,#2
   2447 0000CDE4 E1 D1                   	sw		r1,[sp]
   2448 0000CDE6 F0 80                   	ret
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** PRTSTG *** QTSTG *** PRTNUM *** PRTLN ***
                                        ;
                                        ; 'PRTSTG' prints a string pointed to by r3. It stops printing
                                        ; and returns to the caller when either a CR is printed or when
                                        ; the next byte is the same as what was passed in r4 by the
                                        ; caller.
                                        ;
                                        ; 'QTSTG' looks for an underline (back-arrow on some systems),
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 41
tb.asm
                                        ; single-quote, or double-quote.  If none of these are found, returns
                                        ; to the caller.  If underline, outputs a CR without a LF.  If single
                                        ; or double quote, prints the quoted string and demands a matching
                                        ; end quote.  After the printing, the next 2 bytes of the caller are
                                        ; skipped over (usually a short brnch instruction).
                                        ;
                                        ; 'PRTNUM' prints the 32 bit number in r3, leading blanks are added if
                                        ; needed to pad the number of spaces to the number in r4.
                                        ; However, if the number of digits is larger than the no. in
                                        ; r4, all digits are printed anyway. Negative sign is also
                                        ; printed and counted in, positive sign is not.
                                        ;
                                        ; 'PRTLN' prints the saved text line pointed to by r3
                                        ; with line no. and all.
                                        ;
                                        
                                        ; r1 = pointer to string
                                        ; r2 = stop character
                                        ; return r1 = pointer to end of line + 1
                                        
   2481 0000CDE8                        PRTSTG
   2482 0000CDE8 F8 6E                       sub     sp,sp,#8
   2483 0000CDEA E1 DF                       sw      lr,[sp]
   2484 0000CDEC E3 D5                       sw      r5,2[sp]
   2485 0000CDEE E5 D6                       sw      r6,4[sp]
   2486 0000CDF0 E7 D7                       sw      r7,6[sp]
   2487 0000CDF2 10 15                       lw      r5,r1       ; r5 = pointer
   2488 0000CDF4 20 16                       lw      r6,r2       ; r6 = stop char
   2489 0000CDF6                        PS1
   2490 0000CDF6 50 E7                       lb      r7,[r5]     ; get a text character
   2491 0000CDF8 01 65                       add     r5,r5,#1
   2492 0000CDFA 6D 27                   	cmp     r7,r6		; same as stop character?
   2493 0000CDFC 09 A8                   	beq	    PRTRET		; if so, return
   2494 0000CDFE 70 11                   	lw      r1,r7
   2495 0000CE00 90 4F 00 AF             	call	GOOUT		; display the char.
   2496 0000CE04 FF 4F 73 10             	cmp     r7,#CR      ; is it a C.R.?
   2497 0000CE08 F6 B9                   	bne	    PS1		    ; no, go back for more
   2498 0000CE0A 0A 11                   	lw      r1,#LF      ; yes, add a L.F.
   2499 0000CE0C 8F 4F 0A AF             	call	GOOUT
   2500 0000CE10                        PRTRET
   2501 0000CE10 70 12                       lw      r2,r7       ; return r2 = stop char
   2502 0000CE12 50 11                   	lw		r1,r5		; return r1 = line pointer
   2503 0000CE14 E3 F5                       lw      r5,2[sp]
   2504 0000CE16 E5 F6                       lw      r6,4[sp]
   2505 0000CE18 E7 F7                       lw      r7,6[sp]
   2506 0000CE1A E1 FF                       lw      lr,[sp]
   2507 0000CE1C 08 6E                       add     sp,sp,#8
   2508 0000CE1E F0 80                       ret			        ; then return
                                        
                                        
   2511 0000CE20                        QTSTG
   2512 0000CE20 FE 6E                   	sub		sp,sp,#2
   2513 0000CE22 E1 DF                   	sw		lr,[sp]
   2514 0000CE24 B7 AF                   	call	TSTC		; *** QTSTG ***
   2515 0000CE26 22 18                   	db	'"',QT3-*+1
   2516 0000CE28 02 40 02 12             	lw		r2,#'"'		; it is a "
   2517 0000CE2C                        QT1
   2518 0000CE2C 80 11                   	lw		r1,r8
   2519 0000CE2E DC BF                   	call	PRTSTG		; print until another
   2520 0000CE30 10 18                   	lw		r8,r1
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 42
tb.asm
   2521 0000CE32 FF 4F 26 10             	cmp		r2,#LF		; was last one a CR?
   2522 0000CE36 0E A9                   	bne		QT2
   2523 0000CE38 02 6E                   	add		sp,sp,#2
   2524 0000CE3A A5 4F 07 AE             	br		RUNNXL		; if so, run next line
   2525 0000CE3E                        QT3
   2526 0000CE3E AA AF                   	call	TSTC		; is it a single quote?
   2527 0000CE40 27 08                   	db	"'",QT4-*+1
   2528 0000CE42 02 40 07 12             	lw		r2,#''''	; if so, do same as above
   2529 0000CE46 F2 BE                   	br		QT1
   2530 0000CE48                        QT4
   2531 0000CE48 A5 AF                   	call	TSTC		; is it an underline?
   2532 0000CE4A 5F 10                   	db	'_',QT5-*+1
   2533 0000CE4C 00 40 0D 11             	lw		r1,#CR		; if so, output a CR without LF
   2534 0000CE50 8D 4F 08 AF             	call	GOOUT
   2535 0000CE54                        QT2
   2536 0000CE54 E1 FF                   	lw		lr,[sp]
   2537 0000CE56 02 6E                   	add		sp,sp,#2
   2538 0000CE58 F2 80                   	jmp		2[lr]		; skip over 2 bytes when returning
   2539 0000CE5A                        QT5						; not " ' or _
   2540 0000CE5A E1 FF                   	lw		lr,[sp]
   2541 0000CE5C 02 6E                   	add		sp,sp,#2
   2542 0000CE5E F0 80                   	ret
                                        
                                        
                                        ; Output a CR LF sequence
                                        ;
   2547 0000CE60                        prCRLF
   2548 0000CE60 FE 6E                   	sub		sp,sp,#2
   2549 0000CE62 E1 DF                   	sw		lr,[sp]
   2550 0000CE64 00 40 0D 11             	lw		r1,#CR
   2551 0000CE68 8C 4F 0C AF             	call	GOOUT
   2552 0000CE6C 0A 11                   	lw		r1,#LF
   2553 0000CE6E 8C 4F 09 AF             	call	GOOUT
   2554 0000CE72 E1 FF                   	lw		lr,[sp]
   2555 0000CE74 02 6E                   	add		sp,sp,#2
   2556 0000CE76 F0 80                   	ret
                                        
                                        
                                        ; r1 = number to print
                                        ; r2 = number of digits
                                        ; Register Usage
                                        ;	r5 = number of padding spaces
   2563 0000CE78                        PRTNUM
   2564 0000CE78 F8 6E                   	sub		sp,sp,#8
   2565 0000CE7A E1 DF                   	sw		lr,[sp]
   2566 0000CE7C E3 D5                   	sw		r5,2[sp]
   2567 0000CE7E E5 D6                   	sw		r6,4[sp]
   2568 0000CE80 E7 D7                   	sw		r7,6[sp]
                                        
   2570 0000CE82 0A 40 02 17             	lea		r7,NUMWKA	; r7 = pointer to numeric work area
   2571 0000CE86 10 16                   	lw		r6,r1		; save number for later
   2572 0000CE88 20 15                   	lw		r5,r2		; r5 = min number of chars
   2573 0000CE8A 16 21                   	
   2574 0000CE8C 02 AB                   	bpl		PN1			; if not
   2575 0000CE8E 20 31                   	neg		r1			; else make it positive
   2576 0000CE90 FF 65                   	sub		r5,r5,#1	; one less for width count
   2577 0000CE92                        PN1
   2578 0000CE92 0A 12                   	lw		r2,#10		; divide by 10
   2579 0000CE94 E0 4F 0E AF             	call	DIV32
   2580 0000CE98 30 62                   	add		r2,r2,#'0'	; convert remainder to ascii
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 43
tb.asm
   2581 0000CE9A 70 C2                   	sb		r2,[r7]		; and store in buffer
   2582 0000CE9C 01 67                   	add		r7,r7,#1
   2583 0000CE9E FF 65                   	sub		r5,r5,#1	; decrement width
   2584 0000CEA0 10 10                   	cmp		r1,#0
   2585 0000CEA2 F7 B9                   	bne		PN1
   2586 0000CEA4                        PN6
   2587 0000CEA4 56 25                   	or		r5,r5		; test pad count
   2588 0000CEA6 06 A2                   	ble		PN4			; skip padding if not needed
   2589 0000CEA8                        PN3
   2590 0000CEA8 02 40 00 11             	lw		r1,#' '		; display the required leading spaces
   2591 0000CEAC 8A 4F 0A AF             	call	GOOUT
   2592 0000CEB0 FF 65                   	sub		r5,r5,#1
   2593 0000CEB2 FA B9                   	bne		PN3
   2594 0000CEB4                        PN4
   2595 0000CEB4 66 26                   	or		r6,r6		; is number negative?
   2596 0000CEB6 04 AB                   	bpl		PN5
   2597 0000CEB8 02 40 0D 11             	lw		r1,#'-'		; if so, display the sign
   2598 0000CEBC 8A 4F 02 AF             	call	GOOUT
   2599 0000CEC0                        PN5
   2600 0000CEC0 FF 67                   	sub		r7,r7,#1
   2601 0000CEC2 70 E1                   	lb		r1,[r7]		; now unstack the digits and display
   2602 0000CEC4 89 4F 0E AF             	call	GOOUT
   2603 0000CEC8 F5 4F 7E 10             	cmp		r7,#NUMWKA
   2604 0000CECC F9 B7                   	bgtu	PN5
   2605 0000CECE                        PNRET
   2606 0000CECE E1 FF                   	lw		lr,[sp]
   2607 0000CED0 E3 F5                   	lw		r5,2[sp]
   2608 0000CED2 E5 F6                   	lw		r6,4[sp]
   2609 0000CED4 E7 F7                   	lw		r7,6[sp]
   2610 0000CED6 08 6E                   	add		sp,sp,#8
   2611 0000CED8 F0 80                   	ret
                                        
                                        
                                        ; r1 = number to print
                                        ; r2 = number of digits
   2616 0000CEDA                        PRTHEXNUM
   2617 0000CEDA F6 6E                   	sub		sp,sp,#10
   2618 0000CEDC E1 DF                   	sw		lr,[sp]
   2619 0000CEDE E3 D5                   	sw		r5,2[sp]
   2620 0000CEE0 E5 D6                   	sw		r6,4[sp]
   2621 0000CEE2 E7 D7                   	sw		r7,6[sp]
   2622 0000CEE4 E9 D8                   	sw		r8,8[sp]
                                        
   2624 0000CEE6 0A 40 02 17             	lea		r7,NUMWKA	; r7 = pointer to numeric work area
   2625 0000CEEA 10 16                   	lw		r6,r1		; save number for later
   2626 0000CEEC 0A 15                   	lw		r5,#10		; r5 = min number of chars
   2627 0000CEEE 10 14                   	lw		r4,r1
   2628 0000CEF0 46 24                   	
   2629 0000CEF2 03 AB                   	bpl		PHN1		; if not
   2630 0000CEF4 20 34                   	neg		r4			; else make it positive
   2631 0000CEF6 FF 65                   	sub		r5,r5,#1	; one less for width count
   2632 0000CEF8 0A 18                   	lw		r8,#10		; maximum of 10 digits
   2633 0000CEFA                        PHN1
   2634 0000CEFA 40 11                   	lw		r1,r4
   2635 0000CEFC 00 40 5F 31             	and		r1,#15
   2636 0000CF00 FF 4F 16 10             	cmp		r1,#10
   2637 0000CF04 02 A0                   	blt		PHN7
   2638 0000CF06 37 61                   	add		r1,r1,#'A'-10
   2639 0000CF08 01 AE                   	br		PHN8
   2640 0000CF0A                        PHN7
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 44
tb.asm
   2641 0000CF0A 30 61                   	add		r1,r1,#'0'		; convert remainder to ascii
   2642 0000CF0C                        PHN8
   2643 0000CF0C 70 C1                   	sb		r1,[r7]		; and store in buffer
   2644 0000CF0E 01 67                   	add		r7,r7,#1
   2645 0000CF10 FF 65                   	sub		r5,r5,#1	; decrement width
   2646 0000CF12 A1 34                   	shr		r4,#1
   2647 0000CF14 A1 34                   	shr		r4,#1
   2648 0000CF16 A1 34                   	shr		r4,#1
   2649 0000CF18 A1 34                   	shr		r4,#1
   2650 0000CF1A 02 A8                   	beq		PHN6			; is it zero yet ?
   2651 0000CF1C FF 68                   	sub		r8,r8,#1	; safety
   2652 0000CF1E ED B9                   	bne		PHN1
   2653 0000CF20                        PHN6
   2654 0000CF20 56 25                   	or		r5,r5		; test pad count
   2655 0000CF22 06 A2                   	ble		PHN4			; skip padding if not needed
   2656 0000CF24                        PHN3
   2657 0000CF24 02 40 00 11             	lw		r1,#' '		; display the required leading spaces
   2658 0000CF28 86 4F 0C AF             	call	GOOUT
   2659 0000CF2C FF 65                   	sub		r5,r5,#1
   2660 0000CF2E FA B9                   	bne		PHN3
   2661 0000CF30                        PHN4
   2662 0000CF30 66 26                   	or		r6,r6		; is number negative?
   2663 0000CF32 04 AB                   	bpl		PHN5
   2664 0000CF34 02 40 0D 11             	lw		r1,#'-'		; if so, display the sign
   2665 0000CF38 86 4F 04 AF             	call	GOOUT
   2666 0000CF3C                        PHN5
   2667 0000CF3C FF 67                   	sub		r7,r7,#1
   2668 0000CF3E 70 E1                   	lb		r1,[r7]		; now unstack the digits and display
   2669 0000CF40 86 4F 00 AF             	call	GOOUT
   2670 0000CF44 F5 4F 7E 10             	cmp		r7,#NUMWKA
   2671 0000CF48 F9 B7                   	bgtu	PHN5
   2672 0000CF4A                        PHNRET
   2673 0000CF4A E1 FF                   	lw		lr,[sp]
   2674 0000CF4C E3 F5                   	lw		r5,2[sp]
   2675 0000CF4E E5 F6                   	lw		r6,4[sp]
   2676 0000CF50 E7 F7                   	lw		r7,6[sp]
   2677 0000CF52 E9 F8                   	lw		r8,8[sp]
   2678 0000CF54 0A 6E                   	add		sp,sp,#10
   2679 0000CF56 F0 80                   	ret
                                        
                                        
                                        ; r1 = pointer to line
                                        ; returns r1 = pointer to end of line + 1
   2684 0000CF58                        PRTLN
   2685 0000CF58 FC 6E                       sub     sp,sp,#4
   2686 0000CF5A E1 DF                       sw      lr,[sp]
   2687 0000CF5C E3 D5                       sw      r5,2[sp]
   2688 0000CF5E 12 15                       add     r5,r1,#2
   2689 0000CF60 5E E1                       lb		r1,-2[r5]	; get the binary line number
   2690 0000CF62 0E 21                       zxb		r1
   2691 0000CF64 5F E2                       lb		r2,-1[r5]
   2692 0000CF66 0E 22                       zxb		r2
   2693 0000CF68 81 32                       shl		r2,#1
   2694 0000CF6A 81 32                       shl		r2,#1
   2695 0000CF6C 81 32                       shl		r2,#1
   2696 0000CF6E 81 32                       shl		r2,#1
   2697 0000CF70 81 32                       shl		r2,#1
   2698 0000CF72 81 32                       shl		r2,#1
   2699 0000CF74 81 32                       shl		r2,#1
   2700 0000CF76 81 32                       shl		r2,#1
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 45
tb.asm
   2701 0000CF78 26 21                       or		r1,r2
   2702 0000CF7A 00 12                       lw      r2,#0       ; display a 0 or more digit line no.
   2703 0000CF7C 7D BF                   	call	PRTNUM
   2704 0000CF7E 02 40 00 11             	lw      r1,#' '     ; followed by a blank
   2705 0000CF82 83 4F 0F AF             	call	GOOUT
   2706 0000CF86 00 12                   	lw      r2,#0       ; stop char. is a zero
   2707 0000CF88 50 11                   	lw      r1,r5
   2708 0000CF8A 2E BF                   	call    PRTSTG		; display the rest of the line
   2709 0000CF8C E3 F5                   	lw      r5,2[sp]
   2710 0000CF8E E1 FF                   	lw      lr,[sp]
   2711 0000CF90 04 6E                   	add     sp,sp,#4
   2712 0000CF92 F0 80                   	ret
                                        
                                        
                                        ; ===== Test text byte following the call to this subroutine. If it
                                        ;	equals the byte pointed to by r8, return to the code following
                                        ;	the call. If they are not equal, brnch to the point
                                        ;	indicated by the offset byte following the text byte.
                                        ;
                                        ; Registers Affected
                                        ;   r3,r8
                                        ; Returns
                                        ;	r8 = updated text pointer
                                        ;
   2725 0000CF94                        TSTC
   2726 0000CF94 FC 6E                   	sub		sp,sp,#4
   2727 0000CF96 E1 DF                   	sw		lr,[sp]
   2728 0000CF98 E3 D1                   	sw		r1,2[sp]
   2729 0000CF9A 2F AF                   	call	IGNBLK		; ignore leading blanks
   2730 0000CF9C E1 FF                   	lw		lr,[sp]	; get the return address
   2731 0000CF9E F0 E3                   	lb		r3,[lr]	; get the byte to compare
   2732 0000CFA0 80 E1                   	lb		r1,[r8]
   2733 0000CFA2 1D 23                   	cmp		r3,r1		; is it = to what r8 points to?
   2734 0000CFA4 05 A8                   	beq		TC1			; if so
                                        						; If not, add the second
   2736 0000CFA6 F1 E3                   	lb		r3,1[lr]	; byte following the call to
   2737 0000CFA8 30 2F                   	add		lr,r3		; the return address.
   2738 0000CFAA E3 F1                   	lw		r1,2[sp]
   2739 0000CFAC 04 6E                   	add		sp,sp,#4
   2740 0000CFAE F0 80                   	ret					; jump to the routine
   2741 0000CFB0                        TC1
   2742 0000CFB0 01 68                   	add		r8,r8,#1	; if equal, bump text pointer
   2743 0000CFB2 E3 F1                   	lw		r1,2[sp]
   2744 0000CFB4 04 6E                   	add     sp,sp,#4
   2745 0000CFB6 F2 80                   	jmp		2[lr]		; Skip the 2 bytes following
                                        						; the call and continue.
                                        
                                        
                                        ; ===== See if the text pointed to by r8 is a number. If so,
                                        ;	return the number in r2 and the number of digits in r3,
                                        ;	else return zero in r2 and r3.
                                        ; Registers Affected
                                        ;   r1,r2,r3,r4
                                        ; Returns
                                        ; 	r1 = number
                                        ;	r2 = number of digits in number
                                        ;	r8 = updated text pointer
                                        ;
   2759 0000CFB8                        TSTNUM
   2760 0000CFB8 FE 6E                   	sub		sp,sp,#2
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 46
tb.asm
   2761 0000CFBA E1 DF                   	sw		lr,[sp]
   2762 0000CFBC 1E AF                   	call	IGNBLK		; skip over blanks
   2763 0000CFBE 00 11                   	lw		r1,#0		; initialize return parameters
   2764 0000CFC0 00 12                   	lw		r2,#0
   2765 0000CFC2                        TN1
   2766 0000CFC2 80 E3                   	lb		r3,[r8]
   2767 0000CFC4 FD 4F 30 10             	cmp		r3,#'0'		; is it less than zero?
   2768 0000CFC8 15 A4                   	bltu	TSNMRET 	; if so, that's all
   2769 0000CFCA FC 4F 37 10             	cmp		r3,#'9'		; is it greater than nine?
   2770 0000CFCE 12 A7                   	bgtu	TSNMRET 	; if so, return
   2771 0000CFD0 33 43 14 10             	cmp		r1,#214748364	; see if there's room for new digit
   2772 0000CFD4 04 A6                   	bleu	TN2
   2773 0000CFD6 24 4D 0B 11             	lea		r1,msgNumTooBig
   2774 0000CFDA E3 4F 07 AE             	br		ERROR		; if not, we've overflowd
   2775 0000CFDE                        TN2
   2776 0000CFDE 10 14                   	lw		r4,r1		; quickly multiply result by 10
   2777 0000CFE0 81 31                   	shl		r1,#1		; * 2
   2778 0000CFE2 81 31                   	shl		r1,#1		; * 4
   2779 0000CFE4 40 21                   	add		r1,r4		; * 5
   2780 0000CFE6 81 31                   	shl		r1,#1		; * 10
   2781 0000CFE8 01 68                   	add		r8,r8,#1	; adjust text pointer
   2782 0000CFEA 00 40 5F 33             	and		r3,#0xF		; add in the new digit
   2783 0000CFEE 30 21                   	add		r1,r3
   2784 0000CFF0 01 62                   	add		r2,r2,#1	; increment the no. of digits
   2785 0000CFF2 E7 BE                   	br		TN1
   2786 0000CFF4                        TSNMRET
   2787 0000CFF4 E1 FF                   	lw		lr,[sp]
   2788 0000CFF6 02 6E                   	add		sp,sp,#2
   2789 0000CFF8 F0 80                   	ret
                                        
                                        
                                        ;===== Skip over blanks in the text pointed to by r8.
                                        ;
                                        ; Registers Affected:
                                        ;	r8
                                        ; Returns
                                        ;	r8 = pointer updateded past any spaces or tabs
                                        ;
   2799 0000CFFA                        IGNBLK
   2800 0000CFFA FE 6E                   	sub		sp,sp,#2
   2801 0000CFFC E1 D1                   	sw		r1,[sp]
   2802 0000CFFE                        IGB2
   2803 0000CFFE 80 E1                   	lb		r1,[r8]			; get char
   2804 0000D000 FE 4F 10 10             	cmp		r1,#' '			; see if it's a space
   2805 0000D004 03 A8                   	beq		IGB1			; if so, swallow it
   2806 0000D006 FF 4F 17 10             	cmp		r1,#'\t'		; or a tab
   2807 0000D00A 02 A9                   	bne		IGBRET
   2808 0000D00C                        IGB1
   2809 0000D00C 01 68                   	add		r8,r8,#1		; increment the text pointer
   2810 0000D00E F7 BE                   	br		IGB2
   2811 0000D010                        IGBRET
   2812 0000D010 E1 F1                   	lw		r1,[sp]
   2813 0000D012 02 6E                   	add		sp,sp,#2
   2814 0000D014 F0 80                   	ret
                                        
                                        
                                        ; ===== Convert the line of text in the input buffer to upper
                                        ;	case (except for stuff between quotes).
                                        ;
                                        ; Registers Affected
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 47
tb.asm
                                        ;   r1,r3
                                        ; Returns
                                        ;	r8 = pointing to end of text in buffer
                                        ;
   2825 0000D016                        TOUPBUF
   2826 0000D016 FE 6E                   	sub		sp,sp,#2
   2827 0000D018 E1 DF                   	sw		lr,[sp]
   2828 0000D01A 0A 40 0E 18             	lea		r8,BUFFER	; set up text pointer
   2829 0000D01E 00 13                   	lw		r3,#0		; clear quote flag
   2830 0000D020                        TOUPB1
   2831 0000D020 80 E1                   	lb		r1,[r8]		; get the next text char.
   2832 0000D022 01 68                   	add		r8,r8,#1
   2833 0000D024 FF 4F 13 10             	cmp		r1,#CR		; is it end of line?
   2834 0000D028 13 A8                   	beq		TOUPBRT 	; if so, return
   2835 0000D02A FD 4F 1E 10             	cmp		r1,#'"'		; a double quote?
   2836 0000D02E 08 A8                   	beq		DOQUO
   2837 0000D030 FD 4F 19 10             	cmp		r1,#''''	; or a single quote?
   2838 0000D034 05 A8                   	beq		DOQUO
   2839 0000D036 30 10                   	cmp		r3,#0		; inside quotes?
   2840 0000D038 F3 B9                   	bne		TOUPB1		; if so, do the next one
   2841 0000D03A 0D AF                   	call	toUpper 	; convert to upper case
   2842 0000D03C 8F C1                   	sb		r1,-1[r8]	; store it
   2843 0000D03E F0 BE                   	br		TOUPB1		; and go back for more
   2844 0000D040                        DOQUO
   2845 0000D040 30 10                   	cmp		r3,#0		; are we inside quotes?
   2846 0000D042 02 A9                   	bne		DOQUO1
   2847 0000D044 10 13                   	lw		r3,r1		; if not, toggle inside-quotes flag
   2848 0000D046 EC BE                   	br		TOUPB1
   2849 0000D048                        DOQUO1
   2850 0000D048 1D 23                   	cmp		r3,r1		; make sure we're ending proper quote
   2851 0000D04A EA B9                   	bne		TOUPB1		; if not, ignore it
   2852 0000D04C 00 13                   	lw		r3,#0		; else clear quote flag
   2853 0000D04E E8 BE                   	br		TOUPB1
   2854 0000D050                        TOUPBRT
   2855 0000D050 E1 FF                   	lw		lr,[sp]
   2856 0000D052 02 6E                   	add		sp,sp,#2
   2857 0000D054 F0 80                   	ret
                                        
                                        
                                        ; ===== Convert the character in r1 to upper case
                                        ;
   2862 0000D056                        toUpper
   2863 0000D056 F9 4F 1F 10             	cmp		r1,#'a'		; is it < 'a'?
   2864 0000D05A 04 A0                   	blt	    TOUPRET
   2865 0000D05C F8 4F 16 10             	cmp		r1,#'z'		; or > 'z'?
   2866 0000D060 01 A3                   	bgt	    TOUPRET
   2867 0000D062 E0 61                   	sub		r1,r1,#32	; if not, make it upper case
   2868 0000D064                        TOUPRET
   2869 0000D064 F0 80                   	ret
                                        
                                        
                                        ; 'CHKIO' checks the input. If there's no input, it will return
                                        ; to the caller with the Z flag set. If there is input, the Z
                                        ; flag is cleared and the input byte is in r2. However, if a
                                        ; control-C is read, 'CHKIO' will warm-start BASIC and will not
                                        ; return to the caller.
                                        ;
   2878 0000D066                        CHKIO
   2879 0000D066 FE 6E                   	sub		sp,sp,#2	; save link reg
   2880 0000D068 E1 DF                   	sw		lr,[sp]
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 48
tb.asm
   2881 0000D06A 7C 4F 0D AF             	call	GOIN		; get input if possible
   2882 0000D06E 07 A8                   	beq		CHKRET2		; if Zero, no input
   2883 0000D070 1D 10                   	cmp		r1,#CTRLC	; is it control-C?
   2884 0000D072 02 A9                   	bne		CHKRET		; if not
   2885 0000D074 80 4F 0B AE             	jmp		WSTART		; if so, do a warm start
   2886 0000D078                        CHKRET
   2887 0000D078 E1 FF                   	lw		lr,[sp]
   2888 0000D07A 02 6E                   	add		sp,sp,#2	; Z=0
   2889 0000D07C F0 80                   	ret
   2890 0000D07E                        CHKRET2
   2891 0000D07E E1 FF                   	lw		lr,[sp]
   2892 0000D080 02 6E                   	add		sp,sp,#2
   2893 0000D082 00 11                   	lw		r1,#0		; Z=1
   2894 0000D084 F0 80                   	ret
                                        
                                        
                                        ; ===== Display a CR-LF sequence
                                        ;
   2899 0000D086                        CRLF
   2900 0000D086 22 4D 0D 11             	lea		r1,CLMSG
                                        
                                        
                                        ; ===== Display a zero-ended string pointed to by register r1
                                        ; Registers Affected
                                        ;   r1,r2,r4
                                        ;
   2907 0000D08A                        PRMESG
   2908 0000D08A FC 6E                   	sub		sp,sp,#4
   2909 0000D08C E1 DF                   	sw		lr,[sp]
   2910 0000D08E E3 D5                   	sw		r5,2[sp]
   2911 0000D090 10 15                   	lw      r5,r1       ; r5 = pointer to message
   2912 0000D092                        PRMESG1
   2913 0000D092 01 65                   	add		r5,r5,#1
   2914 0000D094 5F E1                   	lb		r1,-1[r5]	; 	get the char.
   2915 0000D096 03 A8                   	beq		PRMRET
   2916 0000D098 7B 4F 04 AF             	call	GOOUT		;else display it trashes r4
   2917 0000D09C FA BE                   	br		PRMESG1
   2918 0000D09E                        PRMRET
   2919 0000D09E 50 11                   	lw		r1,r5
   2920 0000D0A0 E3 F5                   	lw		r5,2[sp]
   2921 0000D0A2 E1 FF                   	lw		lr,[sp]
   2922 0000D0A4 04 6E                   	add		sp,sp,#4
   2923 0000D0A6 F0 80                   	ret
                                        
                                        
                                        ; ===== Display a zero-ended string pointed to by register r1
                                        ; Registers Affected
                                        ;   r1,r2,r3
                                        ;
   2930 0000D0A8                        PRMESGAUX
   2931 0000D0A8 FC 6E                   	sub		sp,sp,#4
   2932 0000D0AA E1 DF                   	sw		lr,[sp]
   2933 0000D0AC E3 D5                   	sw		r5,2[sp]
   2934 0000D0AE 10 15                   	lw      r5,r1       ; r3 = pointer
   2935 0000D0B0                        PRMESGA1
   2936 0000D0B0 01 65                   	add		r5,r5,#1
   2937 0000D0B2 5F E1                   	lb		r1,-1[r5]	; 	get the char.
   2938 0000D0B4 03 A8                   	beq		PRMRETA
   2939 0000D0B6 7A 4F 09 AF             	call	GOAUXO		;else display it
   2940 0000D0BA FA BE                   	br		PRMESGA1
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 49
tb.asm
   2941 0000D0BC                        PRMRETA
   2942 0000D0BC 50 11                   	lw		r1,r5
   2943 0000D0BE E3 F5                   	lw		r5,2[sp]
   2944 0000D0C0 E1 FF                   	lw		lr,[sp]
   2945 0000D0C2 04 6E                   	add		sp,sp,#4
   2946 0000D0C4 F0 80                   	ret
                                        
                                        ;*****************************************************
                                        ; The following routines are the only ones that need *
                                        ; to be changed for a different I/O environment.     *
                                        ;*****************************************************
                                        
                                        
                                        ; ===== Output character to the console (Port 1) from register D0
                                        ;	(Preserves all registers.)
                                        ;
   2957 0000D0C6                        OUTC
   2958 0000D0C6 FF BE                   	jmp		_putChar
                                        
                                        
                                        ; ===== Input a character from the console into register D0 (or
                                        ;	return Zero status if there's no character available).
                                        ;
   2964 0000D0C8                        INC
   2965 0000D0C8 FE 6E                   	add		sp,sp,#-2
   2966 0000D0CA E1 DF                   	sw		lr,[sp]
   2967 0000D0CC 01 4B 00 E1             	lb		r1,ROUTER+RTR_RXSTAT
   2968 0000D0D0 03 A8                   	beq		INC1
   2969 0000D0D2 FF BF                   	call	Recv
   2970 0000D0D4 3F 40 0B AF             	call	RecvDispatch
   2971 0000D0D8                        INC1
                                        ; get char from keyboard
                                        ; returns char in r1
   2974 0000D0D8                        _getChar
   2975 0000D0D8 C5 4D 02 E1             	lb		r1,KBD+2	; get keyboard strobe
   2976 0000D0DC 08 AB                   	bpl		gc1
   2977 0000D0DE C5 4D 00 E1             	lb		r1,KBD		; get character and clear keyboard strobe
   2978 0000D0E2 05 AA                   	bmi		gc1			; was it a keyup event ? (ignore)
   2979 0000D0E4 07 40 5F 31             	and		r1,#0x7f
   2980 0000D0E8 E1 FF                   	lw		lr,[sp]
   2981 0000D0EA 02 6E                   	add		sp,sp,#2
   2982 0000D0EC F0 80                   	ret
   2983 0000D0EE                        gc1
   2984 0000D0EE E1 FF                   	lw		lr,[sp]
   2985 0000D0F0 02 6E                   	add		sp,sp,#2
   2986 0000D0F2 00 11                   	lw		r1,#0		; return Z=1 (no character)
   2987 0000D0F4 F0 80                   	ret
                                        
                                        
                                        ; get char from keyboard
                                        ; returns char in r1
   2992 0000D0F6                        _getCharWait
   2993 0000D0F6                        gc2
   2994 0000D0F6 C5 4D 02 E1             	lb		r1,KBD+2	; get keyboard strobe
   2995 0000D0FA FD BB                   	bpl		gc2
   2996 0000D0FC C5 4D 00 E1             	lb		r1,KBD		; get character and clear keyboard strobe
   2997 0000D100 FA BA                   	bmi		gc2			; was it a keyup event ? (ignore)
   2998 0000D102 07 40 5F 31             	and		r1,#0x7f
   2999 0000D106 F0 80                   	ret
                                        
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 50
tb.asm
                                        
                                        ; Trigger a load operation on the target node.
                                        
   3004 0000D108                        TriggerTgtLoad:
   3005 0000D108 FF BF                   	call	zeroTxBuf
   3006 0000D10A 03 40 06 E2             	lb		r2,tgtNode
   3007 0000D10E 05 40 03 C2             	sb		r2,txBuf+MSG_DST
   3008 0000D112 01 40 01 12             	lw		r2,#$11
   3009 0000D116 05 40 02 C2             	sb		r2,txBuf+MSG_SRC
   3010 0000D11A 0A 12                   	lw		r2,#10				; trigger load on target node
   3011 0000D11C 04 40 0B C2             	sb		r2,txBuf+MSG_TYPE
   3012 0000D120 FF BF                   	call	Xmit
   3013 0000D122 E3 F2                   	lw		r2,2[sp]
   3014 0000D124 E1 FF                   	lw		lr,[sp]
   3015 0000D126 F0 80                   	ret
                                        
                                        ; ===== Output character to the host (Port 2) from register r1
                                        ;	(Preserves all registers.)
                                        ;
   3020 0000D128                        AUXOUT
   3021 0000D128 FC 6E                   	add		sp,sp,#-4
   3022 0000D12A E1 DF                   	sw		lr,[sp]
   3023 0000D12C E3 D2                   	sw		r2,2[sp]
   3024 0000D12E 03 40 06 E2             	lb		r2,tgtNode
                                        	cmp		#$11
   3026 0000D132 05 A9                   	bne		auxout1
   3027 0000D134 36 49 09 AF             	call	putSerial	; call boot rom routine
   3028 0000D138 E3 F2                   	lw		r2,2[sp]
   3029 0000D13A E1 FF                   	lw		lr,[sp]
   3030 0000D13C F0 80                   	ret
   3031 0000D13E                        auxout1:
   3032 0000D13E FF BF                   	call	zeroTxBuf
   3033 0000D140 04 40 04 C1             	sb		r1,txBuf
   3034 0000D144 03 40 06 E2             	lb		r2,tgtNode
   3035 0000D148 05 40 03 C2             	sb		r2,txBuf+MSG_DST
   3036 0000D14C 01 40 01 12             	lw		r2,#$11
   3037 0000D150 05 40 02 C2             	sb		r2,txBuf+MSG_SRC
   3038 0000D154 0B 12                   	lw		r2,#11				; recieve BASIC program char
   3039 0000D156 04 40 0B C2             	sb		r2,txBuf+MSG_TYPE
   3040 0000D15A FF BF                   	call	Xmit
   3041 0000D15C E3 F2                   	lw		r2,2[sp]
   3042 0000D15E E1 FF                   	lw		lr,[sp]
   3043 0000D160 F0 80                   	ret
                                        ;
                                        ; ===== Input a character from the host into register D0 (or
                                        ;	return negative status if there's no character available).
                                        ;
   3048 0000D162                        AUXIN
                                        ; get character from serial port
                                        ; return  N=1 if no character available
   3051 0000D162 35 49 00 AE             	jmp		peekSerial
                                        
                                        
   3054 0000D166                        _scrollScreen
   3055 0000D166 FC 6E                   	sub		sp,sp,#4
   3056 0000D168 E1 D5                   	sw		r5,[sp]
   3057 0000D16A 60 40 00 13             	lw		r3,#1536	; number of chars to move - 1
   3058 0000D16E 00 42 00 12             	lw		r2,#VIDEORAM
   3059 0000D172 03 40 00 E1             	lb		r1,txtWidth
   3060 0000D176 81 31                   	shl		r1,#1
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 51
tb.asm
   3061 0000D178 81 31                   	shl		r1,#1
   3062 0000D17A                        ss1:
   3063 0000D17A 20 15                   	lw		r5,r2
   3064 0000D17C 10 25                   	add		r5,r1
   3065 0000D17E 51 F4                   	lw		r4,[r5]		; char at next line
   3066 0000D180 21 D4                   	sw		r4,[r2]		; goes to this line
   3067 0000D182 04 62                   	add		r2,r2,#4
   3068 0000D184 FF 63                   	sub		r3,r3,#1
   3069 0000D186 F9 B9                   	bne     ss1
                                        	; blank out last line
   3071 0000D188 02 40 00 13             	lw		r3,#' '
   3072 0000D18C 03 40 08 D3             	sh		r3,charToPrint
   3073 0000D190 03 40 00 E3             	lb		r3,txtWidth
   3074 0000D194 03 40 09 F4             	lw		r4,charToPrint	; and colors
   3075 0000D198                        ss2
   3076 0000D198 21 D4                   	sw		r4,[r2]
   3077 0000D19A 04 62                   	add		r2,r2,#4
   3078 0000D19C FF 63                   	sub		r3,r3,#1
   3079 0000D19E FC B9                   	bne     ss2
   3080 0000D1A0 E1 F5                   	lw		r5,[sp]
   3081 0000D1A2 04 6E                   	add		sp,sp,#4
   3082 0000D1A4 F0 80                   	ret
                                        
                                        
                                        ; flash the character at the screen position
                                        ;   r1: 1 = flash, 0 = no flash
   3087 0000D1A6                        _flashCursor
   3088 0000D1A6 00 42 00 12             	lw		r2,#VIDEORAM
   3089 0000D1AA 03 40 04 F3             	lh		r3,pos
   3090 0000D1AE 81 33                   	shl		r3,#1
   3091 0000D1B0 81 33                   	shl		r3,#1
   3092 0000D1B2 20 23                   	add		r3,r2		; r3 = scr[pos]
                                        
   3094 0000D1B4 16 21                   	or		r1,r1
   3095 0000D1B6 04 A8                   	beq		fc1
   3096 0000D1B8 33 E2                   	lb		r2,3[r3]	; get background color
   3097 0000D1BA 08 40 60 32             	or		r2,#0x80	; set flash indicator
   3098 0000D1BE 03 AE                   	br		fcx
   3099 0000D1C0                        fc1
   3100 0000D1C0 33 E2                   	lb		r2,3[r3]	; get background color
   3101 0000D1C2 07 40 5F 32             	and		r2,#0x7f	; clear flash indicator
   3102 0000D1C6                        fcx:
   3103 0000D1C6 33 C2                   	sb		r2,3[r3]
   3104 0000D1C8 F0 80                   	ret
                                        
                                        
   3107 0000D1CA                        _cls
   3108 0000D1CA 32 49 0E AF             	call	clearScreen
   3109 0000D1CE 90 4F 08 AE             	br		FINISH
                                        
                                        
                                        ; ===== Return to the resident monitor, operating system, etc.
                                        ;
   3114 0000D1D2                        BYEBYE
   3115 0000D1D2 08 40 05 FE             	lw		sp,OSSP
   3116 0000D1D6 E1 FF                       lw      lr,[sp]
   3117 0000D1D8 02 6E                       add		sp,sp,#2
   3118 0000D1DA F0 80                   	ret
                                        
                                        ;	MOVE.B	#228,D7 	return to Tutor
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 52
tb.asm
                                        ;	TRAP	#14
                                        
   3123 0000D1DC 0D 0A 42 75 74 74      msgInit db	CR,LF,"Butterfly Tiny BASIC v1.1",CR,LF,"(C) 2005-2017  Robert Finch",CR,LF,LF,0
   3123 0000D1E2 65 72 66 6C 79 20 54  
   3123 0000D1E9 69 6E 79 20 42 41 53  
   3123 0000D1F0 49 43 20 76 31 2E 31  
   3123 0000D1F7 0D 0A 28 43 29 20 32  
   3123 0000D1FE 30 30 35 2D 32 30 31  
   3123 0000D205 37 20 20 52 6F 62 65  
   3123 0000D20C 72 74 20 46 69 6E 63  
   3123 0000D213 68 0D 0A 0A 00        
   3124 0000D218 0D 0A 4F 4B 0D 0A      OKMSG	db	CR,LF,"OK",CR,LF,0
   3124 0000D21E 00                    
   3125 0000D21F 57 68 61 74 3F 0D      msgWhat	db	"What?",CR,LF,0
   3125 0000D225 0A 00                 
   3126 0000D227 53 6F 72 72 79 2E      SRYMSG	db	"Sorry."
                                      
   3127 0000D22D 0D 0A 00               CLMSG	db	CR,LF,0
   3128 0000D230 43 6F 6D 70 61 63      msgReadError	db	"Compact FLASH read error",CR,LF,0
   3128 0000D236 74 20 46 4C 41 53 48  
   3128 0000D23D 20 72 65 61 64 20 65  
   3128 0000D244 72 72 6F 72 0D 0A 00  
                                      
   3129 0000D24B 4E 75 6D 62 65 72      msgNumTooBig	db	"Number is too big",CR,LF,0
   3129 0000D251 20 69 73 20 74 6F 6F  
   3129 0000D258 20 62 69 67 0D 0A 00  
                                      
   3130 0000D25F 44 69 76 69 73 69      msgDivZero		db	"Division by zero",CR,LF,0
   3130 0000D265 6F 6E 20 62 79 20 7A  
   3130 0000D26C 65 72 6F 0D 0A 00     
   3131 0000D272 4F 75 74 20 6F 66      msgVarSpace     db  "Out of variable space",CR,LF,0
   3131 0000D278 20 76 61 72 69 61 62  
   3131 0000D27F 6C 65 20 73 70 61 63  
   3131 0000D286 65 0D 0A 00           
   3132 0000D28A 20 62 79 74 65 73      msgBytesFree	db	" bytes free",CR,LF,0
   3132 0000D290 20 66 72 65 65 0D 0A  
   3132 0000D297 00                    
   3133 0000D298 0D 0A 52 65 61 64      msgReady		db	CR,LF,"Ready",CR,LF,0
   3133 0000D29E 79 0D 0A 00           
   3134 0000D2A2 45 78 70 65 63 74      msgComma		db	"Expecting a comma",CR,LF,0
   3134 0000D2A8 69 6E 67 20 61 20 63  
   3134 0000D2AF 6F 6D 6D 61 0D 0A 00  
                                      
   3135 0000D2B6 4C 69 6E 65 20 6E      msgLineRange	db	"Line number too big",CR,LF,0
   3135 0000D2BC 75 6D 62 65 72 20 74  
   3135 0000D2C3 6F 6F 20 62 69 67 0D  
   3135 0000D2CA 0A 00                 
   3136 0000D2CC 45 78 70 65 63 74      msgVar			db	"Expecting a variable",CR,LF,0
   3136 0000D2D2 69 6E 67 20 61 20 76  
   3136 0000D2D9 61 72 69 61 62 6C 65  
   3136 0000D2E0 0D 0A 00              
   3137 0000D2E3 52 4E 44 20 62 61      msgRNDBad		db	"RND bad parameter",CR,LF,0
   3137 0000D2E9 64 20 70 61 72 61 6D  
   3137 0000D2F0 65 74 65 72 0D 0A 00  
                                      
   3138 0000D2F7 53 59 53 20 62 61      msgSYSBad		db	"SYS bad address",CR,LF,0
   3138 0000D2FD 64 20 61 64 64 72 65  
   3138 0000D304 73 73 0D 0A 00        
   3139 0000D309 49 4E 50 55 54 20      msgInputVar		db	"INPUT expecting a variable",CR,LF,0
   3139 0000D30F 65 78 70 65 63 74 69  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 53
tb.asm
   3139 0000D316 6E 67 20 61 20 76 61  
   3139 0000D31D 72 69 61 62 6C 65 0D  
   3139 0000D324 0A 00                 
   3140 0000D326 4E 45 58 54 20 77      msgNextFor		db	"NEXT without FOR",CR,LF,0
   3140 0000D32C 69 74 68 6F 75 74 20  
   3140 0000D333 46 4F 52 0D 0A 00     
   3141 0000D339 4E 45 58 54 20 65      msgNextVar		db	"NEXT expecting a defined variable",CR,LF,0
   3141 0000D33F 78 70 65 63 74 69 6E  
   3141 0000D346 67 20 61 20 64 65 66  
   3141 0000D34D 69 6E 65 64 20 76 61  
   3141 0000D354 72 69 61 62 6C 65 0D  
   3141 0000D35B 0A 00                 
   3142 0000D35D 47 4F 54 4F 2F 47      msgBadGotoGosub	db	"GOTO/GOSUB bad line number",CR,LF,0
   3142 0000D363 4F 53 55 42 20 62 61  
   3142 0000D36A 64 20 6C 69 6E 65 20  
   3142 0000D371 6E 75 6D 62 65 72 0D  
   3142 0000D378 0A 00                 
   3143 0000D37A 52 45 54 55 52 4E      msgRetWoGosub   db	"RETURN without GOSUB",CR,LF,0
   3143 0000D380 20 77 69 74 68 6F 75  
   3143 0000D387 74 20 47 4F 53 55 42  
   3143 0000D38E 0D 0A 00              
   3144 0000D391 50 72 6F 67 72 61      msgTooBig		db	"Program is too big",CR,LF,0
   3144 0000D397 6D 20 69 73 20 74 6F  
   3144 0000D39E 6F 20 62 69 67 0D 0A  
   3144 0000D3A5 00                    
   3145 0000D3A6 45 78 74 72 61 20      msgExtraChars	db	"Extra characters on line ignored",CR,LF,0
   3145 0000D3AC 63 68 61 72 61 63 74  
   3145 0000D3B3 65 72 73 20 6F 6E 20  
   3145 0000D3BA 6C 69 6E 65 20 69 67  
   3145 0000D3C1 6E 6F 72 65 64 0D 0A  
   3145 0000D3C8 00                    
                                        
   3147 0000D3C9 FF FF FF                	.align	4
   3213 = 0000D3CC                      LSTROM	equ	*		; end of possible ROM area
                                        ;
                                        ; Internal variables follow:
                                        ;
                                        		bss
                                        		org		0x0030
   3154 00000030                        txtWidth	db	0		; BIOS var =60
   3155 00000031                        txtHeight	db	0		; BIOS var =27
   3156 00000032                        cursx	db		0		; cursor x position
   3157 00000033                        cursy	db		0		; cursor y position
   3158 00000034                        pos		dw		0		; text screen position
   3159 00000036                        tgtNode	db		0
   3160 00000037                        srcNode	db		0
                                        		org		0x0038
   3162 00000038                        charToPrint		dw		0
   3163 0000003A                        fgColor			db		0
   3164 0000003B                        bkColor			db		0
   3165 0000003C                        cursFlash		db		0	; flash the cursor ?
   3166 0000003D                         				db		0
   3167 0000003E                        NormAttr		dw		0
                                        
   3169 00000040                        lineLinkTbl		fill.b	25,0	; screen line link table
   3170 00000059                         	align 4
                                        
                                        		org		0x0080
   3173 00000080                        typef   db      0   ; variable / expression type
   3174 00000081                                 align   4
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 54
tb.asm
   3175 00000084                        OSSP	dw	1	; OS value of sp
   3176 00000086                        CURRNT	dw	1	;	Current line pointer
   3177 00000088                        STKGOS	dw	1	;	Saves stack pointer in 'GOSUB'
   3178 0000008A                        STKINP	dw	1	;	Saves stack pointer during 'INPUT'
   3179 0000008C                        LOPVAR	dw	1	;	'FOR' loop save area
   3180 0000008E                        LOPINC	dw	1	;	increment
   3181 00000090                        LOPLMT	dw	1	;	limit
   3182 00000092                        LOPLN	dw	1	;	line number
   3183 00000094                        LOPPT	dw	1	;	text pointer
   3184 00000096                        TXTUNF	dw	1	;	points to unfilled text area
   3185 00000098                        VARBGN	dw	1	;	points to variable area
   3186 0000009A                        IVARBGN dw  1   ;   points to integer variable area
   3187 0000009C                        SVARBGN dw  1   ;   points to string variable area
   3188 0000009E                        FVARBGN dw  1   ;   points to float variable area
   3189 000000A0                        STKBOT	dw	1	;	holds lower limit for stack growth
   3190 000000A2                        NUMWKA	fill.b	12,0			; numeric work area
   3191 000000AE                        BUFFER	fill.b	BUFLEN,0x00		;		Keyboard input buffer
                                        
                                                bss
                                                org     0x2000
   3195 00002000                        textScr1
                                                org     0x2000
                                        ;	END
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 54
noc_boot11.asm


                                      
                                        		.code
   3199 0000D3CC FF FF FF FF FF FF FF    		.org	$D800
   3199 0000D3D3 FF FF FF FF FF FF FF  
   3199 0000D3DA FF FF FF FF FF FF FF  
   3199 0000D3E1 FF FF FF FF FF FF FF  
   3199 0000D3E8 FF FF FF FF FF FF FF  
   3199 0000D3EF FF FF FF FF FF FF FF  
   3199 0000D3F6 FF FF FF FF FF FF FF  
   3199 0000D3FD FF FF FF FF FF FF FF  
   3199 0000D404 FF FF FF FF FF FF FF  
   3199 0000D40B FF FF FF FF FF FF FF  
   3199 0000D412 FF FF FF FF FF FF FF  
   3199 0000D419 FF FF FF FF FF FF FF  
   3199 0000D420 FF FF FF FF FF FF FF  
   3199 0000D427 FF FF FF FF FF FF FF  
   3199 0000D42E FF FF FF FF FF FF FF  
   3199 0000D435 FF FF FF FF FF FF FF  
   3199 0000D43C FF FF FF FF FF FF FF  
   3199 0000D443 FF FF FF FF FF FF FF  
   3199 0000D44A FF FF FF FF FF FF FF  
   3199 0000D451 FF FF FF FF FF FF FF  
   3199 0000D458 FF FF FF FF FF FF FF  
   3199 0000D45F FF FF FF FF FF FF FF  
   3199 0000D466 FF FF FF FF FF FF FF  
   3199 0000D46D FF FF FF FF FF FF FF  
   3199 0000D474 FF FF FF FF FF FF FF  
   3199 0000D47B FF FF FF FF FF FF FF  
   3199 0000D482 FF FF FF FF FF FF FF  
   3199 0000D489 FF FF FF FF FF FF FF  
   3199 0000D490 FF FF FF FF FF FF FF  
   3199 0000D497 FF FF FF FF FF FF FF  
   3199 0000D49E FF FF FF FF FF FF FF  
   3199 0000D4A5 FF FF FF FF FF FF FF  
   3199 0000D4AC FF FF FF FF FF FF FF  
   3199 0000D4B3 FF FF FF FF FF FF FF  
   3199 0000D4BA FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 55
noc_boot11.asm
   3199 0000D4C1 FF FF FF FF FF FF FF  
   3199 0000D4C8 FF FF FF FF FF FF FF  
   3199 0000D4CF FF FF FF FF FF FF FF  
   3199 0000D4D6 FF FF FF FF FF FF FF  
   3199 0000D4DD FF FF FF FF FF FF FF  
   3199 0000D4E4 FF FF FF FF FF FF FF  
   3199 0000D4EB FF FF FF FF FF FF FF  
   3199 0000D4F2 FF FF FF FF FF FF FF  
   3199 0000D4F9 FF FF FF FF FF FF FF  
   3199 0000D500 FF FF FF FF FF FF FF  
   3199 0000D507 FF FF FF FF FF FF FF  
   3199 0000D50E FF FF FF FF FF FF FF  
   3199 0000D515 FF FF FF FF FF FF FF  
   3199 0000D51C FF FF FF FF FF FF FF  
   3199 0000D523 FF FF FF FF FF FF FF  
   3199 0000D52A FF FF FF FF FF FF FF  
   3199 0000D531 FF FF FF FF FF FF FF  
   3199 0000D538 FF FF FF FF FF FF FF  
   3199 0000D53F FF FF FF FF FF FF FF  
   3199 0000D546 FF FF FF FF FF FF FF  
   3199 0000D54D FF FF FF FF FF FF FF  
   3199 0000D554 FF FF FF FF FF FF FF  
   3199 0000D55B FF FF FF FF FF FF FF  
   3199 0000D562 FF FF FF FF FF FF FF  
   3199 0000D569 FF FF FF FF FF FF FF  
   3199 0000D570 FF FF FF FF FF FF FF  
   3199 0000D577 FF FF FF FF FF FF FF  
   3199 0000D57E FF FF FF FF FF FF FF  
   3199 0000D585 FF FF FF FF FF FF FF  
   3199 0000D58C FF FF FF FF FF FF FF  
   3199 0000D593 FF FF FF FF FF FF FF  
   3199 0000D59A FF FF FF FF FF FF FF  
   3199 0000D5A1 FF FF FF FF FF FF FF  
   3199 0000D5A8 FF FF FF FF FF FF FF  
   3199 0000D5AF FF FF FF FF FF FF FF  
   3199 0000D5B6 FF FF FF FF FF FF FF  
   3199 0000D5BD FF FF FF FF FF FF FF  
   3199 0000D5C4 FF FF FF FF FF FF FF  
   3199 0000D5CB FF FF FF FF FF FF FF  
   3199 0000D5D2 FF FF FF FF FF FF FF  
   3199 0000D5D9 FF FF FF FF FF FF FF  
   3199 0000D5E0 FF FF FF FF FF FF FF  
   3199 0000D5E7 FF FF FF FF FF FF FF  
   3199 0000D5EE FF FF FF FF FF FF FF  
   3199 0000D5F5 FF FF FF FF FF FF FF  
   3199 0000D5FC FF FF FF FF FF FF FF  
   3199 0000D603 FF FF FF FF FF FF FF  
   3199 0000D60A FF FF FF FF FF FF FF  
   3199 0000D611 FF FF FF FF FF FF FF  
   3199 0000D618 FF FF FF FF FF FF FF  
   3199 0000D61F FF FF FF FF FF FF FF  
   3199 0000D626 FF FF FF FF FF FF FF  
   3199 0000D62D FF FF FF FF FF FF FF  
   3199 0000D634 FF FF FF FF FF FF FF  
   3199 0000D63B FF FF FF FF FF FF FF  
   3199 0000D642 FF FF FF FF FF FF FF  
   3199 0000D649 FF FF FF FF FF FF FF  
   3199 0000D650 FF FF FF FF FF FF FF  
   3199 0000D657 FF FF FF FF FF FF FF  
   3199 0000D65E FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 56
noc_boot11.asm
   3199 0000D665 FF FF FF FF FF FF FF  
   3199 0000D66C FF FF FF FF FF FF FF  
   3199 0000D673 FF FF FF FF FF FF FF  
   3199 0000D67A FF FF FF FF FF FF FF  
   3199 0000D681 FF FF FF FF FF FF FF  
   3199 0000D688 FF FF FF FF FF FF FF  
   3199 0000D68F FF FF FF FF FF FF FF  
   3199 0000D696 FF FF FF FF FF FF FF  
   3199 0000D69D FF FF FF FF FF FF FF  
   3199 0000D6A4 FF FF FF FF FF FF FF  
   3199 0000D6AB FF FF FF FF FF FF FF  
   3199 0000D6B2 FF FF FF FF FF FF FF  
   3199 0000D6B9 FF FF FF FF FF FF FF  
   3199 0000D6C0 FF FF FF FF FF FF FF  
   3199 0000D6C7 FF FF FF FF FF FF FF  
   3199 0000D6CE FF FF FF FF FF FF FF  
   3199 0000D6D5 FF FF FF FF FF FF FF  
   3199 0000D6DC FF FF FF FF FF FF FF  
   3199 0000D6E3 FF FF FF FF FF FF FF  
   3199 0000D6EA FF FF FF FF FF FF FF  
   3199 0000D6F1 FF FF FF FF FF FF FF  
   3199 0000D6F8 FF FF FF FF FF FF FF  
   3199 0000D6FF FF FF FF FF FF FF FF  
   3199 0000D706 FF FF FF FF FF FF FF  
   3199 0000D70D FF FF FF FF FF FF FF  
   3199 0000D714 FF FF FF FF FF FF FF  
   3199 0000D71B FF FF FF FF FF FF FF  
   3199 0000D722 FF FF FF FF FF FF FF  
   3199 0000D729 FF FF FF FF FF FF FF  
   3199 0000D730 FF FF FF FF FF FF FF  
   3199 0000D737 FF FF FF FF FF FF FF  
   3199 0000D73E FF FF FF FF FF FF FF  
   3199 0000D745 FF FF FF FF FF FF FF  
   3199 0000D74C FF FF FF FF FF FF FF  
   3199 0000D753 FF FF FF FF FF FF FF  
   3199 0000D75A FF FF FF FF FF FF FF  
   3199 0000D761 FF FF FF FF FF FF FF  
   3199 0000D768 FF FF FF FF FF FF FF  
   3199 0000D76F FF FF FF FF FF FF FF  
   3199 0000D776 FF FF FF FF FF FF FF  
   3199 0000D77D FF FF FF FF FF FF FF  
   3199 0000D784 FF FF FF FF FF FF FF  
   3199 0000D78B FF FF FF FF FF FF FF  
   3199 0000D792 FF FF FF FF FF FF FF  
   3199 0000D799 FF FF FF FF FF FF FF  
   3199 0000D7A0 FF FF FF FF FF FF FF  
   3199 0000D7A7 FF FF FF FF FF FF FF  
   3199 0000D7AE FF FF FF FF FF FF FF  
   3199 0000D7B5 FF FF FF FF FF FF FF  
   3199 0000D7BC FF FF FF FF FF FF FF  
   3199 0000D7C3 FF FF FF FF FF FF FF  
   3199 0000D7CA FF FF FF FF FF FF FF  
   3199 0000D7D1 FF FF FF FF FF FF FF  
   3199 0000D7D8 FF FF FF FF FF FF FF  
   3199 0000D7DF FF FF FF FF FF FF FF  
   3199 0000D7E6 FF FF FF FF FF FF FF  
   3199 0000D7ED FF FF FF FF FF FF FF  
   3199 0000D7F4 FF FF FF FF FF FF FF  
   3199 0000D7FB FF FF FF FF FF        
   3200 0000D800                        start:
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 57
noc_boot11.asm
   3201 0000D800 E4 31                   		tsr		r1,ID		; id register
   3202 0000D802 20 4B 00 C1             		sb		r1,LEDS
   3203 0000D806 FF 41 0E 1E             		lw		sp,#$1FFE
   3204 0000D80A 8A AF                   		call	InitTxtCtrl
   3205 0000D80C 04 11                   		lw		r1,#4
   3206 0000D80E 20 4B 00 C1             		sb		r1,LEDS
   3207 0000D812 01 40 0F 11             		lw		r1,#31
   3208 0000D816 03 40 01 C1             		sb		r1,txtHeight
   3209 0000D81A 03 40 04 11             		lw		r1,#52
   3210 0000D81E 03 40 00 C1             		sb		r1,txtWidth
   3211 0000D822 F0 4B 00 11             		lw		r1,#$BF00
   3212 0000D826 04 40 01 D1             		sw		r1,NormAttr
   3213 0000D82A 97 AF                   		call	ClearScreen
   3214 0000D82C AA AF                   		call	HomeCursor
   3215 0000D82E B1 4D 0A 11             		lw		r1,#msgStarting
   3216 0000D832 AF AF                   		call	putmsgScr
   3217 0000D834 39 AF                   		call	broadcastReset
   3218 0000D836                        RecvLoop:
   3219 0000D836                        noMsg1:
   3220 0000D836 01 4B 00 E1             		lb		r1,ROUTER+RTR_RXSTAT
   3221 0000D83A FD B8                   		beq		noMsg1
   3222 0000D83C FF BF                   		call	Recv
   3223 0000D83E 47 AF                   		call	RecvDispatch
   3224 0000D840 FA BE                   		bra		RecvLoop
   3225 0000D842                        lockup:
   3226 0000D842 FF BE                   		bra		lockup
                                        
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 1
Network.asm

                                        ; ============================================================================
                                        ;        __
                                        ;   \\__/ o\    (C) 2017  Robert Finch, Waterloo
                                        ;    \  __ /    All rights reserved.
                                        ;     \/_//     robfinch<remove>@finitron.ca
                                        ;       ||
                                        ;  
                                        ;
                                        ; This source file is free software: you can redistribute it and/or modify 
                                        ; it under the terms of the GNU Lesser General Public License as published 
                                        ; by the Free Software Foundation, either version 3 of the License, or     
                                        ; (at your option) any later version.                                      
                                        ;                                                                          
                                        ; This source file is distributed in the hope that it will be useful,      
                                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                                        ; GNU General Public License for more details.                             
                                        ;                                                                          
                                        ; You should have received a copy of the GNU General Public License        
                                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                                        ;                                    
                                        ;                                      
                                        ; Networking software components
                                        ; ============================================================================
                                        ;
                                        ;----------------------------------------------------------------------------
                                        ; Zero out the transmit buffer.
                                        ; Used before building transmit buffer.
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 2
Network.asm
                                        ; Registers Affected:
                                        ;	<none>
                                        ;----------------------------------------------------------------------------
                                        
   3266 0000D844                        zeroTxBuf:
   3267 0000D844 FE 6E                   		add		sp,sp,#-2
   3268 0000D846 E1 D2                   		sw		r2,[sp]
   3269 0000D848 00 40 0F 12             		lw		r2,#15
   3270 0000D84C                        zeroTxBuf1:
   3271 0000D84C 04 40 24 C0             		sb		r0,txBuf[r2]
   3272 0000D850 FF 62                   		sub		r2,r2,#1
   3273 0000D852 FC BB                   		bpl		zeroTxBuf1
   3274 0000D854 E1 F2                   		lw		r2,[sp]
   3275 0000D856 02 6E                   		add		sp,sp,#2
   3276 0000D858 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Transmit on the network.
                                        ; Blocks until the transmit buffer is open.
                                        ;
                                        ; Prerequisites:
                                        ;	The transmit buffer txBuf must have already been loaded.
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	<none>
                                        ;----------------------------------------------------------------------------
                                        
   3292 0000D85A FC 6E                  Xmit:	
   3293 0000D85C E1 D1                   		sw		r1,[sp]
   3294 0000D85E E3 D2                   		sw		r2,2[sp]
                                        		; wait for transmit buffer to empty
   3296 0000D860                        Xmit2:
   3297 0000D860 01 4B 02 E1             		lb		r1,ROUTER+RTR_TXSTAT
   3298 0000D864 FD B9                   		bne		Xmit2
   3299 0000D866 00 40 0F 12             		lw		r2,#15
   3300 0000D86A                        Xmit1:
   3301 0000D86A 04 40 24 E1             		lb		r1,txBuf[r2]
   3302 0000D86E 00 4B 20 C1             		sb		r1,ROUTER[r2]
   3303 0000D872 FF 62                   		add		r2,r2,#-1
   3304 0000D874 FA BB                   		bpl		Xmit1
                                        		; trigger a transmit
   3306 0000D876 01 11                   		lw		r1,#1
   3307 0000D878 01 4B 02 C2             		sb		r2,ROUTER+RTR_TXSTAT
   3308 0000D87C E3 F2                   		lw		r2,2[sp]
   3309 0000D87E E1 F1                   		lw		r1,[sp]
   3310 0000D880 04 6E                   		add		sp,sp,#4
   3311 0000D882 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Receive from network.
                                        ; Receive status must have already indicated a message present.
                                        ; Copies recieve buffer from router to rxBuf.
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 3
Network.asm
                                        ; Registers Affected:
                                        ;	<none>
                                        ;----------------------------------------------------------------------------
                                        
   3326 0000D884                        Recv:
   3327 0000D884 FC 6E                   		add		sp,sp,#-4
   3328 0000D886 E1 D1                   		sw		r1,[sp]
   3329 0000D888 E3 D2                   		sw		r2,2[sp]
   3330 0000D88A 01 11                   		lw		r1,#1
   3331 0000D88C 01 4B 00 C1             		sb		r1,ROUTER+RTR_RXSTAT	; pop the rx fifo
   3332 0000D890 00 40 0F 12             		lw		r2,#15
   3333 0000D894                        Recv1:
   3334 0000D894 00 4B 20 E1             		lb		r1,ROUTER[r2]			; copy message to local buffer
   3335 0000D898 05 40 24 C1             		sb		r1,rxBuf[r2]
   3336 0000D89C FF 62                   		add		r2,r2,#-1
   3337 0000D89E FA BB                   		bpl		Recv1
   3338 0000D8A0 E1 F1                   		lw		r1,[sp]
   3339 0000D8A2 E3 F2                   		lw		r2,2[sp]
   3340 0000D8A4 04 6E                   		add		sp,sp,#4
   3341 0000D8A6 F0 80                   		ret
                                        
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 3
noc_boot11.asm


                                      
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Broadcast a reset message on the network.
                                        ;----------------------------------------------------------------------------
                                        
   3348 0000D8A8                        broadcastReset:
   3349 0000D8A8 FE 6E                   		add		sp,sp,#-2
   3350 0000D8AA E1 DF                   		sw		lr,[sp]
   3351 0000D8AC FF BF                   		call	zeroTxBuf
   3352 0000D8AE 0F 40 0F 11             		lw		r1,#$FF		; global broadcast address
   3353 0000D8B2 05 40 03 C1             		sb		r1,txBuf+MSG_DST
   3354 0000D8B6 01 40 01 11             		lw		r1,#$11		; source of message
   3355 0000D8BA 05 40 02 C1             		sb		r1,txBuf+MSG_SRC
   3356 0000D8BE 8B 4D 0E 11             		lw		r1,#MT_RST
   3357 0000D8C2 04 40 0B C1             		sb		r1,txBuf+MSG_TYPE	; reset message
   3358 0000D8C6 FF BF                   		call	Xmit
   3359 0000D8C8 E1 FF                   		lw		lr,[sp]
   3360 0000D8CA 02 6E                   		add		sp,sp,#2
   3361 0000D8CC F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Dispatch routine for recieved messages.
                                        ;----------------------------------------------------------------------------
                                        
   3367 0000D8CE                        RecvDispatch:
   3368 0000D8CE F8 6E                   		add		sp,sp,#-8
   3369 0000D8D0 E1 DF                   		sw		lr,[sp]
   3370 0000D8D2 E3 D1                   		sw		r1,2[sp]
   3371 0000D8D4 E5 D2                   		sw		r2,4[sp]
   3372 0000D8D6 E7 D3                   		sw		r3,6[sp]
   3373 0000D8D8 05 40 0B E1             		lb		r1,rxBuf+MSG_TYPE
   3374 0000D8DC 72 42 14 10             		cmp		r1,#MT_RST_ACK	; status display ?
   3375 0000D8E0 19 A9                   		bne		RecvDispatch2
   3376 0000D8E2 06 40 02 E1             		lb		r1,rxBuf+14		; message source
   3377 0000D8E6 10 12                   		mov		r2,r1
   3378 0000D8E8 57 32                   		and		r2,#$7			; get Y coord
   3379 0000D8EA 81 32                   		shl		r2,#1			; shift left once
   3380 0000D8EC B4 4D 2B F2             		lw		r2,lineTbl[r2]
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 4
noc_boot11.asm
   3381 0000D8F0 58 62                   		add		r2,r2,#88		; position table along right edge of screen
   3382 0000D8F2 10 13                   		mov		r3,r1			; r3 = ID
   3383 0000D8F4 A1 33                   		shr		r3,#1
   3384 0000D8F6 A1 33                   		shr		r3,#1
   3385 0000D8F8 A1 33                   		shr		r3,#1
   3386 0000D8FA A1 33                   		shr		r3,#1
   3387 0000D8FC 81 33                   		shl		r3,#1			; character screen pos = *2
   3388 0000D8FE 00 40 5E 33             		and		r3,#$0E
   3389 0000D902 20 23                   		add		r3,r2
   3390 0000D904 02 40 0A 11             		lw		r1,#'*'
   3391 0000D908 1B AF                   		call	AsciiToScreen
   3392 0000D90A 04 40 01 F2             		lw		r2,NormAttr
   3393 0000D90E 26 21                   		or		r1,r2
   3394 0000D910 00 42 31 D1             		sw		r1,TXTSCR[r3]
   3395 0000D914                        RecvDispatch2:
   3396 0000D914 E1 FF                   		lw		lr,[sp]
   3397 0000D916 E3 F1                   		lw		r1,2[sp]
   3398 0000D918 E5 F2                   		lw		r2,4[sp]
   3399 0000D91A E7 F3                   		lw		r3,6[sp]
   3400 0000D91C 08 6E                   		add		sp,sp,#8
   3401 0000D91E F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Initialize the text controller.
                                        ;----------------------------------------------------------------------------
                                        
   3407 0000D920                        InitTxtCtrl:
   3408 0000D920 02 11                   		lw		r1,#2
   3409 0000D922 20 4B 00 C1             		sb		r1,LEDS
   3410 0000D926 00 12                   		lw		r2,#0
   3411 0000D928                        itc1:
   3412 0000D928 B3 4D 2B E1             		lb		r1,txtctrl_dat[r2]
   3413 0000D92C 10 4B 20 C1             		sb		r1,TXTCTRL[r2]
   3414 0000D930 01 62                   		add		r2,r2,#1
   3415 0000D932 FF 4F 21 10             		cmp		r2,#15
   3416 0000D936 F8 B2                   		ble		itc1
   3417 0000D938 03 11                   		lw		r1,#3
   3418 0000D93A 20 4B 00 C1             		sb		r1,LEDS
   3419 0000D93E F0 80                   		ret
                                        
                                        ;------------------------------------------------------------------------------
                                        ; Convert Ascii character to screen character.
                                        ;
                                        ; Parameters:
                                        ;	r1 = character to convert
                                        ; Returns:
                                        ;	r1 = converted character
                                        ;
                                        ;------------------------------------------------------------------------------
                                        
   3431 0000D940                        AsciiToScreen:
   3432 0000D940 FE 6E                   		add		sp,sp,#-2
   3433 0000D942 E1 D2                   		sw		r2,[sp]
   3434 0000D944 0F 40 5F 31             		and		r1,#$FF
   3435 0000D948 10 12                   		mov		r2,r1
   3436 0000D94A 50 32                   		and		r2,#%00100000	; if bit 5 isn't set
   3437 0000D94C 04 A8                   		beq		ats1
   3438 0000D94E 10 12                   		mov		r2,r1
   3439 0000D950 50 32                   		and		r2,#%01000000	; or bit 6 isn't set
   3440 0000D952 01 A8                   		beq		ats1
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 5
noc_boot11.asm
   3441 0000D954 50 31                   		and		r1,#%10011111
   3442 0000D956                        ats1:
   3443 0000D956 E1 F2                   		lw		r2,[sp]
   3444 0000D958 02 6E                   		add		sp,sp,#2
   3445 0000D95A                        		rts
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Clear the screen.
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	r1,r2,r3
                                        ;----------------------------------------------------------------------------
                                        
   3458 0000D95A                        ClearScreen:
   3459 0000D95A FE 6E                   		add		sp,sp,#-2
   3460 0000D95C E1 DF                   		sw		lr,[sp]
   3461 0000D95E 02 40 00 11             		lw		r1,#' '
   3462 0000D962 EE BF                   		call	AsciiToScreen
   3463 0000D964 04 40 01 F2             		lw		r2,NormAttr
   3464 0000D968 26 21                   		or		r1,r2
   3465 0000D96A 10 13                   		mov		r3,r1
   3466 0000D96C 64 40 0C 11             		lw		r1,#1612	; 52x31
   3467 0000D970 00 42 00 12             		lw		r2,#TXTSCR
   3468 0000D974                        cs1:
   3469 0000D974 21 D3                   		sw		r3,[r2]
   3470 0000D976 02 62                   		add		r2,r2,#2
   3471 0000D978 FF 61                   		add		r1,r1,#-1
   3472 0000D97A FC B9                   		bne		cs1
   3473 0000D97C E1 FF                   		lw		lr,[sp]
   3474 0000D97E 02 6E                   		add		sp,sp,#2
   3475 0000D980 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Home the cursor
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	<none>
                                        ;----------------------------------------------------------------------------
                                        
   3488 0000D982                        HomeCursor:
   3489 0000D982 03 40 03 C0             		sb		r0,cursy
   3490 0000D986 03 40 02 C0             		sb		r0,cursx
   3491 0000D98A 03 40 05 D0             		sw		r0,pos
   3492 0000D98E F0 80                   		ret
                                        
                                        ; flash the character at the screen position
                                        ;   r1: 1 = flash, 0 = no flash
   3496 0000D990                        flashCursor:
   3497 0000D990 F0 80                   		ret
                                        
                                        ;-----------------------------------------------------------------
                                        ; Display a message on the screen
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 6
noc_boot11.asm
                                        ;
                                        ; Parameters:
                                        ;	r1 = message address
                                        ;	screen pos controls where message is displayed
                                        ; Returns:
                                        ; 	r1 = points to null character
                                        ;-----------------------------------------------------------------
                                        
   3509 0000D992                        putmsgScr:
   3510 0000D992 FC 6E                   	sub		sp,sp,#4	; allocate stack frame
   3511 0000D994 E1 DF                   	sw		lr,[sp]	; save off link reg
   3512 0000D996 E3 D3                   	sw		r3,2[sp]
   3513 0000D998 10 13                   	mov		r3,r1		; r3 = msg address
   3514 0000D99A                        putmsg3:
   3515 0000D99A 30 E1                   	lb		r1,[r3]		; get char to display
   3516 0000D99C 03 A8                   	beq		putmsg4
   3517 0000D99E 07 AF                   	call	putcharScr	; store to screen
   3518 0000D9A0 01 63                   	add		r3,r3,#1	; inc msg pointer
   3519 0000D9A2 FB BE                   	br		putmsg3
   3520 0000D9A4                        putmsg4:
   3521 0000D9A4 30 11                   	mov		r1,r3
   3522 0000D9A6 E3 F3                   	lw		r3,2[sp]
   3523 0000D9A8 E1 FF                   	lw		lr,[sp]
   3524 0000D9AA 04 6E                   	add		sp,sp,#4
   3525 0000D9AC F0 80                   	ret
                                        
                                        
                                        ;-----------------------------------------------------------------
                                        ; Put a character to the screen
                                        ;
                                        ; Parameters:
                                        ;	r1.b = character to put
                                        ;-----------------------------------------------------------------
                                        
   3535 0000D9AE                        putcharScr
   3536 0000D9AE F8 6E                   	sub		sp,sp,#8
   3537 0000D9B0 E1 DF                   	sw		lr,[sp]
   3538 0000D9B2 E3 D4                   	sw		r4,2[sp]
   3539 0000D9B4 E5 D5                   	sw		r5,4[sp]
   3540 0000D9B6 E7 D6                   	sw		r6,6[sp]
                                        
   3542 0000D9B8 0E 21                   	zxb		r1			; mask
                                        
                                        	; first turn off any flashing cursor - it may be moved
   3545 0000D9BA 10 14                   	lw		r4,r1
   3546 0000D9BC 00 11                   	lw		r1,#0
   3547 0000D9BE E8 BF                   	call	flashCursor
   3548 0000D9C0 40 11                   	lw		r1,r4
                                        
                                        	; process carriage return
   3551 0000D9C2 FF 4F 13 10             	cmp		r1,#CR		; carriage return ?
   3552 0000D9C6 0A A9                   	bne		pc1
   3553 0000D9C8 03 40 05 F1             	lw		r1,pos		; subtract X from position
   3554 0000D9CC 03 40 02 E4             	lb		r4,cursx
   3555 0000D9D0 42 21                   	sub		r1,r4
   3556 0000D9D2 03 40 05 D1             	sw		r1,pos
   3557 0000D9D6 03 40 02 C0             	sb		r0,cursx	; and set X to zero
   3558 0000D9DA 70 AE                   	jmp		pc7
                                        
                                        	; process line feed
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 7
noc_boot11.asm
   3561 0000D9DC                        pc1
   3562 0000D9DC FF 4F 16 10             	cmp		r1,#LF		; line feed ?
   3563 0000D9E0 14 A9                   	bne		pc2
   3564 0000D9E2 03 40 03 E1             	lb		r1,cursy	; past line 31 ?
   3565 0000D9E6 03 40 01 E4             	lb		r4,txtHeight
   3566 0000D9EA FE 64                   	sub		r4,r4,#2
   3567 0000D9EC 4D 21                   	cmp		r1,r4
   3568 0000D9EE 02 A4                   	bltu	pc3			; if we are, then just scroll the screen
   3569 0000D9F0 FF BF                   	call	scrollScreenUp
   3570 0000D9F2 64 AE                   	jmp		pc7
   3571 0000D9F4                        pc3
   3572 0000D9F4 01 61                   	add		r1,r1,#1	; increment Y
   3573 0000D9F6 03 40 03 C1             	sb		r1,cursy
   3574 0000D9FA 03 40 05 F1             	lw		r1,pos		; and the cursor position
   3575 0000D9FE 03 40 00 E4             	lb		r4,txtWidth
   3576 0000DA02 40 21                   	add		r1,r4
   3577 0000DA04 03 40 05 D1             	sw		r1,pos
   3578 0000DA08 59 AE                   	jmp		pc7
                                        
                                        	; backspace
   3581 0000DA0A                        pc2
   3582 0000DA0A FF 4F 18 10             	cmp		r1,#CTRLH	; backspace ?
   3583 0000DA0E 21 A9                   	bne		pc4
   3584 0000DA10 03 40 02 E1             	lb		r1,cursx	; is cursor.x already zero ?
   3585 0000DA14 01 A9                   	bne		pc5			
   3586 0000DA16 52 AE                   	jmp		pc7			; can't backspace
   3587 0000DA18                        pc5
   3588 0000DA18 FF 61                   	sub		r1,r1,#1
   3589 0000DA1A 03 40 02 C1             	sb		r1,cursx
   3590 0000DA1E 03 40 05 F4             	lw		r4,pos
   3591 0000DA22 FF 64                   	sub		r4,r4,#1
   3592 0000DA24 03 40 05 D4             	sw		r4,pos
                                        	; shift remaining characters on line over
   3594 0000DA28 81 34                   	shl		r4,#1		; r4 = n
   3595 0000DA2A 00 42 00 16             	lw		r6,#TXTSCR
   3596 0000DA2E 40 26                   	add		r6,r4		; r6 = target pos
   3597 0000DA30 03 40 00 E4             	lb		r4,txtWidth
   3598 0000DA34 FE 64                   	sub		r4,r4,#2
   3599 0000DA36                        pc6
   3600 0000DA36 63 F5                   	lw		r5,2[r6]	; shift next char
   3601 0000DA38 61 D5                   	sw		r5,[r6]		; over to this one
   3602 0000DA3A 02 66                   	add		r6,r6,#2
   3603 0000DA3C 01 61                   	add		r1,r1,#1	; until X = 39
   3604 0000DA3E 4D 21                   	cmp		r1,r4
   3605 0000DA40 FA B4                   	bltu	pc6
                                        	; blank trailing character
   3607 0000DA42 02 40 00 11             	lw		r1,#' '
   3608 0000DA46 7C BF                   	call	AsciiToScreen
   3609 0000DA48 04 40 01 F5             	lw		r5,NormAttr
   3610 0000DA4C 56 21                   	or		r1,r5
   3611 0000DA4E 61 D1                   	sw		r1,[r6]
   3612 0000DA50 35 AE                   	jmp		pc7
                                        
                                        	; control character (non-printable)
   3615 0000DA52                        pc4
   3616 0000DA52 FE 4F 10 10             	cmp		r1,#' '
   3617 0000DA56 01 A5                   	bgeu	pc11
   3618 0000DA58 31 AE                   	jmp		pc7
                                        
                                        
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 8
noc_boot11.asm
                                        	; some other character
                                        	; put the character to the screen, then advance cursor
   3623 0000DA5A                        pc11
   3624 0000DA5A 72 BF                   	call	AsciiToScreen
   3625 0000DA5C 04 40 01 F4             	lw		r4,NormAttr
   3626 0000DA60 46 21                   	or		r1,r4
   3627 0000DA62 00 42 00 14             	lw		r4,#TXTSCR
   3628 0000DA66 03 40 05 F5             	lw		r5,pos
   3629 0000DA6A 81 35                   	shl		r5,#1		; pos * 2
   3630 0000DA6C 50 24                   	add		r4,r5		; scr[pos]
   3631 0000DA6E 41 D1                   	sw		r1,[r4]		; = char
                                        	; advance cursor
   3633 0000DA70 03 40 05 F5             	lw		r5,pos
   3634 0000DA74 03 40 00 E1             	lb		r1,txtWidth
   3635 0000DA78 FE 61                   	sub		r1,r1,#2
   3636 0000DA7A 03 40 02 E4             	lb		r4,cursx
   3637 0000DA7E 1D 24                   	cmp		r4,r1		; would we be at end of line ?
   3638 0000DA80 17 A6                   	bleu	pc8
   3639 0000DA82 42 25                   	sub		r5,r4		; pos -= cursx
   3640 0000DA84 03 40 04 D5             	sh		r5,pos
   3641 0000DA88 03 40 02 C0             	sb		r0,cursx	; cursor.x = 0
   3642 0000DA8C 03 40 03 E4             	lb		r4,cursy
   3643 0000DA90 03 40 01 E1             	lb		r1,txtHeight
   3644 0000DA94 FE 61                   	sub		r1,r1,#2
   3645 0000DA96 1D 24                   	cmp		r4,r1		; at last line of screen ?
   3646 0000DA98 02 A6                   	bleu	pc9
   3647 0000DA9A FF BF                   	call	scrollScreenUp	; yes, scroll
   3648 0000DA9C 0F AE                   	br		pc7
   3649 0000DA9E                        pc9
   3650 0000DA9E 01 64                   	add		r4,r4,#1	; cursor.y++
   3651 0000DAA0 03 40 03 C4             	sb		r4,cursy
   3652 0000DAA4 03 40 00 E1             	lb		r1,txtWidth
   3653 0000DAA8 10 25                   	add		r5,r1		; pos += txtWidth
   3654 0000DAAA 03 40 05 D5             	sw		r5,pos
   3655 0000DAAE 06 AE                   	br		pc7
   3656 0000DAB0                        pc8						; not at EOL
   3657 0000DAB0 01 64                   	add		r4,r4,#1	; cursor.x++
   3658 0000DAB2 03 40 02 C4             	sb		r4,cursx
   3659 0000DAB6 01 65                   	add		r5,r5,#1	; pos++
   3660 0000DAB8 03 40 05 D5             	sw		r5,pos
                                        
   3662 0000DABC                        pc7
   3663 0000DABC 03 40 0E E1             	lb		r1,cursFlash	; flash or don't flash the cursor
   3664 0000DAC0 67 BF                   	call	flashCursor
   3665 0000DAC2 E1 FF                   	lw		lr,[sp]
   3666 0000DAC4 E3 F4                   	lw		r4,2[sp]
   3667 0000DAC6 E5 F5                   	lw		r5,4[sp]
   3668 0000DAC8 E7 F6                   	lw		r6,6[sp]
   3669 0000DACA 08 6E                   	add		sp,sp,#8
   3670 0000DACC F0 80                   	ret
                                        
   3672 0000DACE                        irq_rout:
   3673 0000DACE FE 6E                   	add		sp,sp,#-2
   3674 0000DAD0 E1 D1                   	sw		r1,[sp]
   3675 0000DAD2 5A 4B 04 E1             	lb		r1,UART_X+UART_IS
   3676 0000DAD6 10 10                   	cmp		r1,#0
   3677 0000DAD8 13 AB                   	bpl		notUartXIrq
   3678 0000DADA 01 40 5C 31             	and		r1,#$1C
   3679 0000DADE 1C 10                   	cmp		r1,#$04
   3680 0000DAE0 03 A9                   	bne		notRcvXIrq
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 9
noc_boot11.asm
   3681 0000DAE2 5C 4B 04 E1             	lb		r1,UART_X+UART_TRB	; this should clear the Rx IRQ
                                        	sb		UartxRcvFifo
   3683 0000DAE6 17 AE                   	bra		xitIrq
   3684 0000DAE8                        notRcvXIrq:
   3685 0000DAE8 FF 4F 14 10             	cmp		r1,#$0C
   3686 0000DAEC FF B9                   	bne		notTxXIrq
   3687 0000DAEE AE 4D 0E E1             	lb		r1,UartxTxFifoCount
   3688 0000DAF2 10 10                   	cmp		r1,#0
   3689 0000DAF4 10 A8                   	beq		xitIrq
   3690 0000DAF6 AF 4D 06 E1             	lb		r1,UartxTxFifo
   3691 0000DAFA 5F 4B 04 C1             	sb		r1,UART_X+UART_TRB
   3692 0000DAFE 0B AE                   	bra		xitIrq
   3693 0000DB00                        notUartXIrq:
   3694 0000DB00 60 4B 00 E1             	lb		r1,UART_Y+UART_IS
   3695 0000DB04 10 10                   	cmp		r1,#0
   3696 0000DB06 07 AB                   	bpl		notUartYIrq
   3697 0000DB08 01 40 5C 31             	and		r1,#$1C
   3698 0000DB0C 1C 10                   	cmp		r1,#$04
   3699 0000DB0E FF B9                   	bne		notRcvYIrq
   3700 0000DB10 62 4B 00 E1             	lb		r1,UART_Y+UART_TRB	; this should clear the Rx IRQ
                                        	sb		UartyRcvFifo
   3702 0000DB14 00 AE                   	bra		xitIrq
   3703 0000DB16                        notUartYIrq:
   3704 0000DB16                        xitIrq:
   3705 0000DB16 E1 F1                   	lw		r1,[sp]
   3706 0000DB18 02 6E                   	add		sp,sp,#2
   3707 0000DB1A                        	iret
   3708 0000DB1A                        		
   3709 0000DB1A 42 75 74 74 65 72 66    	db	"Butterfly Grid Computer Starting",0
   3709 0000DB21 6C 79 20 47 72 69 64  
   3709 0000DB28 20 43 6F 6D 70 75 74  
   3709 0000DB2F 65 72 20 53 74 61 72  
   3709 0000DB36 74 69 6E 67 00        
                                        
   3711 0000DB3B                        txtctrl_dat:
   3712 0000DB3B 34 1F 34 00 10 00 07    	db	52,31,52,0,16,0,7,$22,$1F,$E0,31,0,0,3,0
   3712 0000DB42 22 1F E0 1F 00 00 03  
   3712 0000DB49 00                    
                                        
                                        	; Table of offsets of start of video line in video
                                        	; memory assuming 56 chars per line.
   3716 0000DB4A                        lineTbl:
   3717 0000DB4A 00 00 70 00 E0 00 50    	dw	0,112,224,336,448,560,672,784
   3717 0000DB51 01 C0 01 30 02 A0 02  
   3717 0000DB58 10 03                 
   3718 0000DB5A 80 03 F0 03 60 04 D0    	dw	896,1008,1120,1232,1344,1456,1568,1680
   3718 0000DB61 04 40 05 B0 05 20 06  
   3718 0000DB68 90 06                 
   3719 0000DB6A 00 07 0C 07 7C 07 EC    	dw	1792,1804,1916,2028,2140,2252,2364,2476
   3719 0000DB71 07 5C 08 CC 08 3C 09  
   3719 0000DB78 AC 09                 
   3720 0000DB7A 1C 0A 8C 0A FC 0A 6C    	dw	2588,2700,2812,2924,3036,3148,3260,3372
   3720 0000DB81 0B DC 0B 4C 0C BC 0C  
   3720 0000DB88 2C 0D                 
                                        
   3722 0000DB8A FF FF FF FF FF FF FF    		org		0xFFFE
   3722 0000DB91 FF FF FF FF FF FF FF  
   3722 0000DB98 FF FF FF FF FF FF FF  
   3722 0000DB9F FF FF FF FF FF FF FF  
   3722 0000DBA6 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 10
noc_boot11.asm
   3722 0000DBAD FF FF FF FF FF FF FF  
   3722 0000DBB4 FF FF FF FF FF FF FF  
   3722 0000DBBB FF FF FF FF FF FF FF  
   3722 0000DBC2 FF FF FF FF FF FF FF  
   3722 0000DBC9 FF FF FF FF FF FF FF  
   3722 0000DBD0 FF FF FF FF FF FF FF  
   3722 0000DBD7 FF FF FF FF FF FF FF  
   3722 0000DBDE FF FF FF FF FF FF FF  
   3722 0000DBE5 FF FF FF FF FF FF FF  
   3722 0000DBEC FF FF FF FF FF FF FF  
   3722 0000DBF3 FF FF FF FF FF FF FF  
   3722 0000DBFA FF FF FF FF FF FF FF  
   3722 0000DC01 FF FF FF FF FF FF FF  
   3722 0000DC08 FF FF FF FF FF FF FF  
   3722 0000DC0F FF FF FF FF FF FF FF  
   3722 0000DC16 FF FF FF FF FF FF FF  
   3722 0000DC1D FF FF FF FF FF FF FF  
   3722 0000DC24 FF FF FF FF FF FF FF  
   3722 0000DC2B FF FF FF FF FF FF FF  
   3722 0000DC32 FF FF FF FF FF FF FF  
   3722 0000DC39 FF FF FF FF FF FF FF  
   3722 0000DC40 FF FF FF FF FF FF FF  
   3722 0000DC47 FF FF FF FF FF FF FF  
   3722 0000DC4E FF FF FF FF FF FF FF  
   3722 0000DC55 FF FF FF FF FF FF FF  
   3722 0000DC5C FF FF FF FF FF FF FF  
   3722 0000DC63 FF FF FF FF FF FF FF  
   3722 0000DC6A FF FF FF FF FF FF FF  
   3722 0000DC71 FF FF FF FF FF FF FF  
   3722 0000DC78 FF FF FF FF FF FF FF  
   3722 0000DC7F FF FF FF FF FF FF FF  
   3722 0000DC86 FF FF FF FF FF FF FF  
   3722 0000DC8D FF FF FF FF FF FF FF  
   3722 0000DC94 FF FF FF FF FF FF FF  
   3722 0000DC9B FF FF FF FF FF FF FF  
   3722 0000DCA2 FF FF FF FF FF FF FF  
   3722 0000DCA9 FF FF FF FF FF FF FF  
   3722 0000DCB0 FF FF FF FF FF FF FF  
   3722 0000DCB7 FF FF FF FF FF FF FF  
   3722 0000DCBE FF FF FF FF FF FF FF  
   3722 0000DCC5 FF FF FF FF FF FF FF  
   3722 0000DCCC FF FF FF FF FF FF FF  
   3722 0000DCD3 FF FF FF FF FF FF FF  
   3722 0000DCDA FF FF FF FF FF FF FF  
   3722 0000DCE1 FF FF FF FF FF FF FF  
   3722 0000DCE8 FF FF FF FF FF FF FF  
   3722 0000DCEF FF FF FF FF FF FF FF  
   3722 0000DCF6 FF FF FF FF FF FF FF  
   3722 0000DCFD FF FF FF FF FF FF FF  
   3722 0000DD04 FF FF FF FF FF FF FF  
   3722 0000DD0B FF FF FF FF FF FF FF  
   3722 0000DD12 FF FF FF FF FF FF FF  
   3722 0000DD19 FF FF FF FF FF FF FF  
   3722 0000DD20 FF FF FF FF FF FF FF  
   3722 0000DD27 FF FF FF FF FF FF FF  
   3722 0000DD2E FF FF FF FF FF FF FF  
   3722 0000DD35 FF FF FF FF FF FF FF  
   3722 0000DD3C FF FF FF FF FF FF FF  
   3722 0000DD43 FF FF FF FF FF FF FF  
   3722 0000DD4A FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 11
noc_boot11.asm
   3722 0000DD51 FF FF FF FF FF FF FF  
   3722 0000DD58 FF FF FF FF FF FF FF  
   3722 0000DD5F FF FF FF FF FF FF FF  
   3722 0000DD66 FF FF FF FF FF FF FF  
   3722 0000DD6D FF FF FF FF FF FF FF  
   3722 0000DD74 FF FF FF FF FF FF FF  
   3722 0000DD7B FF FF FF FF FF FF FF  
   3722 0000DD82 FF FF FF FF FF FF FF  
   3722 0000DD89 FF FF FF FF FF FF FF  
   3722 0000DD90 FF FF FF FF FF FF FF  
   3722 0000DD97 FF FF FF FF FF FF FF  
   3722 0000DD9E FF FF FF FF FF FF FF  
   3722 0000DDA5 FF FF FF FF FF FF FF  
   3722 0000DDAC FF FF FF FF FF FF FF  
   3722 0000DDB3 FF FF FF FF FF FF FF  
   3722 0000DDBA FF FF FF FF FF FF FF  
   3722 0000DDC1 FF FF FF FF FF FF FF  
   3722 0000DDC8 FF FF FF FF FF FF FF  
   3722 0000DDCF FF FF FF FF FF FF FF  
   3722 0000DDD6 FF FF FF FF FF FF FF  
   3722 0000DDDD FF FF FF FF FF FF FF  
   3722 0000DDE4 FF FF FF FF FF FF FF  
   3722 0000DDEB FF FF FF FF FF FF FF  
   3722 0000DDF2 FF FF FF FF FF FF FF  
   3722 0000DDF9 FF FF FF FF FF FF FF  
   3722 0000DE00 FF FF FF FF FF FF FF  
   3722 0000DE07 FF FF FF FF FF FF FF  
   3722 0000DE0E FF FF FF FF FF FF FF  
   3722 0000DE15 FF FF FF FF FF FF FF  
   3722 0000DE1C FF FF FF FF FF FF FF  
   3722 0000DE23 FF FF FF FF FF FF FF  
   3722 0000DE2A FF FF FF FF FF FF FF  
   3722 0000DE31 FF FF FF FF FF FF FF  
   3722 0000DE38 FF FF FF FF FF FF FF  
   3722 0000DE3F FF FF FF FF FF FF FF  
   3722 0000DE46 FF FF FF FF FF FF FF  
   3722 0000DE4D FF FF FF FF FF FF FF  
   3722 0000DE54 FF FF FF FF FF FF FF  
   3722 0000DE5B FF FF FF FF FF FF FF  
   3722 0000DE62 FF FF FF FF FF FF FF  
   3722 0000DE69 FF FF FF FF FF FF FF  
   3722 0000DE70 FF FF FF FF FF FF FF  
   3722 0000DE77 FF FF FF FF FF FF FF  
   3722 0000DE7E FF FF FF FF FF FF FF  
   3722 0000DE85 FF FF FF FF FF FF FF  
   3722 0000DE8C FF FF FF FF FF FF FF  
   3722 0000DE93 FF FF FF FF FF FF FF  
   3722 0000DE9A FF FF FF FF FF FF FF  
   3722 0000DEA1 FF FF FF FF FF FF FF  
   3722 0000DEA8 FF FF FF FF FF FF FF  
   3722 0000DEAF FF FF FF FF FF FF FF  
   3722 0000DEB6 FF FF FF FF FF FF FF  
   3722 0000DEBD FF FF FF FF FF FF FF  
   3722 0000DEC4 FF FF FF FF FF FF FF  
   3722 0000DECB FF FF FF FF FF FF FF  
   3722 0000DED2 FF FF FF FF FF FF FF  
   3722 0000DED9 FF FF FF FF FF FF FF  
   3722 0000DEE0 FF FF FF FF FF FF FF  
   3722 0000DEE7 FF FF FF FF FF FF FF  
   3722 0000DEEE FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 12
noc_boot11.asm
   3722 0000DEF5 FF FF FF FF FF FF FF  
   3722 0000DEFC FF FF FF FF FF FF FF  
   3722 0000DF03 FF FF FF FF FF FF FF  
   3722 0000DF0A FF FF FF FF FF FF FF  
   3722 0000DF11 FF FF FF FF FF FF FF  
   3722 0000DF18 FF FF FF FF FF FF FF  
   3722 0000DF1F FF FF FF FF FF FF FF  
   3722 0000DF26 FF FF FF FF FF FF FF  
   3722 0000DF2D FF FF FF FF FF FF FF  
   3722 0000DF34 FF FF FF FF FF FF FF  
   3722 0000DF3B FF FF FF FF FF FF FF  
   3722 0000DF42 FF FF FF FF FF FF FF  
   3722 0000DF49 FF FF FF FF FF FF FF  
   3722 0000DF50 FF FF FF FF FF FF FF  
   3722 0000DF57 FF FF FF FF FF FF FF  
   3722 0000DF5E FF FF FF FF FF FF FF  
   3722 0000DF65 FF FF FF FF FF FF FF  
   3722 0000DF6C FF FF FF FF FF FF FF  
   3722 0000DF73 FF FF FF FF FF FF FF  
   3722 0000DF7A FF FF FF FF FF FF FF  
   3722 0000DF81 FF FF FF FF FF FF FF  
   3722 0000DF88 FF FF FF FF FF FF FF  
   3722 0000DF8F FF FF FF FF FF FF FF  
   3722 0000DF96 FF FF FF FF FF FF FF  
   3722 0000DF9D FF FF FF FF FF FF FF  
   3722 0000DFA4 FF FF FF FF FF FF FF  
   3722 0000DFAB FF FF FF FF FF FF FF  
   3722 0000DFB2 FF FF FF FF FF FF FF  
   3722 0000DFB9 FF FF FF FF FF FF FF  
   3722 0000DFC0 FF FF FF FF FF FF FF  
   3722 0000DFC7 FF FF FF FF FF FF FF  
   3722 0000DFCE FF FF FF FF FF FF FF  
   3722 0000DFD5 FF FF FF FF FF FF FF  
   3722 0000DFDC FF FF FF FF FF FF FF  
   3722 0000DFE3 FF FF FF FF FF FF FF  
   3722 0000DFEA FF FF FF FF FF FF FF  
   3722 0000DFF1 FF FF FF FF FF FF FF  
   3722 0000DFF8 FF FF FF FF FF FF FF  
   3722 0000DFFF FF FF FF FF FF FF FF  
   3722 0000E006 FF FF FF FF FF FF FF  
   3722 0000E00D FF FF FF FF FF FF FF  
   3722 0000E014 FF FF FF FF FF FF FF  
   3722 0000E01B FF FF FF FF FF FF FF  
   3722 0000E022 FF FF FF FF FF FF FF  
   3722 0000E029 FF FF FF FF FF FF FF  
   3722 0000E030 FF FF FF FF FF FF FF  
   3722 0000E037 FF FF FF FF FF FF FF  
   3722 0000E03E FF FF FF FF FF FF FF  
   3722 0000E045 FF FF FF FF FF FF FF  
   3722 0000E04C FF FF FF FF FF FF FF  
   3722 0000E053 FF FF FF FF FF FF FF  
   3722 0000E05A FF FF FF FF FF FF FF  
   3722 0000E061 FF FF FF FF FF FF FF  
   3722 0000E068 FF FF FF FF FF FF FF  
   3722 0000E06F FF FF FF FF FF FF FF  
   3722 0000E076 FF FF FF FF FF FF FF  
   3722 0000E07D FF FF FF FF FF FF FF  
   3722 0000E084 FF FF FF FF FF FF FF  
   3722 0000E08B FF FF FF FF FF FF FF  
   3722 0000E092 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 13
noc_boot11.asm
   3722 0000E099 FF FF FF FF FF FF FF  
   3722 0000E0A0 FF FF FF FF FF FF FF  
   3722 0000E0A7 FF FF FF FF FF FF FF  
   3722 0000E0AE FF FF FF FF FF FF FF  
   3722 0000E0B5 FF FF FF FF FF FF FF  
   3722 0000E0BC FF FF FF FF FF FF FF  
   3722 0000E0C3 FF FF FF FF FF FF FF  
   3722 0000E0CA FF FF FF FF FF FF FF  
   3722 0000E0D1 FF FF FF FF FF FF FF  
   3722 0000E0D8 FF FF FF FF FF FF FF  
   3722 0000E0DF FF FF FF FF FF FF FF  
   3722 0000E0E6 FF FF FF FF FF FF FF  
   3722 0000E0ED FF FF FF FF FF FF FF  
   3722 0000E0F4 FF FF FF FF FF FF FF  
   3722 0000E0FB FF FF FF FF FF FF FF  
   3722 0000E102 FF FF FF FF FF FF FF  
   3722 0000E109 FF FF FF FF FF FF FF  
   3722 0000E110 FF FF FF FF FF FF FF  
   3722 0000E117 FF FF FF FF FF FF FF  
   3722 0000E11E FF FF FF FF FF FF FF  
   3722 0000E125 FF FF FF FF FF FF FF  
   3722 0000E12C FF FF FF FF FF FF FF  
   3722 0000E133 FF FF FF FF FF FF FF  
   3722 0000E13A FF FF FF FF FF FF FF  
   3722 0000E141 FF FF FF FF FF FF FF  
   3722 0000E148 FF FF FF FF FF FF FF  
   3722 0000E14F FF FF FF FF FF FF FF  
   3722 0000E156 FF FF FF FF FF FF FF  
   3722 0000E15D FF FF FF FF FF FF FF  
   3722 0000E164 FF FF FF FF FF FF FF  
   3722 0000E16B FF FF FF FF FF FF FF  
   3722 0000E172 FF FF FF FF FF FF FF  
   3722 0000E179 FF FF FF FF FF FF FF  
   3722 0000E180 FF FF FF FF FF FF FF  
   3722 0000E187 FF FF FF FF FF FF FF  
   3722 0000E18E FF FF FF FF FF FF FF  
   3722 0000E195 FF FF FF FF FF FF FF  
   3722 0000E19C FF FF FF FF FF FF FF  
   3722 0000E1A3 FF FF FF FF FF FF FF  
   3722 0000E1AA FF FF FF FF FF FF FF  
   3722 0000E1B1 FF FF FF FF FF FF FF  
   3722 0000E1B8 FF FF FF FF FF FF FF  
   3722 0000E1BF FF FF FF FF FF FF FF  
   3722 0000E1C6 FF FF FF FF FF FF FF  
   3722 0000E1CD FF FF FF FF FF FF FF  
   3722 0000E1D4 FF FF FF FF FF FF FF  
   3722 0000E1DB FF FF FF FF FF FF FF  
   3722 0000E1E2 FF FF FF FF FF FF FF  
   3722 0000E1E9 FF FF FF FF FF FF FF  
   3722 0000E1F0 FF FF FF FF FF FF FF  
   3722 0000E1F7 FF FF FF FF FF FF FF  
   3722 0000E1FE FF FF FF FF FF FF FF  
   3722 0000E205 FF FF FF FF FF FF FF  
   3722 0000E20C FF FF FF FF FF FF FF  
   3722 0000E213 FF FF FF FF FF FF FF  
   3722 0000E21A FF FF FF FF FF FF FF  
   3722 0000E221 FF FF FF FF FF FF FF  
   3722 0000E228 FF FF FF FF FF FF FF  
   3722 0000E22F FF FF FF FF FF FF FF  
   3722 0000E236 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 14
noc_boot11.asm
   3722 0000E23D FF FF FF FF FF FF FF  
   3722 0000E244 FF FF FF FF FF FF FF  
   3722 0000E24B FF FF FF FF FF FF FF  
   3722 0000E252 FF FF FF FF FF FF FF  
   3722 0000E259 FF FF FF FF FF FF FF  
   3722 0000E260 FF FF FF FF FF FF FF  
   3722 0000E267 FF FF FF FF FF FF FF  
   3722 0000E26E FF FF FF FF FF FF FF  
   3722 0000E275 FF FF FF FF FF FF FF  
   3722 0000E27C FF FF FF FF FF FF FF  
   3722 0000E283 FF FF FF FF FF FF FF  
   3722 0000E28A FF FF FF FF FF FF FF  
   3722 0000E291 FF FF FF FF FF FF FF  
   3722 0000E298 FF FF FF FF FF FF FF  
   3722 0000E29F FF FF FF FF FF FF FF  
   3722 0000E2A6 FF FF FF FF FF FF FF  
   3722 0000E2AD FF FF FF FF FF FF FF  
   3722 0000E2B4 FF FF FF FF FF FF FF  
   3722 0000E2BB FF FF FF FF FF FF FF  
   3722 0000E2C2 FF FF FF FF FF FF FF  
   3722 0000E2C9 FF FF FF FF FF FF FF  
   3722 0000E2D0 FF FF FF FF FF FF FF  
   3722 0000E2D7 FF FF FF FF FF FF FF  
   3722 0000E2DE FF FF FF FF FF FF FF  
   3722 0000E2E5 FF FF FF FF FF FF FF  
   3722 0000E2EC FF FF FF FF FF FF FF  
   3722 0000E2F3 FF FF FF FF FF FF FF  
   3722 0000E2FA FF FF FF FF FF FF FF  
   3722 0000E301 FF FF FF FF FF FF FF  
   3722 0000E308 FF FF FF FF FF FF FF  
   3722 0000E30F FF FF FF FF FF FF FF  
   3722 0000E316 FF FF FF FF FF FF FF  
   3722 0000E31D FF FF FF FF FF FF FF  
   3722 0000E324 FF FF FF FF FF FF FF  
   3722 0000E32B FF FF FF FF FF FF FF  
   3722 0000E332 FF FF FF FF FF FF FF  
   3722 0000E339 FF FF FF FF FF FF FF  
   3722 0000E340 FF FF FF FF FF FF FF  
   3722 0000E347 FF FF FF FF FF FF FF  
   3722 0000E34E FF FF FF FF FF FF FF  
   3722 0000E355 FF FF FF FF FF FF FF  
   3722 0000E35C FF FF FF FF FF FF FF  
   3722 0000E363 FF FF FF FF FF FF FF  
   3722 0000E36A FF FF FF FF FF FF FF  
   3722 0000E371 FF FF FF FF FF FF FF  
   3722 0000E378 FF FF FF FF FF FF FF  
   3722 0000E37F FF FF FF FF FF FF FF  
   3722 0000E386 FF FF FF FF FF FF FF  
   3722 0000E38D FF FF FF FF FF FF FF  
   3722 0000E394 FF FF FF FF FF FF FF  
   3722 0000E39B FF FF FF FF FF FF FF  
   3722 0000E3A2 FF FF FF FF FF FF FF  
   3722 0000E3A9 FF FF FF FF FF FF FF  
   3722 0000E3B0 FF FF FF FF FF FF FF  
   3722 0000E3B7 FF FF FF FF FF FF FF  
   3722 0000E3BE FF FF FF FF FF FF FF  
   3722 0000E3C5 FF FF FF FF FF FF FF  
   3722 0000E3CC FF FF FF FF FF FF FF  
   3722 0000E3D3 FF FF FF FF FF FF FF  
   3722 0000E3DA FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 15
noc_boot11.asm
   3722 0000E3E1 FF FF FF FF FF FF FF  
   3722 0000E3E8 FF FF FF FF FF FF FF  
   3722 0000E3EF FF FF FF FF FF FF FF  
   3722 0000E3F6 FF FF FF FF FF FF FF  
   3722 0000E3FD FF FF FF FF FF FF FF  
   3722 0000E404 FF FF FF FF FF FF FF  
   3722 0000E40B FF FF FF FF FF FF FF  
   3722 0000E412 FF FF FF FF FF FF FF  
   3722 0000E419 FF FF FF FF FF FF FF  
   3722 0000E420 FF FF FF FF FF FF FF  
   3722 0000E427 FF FF FF FF FF FF FF  
   3722 0000E42E FF FF FF FF FF FF FF  
   3722 0000E435 FF FF FF FF FF FF FF  
   3722 0000E43C FF FF FF FF FF FF FF  
   3722 0000E443 FF FF FF FF FF FF FF  
   3722 0000E44A FF FF FF FF FF FF FF  
   3722 0000E451 FF FF FF FF FF FF FF  
   3722 0000E458 FF FF FF FF FF FF FF  
   3722 0000E45F FF FF FF FF FF FF FF  
   3722 0000E466 FF FF FF FF FF FF FF  
   3722 0000E46D FF FF FF FF FF FF FF  
   3722 0000E474 FF FF FF FF FF FF FF  
   3722 0000E47B FF FF FF FF FF FF FF  
   3722 0000E482 FF FF FF FF FF FF FF  
   3722 0000E489 FF FF FF FF FF FF FF  
   3722 0000E490 FF FF FF FF FF FF FF  
   3722 0000E497 FF FF FF FF FF FF FF  
   3722 0000E49E FF FF FF FF FF FF FF  
   3722 0000E4A5 FF FF FF FF FF FF FF  
   3722 0000E4AC FF FF FF FF FF FF FF  
   3722 0000E4B3 FF FF FF FF FF FF FF  
   3722 0000E4BA FF FF FF FF FF FF FF  
   3722 0000E4C1 FF FF FF FF FF FF FF  
   3722 0000E4C8 FF FF FF FF FF FF FF  
   3722 0000E4CF FF FF FF FF FF FF FF  
   3722 0000E4D6 FF FF FF FF FF FF FF  
   3722 0000E4DD FF FF FF FF FF FF FF  
   3722 0000E4E4 FF FF FF FF FF FF FF  
   3722 0000E4EB FF FF FF FF FF FF FF  
   3722 0000E4F2 FF FF FF FF FF FF FF  
   3722 0000E4F9 FF FF FF FF FF FF FF  
   3722 0000E500 FF FF FF FF FF FF FF  
   3722 0000E507 FF FF FF FF FF FF FF  
   3722 0000E50E FF FF FF FF FF FF FF  
   3722 0000E515 FF FF FF FF FF FF FF  
   3722 0000E51C FF FF FF FF FF FF FF  
   3722 0000E523 FF FF FF FF FF FF FF  
   3722 0000E52A FF FF FF FF FF FF FF  
   3722 0000E531 FF FF FF FF FF FF FF  
   3722 0000E538 FF FF FF FF FF FF FF  
   3722 0000E53F FF FF FF FF FF FF FF  
   3722 0000E546 FF FF FF FF FF FF FF  
   3722 0000E54D FF FF FF FF FF FF FF  
   3722 0000E554 FF FF FF FF FF FF FF  
   3722 0000E55B FF FF FF FF FF FF FF  
   3722 0000E562 FF FF FF FF FF FF FF  
   3722 0000E569 FF FF FF FF FF FF FF  
   3722 0000E570 FF FF FF FF FF FF FF  
   3722 0000E577 FF FF FF FF FF FF FF  
   3722 0000E57E FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 16
noc_boot11.asm
   3722 0000E585 FF FF FF FF FF FF FF  
   3722 0000E58C FF FF FF FF FF FF FF  
   3722 0000E593 FF FF FF FF FF FF FF  
   3722 0000E59A FF FF FF FF FF FF FF  
   3722 0000E5A1 FF FF FF FF FF FF FF  
   3722 0000E5A8 FF FF FF FF FF FF FF  
   3722 0000E5AF FF FF FF FF FF FF FF  
   3722 0000E5B6 FF FF FF FF FF FF FF  
   3722 0000E5BD FF FF FF FF FF FF FF  
   3722 0000E5C4 FF FF FF FF FF FF FF  
   3722 0000E5CB FF FF FF FF FF FF FF  
   3722 0000E5D2 FF FF FF FF FF FF FF  
   3722 0000E5D9 FF FF FF FF FF FF FF  
   3722 0000E5E0 FF FF FF FF FF FF FF  
   3722 0000E5E7 FF FF FF FF FF FF FF  
   3722 0000E5EE FF FF FF FF FF FF FF  
   3722 0000E5F5 FF FF FF FF FF FF FF  
   3722 0000E5FC FF FF FF FF FF FF FF  
   3722 0000E603 FF FF FF FF FF FF FF  
   3722 0000E60A FF FF FF FF FF FF FF  
   3722 0000E611 FF FF FF FF FF FF FF  
   3722 0000E618 FF FF FF FF FF FF FF  
   3722 0000E61F FF FF FF FF FF FF FF  
   3722 0000E626 FF FF FF FF FF FF FF  
   3722 0000E62D FF FF FF FF FF FF FF  
   3722 0000E634 FF FF FF FF FF FF FF  
   3722 0000E63B FF FF FF FF FF FF FF  
   3722 0000E642 FF FF FF FF FF FF FF  
   3722 0000E649 FF FF FF FF FF FF FF  
   3722 0000E650 FF FF FF FF FF FF FF  
   3722 0000E657 FF FF FF FF FF FF FF  
   3722 0000E65E FF FF FF FF FF FF FF  
   3722 0000E665 FF FF FF FF FF FF FF  
   3722 0000E66C FF FF FF FF FF FF FF  
   3722 0000E673 FF FF FF FF FF FF FF  
   3722 0000E67A FF FF FF FF FF FF FF  
   3722 0000E681 FF FF FF FF FF FF FF  
   3722 0000E688 FF FF FF FF FF FF FF  
   3722 0000E68F FF FF FF FF FF FF FF  
   3722 0000E696 FF FF FF FF FF FF FF  
   3722 0000E69D FF FF FF FF FF FF FF  
   3722 0000E6A4 FF FF FF FF FF FF FF  
   3722 0000E6AB FF FF FF FF FF FF FF  
   3722 0000E6B2 FF FF FF FF FF FF FF  
   3722 0000E6B9 FF FF FF FF FF FF FF  
   3722 0000E6C0 FF FF FF FF FF FF FF  
   3722 0000E6C7 FF FF FF FF FF FF FF  
   3722 0000E6CE FF FF FF FF FF FF FF  
   3722 0000E6D5 FF FF FF FF FF FF FF  
   3722 0000E6DC FF FF FF FF FF FF FF  
   3722 0000E6E3 FF FF FF FF FF FF FF  
   3722 0000E6EA FF FF FF FF FF FF FF  
   3722 0000E6F1 FF FF FF FF FF FF FF  
   3722 0000E6F8 FF FF FF FF FF FF FF  
   3722 0000E6FF FF FF FF FF FF FF FF  
   3722 0000E706 FF FF FF FF FF FF FF  
   3722 0000E70D FF FF FF FF FF FF FF  
   3722 0000E714 FF FF FF FF FF FF FF  
   3722 0000E71B FF FF FF FF FF FF FF  
   3722 0000E722 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 17
noc_boot11.asm
   3722 0000E729 FF FF FF FF FF FF FF  
   3722 0000E730 FF FF FF FF FF FF FF  
   3722 0000E737 FF FF FF FF FF FF FF  
   3722 0000E73E FF FF FF FF FF FF FF  
   3722 0000E745 FF FF FF FF FF FF FF  
   3722 0000E74C FF FF FF FF FF FF FF  
   3722 0000E753 FF FF FF FF FF FF FF  
   3722 0000E75A FF FF FF FF FF FF FF  
   3722 0000E761 FF FF FF FF FF FF FF  
   3722 0000E768 FF FF FF FF FF FF FF  
   3722 0000E76F FF FF FF FF FF FF FF  
   3722 0000E776 FF FF FF FF FF FF FF  
   3722 0000E77D FF FF FF FF FF FF FF  
   3722 0000E784 FF FF FF FF FF FF FF  
   3722 0000E78B FF FF FF FF FF FF FF  
   3722 0000E792 FF FF FF FF FF FF FF  
   3722 0000E799 FF FF FF FF FF FF FF  
   3722 0000E7A0 FF FF FF FF FF FF FF  
   3722 0000E7A7 FF FF FF FF FF FF FF  
   3722 0000E7AE FF FF FF FF FF FF FF  
   3722 0000E7B5 FF FF FF FF FF FF FF  
   3722 0000E7BC FF FF FF FF FF FF FF  
   3722 0000E7C3 FF FF FF FF FF FF FF  
   3722 0000E7CA FF FF FF FF FF FF FF  
   3722 0000E7D1 FF FF FF FF FF FF FF  
   3722 0000E7D8 FF FF FF FF FF FF FF  
   3722 0000E7DF FF FF FF FF FF FF FF  
   3722 0000E7E6 FF FF FF FF FF FF FF  
   3722 0000E7ED FF FF FF FF FF FF FF  
   3722 0000E7F4 FF FF FF FF FF FF FF  
   3722 0000E7FB FF FF FF FF FF FF FF  
   3722 0000E802 FF FF FF FF FF FF FF  
   3722 0000E809 FF FF FF FF FF FF FF  
   3722 0000E810 FF FF FF FF FF FF FF  
   3722 0000E817 FF FF FF FF FF FF FF  
   3722 0000E81E FF FF FF FF FF FF FF  
   3722 0000E825 FF FF FF FF FF FF FF  
   3722 0000E82C FF FF FF FF FF FF FF  
   3722 0000E833 FF FF FF FF FF FF FF  
   3722 0000E83A FF FF FF FF FF FF FF  
   3722 0000E841 FF FF FF FF FF FF FF  
   3722 0000E848 FF FF FF FF FF FF FF  
   3722 0000E84F FF FF FF FF FF FF FF  
   3722 0000E856 FF FF FF FF FF FF FF  
   3722 0000E85D FF FF FF FF FF FF FF  
   3722 0000E864 FF FF FF FF FF FF FF  
   3722 0000E86B FF FF FF FF FF FF FF  
   3722 0000E872 FF FF FF FF FF FF FF  
   3722 0000E879 FF FF FF FF FF FF FF  
   3722 0000E880 FF FF FF FF FF FF FF  
   3722 0000E887 FF FF FF FF FF FF FF  
   3722 0000E88E FF FF FF FF FF FF FF  
   3722 0000E895 FF FF FF FF FF FF FF  
   3722 0000E89C FF FF FF FF FF FF FF  
   3722 0000E8A3 FF FF FF FF FF FF FF  
   3722 0000E8AA FF FF FF FF FF FF FF  
   3722 0000E8B1 FF FF FF FF FF FF FF  
   3722 0000E8B8 FF FF FF FF FF FF FF  
   3722 0000E8BF FF FF FF FF FF FF FF  
   3722 0000E8C6 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 18
noc_boot11.asm
   3722 0000E8CD FF FF FF FF FF FF FF  
   3722 0000E8D4 FF FF FF FF FF FF FF  
   3722 0000E8DB FF FF FF FF FF FF FF  
   3722 0000E8E2 FF FF FF FF FF FF FF  
   3722 0000E8E9 FF FF FF FF FF FF FF  
   3722 0000E8F0 FF FF FF FF FF FF FF  
   3722 0000E8F7 FF FF FF FF FF FF FF  
   3722 0000E8FE FF FF FF FF FF FF FF  
   3722 0000E905 FF FF FF FF FF FF FF  
   3722 0000E90C FF FF FF FF FF FF FF  
   3722 0000E913 FF FF FF FF FF FF FF  
   3722 0000E91A FF FF FF FF FF FF FF  
   3722 0000E921 FF FF FF FF FF FF FF  
   3722 0000E928 FF FF FF FF FF FF FF  
   3722 0000E92F FF FF FF FF FF FF FF  
   3722 0000E936 FF FF FF FF FF FF FF  
   3722 0000E93D FF FF FF FF FF FF FF  
   3722 0000E944 FF FF FF FF FF FF FF  
   3722 0000E94B FF FF FF FF FF FF FF  
   3722 0000E952 FF FF FF FF FF FF FF  
   3722 0000E959 FF FF FF FF FF FF FF  
   3722 0000E960 FF FF FF FF FF FF FF  
   3722 0000E967 FF FF FF FF FF FF FF  
   3722 0000E96E FF FF FF FF FF FF FF  
   3722 0000E975 FF FF FF FF FF FF FF  
   3722 0000E97C FF FF FF FF FF FF FF  
   3722 0000E983 FF FF FF FF FF FF FF  
   3722 0000E98A FF FF FF FF FF FF FF  
   3722 0000E991 FF FF FF FF FF FF FF  
   3722 0000E998 FF FF FF FF FF FF FF  
   3722 0000E99F FF FF FF FF FF FF FF  
   3722 0000E9A6 FF FF FF FF FF FF FF  
   3722 0000E9AD FF FF FF FF FF FF FF  
   3722 0000E9B4 FF FF FF FF FF FF FF  
   3722 0000E9BB FF FF FF FF FF FF FF  
   3722 0000E9C2 FF FF FF FF FF FF FF  
   3722 0000E9C9 FF FF FF FF FF FF FF  
   3722 0000E9D0 FF FF FF FF FF FF FF  
   3722 0000E9D7 FF FF FF FF FF FF FF  
   3722 0000E9DE FF FF FF FF FF FF FF  
   3722 0000E9E5 FF FF FF FF FF FF FF  
   3722 0000E9EC FF FF FF FF FF FF FF  
   3722 0000E9F3 FF FF FF FF FF FF FF  
   3722 0000E9FA FF FF FF FF FF FF FF  
   3722 0000EA01 FF FF FF FF FF FF FF  
   3722 0000EA08 FF FF FF FF FF FF FF  
   3722 0000EA0F FF FF FF FF FF FF FF  
   3722 0000EA16 FF FF FF FF FF FF FF  
   3722 0000EA1D FF FF FF FF FF FF FF  
   3722 0000EA24 FF FF FF FF FF FF FF  
   3722 0000EA2B FF FF FF FF FF FF FF  
   3722 0000EA32 FF FF FF FF FF FF FF  
   3722 0000EA39 FF FF FF FF FF FF FF  
   3722 0000EA40 FF FF FF FF FF FF FF  
   3722 0000EA47 FF FF FF FF FF FF FF  
   3722 0000EA4E FF FF FF FF FF FF FF  
   3722 0000EA55 FF FF FF FF FF FF FF  
   3722 0000EA5C FF FF FF FF FF FF FF  
   3722 0000EA63 FF FF FF FF FF FF FF  
   3722 0000EA6A FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 19
noc_boot11.asm
   3722 0000EA71 FF FF FF FF FF FF FF  
   3722 0000EA78 FF FF FF FF FF FF FF  
   3722 0000EA7F FF FF FF FF FF FF FF  
   3722 0000EA86 FF FF FF FF FF FF FF  
   3722 0000EA8D FF FF FF FF FF FF FF  
   3722 0000EA94 FF FF FF FF FF FF FF  
   3722 0000EA9B FF FF FF FF FF FF FF  
   3722 0000EAA2 FF FF FF FF FF FF FF  
   3722 0000EAA9 FF FF FF FF FF FF FF  
   3722 0000EAB0 FF FF FF FF FF FF FF  
   3722 0000EAB7 FF FF FF FF FF FF FF  
   3722 0000EABE FF FF FF FF FF FF FF  
   3722 0000EAC5 FF FF FF FF FF FF FF  
   3722 0000EACC FF FF FF FF FF FF FF  
   3722 0000EAD3 FF FF FF FF FF FF FF  
   3722 0000EADA FF FF FF FF FF FF FF  
   3722 0000EAE1 FF FF FF FF FF FF FF  
   3722 0000EAE8 FF FF FF FF FF FF FF  
   3722 0000EAEF FF FF FF FF FF FF FF  
   3722 0000EAF6 FF FF FF FF FF FF FF  
   3722 0000EAFD FF FF FF FF FF FF FF  
   3722 0000EB04 FF FF FF FF FF FF FF  
   3722 0000EB0B FF FF FF FF FF FF FF  
   3722 0000EB12 FF FF FF FF FF FF FF  
   3722 0000EB19 FF FF FF FF FF FF FF  
   3722 0000EB20 FF FF FF FF FF FF FF  
   3722 0000EB27 FF FF FF FF FF FF FF  
   3722 0000EB2E FF FF FF FF FF FF FF  
   3722 0000EB35 FF FF FF FF FF FF FF  
   3722 0000EB3C FF FF FF FF FF FF FF  
   3722 0000EB43 FF FF FF FF FF FF FF  
   3722 0000EB4A FF FF FF FF FF FF FF  
   3722 0000EB51 FF FF FF FF FF FF FF  
   3722 0000EB58 FF FF FF FF FF FF FF  
   3722 0000EB5F FF FF FF FF FF FF FF  
   3722 0000EB66 FF FF FF FF FF FF FF  
   3722 0000EB6D FF FF FF FF FF FF FF  
   3722 0000EB74 FF FF FF FF FF FF FF  
   3722 0000EB7B FF FF FF FF FF FF FF  
   3722 0000EB82 FF FF FF FF FF FF FF  
   3722 0000EB89 FF FF FF FF FF FF FF  
   3722 0000EB90 FF FF FF FF FF FF FF  
   3722 0000EB97 FF FF FF FF FF FF FF  
   3722 0000EB9E FF FF FF FF FF FF FF  
   3722 0000EBA5 FF FF FF FF FF FF FF  
   3722 0000EBAC FF FF FF FF FF FF FF  
   3722 0000EBB3 FF FF FF FF FF FF FF  
   3722 0000EBBA FF FF FF FF FF FF FF  
   3722 0000EBC1 FF FF FF FF FF FF FF  
   3722 0000EBC8 FF FF FF FF FF FF FF  
   3722 0000EBCF FF FF FF FF FF FF FF  
   3722 0000EBD6 FF FF FF FF FF FF FF  
   3722 0000EBDD FF FF FF FF FF FF FF  
   3722 0000EBE4 FF FF FF FF FF FF FF  
   3722 0000EBEB FF FF FF FF FF FF FF  
   3722 0000EBF2 FF FF FF FF FF FF FF  
   3722 0000EBF9 FF FF FF FF FF FF FF  
   3722 0000EC00 FF FF FF FF FF FF FF  
   3722 0000EC07 FF FF FF FF FF FF FF  
   3722 0000EC0E FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 20
noc_boot11.asm
   3722 0000EC15 FF FF FF FF FF FF FF  
   3722 0000EC1C FF FF FF FF FF FF FF  
   3722 0000EC23 FF FF FF FF FF FF FF  
   3722 0000EC2A FF FF FF FF FF FF FF  
   3722 0000EC31 FF FF FF FF FF FF FF  
   3722 0000EC38 FF FF FF FF FF FF FF  
   3722 0000EC3F FF FF FF FF FF FF FF  
   3722 0000EC46 FF FF FF FF FF FF FF  
   3722 0000EC4D FF FF FF FF FF FF FF  
   3722 0000EC54 FF FF FF FF FF FF FF  
   3722 0000EC5B FF FF FF FF FF FF FF  
   3722 0000EC62 FF FF FF FF FF FF FF  
   3722 0000EC69 FF FF FF FF FF FF FF  
   3722 0000EC70 FF FF FF FF FF FF FF  
   3722 0000EC77 FF FF FF FF FF FF FF  
   3722 0000EC7E FF FF FF FF FF FF FF  
   3722 0000EC85 FF FF FF FF FF FF FF  
   3722 0000EC8C FF FF FF FF FF FF FF  
   3722 0000EC93 FF FF FF FF FF FF FF  
   3722 0000EC9A FF FF FF FF FF FF FF  
   3722 0000ECA1 FF FF FF FF FF FF FF  
   3722 0000ECA8 FF FF FF FF FF FF FF  
   3722 0000ECAF FF FF FF FF FF FF FF  
   3722 0000ECB6 FF FF FF FF FF FF FF  
   3722 0000ECBD FF FF FF FF FF FF FF  
   3722 0000ECC4 FF FF FF FF FF FF FF  
   3722 0000ECCB FF FF FF FF FF FF FF  
   3722 0000ECD2 FF FF FF FF FF FF FF  
   3722 0000ECD9 FF FF FF FF FF FF FF  
   3722 0000ECE0 FF FF FF FF FF FF FF  
   3722 0000ECE7 FF FF FF FF FF FF FF  
   3722 0000ECEE FF FF FF FF FF FF FF  
   3722 0000ECF5 FF FF FF FF FF FF FF  
   3722 0000ECFC FF FF FF FF FF FF FF  
   3722 0000ED03 FF FF FF FF FF FF FF  
   3722 0000ED0A FF FF FF FF FF FF FF  
   3722 0000ED11 FF FF FF FF FF FF FF  
   3722 0000ED18 FF FF FF FF FF FF FF  
   3722 0000ED1F FF FF FF FF FF FF FF  
   3722 0000ED26 FF FF FF FF FF FF FF  
   3722 0000ED2D FF FF FF FF FF FF FF  
   3722 0000ED34 FF FF FF FF FF FF FF  
   3722 0000ED3B FF FF FF FF FF FF FF  
   3722 0000ED42 FF FF FF FF FF FF FF  
   3722 0000ED49 FF FF FF FF FF FF FF  
   3722 0000ED50 FF FF FF FF FF FF FF  
   3722 0000ED57 FF FF FF FF FF FF FF  
   3722 0000ED5E FF FF FF FF FF FF FF  
   3722 0000ED65 FF FF FF FF FF FF FF  
   3722 0000ED6C FF FF FF FF FF FF FF  
   3722 0000ED73 FF FF FF FF FF FF FF  
   3722 0000ED7A FF FF FF FF FF FF FF  
   3722 0000ED81 FF FF FF FF FF FF FF  
   3722 0000ED88 FF FF FF FF FF FF FF  
   3722 0000ED8F FF FF FF FF FF FF FF  
   3722 0000ED96 FF FF FF FF FF FF FF  
   3722 0000ED9D FF FF FF FF FF FF FF  
   3722 0000EDA4 FF FF FF FF FF FF FF  
   3722 0000EDAB FF FF FF FF FF FF FF  
   3722 0000EDB2 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 21
noc_boot11.asm
   3722 0000EDB9 FF FF FF FF FF FF FF  
   3722 0000EDC0 FF FF FF FF FF FF FF  
   3722 0000EDC7 FF FF FF FF FF FF FF  
   3722 0000EDCE FF FF FF FF FF FF FF  
   3722 0000EDD5 FF FF FF FF FF FF FF  
   3722 0000EDDC FF FF FF FF FF FF FF  
   3722 0000EDE3 FF FF FF FF FF FF FF  
   3722 0000EDEA FF FF FF FF FF FF FF  
   3722 0000EDF1 FF FF FF FF FF FF FF  
   3722 0000EDF8 FF FF FF FF FF FF FF  
   3722 0000EDFF FF FF FF FF FF FF FF  
   3722 0000EE06 FF FF FF FF FF FF FF  
   3722 0000EE0D FF FF FF FF FF FF FF  
   3722 0000EE14 FF FF FF FF FF FF FF  
   3722 0000EE1B FF FF FF FF FF FF FF  
   3722 0000EE22 FF FF FF FF FF FF FF  
   3722 0000EE29 FF FF FF FF FF FF FF  
   3722 0000EE30 FF FF FF FF FF FF FF  
   3722 0000EE37 FF FF FF FF FF FF FF  
   3722 0000EE3E FF FF FF FF FF FF FF  
   3722 0000EE45 FF FF FF FF FF FF FF  
   3722 0000EE4C FF FF FF FF FF FF FF  
   3722 0000EE53 FF FF FF FF FF FF FF  
   3722 0000EE5A FF FF FF FF FF FF FF  
   3722 0000EE61 FF FF FF FF FF FF FF  
   3722 0000EE68 FF FF FF FF FF FF FF  
   3722 0000EE6F FF FF FF FF FF FF FF  
   3722 0000EE76 FF FF FF FF FF FF FF  
   3722 0000EE7D FF FF FF FF FF FF FF  
   3722 0000EE84 FF FF FF FF FF FF FF  
   3722 0000EE8B FF FF FF FF FF FF FF  
   3722 0000EE92 FF FF FF FF FF FF FF  
   3722 0000EE99 FF FF FF FF FF FF FF  
   3722 0000EEA0 FF FF FF FF FF FF FF  
   3722 0000EEA7 FF FF FF FF FF FF FF  
   3722 0000EEAE FF FF FF FF FF FF FF  
   3722 0000EEB5 FF FF FF FF FF FF FF  
   3722 0000EEBC FF FF FF FF FF FF FF  
   3722 0000EEC3 FF FF FF FF FF FF FF  
   3722 0000EECA FF FF FF FF FF FF FF  
   3722 0000EED1 FF FF FF FF FF FF FF  
   3722 0000EED8 FF FF FF FF FF FF FF  
   3722 0000EEDF FF FF FF FF FF FF FF  
   3722 0000EEE6 FF FF FF FF FF FF FF  
   3722 0000EEED FF FF FF FF FF FF FF  
   3722 0000EEF4 FF FF FF FF FF FF FF  
   3722 0000EEFB FF FF FF FF FF FF FF  
   3722 0000EF02 FF FF FF FF FF FF FF  
   3722 0000EF09 FF FF FF FF FF FF FF  
   3722 0000EF10 FF FF FF FF FF FF FF  
   3722 0000EF17 FF FF FF FF FF FF FF  
   3722 0000EF1E FF FF FF FF FF FF FF  
   3722 0000EF25 FF FF FF FF FF FF FF  
   3722 0000EF2C FF FF FF FF FF FF FF  
   3722 0000EF33 FF FF FF FF FF FF FF  
   3722 0000EF3A FF FF FF FF FF FF FF  
   3722 0000EF41 FF FF FF FF FF FF FF  
   3722 0000EF48 FF FF FF FF FF FF FF  
   3722 0000EF4F FF FF FF FF FF FF FF  
   3722 0000EF56 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 22
noc_boot11.asm
   3722 0000EF5D FF FF FF FF FF FF FF  
   3722 0000EF64 FF FF FF FF FF FF FF  
   3722 0000EF6B FF FF FF FF FF FF FF  
   3722 0000EF72 FF FF FF FF FF FF FF  
   3722 0000EF79 FF FF FF FF FF FF FF  
   3722 0000EF80 FF FF FF FF FF FF FF  
   3722 0000EF87 FF FF FF FF FF FF FF  
   3722 0000EF8E FF FF FF FF FF FF FF  
   3722 0000EF95 FF FF FF FF FF FF FF  
   3722 0000EF9C FF FF FF FF FF FF FF  
   3722 0000EFA3 FF FF FF FF FF FF FF  
   3722 0000EFAA FF FF FF FF FF FF FF  
   3722 0000EFB1 FF FF FF FF FF FF FF  
   3722 0000EFB8 FF FF FF FF FF FF FF  
   3722 0000EFBF FF FF FF FF FF FF FF  
   3722 0000EFC6 FF FF FF FF FF FF FF  
   3722 0000EFCD FF FF FF FF FF FF FF  
   3722 0000EFD4 FF FF FF FF FF FF FF  
   3722 0000EFDB FF FF FF FF FF FF FF  
   3722 0000EFE2 FF FF FF FF FF FF FF  
   3722 0000EFE9 FF FF FF FF FF FF FF  
   3722 0000EFF0 FF FF FF FF FF FF FF  
   3722 0000EFF7 FF FF FF FF FF FF FF  
   3722 0000EFFE FF FF FF FF FF FF FF  
   3722 0000F005 FF FF FF FF FF FF FF  
   3722 0000F00C FF FF FF FF FF FF FF  
   3722 0000F013 FF FF FF FF FF FF FF  
   3722 0000F01A FF FF FF FF FF FF FF  
   3722 0000F021 FF FF FF FF FF FF FF  
   3722 0000F028 FF FF FF FF FF FF FF  
   3722 0000F02F FF FF FF FF FF FF FF  
   3722 0000F036 FF FF FF FF FF FF FF  
   3722 0000F03D FF FF FF FF FF FF FF  
   3722 0000F044 FF FF FF FF FF FF FF  
   3722 0000F04B FF FF FF FF FF FF FF  
   3722 0000F052 FF FF FF FF FF FF FF  
   3722 0000F059 FF FF FF FF FF FF FF  
   3722 0000F060 FF FF FF FF FF FF FF  
   3722 0000F067 FF FF FF FF FF FF FF  
   3722 0000F06E FF FF FF FF FF FF FF  
   3722 0000F075 FF FF FF FF FF FF FF  
   3722 0000F07C FF FF FF FF FF FF FF  
   3722 0000F083 FF FF FF FF FF FF FF  
   3722 0000F08A FF FF FF FF FF FF FF  
   3722 0000F091 FF FF FF FF FF FF FF  
   3722 0000F098 FF FF FF FF FF FF FF  
   3722 0000F09F FF FF FF FF FF FF FF  
   3722 0000F0A6 FF FF FF FF FF FF FF  
   3722 0000F0AD FF FF FF FF FF FF FF  
   3722 0000F0B4 FF FF FF FF FF FF FF  
   3722 0000F0BB FF FF FF FF FF FF FF  
   3722 0000F0C2 FF FF FF FF FF FF FF  
   3722 0000F0C9 FF FF FF FF FF FF FF  
   3722 0000F0D0 FF FF FF FF FF FF FF  
   3722 0000F0D7 FF FF FF FF FF FF FF  
   3722 0000F0DE FF FF FF FF FF FF FF  
   3722 0000F0E5 FF FF FF FF FF FF FF  
   3722 0000F0EC FF FF FF FF FF FF FF  
   3722 0000F0F3 FF FF FF FF FF FF FF  
   3722 0000F0FA FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 23
noc_boot11.asm
   3722 0000F101 FF FF FF FF FF FF FF  
   3722 0000F108 FF FF FF FF FF FF FF  
   3722 0000F10F FF FF FF FF FF FF FF  
   3722 0000F116 FF FF FF FF FF FF FF  
   3722 0000F11D FF FF FF FF FF FF FF  
   3722 0000F124 FF FF FF FF FF FF FF  
   3722 0000F12B FF FF FF FF FF FF FF  
   3722 0000F132 FF FF FF FF FF FF FF  
   3722 0000F139 FF FF FF FF FF FF FF  
   3722 0000F140 FF FF FF FF FF FF FF  
   3722 0000F147 FF FF FF FF FF FF FF  
   3722 0000F14E FF FF FF FF FF FF FF  
   3722 0000F155 FF FF FF FF FF FF FF  
   3722 0000F15C FF FF FF FF FF FF FF  
   3722 0000F163 FF FF FF FF FF FF FF  
   3722 0000F16A FF FF FF FF FF FF FF  
   3722 0000F171 FF FF FF FF FF FF FF  
   3722 0000F178 FF FF FF FF FF FF FF  
   3722 0000F17F FF FF FF FF FF FF FF  
   3722 0000F186 FF FF FF FF FF FF FF  
   3722 0000F18D FF FF FF FF FF FF FF  
   3722 0000F194 FF FF FF FF FF FF FF  
   3722 0000F19B FF FF FF FF FF FF FF  
   3722 0000F1A2 FF FF FF FF FF FF FF  
   3722 0000F1A9 FF FF FF FF FF FF FF  
   3722 0000F1B0 FF FF FF FF FF FF FF  
   3722 0000F1B7 FF FF FF FF FF FF FF  
   3722 0000F1BE FF FF FF FF FF FF FF  
   3722 0000F1C5 FF FF FF FF FF FF FF  
   3722 0000F1CC FF FF FF FF FF FF FF  
   3722 0000F1D3 FF FF FF FF FF FF FF  
   3722 0000F1DA FF FF FF FF FF FF FF  
   3722 0000F1E1 FF FF FF FF FF FF FF  
   3722 0000F1E8 FF FF FF FF FF FF FF  
   3722 0000F1EF FF FF FF FF FF FF FF  
   3722 0000F1F6 FF FF FF FF FF FF FF  
   3722 0000F1FD FF FF FF FF FF FF FF  
   3722 0000F204 FF FF FF FF FF FF FF  
   3722 0000F20B FF FF FF FF FF FF FF  
   3722 0000F212 FF FF FF FF FF FF FF  
   3722 0000F219 FF FF FF FF FF FF FF  
   3722 0000F220 FF FF FF FF FF FF FF  
   3722 0000F227 FF FF FF FF FF FF FF  
   3722 0000F22E FF FF FF FF FF FF FF  
   3722 0000F235 FF FF FF FF FF FF FF  
   3722 0000F23C FF FF FF FF FF FF FF  
   3722 0000F243 FF FF FF FF FF FF FF  
   3722 0000F24A FF FF FF FF FF FF FF  
   3722 0000F251 FF FF FF FF FF FF FF  
   3722 0000F258 FF FF FF FF FF FF FF  
   3722 0000F25F FF FF FF FF FF FF FF  
   3722 0000F266 FF FF FF FF FF FF FF  
   3722 0000F26D FF FF FF FF FF FF FF  
   3722 0000F274 FF FF FF FF FF FF FF  
   3722 0000F27B FF FF FF FF FF FF FF  
   3722 0000F282 FF FF FF FF FF FF FF  
   3722 0000F289 FF FF FF FF FF FF FF  
   3722 0000F290 FF FF FF FF FF FF FF  
   3722 0000F297 FF FF FF FF FF FF FF  
   3722 0000F29E FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 24
noc_boot11.asm
   3722 0000F2A5 FF FF FF FF FF FF FF  
   3722 0000F2AC FF FF FF FF FF FF FF  
   3722 0000F2B3 FF FF FF FF FF FF FF  
   3722 0000F2BA FF FF FF FF FF FF FF  
   3722 0000F2C1 FF FF FF FF FF FF FF  
   3722 0000F2C8 FF FF FF FF FF FF FF  
   3722 0000F2CF FF FF FF FF FF FF FF  
   3722 0000F2D6 FF FF FF FF FF FF FF  
   3722 0000F2DD FF FF FF FF FF FF FF  
   3722 0000F2E4 FF FF FF FF FF FF FF  
   3722 0000F2EB FF FF FF FF FF FF FF  
   3722 0000F2F2 FF FF FF FF FF FF FF  
   3722 0000F2F9 FF FF FF FF FF FF FF  
   3722 0000F300 FF FF FF FF FF FF FF  
   3722 0000F307 FF FF FF FF FF FF FF  
   3722 0000F30E FF FF FF FF FF FF FF  
   3722 0000F315 FF FF FF FF FF FF FF  
   3722 0000F31C FF FF FF FF FF FF FF  
   3722 0000F323 FF FF FF FF FF FF FF  
   3722 0000F32A FF FF FF FF FF FF FF  
   3722 0000F331 FF FF FF FF FF FF FF  
   3722 0000F338 FF FF FF FF FF FF FF  
   3722 0000F33F FF FF FF FF FF FF FF  
   3722 0000F346 FF FF FF FF FF FF FF  
   3722 0000F34D FF FF FF FF FF FF FF  
   3722 0000F354 FF FF FF FF FF FF FF  
   3722 0000F35B FF FF FF FF FF FF FF  
   3722 0000F362 FF FF FF FF FF FF FF  
   3722 0000F369 FF FF FF FF FF FF FF  
   3722 0000F370 FF FF FF FF FF FF FF  
   3722 0000F377 FF FF FF FF FF FF FF  
   3722 0000F37E FF FF FF FF FF FF FF  
   3722 0000F385 FF FF FF FF FF FF FF  
   3722 0000F38C FF FF FF FF FF FF FF  
   3722 0000F393 FF FF FF FF FF FF FF  
   3722 0000F39A FF FF FF FF FF FF FF  
   3722 0000F3A1 FF FF FF FF FF FF FF  
   3722 0000F3A8 FF FF FF FF FF FF FF  
   3722 0000F3AF FF FF FF FF FF FF FF  
   3722 0000F3B6 FF FF FF FF FF FF FF  
   3722 0000F3BD FF FF FF FF FF FF FF  
   3722 0000F3C4 FF FF FF FF FF FF FF  
   3722 0000F3CB FF FF FF FF FF FF FF  
   3722 0000F3D2 FF FF FF FF FF FF FF  
   3722 0000F3D9 FF FF FF FF FF FF FF  
   3722 0000F3E0 FF FF FF FF FF FF FF  
   3722 0000F3E7 FF FF FF FF FF FF FF  
   3722 0000F3EE FF FF FF FF FF FF FF  
   3722 0000F3F5 FF FF FF FF FF FF FF  
   3722 0000F3FC FF FF FF FF FF FF FF  
   3722 0000F403 FF FF FF FF FF FF FF  
   3722 0000F40A FF FF FF FF FF FF FF  
   3722 0000F411 FF FF FF FF FF FF FF  
   3722 0000F418 FF FF FF FF FF FF FF  
   3722 0000F41F FF FF FF FF FF FF FF  
   3722 0000F426 FF FF FF FF FF FF FF  
   3722 0000F42D FF FF FF FF FF FF FF  
   3722 0000F434 FF FF FF FF FF FF FF  
   3722 0000F43B FF FF FF FF FF FF FF  
   3722 0000F442 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 25
noc_boot11.asm
   3722 0000F449 FF FF FF FF FF FF FF  
   3722 0000F450 FF FF FF FF FF FF FF  
   3722 0000F457 FF FF FF FF FF FF FF  
   3722 0000F45E FF FF FF FF FF FF FF  
   3722 0000F465 FF FF FF FF FF FF FF  
   3722 0000F46C FF FF FF FF FF FF FF  
   3722 0000F473 FF FF FF FF FF FF FF  
   3722 0000F47A FF FF FF FF FF FF FF  
   3722 0000F481 FF FF FF FF FF FF FF  
   3722 0000F488 FF FF FF FF FF FF FF  
   3722 0000F48F FF FF FF FF FF FF FF  
   3722 0000F496 FF FF FF FF FF FF FF  
   3722 0000F49D FF FF FF FF FF FF FF  
   3722 0000F4A4 FF FF FF FF FF FF FF  
   3722 0000F4AB FF FF FF FF FF FF FF  
   3722 0000F4B2 FF FF FF FF FF FF FF  
   3722 0000F4B9 FF FF FF FF FF FF FF  
   3722 0000F4C0 FF FF FF FF FF FF FF  
   3722 0000F4C7 FF FF FF FF FF FF FF  
   3722 0000F4CE FF FF FF FF FF FF FF  
   3722 0000F4D5 FF FF FF FF FF FF FF  
   3722 0000F4DC FF FF FF FF FF FF FF  
   3722 0000F4E3 FF FF FF FF FF FF FF  
   3722 0000F4EA FF FF FF FF FF FF FF  
   3722 0000F4F1 FF FF FF FF FF FF FF  
   3722 0000F4F8 FF FF FF FF FF FF FF  
   3722 0000F4FF FF FF FF FF FF FF FF  
   3722 0000F506 FF FF FF FF FF FF FF  
   3722 0000F50D FF FF FF FF FF FF FF  
   3722 0000F514 FF FF FF FF FF FF FF  
   3722 0000F51B FF FF FF FF FF FF FF  
   3722 0000F522 FF FF FF FF FF FF FF  
   3722 0000F529 FF FF FF FF FF FF FF  
   3722 0000F530 FF FF FF FF FF FF FF  
   3722 0000F537 FF FF FF FF FF FF FF  
   3722 0000F53E FF FF FF FF FF FF FF  
   3722 0000F545 FF FF FF FF FF FF FF  
   3722 0000F54C FF FF FF FF FF FF FF  
   3722 0000F553 FF FF FF FF FF FF FF  
   3722 0000F55A FF FF FF FF FF FF FF  
   3722 0000F561 FF FF FF FF FF FF FF  
   3722 0000F568 FF FF FF FF FF FF FF  
   3722 0000F56F FF FF FF FF FF FF FF  
   3722 0000F576 FF FF FF FF FF FF FF  
   3722 0000F57D FF FF FF FF FF FF FF  
   3722 0000F584 FF FF FF FF FF FF FF  
   3722 0000F58B FF FF FF FF FF FF FF  
   3722 0000F592 FF FF FF FF FF FF FF  
   3722 0000F599 FF FF FF FF FF FF FF  
   3722 0000F5A0 FF FF FF FF FF FF FF  
   3722 0000F5A7 FF FF FF FF FF FF FF  
   3722 0000F5AE FF FF FF FF FF FF FF  
   3722 0000F5B5 FF FF FF FF FF FF FF  
   3722 0000F5BC FF FF FF FF FF FF FF  
   3722 0000F5C3 FF FF FF FF FF FF FF  
   3722 0000F5CA FF FF FF FF FF FF FF  
   3722 0000F5D1 FF FF FF FF FF FF FF  
   3722 0000F5D8 FF FF FF FF FF FF FF  
   3722 0000F5DF FF FF FF FF FF FF FF  
   3722 0000F5E6 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 26
noc_boot11.asm
   3722 0000F5ED FF FF FF FF FF FF FF  
   3722 0000F5F4 FF FF FF FF FF FF FF  
   3722 0000F5FB FF FF FF FF FF FF FF  
   3722 0000F602 FF FF FF FF FF FF FF  
   3722 0000F609 FF FF FF FF FF FF FF  
   3722 0000F610 FF FF FF FF FF FF FF  
   3722 0000F617 FF FF FF FF FF FF FF  
   3722 0000F61E FF FF FF FF FF FF FF  
   3722 0000F625 FF FF FF FF FF FF FF  
   3722 0000F62C FF FF FF FF FF FF FF  
   3722 0000F633 FF FF FF FF FF FF FF  
   3722 0000F63A FF FF FF FF FF FF FF  
   3722 0000F641 FF FF FF FF FF FF FF  
   3722 0000F648 FF FF FF FF FF FF FF  
   3722 0000F64F FF FF FF FF FF FF FF  
   3722 0000F656 FF FF FF FF FF FF FF  
   3722 0000F65D FF FF FF FF FF FF FF  
   3722 0000F664 FF FF FF FF FF FF FF  
   3722 0000F66B FF FF FF FF FF FF FF  
   3722 0000F672 FF FF FF FF FF FF FF  
   3722 0000F679 FF FF FF FF FF FF FF  
   3722 0000F680 FF FF FF FF FF FF FF  
   3722 0000F687 FF FF FF FF FF FF FF  
   3722 0000F68E FF FF FF FF FF FF FF  
   3722 0000F695 FF FF FF FF FF FF FF  
   3722 0000F69C FF FF FF FF FF FF FF  
   3722 0000F6A3 FF FF FF FF FF FF FF  
   3722 0000F6AA FF FF FF FF FF FF FF  
   3722 0000F6B1 FF FF FF FF FF FF FF  
   3722 0000F6B8 FF FF FF FF FF FF FF  
   3722 0000F6BF FF FF FF FF FF FF FF  
   3722 0000F6C6 FF FF FF FF FF FF FF  
   3722 0000F6CD FF FF FF FF FF FF FF  
   3722 0000F6D4 FF FF FF FF FF FF FF  
   3722 0000F6DB FF FF FF FF FF FF FF  
   3722 0000F6E2 FF FF FF FF FF FF FF  
   3722 0000F6E9 FF FF FF FF FF FF FF  
   3722 0000F6F0 FF FF FF FF FF FF FF  
   3722 0000F6F7 FF FF FF FF FF FF FF  
   3722 0000F6FE FF FF FF FF FF FF FF  
   3722 0000F705 FF FF FF FF FF FF FF  
   3722 0000F70C FF FF FF FF FF FF FF  
   3722 0000F713 FF FF FF FF FF FF FF  
   3722 0000F71A FF FF FF FF FF FF FF  
   3722 0000F721 FF FF FF FF FF FF FF  
   3722 0000F728 FF FF FF FF FF FF FF  
   3722 0000F72F FF FF FF FF FF FF FF  
   3722 0000F736 FF FF FF FF FF FF FF  
   3722 0000F73D FF FF FF FF FF FF FF  
   3722 0000F744 FF FF FF FF FF FF FF  
   3722 0000F74B FF FF FF FF FF FF FF  
   3722 0000F752 FF FF FF FF FF FF FF  
   3722 0000F759 FF FF FF FF FF FF FF  
   3722 0000F760 FF FF FF FF FF FF FF  
   3722 0000F767 FF FF FF FF FF FF FF  
   3722 0000F76E FF FF FF FF FF FF FF  
   3722 0000F775 FF FF FF FF FF FF FF  
   3722 0000F77C FF FF FF FF FF FF FF  
   3722 0000F783 FF FF FF FF FF FF FF  
   3722 0000F78A FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 27
noc_boot11.asm
   3722 0000F791 FF FF FF FF FF FF FF  
   3722 0000F798 FF FF FF FF FF FF FF  
   3722 0000F79F FF FF FF FF FF FF FF  
   3722 0000F7A6 FF FF FF FF FF FF FF  
   3722 0000F7AD FF FF FF FF FF FF FF  
   3722 0000F7B4 FF FF FF FF FF FF FF  
   3722 0000F7BB FF FF FF FF FF FF FF  
   3722 0000F7C2 FF FF FF FF FF FF FF  
   3722 0000F7C9 FF FF FF FF FF FF FF  
   3722 0000F7D0 FF FF FF FF FF FF FF  
   3722 0000F7D7 FF FF FF FF FF FF FF  
   3722 0000F7DE FF FF FF FF FF FF FF  
   3722 0000F7E5 FF FF FF FF FF FF FF  
   3722 0000F7EC FF FF FF FF FF FF FF  
   3722 0000F7F3 FF FF FF FF FF FF FF  
   3722 0000F7FA FF FF FF FF FF FF FF  
   3722 0000F801 FF FF FF FF FF FF FF  
   3722 0000F808 FF FF FF FF FF FF FF  
   3722 0000F80F FF FF FF FF FF FF FF  
   3722 0000F816 FF FF FF FF FF FF FF  
   3722 0000F81D FF FF FF FF FF FF FF  
   3722 0000F824 FF FF FF FF FF FF FF  
   3722 0000F82B FF FF FF FF FF FF FF  
   3722 0000F832 FF FF FF FF FF FF FF  
   3722 0000F839 FF FF FF FF FF FF FF  
   3722 0000F840 FF FF FF FF FF FF FF  
   3722 0000F847 FF FF FF FF FF FF FF  
   3722 0000F84E FF FF FF FF FF FF FF  
   3722 0000F855 FF FF FF FF FF FF FF  
   3722 0000F85C FF FF FF FF FF FF FF  
   3722 0000F863 FF FF FF FF FF FF FF  
   3722 0000F86A FF FF FF FF FF FF FF  
   3722 0000F871 FF FF FF FF FF FF FF  
   3722 0000F878 FF FF FF FF FF FF FF  
   3722 0000F87F FF FF FF FF FF FF FF  
   3722 0000F886 FF FF FF FF FF FF FF  
   3722 0000F88D FF FF FF FF FF FF FF  
   3722 0000F894 FF FF FF FF FF FF FF  
   3722 0000F89B FF FF FF FF FF FF FF  
   3722 0000F8A2 FF FF FF FF FF FF FF  
   3722 0000F8A9 FF FF FF FF FF FF FF  
   3722 0000F8B0 FF FF FF FF FF FF FF  
   3722 0000F8B7 FF FF FF FF FF FF FF  
   3722 0000F8BE FF FF FF FF FF FF FF  
   3722 0000F8C5 FF FF FF FF FF FF FF  
   3722 0000F8CC FF FF FF FF FF FF FF  
   3722 0000F8D3 FF FF FF FF FF FF FF  
   3722 0000F8DA FF FF FF FF FF FF FF  
   3722 0000F8E1 FF FF FF FF FF FF FF  
   3722 0000F8E8 FF FF FF FF FF FF FF  
   3722 0000F8EF FF FF FF FF FF FF FF  
   3722 0000F8F6 FF FF FF FF FF FF FF  
   3722 0000F8FD FF FF FF FF FF FF FF  
   3722 0000F904 FF FF FF FF FF FF FF  
   3722 0000F90B FF FF FF FF FF FF FF  
   3722 0000F912 FF FF FF FF FF FF FF  
   3722 0000F919 FF FF FF FF FF FF FF  
   3722 0000F920 FF FF FF FF FF FF FF  
   3722 0000F927 FF FF FF FF FF FF FF  
   3722 0000F92E FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 28
noc_boot11.asm
   3722 0000F935 FF FF FF FF FF FF FF  
   3722 0000F93C FF FF FF FF FF FF FF  
   3722 0000F943 FF FF FF FF FF FF FF  
   3722 0000F94A FF FF FF FF FF FF FF  
   3722 0000F951 FF FF FF FF FF FF FF  
   3722 0000F958 FF FF FF FF FF FF FF  
   3722 0000F95F FF FF FF FF FF FF FF  
   3722 0000F966 FF FF FF FF FF FF FF  
   3722 0000F96D FF FF FF FF FF FF FF  
   3722 0000F974 FF FF FF FF FF FF FF  
   3722 0000F97B FF FF FF FF FF FF FF  
   3722 0000F982 FF FF FF FF FF FF FF  
   3722 0000F989 FF FF FF FF FF FF FF  
   3722 0000F990 FF FF FF FF FF FF FF  
   3722 0000F997 FF FF FF FF FF FF FF  
   3722 0000F99E FF FF FF FF FF FF FF  
   3722 0000F9A5 FF FF FF FF FF FF FF  
   3722 0000F9AC FF FF FF FF FF FF FF  
   3722 0000F9B3 FF FF FF FF FF FF FF  
   3722 0000F9BA FF FF FF FF FF FF FF  
   3722 0000F9C1 FF FF FF FF FF FF FF  
   3722 0000F9C8 FF FF FF FF FF FF FF  
   3722 0000F9CF FF FF FF FF FF FF FF  
   3722 0000F9D6 FF FF FF FF FF FF FF  
   3722 0000F9DD FF FF FF FF FF FF FF  
   3722 0000F9E4 FF FF FF FF FF FF FF  
   3722 0000F9EB FF FF FF FF FF FF FF  
   3722 0000F9F2 FF FF FF FF FF FF FF  
   3722 0000F9F9 FF FF FF FF FF FF FF  
   3722 0000FA00 FF FF FF FF FF FF FF  
   3722 0000FA07 FF FF FF FF FF FF FF  
   3722 0000FA0E FF FF FF FF FF FF FF  
   3722 0000FA15 FF FF FF FF FF FF FF  
   3722 0000FA1C FF FF FF FF FF FF FF  
   3722 0000FA23 FF FF FF FF FF FF FF  
   3722 0000FA2A FF FF FF FF FF FF FF  
   3722 0000FA31 FF FF FF FF FF FF FF  
   3722 0000FA38 FF FF FF FF FF FF FF  
   3722 0000FA3F FF FF FF FF FF FF FF  
   3722 0000FA46 FF FF FF FF FF FF FF  
   3722 0000FA4D FF FF FF FF FF FF FF  
   3722 0000FA54 FF FF FF FF FF FF FF  
   3722 0000FA5B FF FF FF FF FF FF FF  
   3722 0000FA62 FF FF FF FF FF FF FF  
   3722 0000FA69 FF FF FF FF FF FF FF  
   3722 0000FA70 FF FF FF FF FF FF FF  
   3722 0000FA77 FF FF FF FF FF FF FF  
   3722 0000FA7E FF FF FF FF FF FF FF  
   3722 0000FA85 FF FF FF FF FF FF FF  
   3722 0000FA8C FF FF FF FF FF FF FF  
   3722 0000FA93 FF FF FF FF FF FF FF  
   3722 0000FA9A FF FF FF FF FF FF FF  
   3722 0000FAA1 FF FF FF FF FF FF FF  
   3722 0000FAA8 FF FF FF FF FF FF FF  
   3722 0000FAAF FF FF FF FF FF FF FF  
   3722 0000FAB6 FF FF FF FF FF FF FF  
   3722 0000FABD FF FF FF FF FF FF FF  
   3722 0000FAC4 FF FF FF FF FF FF FF  
   3722 0000FACB FF FF FF FF FF FF FF  
   3722 0000FAD2 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 29
noc_boot11.asm
   3722 0000FAD9 FF FF FF FF FF FF FF  
   3722 0000FAE0 FF FF FF FF FF FF FF  
   3722 0000FAE7 FF FF FF FF FF FF FF  
   3722 0000FAEE FF FF FF FF FF FF FF  
   3722 0000FAF5 FF FF FF FF FF FF FF  
   3722 0000FAFC FF FF FF FF FF FF FF  
   3722 0000FB03 FF FF FF FF FF FF FF  
   3722 0000FB0A FF FF FF FF FF FF FF  
   3722 0000FB11 FF FF FF FF FF FF FF  
   3722 0000FB18 FF FF FF FF FF FF FF  
   3722 0000FB1F FF FF FF FF FF FF FF  
   3722 0000FB26 FF FF FF FF FF FF FF  
   3722 0000FB2D FF FF FF FF FF FF FF  
   3722 0000FB34 FF FF FF FF FF FF FF  
   3722 0000FB3B FF FF FF FF FF FF FF  
   3722 0000FB42 FF FF FF FF FF FF FF  
   3722 0000FB49 FF FF FF FF FF FF FF  
   3722 0000FB50 FF FF FF FF FF FF FF  
   3722 0000FB57 FF FF FF FF FF FF FF  
   3722 0000FB5E FF FF FF FF FF FF FF  
   3722 0000FB65 FF FF FF FF FF FF FF  
   3722 0000FB6C FF FF FF FF FF FF FF  
   3722 0000FB73 FF FF FF FF FF FF FF  
   3722 0000FB7A FF FF FF FF FF FF FF  
   3722 0000FB81 FF FF FF FF FF FF FF  
   3722 0000FB88 FF FF FF FF FF FF FF  
   3722 0000FB8F FF FF FF FF FF FF FF  
   3722 0000FB96 FF FF FF FF FF FF FF  
   3722 0000FB9D FF FF FF FF FF FF FF  
   3722 0000FBA4 FF FF FF FF FF FF FF  
   3722 0000FBAB FF FF FF FF FF FF FF  
   3722 0000FBB2 FF FF FF FF FF FF FF  
   3722 0000FBB9 FF FF FF FF FF FF FF  
   3722 0000FBC0 FF FF FF FF FF FF FF  
   3722 0000FBC7 FF FF FF FF FF FF FF  
   3722 0000FBCE FF FF FF FF FF FF FF  
   3722 0000FBD5 FF FF FF FF FF FF FF  
   3722 0000FBDC FF FF FF FF FF FF FF  
   3722 0000FBE3 FF FF FF FF FF FF FF  
   3722 0000FBEA FF FF FF FF FF FF FF  
   3722 0000FBF1 FF FF FF FF FF FF FF  
   3722 0000FBF8 FF FF FF FF FF FF FF  
   3722 0000FBFF FF FF FF FF FF FF FF  
   3722 0000FC06 FF FF FF FF FF FF FF  
   3722 0000FC0D FF FF FF FF FF FF FF  
   3722 0000FC14 FF FF FF FF FF FF FF  
   3722 0000FC1B FF FF FF FF FF FF FF  
   3722 0000FC22 FF FF FF FF FF FF FF  
   3722 0000FC29 FF FF FF FF FF FF FF  
   3722 0000FC30 FF FF FF FF FF FF FF  
   3722 0000FC37 FF FF FF FF FF FF FF  
   3722 0000FC3E FF FF FF FF FF FF FF  
   3722 0000FC45 FF FF FF FF FF FF FF  
   3722 0000FC4C FF FF FF FF FF FF FF  
   3722 0000FC53 FF FF FF FF FF FF FF  
   3722 0000FC5A FF FF FF FF FF FF FF  
   3722 0000FC61 FF FF FF FF FF FF FF  
   3722 0000FC68 FF FF FF FF FF FF FF  
   3722 0000FC6F FF FF FF FF FF FF FF  
   3722 0000FC76 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 30
noc_boot11.asm
   3722 0000FC7D FF FF FF FF FF FF FF  
   3722 0000FC84 FF FF FF FF FF FF FF  
   3722 0000FC8B FF FF FF FF FF FF FF  
   3722 0000FC92 FF FF FF FF FF FF FF  
   3722 0000FC99 FF FF FF FF FF FF FF  
   3722 0000FCA0 FF FF FF FF FF FF FF  
   3722 0000FCA7 FF FF FF FF FF FF FF  
   3722 0000FCAE FF FF FF FF FF FF FF  
   3722 0000FCB5 FF FF FF FF FF FF FF  
   3722 0000FCBC FF FF FF FF FF FF FF  
   3722 0000FCC3 FF FF FF FF FF FF FF  
   3722 0000FCCA FF FF FF FF FF FF FF  
   3722 0000FCD1 FF FF FF FF FF FF FF  
   3722 0000FCD8 FF FF FF FF FF FF FF  
   3722 0000FCDF FF FF FF FF FF FF FF  
   3722 0000FCE6 FF FF FF FF FF FF FF  
   3722 0000FCED FF FF FF FF FF FF FF  
   3722 0000FCF4 FF FF FF FF FF FF FF  
   3722 0000FCFB FF FF FF FF FF FF FF  
   3722 0000FD02 FF FF FF FF FF FF FF  
   3722 0000FD09 FF FF FF FF FF FF FF  
   3722 0000FD10 FF FF FF FF FF FF FF  
   3722 0000FD17 FF FF FF FF FF FF FF  
   3722 0000FD1E FF FF FF FF FF FF FF  
   3722 0000FD25 FF FF FF FF FF FF FF  
   3722 0000FD2C FF FF FF FF FF FF FF  
   3722 0000FD33 FF FF FF FF FF FF FF  
   3722 0000FD3A FF FF FF FF FF FF FF  
   3722 0000FD41 FF FF FF FF FF FF FF  
   3722 0000FD48 FF FF FF FF FF FF FF  
   3722 0000FD4F FF FF FF FF FF FF FF  
   3722 0000FD56 FF FF FF FF FF FF FF  
   3722 0000FD5D FF FF FF FF FF FF FF  
   3722 0000FD64 FF FF FF FF FF FF FF  
   3722 0000FD6B FF FF FF FF FF FF FF  
   3722 0000FD72 FF FF FF FF FF FF FF  
   3722 0000FD79 FF FF FF FF FF FF FF  
   3722 0000FD80 FF FF FF FF FF FF FF  
   3722 0000FD87 FF FF FF FF FF FF FF  
   3722 0000FD8E FF FF FF FF FF FF FF  
   3722 0000FD95 FF FF FF FF FF FF FF  
   3722 0000FD9C FF FF FF FF FF FF FF  
   3722 0000FDA3 FF FF FF FF FF FF FF  
   3722 0000FDAA FF FF FF FF FF FF FF  
   3722 0000FDB1 FF FF FF FF FF FF FF  
   3722 0000FDB8 FF FF FF FF FF FF FF  
   3722 0000FDBF FF FF FF FF FF FF FF  
   3722 0000FDC6 FF FF FF FF FF FF FF  
   3722 0000FDCD FF FF FF FF FF FF FF  
   3722 0000FDD4 FF FF FF FF FF FF FF  
   3722 0000FDDB FF FF FF FF FF FF FF  
   3722 0000FDE2 FF FF FF FF FF FF FF  
   3722 0000FDE9 FF FF FF FF FF FF FF  
   3722 0000FDF0 FF FF FF FF FF FF FF  
   3722 0000FDF7 FF FF FF FF FF FF FF  
   3722 0000FDFE FF FF FF FF FF FF FF  
   3722 0000FE05 FF FF FF FF FF FF FF  
   3722 0000FE0C FF FF FF FF FF FF FF  
   3722 0000FE13 FF FF FF FF FF FF FF  
   3722 0000FE1A FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 31
noc_boot11.asm
   3722 0000FE21 FF FF FF FF FF FF FF  
   3722 0000FE28 FF FF FF FF FF FF FF  
   3722 0000FE2F FF FF FF FF FF FF FF  
   3722 0000FE36 FF FF FF FF FF FF FF  
   3722 0000FE3D FF FF FF FF FF FF FF  
   3722 0000FE44 FF FF FF FF FF FF FF  
   3722 0000FE4B FF FF FF FF FF FF FF  
   3722 0000FE52 FF FF FF FF FF FF FF  
   3722 0000FE59 FF FF FF FF FF FF FF  
   3722 0000FE60 FF FF FF FF FF FF FF  
   3722 0000FE67 FF FF FF FF FF FF FF  
   3722 0000FE6E FF FF FF FF FF FF FF  
   3722 0000FE75 FF FF FF FF FF FF FF  
   3722 0000FE7C FF FF FF FF FF FF FF  
   3722 0000FE83 FF FF FF FF FF FF FF  
   3722 0000FE8A FF FF FF FF FF FF FF  
   3722 0000FE91 FF FF FF FF FF FF FF  
   3722 0000FE98 FF FF FF FF FF FF FF  
   3722 0000FE9F FF FF FF FF FF FF FF  
   3722 0000FEA6 FF FF FF FF FF FF FF  
   3722 0000FEAD FF FF FF FF FF FF FF  
   3722 0000FEB4 FF FF FF FF FF FF FF  
   3722 0000FEBB FF FF FF FF FF FF FF  
   3722 0000FEC2 FF FF FF FF FF FF FF  
   3722 0000FEC9 FF FF FF FF FF FF FF  
   3722 0000FED0 FF FF FF FF FF FF FF  
   3722 0000FED7 FF FF FF FF FF FF FF  
   3722 0000FEDE FF FF FF FF FF FF FF  
   3722 0000FEE5 FF FF FF FF FF FF FF  
   3722 0000FEEC FF FF FF FF FF FF FF  
   3722 0000FEF3 FF FF FF FF FF FF FF  
   3722 0000FEFA FF FF FF FF FF FF FF  
   3722 0000FF01 FF FF FF FF FF FF FF  
   3722 0000FF08 FF FF FF FF FF FF FF  
   3722 0000FF0F FF FF FF FF FF FF FF  
   3722 0000FF16 FF FF FF FF FF FF FF  
   3722 0000FF1D FF FF FF FF FF FF FF  
   3722 0000FF24 FF FF FF FF FF FF FF  
   3722 0000FF2B FF FF FF FF FF FF FF  
   3722 0000FF32 FF FF FF FF FF FF FF  
   3722 0000FF39 FF FF FF FF FF FF FF  
   3722 0000FF40 FF FF FF FF FF FF FF  
   3722 0000FF47 FF FF FF FF FF FF FF  
   3722 0000FF4E FF FF FF FF FF FF FF  
   3722 0000FF55 FF FF FF FF FF FF FF  
   3722 0000FF5C FF FF FF FF FF FF FF  
   3722 0000FF63 FF FF FF FF FF FF FF  
   3722 0000FF6A FF FF FF FF FF FF FF  
   3722 0000FF71 FF FF FF FF FF FF FF  
   3722 0000FF78 FF FF FF FF FF FF FF  
   3722 0000FF7F FF FF FF FF FF FF FF  
   3722 0000FF86 FF FF FF FF FF FF FF  
   3722 0000FF8D FF FF FF FF FF FF FF  
   3722 0000FF94 FF FF FF FF FF FF FF  
   3722 0000FF9B FF FF FF FF FF FF FF  
   3722 0000FFA2 FF FF FF FF FF FF FF  
   3722 0000FFA9 FF FF FF FF FF FF FF  
   3722 0000FFB0 FF FF FF FF FF FF FF  
   3722 0000FFB7 FF FF FF FF FF FF FF  
   3722 0000FFBE FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 14 06:14:30 2017     Page 32
noc_boot11.asm
   3722 0000FFC5 FF FF FF FF FF FF FF  
   3722 0000FFCC FF FF FF FF FF FF FF  
   3722 0000FFD3 FF FF FF FF FF FF FF  
   3722 0000FFDA FF FF FF FF FF FF FF  
   3722 0000FFE1 FF FF FF FF FF FF FF  
   3722 0000FFE8 FF FF FF FF FF FF FF  
   3722 0000FFEF FF FF FF FF FF FF FF  
   3722 0000FFF6 FF FF FF FF FF FF FF  
   3722 0000FFFD FF                    
   3723 0000FFFE 00 D8                   		dw		start
