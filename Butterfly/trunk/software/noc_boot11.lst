Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 1
noc_boot11.a

                                        ; ============================================================================
                                        ;        __
                                        ;   \\__/ o\    (C) 2017  Robert Finch, Waterloo
                                        ;    \  __ /    All rights reserved.
                                        ;     \/_//     robfinch<remove>@finitron.ca
                                        ;       ||
                                        ;  
                                        ;
                                        ; This source file is free software: you can redistribute it and/or modify 
                                        ; it under the terms of the GNU Lesser General Public License as published 
                                        ; by the Free Software Foundation, either version 3 of the License, or     
                                        ; (at your option) any later version.                                      
                                        ;                                                                          
                                        ; This source file is distributed in the hope that it will be useful,      
                                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                                        ; GNU General Public License for more details.                             
                                        ;                                                                          
                                        ; You should have received a copy of the GNU General Public License        
                                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                                        ;                                    
                                        ;                                      
                                        ; This boot rom for the special node $11. This node is responsible for
                                        ; bringing the system up, and controls the text display and leds.
                                        ; ============================================================================
                                        ;
     27 = 0D                            CR	= 13
     28 = 0A                            LF	= 10
     29 = 08                            CTRLH	equ		8
                                        
     31 = 01                            MT_RST		equ		1
     32 = 02                            MT_RST_ACK	equ		2
     33 = 03                            MT_STOP		equ		3
     34 = 04                            MT_KEYSTROKE			equ	4
     35 = 05                            MT_SET_INPUT_FOCUS		equ	5
     36 = 06                            MT_BUTTON_STATUS		equ	6
     37 = 07                            MT_REQ_INP_FOCUS		equ	7
     38 = 08                            MT_GRNT_INP_FOCUS		equ 8
     39 = 09                            MT_PING					equ	9
     40 = 0A                            MT_START_BASIC_LOAD		equ	10
     41 = 0B                            MT_LOAD_BASIC_CHAR		equ	11
     42 = 0C                            MT_RUN_BASIC_PROG		equ	12
     43 = 0D                            MT_BASIC_EXIT			equ	13
     44 = 0F                            MT_REQ_OUT_FOCUS		equ	15
     45 = 10                            MT_GRNT_OUT_FOCUS		equ	16
     46 = 11                            MT_OUT_CHAR				equ	17
     47 = 12                            MT_PING_ACK				equ	18
     48 = 13                            MT_ETH_PACKET			equ	19
                                        
                                        
                                        		bss
                                        		org		0x0040
     54 00000040                        txBuf	fill.b	16,0
     55 00000050                        rxBuf	fill.b	16,0
     56 00000060                        kbdbuf	fill.w	16,0
     57 000000A0                        kbdhead	db	0
     58 000000A1                        kbdtail	db	0
     59 000000A2                        kbdcnt	db	0
     60 000000A3                        pingcnt		dw	0
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 2
noc_boot11.a
     61 000000A7                        FocusTbl	fill.b	64,0
     62 000000E7                        HTOutFocus	db		0
                                        		align	2
     64 000000E8                        packetPtr	dw		0
                                        
     65 = 2000                          TXTSCR		equ	$2000
     66 = 000000000000B100                              TXTCTRL		equ	$B100
     67 = 000000000000B200                              LEDS		equ	$B200
     68 = 000000000000B000                              ROUTER		equ	$B000
     69 = 10                            RTR_RXSTAT	equ	$10
     70 = 12                            RTR_TXSTAT	equ	$12
                                        
     72 = 0F                            MSG_DST		equ	15
     73 = 0E                            MSG_SRC		equ	14
     74 = 09                            MSG_TTL		equ	9
     75 = 08                            MSG_TYPE	equ	8
                                        
     77 = 00                            ROUTER_TRB	equ	0
                                        
                                        		.code
                                        		cpu		Butterfly16
                                        		.org	$C000
                                        ; ============================================================================
                                        ;        __
                                        ;   \\__/ o\    (C) 2017  Robert Finch, Waterloo
                                        ;    \  __ /    All rights reserved.
                                        ;     \/_//     robfinch<remove>@finitron.ca
                                        ;       ||
                                        ;  
                                        ;
                                        ; This source file is free software: you can redistribute it and/or modify 
                                        ; it under the terms of the GNU Lesser General Public License as published 
                                        ; by the Free Software Foundation, either version 3 of the License, or     
                                        ; (at your option) any later version.                                      
                                        ;                                                                          
                                        ; This source file is distributed in the hope that it will be useful,      
                                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                                        ; GNU General Public License for more details.                             
                                        ;                                                                          
                                        ; You should have received a copy of the GNU General Public License        
                                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                                        ;                                    
                                        ;                                      
                                        ; Networking software components
                                        ; ============================================================================
                                        ;
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Zero out the transmit buffer.
                                        ; Used before building transmit buffer.
                                        ; Automatically inserts a time-to-live of 63, and the source id.
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	<none>
                                        ;----------------------------------------------------------------------------
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 3
noc_boot11.a
                                        
    122 0000C000                        zeroTxBuf:
    123 0000C000 FE 6E                   		add		sp,sp,#-2
    124 0000C002 E0 D2                   		sw		r2,[sp]
    125 0000C004 00 40 0F 12             		lw		r2,#15
    126 0000C008                        zeroTxBuf1:
    127 0000C008 04 40 20 C0             		sb		r0,txBuf[r2]
    128 0000C00C FF 62                   		sub		r2,r2,#1
    129 0000C00E FC BB                   		bpl		zeroTxBuf1
    130 0000C010 03 40 0F 12             		lw		r2,#63
    131 0000C014 04 40 09 C2             		sb		r2,txBuf+MSG_TTL
    132 0000C018 E4 32                   		tsr		r2,ID
    133 0000C01A 04 40 0E C2             		sb		r2,txBuf+MSG_SRC
    134 0000C01E E0 F2                   		lw		r2,[sp]
    135 0000C020 02 6E                   		add		sp,sp,#2
    136 0000C022 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Transmit on the network.
                                        ; Blocks until the transmit buffer is open.
                                        ;
                                        ; Prerequisites:
                                        ;	The transmit buffer txBuf must have already been loaded.
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	<none>
                                        ;----------------------------------------------------------------------------
                                        
    152 0000C024 FC 6E                  Xmit:	
    153 0000C026 E0 D1                   		sw		r1,[sp]
    154 0000C028 E2 D2                   		sw		r2,2[sp]
                                        		; wait for transmit buffer to empty
    156 0000C02A                        Xmit2:
    157 0000C02A 01 4B 02 E1             		lb		r1,ROUTER+RTR_TXSTAT
    158 0000C02E FD B9                   		bne		Xmit2
    159 0000C030 00 40 0F 12             		lw		r2,#15
    160 0000C034                        Xmit1:
    161 0000C034 04 40 20 E1             		lb		r1,txBuf[r2]
    162 0000C038 00 4B 20 C1             		sb		r1,ROUTER[r2]
    163 0000C03C FF 62                   		add		r2,r2,#-1
    164 0000C03E FA BB                   		bpl		Xmit1
                                        		; trigger a transmit
    166 0000C040 01 11                   		lw		r1,#1
    167 0000C042 01 4B 02 C2             		sb		r2,ROUTER+RTR_TXSTAT
    168 0000C046 E2 F2                   		lw		r2,2[sp]
    169 0000C048 E0 F1                   		lw		r1,[sp]
    170 0000C04A 04 6E                   		add		sp,sp,#4
    171 0000C04C F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Receive from network.
                                        ; Receive status must have already indicated a message present.
                                        ; Copies recieve buffer from router to rxBuf.
                                        ; The router fifo is configured with first word fall-through. This means
                                        ; the data word appears on the fifo output before the fifo is popped.
                                        ; A fifo pop signal has to be sent after reading the data.
                                        ;
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 4
noc_boot11.a
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	<none>
                                        ;----------------------------------------------------------------------------
                                        
    189 0000C04E                        Recv:
    190 0000C04E FC 6E                   		add		sp,sp,#-4
    191 0000C050 E0 D1                   		sw		r1,[sp]
    192 0000C052 E2 D2                   		sw		r2,2[sp]
    193 0000C054 00 40 0F 12             		lw		r2,#15
    194 0000C058                        Recv1:
    195 0000C058 00 4B 20 E1             		lb		r1,ROUTER[r2]			; copy message to local buffer
    196 0000C05C 05 40 20 C1             		sb		r1,rxBuf[r2]
    197 0000C060 FF 62                   		add		r2,r2,#-1
    198 0000C062 FA BB                   		bpl		Recv1
    199 0000C064 01 4B 00 E1             		lb		r1,ROUTER+RTR_RXSTAT
    200 0000C068 04 40 60 31             		or		r1,#$40
    201 0000C06C 01 4B 00 C1             		sb		r1,ROUTER+RTR_RXSTAT	; pop the rx fifo
    202 0000C070 E0 F1                   		lw		r1,[sp]
    203 0000C072 E2 F2                   		lw		r2,2[sp]
    204 0000C074 04 6E                   		add		sp,sp,#4
    205 0000C076 F0 80                   		ret
                                        
                                        ;****************************************************************;
                                        ;                                                                ;
                                        ;		Tiny BASIC for the Finitron Butterfly                    ;
                                        ;                                                                ;
                                        ; Derived from a 68000 derivative of Palo Alto Tiny BASIC as     ;
                                        ; published in the May 1976 issue of Dr. Dobb's Journal.         ;
                                        ; Adapted to the 68000 by:                                       ;
                                        ;	Gordon brndly						                         ;
                                        ;	12147 - 51 Street					                         ;
                                        ;	Edmonton AB  T5W 3G8					                     ;
                                        ;	Canada							                             ;
                                        ;	(updated mailing address for 1996)			                 ;
                                        ;                                                                ;
                                        ; Adapted to the Butterfly by:                                    ;
                                        ;    Robert Finch                                                ;
                                        ;    Ontario, Canada                                             ;
                                        ;	 rob<remove>@finitron.ca                                     ;  
                                        ;****************************************************************;
                                        ;    Copyright (C) 2005 by Robert Finch. This program may be	 ;
                                        ;    freely distributed for personal use only. All commercial	 ;
                                        ;		       rights are reserved.			                     ;
                                        ;****************************************************************;
                                        ;
                                        ; Register Usage
                                        ; r8 = text pointer (global usage)
                                        ; r3,r4 = inputs parameters to subroutines
                                        ; r2 = return value
                                        ;
                                        ;* Vers. 1.0  1984/7/17	- Original version by Gordon brndly
                                        ;*	1.1  1984/12/9	- Addition of '0x' print term by Marvin Lipford
                                        ;*	1.2  1985/4/9	- Bug fix in multiply routine by Rick Murray
                                        
                                        ;	OPT	FRS,BRS 	forward ref.'s & brnches default to short
                                        
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 5
noc_boot11.a
                                        ;XMIT_FULL		equ	0x40		; the transmit buffer is full
                                        ;DATA_PRESENT	equ	0x08		; there is data preset at the serial port bc_uart3
    242 = 01                            DATA_PRESENT	equ	0x01		; there is data preset at the serial port bc_uart3
    243 = 20                            XMIT_NOT_FULL	equ	0x20
                                        
    245 = 00000000FFFFDC40                              TS_TIMER	equ		0xFFFFDC40		; system time slice timer
    246 = 00000000FFFFDC50                              KBD			equ		0xFFFFDC50
                                        
    248 = 00000000FFFFDCA0                              RAND		equ		0xFFFFDCA0
    249 = 00000000FFFFD800                              VIC			equ		0xFFFFD800
                                        
    251 = 2000                          VIDEORAM	equ		0x00002000
                                        
                                        ; BOOT ROM routines
                                        
    255 = 0000000FFFFFF804                              getSerial	equ		0xFFFFFF804	; get a serial port character
    256 = 0000000FFFFFF808                              peekSerial	equ		0xFFFFFF808	; get a serial port character
    257 = 0000000FFFFFF80C                              putSerial	equ		0xFFFFFF80C	; put a character to serial port
    258 = 0000000FFFFFF840                              getKbdCharWait	equ	0xFFFFFF840
    259 = 0000000FFFFFF844                              getKbdChar		equ	0xFFFFFF844
                                        
    261 = 20                            warmStart   equ     0x20
    262 = 24                            usrJmp      equ     0x24
                                        
    264 = 0D                            CR		equ	0x0D		; ASCII equates
    265 = 0A                            LF		equ	0x0A
    266 = 09                            TAB		equ	0x09
    267 = 03                            CTRLC	equ	0x03
    268 = 08                            CTRLH	equ	0x08
    269 = 13                            CTRLS	equ	0x13
    270 = 18                            CTRLX	equ	0x18
                                        
    272 = 50                            BUFLEN	equ	80	;	length of keyboard input buffer
                                        
                                        	code
                                        ;	org	0xC000	;
                                        ;
                                        ; Standard jump table. You can change these addresses if you are
                                        ; customizing this interpreter for a different environment.
                                        ;
    281 0000C078 0D AE                  START	jmp	CSTART	;	Cold Start entry point
    282 0000C07A 41 AE                  GOWARM	jmp	WSTART	;	Warm Start entry point
    283 0000C07C 8B 40 07 AE            GOOUT	jmp	OUTC	;	Jump to character-out routine
    284 0000C080 8C 40 07 AE            GOIN	jmp	INC		;Jump to character-in routine
    285 0000C084 8F 40 01 AE            GOAUXO	jmp	AUXOUT	;	Jump to auxiliary-out routine
    286 0000C088 8F 40 06 AE            GOAUXI	jmp	AUXIN	;	Jump to auxiliary-in routine
    287 0000C08C 90 40 0C AE            GOBYE	jmp	BYEBYE	;	Jump to monitor, DOS, etc.
                                        ;
                                        ; Modifiable system constants:
                                        ;
    291 0000C090 00 02                  TXTBGN	dw	0x0200		;beginning of program memory
    292 0000C092 00 1E                  ENDMEM	dw	0x1E00	;	end of available memory
                                        ;
                                        ; The main interpreter starts here:
                                        ;
                                        ; Usage
                                        ; r1 = temp
                                        ; r8 = text buffer pointer
                                        ; r12 = end of text in text buffer
                                        ;
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 6
noc_boot11.a
    301 0000C094                        CSTART
    302 0000C094 06 11                   	lw		r1,#6
    303 0000C096 20 4B 00 C1             	sb		r1,LEDS
                                        	; First save off the link register and OS sp value
    305 0000C09A FC 6E                   	sub		sp,sp,#4
    306 0000C09C E0 DF                   	sw		lr,[sp]
    307 0000C09E 05 40 0E DE             	sw		sp,OSSP
    308 0000C0A2 09 4C 02 FE             	lw		sp,ENDMEM	; initialize stack pointer
    309 0000C0A6 E0 DF                   	sw      lr,[sp]    ; save off return address
                                        ;	lw		r1,#TXT_WIDTH
                                        ;	sb		r1,txtWidth
                                        ;	lw		r1,#TXT_HEIGHT
                                        ;	sb		r1,txtHeight
    314 0000C0A8 03 40 02 C0             	sb		r0,cursx	; set screen output
    315 0000C0AC 03 40 03 C0             	sb		r0,cursy
    316 0000C0B0 03 40 0C C0             	sb		r0,cursFlash
    317 0000C0B4 03 40 04 D0             	sw		r0,pos
                                        ;	lw		r2,#0xBF20	; black chars, yellow background
                                        ;	sw		r2,charToPrint
                                        ;	call	ClearScreen
                                        ;	lea		r1,msgInit	;	tell who we are
                                        ;	call	PRMESGAUX
    323 0000C0B8 2B 4D 02 11             	lea		r1,msgInit	;	tell who we are
    324 0000C0BC 87 40 09 AF             	call	PRMESG
    325 0000C0C0 09 4C 00 F1             	lw		r1,TXTBGN	;	init. end-of-program pointer
    326 0000C0C4 07 40 00 D1             	sw		r1,TXTUNF
    327 0000C0C8 09 4C 02 F1             	lw		r1,ENDMEM	;	get address of end of memory
    328 0000C0CC E0 4F 10 11             	sub		r1,r1,#512	; 	reserve 512 bytes for the stack
    329 0000C0D0 07 40 0A D1             	sw		r1,STKBOT
    330 0000C0D4 E0 4F 10 11             	sub     r1,r1,#512 ;   128 vars
    331 0000C0D8 07 40 02 D1             	sw      r1,VARBGN
    332 0000C0DC 16 40 00 AF             	call    clearVars   ; clear the variable area
    333 0000C0E0 07 40 02 F1             	lw      r1,VARBGN   ; calculate number of bytes free
    334 0000C0E4 07 40 00 F3             	lw		r3,TXTUNF
    335 0000C0E8 32 21                   	sub     r1,r3
    336 0000C0EA 00 12                   	lw		r2,#0
    337 0000C0EC 70 40 04 AF             	call	PRTNUM
    338 0000C0F0 07 11                   	lw		r1,#7
    339 0000C0F2 20 4B 00 C1             	sb		r1,LEDS
    340 0000C0F6 36 4D 00 11             	lea		r1,msgBytesFree
    341 0000C0FA 85 40 0A AF             	call	PRMESG
    342 0000C0FE                        WSTART
    343 0000C0FE 06 40 06 D0             	sw		r0,LOPVAR   ; initialize internal variables
    344 0000C102 06 40 02 D0             	sw		r0,STKGOS
    345 0000C106 06 40 00 D0             	sw		r0,CURRNT	;	current line number pointer = 0
    346 0000C10A 09 4C 02 FE             	lw		sp,ENDMEM	;	init S.P. again, just in case
    347 0000C10E 36 4D 0E 11             	lea		r1,msgReady	;	display "Ready"
    348 0000C112 84 40 0E AF             	call	PRMESG
    349 0000C116                        ST3
    350 0000C116 03 40 0E 11             	lw		r1,#'>'		; Prompt with a '>' and
    351 0000C11A 60 40 08 AF             	call	GETLN		; read a line.
    352 0000C11E 80 40 0E AF             	call	TOUPBUF 	; convert to upper case
    353 0000C122 80 1C                   	lw		r12,r8		; save pointer to end of line
    354 0000C124 0A 40 0E 18             	lea		r8,BUFFER	; point to the beginning of line
    355 0000C128 78 40 09 AF             	call	TSTNUM		; is there a number there?
    356 0000C12C 7F 40 09 AF             	call	IGNBLK		; skip trailing blanks
    357 0000C130 16 21                   	or      r1,r1       ; does line no. exist? (or nonzero?)
    358 0000C132 BC A8                   	beq		DIRECT		; if not, it's a direct statement
    359 0000C134 00 40 11 10             	cmp		r1,#0xFFFF	; see if line no. is <= 16 bits
    360 0000C138 04 A6                   	bleu	ST2
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 7
noc_boot11.a
    361 0000C13A 38 4D 0C 11             	lea		r1,msgLineRange	; if not, we've overflowed
    362 0000C13E 5D 40 0C AE             	br		ERROR
    363 0000C142                        ST2
                                            ; ugliness - store a character at potentially an
                                            ; odd address (unaligned).
    366 0000C142 10 12                   	lw		r2,r1       ; r2 = line number
    367 0000C144 8E C2                   	sb		r2,-2[r8]
    368 0000C146 A1 32                   	shr		r2,#1
    369 0000C148 A1 32                   	shr		r2,#1
    370 0000C14A A1 32                   	shr		r2,#1
    371 0000C14C A1 32                   	shr		r2,#1
    372 0000C14E A1 32                   	shr		r2,#1
    373 0000C150 A1 32                   	shr		r2,#1
    374 0000C152 A1 32                   	shr		r2,#1
    375 0000C154 A1 32                   	shr		r2,#1
    376 0000C156 8F C2                   	sb		r2,-1[r8]	; store the binary line no.
    377 0000C158 FE 68                   	sub		r8,r8,#2
    378 0000C15A 62 40 05 AF             	call	FNDLN		; find this line in save area
    379 0000C15E E0 31                   	tsr		r1,sr
    380 0000C160 90 1D                   	lw		r13,r9		; save possible line pointer
    381 0000C162 F0 31                   	trs		r1,sr
    382 0000C164 11 A9                   	bne		ST4			; if not found, insert
                                        	; here we found the line, so we're replacing the line
                                        	; in the text area
                                        	; first step - delete the line
    386 0000C166 00 11                   	lw		r1,#0
    387 0000C168 63 40 0B AF             	call	FNDNXT		; find the next line (into r9)
    388 0000C16C 0A A7                   	bgtu	ST6			; no more lines
    389 0000C16E 90 11                   	lw		r1,r9		; r1 = pointer to next line
    390 0000C170 D0 12                   	lw		r2,r13		; pointer to line to be deleted
    391 0000C172 07 40 00 F3             	lw		r3,TXTUNF	; points to top of save area
    392 0000C176 63 40 0F AF             	call	MVUP		; move up to delete
    393 0000C17A 07 40 00 D2             	sw		r2,TXTUNF	; update the end pointer
                                        	; we moved the lines of text after the line being
                                        	; deleted down, so the pointer to the next line
                                        	; needs to be reset
    397 0000C17E D0 19                   	lw		r9,r13
    398 0000C180 03 AE                   	br		ST4
                                        	; here there were no more lines, so just move the
                                        	; end of text pointer down
    401 0000C182                        ST6
    402 0000C182 07 40 00 DD             	sw		r13,TXTUNF
    403 0000C186 D0 19                   	lw		r9,r13
    404 0000C188                        ST4
                                        	; here we're inserting because the line wasn't found
                                        	; or it was deleted	from the text area
    407 0000C188 C0 11                   	lw		r1,r12		; calculate the length of new line
    408 0000C18A 82 21                   	sub		r1,r8
    409 0000C18C 1D 10                   	cmp		r1,#3		; is it just a line no. & CR?
    410 0000C18E C3 B2                   	ble		ST3			; if so, it was just a delete
                                        
    412 0000C190 07 40 00 FB             	lw		r11,TXTUNF	; compute new end of text
    413 0000C194 B0 1A                   	lw		r10,r11		; r10 = old TXTUNF
    414 0000C196 10 2B                   	add		r11,r1		; r11 = new top of TXTUNF (r1=line length)
                                        
    416 0000C198 07 40 02 F1             	lw		r1,VARBGN	; see if there's enough room
    417 0000C19C 1D 2B                   	cmp		r11,r1
    418 0000C19E 04 A4                   	bltu	ST5
    419 0000C1A0 46 4D 07 11             	lea		r1,msgTooBig	; if not, say so
    420 0000C1A4 5A 40 09 AE             	jmp		ERROR
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 8
noc_boot11.a
                                        
                                        	; open a space in the text area
    423 0000C1A8                        ST5
    424 0000C1A8 07 40 00 DB             	sw		r11,TXTUNF	; if so, store new end position
    425 0000C1AC A0 11                   	lw		r1,r10		; points to old end of text
    426 0000C1AE B0 12                   	lw		r2,r11		; points to new end of text
    427 0000C1B0 90 13                   	lw		r3,r9       ; points to start of line after insert line
    428 0000C1B2 62 40 08 AF             	call	MVDOWN		; move things out of the way
                                        
                                        	; copy line into text space
    431 0000C1B6 80 11                   	lw		r1,r8		; set up to do the insertion; move from buffer
    432 0000C1B8 D0 12                   	lw		r2,r13		; to vacated space
    433 0000C1BA C0 13                   	lw		r3,r12		; until end of buffer
    434 0000C1BC 61 40 0C AF             	call	MVUP		; do it
    435 0000C1C0 AA BE                   	br		ST3			; go back and get another line
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** Tables *** DIRECT *** EXEC ***
                                        ;
                                        ; This section of the code tests a string against a table. When
                                        ; a match is found, control is transferred to the section of
                                        ; code according to the table.
                                        ;
                                        ; At 'EXEC', r8 should point to the string, r9 should point to
                                        ; the character table, and r10 should point to the execution
                                        ; table. At 'DIRECT', r8 should point to the string, r9 and
                                        ; r10 will be set up to point to TAB1 and TAB1_1, which are
                                        ; the tables of all direct and statement commands.
                                        ;
                                        ; A '.' in the string will terminate the test and the partial
                                        ; match will be considered as a match, e.g. 'P.', 'PR.','PRI.',
                                        ; 'PRIN.', or 'PRINT' will all match 'PRINT'.
                                        ;
                                        ; There are two tables: the character table and the execution
                                        ; table. The character table consists of any number of text items.
                                        ; Each item is a string of characters with the last character's
                                        ; high bit set to one. The execution table holds a 32-bit
                                        ; execution addresses that correspond to each entry in the
                                        ; character table.
                                        ;
                                        ; The end of the character table is a 0 byte which corresponds
                                        ; to the default routine in the execution table, which is
                                        ; executed if none of the other table items are matched.
                                        ;
                                        ; Character-matching tables:
    468 0000C1C2                        TAB1
    469 0000C1C2 4C 49 53 D4             	db	"LIS",('T'+0x80)        ; Direct commands
    470 0000C1C6 4C 4F 41 C4             	db	"LOA",('D'+0x80)
    471 0000C1CA 4E 45 D7                	db	"NE",('W'+0x80)
    472 0000C1CD 52 55 CE                	db	"RU",('N'+0x80)
    473 0000C1D0 53 41 56 C5             	db	"SAV",('E'+0x80)
    474 0000C1D4                        TAB2
    475 0000C1D4 4E 45 58 D4             	db	"NEX",('T'+0x80)         ; Direct / statement
    476 0000C1D8 4C 45 D4                	db	"LE",('T'+0x80)
    477 0000C1DB 49 C6                   	db	"I",('F'+0x80)
    478 0000C1DD 47 4F 54 CF             	db	"GOT",('O'+0x80)
    479 0000C1E1 47 4F 53 55 C2          	db	"GOSU",('B'+0x80)
    480 0000C1E6 52 45 54 55 52 CE       	db	"RETUR",('N'+0x80)
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 9
noc_boot11.a
    481 0000C1EC 52 45 CD                	db	"RE",('M'+0x80)
    482 0000C1EF 46 4F D2                	db	"FO",('R'+0x80)
    483 0000C1F2 49 4E 50 55 D4          	db	"INPU",('T'+0x80)
    484 0000C1F7 50 52 49 4E D4          	db	"PRIN",('T'+0x80)
    485 0000C1FC 50 4F 4B 45 D7          	db	"POKE",('W'+0x80)
    486 0000C201 50 4F 4B C5             	db	"POK",('E'+0x80)
    487 0000C205 53 54 4F D0             	db	"STO",('P'+0x80)
    488 0000C209 42 59 C5                	db	"BY",('E'+0x80)
    489 0000C20C 53 59 D3                	db	"SY",('S'+0x80)
    490 0000C20F 43 4C D3                	db	"CL",('S'+0x80)
    491 0000C212 43 4C D2                    db  "CL",('R'+0x80)
    492 0000C215 00                      	db	0
    493 0000C216                        TAB4
    494 0000C216 4E 4F 44 45 4E 55 CD    	db	"NODENU",('M'+0x80)
                                      
    495 0000C21D 50 45 45 4B D7          	db	"PEEK",('W'+0x80)        ;Functions
    496 0000C222 50 45 45 CB             	db	"PEE",('K'+0x80)         ;Functions
    497 0000C226 52 4E C4                	db	"RN",('D'+0x80)
    498 0000C229 41 42 D3                	db	"AB",('S'+0x80)
    499 0000C22C 53 49 5A C5             	db	"SIZ",('E'+0x80)
    500 0000C230 55 53 D2                	db  "US",('R'+0x80)
    501 0000C233 00                      	db	0
    502 0000C234                        TAB5
    503 0000C234 54 CF                   	db	"T",('O'+0x80)           ;"TO" in "FOR"
    504 0000C236 00                      	db	0
    505 0000C237                        TAB6
    506 0000C237 53 54 45 D0             	db	"STE",('P'+0x80)         ;"STEP" in "FOR"
    507 0000C23B 00                      	db	0
    508 0000C23C                        TAB8
    509 0000C23C 3E BD                   	db	'>',('='+0x80)           ;Relational operators
    510 0000C23E 3C BE                   	db	'<',('>'+0x80)
    511 0000C240 BE                      	db	('>'+0x80)
    512 0000C241 BD                      	db	('='+0x80)
    513 0000C242 3C BD                   	db	'<',('='+0x80)
    514 0000C244 BC                      	db	('<'+0x80)
    515 0000C245 00                      	db	0
    516 0000C246                        TAB9
    517 0000C246 41 4E C4                    db  "AN",('D'+0x80)
    518 0000C249 00                          db  0
    519 0000C24A                        TAB10
    520 0000C24A 4F D2                       db  "O",('R'+0x80)
    521 0000C24C 00                          db  0
                                        
    523 0000C24D FF FF FF                	.align	4
                                        
                                        ;* Execution address tables:
    526 0000C250                        TAB1_1
    527 0000C250 BE C3                   	dw	LISTX			;Direct commands
    528 0000C252 24 C6                   	dw	LOAD
    529 0000C254 02 C3                   	dw	NEW
    530 0000C256 18 C3                   	dw	RUN
    531 0000C258 B8 C6                   	dw	SAVE
    532 0000C25A                        TAB2_1
    533 0000C25A 16 C5                   	dw	NEXT		;	Direct / statement
    534 0000C25C 16 C6                   	dw	LET
    535 0000C25E 70 C5                   	dw	IF
    536 0000C260 82 C3                   	dw	GOTO
    537 0000C262 58 C4                   	dw	GOSUB
    538 0000C264 88 C4                   	dw	RETURN
    539 0000C266 7A C5                   	dw	IF2			; REM
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 10
noc_boot11.a
    540 0000C268 B2 C4                   	dw	FOR
    541 0000C26A 98 C5                   	dw	INPUT
    542 0000C26C F4 C3                   	dw	PRINT
    543 0000C26E EE C7                   	dw	POKEW
    544 0000C270 CE C7                   	dw	POKE
    545 0000C272 10 C3                   	dw	STOP
    546 0000C274 8C C0                   	dw	GOBYE
    547 0000C276 06 C8                   	dw	SYSX
    548 0000C278 A0 D2                   	dw	_cls
    549 0000C27A 9C C3                   	dw  _clr
    550 0000C27C 0E C6                   	dw	DEFLT
    551 0000C27E                        TAB4_1
    552 0000C27E 76 CC                   	dw	NODENUM
    553 0000C280 C2 CB                   	dw  PEEKW
    554 0000C282 B6 CB                   	dw	PEEK			;Functions
    555 0000C284 E4 CB                   	dw	RND
    556 0000C286 40 CC                   	dw	ABS
    557 0000C288 66 CC                   	dw	SIZEX
    558 0000C28A CE CB                   	dw  USRX
    559 0000C28C AE C9                   	dw	XP40
    560 0000C28E                        TAB5_1
    561 0000C28E CA C4                   	dw	FR1			;"TO" in "FOR"
    562 0000C290 F6 CC                   	dw	QWHAT
    563 0000C292                        TAB6_1
    564 0000C292 DE C4                   	dw	FR2			;"STEP" in "FOR"
    565 0000C294 E4 C4                   	dw	FR3
    566 0000C296                        TAB8_1
    567 0000C296 D0 C8                   	dw	XP11	;>=		Relational operators
    568 0000C298 DA C8                   	dw	XP12	;<>
    569 0000C29A E4 C8                   	dw	XP13	;>
    570 0000C29C F8 C8                   	dw	XP15	;=
    571 0000C29E EE C8                   	dw	XP14	;<=
    572 0000C2A0 02 C9                   	dw	XP16	;<
    573 0000C2A2 1C C9                   	dw	XP17
    574 0000C2A4                        TAB9_1
    575 0000C2A4 5C C8                       dw  XP_AND
    576 0000C2A6 64 C8                       dw  XP_ANDX
    577 0000C2A8                        TAB10_1
    578 0000C2A8 38 C8                       dw  XP_OR
    579 0000C2AA 40 C8                       dw  XP_ORX
                                        
                                        ;*
                                        ; r3 = match flag (trashed)
                                        ; r9 = text table
                                        ; r10 = exec table
                                        ; r11 = trashed
    586 0000C2AC                        DIRECT
    587 0000C2AC 1C 4C 02 19             	lea		r9,TAB1
    588 0000C2B0 25 4C 00 1A             	lea		r10,TAB1_1
    589 0000C2B4                        EXEC
    590 0000C2B4 F0 1B                   	lw		r11,lr		; save link reg
    591 0000C2B6 73 40 04 AF             	call	IGNBLK		; ignore leading blanks
    592 0000C2BA B0 1F                   	lw		lr,r11		; restore link reg
    593 0000C2BC 80 1B                   	lw		r11,r8		; save the pointer
    594 0000C2BE 00 13                   	lw		r3,#0		; clear match flag
    595 0000C2C0                        EXLP
    596 0000C2C0 80 E1                   	lb		r1,[r8]		; get the program character
    597 0000C2C2 01 68                   	add		r8,r8,#1
    598 0000C2C4 90 E2                   	lb		r2,[r9]		; get the table character
    599 0000C2C6 02 A9                   	bne		EXNGO		; If end of table,
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 11
noc_boot11.a
    600 0000C2C8 B0 18                   	lw		r8,r11		;	restore the text pointer and...
    601 0000C2CA 12 AE                   	br		EXGO		;   execute the default.
    602 0000C2CC                        EXNGO
    603 0000C2CC 3D 21                   	cmp		r1,r3		; Else check for period...
    604 0000C2CE 10 A8                   	beq		EXGO		; if so, execute
    605 0000C2D0 07 40 5F 32             	and		r2,#0x7f	; ignore the table's high bit
    606 0000C2D4 1D 22                   	cmp		r2,r1		;		is there a match?
    607 0000C2D6 07 A8                   	beq		EXMAT
    608 0000C2D8 04 6A                   	add		r10,r10,#4	;if not, try the next entry
    609 0000C2DA B0 18                   	lw		r8,r11		; reset the program pointer
    610 0000C2DC 00 13                   	lw		r3,#0		; sorry, no match
    611 0000C2DE                        EX1
    612 0000C2DE 01 69                   	add		r9,r9,#1
    613 0000C2E0 9F E1                   	lb		r1,-1[r9]	; get to the end of the entry
    614 0000C2E2 FD BB                   	bpl		EX1
    615 0000C2E4 ED BE                   	br		EXLP		; back for more matching
    616 0000C2E6                        EXMAT
    617 0000C2E6 02 40 0E 13             	lw		r3,#'.'		; we've got a match so far
    618 0000C2EA 01 69                   	add		r9,r9,#1
    619 0000C2EC 9F E1                   	lb		r1,-1[r9]	; end of table entry?
    620 0000C2EE E8 BB                   	bpl		EXLP		; if not, go back for more
    621 0000C2F0                        EXGO
    622 0000C2F0 01 4B 00 E1             	lb		r1,ROUTER+RTR_RXSTAT
    623 0000C2F4 04 A8                   	beq		EXGO1
    624 0000C2F6 EA 4F 0A AF             	call	Recv
    625 0000C2FA B1 40 03 AF             	call	RecvDispatch
    626 0000C2FE                        EXGO1
    627 0000C2FE A0 FB                   	lw		r11,[r10]	; execute the appropriate routine
    628 0000C300 B0 80                   	jmp		[r11]
                                        
                                        
                                        ;    lb      r1,[r8]     ; get token from text space
                                        ;    bpl
                                        ;    and     r1,#0x7f
                                        ;    shl     r1,#2       ; * 4 - word offset
                                        ;    add     r1,r1,#TAB1_1
                                        ;    lw      r1,[r1]
                                        ;    jmp     [r1]
                                        
                                            
                                        ;
                                        ; What follows is the code to execute direct and statement
                                        ; commands. Control is transferred to these points via the command
                                        ; table lookup code of 'DIRECT' and 'EXEC' in the last section.
                                        ; After the command is executed, control is transferred to other
                                        ; sections as follows:
                                        ;
                                        ; For 'LISTX', 'NEW', and 'STOP': go back to the warm start point.
                                        ; For 'RUN': go execute the first stored line if any; else go
                                        ; back to the warm start point.
                                        ; For 'GOTO' and 'GOSUB': go execute the target line.
                                        ; For 'RETURN' and 'NEXT'; go back to saved return line.
                                        ; For all others: if 'CURRNT' is 0, go to warm start; else go
                                        ; execute next command. (This is done in 'FINISH'.)
                                        ;
                                        ;******************************************************************
                                        ;
                                        ; *** NEW *** STOP *** RUN (& friends) *** GOTO ***
                                        ;
                                        ; 'NEW<CR>' sets TXTUNF to point to TXTBGN
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 12
noc_boot11.a
                                        ;
                                        ; 'STOP<CR>' goes back to WSTART
                                        ;
                                        ; 'RUN<CR>' finds the first stored line, stores its address
                                        ; in CURRNT, and starts executing it. Note that only those
                                        ; commands in TAB2 are legal for a stored program.
                                        ;
                                        ; RUN ON <node number> sends a run command to the specified node
                                        ;
                                        ; There are 3 more entries in 'RUN':
                                        ; 'RUNNXL' finds next line, stores it's address and executes it.
                                        ; 'RUNTSL' stores the address of this line and executes it.
                                        ; 'RUNSML' continues the execution on same line.
                                        ;
                                        ; 'GOTO expr<CR>' evaluates the expression, finds the target
                                        ; line, and jumps to 'RUNTSL' to do it.
                                        ;
    677 0000C302                        NEW
    678 0000C302 4E 40 04 AF             	call	ENDCHK
    679 0000C306 09 4C 00 F1             	lw		r1,TXTBGN
    680 0000C30A 07 40 00 D1             	sw		r1,TXTUNF	;	set the end pointer
    681 0000C30E 48 AF                   	call    clearVars
                                        
    683 0000C310                        STOP
    684 0000C310 4D 40 0D AF             	call	ENDCHK
    685 0000C314 EF 4F 03 AE             	br		WSTART		; WSTART will reset the stack
                                        
    687 0000C318                        RUN
    688 0000C318 70 40 03 AF             	call	IGNBLK
    689 0000C31C 80 E1                   	lb		r1,[r8]
    690 0000C31E FB 4F 11 10             	cmp		r1,#'O'
    691 0000C322 14 A9                   	bne		RUN1
    692 0000C324 81 E1                   	lb		r1,1[r8]
    693 0000C326 FB 4F 12 10             	cmp		r1,#'N'
    694 0000C32A 10 A9                   	bne		RUN1
    695 0000C32C 02 68                   	add		r8,r8,#2
    696 0000C32E 27 40 09 AF             	call	OREXPR
    697 0000C332 E6 4F 05 AF             	call	zeroTxBuf
    698 0000C336 04 40 0F C1             	sb		r1,txBuf+MSG_DST
    699 0000C33A E4 31                   	tsr		r1,ID
    700 0000C33C 04 40 0E C1             	sb		r1,txBuf+MSG_SRC
                                        	lb		r1,#MT_RUN_BASIC_PROG
    702 0000C340 04 40 08 C1             	sb		r1,txBuf+MSG_TYPE
    703 0000C344 E6 4F 0E AF             	call	Xmit
    704 0000C348 ED 4F 09 AE             	br		WSTART
    705 0000C34C                        RUN1
    706 0000C34C 4B 40 0F AF             	call	ENDCHK
    707 0000C350 09 4C 00 F8             	lw		r8,TXTBGN	;	set pointer to beginning
    708 0000C354 06 40 00 D8             	sw		r8,CURRNT
    709 0000C358 23 AF                   	call    clearVars
                                        
    711 0000C35A                        RUNNXL					; RUN <next line>
    712 0000C35A 06 40 00 F1             	lw		r1,CURRNT	; executing a program?
    713 0000C35E EC 4F 0E A8             	beq		WSTART		; if not, we've finished a direct stat.
    714 0000C362 00 11                   	lw		r1,#0	    ; else find the next line number
    715 0000C364 80 19                   	lw		r9,r8
    716 0000C366 52 40 07 AF             	call	FNDLNP		; search for the next line
    717 0000C36A EC 4F 08 A7             	bgtu	WSTART		; if we've fallen off the end, stop
                                        
    719 0000C36E                        RUNTSL					; RUN <this line>
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 13
noc_boot11.a
    720 0000C36E 06 40 00 D9             	sw		r9,CURRNT	; set CURRNT to point to the line no.
    721 0000C372 92 18                   	lea		r8,2[r9]	; set the text pointer to
                                        
    723 0000C374                        RUNSML                  ; RUN <same line>
    724 0000C374 70 40 0B AF             	call	CHKIO		; see if a control-C was pressed
    725 0000C378 1D 4C 04 19             	lea		r9,TAB2		; find command in TAB2
    726 0000C37C 25 4C 0A 1A             	lea		r10,TAB2_1
    727 0000C380 99 BE                   	br		EXEC		; and execute it
                                        
    729 0000C382                        GOTO
    730 0000C382 24 40 0F AF             	call	OREXPR		;evaluate the following expression
    731 0000C386 10 15                   	lw      r5,r1
    732 0000C388 4A 40 01 AF             	call	ENDCHK		;must find end of line
    733 0000C38C 50 11                   	lw      r1,r5
    734 0000C38E 50 40 0B AF             	call	FNDLN		; find the target line
    735 0000C392 ED B8                   	beq		RUNTSL		; go do it
    736 0000C394 43 4D 03 11             	lea		r1,msgBadGotoGosub
    737 0000C398 4A 40 0F AE             	br		ERROR		; no such line no.
                                        
                                        
    740 0000C39C                        _clr
    741 0000C39C 01 AF                       call    clearVars
    742 0000C39E 58 AE                       br      FINISH
                                        
                                        ; Clear the variable area of memory
    745 0000C3A0                        clearVars
    746 0000C3A0 FC 6E                       sub     sp,sp,#4
    747 0000C3A2 E0 DF                       sw      lr,[sp]
    748 0000C3A4 E2 D6                       sw      r6,2[sp]
    749 0000C3A6 10 40 00 16                 lw      r6,#256		; number of words to clear
    750 0000C3AA 07 40 02 F1                 lw      r1,VARBGN
    751 0000C3AE                        cv1
    752 0000C3AE 10 D0                       sw      r0,[r1]
    753 0000C3B0 02 61                       add     r1,r1,#2
    754 0000C3B2 FF 66                       sub		r6,r6,#1
    755 0000C3B4 FC B9                       bne     cv1
    756 0000C3B6 E0 FF                       lw      lr,[sp]
    757 0000C3B8 E2 F6                       lw      r6,2[sp]
    758 0000C3BA 04 6E                       add     sp,sp,#4
    759 0000C3BC F0 80                       ret    
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; LIST
                                        ;
                                        ; LISTX has two forms:
                                        ; 'LIST<CR>' lists all saved lines
                                        ; 'LIST #<CR>' starts listing at the line #
                                        ; Control-S pauses the listing, control-C stops it.
                                        ;
                                        
    772 0000C3BE                        LISTX
    773 0000C3BE 63 40 0E AF             	call	TSTNUM		; see if there's a line no.
    774 0000C3C2 10 15                   	lw      r5,r1
    775 0000C3C4 48 40 03 AF             	call	ENDCHK		; if not, we get a zero
    776 0000C3C8 50 11                   	lw      r1,r5
    777 0000C3CA 4E 40 0D AF             	call	FNDLN		; find this or next line
    778 0000C3CE                        LS1
    779 0000C3CE E9 4F 06 A7             	bgtu	WSTART		; warm start if we passed the end
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 14
noc_boot11.a
                                        
    781 0000C3D2 90 11                   	lw		r1,r9
    782 0000C3D4 60 40 00 AF             	call	PRTLN		; print the line
    783 0000C3D8 10 19                   	lw		r9,r1		; set pointer for next
    784 0000C3DA 6D 40 08 AF             	call	CHKIO		; check for listing halt request
    785 0000C3DE 06 A8                   	beq		LS3
    786 0000C3E0 FE 4F 1D 10             	cmp		r1,#CTRLS	; pause the listing?
    787 0000C3E4 03 A9                   	bne		LS3
    788 0000C3E6                        LS2
    789 0000C3E6 6D 40 02 AF             	call	CHKIO		; if so, wait for another keypress
    790 0000C3EA FD B8                   	beq		LS2
    791 0000C3EC                        LS3
    792 0000C3EC 00 11                   	lw		r1,#0
    793 0000C3EE 4E 40 03 AF             	call	FNDLNP		; find the next line
    794 0000C3F2 ED BE                   	br		LS1
                                        
                                        
                                        ;******************************************************************
                                        ; PRINT command is 'PRINT ....:' or 'PRINT ....<CR>'
                                        ; where '....' is a list of expressions, formats, back-arrows,
                                        ; and strings.	These items a separated by commas.
                                        ;
                                        ; A format is a pound sign followed by a number.  It controls
                                        ; the number of spaces the value of an expression is going to
                                        ; be printed in.  It stays effective for the rest of the print
                                        ; command unless changed by another format.  If no format is
                                        ; specified, 11 positions will be used.
                                        ;
                                        ; A string is quoted in a pair of single- or double-quotes.
                                        ;
                                        ; An underline (back-arrow) means generate a <CR> without a <LF>
                                        ;
                                        ; A <CR LF> is generated after the entire list has been printed
                                        ; or if the list is empty.  If the list ends with a semicolon,
                                        ; however, no <CR LF> is generated.
                                        ;
                                        
    817 0000C3F4                        PRINT
    818 0000C3F4 0B 15                   	lw		r5,#11		; D4 = number of print spaces
    819 0000C3F6 60 40 0D AF             	call	TSTC		; if null list and ":"
    820 0000C3FA 3A 08                   	db	':',PR2-*+1
    821 0000C3FC 6D 40 07 AF             	call	CRLF		; give CR-LF and continue
    822 0000C400 B9 BE                   	br		RUNSML		;		execution on the same line
    823 0000C402                        PR2
    824 0000C402 60 40 07 AF             	call	TSTC		;if null list and <CR>
    825 0000C406 0D 08                   	db	CR,PR0-*+1
    826 0000C408 6D 40 01 AF             	call	CRLF		;also give CR-LF and
    827 0000C40C A6 BE                   	br		RUNNXL		;execute the next line
    828 0000C40E                        PR0
    829 0000C40E 60 40 01 AF             	call	TSTC		;else is it a format?
    830 0000C412 23 0A                   	db	'#',PR1-*+1
    831 0000C414 20 40 06 AF             	call	OREXPR		; yes, evaluate expression
    832 0000C418 10 15                   	lw		r5,r1		; and save it as print width
    833 0000C41A 0B AE                   	br		PR3		; look for more to print
    834 0000C41C                        PR1
    835 0000C41C 5F 40 0A AF             	call	TSTC	;	is character expression? (MRL)
    836 0000C420 24 0C                   	db	'$',PR4-*+1
    837 0000C422 1F 40 0F AF             	call	OREXPR	;	yep. Evaluate expression (MRL)
    838 0000C426 E2 4F 09 AF             	call	GOOUT	;	print low byte (MRL)
    839 0000C42A 03 AE                   	br		PR3		;look for more. (MRL)
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 15
noc_boot11.a
    840 0000C42C                        PR4
    841 0000C42C 53 40 08 AF             	call	QTSTG	;	is it a string?
                                        	; the following branch must occupy only two bytes!
    843 0000C430 09 AE                   	br		PR8		;	if not, must be an expression
    844 0000C432                        PR3
    845 0000C432 5E 40 0F AF             	call	TSTC	;	if ",", go find next
    846 0000C436 2C 08                   	db	',',PR6-*+1
    847 0000C438 43 40 07 AF             	call	FIN		;in the list.
    848 0000C43C E8 BE                   	br		PR0
    849 0000C43E                        PR6
    850 0000C43E 6B 40 06 AF             	call	CRLF		;list ends here
    851 0000C442 06 AE                   	br		FINISH
    852 0000C444                        PR8
    853 0000C444 1E 40 0E AF             	call	OREXPR		; evaluate the expression
    854 0000C448 50 12                   	lw		r2,r5		; set the width
    855 0000C44A 55 40 05 AF             	call	PRTNUM		; print its value
    856 0000C44E F1 BE                   	br		PR3			; more to print?
                                        
    858 0000C450                        FINISH
    859 0000C450 42 40 0B AF             	call	FIN		; Check end of command
    860 0000C454 44 40 0F AE             	jmp		QWHAT	; print "What?" if wrong
                                        
                                        
                                        ;*******************************************************************
                                        ;
                                        ; *** GOSUB *** & RETURN ***
                                        ;
                                        ; 'GOSUB expr:' or 'GOSUB expr<CR>' is like the 'GOTO' command,
                                        ; except that the current text pointer, stack pointer, etc. are
                                        ; saved so that execution can be continued after the subroutine
                                        ; 'RETURN's.  In order that 'GOSUB' can be nested (and even
                                        ; recursive), the save area must be stacked.  The stack pointer
                                        ; is saved in 'STKGOS'.  The old 'STKGOS' is saved on the stack.
                                        ; If we are in the main routine, 'STKGOS' is zero (this was done
                                        ; in the initialization section of the interpreter), but we still
                                        ; save it as a flag for no further 'RETURN's.
                                        ;
    877 0000C458                        GOSUB
    878 0000C458 4E 40 0C AF             	call	PUSHA		; save the current 'FOR' parameters
    879 0000C45C 1E 40 02 AF             	call	OREXPR		; get line number
    880 0000C460 4A 40 02 AF             	call	FNDLN		; find the target line
    881 0000C464 04 A8                   	beq		gosub1
    882 0000C466 43 4D 03 11             	lea		r1,msgBadGotoGosub
    883 0000C46A 44 40 06 AE             	br		ERROR		; if not there, say "How?"
    884 0000C46E                        gosub1
    885 0000C46E FA 6E                   	sub		sp,sp,#6
    886 0000C470 E0 D8                   	sw		r8,[sp]		; save text pointer
    887 0000C472 06 40 00 F1             	lw		r1,CURRNT
    888 0000C476 E2 D1                   	sw		r1,2[sp]	; found it, save old 'CURRNT'...
    889 0000C478 06 40 02 F1             	lw		r1,STKGOS
    890 0000C47C E4 D1                   	sw		r1,4[sp]	; and 'STKGOS'
    891 0000C47E 06 40 06 D0             	sw		r0,LOPVAR	; load new values
    892 0000C482 06 40 02 DE             	sw		sp,STKGOS
    893 0000C486 73 BE                   	br		RUNTSL
                                        
                                        
                                        ; 'RETURN<CR>' undoes everything that 'GOSUB' did, and thus
                                        ; returns the execution to the command after the most recent
                                        ; 'GOSUB'.  If 'STKGOS' is zero, it indicates that we never had
                                        ; a 'GOSUB' and is thus an error.
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 16
noc_boot11.a
                                        ;
    901 0000C488                        RETURN
    902 0000C488 42 40 01 AF             	call	ENDCHK		; there should be just a <CR>
    903 0000C48C 06 40 02 F1             	lw		r1,STKGOS	; get old stack pointer
    904 0000C490 04 A9                   	bne		return1
    905 0000C492 45 4D 00 11             	lea		r1,msgRetWoGosub
    906 0000C496 43 40 00 AE             	br		ERROR		; if zero, it doesn't exist
    907 0000C49A                        return1
    908 0000C49A 10 1E                   	lw		sp,r1		; else restore it
    909 0000C49C E4 F1                   	lw		r1,4[sp]
    910 0000C49E 06 40 02 D1             	sw		r1,STKGOS	; and the old 'STKGOS'
    911 0000C4A2 E2 F1                   	lw		r1,2[sp]
    912 0000C4A4 06 40 00 D1             	sw		r1,CURRNT	; and the old 'CURRNT'
    913 0000C4A8 E0 F8                   	lw		r8,[sp]		; and the old text pointer
    914 0000C4AA 06 6E                   	add		sp,sp,#6
    915 0000C4AC 4A 40 0E AF             	call	POPA		;and the old 'FOR' parameters
    916 0000C4B0 CF BE                   	br		FINISH		;and we are back home
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** FOR *** & NEXT ***
                                        ;
                                        ; 'FOR' has two forms:
                                        ; 'FOR var=exp1 TO exp2 STEP exp1' and 'FOR var=exp1 TO exp2'
                                        ; The second form means the same thing as the first form with a
                                        ; STEP of positive 1.  The interpreter will find the variable 'var'
                                        ; and set its value to the current value of 'exp1'.  It also
                                        ; evaluates 'exp2' and 'exp1' and saves all these together with
                                        ; the text pointer, etc. in the 'FOR' save area, which consisits of
                                        ; 'LOPVAR', 'LOPINC', 'LOPLMT', 'LOPLN', and 'LOPPT'.  If there is
                                        ; already something in the save area (indicated by a non-zero
                                        ; 'LOPVAR'), then the old save area is saved on the stack before
                                        ; the new values are stored.  The interpreter will then dig in the
                                        ; stack and find out if this same variable was used in another
                                        ; currently active 'FOR' loop.  If that is the case, then the old
                                        ; 'FOR' loop is deactivated. (i.e. purged from the stack)
                                        ;
    938 0000C4B2                        FOR
    939 0000C4B2 4B 40 0F AF             	call	PUSHA		; save the old 'FOR' save area
    940 0000C4B6 3E 40 02 AF             	call	SETVAL		; set the control variable
    941 0000C4BA 06 40 06 D1             	sw		r1,LOPVAR	; save its address
    942 0000C4BE 23 4C 04 19             	lea		r9,TAB5		; use 'EXEC' to test for 'TO'
    943 0000C4C2 28 4C 0E 1A             	lea		r10,TAB5_1
    944 0000C4C6 EF 4F 05 AE             	jmp		EXEC
    945 0000C4CA                        FR1
    946 0000C4CA 1A 40 0B AF             	call	OREXPR		; evaluate the limit
    947 0000C4CE 06 40 0A D1             	sw		r1,LOPLMT	; save that
    948 0000C4D2 23 4C 07 19             	lea		r9,TAB6		; use 'EXEC' to look for the
    949 0000C4D6 29 4C 02 1A             	lea		r10,TAB6_1	; word 'STEP'
    950 0000C4DA EE 4F 0B AE             	jmp		EXEC
    951 0000C4DE                        FR2
    952 0000C4DE 1A 40 01 AF             	call	OREXPR		; found it, get the step value
    953 0000C4E2 01 AE                   	br		FR4
    954 0000C4E4                        FR3
    955 0000C4E4 01 11                   	lw		r1,#1		; not found, step defaults to 1
    956 0000C4E6                        FR4
    957 0000C4E6 06 40 08 D1             	sw		r1,LOPINC	; save that too
                                        
    959 0000C4EA                        FR5
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 17
noc_boot11.a
    960 0000C4EA 06 40 00 F2             	lw		r2,CURRNT
    961 0000C4EE 06 40 0C D2             	sw		r2,LOPLN	; save address of current line number
    962 0000C4F2 06 40 0E D8             	sw		r8,LOPPT	; and text pointer
                                        
                                        
    965 0000C4F6 E0 13                   	lw		r3,sp		; dig into the stack to find 'LOPVAR'
    966 0000C4F8 06 40 06 F6             	lw		r6,LOPVAR
    967 0000C4FC 01 AE                   	br		FR7
    968 0000C4FE                        FR6
    969 0000C4FE 3A 13                   	lea		r3,10[r3]	; look at next stack frame
    970 0000C500                        FR7
    971 0000C500 30 F2                   	lw		r2,[r3]		; is it zero?
    972 0000C502 08 A8                   	beq		FR8			; if so, we're done
    973 0000C504 6D 22                   	cmp		r2,r6		; same as current LOPVAR?
    974 0000C506 FB B9                   	bne		FR6			; nope, look some more
                                        
    976 0000C508 30 11                       lw      r1,r3       ; Else remove 5 words from...
    977 0000C50A 3A 12                   	lea		r2,10[r3]   ; inside the stack.
    978 0000C50C E0 13                   	lw		r3,sp		
    979 0000C50E 47 40 0A AF             	call	MVDOWN
    980 0000C512 0A 6E                   	add		sp,sp,#10	; set the SP 5 words up
    981 0000C514                        FR8
    982 0000C514 9D BE                       br	    FINISH		; and continue execution
                                        
                                        
                                        ; 'NEXT var' serves as the logical (not necessarily physical) end
                                        ; of the 'FOR' loop.  The control variable 'var' is checked with
                                        ; the 'LOPVAR'.  If they are not the same, the interpreter digs in
                                        ; the stack to find the right one and purges all those that didn't
                                        ; match.  Either way, it then adds the 'STEP' to that variable and
                                        ; checks the result with against the limit value.  If it is within
                                        ; the limit, control loops back to the command following the
                                        ; 'FOR'.  If it's outside the limit, the save area is purged and
                                        ; execution continues.
                                        ;
    995 0000C516                        NEXT
    996 0000C516 00 11                   	lw		r1,#0		; don't allocate it
    997 0000C518 26 40 08 AF             	call	TSTV		; get address of variable
    998 0000C51C 04 A9                   	bne		NX4
    999 0000C51E 40 4D 0F 11             	lea		r1,msgNextVar
   1000 0000C522 3E 40 0A AE             	br		ERROR		; if no variable, say "What?"
   1001 0000C526                        NX4
   1002 0000C526 10 19                   	lw		r9,r1		; save variable's address
   1003 0000C528                        NX0
   1004 0000C528 06 40 06 F1             	lw		r1,LOPVAR	; If 'LOPVAR' is zero, we never...
   1005 0000C52C 04 A9                   	bne		NX5         ; had a FOR loop
   1006 0000C52E 3F 4D 0C 11             	lea		r1,msgNextFor
   1007 0000C532 3E 40 02 AE             	br		ERROR		
   1008 0000C536                        NX5
   1009 0000C536 9D 21                   	cmp		r1,r9		; else we check them
   1010 0000C538 03 A8                   	beq		NX2			; OK, they agree
   1011 0000C53A 46 40 07 AF             	call	POPA		; nope, let's see the next frame
   1012 0000C53E F4 BE                   	br		NX0
   1013 0000C540                        NX2
   1014 0000C540 90 F1                   	lw		r1,[r9]		; get control variable's value
   1015 0000C542 06 40 08 F2             	lw		r2,LOPINC
   1016 0000C546 20 21                   	add		r1,r2		; add in loop increment
                                        ;	BVS.L	QHOW		say "How?" for 32-bit overflow
   1018 0000C548 90 D1                   	sw		r1,[r9]		; save control variable's new value
   1019 0000C54A 06 40 0A F3             	lw		r3,LOPLMT	; get loop's limit value
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 18
noc_boot11.a
   1020 0000C54E 26 22                   	or		r2,r2       ; check loop increment
   1021 0000C550 03 AB                   	bpl		NX1			; branch if loop increment is positive
   1022 0000C552 3D 21                   	cmp		r1,r3		; test against limit
   1023 0000C554 0A A0                   	blt		NXPurge
   1024 0000C556 02 AE                   	br      NX3
   1025 0000C558                        NX1
   1026 0000C558 3D 21                   	cmp		r1,r3
   1027 0000C55A 07 A3                   	bgt		NXPurge
   1028 0000C55C                        NX3	
   1029 0000C55C 06 40 0C F8             	lw		r8,LOPLN	; Within limit, go back to the...
   1030 0000C560 06 40 00 D8             	sw		r8,CURRNT
   1031 0000C564 06 40 0E F8             	lw		r8,LOPPT	; saved 'CURRNT' and text pointer.
   1032 0000C568 73 BE                   	br		FINISH
                                        
   1034 0000C56A                        NXPurge
   1035 0000C56A 44 40 0F AF                 call    POPA        ; purge this loop
   1036 0000C56E 70 BE                       br      FINISH
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** REM *** IF *** INPUT *** LET (& DEFLT) ***
                                        ;
                                        ; 'REM' can be followed by anything and is ignored by the
                                        ; interpreter.
                                        ;
                                        ;REM
                                        ;    br	    IF2		    ; skip the rest of the line
                                        
                                        ; 'IF' is followed by an expression, as a condition and one or
                                        ; more commands (including other 'IF's) separated by colons.
                                        ; Note that the word 'THEN' is not used.  The interpreter evaluates
                                        ; the expression.  If it is non-zero, execution continues.  If it
                                        ; is zero, the commands that follow are ignored and execution
                                        ; continues on the next line.
                                        ;
   1056 0000C570                        IF
   1057 0000C570 15 40 08 AF                 call	OREXPR		; evaluate the expression
   1058 0000C574                        IF1
   1059 0000C574 16 21                       or      r1,r1       ; is it zero?
   1060 0000C576 EF 4F 0D A9                 bne	    RUNSML		; if not, continue
   1061 0000C57A                        IF2
   1062 0000C57A 80 19                       lw		r9,r8		; set lookup pointer
   1063 0000C57C 00 11                   	lw		r1,#0		; find line #0 (impossible)
   1064 0000C57E 43 40 01 AF             	call	FNDSKP		; if so, skip the rest of the line
   1065 0000C582 DB 4F 0C A7             	bgtu	WSTART		; if no next line, do a warm start
   1066 0000C586                        IF3
   1067 0000C586 EF 4F 02 AE             	br		RUNTSL		; run the next line
                                        
                                        
                                        ; INPUT is called first and establishes a stack frame
   1071 0000C58A                        INPERR
   1072 0000C58A 06 40 04 FE             	lw		sp,STKINP	; restore the old stack pointer
   1073 0000C58E E4 F8                   	lw		r8,4[sp]
   1074 0000C590 06 40 00 D8             	sw		r8,CURRNT	; and old 'CURRNT'
   1075 0000C594 E2 F8                   	lw		r8,2[sp]	; and old text pointer
   1076 0000C596 0A 6E                   	add		sp,sp,#10	; fall through will subtract 10
                                        
                                        ; 'INPUT' is like the 'PRINT' command, and is followed by a list
                                        ; of items.  If the item is a string in single or double quotes,
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 19
noc_boot11.a
                                        ; or is an underline (back arrow), it has the same effect as in
                                        ; 'PRINT'.  If an item is a variable, this variable name is
                                        ; printed out followed by a colon, then the interpreter waits for
                                        ; an expression to be typed in.  The variable is then set to the
                                        ; value of this expression.  If the variable is preceeded by a
                                        ; string (again in single or double quotes), the string will be
                                        ; displayed followed by a colon.  The interpreter the waits for an
                                        ; expression to be entered and sets the variable equal to the
                                        ; expression's value.  If the input expression is invalid, the
                                        ; interpreter will print "What?", "How?", or "Sorry" and reprint
                                        ; the prompt and redo the input.  The execution will not terminate
                                        ; unless you press control-C.  This is handled in 'INPERR'.
                                        ;
   1093 0000C598                        INPUT
   1094 0000C598 F6 6E                   	sub		sp,sp,#10	; allocate stack frame
   1095 0000C59A E8 D5                   	sw      r5,8[sp]
   1096 0000C59C                        IP6
   1097 0000C59C E0 D8                   	sw		r8,[sp]		; save in case of error
   1098 0000C59E 47 40 0F AF             	call	QTSTG		; is next item a string?
   1099 0000C5A2 06 AE                   	br		IP2			; nope - this branch must take only two bytes
   1100 0000C5A4 01 11                   	lw		r1,#1		; allocate var
   1101 0000C5A6 22 40 01 AF             	call	TSTV		; yes, but is it followed by a variable?
   1102 0000C5AA 2A A8                   	beq     IP4		    ; if not, brnch
   1103 0000C5AC 10 1A                   	lw		r10,r1		; put away the variable's address
   1104 0000C5AE 10 AE                   	br		IP3			; if so, input to variable
   1105 0000C5B0                        IP2
   1106 0000C5B0 E2 D8                   	sw		r8,2[sp]	; save for 'PRTSTG'
   1107 0000C5B2 01 11                   	lw		r1,#1
   1108 0000C5B4 21 40 0A AF             	call	TSTV		; must be a variable now
   1109 0000C5B8 04 A9                   	bne		IP7
   1110 0000C5BA 3D 4D 0F 11             	lea		r1,msgInputVar
   1111 0000C5BE 39 40 0C AE             	br		ERROR		; "What?" it isn't?
   1112 0000C5C2                        IP7
   1113 0000C5C2 10 1A                   	lw		r10,r1		; put away the variable's address
   1114 0000C5C4 80 E5                   	lb		r5,[r8]		; get ready for 'PRTSTG' by null terminating
   1115 0000C5C6 80 C0                   	sb		r0,[r8]
   1116 0000C5C8 E2 F1                   	lw		r1,2[sp]	; get back text pointer
   1117 0000C5CA 44 40 0D AF             	call	PRTSTG		; print string as prompt
   1118 0000C5CE 80 C5                   	sb		r5,[r8]		; un-null terminate
   1119 0000C5D0                        IP3
   1120 0000C5D0 E2 D8                   	sw		r8,2[sp]	; save in case of error
   1121 0000C5D2 06 40 00 F1             	lw		r1,CURRNT
   1122 0000C5D6 E4 D1                   	sw		r1,4[sp]	; also save 'CURRNT'
   1123 0000C5D8 0F 11                   	lw		r1,#-1
   1124 0000C5DA 06 40 00 D1             	sw		r1,CURRNT	; flag that we are in INPUT
   1125 0000C5DE 06 40 04 DE             	sw		sp,STKINP	; save the stack pointer too
   1126 0000C5E2 E6 DA                   	sw		r10,6[sp]	; save the variable address
   1127 0000C5E4 03 40 0A 11             	lw		r1,#':'		; print a colon first
   1128 0000C5E8 3A 40 01 AF             	call	GETLN		; then get an input line
   1129 0000C5EC 0A 40 0E 18             	lea		r8,BUFFER	; point to the buffer
   1130 0000C5F0 11 40 08 AF             	call	OREXPR		; evaluate the input
   1131 0000C5F4 E6 FA                   	lw		r10,6[sp]	; restore the variable address
   1132 0000C5F6 A0 D1                   	sw		r1,[r10]	; save value in variable
   1133 0000C5F8 E4 F1                   	lw		r1,4[sp]	; restore old 'CURRNT'
   1134 0000C5FA 06 40 00 D1             	sw		r1,CURRNT
   1135 0000C5FE E2 F8                   	lw		r8,2[sp]	; and the old text pointer
   1136 0000C600                        IP4
   1137 0000C600 50 40 08 AF             	call	TSTC		; is the next thing a comma?
   1138 0000C604 2C 04                   	db	',',IP5-*+1
   1139 0000C606 CA BE                   	br		IP6			; yes, more items
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 20
noc_boot11.a
   1140 0000C608                        IP5
   1141 0000C608 E8 F5                       lw      r5,8[sp]
   1142 0000C60A 0A 6E                   	add		sp,sp,#10	; clean up the stack
   1143 0000C60C 21 BE                   	jmp		FINISH
                                        
                                        
   1146 0000C60E                        DEFLT
   1147 0000C60E 80 E1                       lb      r1,[r8]
   1148 0000C610 FF 4F 13 10                 cmp     r1,#CR      ; empty line is OK
   1149 0000C614 1D B8                   	beq	    FINISH	    ; else it is 'LET'
                                        
                                        
                                        ; 'LET' is followed by a list of items separated by commas.
                                        ; Each item consists of a variable, an equals sign, and an
                                        ; expression.  The interpreter evaluates the expression and sets
                                        ; the variable to that value.  The interpreter will also handle
                                        ; 'LET' commands without the word 'LET'.  This is done by 'DEFLT'.
                                        ;
   1158 0000C616                        LET
   1159 0000C616 33 40 02 AF                 call	SETVAL		; do the assignment
   1160 0000C61A 4F 40 0B AF             	call	TSTC		; check for more 'LET' items
   1161 0000C61E 2C 04                   	db	',',LT1-*+1
   1162 0000C620 FA BE                   	br	    LET
   1163 0000C622                        LT1
   1164 0000C622 16 BE                       br	    FINISH		; until we are finished.
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** LOAD *** & SAVE ***
                                        ;
                                        ; These two commands transfer a program to/from an auxiliary
                                        ; device such as a cassette, another computer, etc.  The program
                                        ; is converted to an easily-stored format: each line starts with
                                        ; a colon, the line no. as 4 hex digits, and the rest of the line.
                                        ; At the end, a line starting with an '@' sign is sent.  This
                                        ; format can be read back with a minimum of processing time by
                                        ; the Butterfly.
                                        ;
   1179 0000C624                        LOAD
   1180 0000C624 09 4C 00 F8             	lw		r8,TXTBGN	; set pointer to start of prog. area
   1181 0000C628 00 40 0D 11             	lw		r1,#CR		; For a CP/M host, tell it we're ready...
   1182 0000C62C D2 4F 0A AF             	call	GOAUXO		; by sending a CR to finish PIP command.
   1183 0000C630                        LOD1
   1184 0000C630 D2 4F 0A AF             	call	GOAUXI		; look for start of line
   1185 0000C634 FD BA                   	bmi		LOD1
   1186 0000C636 FC 4F 10 10             	cmp		r1,#'@'		; end of program?
   1187 0000C63A 1B A8                   	beq		LODEND
   1188 0000C63C FE 4F 16 10             	cmp     r1,#0x1A    ; or EOF marker
   1189 0000C640 18 A8                   	beq     LODEND
   1190 0000C642 FC 4F 16 10             	cmp		r1,#':'		; if not, is it start of line?
   1191 0000C646 F4 B9                   	bne		LOD1		; if not, wait for it
   1192 0000C648 18 AF                   	call	GCHAR		; get line number
   1193 0000C64A 80 C1                   	sb		r1,[r8]		; store it
   1194 0000C64C A1 31                   	shr		r1,#1
   1195 0000C64E A1 31                   	shr		r1,#1
   1196 0000C650 A1 31                   	shr		r1,#1
   1197 0000C652 A1 31                   	shr		r1,#1
   1198 0000C654 A1 31                   	shr		r1,#1
   1199 0000C656 A1 31                   	shr		r1,#1
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 21
noc_boot11.a
   1200 0000C658 A1 31                   	shr		r1,#1
   1201 0000C65A A1 31                   	shr		r1,#1
   1202 0000C65C 81 C1                   	sb		r1,1[r8]
   1203 0000C65E 02 68                   	add		r8,r8,#2
   1204 0000C660                        LOD2
   1205 0000C660 D1 4F 02 AF             	call	GOAUXI		; get another text char.
   1206 0000C664 FD BA                   	bmi		LOD2
   1207 0000C666 80 C1                   	sb		r1,[r8]
   1208 0000C668 01 68                   	add		r8,r8,#1	; store it
   1209 0000C66A FF 4F 13 10             	cmp		r1,#CR		; is it the end of the line?
   1210 0000C66E F8 B9                   	bne		LOD2		; if not, go back for more
   1211 0000C670 DF BE                   	br		LOD1		; if so, start a new line
   1212 0000C672                        LODEND
   1213 0000C672 07 40 00 D8             	sw		r8,TXTUNF	; set end-of program pointer
   1214 0000C676 D4 4F 02 AE             	br		WSTART		; back to direct mode
                                        
                                        ; get character from input (16 bit value)
   1217 0000C67A                        GCHAR
   1218 0000C67A FA 6E                   	sub		sp,sp,#6
   1219 0000C67C E0 DF                   	sw		lr,[sp]
   1220 0000C67E E2 D5                   	sw		r5,2[sp]
   1221 0000C680 E4 D6                   	sw		r6,4[sp]
   1222 0000C682 04 16                   	lw      r6,#4       ; repeat four times
   1223 0000C684 00 15                   	lw		r5,#0
   1224 0000C686                        GCHAR1
   1225 0000C686 CF 4F 0F AF             	call	GOAUXI		; get a char
   1226 0000C68A FD BA                   	bmi		GCHAR1
   1227 0000C68C 0D AF                   	call	asciiToHex
   1228 0000C68E 81 35                   	shl		r5,#1
   1229 0000C690 81 35                   	shl		r5,#1
   1230 0000C692 81 35                   	shl		r5,#1
   1231 0000C694 81 35                   	shl		r5,#1
   1232 0000C696 16 25                   	or		r5,r1
   1233 0000C698 FF 66                   	sub		r6,r6,#1
   1234 0000C69A F5 B9                   	bne     GCHAR1
   1235 0000C69C 50 11                   	lw		r1,r5
   1236 0000C69E E0 FF                   	lw		lr,[sp]
   1237 0000C6A0 E2 F5                   	lw		r5,2[sp]
   1238 0000C6A2 E4 F6                   	lw		r6,4[sp]
   1239 0000C6A4 06 6E                   	add     sp,sp,#6
   1240 0000C6A6 F0 80                   	ret
                                        
                                        ; convert an ascii char to hex code
                                        ; input
                                        ;	r2 = char to convert
                                        
   1246 0000C6A8                        asciiToHex
   1247 0000C6A8 FC 4F 17 10             	cmp		r1,#'9'
   1248 0000C6AC 01 A2                   	ble		a2h1		; less than '9'
   1249 0000C6AE F9 61                   	sub		r1,r1,#7	; shift 'A' to '9'+1
   1250 0000C6B0                        a2h1
   1251 0000C6B0 D0 61                   	sub		r1,r1,#'0'	;
   1252 0000C6B2 00 40 5F 31             	and		r1,#15		; make sure a nybble
   1253 0000C6B6 F0 80                   	ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; SAVE
                                        ; SAVE ON <node number> - copies the code to the specified node
                                        ;----------------------------------------------------------------------------
                                        
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 22
noc_boot11.a
   1260 0000C6B8                        SAVE
   1261 0000C6B8 53 40 03 AF             	call	IGNBLK		; ignore blanks
   1262 0000C6BC 80 E1                   	lb		r1,[r8]
   1263 0000C6BE FB 4F 11 10             	cmp		r1,#'O'
   1264 0000C6C2 04 A9                   	bne		SAVE3
   1265 0000C6C4 81 E1                   	lb		r1,1[r8]
   1266 0000C6C6 FB 4F 12 10             	cmp		r1,#'N'
   1267 0000C6CA 2D A8                   	beq		SAVEON1
   1268 0000C6CC                        SAVE3:
   1269 0000C6CC 09 4C 00 F8             	lw		r8,TXTBGN	;set pointer to start of prog. area
   1270 0000C6D0 07 40 00 F9             	lw		r9,TXTUNF	;set pointer to end of prog. area
   1271 0000C6D4                        SAVE1
   1272 0000C6D4 4C AF                   	call    AUXOCRLF    ; send out a CR & LF (CP/M likes this)
   1273 0000C6D6 9D 28                   	cmp		r8,r9		; are we finished?
   1274 0000C6D8 1B A5                   	bgeu	SAVEND
   1275 0000C6DA                        SAVE4:
   1276 0000C6DA 03 40 0A 11             	lw		r1,#':'		; if not, start a line
   1277 0000C6DE CD 4F 01 AF             	call	GOAUXO
   1278 0000C6E2 80 E1                   	lb		r1,[r8]		; get line number
   1279 0000C6E4 0E 21                   	zxb		r1
   1280 0000C6E6 81 E2                   	lb		r2,1[r8]
   1281 0000C6E8 0E 22                   	zxb		r2
   1282 0000C6EA 81 32                   	shl		r2,#1
   1283 0000C6EC 81 32                   	shl		r2,#1
   1284 0000C6EE 81 32                   	shl		r2,#1
   1285 0000C6F0 81 32                   	shl		r2,#1
   1286 0000C6F2 81 32                   	shl		r2,#1
   1287 0000C6F4 81 32                   	shl		r2,#1
   1288 0000C6F6 81 32                   	shl		r2,#1
   1289 0000C6F8 81 32                   	shl		r2,#1
   1290 0000C6FA 26 21                   	or		r1,r2
   1291 0000C6FC 02 68                   	add		r8,r8,#2
   1292 0000C6FE 43 AF                   	call	PWORD       ; output line number as 4-digit hex
   1293 0000C700                        SAVE2
   1294 0000C700 80 E1                   	lb		r1,[r8]		; get a text char.
   1295 0000C702 01 68                   	add		r8,r8,#1
   1296 0000C704 FF 4F 13 10             	cmp		r1,#CR		; is it the end of the line?
   1297 0000C708 E5 B8                   	beq		SAVE1		; if so, send CR & LF and start new line
   1298 0000C70A CB 4F 0B AF             	call	GOAUXO		; send it out
   1299 0000C70E F8 BE                   	br		SAVE2		; go back for more text
   1300 0000C710                        SAVEND
   1301 0000C710 04 40 00 11             	lw		r1,#'@'		; send end-of-program indicator
   1302 0000C714 CB 4F 06 AF             	call	GOAUXO
   1303 0000C718 2A AF                   	call    AUXOCRLF    ; followed by a CR & LF
   1304 0000C71A 01 40 0A 11             	lw		r1,#0x1A	; and a control-Z to end the CP/M file
   1305 0000C71E CB 4F 01 AF             	call	GOAUXO
   1306 0000C722 CE 4F 0C AE             	br		WSTART		; then go do a warm start
                                        
                                        ; Copy program to specified node. Transfers six bytes at a time per
                                        ; network message.
                                        
   1311 0000C726                        SAVEON1
   1312 0000C726 02 68                   	add		r8,r8,#2
   1313 0000C728 7D AF                   	call	OREXPR		; get core #
   1314 0000C72A 03 40 06 C1             	sb		r1,tgtNode
   1315 0000C72E 58 40 0A AF             	call	TriggerTgtLoad
   1316 0000C732 09 4C 00 F8             	lw		r8,TXTBGN	;set pointer to start of prog. area
   1317 0000C736 07 40 00 F9             	lw		r9,TXTUNF	;set pointer to end of prog. area
   1318 0000C73A                        SAVEON3:
   1319 0000C73A 9D 28                   	cmp		r8,r9
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 23
noc_boot11.a
   1320 0000C73C 16 A5                   	bgeu	SAVEON2
   1321 0000C73E 80 F1                   	lw		r1,[r8]
   1322 0000C740 04 40 00 D1             	sw		r1,txBuf
   1323 0000C744 82 F1                   	lw		r1,2[r8]
   1324 0000C746 04 40 02 D1             	sw		r1,txBuf+2
   1325 0000C74A 84 F1                   	lw		r1,4[r8]
   1326 0000C74C 04 40 04 D1             	sw		r1,txBuf+4
   1327 0000C750 E4 31                   	tsr		r1,ID
   1328 0000C752 04 40 0E C1             	sb		r1,txBuf+MSG_SRC
   1329 0000C756 03 40 06 E1             	lb		r1,tgtNode
   1330 0000C75A 04 40 0F C1             	sb		r1,txBuf+MSG_DST
                                        	lb		r1,#MT_LOAD_BASIC_CHAR
   1332 0000C75E 04 40 08 C1             	sb		r1,txBuf+MSG_TYPE
   1333 0000C762 C5 4F 0F AF             	call	Xmit
   1334 0000C766 06 68                   	add		r8,r8,#6
   1335 0000C768 E8 BE                   	br		SAVEON3
   1336 0000C76A                        SAVEON2:
   1337 0000C76A CC 4F 08 AE             	br		WSTART
                                        
                                        ; output a CR LF sequence to auxillary output
                                        ; Registers Affected
                                        ;   r3 = LF
   1342 0000C76E                        AUXOCRLF
   1343 0000C76E FE 6E                       sub     sp,sp,#2
   1344 0000C770 E0 DF                       sw      lr,[sp]
   1345 0000C772 00 40 0D 11                 lw      r1,#CR
   1346 0000C776 C8 4F 05 AF                 call    GOAUXO
   1347 0000C77A 0A 11                       lw      r1,#LF
   1348 0000C77C C8 4F 02 AF                 call    GOAUXO
   1349 0000C780 E0 FF                       lw      lr,[sp]
   1350 0000C782 02 6E                   	add		sp,sp,#2
   1351 0000C784 F0 80                       ret
                                        
                                        
                                        ; output a word in hex format
                                        ; tricky because of the need to reverse the order of the chars
   1356 0000C786                        PWORD
   1357 0000C786 FC 6E                   	sub		sp,sp,#4
   1358 0000C788 E0 DF                   	sw		lr,[sp]
   1359 0000C78A E2 D5                   	sw		r5,2[sp]
   1360 0000C78C 07 40 0F 15             	lea     r5,NUMWKA+3
   1361 0000C790 10 14                   	lw		r4,r1		; r4 = value
   1362 0000C792                        pword1
   1363 0000C792 40 11                       lw      r1,r4       ; r1 = value
   1364 0000C794 A1 34                       shr     r4,#1       ; shift over to next nybble
   1365 0000C796 A1 34                       shr     r4,#1
   1366 0000C798 A1 34                       shr     r4,#1
   1367 0000C79A A1 34                       shr     r4,#1
   1368 0000C79C 10 AF                       call    toAsciiHex  ; convert LS nybble to ascii hex
   1369 0000C79E 50 C1                       sb      r1,[r5]     ; save in work area
   1370 0000C7A0 FF 65                       sub     r5,r5,#1
   1371 0000C7A2 F8 4F 54 10                 cmp     r5,#NUMWKA
   1372 0000C7A6 F5 B5                       bgeu    pword1
   1373 0000C7A8                        pword2
   1374 0000C7A8 01 65                       add     r5,r5,#1
   1375 0000C7AA 50 E1                       lb      r1,[r5]     ; get char to output
   1376 0000C7AC C6 4F 0A AF             	call	GOAUXO		; send it
   1377 0000C7B0 F8 4F 51 10             	cmp     r5,#NUMWKA+3
   1378 0000C7B4 F9 B4                   	bltu    pword2
                                        
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 24
noc_boot11.a
   1380 0000C7B6 E2 F5                   	lw		r5,2[sp]
   1381 0000C7B8 E0 FF                   	lw		lr,[sp]
   1382 0000C7BA 04 6E                   	add		sp,sp,#4
   1383 0000C7BC F0 80                   	ret
                                        
                                        
                                        ; convert nybble in r2 to ascii hex char2
                                        ; r2 = character to convert
                                        
   1389 0000C7BE                        toAsciiHex
   1390 0000C7BE 00 40 5F 31             	and		r1,#15		; make sure it's a nybble
   1391 0000C7C2 FF 4F 16 10             	cmp		r1,#10		; > 10 ?
   1392 0000C7C6 01 A0                   	blt		tah1
   1393 0000C7C8 07 61                   	add		r1,r1,#7	; bump it up to the letter 'A'
   1394 0000C7CA                        tah1
   1395 0000C7CA 30 61                   	add		r1,r1,#'0'	; bump up to ascii '0'
   1396 0000C7CC F0 80                   	ret
                                        
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** POKE *** & SYSX ***
                                        ;
                                        ; 'POKE expr1,expr2' stores the byte from 'expr2' into the memory
                                        ; address specified by 'expr1'.
                                        ;
                                        ; 'SYSX expr' jumps to the machine language subroutine whose
                                        ; starting address is specified by 'expr'.  The subroutine can use
                                        ; all registers but must leave the stack the way it found it.
                                        ; The subroutine returns to the interpreter by executing an RET.
                                        ;
   1412 0000C7CE                        POKE
   1413 0000C7CE FE 6E                   	sub		sp,sp,#2
   1414 0000C7D0 29 AF                   	call	OREXPR		; get the memory address
   1415 0000C7D2 41 40 0F AF             	call	TSTC		; it must be followed by a comma
   1416 0000C7D6 2C 10                   	db	',',PKER-*+1
   1417 0000C7D8 E0 D1                   	sw		r1,[sp]	    ; save the address
   1418 0000C7DA 24 AF                   	call	OREXPR		; get the byte to be POKE'd
   1419 0000C7DC E0 F2                   	lw		r2,[sp]	    ; get the address back
   1420 0000C7DE 20 C1                   	sb		r1,[r2]		; store the byte in memory
   1421 0000C7E0 02 6E                   	add		sp,sp,#2
   1422 0000C7E2 E3 4F 05 AE             	br		FINISH
   1423 0000C7E6                        PKER
   1424 0000C7E6 37 4D 08 11             	lea		r1,msgComma
   1425 0000C7EA 28 40 06 AE             	br		ERROR		; if no comma, say "What?"
                                        
                                        
   1428 0000C7EE                        POKEW
   1429 0000C7EE FE 6E                   	sub		sp,sp,#2
   1430 0000C7F0 19 AF                   	call	OREXPR		; get the memory address
   1431 0000C7F2 40 40 0F AF             	call	TSTC		; it must be followed by a comma
   1432 0000C7F6 2C F0                   	db	',',PKER-*+1
   1433 0000C7F8 E0 D1                   	sw		r1,[sp]	    ; save the address
   1434 0000C7FA 14 AF                   	call	OREXPR		; get the byte to be POKE'd
   1435 0000C7FC E0 F2                   	lw		r2,[sp]	    ; get the address back
   1436 0000C7FE 20 D1                   	sw		r1,[r2]		; store the word in memory
   1437 0000C800 02 6E                   	add		sp,sp,#2
   1438 0000C802 E2 4F 05 AE             	jmp		FINISH
                                        
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 25
noc_boot11.a
                                        
   1441 0000C806                        SYSX
   1442 0000C806 FE 6E                   	sub		sp,sp,#2
   1443 0000C808 0D AF                   	call	OREXPR		; get the subroutine's address
   1444 0000C80A 16 20                   	or		r0,r1		; make sure we got a valid address
   1445 0000C80C 04 A9                   	bne		sysx1
   1446 0000C80E 3C 4D 0D 11             	lea		r1,msgSYSBad
   1447 0000C812 27 40 02 AE             	br		ERROR
   1448 0000C816                        sysx1
   1449 0000C816 E0 D8                   	sw		r8,[sp]	    ; save the text pointer
   1450 0000C818 BF 49 02 AF             	call	[r1]		; jump to the subroutine
   1451 0000C81C E0 F8                   	lw		r8,[sp]	    ; restore the text pointer
   1452 0000C81E 02 6E                   	add		sp,sp,#2
   1453 0000C820 E1 4F 06 AE             	br		FINISH
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** EXPR ***
                                        ;
                                        ; 'EXPR' evaluates arithmetical or logical expressions.
                                        ; <OREXPR>::= <ANDEXPR> OR <ANDEXPR> ...
                                        ; <ANDEXPR>::=<EXPR> AND <EXPR> ...
                                        ; <EXPR>::=<EXPR2>
                                        ;	   <EXPR2><rel.op.><EXPR2>
                                        ; where <rel.op.> is one of the operators in TAB8 and the result
                                        ; of these operations is 1 if true and 0 if false.
                                        ; <EXPR2>::=(+ or -)<EXPR3>(+ or -)<EXPR3>(...
                                        ; where () are optional and (... are optional repeats.
                                        ; <EXPR3>::=<EXPR4>( <* or /><EXPR4> )(...
                                        ; <EXPR4>::=<variable>
                                        ;	    <function>
                                        ;	    (<EXPR>)
                                        ; <EXPR> is recursive so that the variable '@' can have an <EXPR>
                                        ; as an index, functions can have an <EXPR> as arguments, and
                                        ; <EXPR4> can be an <EXPR> in parenthesis.
                                        ;
                                        
                                        
                                        ; <OREXPR>::=<ANDEXPR> OR <ANDEXPR> ...
                                        ;
   1481 0000C824                        OREXPR
   1482 0000C824 FC 6E                   	sub		sp,sp,#4
   1483 0000C826 E0 DF                   	sw		lr,[sp]
   1484 0000C828 0F AF                   	call	ANDEXPR		; get first <ANDEXPR>
   1485 0000C82A                        XP_OR1
   1486 0000C82A E2 D1                   	sw		r1,2[sp]	; save <ANDEXPR> value
   1487 0000C82C 24 4C 0A 19             	lea		r9,TAB10		; look up a logical operator
   1488 0000C830 2A 4C 08 1A             	lea		r10,TAB10_1
   1489 0000C834 D3 4F 0E AE             	jmp		EXEC		; go do it
                                        
   1491 0000C838                        XP_OR
   1492 0000C838 07 AF                       call    ANDEXPR
   1493 0000C83A E2 F2                       lw      r2,2[sp]
   1494 0000C83C 26 21                       or      r1,r2
   1495 0000C83E F5 BE                       br      XP_OR1
                                        
   1497 0000C840                        XP_ORX
   1498 0000C840 E2 F1                   	lw		r1,2[sp]
   1499 0000C842 E0 FF                       lw      lr,[sp]
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 26
noc_boot11.a
   1500 0000C844 04 6E                       add     sp,sp,#4
   1501 0000C846 F0 80                       ret
                                        
                                        
                                        ; <ANDEXPR>::=<EXPR> AND <EXPR> ...
                                        ;
   1506 0000C848                        ANDEXPR
   1507 0000C848 FC 6E                   	sub		sp,sp,#4
   1508 0000C84A E0 DF                   	sw		lr,[sp]
   1509 0000C84C 37 AF                   	call	EXPR		; get first <EXPR>
   1510 0000C84E                        XP_AND1
   1511 0000C84E E2 D1                   	sw		r1,2[sp]	; save <EXPR> value
   1512 0000C850 24 4C 06 19             	lea		r9,TAB9		; look up a logical operator
   1513 0000C854 2A 4C 04 1A             	lea		r10,TAB9_1
   1514 0000C858 D2 4F 0C AE             	jmp		EXEC		; go do it
                                        
   1516 0000C85C                        XP_AND
   1517 0000C85C 2F AF                       call    EXPR
   1518 0000C85E E2 F2                       lw      r2,2[sp]
   1519 0000C860 25 21                       and     r1,r2
   1520 0000C862 F5 BE                       br      XP_AND1
                                        
   1522 0000C864                        XP_ANDX
   1523 0000C864 E2 F1                   	lw		r1,2[sp]
   1524 0000C866 E0 FF                       lw      lr,[sp]
   1525 0000C868 04 6E                       add     sp,sp,#4
   1526 0000C86A F0 80                       ret
                                        
                                        
                                        ; Determine if the character is a digit
                                        ;   Parameters
                                        ;       r2 = char to test
                                        ;   Returns
                                        ;       r1 = 1 if digit, otherwise 0
                                        ;
   1535 0000C86C                        isDigit
   1536 0000C86C FD 4F 10 10                 cmp     r1,#'0'
   1537 0000C870 05 A0                       blt     isDigitFalse
   1538 0000C872 FC 4F 17 10                 cmp     r1,#'9'
   1539 0000C876 02 A3                       bgt     isDigitFalse
   1540 0000C878 01 11                       lw      r1,#1
   1541 0000C87A F0 80                       ret
   1542 0000C87C                        isDigitFalse
   1543 0000C87C 00 11                       lw      r1,#0
   1544 0000C87E F0 80                       ret
                                        
                                        
                                        ; Determine if the character is a alphabetic
                                        ;   Parameters
                                        ;       r2 = char to test
                                        ;   Returns
                                        ;       r1 = 1 if alpha, otherwise 0
                                        ;
   1553 0000C880                        isAlpha
   1554 0000C880 FB 4F 1F 10                 cmp     r1,#'A'
   1555 0000C884 0B A0                       blt     isAlphaFalse
   1556 0000C886 FA 4F 16 10                 cmp     r1,#'Z'
   1557 0000C88A 06 A2                       ble     isAlphaTrue
   1558 0000C88C F9 4F 1F 10                 cmp     r1,#'a'
   1559 0000C890 05 A0                       blt     isAlphaFalse
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 27
noc_boot11.a
   1560 0000C892 F8 4F 16 10                 cmp     r1,#'z'
   1561 0000C896 02 A3                       bgt     isAlphaFalse
   1562 0000C898                        isAlphaTrue
   1563 0000C898 01 11                       lw      r1,#1
   1564 0000C89A F0 80                       ret
   1565 0000C89C                        isAlphaFalse
   1566 0000C89C 00 11                       lw      r1,#0
   1567 0000C89E F0 80                       ret
                                        
                                        
                                        ; Determine if the character is a alphanumeric
                                        ;   Parameters
                                        ;       r1 = char to test
                                        ;   Returns
                                        ;       r1 = 1 if alpha, otherwise 0
                                        ;
   1576 0000C8A0                        isAlnum
   1577 0000C8A0 FE 6E                       sub     sp,sp,#2
   1578 0000C8A2 E0 DF                       sw      lr,[sp]
   1579 0000C8A4 10 12                       lw      r2,r1		; save test char
   1580 0000C8A6 E2 BF                       call    isDigit
   1581 0000C8A8 06 A9                       bne		isDigitx	; if it is a digit
   1582 0000C8AA 20 11                       lw      r1,r2		; get back test char
   1583 0000C8AC E9 BF                       call    isAlpha
   1584 0000C8AE E0 FF                       lw      lr,[sp]
   1585 0000C8B0 02 6E                       add		sp,sp,#2
   1586 0000C8B2 16 21                       or      r1,r1
   1587 0000C8B4 F0 80                       ret
   1588 0000C8B6                        isDigitx
   1589 0000C8B6 E0 FF                       lw      lr,[sp]
   1590 0000C8B8 02 6E                       add     sp,sp,#2	; return Z=0
   1591 0000C8BA F0 80                       ret
                                        
                                        
   1594 0000C8BC                        EXPR
   1595 0000C8BC FC 6E                   	sub		sp,sp,#4
   1596 0000C8BE E0 DF                   	sw		lr,[sp]
   1597 0000C8C0 39 AF                   	call	EXPR2
   1598 0000C8C2 E2 D1                   	sw		r1,2[sp]	; save <EXPR2> value
   1599 0000C8C4 23 4C 0C 19             	lea		r9,TAB8		; look up a relational operator
   1600 0000C8C8 29 4C 06 1A             	lea		r10,TAB8_1
   1601 0000C8CC CF 4F 02 AE             	jmp		EXEC		; go do it
                                        
   1603 0000C8D0                        XP11
   1604 0000C8D0 E2 F1                   	lw		r1,2[sp]
   1605 0000C8D2 28 AF                   	call	XP18	; is it ">="?
   1606 0000C8D4 1D 22                   	cmp		r2,r1
   1607 0000C8D6 1E A1                   	bge		XPRT1	; no, return r2=1
   1608 0000C8D8 19 AE                   	br		XPRT0	; else return r2=0
                                        
   1610 0000C8DA                        XP12
   1611 0000C8DA E2 F1                   	lw		r1,2[sp]
   1612 0000C8DC 23 AF                   	call	XP18	; is it "<>"?
   1613 0000C8DE 1D 22                   	cmp		r2,r1
   1614 0000C8E0 19 A9                   	bne		XPRT1	; no, return r2=1
   1615 0000C8E2 14 AE                   	br		XPRT0	; else return r2=0
                                        
   1617 0000C8E4                        XP13
   1618 0000C8E4 E2 F1                   	lw		r1,2[sp]
   1619 0000C8E6 1E AF                   	call	XP18	; is it ">"?
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 28
noc_boot11.a
   1620 0000C8E8 1D 22                   	cmp		r2,r1
   1621 0000C8EA 14 A3                   	bgt		XPRT1	; no, return r2=1
   1622 0000C8EC 0F AE                   	br		XPRT0	; else return r2=0
                                        
   1624 0000C8EE                        XP14
   1625 0000C8EE E2 F1                   	lw		r1,2[sp]
   1626 0000C8F0 19 AF                   	call	XP18	; is it "<="?
   1627 0000C8F2 1D 22                   	cmp		r2,r1
   1628 0000C8F4 0F A2                   	ble		XPRT1	; no, return r2=1
   1629 0000C8F6 0A AE                   	br		XPRT0	; else return r2=0
                                        
   1631 0000C8F8                        XP15
   1632 0000C8F8 E2 F1                   	lw		r1,2[sp]
   1633 0000C8FA 14 AF                   	call	XP18	; is it "="?
   1634 0000C8FC 1D 22                   	cmp		r2,r1
   1635 0000C8FE 0A A8                   	beq		XPRT1	; if not, return r2=1
   1636 0000C900 05 AE                   	br		XPRT0	; else return r2=0
                                        
                                        
   1639 0000C902                        XP16
   1640 0000C902 E2 F1                   	lw		r1,2[sp]
   1641 0000C904 0F AF                   	call	XP18	; is it "<"?
   1642 0000C906 1D 22                   	cmp		r2,r1
   1643 0000C908 05 A0                   	blt		XPRT1	; if not, return r2=1
   1644 0000C90A 00 AE                   	br		XPRT0	; else return r2=0
                                        
   1646 0000C90C                        XPRT0
   1647 0000C90C E0 FF                   	lw		lr,[sp]
   1648 0000C90E 04 6E                   	add		sp,sp,#4
   1649 0000C910 00 11                   	lw		r1,#0   ; return r1=0 (false)
   1650 0000C912 F0 80                   	ret
                                        
   1652 0000C914                        XPRT1
   1653 0000C914 E0 FF                   	lw		lr,[sp]
   1654 0000C916 04 6E                   	add		sp,sp,#4
   1655 0000C918 01 11                   	lw		r1,#1	; return r1=1 (true)
   1656 0000C91A F0 80                   	ret
                                        
   1658 0000C91C                        XP17				; it's not a rel. operator
   1659 0000C91C E2 F1                   	lw		r1,2[sp]	; return r2=<EXPR2>
   1660 0000C91E E0 FF                   	lw		lr,[sp]
   1661 0000C920 04 6E                   	add		sp,sp,#4
   1662 0000C922 F0 80                   	ret
                                        
   1664 0000C924                        XP18
   1665 0000C924 FC 6E                   	sub		sp,sp,#4
   1666 0000C926 E0 DF                   	sw		lr,[sp]
   1667 0000C928 E2 D1                   	sw		r1,2[sp]
   1668 0000C92A 04 AF                   	call	EXPR2		; do a second <EXPR2>
   1669 0000C92C E2 F2                   	lw		r2,2[sp]
   1670 0000C92E E0 FF                   	lw		lr,[sp]
   1671 0000C930 04 6E                   	add		sp,sp,#4
   1672 0000C932 F0 80                   	ret
                                        
                                        ; <EXPR2>::=(+ or -)<EXPR3>(+ or -)<EXPR3>(...
                                        
   1676 0000C934                        EXPR2
   1677 0000C934 FC 6E                   	sub		sp,sp,#4
   1678 0000C936 E0 DF                   	sw		lr,[sp]
   1679 0000C938 36 40 0C AF             	call	TSTC		; negative sign?
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 29
noc_boot11.a
   1680 0000C93C 2D 08                   	db	'-',XP21-*+1
   1681 0000C93E 00 11                   	lw		r1,#0		; yes, fake '0-'
   1682 0000C940 E2 D1                   	sw		r1,2[sp]
   1683 0000C942 0F AE                   	br		XP26
   1684 0000C944                        XP21
   1685 0000C944 36 40 06 AF             	call	TSTC		; positive sign? ignore it
   1686 0000C948 2B 02                   	db	'+',XP22-*+1
   1687 0000C94A                        XP22
   1688 0000C94A 12 AF                   	call	EXPR3		; first <EXPR3>
   1689 0000C94C                        XP23
   1690 0000C94C E2 D1                   	sw		r1,2[sp]	; yes, save the value
   1691 0000C94E 36 40 01 AF             	call	TSTC		; add?
   1692 0000C952 2B 0A                   	db	'+',XP25-*+1
   1693 0000C954 0D AF                   	call	EXPR3		; get the second <EXPR3>
   1694 0000C956                        XP24
   1695 0000C956 E2 F2                   	lw		r2,2[sp]
   1696 0000C958 20 21                   	add		r1,r2		; add it to the first <EXPR3>
                                        ;	BVS.L	QHOW		brnch if there's an overflow
   1698 0000C95A F8 BE                   	br		XP23		; else go back for more operations
   1699 0000C95C                        XP25
   1700 0000C95C 35 40 0A AF             	call	TSTC		; subtract?
   1701 0000C960 2D 08                   	db	'-',XP45-*+1
   1702 0000C962                        XP26
   1703 0000C962 06 AF                   	call	EXPR3		; get second <EXPR3>
   1704 0000C964 20 31                   	neg		r1			; change its sign
   1705 0000C966 F7 BE                   	br		XP24		; and do an addition
                                        
   1707 0000C968                        XP45
   1708 0000C968 E2 F1                   	lw		r1,2[sp]
   1709 0000C96A E0 FF                   	lw		lr,[sp]
   1710 0000C96C 04 6E                   	add		sp,sp,#4
   1711 0000C96E F0 80                   	ret
                                        
                                        
                                        ; <EXPR3>::=<EXPR4>( <* or /><EXPR4> )(...
                                        
   1716 0000C970                        EXPR3
   1717 0000C970 FC 6E                   	sub		sp,sp,#4
   1718 0000C972 E0 DF                   	sw		lr,[sp]
   1719 0000C974 14 AF                   	call	EXPR4		; get first <EXPR4>
   1720 0000C976                        XP31
   1721 0000C976 E2 D1                   	sw		r1,2[sp]	; yes, save that first result
   1722 0000C978 34 40 0C AF             	call	TSTC		; multiply?
   1723 0000C97C 2A 0A                   	db	'*',XP34-*+1
   1724 0000C97E 0F AF                   	call	EXPR4		; get second <EXPR4>
   1725 0000C980 E2 F2                   	lw		r2,2[sp]
   1726 0000C982 D2 AF                   	call	MULT32		; multiply the two
   1727 0000C984 F8 BE                   	br		XP31		 ; then look for more terms
   1728 0000C986                        XP34
   1729 0000C986 34 40 05 AF             	call	TSTC		; divide?
   1730 0000C98A 2F 0C                   	db	'/',XP47-*+1
   1731 0000C98C 08 AF                   	call	EXPR4		; get second <EXPR4>
   1732 0000C98E 10 12                   	lw      r2,r1
   1733 0000C990 E2 F1                   	lw		r1,2[sp]
   1734 0000C992 E7 AF                   	call	DIV32		; do the division
   1735 0000C994 F0 BE                   	br		XP31		; go back for any more terms
                                        
   1737 0000C996                        XP47
   1738 0000C996 E2 F1                   	lw		r1,2[sp]
   1739 0000C998 E0 FF                   	lw		lr,[sp]
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 30
noc_boot11.a
   1740 0000C99A 04 6E                   	add		sp,sp,#4
   1741 0000C99C F0 80                   	ret
                                        
                                        
                                        ; Functions are called through EXPR4
                                        ; <EXPR4>::=<variable>
                                        ;	    <function>
                                        ;	    (<EXPR>)
                                        
   1749 0000C99E                        EXPR4
   1750 0000C99E FA 6E                       sub     sp,sp,#6
   1751 0000C9A0 E0 DF                       sw      lr,[sp]
   1752 0000C9A2 21 4C 06 19             	lea		r9,TAB4		; find possible function
   1753 0000C9A6 27 4C 0E 1A             	lea		r10,TAB4_1
   1754 0000C9AA C8 4F 03 AE             	jmp		EXEC        ; branch to function which does subsequent
                                        	                    ; ret for EXPR4
                                        
   1757 0000C9AE                        XP40                    ; we get here if it wasn't a function
   1758 0000C9AE 00 11                   	lw		r1,#0
   1759 0000C9B0 1D AF                   	call	TSTV		
   1760 0000C9B2 04 A8                   	beq     XP41        ; nor a variable
   1761 0000C9B4 10 F1                   	lw		r1,[r1]		; if a variable, return its value in r1
   1762 0000C9B6 E0 FF                   	lw      lr,[sp]
   1763 0000C9B8 06 6E                   	add     sp,sp,#6
   1764 0000C9BA F0 80                   	ret
   1765 0000C9BC                        XP41
   1766 0000C9BC 33 40 0F AF             	call	TSTNUM		; or is it a number?
   1767 0000C9C0 36 23                   	or		r3,r3		; (if not, # of digits will be zero)
   1768 0000C9C2 01 A9                   	bne		XP46		; if so, return it in r1
   1769 0000C9C4 03 AF                   	call    PARN        ; check for (EXPR)
   1770 0000C9C6                        XP46
   1771 0000C9C6 E0 FF                   	lw      lr,[sp]
   1772 0000C9C8 06 6E                   	add     sp,sp,#6
   1773 0000C9CA F0 80                   	ret
                                        
                                        
                                        ; Check for a parenthesized expression
   1777 0000C9CC                        PARN
   1778 0000C9CC FE 6E                   	sub		sp,sp,#2
   1779 0000C9CE E0 DF                   	sw		lr,[sp]
   1780 0000C9D0 32 40 00 AF             	call	TSTC		; else look for ( OREXPR )
   1781 0000C9D4 28 10                   	db	'(',XP43-*+1
   1782 0000C9D6 26 BF                   	call	OREXPR
   1783 0000C9D8 31 40 0C AF             	call	TSTC
   1784 0000C9DC 29 08                   	db	')',XP43-*+1
   1785 0000C9DE                        XP42
   1786 0000C9DE E0 FF                   	lw		lr,[sp]
   1787 0000C9E0 02 6E                   	add		sp,sp,#2
   1788 0000C9E2 F0 80                   	ret
   1789 0000C9E4                        XP43
   1790 0000C9E4 2F 4D 05 11             	lea		r1,msgWhat
   1791 0000C9E8 18 40 07 AE             	br		ERROR
                                        
                                        
                                        ; ===== Test for a valid variable name.  Returns Z=1 if not
                                        ;	found, else returns Z=0 and the address of the
                                        ;	variable in r1.
                                        ; Parameters
                                        ;	r1 = 1 = allocate if not found
                                        ; Returns
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 31
noc_boot11.a
                                        ;	r1 = address of variable, zero if not found
                                        
   1802 0000C9EC                        TSTV
   1803 0000C9EC FA 6E                   	sub		sp,sp,#6
   1804 0000C9EE E0 DF                   	sw		lr,[sp]
   1805 0000C9F0 E2 D5                   	sw		r5,2[sp]
   1806 0000C9F2 10 15                   	lw		r5,r1		; allocate flag
   1807 0000C9F4 39 40 05 AF             	call	IGNBLK
   1808 0000C9F8 80 E1                   	lb		r1,[r8]		; look at the program text
   1809 0000C9FA FC 4F 10 10             	cmp     r1,#'@'
   1810 0000C9FE 1C A0                   	blt     tstv_notfound   ; C=1: not a variable
   1811 0000CA00 12 A9                   	bne		TV1			; brnch if not "@" array
   1812 0000CA02 01 68                   	add		r8,r8,#1	; If it is, it should be
   1813 0000CA04 E3 BF                   	call	PARN		; followed by (EXPR) as its index.
   1814 0000CA06 81 31                   	shl     r1,#1
   1815 0000CA08 81 31                   	shl     r1,#1
                                        ;	BCS.L	QHOW		say "How?" if index is too big
   1817 0000CA0A E4 D1                       sw      r1,4[sp]    ; save the index
   1818 0000CA0C F4 6E                       sub		sp,sp,#12
   1819 0000CA0E E0 DF                       sw		lr,[sp]
   1820 0000CA10 12 40 09 AF             	call	SIZEX		; get amount of free memory
   1821 0000CA14 E4 F2                   	lw      r2,4[sp]    ; get back the index
   1822 0000CA16 1D 22                   	cmp     r2,r1       ; see if there's enough memory
   1823 0000CA18 02 A4                   	bltu	TV2
   1824 0000CA1A 16 40 09 AE             	jmp    	QSORRY		; if not, say "Sorry"
   1825 0000CA1E                        TV2
   1826 0000CA1E 07 40 02 F1             	lw      r1,VARBGN   ; put address of array element...
   1827 0000CA22 22 21                   	sub     r1,r2       ; into r1 (neg. offset is used)
   1828 0000CA24 05 AE                   	br      TSTVRT
   1829 0000CA26                        TV1	
   1830 0000CA26 0D AF                       call    getVarName      ; get variable name
   1831 0000CA28 07 A8                       beq     tstv_notfound   ; if not, set Z=1 and return
   1832 0000CA2A 50 12                       lw		r2,r5
   1833 0000CA2C 58 AF                       call    findVar     ; find or allocate
   1834 0000CA2E 04 A8                       beq		tstv_notfound
   1835 0000CA30                        TSTVRT
   1836 0000CA30 E2 F5                   	lw		r5,2[sp]
   1837 0000CA32 E0 FF                   	lw		lr,[sp]
   1838 0000CA34 06 6E                   	add		sp,sp,#6    ; Z=0 (found)
   1839 0000CA36 F0 80                   	ret
   1840 0000CA38                        tstv_notfound
   1841 0000CA38 E2 F5                   	lw		r5,2[sp]
   1842 0000CA3A E0 FF                       lw      lr,[sp]
   1843 0000CA3C 06 6E                       add     sp,sp,#6
   1844 0000CA3E 00 11                       lw      r1,#0       ; Z=1 if not found
   1845 0000CA40 F0 80                       ret
                                        
                                        
                                        ; Returns
                                        ;   r3,r1 = 3 character variable name + type
                                        ;
   1851 0000CA42                        getVarName
   1852 0000CA42 F8 6E                       sub     sp,sp,#8
   1853 0000CA44 E0 DF                       sw      lr,[sp]
   1854 0000CA46 E6 D5                       sw		r5,6[sp]
                                        
   1856 0000CA48 80 E1                       lb      r1,[r8]     ; get first character
   1857 0000CA4A E2 D1                       sw		r1,2[sp]	; save off current name
   1858 0000CA4C E4 D3                   	sw		r3,4[sp]
   1859 0000CA4E 18 BF                       call    isAlpha
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 32
noc_boot11.a
   1860 0000CA50 41 A8                       beq     gvn1
   1861 0000CA52 02 15                       lw      r5,#2       ; loop twice more
                                        
                                        	; check for second/third character
   1864 0000CA54                        gvn4
   1865 0000CA54 01 68                   	add     r8,r8,#1
   1866 0000CA56 80 E1                   	lb      r1,[r8]     ; do we have another char ?
   1867 0000CA58 23 BF                   	call    isAlnum
   1868 0000CA5A 1B A8                   	beq     gvn2        ; nope
   1869 0000CA5C E2 F1                   	lw      r1,2[sp]    ; get varname
   1870 0000CA5E 81 31                   	shl     r1,#1       ; shift left by eight
   1871 0000CA60 91 33                   	rol		r3,#1
   1872 0000CA62 81 31                   	shl     r1,#1       ; shift left by eight
   1873 0000CA64 91 33                   	rol		r3,#1
   1874 0000CA66 81 31                   	shl     r1,#1       ; shift left by eight
   1875 0000CA68 91 33                   	rol		r3,#1
   1876 0000CA6A 81 31                   	shl     r1,#1       ; shift left by eight
   1877 0000CA6C 91 33                   	rol		r3,#1
   1878 0000CA6E 81 31                   	shl     r1,#1       ; shift left by eight
   1879 0000CA70 91 33                   	rol		r3,#1
   1880 0000CA72 81 31                   	shl     r1,#1       ; shift left by eight
   1881 0000CA74 91 33                   	rol		r3,#1
   1882 0000CA76 81 31                   	shl     r1,#1       ; shift left by eight
   1883 0000CA78 91 33                   	rol		r3,#1
   1884 0000CA7A 81 31                   	shl     r1,#1       ; shift left by eight
   1885 0000CA7C 91 33                   	rol		r3,#1
   1886 0000CA7E 80 E2                   	lb      r2,[r8]
   1887 0000CA80 26 21                   	or      r1,r2       ; add in new char
   1888 0000CA82 E2 D1                       sw      r1,2[sp]   ; save off name again
   1889 0000CA84 E4 D3                   	sw		r3,4[sp]
   1890 0000CA86 FF 65                       sub		r5,r5,#1
   1891 0000CA88 E5 B9                       bne     gvn4
                                        
                                            ; now ignore extra variable name characters
   1894 0000CA8A                        gvn6
   1895 0000CA8A 01 68                       add     r8,r8,#1
   1896 0000CA8C 80 E1                       lb      r1,[r8]
   1897 0000CA8E 08 BF                       call    isAlnum
   1898 0000CA90 FC B9                       bne     gvn6        ; keep looping as long as we have identifier chars
                                            
   1900 0000CA92                        gvn2
   1901 0000CA92 80 E1                   	lb		r1,[r8]
   1902 0000CA94 FD 4F 1B 10                 cmp     r1,#'%'
   1903 0000CA98 05 A8                       beq     gvn3
   1904 0000CA9A FD 4F 1C 10                 cmp     r1,#'$'
   1905 0000CA9E 02 A8                       beq     gvn3
   1906 0000CAA0 00 11                       lw      r1,#0
   1907 0000CAA2 FF 68                       sub     r8,r8,#1
                                        
                                            ; insert variable type indicator and return
   1910 0000CAA4                        gvn3
   1911 0000CAA4 01 68                       add     r8,r8,#1
   1912 0000CAA6 E2 F2                       lw      r2,2[sp]
   1913 0000CAA8 E4 F3                   	lw		r3,4[sp]
   1914 0000CAAA 81 32                       shl     r2,#1
   1915 0000CAAC 91 33                   	rol		r3,#1
   1916 0000CAAE 81 32                       shl     r2,#1
   1917 0000CAB0 91 33                   	rol		r3,#1
   1918 0000CAB2 81 32                       shl     r2,#1
   1919 0000CAB4 91 33                   	rol		r3,#1
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 33
noc_boot11.a
   1920 0000CAB6 81 32                       shl     r2,#1
   1921 0000CAB8 91 33                   	rol		r3,#1
   1922 0000CABA 81 32                       shl     r2,#1
   1923 0000CABC 91 33                   	rol		r3,#1
   1924 0000CABE 81 32                       shl     r2,#1
   1925 0000CAC0 91 33                   	rol		r3,#1
   1926 0000CAC2 81 32                       shl     r2,#1
   1927 0000CAC4 91 33                   	rol		r3,#1
   1928 0000CAC6 81 32                       shl     r2,#1
   1929 0000CAC8 91 33                   	rol		r3,#1
   1930 0000CACA 26 21                       or      r1,r2       ; add in variable type
   1931 0000CACC E0 FF                       lw      lr,[sp]
   1932 0000CACE E4 F5                       lw		r5,4[sp]
   1933 0000CAD0 06 6E                       add     sp,sp,#6   ; return Z = 0, r3,r1 = varname
   1934 0000CAD2 F0 80                       ret
                                        
                                            ; not a variable name
   1937 0000CAD4                        gvn1
   1938 0000CAD4 E0 FF                       lw      lr,[sp]
   1939 0000CAD6 E6 F5                       lw		r5,6[sp]
   1940 0000CAD8 08 6E                       add     sp,sp,#8
   1941 0000CADA 00 11                       lw      r1,#0       ; return Z = 1 if not a varname
   1942 0000CADC F0 80                       ret
                                        
                                        
                                        ; Find variable
                                        ;   r3,r1 = varname
                                        ;	r2 = allocate flag
                                        ; Returns
                                        ;   r1 = variable address, Z =0 if found / allocated, Z=1 if not found
                                        
   1951 0000CADE                        findVar
   1952 0000CADE FA 6E                       sub     sp,sp,#6
   1953 0000CAE0 E0 DF                       sw      lr,[sp]
   1954 0000CAE2 E2 D7                       sw      r7,2[sp]
   1955 0000CAE4 E4 DC                   	sw		r12,4[sp]
   1956 0000CAE6 07 40 02 FC                 lw      r12,VARBGN
   1957 0000CAEA                        fv4
   1958 0000CAEA C0 F7                       lw      r7,[r12]     ; get varname / type
   1959 0000CAEC 0D A8                       beq     fv3         ; no more vars ?
   1960 0000CAEE 7D 23                       cmp     r3,r7       ; match ?
   1961 0000CAF0 03 A9                   	bne		fv5
   1962 0000CAF2 C2 F7                   	lw		r7,2[r12]
   1963 0000CAF4 7D 21                   	cmp		r1,r7
   1964 0000CAF6 0C A8                       beq     fv1
   1965 0000CAF8                        fv5
   1966 0000CAF8 08 6C                       add     r12,r12,#8    ; move to next var
   1967 0000CAFA 07 40 0A F7                 lw      r7,STKBOT
   1968 0000CAFE 7D 2C                       cmp     r12,r7
   1969 0000CB00 F4 B0                       blt     fv4         ; loop back to look at next var
                                        
                                            ; variable not found
                                            ; no more memory
   1973 0000CB02 34 4D 08 11                 lea     r1,msgVarSpace
   1974 0000CB06 F9 AE                       br      ERROR
                                        ;    lw      lr,[sp]
                                        ;    lw      r7,2[sp]
                                        ;    add     sp,sp,#4
                                        ;    lw      r1,#0
                                        ;    ret
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 34
noc_boot11.a
                                        
                                            ; variable not found
                                            ; allocate new ?
   1983 0000CB08                        fv3
   1984 0000CB08 26 22                   	or		r2,r2
   1985 0000CB0A 08 A8                   	beq		fv2
   1986 0000CB0C C0 D3                       sw      r3,[r12]     ; save varname / type
   1987 0000CB0E C2 D1                   	sw		r1,2[r12]
                                            ; found variable
                                            ; return address
   1990 0000CB10                        fv1
   1991 0000CB10 C4 11                       add     r1,r12,#4
   1992 0000CB12 E0 FF                       lw      lr,[sp]
   1993 0000CB14 E2 F7                       lw      r7,2[sp]
   1994 0000CB16 E4 FC                   	lw		r12,4[sp]
   1995 0000CB18 06 6E                       add     sp,sp,#6    ; Z = 0, r1 = address
   1996 0000CB1A F0 80                       ret
                                        
                                            ; didn't find var and not allocating
   1999 0000CB1C                        fv2
   2000 0000CB1C E0 FF                       lw      lr,[sp]
   2001 0000CB1E E2 F7                       lw      r7,2[sp]
   2002 0000CB20 E4 FC                   	lw		r12,4[sp]
   2003 0000CB22 06 6E                       add     sp,sp,#6    ; Z = 0, r1 = address
   2004 0000CB24 00 11                   	lw		r1,#0		; Z = 1, r1 = 0
   2005 0000CB26 F0 80                       ret
                                        
                                        
                                        ; ===== Multiplies the 32 bit values in r1 and r2, returning
                                        ;	the 32 bit result in r1.
                                        ;
                                        
   2012 0000CB28                        MULT32
   2013 0000CB28 FA 6E                   	sub		sp,sp,#6
   2014 0000CB2A E0 D5                   	sw		r5,[sp]		; w
   2015 0000CB2C E2 D6                   	sw		r6,2[sp]	; s
   2016 0000CB2E E4 D7                   	sw		r7,4[sp]
                                        
   2018 0000CB30 00 15                   	lw		r5,#0		; w = 0;
   2019 0000CB32 10 16                   	lw		r6,r1
   2020 0000CB34 24 26                   	xor		r6,r2		; s = a ^ b
   2021 0000CB36 16 21                   	or		r1,r1
   2022 0000CB38 01 AB                   	bpl		mult1
   2023 0000CB3A 20 31                   	neg		r1
   2024 0000CB3C                        mult1
   2025 0000CB3C 26 22                   	or		r2,r2
   2026 0000CB3E 01 AB                   	bpl		mult2
   2027 0000CB40 20 32                   	neg		r2
   2028 0000CB42                        mult2
   2029 0000CB42 10 17                   	lw		r7,r1
   2030 0000CB44 51 37                   	and		r7,#1
   2031 0000CB46 01 A8                   	beq		mult3
   2032 0000CB48 20 25                   	add		r5,r2		; w += b
   2033 0000CB4A                        mult3
   2034 0000CB4A 81 32                   	shl		r2,#1		; b <<= 1
   2035 0000CB4C A1 31                   	shr		r1,#1		; a >>= 1
   2036 0000CB4E F9 B9                   	bne		mult2       ; a = 0 ?
   2037 0000CB50                        mult4
   2038 0000CB50 66 26                       or      r6,r6
   2039 0000CB52 01 AB                   	bpl		mult5
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 35
noc_boot11.a
   2040 0000CB54 20 35                   	neg		r5
   2041 0000CB56                        mult5
   2042 0000CB56 50 11                   	lw		r1,r5
   2043 0000CB58 E4 F7                   	lw		r7,4[sp]
   2044 0000CB5A E2 F6                   	lw		r6,2[sp]
   2045 0000CB5C E0 F5                   	lw		r5,[sp]
   2046 0000CB5E 06 6E                   	add		sp,sp,#6
   2047 0000CB60 F0 80                   	ret
                                        
                                        
                                        ; ===== Divide the 32 bit value in r2 by the 32 bit value in r3.
                                        ;	Returns the 32 bit quotient in r1, remainder in r2
                                        ;
                                        ; r2 = a
                                        ; r3 = b
                                        ; r6 = remainder
                                        ; r7 = iteration count
                                        ; r8 = sign
                                        ;
                                        
                                        ; q = a / b
                                        ; a = r1
                                        ; b = r2
                                        ; q = r2
                                        
   2065 0000CB62                        DIV32
   2066 0000CB62 26 22                       or      r2,r2       ; check for divide-by-zero
   2067 0000CB64 03 A9                       bne		div6
   2068 0000CB66 33 4D 05 11                 lea		r1,msgDivZero
   2069 0000CB6A C7 AE                       br		ERROR		; divide by zero error
   2070 0000CB6C                        div6
   2071 0000CB6C F8 6E                   	sub		sp,sp,#8
   2072 0000CB6E E0 D6                   	sw		r6,[sp]
   2073 0000CB70 E2 D7                   	sw		r7,2[sp]
   2074 0000CB72 E4 D8                   	sw		r8,4[sp]
   2075 0000CB74 E6 D9                   	sw		r9,6[sp]
                                        
   2077 0000CB76 01 40 00 18                 lw      r8,#16      ; iteration count for 16 bits
   2078 0000CB7A 00 19                   	lw		r9,#0		; q = 0
   2079 0000CB7C 00 16                   	lw		r6,#0		; r = 0
   2080 0000CB7E 20 17                       lw      r7,r2       ; r7 = sign of result
   2081 0000CB80 14 27                       xor     r7,r1
   2082 0000CB82 16 21                   	or	    r1,r1	    ; take absolute value of r1 (a)
   2083 0000CB84 01 AB                   	bpl     div1
   2084 0000CB86 20 31                   	neg     r1
   2085 0000CB88                        div1
   2086 0000CB88 26 22                       or      r2,r2	    ; take absolute value of r2 (b)
   2087 0000CB8A 01 AB                   	bpl	    div2
   2088 0000CB8C 20 32                   	neg     r2
   2089 0000CB8E                        div2
   2090 0000CB8E 81 39                   	shl		r9,#1		; q <<= 1
   2091 0000CB90 81 31                   	shl		r1,#1		; a <<= 1
   2092 0000CB92 61 26                   	adc		r6,r6		; r <<= 1
   2093 0000CB94 6D 22                   	cmp		r2,r6		; b < r ?
   2094 0000CB96 02 A7                   	bgtu	div4
   2095 0000CB98 22 26                   	sub		r6,r2		; r -= b
   2096 0000CB9A 61 39                   	or      r9,#1       ; q |= 1
   2097 0000CB9C                        div4
   2098 0000CB9C FF 68                   	sub		r8,r8,#1
   2099 0000CB9E F7 B9                       bne     div2        ; n--
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 36
noc_boot11.a
   2100 0000CBA0 76 27                   	or      r7,r7
   2101 0000CBA2 01 AB                   	bpl     div5
   2102 0000CBA4 20 31                   	neg     r1
   2103 0000CBA6                        div5
   2104 0000CBA6 60 12                   	mov		r2,r6		; r2 = r
   2105 0000CBA8 90 11                   	mov		r1,r9
   2106 0000CBAA E0 F6                   	lw		r6,[sp]
   2107 0000CBAC E2 F7                   	lw		r7,2[sp]
   2108 0000CBAE E4 F8                   	lw		r8,4[sp]
   2109 0000CBB0 E6 F9                   	lw		r9,6[sp]
   2110 0000CBB2 08 6E                   	add		sp,sp,#8
   2111 0000CBB4 F0 80                   	ret
                                        
                                        ; ===== The PEEK function returns the byte stored at the address
                                        ;	contained in the following expression.
                                        ;
   2116 0000CBB6                        PEEK
   2117 0000CBB6 0A BF                   	call	PARN		; get the memory address
   2118 0000CBB8 10 E1                   	lb		r1,[r1]		; get the addressed byte
   2119 0000CBBA 0E 21                   	zxb		r1			; upper 3 bytes will be zero
   2120 0000CBBC E0 FF                   	lw		lr,[sp]	; and return it
   2121 0000CBBE 06 6E                   	add		sp,sp,#6
   2122 0000CBC0 F0 80                   	ret
                                        
                                        
                                        ; ===== The PEEK function returns the byte stored at the address
                                        ;	contained in the following expression.
                                        ;
   2128 0000CBC2                        PEEKW
   2129 0000CBC2 04 BF                   	call	PARN		; get the memory address
   2130 0000CBC4 5C 31                   	and		r1,#-4		; align to word address
   2131 0000CBC6 10 F1                   	lw		r1,[r1]		; get the addressed word
   2132 0000CBC8 E0 FF                   	lw		lr,[sp]	; and return it
   2133 0000CBCA 06 6E                   	add		sp,sp,#6
   2134 0000CBCC F0 80                   	ret
                                        
                                        
                                        ; user function call
                                        ; call the user function with argument in r1
   2139 0000CBCE                        USRX
   2140 0000CBCE EF 4F 0D AF             	call	PARN		; get expression value
   2141 0000CBD2 E2 D8                   	sw		r8,2[sp]	; save the text pointer
   2142 0000CBD4 02 40 04 F2             	lw      r2,usrJmp   ; get usr vector
   2143 0000CBD8 A1 49 02 AF             	call	[r2]		; jump to the subroutine
   2144 0000CBDC E2 F8                   	lw		r8,2[sp]	; restore the text pointer
   2145 0000CBDE E0 FF                   	lw		lr,[sp]
   2146 0000CBE0 06 6E                   	add		sp,sp,#6
   2147 0000CBE2 F0 80                   	ret
                                        
                                        
                                        ; ===== The RND function returns a random number from 1 to
                                        ;	the value of the following expression in D0.
                                        ;
   2153 0000CBE4                        RND
   2154 0000CBE4 EF 4F 02 AF             	call	PARN		; get the upper limit
   2155 0000CBE8 16 21                   	or		r1,r1		; it must be positive and non-zero
   2156 0000CBEA 0E A8                   	beq		rnd2
   2157 0000CBEC 0A AA                   	bmi		rnd1
   2158 0000CBEE 10 12                   	lw		r2,r1
   2159 0000CBF0 CA 4D 04 D0             	sw		r0,RAND+4	; read command
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 37
noc_boot11.a
   2160 0000CBF4 CA 4D 00 F1             	lw		r1,RAND		; get a number
   2161 0000CBF8 0E AF                   	call	modu4		; RND(n)=MOD(number,n)+1
   2162 0000CBFA 01 61                   	add		r1,r1,#1
   2163 0000CBFC E0 FF                   	lw		lr,[sp]
   2164 0000CBFE 06 6E                   	add		sp,sp,#6
   2165 0000CC00 F0 80                   	ret
   2166 0000CC02                        rnd1
   2167 0000CC02 3B 4D 09 11             	lea		r1,msgRNDBad
   2168 0000CC06 79 AE                   	br		ERROR
   2169 0000CC08                        rnd2
   2170 0000CC08 CA 4D 04 D0             	sw		r0,RAND+4
   2171 0000CC0C CA 4D 00 F1             	lw		r1,RAND
   2172 0000CC10 E0 FF                   	lw		lr,[sp]
   2173 0000CC12 06 6E                   	add		sp,sp,#6
   2174 0000CC14 F0 80                   	ret
                                        
                                        
                                        ; r = a mod b
                                        ; a = r2
                                        ; b = r3
                                        ; r = r1
   2181 0000CC16                        modu4
   2182 0000CC16 FA 6E                   	sub		sp,sp,#6
   2183 0000CC18 E0 D5                   	sw		r5,[sp]
   2184 0000CC1A E2 D6                   	sw		r6,2[sp]
   2185 0000CC1C E4 D7                   	sw		r7,4[sp]
   2186 0000CC1E 01 40 00 17             	lw      r7,#16		; n = 32
   2187 0000CC22 00 15                   	lw		r5,#0		; w = 0
   2188 0000CC24 00 16                   	lw		r6,#0		; r = 0
   2189 0000CC26                        mod2
   2190 0000CC26 81 31                   	shl		r1,#1		; a <<= 1
   2191 0000CC28 61 26                   	adc		r6,r6		; r <<= 1
   2192 0000CC2A 6D 22                   	cmp		r2,r6		; b < r ?
   2193 0000CC2C 01 A7                   	bgtu	mod1
   2194 0000CC2E 22 26                   	sub		r6,r2		; r -= b
   2195 0000CC30                        mod1
   2196 0000CC30 FF 67                   	sub		r7,r7,#1
   2197 0000CC32 F9 B9                       bne     mod2        ; n--
   2198 0000CC34 60 11                   	lw		r1,r6
   2199 0000CC36 E0 F5                   	lw		r5,[sp]
   2200 0000CC38 E2 F6                   	lw		r6,2[sp]
   2201 0000CC3A E4 F7                   	lw		r7,4[sp]
   2202 0000CC3C 06 6E                   	add		sp,sp,#6
   2203 0000CC3E F0 80                   	ret
                                        
                                        
                                        
                                        ; ===== The ABS function returns an absolute value in r2.
                                        ;
   2209 0000CC40                        ABS
   2210 0000CC40 EC 4F 04 AF             	call	PARN		; get the following expr.'s value
   2211 0000CC44 16 21                   	or		r1,r1
   2212 0000CC46 01 AB                   	bpl		abs1
   2213 0000CC48 20 31                   	neg		r1			; if negative, complement it
                                        ;	bmi		QHOW		; if still negative, it was too big
   2215 0000CC4A                        abs1
   2216 0000CC4A E0 FF                   	lw		lr,[sp]
   2217 0000CC4C 06 6E                   	add		sp,sp,#6
   2218 0000CC4E F0 80                   	ret
                                        
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 38
noc_boot11.a
                                        
                                        ; ===== The SGN function returns the sign in r1. +1,0, or -1
                                        ;
   2223 0000CC50                        SGN
   2224 0000CC50 EB 4F 0C AF             	call	PARN		; get the following expr.'s value
   2225 0000CC54 16 21                   	or		r1,r1
   2226 0000CC56 04 A8                   	beq		sgn1
   2227 0000CC58 02 AB                   	bpl		sgn2
   2228 0000CC5A 0F 11                   	lw		r1,#-1
   2229 0000CC5C 01 AE                   	br		sgn1
   2230 0000CC5E                        sgn2
   2231 0000CC5E 01 11                   	lw		r1,#1
   2232 0000CC60                        sgn1
   2233 0000CC60 E0 FF                   	lw		lr,[sp]
   2234 0000CC62 06 6E                   	add		sp,sp,#6
   2235 0000CC64 F0 80                   	ret
                                        
                                        
                                        ; ===== The SIZE function returns the size of free memory in r1.
                                        ;
   2240 0000CC66                        SIZEX
   2241 0000CC66 07 40 02 F1             	lw		r1,VARBGN	; get the number of free bytes...
   2242 0000CC6A 07 40 00 F2             	lw		r2,TXTUNF	; between 'TXTUNF' and 'VARBGN'
   2243 0000CC6E 22 21                   	sub		r1,r2
   2244 0000CC70 E0 FF                   	lw		lr,[sp]
   2245 0000CC72 06 6E                   	add		sp,sp,#6
   2246 0000CC74 F0 80                   	ret					; return the number in r2
                                        
                                        ; ==== Return the node number that the code is running on
                                        ;
   2250 0000CC76                        NODENUM
   2251 0000CC76 E4 31                   	tsr		r1,ID
   2252 0000CC78 E0 FF                   	lw		lr,[sp]
   2253 0000CC7A 06 6E                   	add		sp,sp,#6
   2254 0000CC7C F0 80                   	ret
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** SETVAL *** FIN *** ENDCHK *** ERROR (& friends) ***
                                        ;
                                        ; 'SETVAL' expects a variable, followed by an equal sign and then
                                        ; an expression.  It evaluates the expression and sets the variable
                                        ; to that value.
                                        ;
                                        ; 'FIN' checks the end of a command.  If it ended with ":",
                                        ; execution continues.	If it ended with a CR, it finds the
                                        ; the next line and continues from there.
                                        ;
                                        ; 'ENDCHK' checks if a command is ended with a CR. This is
                                        ; required in certain commands, such as GOTO, RETURN, STOP, etc.
                                        ;
                                        ; 'ERROR' prints the string pointed to by A0. It then prints the
                                        ; line pointed to by CURRNT with a "?" inserted at where the
                                        ; old text pointer (should be on top of the stack) points to.
                                        ; Execution of Tiny BASIC is stopped and a warm start is done.
                                        ; If CURRNT is zero (indicating a direct command), the direct
                                        ; command is not printed. If CURRNT is -1 (indicating
                                        ; 'INPUT' command in progress), the input line is not printed
                                        ; and execution is not terminated but continues at 'INPERR'.
                                        ;
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 39
noc_boot11.a
                                        ; Related to 'ERROR' are the following:
                                        ; 'QWHAT' saves text pointer on stack and gets "What?" message.
                                        ; 'AWHAT' just gets the "What?" message and jumps to 'ERROR'.
                                        ; 'QSORRY' and 'ASORRY' do the same kind of thing.
                                        ; 'QHOW' and 'AHOW' also do this for "How?".
                                        ;
                                        
                                        ; returns
                                        ; r2 = variable's address
                                        ;
   2290 0000CC7E                        SETVAL
   2291 0000CC7E FC 6E                       sub     sp,sp,#4
   2292 0000CC80 E0 DF                       sw      lr,[sp]
   2293 0000CC82 01 11                       lw		r1,#1		; allocate var
   2294 0000CC84 EB 4F 02 AF                 call	TSTV		; variable name?
   2295 0000CC88 03 A9                       bne		sv2
   2296 0000CC8A 3A 4D 02 11                	lea		r1,msgVar
   2297 0000CC8E 35 AE                      	br		ERROR 
   2298 0000CC90                        sv2
   2299 0000CC90 E2 D1                   	sw      r1,2[sp]    ; save the variable's address
   2300 0000CC92 1B 40 0F AF             	call	TSTC		; get past the "=" sign
   2301 0000CC96 3D 12                   	db	'=',SV1-*+1
   2302 0000CC98 DC 4F 04 AF             	call	OREXPR		; evaluate the expression
   2303 0000CC9C E2 F2                   	lw      r2,2[sp]    ; get back the variable's address
   2304 0000CC9E 20 D1                   	sw      r1,[r2]     ; and save value in the variable
   2305 0000CCA0 20 11                   	lw		r1,r2		; return r1 = variable address
   2306 0000CCA2 E0 FF                   	lw      lr,[sp]
   2307 0000CCA4 04 6E                   	add     sp,sp,#4
   2308 0000CCA6 F0 80                   	ret
   2309 0000CCA8                        SV1
   2310 0000CCA8 26 AE                       br	    QWHAT		; if no "=" sign
                                        
                                        
   2313 0000CCAA                        FIN
   2314 0000CCAA FE 6E                   	sub		sp,sp,#2
   2315 0000CCAC E0 DF                   	sw		lr,[sp]
   2316 0000CCAE 1B 40 01 AF             	call	TSTC		; *** FIN ***
   2317 0000CCB2 3A 08                   	db	':',FI1-*+1
   2318 0000CCB4 02 6E                   	add		sp,sp,#2	; if ":", discard return address
   2319 0000CCB6 B5 4F 0D AE             	br		RUNSML		; continue on the same line
   2320 0000CCBA                        FI1
   2321 0000CCBA 1A 40 0B AF             	call	TSTC		; not ":", is it a CR?
   2322 0000CCBE 0D 0A                   	db	CR,FI2-*+1
   2323 0000CCC0 E0 FF                   	lw		lr,[sp]	; else return to the caller
   2324 0000CCC2 02 6E                   	add		sp,sp,#2	; yes, purge return address
   2325 0000CCC4 B4 4F 09 AE             	br		RUNNXL		; execute the next line
   2326 0000CCC8                        FI2
   2327 0000CCC8 E0 FF                   	lw		lr,[sp]	; else return to the caller
   2328 0000CCCA 02 6E                   	add		sp,sp,#2
   2329 0000CCCC F0 80                   	ret
                                        
                                        
                                        ; Check that there is nothing else on the line
                                        ; Registers Affected
                                        ;   r1
                                        ;
   2336 0000CCCE                        ENDCHK
   2337 0000CCCE FE 6E                   	sub		sp,sp,#2
   2338 0000CCD0 E0 DF                   	sw		lr,[sp]
   2339 0000CCD2 22 40 06 AF             	call	IGNBLK
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 40
noc_boot11.a
   2340 0000CCD6 80 E1                   	lb		r1,[r8]
   2341 0000CCD8 FF 4F 13 10             	cmp		r1,#CR		; does it end with a CR?
   2342 0000CCDC 03 A8                   	beq		ec1
   2343 0000CCDE 47 4D 0C 11             	lea		r1,msgExtraChars
   2344 0000CCE2 0B AE                   	jmp		ERROR
   2345 0000CCE4                        ec1
   2346 0000CCE4 E0 FF                   	lw		lr,[sp]
   2347 0000CCE6 02 6E                   	add		sp,sp,#2
   2348 0000CCE8 F0 80                   	ret
                                        
                                        
   2351 0000CCEA                        TOOBIG
   2352 0000CCEA 46 4D 07 11             	lea		r1,msgTooBig
   2353 0000CCEE 05 AE                   	br		ERROR
   2354 0000CCF0                        QSORRY
   2355 0000CCF0 2F 4D 0D 11                 lea     r1,SRYMSG
   2356 0000CCF4 02 AE                   	br	    ERROR
   2357 0000CCF6                        QWHAT
   2358 0000CCF6 2F 4D 05 11             	lea		r1,msgWhat
   2359 0000CCFA                        ERROR
   2360 0000CCFA 25 40 0A AF             	call	PRMESG		; display the error message
   2361 0000CCFE 06 40 00 F1             	lw		r1,CURRNT	; get the current line number
   2362 0000CD02 9F 4F 0C A8             	beq		WSTART		; if zero, do a warm start
   2363 0000CD06 11 10                   	cmp		r1,#-1		; is the line no. pointer = -1?
   2364 0000CD08 C3 4F 0F A8             	beq		INPERR		; if so, redo input
   2365 0000CD0C 80 E5                   	lb		r5,[r8]		; save the char. pointed to
   2366 0000CD0E 80 C0                   	sb		r0,[r8]		; put a zero where the error is
   2367 0000CD10 06 40 00 F1             	lw		r1,CURRNT	; point to start of current line
   2368 0000CD14 16 40 00 AF             	call	PRTLN		; display the line in error up to the 0
   2369 0000CD18 10 16                   	lw      r6,r1       ; save off end pointer
   2370 0000CD1A 80 C5                   	sb		r5,[r8]		; restore the character
   2371 0000CD1C 03 40 0F 11             	lw		r1,#'?'		; display a "?"
   2372 0000CD20 9A 4F 0C AF             	call	GOOUT
   2373 0000CD24 00 12                   	lw      r2,#0       ; stop char = 0
   2374 0000CD26 6F 11                   	sub		r1,r6,#1	; point back to the error char.
   2375 0000CD28 9F AF                   	call	PRTSTG		; display the rest of the line
   2376 0000CD2A 9E 4F 08 AE             	jmp	    WSTART		; and do a warm start
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** GETLN *** FNDLN (& friends) ***
                                        ;
                                        ; 'GETLN' reads in input line into 'BUFFER'. It first prompts with
                                        ; the character in r3 (given by the caller), then it fills the
                                        ; buffer and echos. It ignores LF's but still echos
                                        ; them back. Control-H is used to delete the last character
                                        ; entered (if there is one), and control-X is used to delete the
                                        ; whole line and start over again. CR signals the end of a line,
                                        ; and causes 'GETLN' to return.
                                        ;
                                        ;
   2392 0000CD2E                        GETLN
   2393 0000CD2E FC 6E                   	sub		sp,sp,#4
   2394 0000CD30 E0 DF                   	sw		lr,[sp]
   2395 0000CD32 E2 D5                   	sw		r5,2[sp]
   2396 0000CD34 9A 4F 02 AF             	call	GOOUT		; display the prompt
   2397 0000CD38 01 11                   	lw		r1,#1		; turn on cursor flash
   2398 0000CD3A 03 40 0C C1             	sb		r1,cursFlash
   2399 0000CD3E 02 40 00 11             	lw		r1,#' '		; and a space
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 41
noc_boot11.a
   2400 0000CD42 99 4F 0B AF             	call	GOOUT
   2401 0000CD46 0A 40 0E 18             	lea		r8,BUFFER	; r8 is the buffer pointer
   2402 0000CD4A                        GL1
   2403 0000CD4A 22 40 00 AF             	call	CHKIO		; check keyboard
   2404 0000CD4E FD B8                   	beq		GL1			; wait for a char. to come in
   2405 0000CD50 FF 4F 13 10             	cmp		r1,#CR		; accept a CR
   2406 0000CD54 03 A8                   	beq		GL2
   2407 0000CD56 99 4F 01 AF             	call	GOOUT
   2408 0000CD5A F7 BE                   	br		GL1
   2409 0000CD5C                        GL2:
   2410 0000CD5C 98 4F 0E AF             	call	GOOUT		; spit out CR
   2411 0000CD60 00 11                   	lw		r1,#0		; turn off cursor flash
   2412 0000CD62 03 40 0C C1             	sb		r1,cursFlash
   2413 0000CD66 03 40 03 E3             	lb		r3,cursy
   2414 0000CD6A 03 40 02 E5             	lb		r5,cursx
   2415 0000CD6E 0A 11                   	lw		r1,#LF		; echo a LF for the CR
   2416 0000CD70 98 4F 04 AF             	call	GOOUT
   2417 0000CD74 81 33                   	shl		r3,#1
   2418 0000CD76 D5 4D 38 F3             	lw		r3,lineTbl[r3]
   2419 0000CD7A 00 12                   	lw		r2,#0
   2420 0000CD7C 00 14                   	lw		r4,#0
   2421 0000CD7E                        GL3:
   2422 0000CD7E 00 42 30 E1             	lb		r1,TXTSCR[r3]
   2423 0000CD82 6D 40 06 AF             	call	ScreenToAscii
   2424 0000CD86 0A 40 4E C1             	sb		r1,BUFFER[r4]
   2425 0000CD8A 02 63                   	add		r3,r3,#2
   2426 0000CD8C 01 64                   	add		r4,r4,#1
   2427 0000CD8E FC 4F 4C 10             	cmp		r4,#52
   2428 0000CD92 F5 B0                   	blt		GL3
   2429 0000CD94 00 40 0D 11             	lw		r1,#CR
   2430 0000CD98 0A 40 5E C1             	sb		r1,BUFFER[r5]
   2431 0000CD9C 0A 40 5F C0             	sb		r0,BUFFER+1[r5]
   2432 0000CDA0 E0 FF                   	lw		lr,[sp]
   2433 0000CDA2 E2 F5                   	lw		r5,2[sp]
   2434 0000CDA4 04 6E                   	add		sp,sp,#4
   2435 0000CDA6 F0 80                   	ret
                                        
                                        
                                        ; 'FNDLN' finds a line with a given line no. (in r1) in the
                                        ; text save area.  r9 is used as the text pointer. If the line
                                        ; is found, r9 will point to the beginning of that line
                                        ; (i.e. the high byte of the line no.), and flags are Z.
                                        ; If that line is not there and a line with a higher line no.
                                        ; is found, r9 points there and flags are NC & NZ. If we reached
                                        ; the end of the text save area and cannot find the line, flags
                                        ; are C & NZ.
                                        ; Z=1 if line found
                                        ; N=1 if end of text save area
                                        ; Z=0 & N=0 if higher line found
                                        ;
                                        ; 'FNDLN' will initialize r9 to the beginning of the text save
                                        ; area to start the search. Some other entries of this routine
                                        ; will not initialize r9 and do the search.
                                        ; 'FNDLNP' will start with r9 and search for the line no.
                                        ; 'FNDNXT' will bump r9 by 2, find a CR and then start search.
                                        ; 'FNDSKP' uses r9 to find a CR, and then starts the search.
                                        ; return Z=1 if line is found, r9 = pointer to line
                                        ;
                                        ; Parameters
                                        ;	r1 = line number to find
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 42
noc_boot11.a
                                        ;
   2461 0000CDA8                        FNDLN
   2462 0000CDA8 00 40 11 10             	cmp		r1,#0xFFFF	; line no. must be < 65535
   2463 0000CDAC 03 A6                   	bleu	fl1
   2464 0000CDAE 38 4D 0C 11             	lea		r1,msgLineRange
   2465 0000CDB2 A3 BE                   	br		ERROR
   2466 0000CDB4                        fl1
   2467 0000CDB4 09 4C 00 F9             	lw		r9,TXTBGN	; init. the text save pointer
                                        
   2469 0000CDB8                        FNDLNP
   2470 0000CDB8 07 40 00 FA             	lw		r10,TXTUNF	; check if we passed the end
   2471 0000CDBC FF 6A                   	sub		r10,r10,#1
   2472 0000CDBE AD 29                   	cmp		r9,r10
   2473 0000CDC0 0F A7                   	bgtu	FNDRET		; if so, return with Z=0 & C=1
   2474 0000CDC2 90 E3                   	lb		r3,[r9]		; get low order byte of line number
   2475 0000CDC4 0E 23                   	zxb		r3
   2476 0000CDC6 91 E2                   	lb		r2,1[r9]	; get high order byte
   2477 0000CDC8 0E 22                   	zxb		r2
   2478 0000CDCA 81 32                   	shl		r2,#1
   2479 0000CDCC 81 32                   	shl		r2,#1
   2480 0000CDCE 81 32                   	shl		r2,#1
   2481 0000CDD0 81 32                   	shl		r2,#1
   2482 0000CDD2 81 32                   	shl		r2,#1
   2483 0000CDD4 81 32                   	shl		r2,#1
   2484 0000CDD6 81 32                   	shl		r2,#1
   2485 0000CDD8 81 32                   	shl		r2,#1
   2486 0000CDDA 36 22                   	or		r2,r3		; build whole line number
   2487 0000CDDC 2D 21                   	cmp		r1,r2		; is this the line we want?
   2488 0000CDDE 01 A7                   	bgtu	FNDNXT		; no, not there yet
   2489 0000CDE0                        FNDRET
   2490 0000CDE0 F0 80                   	ret			; return the cond. codes
                                        
   2492 0000CDE2                        FNDNXT
   2493 0000CDE2 02 69                   	add		r9,r9,#2	; find the next line
                                        
   2495 0000CDE4                        FNDSKP
   2496 0000CDE4 90 E2                   	lb		r2,[r9]
   2497 0000CDE6 01 69                   	add		r9,r9,#1
   2498 0000CDE8 FF 4F 23 10             	cmp		r2,#CR		; try to find a CR
   2499 0000CDEC FB B9                   	bne		FNDSKP		; keep looking
   2500 0000CDEE E4 BE                   	br		FNDLNP		; check if end of text
                                        
                                        
                                        ;******************************************************************
                                        ; 'MVUP' moves a block up from where r1 points to where r2 points
                                        ; until r1=r3
                                        ;
   2507 0000CDF0                        MVUP1
   2508 0000CDF0 10 E4                   	lb		r4,[r1]
   2509 0000CDF2 20 C4                   	sb		r4,[r2]
   2510 0000CDF4 01 61                   	add		r1,r1,#1
   2511 0000CDF6 01 62                   	add		r2,r2,#1
   2512 0000CDF8                        MVUP
   2513 0000CDF8 3D 21                   	cmp		r1,r3
   2514 0000CDFA FA B9                   	bne		MVUP1
   2515 0000CDFC                        MVRET
   2516 0000CDFC F0 80                   	ret
                                        
                                        
                                        ; 'MVDOWN' moves a block down from where r1 points to where r2
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 43
noc_boot11.a
                                        ; points until r1=r3
                                        ;
   2522 0000CDFE                        MVDOWN1
   2523 0000CDFE FF 61                   	sub		r1,r1,#1
   2524 0000CE00 FF 62                   	sub		r2,r2,#1
   2525 0000CE02 10 E4                   	lb		r4,[r1]
   2526 0000CE04 20 C4                   	sb		r4,[r2]
   2527 0000CE06                        MVDOWN
   2528 0000CE06 3D 21                   	cmp		r1,r3
   2529 0000CE08 FA B9                   	bne		MVDOWN1
   2530 0000CE0A F0 80                   	ret
                                        
                                        
                                        ; 'POPA' restores the 'FOR' loop variable save area from the stack
                                        ;
                                        ; 'PUSHA' stacks for 'FOR' loop variable save area onto the stack
                                        ;
                                        ; Note: a single zero word is stored on the stack in the
                                        ; case that no FOR loops need to be saved. This needs to be
                                        ; done because PUSHA / POPA is called all the time.
                                        
   2541 0000CE0C                        POPA
   2542 0000CE0C E0 F1                   	lw		r1,[sp]		; restore LOPVAR, but zero means no more
   2543 0000CE0E 06 40 06 D1             	sw		r1,LOPVAR
   2544 0000CE12 0E A8                   	beq		PP1
   2545 0000CE14 E8 F1                   	lw		r1,8[sp]	; if not zero, restore the rest
   2546 0000CE16 06 40 0E D1             	sw		r1,LOPPT
   2547 0000CE1A E6 F1                   	lw		r1,6[sp]
   2548 0000CE1C 06 40 0C D1             	sw		r1,LOPLN
   2549 0000CE20 E4 F1                   	lw		r1,4[sp]
   2550 0000CE22 06 40 0A D1             	sw		r1,LOPLMT
   2551 0000CE26 E2 F1                   	lw		r1,2[sp]
   2552 0000CE28 06 40 08 D1             	sw		r1,LOPINC
   2553 0000CE2C 0A 6E                   	add		sp,sp,#10
   2554 0000CE2E F0 80                   	ret
   2555 0000CE30                        PP1
   2556 0000CE30 02 6E                   	add		sp,sp,#2
   2557 0000CE32 F0 80                   	ret
                                        
                                        
   2560 0000CE34                        PUSHA
   2561 0000CE34 07 40 0A F1             	lw		r1,STKBOT	; Are we running out of stack room?
   2562 0000CE38 0A 61                   	add		r1,r1,#10	; we might need this many bytes
   2563 0000CE3A 1D 2E                   	cmp		sp,r1
   2564 0000CE3C 59 B4                   	bltu	QSORRY		; out of stack space
   2565 0000CE3E 06 40 06 F1             	lw		r1,LOPVAR	; save loop variables
   2566 0000CE42 0F A8                   	beq		PU1			; if LOPVAR is zero, that's all
   2567 0000CE44 F6 6E                   	sub		sp,sp,#10
   2568 0000CE46 E0 D1                   	sw		r1,[sp]
   2569 0000CE48 06 40 0E F1             	lw		r1,LOPPT
   2570 0000CE4C E8 D1                   	sw		r1,8[sp]	; else save all the others
   2571 0000CE4E 06 40 0C F1             	lw		r1,LOPLN
   2572 0000CE52 E6 D1                   	sw		r1,6[sp]
   2573 0000CE54 06 40 0A F1             	lw		r1,LOPLMT
   2574 0000CE58 E4 D1                   	sw		r1,4[sp]
   2575 0000CE5A 06 40 08 F1             	lw		r1,LOPINC
   2576 0000CE5E E2 D1                   	sw		r1,2[sp]
   2577 0000CE60 F0 80                   	ret
   2578 0000CE62                        PU1
   2579 0000CE62 FE 6E                   	sub		sp,sp,#2
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 44
noc_boot11.a
   2580 0000CE64 E0 D1                   	sw		r1,[sp]
   2581 0000CE66 F0 80                   	ret
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** PRTSTG *** QTSTG *** PRTNUM *** PRTLN ***
                                        ;
                                        ; 'PRTSTG' prints a string pointed to by r3. It stops printing
                                        ; and returns to the caller when either a CR is printed or when
                                        ; the next byte is the same as what was passed in r4 by the
                                        ; caller.
                                        ;
                                        ; 'QTSTG' looks for an underline (back-arrow on some systems),
                                        ; single-quote, or double-quote.  If none of these are found, returns
                                        ; to the caller.  If underline, outputs a CR without a LF.  If single
                                        ; or double quote, prints the quoted string and demands a matching
                                        ; end quote.  After the printing, the next 2 bytes of the caller are
                                        ; skipped over (usually a short brnch instruction).
                                        ;
                                        ; 'PRTNUM' prints the 32 bit number in r3, leading blanks are added if
                                        ; needed to pad the number of spaces to the number in r4.
                                        ; However, if the number of digits is larger than the no. in
                                        ; r4, all digits are printed anyway. Negative sign is also
                                        ; printed and counted in, positive sign is not.
                                        ;
                                        ; 'PRTLN' prints the saved text line pointed to by r3
                                        ; with line no. and all.
                                        ;
                                        
                                        ; r1 = pointer to string
                                        ; r2 = stop character
                                        ; return r1 = pointer to end of line + 1
                                        
   2614 0000CE68                        PRTSTG
   2615 0000CE68 F8 6E                       sub     sp,sp,#8
   2616 0000CE6A E0 DF                       sw      lr,[sp]
   2617 0000CE6C E2 D5                       sw      r5,2[sp]
   2618 0000CE6E E4 D6                       sw      r6,4[sp]
   2619 0000CE70 E6 D7                       sw      r7,6[sp]
   2620 0000CE72 10 15                       lw      r5,r1       ; r5 = pointer
   2621 0000CE74 20 16                       lw      r6,r2       ; r6 = stop char
   2622 0000CE76                        PS1
   2623 0000CE76 50 E7                       lb      r7,[r5]     ; get a text character
   2624 0000CE78 01 65                       add     r5,r5,#1
   2625 0000CE7A 6D 27                   	cmp     r7,r6		; same as stop character?
   2626 0000CE7C 09 A8                   	beq	    PRTRET		; if so, return
   2627 0000CE7E 70 11                   	lw      r1,r7
   2628 0000CE80 8F 4F 0C AF             	call	GOOUT		; display the char.
   2629 0000CE84 FF 4F 73 10             	cmp     r7,#CR      ; is it a C.R.?
   2630 0000CE88 F6 B9                   	bne	    PS1		    ; no, go back for more
   2631 0000CE8A 0A 11                   	lw      r1,#LF      ; yes, add a L.F.
   2632 0000CE8C 8F 4F 06 AF             	call	GOOUT
   2633 0000CE90                        PRTRET
   2634 0000CE90 70 12                       lw      r2,r7       ; return r2 = stop char
   2635 0000CE92 50 11                   	lw		r1,r5		; return r1 = line pointer
   2636 0000CE94 E2 F5                       lw      r5,2[sp]
   2637 0000CE96 E4 F6                       lw      r6,4[sp]
   2638 0000CE98 E6 F7                       lw      r7,6[sp]
   2639 0000CE9A E0 FF                       lw      lr,[sp]
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 45
noc_boot11.a
   2640 0000CE9C 08 6E                       add     sp,sp,#8
   2641 0000CE9E F0 80                       ret			        ; then return
                                        
                                        
   2644 0000CEA0                        QTSTG
   2645 0000CEA0 FE 6E                   	sub		sp,sp,#2
   2646 0000CEA2 E0 DF                   	sw		lr,[sp]
   2647 0000CEA4 B7 AF                   	call	TSTC		; *** QTSTG ***
   2648 0000CEA6 22 18                   	db	'"',QT3-*+1
   2649 0000CEA8 02 40 02 12             	lw		r2,#'"'		; it is a "
   2650 0000CEAC                        QT1
   2651 0000CEAC 80 11                   	lw		r1,r8
   2652 0000CEAE DC BF                   	call	PRTSTG		; print until another
   2653 0000CEB0 10 18                   	lw		r8,r1
   2654 0000CEB2 FF 4F 26 10             	cmp		r2,#LF		; was last one a CR?
   2655 0000CEB6 0E A9                   	bne		QT2
   2656 0000CEB8 02 6E                   	add		sp,sp,#2
   2657 0000CEBA A4 4F 0E AE             	br		RUNNXL		; if so, run next line
   2658 0000CEBE                        QT3
   2659 0000CEBE AA AF                   	call	TSTC		; is it a single quote?
   2660 0000CEC0 27 08                   	db	"'",QT4-*+1
   2661 0000CEC2 02 40 07 12             	lw		r2,#''''	; if so, do same as above
   2662 0000CEC6 F2 BE                   	br		QT1
   2663 0000CEC8                        QT4
   2664 0000CEC8 A5 AF                   	call	TSTC		; is it an underline?
   2665 0000CECA 5F 10                   	db	'_',QT5-*+1
   2666 0000CECC 00 40 0D 11             	lw		r1,#CR		; if so, output a CR without LF
   2667 0000CED0 8D 4F 04 AF             	call	GOOUT
   2668 0000CED4                        QT2
   2669 0000CED4 E0 FF                   	lw		lr,[sp]
   2670 0000CED6 02 6E                   	add		sp,sp,#2
   2671 0000CED8 F2 80                   	jmp		2[lr]		; skip over 2 bytes when returning
   2672 0000CEDA                        QT5						; not " ' or _
   2673 0000CEDA E0 FF                   	lw		lr,[sp]
   2674 0000CEDC 02 6E                   	add		sp,sp,#2
   2675 0000CEDE F0 80                   	ret
                                        
                                        
                                        ; Output a CR LF sequence
                                        ;
   2680 0000CEE0                        prCRLF
   2681 0000CEE0 FE 6E                   	sub		sp,sp,#2
   2682 0000CEE2 E0 DF                   	sw		lr,[sp]
   2683 0000CEE4 00 40 0D 11             	lw		r1,#CR
   2684 0000CEE8 8C 4F 08 AF             	call	GOOUT
   2685 0000CEEC 0A 11                   	lw		r1,#LF
   2686 0000CEEE 8C 4F 05 AF             	call	GOOUT
   2687 0000CEF2 E0 FF                   	lw		lr,[sp]
   2688 0000CEF4 02 6E                   	add		sp,sp,#2
   2689 0000CEF6 F0 80                   	ret
                                        
                                        
                                        ; r1 = number to print
                                        ; r2 = number of digits
                                        ; Register Usage
                                        ;	r5 = number of padding spaces
   2696 0000CEF8                        PRTNUM
   2697 0000CEF8 F8 6E                   	sub		sp,sp,#8
   2698 0000CEFA E0 DF                   	sw		lr,[sp]
   2699 0000CEFC E2 D5                   	sw		r5,2[sp]
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 46
noc_boot11.a
   2700 0000CEFE E4 D6                   	sw		r6,4[sp]
   2701 0000CF00 E6 D7                   	sw		r7,6[sp]
                                        
   2703 0000CF02 07 40 0C 17             	lea		r7,NUMWKA	; r7 = pointer to numeric work area
   2704 0000CF06 10 16                   	lw		r6,r1		; save number for later
   2705 0000CF08 20 15                   	lw		r5,r2		; r5 = min number of chars
   2706 0000CF0A 16 21                   	
   2707 0000CF0C 02 AB                   	bpl		PN1			; if not
   2708 0000CF0E 20 31                   	neg		r1			; else make it positive
   2709 0000CF10 FF 65                   	sub		r5,r5,#1	; one less for width count
   2710 0000CF12                        PN1
   2711 0000CF12 0A 12                   	lw		r2,#10		; divide by 10
   2712 0000CF14 E2 4F 05 AF             	call	DIV32
   2713 0000CF18 30 62                   	add		r2,r2,#'0'	; convert remainder to ascii
   2714 0000CF1A 70 C2                   	sb		r2,[r7]		; and store in buffer
   2715 0000CF1C 01 67                   	add		r7,r7,#1
   2716 0000CF1E FF 65                   	sub		r5,r5,#1	; decrement width
   2717 0000CF20 10 10                   	cmp		r1,#0
   2718 0000CF22 F7 B9                   	bne		PN1
   2719 0000CF24                        PN6
   2720 0000CF24 56 25                   	or		r5,r5		; test pad count
   2721 0000CF26 06 A2                   	ble		PN4			; skip padding if not needed
   2722 0000CF28                        PN3
   2723 0000CF28 02 40 00 11             	lw		r1,#' '		; display the required leading spaces
   2724 0000CF2C 8A 4F 06 AF             	call	GOOUT
   2725 0000CF30 FF 65                   	sub		r5,r5,#1
   2726 0000CF32 FA B9                   	bne		PN3
   2727 0000CF34                        PN4
   2728 0000CF34 66 26                   	or		r6,r6		; is number negative?
   2729 0000CF36 04 AB                   	bpl		PN5
   2730 0000CF38 02 40 0D 11             	lw		r1,#'-'		; if so, display the sign
   2731 0000CF3C 89 4F 0E AF             	call	GOOUT
   2732 0000CF40                        PN5
   2733 0000CF40 FF 67                   	sub		r7,r7,#1
   2734 0000CF42 70 E1                   	lb		r1,[r7]		; now unstack the digits and display
   2735 0000CF44 89 4F 0A AF             	call	GOOUT
   2736 0000CF48 F8 4F 74 10             	cmp		r7,#NUMWKA
   2737 0000CF4C F9 B7                   	bgtu	PN5
   2738 0000CF4E                        PNRET
   2739 0000CF4E E0 FF                   	lw		lr,[sp]
   2740 0000CF50 E2 F5                   	lw		r5,2[sp]
   2741 0000CF52 E4 F6                   	lw		r6,4[sp]
   2742 0000CF54 E6 F7                   	lw		r7,6[sp]
   2743 0000CF56 08 6E                   	add		sp,sp,#8
   2744 0000CF58 F0 80                   	ret
                                        
                                        
                                        ; r1 = number to print
                                        ; r2 = number of digits
   2749 0000CF5A                        PRTHEXNUM
   2750 0000CF5A F6 6E                   	sub		sp,sp,#10
   2751 0000CF5C E0 DF                   	sw		lr,[sp]
   2752 0000CF5E E2 D5                   	sw		r5,2[sp]
   2753 0000CF60 E4 D6                   	sw		r6,4[sp]
   2754 0000CF62 E6 D7                   	sw		r7,6[sp]
   2755 0000CF64 E8 D8                   	sw		r8,8[sp]
                                        
   2757 0000CF66 07 40 0C 17             	lea		r7,NUMWKA	; r7 = pointer to numeric work area
   2758 0000CF6A 10 16                   	lw		r6,r1		; save number for later
   2759 0000CF6C 0A 15                   	lw		r5,#10		; r5 = min number of chars
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 47
noc_boot11.a
   2760 0000CF6E 10 14                   	lw		r4,r1
   2761 0000CF70 46 24                   	
   2762 0000CF72 03 AB                   	bpl		PHN1		; if not
   2763 0000CF74 20 34                   	neg		r4			; else make it positive
   2764 0000CF76 FF 65                   	sub		r5,r5,#1	; one less for width count
   2765 0000CF78 0A 18                   	lw		r8,#10		; maximum of 10 digits
   2766 0000CF7A                        PHN1
   2767 0000CF7A 40 11                   	lw		r1,r4
   2768 0000CF7C 00 40 5F 31             	and		r1,#15
   2769 0000CF80 FF 4F 16 10             	cmp		r1,#10
   2770 0000CF84 02 A0                   	blt		PHN7
   2771 0000CF86 37 61                   	add		r1,r1,#'A'-10
   2772 0000CF88 01 AE                   	br		PHN8
   2773 0000CF8A                        PHN7
   2774 0000CF8A 30 61                   	add		r1,r1,#'0'		; convert remainder to ascii
   2775 0000CF8C                        PHN8
   2776 0000CF8C 70 C1                   	sb		r1,[r7]		; and store in buffer
   2777 0000CF8E 01 67                   	add		r7,r7,#1
   2778 0000CF90 FF 65                   	sub		r5,r5,#1	; decrement width
   2779 0000CF92 A1 34                   	shr		r4,#1
   2780 0000CF94 A1 34                   	shr		r4,#1
   2781 0000CF96 A1 34                   	shr		r4,#1
   2782 0000CF98 A1 34                   	shr		r4,#1
   2783 0000CF9A 02 A8                   	beq		PHN6			; is it zero yet ?
   2784 0000CF9C FF 68                   	sub		r8,r8,#1	; safety
   2785 0000CF9E ED B9                   	bne		PHN1
   2786 0000CFA0                        PHN6
   2787 0000CFA0 56 25                   	or		r5,r5		; test pad count
   2788 0000CFA2 06 A2                   	ble		PHN4			; skip padding if not needed
   2789 0000CFA4                        PHN3
   2790 0000CFA4 02 40 00 11             	lw		r1,#' '		; display the required leading spaces
   2791 0000CFA8 86 4F 08 AF             	call	GOOUT
   2792 0000CFAC FF 65                   	sub		r5,r5,#1
   2793 0000CFAE FA B9                   	bne		PHN3
   2794 0000CFB0                        PHN4
   2795 0000CFB0 66 26                   	or		r6,r6		; is number negative?
   2796 0000CFB2 04 AB                   	bpl		PHN5
   2797 0000CFB4 02 40 0D 11             	lw		r1,#'-'		; if so, display the sign
   2798 0000CFB8 86 4F 00 AF             	call	GOOUT
   2799 0000CFBC                        PHN5
   2800 0000CFBC FF 67                   	sub		r7,r7,#1
   2801 0000CFBE 70 E1                   	lb		r1,[r7]		; now unstack the digits and display
   2802 0000CFC0 85 4F 0C AF             	call	GOOUT
   2803 0000CFC4 F8 4F 74 10             	cmp		r7,#NUMWKA
   2804 0000CFC8 F9 B7                   	bgtu	PHN5
   2805 0000CFCA                        PHNRET
   2806 0000CFCA E0 FF                   	lw		lr,[sp]
   2807 0000CFCC E2 F5                   	lw		r5,2[sp]
   2808 0000CFCE E4 F6                   	lw		r6,4[sp]
   2809 0000CFD0 E6 F7                   	lw		r7,6[sp]
   2810 0000CFD2 E8 F8                   	lw		r8,8[sp]
   2811 0000CFD4 0A 6E                   	add		sp,sp,#10
   2812 0000CFD6 F0 80                   	ret
                                        
                                        
                                        ; r1 = pointer to line
                                        ; returns r1 = pointer to end of line + 1
   2817 0000CFD8                        PRTLN
   2818 0000CFD8 FC 6E                       sub     sp,sp,#4
   2819 0000CFDA E0 DF                       sw      lr,[sp]
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 48
noc_boot11.a
   2820 0000CFDC E2 D5                       sw      r5,2[sp]
   2821 0000CFDE 12 15                       add     r5,r1,#2
   2822 0000CFE0 5E E1                       lb		r1,-2[r5]	; get the binary line number
   2823 0000CFE2 0E 21                       zxb		r1
   2824 0000CFE4 5F E2                       lb		r2,-1[r5]
   2825 0000CFE6 0E 22                       zxb		r2
   2826 0000CFE8 81 32                       shl		r2,#1
   2827 0000CFEA 81 32                       shl		r2,#1
   2828 0000CFEC 81 32                       shl		r2,#1
   2829 0000CFEE 81 32                       shl		r2,#1
   2830 0000CFF0 81 32                       shl		r2,#1
   2831 0000CFF2 81 32                       shl		r2,#1
   2832 0000CFF4 81 32                       shl		r2,#1
   2833 0000CFF6 81 32                       shl		r2,#1
   2834 0000CFF8 26 21                       or		r1,r2
   2835 0000CFFA 00 12                       lw      r2,#0       ; display a 0 or more digit line no.
   2836 0000CFFC 7D BF                   	call	PRTNUM
   2837 0000CFFE 02 40 00 11             	lw      r1,#' '     ; followed by a blank
   2838 0000D002 83 4F 0B AF             	call	GOOUT
   2839 0000D006 00 12                   	lw      r2,#0       ; stop char. is a zero
   2840 0000D008 50 11                   	lw      r1,r5
   2841 0000D00A 2E BF                   	call    PRTSTG		; display the rest of the line
   2842 0000D00C E2 F5                   	lw      r5,2[sp]
   2843 0000D00E E0 FF                   	lw      lr,[sp]
   2844 0000D010 04 6E                   	add     sp,sp,#4
   2845 0000D012 F0 80                   	ret
                                        
                                        
                                        ; ===== Test text byte following the call to this subroutine. If it
                                        ;	equals the byte pointed to by r8, return to the code following
                                        ;	the call. If they are not equal, brnch to the point
                                        ;	indicated by the offset byte following the text byte.
                                        ;
                                        ; Registers Affected
                                        ;   r8
                                        ; Returns
                                        ;	r8 = updated text pointer
                                        ;
   2858 0000D014                        TSTC
   2859 0000D014 FA 6E                   	sub		sp,sp,#6
   2860 0000D016 E0 DF                   	sw		lr,[sp]
   2861 0000D018 E2 D1                   	sw		r1,2[sp]
   2862 0000D01A E4 D3                   	sw		r3,4[sp]
   2863 0000D01C 82 AF                   	call	IGNBLK		; ignore leading blanks
   2864 0000D01E E0 FF                   	lw		lr,[sp]	; get the return address
   2865 0000D020 F0 E3                   	lb		r3,[lr]	; get the byte to compare
   2866 0000D022 80 E1                   	lb		r1,[r8]
   2867 0000D024 1D 23                   	cmp		r3,r1		; is it = to what r8 points to?
   2868 0000D026 06 A8                   	beq		TSTC1			; if so
                                        						; If not, add the second
   2870 0000D028 F1 E3                   	lb		r3,1[lr]	; byte following the call to
   2871 0000D02A 30 2F                   	add		lr,r3		; the return address.
   2872 0000D02C E2 F1                   	lw		r1,2[sp]
   2873 0000D02E E4 F3                   	lw		r3,4[sp]
   2874 0000D030 06 6E                   	add		sp,sp,#6
   2875 0000D032 F0 80                   	ret					; jump to the routine
   2876 0000D034                        TSTC1
   2877 0000D034 01 68                   	add		r8,r8,#1	; if equal, bump text pointer
   2878 0000D036 E2 F1                   	lw		r1,2[sp]
   2879 0000D038 E4 F3                   	lw		r3,4[sp]
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 49
noc_boot11.a
   2880 0000D03A 06 6E                   	add     sp,sp,#6
   2881 0000D03C F2 80                   	jmp		2[lr]		; Skip the 2 bytes following
                                        						; the call and continue.
                                        
                                        
                                        ; ===== See if the text pointed to by r8 is a number. If so,
                                        ;	return the number in r2 and the number of digits in r3,
                                        ;	else return zero in r2 and r3.
                                        ; Registers Affected
                                        ;   r1,r2,r3,r4
                                        ; Returns
                                        ; 	r1 = number
                                        ;	r2 = number high order
                                        ;	r3 = number of digits in number
                                        ;	r8 = updated text pointer
                                        ;
   2896 0000D03E                        TSTNUM
   2897 0000D03E FA 6E                   	sub		sp,sp,#6
   2898 0000D040 E0 DF                   	sw		lr,[sp]
   2899 0000D042 E2 D5                   	sw		r5,2[sp]
   2900 0000D044 E4 D6                   	sw		r6,4[sp]
                                        	;call	GetHexNumber
                                        	;cmp		r3,#0
                                        	;bgtu	TSNMRET
   2904 0000D046 6D AF                   	call	IGNBLK		; skip over blanks
   2905 0000D048 00 11                   	lw		r1,#0		; initialize return parameters
   2906 0000D04A 00 12                   	lw		r2,#0
   2907 0000D04C 00 13                   	lw		r3,#0
   2908 0000D04E                        TN1
   2909 0000D04E 80 E5                   	lb		r5,[r8]
   2910 0000D050 FD 4F 50 10             	cmp		r5,#'0'		; is it less than zero?
   2911 0000D054 1A A4                   	bltu	TSNMRET 	; if so, that's all
   2912 0000D056 FC 4F 57 10             	cmp		r5,#'9'		; is it greater than nine?
   2913 0000D05A 17 A7                   	bgtu	TSNMRET 	; if so, return
   2914 0000D05C 33 4F 24 10             	cmp		r2,#$CCC
   2915 0000D060 04 A6                   	bleu	TN2
                                        ;	cmp		r1,#214748364	; see if there's room for new digit
   2917 0000D062 32 4D 01 11             	lea		r1,msgNumTooBig
   2918 0000D066 E4 4F 08 AE             	br		ERROR		; if not, we've overflowd
   2919 0000D06A                        TN2
   2920 0000D06A 10 14                   	lw		r4,r1		; quickly multiply result by 10
   2921 0000D06C 20 16                   	lw		r6,r2
   2922 0000D06E 81 31                   	shl		r1,#1		; * 2
   2923 0000D070 21 22                   	adc		r2,r2
   2924 0000D072 81 31                   	shl		r1,#1		; * 4
   2925 0000D074 21 22                   	adc		r2,r2
   2926 0000D076 40 21                   	add		r1,r4		; * 5
   2927 0000D078 61 22                   	adc		r2,r6
   2928 0000D07A 81 31                   	shl		r1,#1		; * 10
   2929 0000D07C 21 22                   	adc		r2,r2
   2930 0000D07E 01 68                   	add		r8,r8,#1	; adjust text pointer
   2931 0000D080 00 40 5F 35             	and		r5,#0xF		; add in the new digit
   2932 0000D084 50 21                   	add		r1,r5
   2933 0000D086 01 63                   	add		r3,r3,#1	; increment the no. of digits
   2934 0000D088 E2 BE                   	br		TN1
   2935 0000D08A                        TSNMRET
   2936 0000D08A E0 FF                   	lw		lr,[sp]
   2937 0000D08C E2 F5                   	lw		r5,2[sp]
   2938 0000D08E E4 F6                   	lw		r6,4[sp]
   2939 0000D090 06 6E                   	add		sp,sp,#6
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 50
noc_boot11.a
   2940 0000D092 F0 80                   	ret
                                        
   2942 0000D094                        ConvHexDigit:
   2943 0000D094 FD 4F 10 10             	cmp		r1,#'0'
   2944 0000D098 17 A0                   	blt		ConvHexDigit1
   2945 0000D09A FC 4F 17 10             	cmp		r1,#'9'
   2946 0000D09E 02 A3                   	bgt		ConvHexDigit3
   2947 0000D0A0 D0 61                   	sub		r1,r1,#'0'
   2948 0000D0A2 F0 80                   	ret
   2949 0000D0A4                        ConvHexDigit3:
   2950 0000D0A4 F9 4F 1F 10             	cmp		r1,#'a'
   2951 0000D0A8 0F A0                   	blt		ConvHexDigit1
   2952 0000D0AA F9 4F 1A 10             	cmp		r1,#'f'
   2953 0000D0AE 03 A3                   	bgt		ConvHexDigit2
   2954 0000D0B0 9F 61                   	sub		r1,r1,#'a'
   2955 0000D0B2 0A 61                   	add		r1,r1,#10
   2956 0000D0B4 F0 80                   	ret
   2957 0000D0B6                        ConvHexDigit2:
   2958 0000D0B6 FB 4F 1F 10             	cmp		r1,#'A'
   2959 0000D0BA 06 A0                   	blt		ConvHexDigit1
   2960 0000D0BC FB 4F 1A 10             	cmp		r1,#'F'
   2961 0000D0C0 03 A3                   	bgt		ConvHexDigit1
   2962 0000D0C2 BF 61                   	sub		r1,r1,#'A'
   2963 0000D0C4 0A 61                   	add		r1,r1,#10
   2964 0000D0C6 F0 80                   	ret
   2965 0000D0C8                        ConvHexDigit1:
   2966 0000D0C8 0F 11                   	lw		r1,#-1
   2967 0000D0CA F0 80                   	ret
                                        
   2969 0000D0CC                        GetHexNumber:
   2970 0000D0CC FC 6E                   	sub		sp,sp,#4
   2971 0000D0CE E0 DF                   	sw		lr,[sp]
   2972 0000D0D0 28 AF                   	call	IGNBLK		; skip over blanks
   2973 0000D0D2 00 11                   	lw		r1,#0		; initialize return parameters
   2974 0000D0D4 00 12                   	lw		r2,#0
   2975 0000D0D6 00 13                   	lw		r3,#0
   2976 0000D0D8 80 19                   	mov		r9,r8
   2977 0000D0DA 80 E4                   	lb		r4,[r8]
   2978 0000D0DC FD 4F 4C 10             	cmp		r4,#'$'
   2979 0000D0E0 18 A9                   	bne		GetHexNumberRet
   2980 0000D0E2 01 68                   	add		r8,r8,#1
   2981 0000D0E4                        GetHexNumber1
   2982 0000D0E4 E2 D1                   	sw		r1,2[sp]
   2983 0000D0E6 80 E1                   	lb		r1,[r8]
   2984 0000D0E8 D5 BF                   	call	ConvHexDigit
   2985 0000D0EA 12 AA                   	bmi		GetHexNumber4
   2986 0000D0EC 10 14                   	mov		r4,r1
   2987 0000D0EE E2 F1                   	lw		r1,2[sp]
   2988 0000D0F0 00 4F 21 10             	cmp		r2,#$FFF
   2989 0000D0F4 12 A7                   	bgtu	GetHexNumberErr
   2990 0000D0F6                        GetHexNumber2
   2991 0000D0F6 81 31                   	shl		r1,#1
   2992 0000D0F8 21 22                   	adc		r2,r2
   2993 0000D0FA 81 31                   	shl		r1,#1
   2994 0000D0FC 21 22                   	adc		r2,r2
   2995 0000D0FE 81 31                   	shl		r1,#1
   2996 0000D100 21 22                   	adc		r2,r2
   2997 0000D102 81 31                   	shl		r1,#1
   2998 0000D104 21 22                   	adc		r2,r2
   2999 0000D106 46 21                   	or		r1,r4
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 51
noc_boot11.a
   3000 0000D108 80 19                   	mov		r9,r8
   3001 0000D10A 01 68                   	add		r8,r8,#1	; adjust text pointer
   3002 0000D10C 01 63                   	add		r3,r3,#1	; increment the no. of digits
   3003 0000D10E EA BE                   	br		GetHexNumber1
   3004 0000D110                        GetHexNumber4:
   3005 0000D110 E2 F1                   	lw		r1,2[sp]
   3006 0000D112                        GetHexNumberRet:
   3007 0000D112 90 18                   	mov		r8,r9
   3008 0000D114 E0 FF                   	lw		lr,[sp]
   3009 0000D116 04 6E                   	add		sp,sp,#4
   3010 0000D118 F0 80                   	ret
   3011 0000D11A                        GetHexNumberErr:
   3012 0000D11A 32 4D 01 11             	lea		r1,msgNumTooBig
   3013 0000D11E DE 4F 0C AE             	br		ERROR		; if not, we've overflowd
                                        
                                        ;===== Skip over blanks in the text pointed to by r8.
                                        ;
                                        ; Registers Affected:
                                        ;	r8
                                        ; Returns
                                        ;	r8 = pointer updateded past any spaces or tabs
                                        ;
   3022 0000D122                        IGNBLK
   3023 0000D122 FE 6E                   	sub		sp,sp,#2
   3024 0000D124 E0 D1                   	sw		r1,[sp]
   3025 0000D126                        IGB2
   3026 0000D126 80 E1                   	lb		r1,[r8]			; get char
   3027 0000D128 FE 4F 10 10             	cmp		r1,#' '			; see if it's a space
   3028 0000D12C 03 A8                   	beq		IGB1			; if so, swallow it
   3029 0000D12E FF 4F 17 10             	cmp		r1,#'\t'		; or a tab
   3030 0000D132 02 A9                   	bne		IGBRET
   3031 0000D134                        IGB1
   3032 0000D134 01 68                   	add		r8,r8,#1		; increment the text pointer
   3033 0000D136 F7 BE                   	br		IGB2
   3034 0000D138                        IGBRET
   3035 0000D138 E0 F1                   	lw		r1,[sp]
   3036 0000D13A 02 6E                   	add		sp,sp,#2
   3037 0000D13C F0 80                   	ret
                                        
                                        
                                        ; ===== Convert the line of text in the input buffer to upper
                                        ;	case (except for stuff between quotes).
                                        ;
                                        ; Registers Affected
                                        ;   r1,r3
                                        ; Returns
                                        ;	r8 = pointing to end of text in buffer
                                        ;
   3048 0000D13E                        TOUPBUF
   3049 0000D13E FE 6E                   	sub		sp,sp,#2
   3050 0000D140 E0 DF                   	sw		lr,[sp]
   3051 0000D142 0A 40 0E 18             	lea		r8,BUFFER	; set up text pointer
   3052 0000D146 00 13                   	lw		r3,#0		; clear quote flag
   3053 0000D148                        TOUPB1
   3054 0000D148 80 E1                   	lb		r1,[r8]		; get the next text char.
   3055 0000D14A 01 68                   	add		r8,r8,#1
   3056 0000D14C FF 4F 13 10             	cmp		r1,#CR		; is it end of line?
   3057 0000D150 13 A8                   	beq		TOUPBRT 	; if so, return
   3058 0000D152 FD 4F 1E 10             	cmp		r1,#'"'		; a double quote?
   3059 0000D156 08 A8                   	beq		DOQUO
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 52
noc_boot11.a
   3060 0000D158 FD 4F 19 10             	cmp		r1,#''''	; or a single quote?
   3061 0000D15C 05 A8                   	beq		DOQUO
   3062 0000D15E 30 10                   	cmp		r3,#0		; inside quotes?
   3063 0000D160 F3 B9                   	bne		TOUPB1		; if so, do the next one
   3064 0000D162 0D AF                   	call	toUpper 	; convert to upper case
   3065 0000D164 8F C1                   	sb		r1,-1[r8]	; store it
   3066 0000D166 F0 BE                   	br		TOUPB1		; and go back for more
   3067 0000D168                        DOQUO
   3068 0000D168 30 10                   	cmp		r3,#0		; are we inside quotes?
   3069 0000D16A 02 A9                   	bne		DOQUO1
   3070 0000D16C 10 13                   	lw		r3,r1		; if not, toggle inside-quotes flag
   3071 0000D16E EC BE                   	br		TOUPB1
   3072 0000D170                        DOQUO1
   3073 0000D170 1D 23                   	cmp		r3,r1		; make sure we're ending proper quote
   3074 0000D172 EA B9                   	bne		TOUPB1		; if not, ignore it
   3075 0000D174 00 13                   	lw		r3,#0		; else clear quote flag
   3076 0000D176 E8 BE                   	br		TOUPB1
   3077 0000D178                        TOUPBRT
   3078 0000D178 E0 FF                   	lw		lr,[sp]
   3079 0000D17A 02 6E                   	add		sp,sp,#2
   3080 0000D17C F0 80                   	ret
                                        
                                        
                                        ; ===== Convert the character in r1 to upper case
                                        ;
   3085 0000D17E                        toUpper
   3086 0000D17E F9 4F 1F 10             	cmp		r1,#'a'		; is it < 'a'?
   3087 0000D182 04 A0                   	blt	    TOUPRET
   3088 0000D184 F8 4F 16 10             	cmp		r1,#'z'		; or > 'z'?
   3089 0000D188 01 A3                   	bgt	    TOUPRET
   3090 0000D18A E0 61                   	sub		r1,r1,#32	; if not, make it upper case
   3091 0000D18C                        TOUPRET
   3092 0000D18C F0 80                   	ret
                                        
                                        
                                        ; 'CHKIO' checks the input. If there's no input, it will return
                                        ; to the caller with the Z flag set. If there is input, the Z
                                        ; flag is cleared and the input byte is in r2. However, if a
                                        ; control-C is read, 'CHKIO' will warm-start BASIC and will not
                                        ; return to the caller.
                                        ;
   3101 0000D18E                        CHKIO
   3102 0000D18E FE 6E                   	sub		sp,sp,#2	; save link reg
   3103 0000D190 E0 DF                   	sw		lr,[sp]
   3104 0000D192 77 4F 05 AF             	call	GOIN		; get input if possible
   3105 0000D196 07 A8                   	beq		CHKRET2		; if Zero, no input
   3106 0000D198 1D 10                   	cmp		r1,#CTRLC	; is it control-C?
   3107 0000D19A 02 A9                   	bne		CHKRET		; if not
   3108 0000D19C 7A 4F 0F AE             	jmp		WSTART		; if so, do a warm start
   3109 0000D1A0                        CHKRET
   3110 0000D1A0 E0 FF                   	lw		lr,[sp]
   3111 0000D1A2 02 6E                   	add		sp,sp,#2	; Z=0
   3112 0000D1A4 F0 80                   	ret
   3113 0000D1A6                        CHKRET2
   3114 0000D1A6 E0 FF                   	lw		lr,[sp]
   3115 0000D1A8 02 6E                   	add		sp,sp,#2
   3116 0000D1AA 00 11                   	lw		r1,#0		; Z=1
   3117 0000D1AC F0 80                   	ret
                                        
                                        
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 53
noc_boot11.a
                                        ; ===== Display a CR-LF sequence
                                        ;
   3122 0000D1AE                        CRLF
   3123 0000D1AE 30 4D 03 11             	lea		r1,CLMSG
                                        
                                        
                                        ; ===== Display a zero-ended string pointed to by register r1
                                        ; Registers Affected
                                        ;   r1,r2,r4
                                        ;
   3130 0000D1B2                        PRMESG
   3131 0000D1B2 FC 6E                   	sub		sp,sp,#4
   3132 0000D1B4 E0 DF                   	sw		lr,[sp]
   3133 0000D1B6 E2 D5                   	sw		r5,2[sp]
   3134 0000D1B8 10 15                   	lw      r5,r1       ; r5 = pointer to message
   3135 0000D1BA                        PRMESG1
   3136 0000D1BA 01 65                   	add		r5,r5,#1
   3137 0000D1BC 5F E1                   	lb		r1,-1[r5]	; 	get the char.
   3138 0000D1BE 03 A8                   	beq		PRMRET
   3139 0000D1C0 75 4F 0C AF             	call	GOOUT		;else display it trashes r4
   3140 0000D1C4 FA BE                   	br		PRMESG1
   3141 0000D1C6                        PRMRET
   3142 0000D1C6 50 11                   	lw		r1,r5
   3143 0000D1C8 E2 F5                   	lw		r5,2[sp]
   3144 0000D1CA E0 FF                   	lw		lr,[sp]
   3145 0000D1CC 04 6E                   	add		sp,sp,#4
   3146 0000D1CE F0 80                   	ret
                                        
                                        
                                        ; ===== Display a zero-ended string pointed to by register r1
                                        ; Registers Affected
                                        ;   r1,r2,r3
                                        ;
   3153 0000D1D0                        PRMESGAUX
   3154 0000D1D0 FC 6E                   	sub		sp,sp,#4
   3155 0000D1D2 E0 DF                   	sw		lr,[sp]
   3156 0000D1D4 E2 D5                   	sw		r5,2[sp]
   3157 0000D1D6 10 15                   	lw      r5,r1       ; r3 = pointer
   3158 0000D1D8                        PRMESGA1
   3159 0000D1D8 01 65                   	add		r5,r5,#1
   3160 0000D1DA 5F E1                   	lb		r1,-1[r5]	; 	get the char.
   3161 0000D1DC 03 A8                   	beq		PRMRETA
   3162 0000D1DE 75 4F 01 AF             	call	GOAUXO		;else display it
   3163 0000D1E2 FA BE                   	br		PRMESGA1
   3164 0000D1E4                        PRMRETA
   3165 0000D1E4 50 11                   	lw		r1,r5
   3166 0000D1E6 E2 F5                   	lw		r5,2[sp]
   3167 0000D1E8 E0 FF                   	lw		lr,[sp]
   3168 0000D1EA 04 6E                   	add		sp,sp,#4
   3169 0000D1EC F0 80                   	ret
                                        
                                        ;*****************************************************
                                        ; The following routines are the only ones that need *
                                        ; to be changed for a different I/O environment.     *
                                        ;*****************************************************
                                        
                                        
                                        ; ===== Output character to the console (Port 1) from register D0
                                        ;	(Preserves all registers.)
                                        ;
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 54
noc_boot11.a
   3180 0000D1EE                        OUTC
   3181 0000D1EE FC 6E                   	add		sp,sp,#-4
   3182 0000D1F0 E0 DF                   	sw		lr,[sp]
   3183 0000D1F2 E2 D1                   	sw		r1,2[sp]
   3184 0000D1F4 01 4B 00 E1             	lb		r1,ROUTER+RTR_RXSTAT
   3185 0000D1F8 03 40 5F 31             	and		r1,#63
   3186 0000D1FC 04 A8                   	beq		OUTC1
   3187 0000D1FE 72 4F 06 AF             	call	Recv
   3188 0000D202 38 40 0F AF             	call	RecvDispatch
   3189 0000D206                        OUTC1
   3190 0000D206 E2 F1                   	lw		r1,2[sp]
   3191 0000D208 4C 40 02 AF             	call	putcharScr
   3192 0000D20C E0 FF                   	lw		lr,[sp]
   3193 0000D20E 04 6E                   	add		sp,sp,#4
   3194 0000D210 F0 80                   	ret
                                        
                                        
                                        ; ===== Input a character from the console into register D0 (or
                                        ;	return Zero status if there's no character available).
                                        ;
                                        ; A bit of cooperative multi-tasking here. A check for network
                                        ; messages is made.
                                        ;
   3203 0000D212                        INC
   3204 0000D212 FE 6E                   	add		sp,sp,#-2
   3205 0000D214 E0 DF                   	sw		lr,[sp]
   3206 0000D216 05 42 06 F1             	lw		r1,TXTSCR+86
   3207 0000D21A 01 61                   	add		r1,r1,#1
   3208 0000D21C 05 42 06 D1             	sw		r1,TXTSCR+86
   3209 0000D220 01 4B 00 E1             	lb		r1,ROUTER+RTR_RXSTAT
   3210 0000D224 03 40 5F 31             	and		r1,#63
   3211 0000D228 04 A8                   	beq		INC1
   3212 0000D22A 71 4F 00 AF             	call	Recv
   3213 0000D22E 37 40 09 AF             	call	RecvDispatch
   3214 0000D232                        INC1
   3215 0000D232 56 40 04 AF             	call	kbdGetChar
   3216 0000D236 03 A8                   	beq		INC2
   3217 0000D238 E0 FF                   	lw		lr,[sp]
   3218 0000D23A 02 6E                   	add		sp,sp,#2
   3219 0000D23C F0 80                   	ret
   3220 0000D23E                        INC2:
   3221 0000D23E E0 FF                   	lw		lr,[sp]
   3222 0000D240 02 6E                   	add		sp,sp,#2
   3223 0000D242 00 11                   	lw		r1,#0
   3224 0000D244 F0 80                   	ret
                                        
                                        
                                        ; Trigger a load operation on the target node.
                                        
   3229 0000D246                        TriggerTgtLoad:
   3230 0000D246 FC 6E                   	add		sp,sp,#-4
   3231 0000D248 E0 DF                   	sw		lr,[sp]
   3232 0000D24A E2 D2                   	sw		r2,2[sp]
   3233 0000D24C 6D 4F 08 AF             	call	zeroTxBuf
   3234 0000D250 03 40 06 E2             	lb		r2,tgtNode
   3235 0000D254 04 40 0F C2             	sb		r2,txBuf+MSG_DST
   3236 0000D258 0A 12                   	lw		r2,#MT_START_BASIC_LOAD	; trigger load on target node
   3237 0000D25A 04 40 08 C2             	sb		r2,txBuf+MSG_TYPE
   3238 0000D25E 6E 4F 01 AF             	call	Xmit
   3239 0000D262 E2 F2                   	lw		r2,2[sp]
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 55
noc_boot11.a
   3240 0000D264 E0 FF                   	lw		lr,[sp]
   3241 0000D266 04 6E                   	add		sp,sp,#4
   3242 0000D268 F0 80                   	ret
                                        
                                        ; ===== Output character to the host (Port 2) from register r1
                                        ;	(Preserves all registers.)
                                        ;
   3247 0000D26A                        AUXOUT
   3248 0000D26A FE 6E                   	add		sp,sp,#-2
   3249 0000D26C E0 DF                   	sw		lr,[sp]
   3250 0000D26E 2C 49 0C AF             	call	putSerial	; call boot rom routine
   3251 0000D272 E0 FF                   	lw		lr,[sp]
   3252 0000D274 02 6E                   	add		sp,sp,#2
   3253 0000D276 F0 80                   	ret
                                        
                                        ;
                                        ; ===== Input a character from the host into register D0 (or
                                        ;	return negative status if there's no character available).
                                        ;
   3259 0000D278                        AUXIN
                                        ; get character from serial port
                                        ; return  N=1 if no character available
   3262 0000D278 2C 49 05 AE             	jmp		peekSerial
                                        
                                        
                                        ; flash the character at the screen position
                                        ;   r1: 1 = flash, 0 = no flash
   3267 0000D27C                        _flashCursor
   3268 0000D27C 00 42 00 12             	lw		r2,#VIDEORAM
   3269 0000D280 03 40 04 F3             	lh		r3,pos
   3270 0000D284 81 33                   	shl		r3,#1
   3271 0000D286 81 33                   	shl		r3,#1
   3272 0000D288 20 23                   	add		r3,r2		; r3 = scr[pos]
                                        
   3274 0000D28A 16 21                   	or		r1,r1
   3275 0000D28C 04 A8                   	beq		fc1
   3276 0000D28E 33 E2                   	lb		r2,3[r3]	; get background color
   3277 0000D290 08 40 60 32             	or		r2,#0x80	; set flash indicator
   3278 0000D294 03 AE                   	br		fcx
   3279 0000D296                        fc1
   3280 0000D296 33 E2                   	lb		r2,3[r3]	; get background color
   3281 0000D298 07 40 5F 32             	and		r2,#0x7f	; clear flash indicator
   3282 0000D29C                        fcx:
   3283 0000D29C 33 C2                   	sb		r2,3[r3]
   3284 0000D29E F0 80                   	ret
                                        
                                        
   3287 0000D2A0                        _cls
   3288 0000D2A0 44 40 0C AF             	call	ClearScreen
   3289 0000D2A4 8D 4F 04 AE             	br		FINISH
                                        
                                        
                                        ; ===== Return to the resident monitor, operating system, etc.
                                        ;
   3294 0000D2A8                        BYEBYE
   3295 0000D2A8 05 40 0E FE             	lw		sp,OSSP
   3296 0000D2AC E0 FF                       lw      lr,[sp]
   3297 0000D2AE 02 6E                       add		sp,sp,#2
   3298 0000D2B0 F0 80                   	ret
                                        
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 56
noc_boot11.a
                                        ;	MOVE.B	#228,D7 	return to Tutor
                                        ;	TRAP	#14
                                        
   3303 0000D2B2 0D 0A 42 75 74 74      msgInit db	CR,LF,"Butterfly Tiny BASIC v1.1",CR,LF,"(C) 2005-2017  Robert Finch",CR,LF,LF,0
   3303 0000D2B8 65 72 66 6C 79 20 54  
   3303 0000D2BF 69 6E 79 20 42 41 53  
   3303 0000D2C6 49 43 20 76 31 2E 31  
   3303 0000D2CD 0D 0A 28 43 29 20 32  
   3303 0000D2D4 30 30 35 2D 32 30 31  
   3303 0000D2DB 37 20 20 52 6F 62 65  
   3303 0000D2E2 72 74 20 46 69 6E 63  
   3303 0000D2E9 68 0D 0A 0A 00        
   3304 0000D2EE 0D 0A 4F 4B 0D 0A      OKMSG	db	CR,LF,"OK",CR,LF,0
   3304 0000D2F4 00                    
   3305 0000D2F5 57 68 61 74 3F 0D      msgWhat	db	"What?",CR,LF,0
   3305 0000D2FB 0A 00                 
   3306 0000D2FD 53 6F 72 72 79 2E      SRYMSG	db	"Sorry."
                                      
   3307 0000D303 0D 0A 00               CLMSG	db	CR,LF,0
   3308 0000D306 43 6F 6D 70 61 63      msgReadError	db	"Compact FLASH read error",CR,LF,0
   3308 0000D30C 74 20 46 4C 41 53 48  
   3308 0000D313 20 72 65 61 64 20 65  
   3308 0000D31A 72 72 6F 72 0D 0A 00  
                                      
   3309 0000D321 4E 75 6D 62 65 72      msgNumTooBig	db	"Number is too big",CR,LF,0
   3309 0000D327 20 69 73 20 74 6F 6F  
   3309 0000D32E 20 62 69 67 0D 0A 00  
                                      
   3310 0000D335 44 69 76 69 73 69      msgDivZero		db	"Division by zero",CR,LF,0
   3310 0000D33B 6F 6E 20 62 79 20 7A  
   3310 0000D342 65 72 6F 0D 0A 00     
   3311 0000D348 4F 75 74 20 6F 66      msgVarSpace     db  "Out of variable space",CR,LF,0
   3311 0000D34E 20 76 61 72 69 61 62  
   3311 0000D355 6C 65 20 73 70 61 63  
   3311 0000D35C 65 0D 0A 00           
   3312 0000D360 20 62 79 74 65 73      msgBytesFree	db	" bytes free",CR,LF,0
   3312 0000D366 20 66 72 65 65 0D 0A  
   3312 0000D36D 00                    
   3313 0000D36E 0D 0A 52 65 61 64      msgReady		db	CR,LF,"Ready",CR,LF,0
   3313 0000D374 79 0D 0A 00           
   3314 0000D378 45 78 70 65 63 74      msgComma		db	"Expecting a comma",CR,LF,0
   3314 0000D37E 69 6E 67 20 61 20 63  
   3314 0000D385 6F 6D 6D 61 0D 0A 00  
                                      
   3315 0000D38C 4C 69 6E 65 20 6E      msgLineRange	db	"Line number too big",CR,LF,0
   3315 0000D392 75 6D 62 65 72 20 74  
   3315 0000D399 6F 6F 20 62 69 67 0D  
   3315 0000D3A0 0A 00                 
   3316 0000D3A2 45 78 70 65 63 74      msgVar			db	"Expecting a variable",CR,LF,0
   3316 0000D3A8 69 6E 67 20 61 20 76  
   3316 0000D3AF 61 72 69 61 62 6C 65  
   3316 0000D3B6 0D 0A 00              
   3317 0000D3B9 52 4E 44 20 62 61      msgRNDBad		db	"RND bad parameter",CR,LF,0
   3317 0000D3BF 64 20 70 61 72 61 6D  
   3317 0000D3C6 65 74 65 72 0D 0A 00  
                                      
   3318 0000D3CD 53 59 53 20 62 61      msgSYSBad		db	"SYS bad address",CR,LF,0
   3318 0000D3D3 64 20 61 64 64 72 65  
   3318 0000D3DA 73 73 0D 0A 00        
   3319 0000D3DF 49 4E 50 55 54 20      msgInputVar		db	"INPUT expecting a variable",CR,LF,0
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 57
noc_boot11.a
   3319 0000D3E5 65 78 70 65 63 74 69  
   3319 0000D3EC 6E 67 20 61 20 76 61  
   3319 0000D3F3 72 69 61 62 6C 65 0D  
   3319 0000D3FA 0A 00                 
   3320 0000D3FC 4E 45 58 54 20 77      msgNextFor		db	"NEXT without FOR",CR,LF,0
   3320 0000D402 69 74 68 6F 75 74 20  
   3320 0000D409 46 4F 52 0D 0A 00     
   3321 0000D40F 4E 45 58 54 20 65      msgNextVar		db	"NEXT expecting a defined variable",CR,LF,0
   3321 0000D415 78 70 65 63 74 69 6E  
   3321 0000D41C 67 20 61 20 64 65 66  
   3321 0000D423 69 6E 65 64 20 76 61  
   3321 0000D42A 72 69 61 62 6C 65 0D  
   3321 0000D431 0A 00                 
   3322 0000D433 47 4F 54 4F 2F 47      msgBadGotoGosub	db	"GOTO/GOSUB bad line number",CR,LF,0
   3322 0000D439 4F 53 55 42 20 62 61  
   3322 0000D440 64 20 6C 69 6E 65 20  
   3322 0000D447 6E 75 6D 62 65 72 0D  
   3322 0000D44E 0A 00                 
   3323 0000D450 52 45 54 55 52 4E      msgRetWoGosub   db	"RETURN without GOSUB",CR,LF,0
   3323 0000D456 20 77 69 74 68 6F 75  
   3323 0000D45D 74 20 47 4F 53 55 42  
   3323 0000D464 0D 0A 00              
   3324 0000D467 50 72 6F 67 72 61      msgTooBig		db	"Program is too big",CR,LF,0
   3324 0000D46D 6D 20 69 73 20 74 6F  
   3324 0000D474 6F 20 62 69 67 0D 0A  
   3324 0000D47B 00                    
   3325 0000D47C 45 78 74 72 61 20      msgExtraChars	db	"Extra characters on line ignored",CR,LF,0
   3325 0000D482 63 68 61 72 61 63 74  
   3325 0000D489 65 72 73 20 6F 6E 20  
   3325 0000D490 6C 69 6E 65 20 69 67  
   3325 0000D497 6E 6F 72 65 64 0D 0A  
   3325 0000D49E 00                    
                                        
   3327 0000D49F FF                      	.align	4
   3394 = 0000D4A0                      LSTROM	equ	*		; end of possible ROM area
                                        ;
                                        ; Internal variables follow:
                                        ;
                                        		bss
                                        		org		0x0030
   3334 00000030                        txtWidth	db	0		; BIOS var =60
   3335 00000031                        txtHeight	db	0		; BIOS var =27
   3336 00000032                        cursx	db		0		; cursor x position
   3337 00000033                        cursy	db		0		; cursor y position
   3338 00000034                        pos		dw		0		; text screen position
   3339 00000036                        tgtNode	db		0
   3340 00000037                        srcNode	db		0
                                        		org		0x0038
   3342 00000038                        charToPrint		dw		0
   3343 0000003A                        fgColor			db		0
   3344 0000003B                        bkColor			db		0
   3345 0000003C                        cursFlash		db		0	; flash the cursor ?
   3346 0000003D                         				db		0
   3347 0000003E                        NormAttr		dw		0
                                        
   3349 00000040                        lineLinkTbl		fill.b	25,0	; screen line link table
   3350 00000059                         	align 4
                                        
                                        		;org		0x0080
   3353 0000005C                        typef   db      0   ; variable / expression type
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 58
noc_boot11.a
   3354 0000005D                                 align   2
   3355 0000005E                        OSSP	dw	1	; OS value of sp
   3356 00000060                        CURRNT	dw	1	;	Current line pointer
   3357 00000062                        STKGOS	dw	1	;	Saves stack pointer in 'GOSUB'
   3358 00000064                        STKINP	dw	1	;	Saves stack pointer during 'INPUT'
   3359 00000066                        LOPVAR	dw	1	;	'FOR' loop save area
   3360 00000068                        LOPINC	dw	1	;	increment
   3361 0000006A                        LOPLMT	dw	1	;	limit
   3362 0000006C                        LOPLN	dw	1	;	line number
   3363 0000006E                        LOPPT	dw	1	;	text pointer
   3364 00000070                        TXTUNF	dw	1	;	points to unfilled text area
   3365 00000072                        VARBGN	dw	1	;	points to variable area
   3366 00000074                        IVARBGN dw  1   ;   points to integer variable area
   3367 00000076                        SVARBGN dw  1   ;   points to string variable area
   3368 00000078                        FVARBGN dw  1   ;   points to float variable area
   3369 0000007A                        STKBOT	dw	1	;	holds lower limit for stack growth
   3370 0000007C                        NUMWKA	fill.b	50,0			; numeric work area
   3371 000000AE                        BUFFER	fill.b	BUFLEN,0x00		;		Keyboard input buffer
                                        
                                                bss
                                                org     0x2000
   3375 00002000                        textScr1
                                                org     0x2000
                                        ;	END
                                        		.code
   3379 0000D4A0 FF FF FF FF FF FF FF    		.org	$D800
   3379 0000D4A7 FF FF FF FF FF FF FF  
   3379 0000D4AE FF FF FF FF FF FF FF  
   3379 0000D4B5 FF FF FF FF FF FF FF  
   3379 0000D4BC FF FF FF FF FF FF FF  
   3379 0000D4C3 FF FF FF FF FF FF FF  
   3379 0000D4CA FF FF FF FF FF FF FF  
   3379 0000D4D1 FF FF FF FF FF FF FF  
   3379 0000D4D8 FF FF FF FF FF FF FF  
   3379 0000D4DF FF FF FF FF FF FF FF  
   3379 0000D4E6 FF FF FF FF FF FF FF  
   3379 0000D4ED FF FF FF FF FF FF FF  
   3379 0000D4F4 FF FF FF FF FF FF FF  
   3379 0000D4FB FF FF FF FF FF FF FF  
   3379 0000D502 FF FF FF FF FF FF FF  
   3379 0000D509 FF FF FF FF FF FF FF  
   3379 0000D510 FF FF FF FF FF FF FF  
   3379 0000D517 FF FF FF FF FF FF FF  
   3379 0000D51E FF FF FF FF FF FF FF  
   3379 0000D525 FF FF FF FF FF FF FF  
   3379 0000D52C FF FF FF FF FF FF FF  
   3379 0000D533 FF FF FF FF FF FF FF  
   3379 0000D53A FF FF FF FF FF FF FF  
   3379 0000D541 FF FF FF FF FF FF FF  
   3379 0000D548 FF FF FF FF FF FF FF  
   3379 0000D54F FF FF FF FF FF FF FF  
   3379 0000D556 FF FF FF FF FF FF FF  
   3379 0000D55D FF FF FF FF FF FF FF  
   3379 0000D564 FF FF FF FF FF FF FF  
   3379 0000D56B FF FF FF FF FF FF FF  
   3379 0000D572 FF FF FF FF FF FF FF  
   3379 0000D579 FF FF FF FF FF FF FF  
   3379 0000D580 FF FF FF FF FF FF FF  
   3379 0000D587 FF FF FF FF FF FF FF  
   3379 0000D58E FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 59
noc_boot11.a
   3379 0000D595 FF FF FF FF FF FF FF  
   3379 0000D59C FF FF FF FF FF FF FF  
   3379 0000D5A3 FF FF FF FF FF FF FF  
   3379 0000D5AA FF FF FF FF FF FF FF  
   3379 0000D5B1 FF FF FF FF FF FF FF  
   3379 0000D5B8 FF FF FF FF FF FF FF  
   3379 0000D5BF FF FF FF FF FF FF FF  
   3379 0000D5C6 FF FF FF FF FF FF FF  
   3379 0000D5CD FF FF FF FF FF FF FF  
   3379 0000D5D4 FF FF FF FF FF FF FF  
   3379 0000D5DB FF FF FF FF FF FF FF  
   3379 0000D5E2 FF FF FF FF FF FF FF  
   3379 0000D5E9 FF FF FF FF FF FF FF  
   3379 0000D5F0 FF FF FF FF FF FF FF  
   3379 0000D5F7 FF FF FF FF FF FF FF  
   3379 0000D5FE FF FF FF FF FF FF FF  
   3379 0000D605 FF FF FF FF FF FF FF  
   3379 0000D60C FF FF FF FF FF FF FF  
   3379 0000D613 FF FF FF FF FF FF FF  
   3379 0000D61A FF FF FF FF FF FF FF  
   3379 0000D621 FF FF FF FF FF FF FF  
   3379 0000D628 FF FF FF FF FF FF FF  
   3379 0000D62F FF FF FF FF FF FF FF  
   3379 0000D636 FF FF FF FF FF FF FF  
   3379 0000D63D FF FF FF FF FF FF FF  
   3379 0000D644 FF FF FF FF FF FF FF  
   3379 0000D64B FF FF FF FF FF FF FF  
   3379 0000D652 FF FF FF FF FF FF FF  
   3379 0000D659 FF FF FF FF FF FF FF  
   3379 0000D660 FF FF FF FF FF FF FF  
   3379 0000D667 FF FF FF FF FF FF FF  
   3379 0000D66E FF FF FF FF FF FF FF  
   3379 0000D675 FF FF FF FF FF FF FF  
   3379 0000D67C FF FF FF FF FF FF FF  
   3379 0000D683 FF FF FF FF FF FF FF  
   3379 0000D68A FF FF FF FF FF FF FF  
   3379 0000D691 FF FF FF FF FF FF FF  
   3379 0000D698 FF FF FF FF FF FF FF  
   3379 0000D69F FF FF FF FF FF FF FF  
   3379 0000D6A6 FF FF FF FF FF FF FF  
   3379 0000D6AD FF FF FF FF FF FF FF  
   3379 0000D6B4 FF FF FF FF FF FF FF  
   3379 0000D6BB FF FF FF FF FF FF FF  
   3379 0000D6C2 FF FF FF FF FF FF FF  
   3379 0000D6C9 FF FF FF FF FF FF FF  
   3379 0000D6D0 FF FF FF FF FF FF FF  
   3379 0000D6D7 FF FF FF FF FF FF FF  
   3379 0000D6DE FF FF FF FF FF FF FF  
   3379 0000D6E5 FF FF FF FF FF FF FF  
   3379 0000D6EC FF FF FF FF FF FF FF  
   3379 0000D6F3 FF FF FF FF FF FF FF  
   3379 0000D6FA FF FF FF FF FF FF FF  
   3379 0000D701 FF FF FF FF FF FF FF  
   3379 0000D708 FF FF FF FF FF FF FF  
   3379 0000D70F FF FF FF FF FF FF FF  
   3379 0000D716 FF FF FF FF FF FF FF  
   3379 0000D71D FF FF FF FF FF FF FF  
   3379 0000D724 FF FF FF FF FF FF FF  
   3379 0000D72B FF FF FF FF FF FF FF  
   3379 0000D732 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 60
noc_boot11.a
   3379 0000D739 FF FF FF FF FF FF FF  
   3379 0000D740 FF FF FF FF FF FF FF  
   3379 0000D747 FF FF FF FF FF FF FF  
   3379 0000D74E FF FF FF FF FF FF FF  
   3379 0000D755 FF FF FF FF FF FF FF  
   3379 0000D75C FF FF FF FF FF FF FF  
   3379 0000D763 FF FF FF FF FF FF FF  
   3379 0000D76A FF FF FF FF FF FF FF  
   3379 0000D771 FF FF FF FF FF FF FF  
   3379 0000D778 FF FF FF FF FF FF FF  
   3379 0000D77F FF FF FF FF FF FF FF  
   3379 0000D786 FF FF FF FF FF FF FF  
   3379 0000D78D FF FF FF FF FF FF FF  
   3379 0000D794 FF FF FF FF FF FF FF  
   3379 0000D79B FF FF FF FF FF FF FF  
   3379 0000D7A2 FF FF FF FF FF FF FF  
   3379 0000D7A9 FF FF FF FF FF FF FF  
   3379 0000D7B0 FF FF FF FF FF FF FF  
   3379 0000D7B7 FF FF FF FF FF FF FF  
   3379 0000D7BE FF FF FF FF FF FF FF  
   3379 0000D7C5 FF FF FF FF FF FF FF  
   3379 0000D7CC FF FF FF FF FF FF FF  
   3379 0000D7D3 FF FF FF FF FF FF FF  
   3379 0000D7DA FF FF FF FF FF FF FF  
   3379 0000D7E1 FF FF FF FF FF FF FF  
   3379 0000D7E8 FF FF FF FF FF FF FF  
   3379 0000D7EF FF FF FF FF FF FF FF  
   3379 0000D7F6 FF FF FF FF FF FF FF  
   3379 0000D7FD FF FF FF              
   3380 0000D800                        start:
   3381 0000D800 E4 31                   		tsr		r1,ID		; id register
   3382 0000D802 20 4B 00 C1             		sb		r1,LEDS
   3383 0000D806 FF 41 0E 1E             		lw		sp,#$1FFE
                                        ;		br		start2
   3385 0000D80A 0A 40 00 C0             		sb		r0,kbdhead
   3386 0000D80E 0A 40 01 C0             		sb		r0,kbdtail
   3387 0000D812 0A 40 02 C0             		sb		r0,kbdcnt
   3388 0000D816 0A 40 02 D0             		sw		r0,pingcnt
   3389 0000D81A C3 42 00 12             		lw		r2,#TXTSCR+3120
   3390 0000D81E 0E 40 08 D2             		sw		r2,packetPtr
   3391 0000D822 10 40 01 AF             		call	InitTxtCtrl
   3392 0000D826 04 11                   		lw		r1,#4
   3393 0000D828 20 4B 00 C1             		sb		r1,LEDS
   3394 0000D82C 01 40 0F 11             		lw		r1,#31
   3395 0000D830 03 40 01 C1             		sb		r1,txtHeight
   3396 0000D834 03 40 04 11             		lw		r1,#52
   3397 0000D838 03 40 00 C1             		sb		r1,txtWidth
   3398 0000D83C F0 4B 00 11             		lw		r1,#$BF00
   3399 0000D840 03 40 0E D1             		sw		r1,NormAttr
   3400 0000D844 17 40 0A AF             		call	ClearScreen
   3401 0000D848 18 40 0C AF             		call	HomeCursor
   3402 0000D84C D2 4D 06 11             		lw		r1,#msgStarting
   3403 0000D850 19 40 00 AF             		call	putmsgScr
                                        ;		lw		r1,#$80					; set router in snoop mode
                                        ;		sb		r1,ROUTER+RTR_RXSTAT
                                        		;call	broadcastReset
   3407 0000D854                        start2:
   3408 0000D854 08 40 00 11             		lw		r1,#$80					; set router in non-snoop mode
   3409 0000D858 01 4B 00 C1             		sb		r1,ROUTER+RTR_RXSTAT
   3410 0000D85C E4 31                   		tsr		r1,ID
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 61
noc_boot11.a
   3411 0000D85E FE 4F 1F 10             		cmp		r1,#$11
   3412 0000D862 06 A9                   		bne		RecvLoop
   3413 0000D864 1F AF                   		call	ping44
   3414 0000D866 05 11                   		lw		r1,#5
   3415 0000D868 20 4B 00 C1             		sb		r1,LEDS
   3416 0000D86C 41 4F 02 AE             		jmp		CSTART
   3417 0000D870                        RecvLoop:
   3418 0000D870                        noMsg1:
   3419 0000D870 01 4B 00 E1             		lb		r1,ROUTER+RTR_RXSTAT
   3420 0000D874 03 40 5F 31             		and		r1,#63
   3421 0000D878 FB B8                   		beq		noMsg1
   3422 0000D87A 3E 4F 08 AF             		call	Recv
   3423 0000D87E 52 AF                   		call	RecvDispatch
   3424 0000D880 F7 BE                   		bra		RecvLoop
   3425 0000D882                        lockup:
   3426 0000D882 FF BE                   		bra		lockup
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Broadcast a reset message on the network.
                                        ;----------------------------------------------------------------------------
                                        
   3432 0000D884                        broadcastReset:
   3433 0000D884 FE 6E                   		add		sp,sp,#-2
   3434 0000D886 E0 DF                   		sw		lr,[sp]
   3435 0000D888 3B 4F 0A AF             		call	zeroTxBuf
   3436 0000D88C 0F 40 0F 11             		lw		r1,#$FF		; global broadcast address
   3437 0000D890 04 40 0F C1             		sb		r1,txBuf+MSG_DST
   3438 0000D894 01 11                   		lw		r1,#MT_RST
   3439 0000D896 04 40 08 C1             		sb		r1,txBuf+MSG_TYPE	; reset message
   3440 0000D89A 3C 4F 03 AF             		call	Xmit
   3441 0000D89E E0 FF                   		lw		lr,[sp]
   3442 0000D8A0 02 6E                   		add		sp,sp,#2
   3443 0000D8A2 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Ping all the nodes to ensure everything is okay.
                                        ;----------------------------------------------------------------------------
                                        
   3449 0000D8A4                        ping44:
   3450 0000D8A4 FC 6E                   		add		sp,sp,#-4
   3451 0000D8A6 E0 DF                   		sw		lr,[sp]
   3452 0000D8A8 00 12                   		lw		r2,#0
   3453 0000D8AA                        ping441:
   3454 0000D8AA E2 D2                   		sw		r2,2[sp]
   3455 0000D8AC 3A 4F 08 AF             		call	zeroTxBuf
   3456 0000D8B0 8E 4D 24 E1             		lb		r1,NodeNumTbl[r2]
   3457 0000D8B4 04 40 0F C1             		sb		r1,txBuf+MSG_DST
   3458 0000D8B8 09 11                   		lw		r1,#MT_PING
   3459 0000D8BA 04 40 08 C1             		sb		r1,txBuf+MSG_TYPE
   3460 0000D8BE 3B 4F 01 AF             		call	Xmit
   3461 0000D8C2 01 4B 00 E1             		lb		r1,ROUTER+RTR_RXSTAT
   3462 0000D8C6 03 40 5F 31             		and		r1,#63
   3463 0000D8CA 04 A8                   		beq		ping442
   3464 0000D8CC 3B 4F 0F AF             		call	Recv
   3465 0000D8D0 BB AF                   		call	RecvDump
   3466 0000D8D2 28 AF                   		call	RecvDispatch
   3467 0000D8D4                        ping442:
   3468 0000D8D4 E2 F2                   		lw		r2,2[sp]
   3469 0000D8D6 01 62                   		add		r2,r2,#1
   3470 0000D8D8 FC 4F 20 10             		cmp		r2,#64
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 62
noc_boot11.a
   3471 0000D8DC E6 B4                   		bltu	ping441
   3472 0000D8DE E0 FF                   		lw		lr,[sp]
   3473 0000D8E0 04 6E                   		add		sp,sp,#4
   3474 0000D8E2 F0 80                   		ret
                                        
   3476 0000D8E4                        NodeNumTbl:
   3477 0000D8E4 11 12 13 14 15 16 17    	db	$11,$12,$13,$14,$15,$16,$17,$18	
   3477 0000D8EB 18                    
   3478 0000D8EC 21 22 23 24 25 26 27    	db	$21,$22,$23,$24,$25,$26,$27,$28	
   3478 0000D8F3 28                    
   3479 0000D8F4 31 32 33 34 35 36 37    	db	$31,$32,$33,$34,$35,$36,$37,$38	
   3479 0000D8FB 38                    
   3480 0000D8FC 41 42 43 44 45 46 47    	db	$41,$42,$43,$44,$45,$46,$47,$48	
   3480 0000D903 48                    
   3481 0000D904 51 52 53 54 55 56 57    	db	$51,$52,$53,$54,$55,$56,$57,$58	
   3481 0000D90B 58                    
   3482 0000D90C 61 62 63 64 65 66 67    	db	$61,$62,$63,$64,$65,$66,$67,$68	
   3482 0000D913 68                    
   3483 0000D914 71 72 73 74 75 76 77    	db	$71,$72,$73,$74,$75,$76,$77,$78	
   3483 0000D91B 78                    
   3484 0000D91C 81 82 83 84 85 86 87    	db	$81,$82,$83,$84,$85,$86,$87,$88	
   3484 0000D923 88                    
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Dispatch routine for recieved messages.
                                        ;----------------------------------------------------------------------------
                                        
   3490 0000D924                        RecvDispatch:
   3491 0000D924 F8 6E                   		add		sp,sp,#-8
   3492 0000D926 E0 DF                   		sw		lr,[sp]
   3493 0000D928 8F AF                   		call	RecvDump
   3494 0000D92A E2 D1                   		sw		r1,2[sp]
   3495 0000D92C E4 D2                   		sw		r2,4[sp]
   3496 0000D92E E6 D3                   		sw		r3,6[sp]
   3497 0000D930 05 40 0F E1             		lb		r1,rxBuf+MSG_DST
   3498 0000D934 E4 32                   		tsr		r2,ID
   3499 0000D936 1D 22                   		cmp		r2,r1
   3500 0000D938 45 A9                   		bne		RecvDispatchXit
   3501 0000D93A 0A 40 02 F1             		lw		r1,pingcnt
   3502 0000D93E 01 61                   		add		r1,r1,#1
   3503 0000D940 0A 40 02 D1             		sw		r1,pingcnt
   3504 0000D944 F3 4F 18 10             		cmp		r1,#200
   3505 0000D948 03 A9                   		bne		RecvDispatchNoPing
   3506 0000D94A 0A 40 02 D0             		sw		r0,pingcnt
   3507 0000D94E AA BF                   		call	ping44
   3508 0000D950                        RecvDispatchNoPing
   3509 0000D950 05 40 08 E1             		lb		r1,rxBuf+MSG_TYPE
   3510 0000D954 1E 10                   		cmp		r1,#MT_RST_ACK	; status display ?
   3511 0000D956 17 A9                   		bne		RecvDispatch2
   3512 0000D958                        RecvPingAck:
   3513 0000D958 05 40 0E E1             		lb		r1,rxBuf+MSG_SRC; message source
   3514 0000D95C 10 12                   		mov		r2,r1
   3515 0000D95E 57 32                   		and		r2,#$7			; get Y coord
   3516 0000D960 81 32                   		shl		r2,#1			; shift left once
   3517 0000D962 D5 4D 28 F2             		lw		r2,lineTbl[r2]
   3518 0000D966 58 62                   		add		r2,r2,#88		; position table along right edge of screen
   3519 0000D968 10 13                   		mov		r3,r1			; r3 = ID
   3520 0000D96A A1 33                   		shr		r3,#1
   3521 0000D96C A1 33                   		shr		r3,#1
   3522 0000D96E A1 33                   		shr		r3,#1
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 63
noc_boot11.a
   3523 0000D970 A1 33                   		shr		r3,#1
   3524 0000D972 81 33                   		shl		r3,#1			; character screen pos = *2
   3525 0000D974 00 40 5E 33             		and		r3,#$0E
   3526 0000D978 20 23                   		add		r3,r2
                                        		;lw		r1,#'*'
                                        		;call	AsciiToScreen
                                        		;lw		r2,NormAttr
                                        		;or		r1,r2
   3531 0000D97A 00 42 30 F1             		lw		r1,TXTSCR[r3]
   3532 0000D97E 01 61                   		add		r1,r1,#1
   3533 0000D980 00 42 30 D1             		sw		r1,TXTSCR[r3]
   3534 0000D984 1F AE                   		bra		RecvDispatchXit
   3535 0000D986                        RecvDispatch2:
   3536 0000D986 FE 4F 1E 10             		cmp		r1,#MT_PING_ACK
   3537 0000D98A E6 B8                   		beq		RecvPingAck
   3538 0000D98C 1C 10                   		cmp		r1,#MT_KEYSTROKE
   3539 0000D98E 20 A8                   		beq		RecvKeystroke
   3540 0000D990 FE 4F 1D 10             		cmp		r1,#MT_ETH_PACKET
   3541 0000D994 3B A8                   		beq		RecvEthPacket
   3542 0000D996 FF 4F 11 10             		cmp		r1,#MT_REQ_OUT_FOCUS
   3543 0000D99A 14 A9                   		bne		RecvDispatch3
   3544 0000D99C 05 40 0E E1             		lb		r1,rxBuf+MSG_SRC
   3545 0000D9A0 10 12                   		mov		r2,r1
   3546 0000D9A2 FF 61                   		sub		r1,r1,#1
   3547 0000D9A4 57 31                   		and		r1,#$7
   3548 0000D9A6 F0 62                   		sub		r2,r2,#$10
   3549 0000D9A8 07 40 50 32             		and		r2,#$70
   3550 0000D9AC A1 32                   		shr		r2,#1
   3551 0000D9AE 26 21                   		or		r1,r2
   3552 0000D9B0 01 12                   		lw		r2,#1
   3553 0000D9B2 0A 40 17 C2             		sb		r2,FocusTbl[r1]
   3554 0000D9B6 0E 40 07 E1             		lb		r1,HTOutFocus
   3555 0000D9BA 04 A9                   		bne		RecvDispatch3
   3556 0000D9BC 05 40 0E E1             		lb		r1,rxBuf+MSG_SRC
   3557 0000D9C0 0E 40 07 C1             		sb		r1,HTOutFocus
   3558 0000D9C4                        RecvDispatch3:
   3559 0000D9C4                        RecvDispatchXit:
   3560 0000D9C4 E0 FF                   		lw		lr,[sp]
   3561 0000D9C6 E2 F1                   		lw		r1,2[sp]
   3562 0000D9C8 E4 F2                   		lw		r2,4[sp]
   3563 0000D9CA E6 F3                   		lw		r3,6[sp]
   3564 0000D9CC 08 6E                   		add		sp,sp,#8
   3565 0000D9CE F0 80                   		ret
                                        		; Process a keystroke message from node $21
   3567 0000D9D0                        RecvKeystroke:
   3568 0000D9D0 08 11                   		lw		r1,#8
   3569 0000D9D2 20 4B 00 C1             		sb		r1,LEDS
   3570 0000D9D6 0A 40 02 E1             		lb		r1,kbdcnt
   3571 0000D9DA FF 4F 11 10             		cmp		r1,#15
   3572 0000D9DE 15 A1                   		bge		kbdfull
   3573 0000D9E0 09 11                   		lw		r1,#9
   3574 0000D9E2 20 4B 00 C1             		sb		r1,LEDS
   3575 0000D9E6 01 61                   		add		r1,r1,#1
   3576 0000D9E8 0A 40 02 C1             		sb		r1,kbdcnt
   3577 0000D9EC 0A 40 00 E2             		lb		r2,kbdhead
   3578 0000D9F0 05 40 02 E1             		lb		r1,rxBuf+2
   3579 0000D9F4 06 40 20 C1             		sb		r1,kbdbuf[r2]
   3580 0000D9F8 05 40 01 E1             		lb		r1,rxBuf+1
   3581 0000D9FC 06 40 21 C1             		sb		r1,kbdbuf+1[r2]
   3582 0000DA00 02 62                   		add		r2,r2,#2
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 64
noc_boot11.a
   3583 0000DA02 01 40 5E 32             		and		r2,#30
   3584 0000DA06 0A 40 00 C2             		sb		r2,kbdhead
   3585 0000DA0A                        kbdfull:
   3586 0000DA0A DC BE                   		br		RecvDispatchXit
   3587 0000DA0C                        RecvEthPacket:
   3588 0000DA0C 05 40 02 F1             		lw		r1,rxBuf+2
   3589 0000DA10 0E 40 08 F2             		lw		r2,packetPtr
   3590 0000DA14 20 D1                   		sw		r1,[r2]
   3591 0000DA16 02 62                   		add		r2,r2,#2
   3592 0000DA18 36 4D 28 10             		cmp		r2,#TXTSCR+3224
   3593 0000DA1C 02 A4                   		bltu	RecvEthPacket1
   3594 0000DA1E C3 42 00 12             		lw		r2,#TXTSCR+3120
   3595 0000DA22                        RecvEthPacket1:
   3596 0000DA22 0E 40 08 D2             		sw		r2,packetPtr
   3597 0000DA26 CE BE                   		br		RecvDispatchXit
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Initialize the text controller.
                                        ;----------------------------------------------------------------------------
                                        
   3603 0000DA28                        InitTxtCtrl:
   3604 0000DA28 02 11                   		lw		r1,#2
   3605 0000DA2A 20 4B 00 C1             		sb		r1,LEDS
   3606 0000DA2E 00 12                   		lw		r2,#0
   3607 0000DA30                        itc1:
   3608 0000DA30 D4 4D 27 E1             		lb		r1,txtctrl_dat[r2]
   3609 0000DA34 10 4B 20 C1             		sb		r1,TXTCTRL[r2]
   3610 0000DA38 01 62                   		add		r2,r2,#1
   3611 0000DA3A FF 4F 21 10             		cmp		r2,#15
   3612 0000DA3E F8 B2                   		ble		itc1
   3613 0000DA40 03 11                   		lw		r1,#3
   3614 0000DA42 20 4B 00 C1             		sb		r1,LEDS
   3615 0000DA46 F0 80                   		ret
                                        
                                        ;------------------------------------------------------------------------------
                                        ; Dump recieved message to screen.
                                        ;
                                        ; Parameters:
                                        ;	<none> data in receive buffer
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	<none>
                                        ;------------------------------------------------------------------------------
                                        
   3628 0000DA48                        RecvDump:
   3629 0000DA48 FC 6E                   		sub		sp,sp,#4
   3630 0000DA4A E0 DF                   		sw		lr,[sp]
   3631 0000DA4C E2 D1                   		sw		r1,2[sp]
   3632 0000DA4E 1C AF                   		call	DispCRLF
   3633 0000DA50 05 40 0F E1             		lb		r1,rxBuf+MSG_DST
   3634 0000DA54 3D AF                   		call	DispByte
   3635 0000DA56 22 AF                   		call	DispSpace
   3636 0000DA58 05 40 0E E1             		lb		r1,rxBuf+MSG_SRC
   3637 0000DA5C 39 AF                   		call	DispByte
   3638 0000DA5E 1E AF                   		call	DispSpace
   3639 0000DA60 05 40 09 E1             		lb		r1,rxBuf+MSG_TTL
   3640 0000DA64 35 AF                   		call	DispByte
   3641 0000DA66 1A AF                   		call	DispSpace
   3642 0000DA68 05 40 06 F1             		lw		r1,rxBuf+6
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 65
noc_boot11.a
   3643 0000DA6C 1F AF                   		call	DispWord
   3644 0000DA6E 05 40 04 F1             		lw		r1,rxBuf+4
   3645 0000DA72 1C AF                   		call	DispWord
   3646 0000DA74 05 40 02 F1             		lw		r1,rxBuf+2
   3647 0000DA78 19 AF                   		call	DispWord
   3648 0000DA7A 05 40 00 F1             		lw		r1,rxBuf+0
   3649 0000DA7E 16 AF                   		call	DispWord
   3650 0000DA80 E0 FF                   		lw		lr,[sp]
   3651 0000DA82 E2 F1                   		lw		r1,2[sp]
   3652 0000DA84 04 6E                   		add		sp,sp,#4
   3653 0000DA86 F0 80                   		ret
                                        
                                        ;------------------------------------------------------------------------------
                                        ;------------------------------------------------------------------------------
                                        
   3658 0000DA88                        DispCRLF:
   3659 0000DA88 FE 6E                   		sub		sp,sp,#2
   3660 0000DA8A E0 DF                   		sw		lr,[sp]
   3661 0000DA8C 00 40 0D 11             		lw		r1,#13
   3662 0000DA90 7F AF                   		call	putcharScr
   3663 0000DA92 0A 11                   		lw		r1,#10
   3664 0000DA94 7D AF                   		call	putcharScr
   3665 0000DA96 E0 FF                   		lw		lr,[sp]
   3666 0000DA98 02 6E                   		add		sp,sp,#2
   3667 0000DA9A F0 80                   		ret
                                        
   3669 0000DA9C                        DispSpace:
   3670 0000DA9C FE 6E                   		sub		sp,sp,#2
   3671 0000DA9E E0 DF                   		sw		lr,[sp]
   3672 0000DAA0 02 40 00 11             		lw		r1,#' '
   3673 0000DAA4 75 AF                   		call	putcharScr
   3674 0000DAA6 E0 FF                   		lw		lr,[sp]
   3675 0000DAA8 02 6E                   		add		sp,sp,#2
   3676 0000DAAA F0 80                   		ret
                                        
   3678 0000DAAC                        DispWord:
   3679 0000DAAC FC 6E                   		add		sp,sp,#-4
   3680 0000DAAE E0 DF                   		sw		lr,[sp]
   3681 0000DAB0 E2 D1                   		sw		r1,2[sp]
   3682 0000DAB2 A1 31                   		shr		r1,#1
   3683 0000DAB4 A1 31                   		shr		r1,#1
   3684 0000DAB6 A1 31                   		shr		r1,#1
   3685 0000DAB8 A1 31                   		shr		r1,#1
   3686 0000DABA A1 31                   		shr		r1,#1
   3687 0000DABC A1 31                   		shr		r1,#1
   3688 0000DABE A1 31                   		shr		r1,#1
   3689 0000DAC0 A1 31                   		shr		r1,#1
   3690 0000DAC2 06 AF                   		call	DispByte
   3691 0000DAC4 E2 F1                   		lw		r1,2[sp]
   3692 0000DAC6 04 AF                   		call	DispByte
   3693 0000DAC8 E2 F1                   		lw		r1,2[sp]
   3694 0000DACA E0 FF                   		lw		lr,[sp]
   3695 0000DACC 04 6E                   		add		sp,sp,#4
   3696 0000DACE F0 80                   		ret
                                        
   3698 0000DAD0                        DispByte:
   3699 0000DAD0 FC 6E                   		add		sp,sp,#-4
   3700 0000DAD2 E0 DF                   		sw		lr,[sp]
   3701 0000DAD4 E2 D1                   		sw		r1,2[sp]
   3702 0000DAD6 A1 31                   		shr		r1,#1
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 66
noc_boot11.a
   3703 0000DAD8 A1 31                   		shr		r1,#1
   3704 0000DADA A1 31                   		shr		r1,#1
   3705 0000DADC A1 31                   		shr		r1,#1
   3706 0000DADE 06 AF                   		call	DispNybble
   3707 0000DAE0 E2 F1                   		lw		r1,2[sp]
   3708 0000DAE2 04 AF                   		call	DispNybble
   3709 0000DAE4 E2 F1                   		lw		r1,2[sp]
   3710 0000DAE6 E0 FF                   		lw		lr,[sp]
   3711 0000DAE8 04 6E                   		add		sp,sp,#4
   3712 0000DAEA F0 80                   		ret
                                        
   3714 0000DAEC                        DispNybble:
   3715 0000DAEC FC 6E                   		add		sp,sp,#-4
   3716 0000DAEE E0 DF                   		sw		lr,[sp]
   3717 0000DAF0 E2 D1                   		sw		r1,2[sp]
   3718 0000DAF2 00 40 5F 31             		and		r1,#$0F
   3719 0000DAF6 FF 4F 16 10             		cmp		r1,#10
   3720 0000DAFA 04 A1                   		bge		DispNybble1
   3721 0000DAFC 03 40 60 31             		or		r1,#$30
   3722 0000DB00 47 AF                   		call	putcharScr
   3723 0000DB02 02 AE                   		br		DispNybble2
   3724 0000DB04                        DispNybble1:
   3725 0000DB04 37 61                   		add		r1,#'A'-10
   3726 0000DB06 44 AF                   		call	putcharScr
   3727 0000DB08                        DispNybble2:
   3728 0000DB08 E2 F1                   		lw		r1,2[sp]
   3729 0000DB0A E0 FF                   		lw		lr,[sp]
   3730 0000DB0C 04 6E                   		add		sp,sp,#4
   3731 0000DB0E F0 80                   		ret
                                        				
                                        ; Convert Ascii character to screen character.
                                        ;
                                        ; Parameters:
                                        ;	r1 = character to convert
                                        ; Returns:
                                        ;	r1 = converted character
                                        ;
                                        ;------------------------------------------------------------------------------
                                        
   3742 0000DB10                        AsciiToScreen:
   3743 0000DB10 FE 6E                   		add		sp,sp,#-2
   3744 0000DB12 E0 D2                   		sw		r2,[sp]
   3745 0000DB14 0F 40 5F 31             		and		r1,#$FF
   3746 0000DB18 10 12                   		mov		r2,r1
   3747 0000DB1A 02 40 50 32             		and		r2,#%00100000	; if bit 5 isn't set
   3748 0000DB1E 06 A8                   		beq		ats1
   3749 0000DB20 10 12                   		mov		r2,r1
   3750 0000DB22 04 40 50 32             		and		r2,#%01000000	; or bit 6 isn't set
   3751 0000DB26 02 A8                   		beq		ats1
   3752 0000DB28 09 40 5F 31             		and		r1,#%10011111
   3753 0000DB2C                        ats1:
   3754 0000DB2C E0 F2                   		lw		r2,[sp]
   3755 0000DB2E 02 6E                   		add		sp,sp,#2
   3756 0000DB30 F0 80                   		ret
                                        
                                        ;------------------------------------------------------------------------------
                                        ; Convert screen character to Ascii character.
                                        ;
                                        ; Parameters:
                                        ;	r1 = character to convert
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 67
noc_boot11.a
                                        ; Returns:
                                        ;	r1 = converted character
                                        ;
                                        ;------------------------------------------------------------------------------
                                        
   3768 0000DB32                        ScreenToAscii:
   3769 0000DB32 FE 4F 15 10             	cmp		r1,#26+1
   3770 0000DB36 01 A5                   	bgeu	ScreenToAscii1
   3771 0000DB38 60 61                   	add		r1,#$60
   3772 0000DB3A                        ScreenToAscii1:
   3773 0000DB3A F0 80                   	ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Clear the screen.
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	r1,r2,r3
                                        ;----------------------------------------------------------------------------
                                        
   3786 0000DB3C                        ClearScreen:
   3787 0000DB3C FE 6E                   		add		sp,sp,#-2
   3788 0000DB3E E0 DF                   		sw		lr,[sp]
   3789 0000DB40 02 40 00 11             		lw		r1,#' '
   3790 0000DB44 E5 BF                   		call	AsciiToScreen
   3791 0000DB46 03 40 0E F2             		lw		r2,NormAttr
   3792 0000DB4A 26 21                   		or		r1,r2
   3793 0000DB4C 10 13                   		mov		r3,r1
   3794 0000DB4E 64 40 0C 11             		lw		r1,#1612	; 52x31
   3795 0000DB52 00 42 00 12             		lw		r2,#TXTSCR
   3796 0000DB56                        cs1:
   3797 0000DB56 20 D3                   		sw		r3,[r2]
   3798 0000DB58 02 62                   		add		r2,r2,#2
   3799 0000DB5A FF 61                   		add		r1,r1,#-1
   3800 0000DB5C FC BB                   		bpl		cs1
   3801 0000DB5E E0 FF                   		lw		lr,[sp]
   3802 0000DB60 02 6E                   		add		sp,sp,#2
   3803 0000DB62 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Home the cursor
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	<none>
                                        ;----------------------------------------------------------------------------
                                        
   3816 0000DB64                        HomeCursor:
   3817 0000DB64 03 40 03 C0             		sb		r0,cursy
   3818 0000DB68 03 40 02 C0             		sb		r0,cursx
   3819 0000DB6C 03 40 04 D0             		sw		r0,pos
   3820 0000DB70 F0 80                   		ret
                                        
                                        ; flash the character at the screen position
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 68
noc_boot11.a
                                        ;   r1: 1 = flash, 0 = no flash
   3824 0000DB72                        flashCursor:
   3825 0000DB72 F0 80                   		ret
                                        
                                        ;-----------------------------------------------------------------
                                        ; Display a message on the screen
                                        ;
                                        ; Parameters:
                                        ;	r1 = message address
                                        ;	screen pos controls where message is displayed
                                        ; Returns:
                                        ; 	r1 = points to null character
                                        ;-----------------------------------------------------------------
                                        
   3837 0000DB74                        putmsgScr:
   3838 0000DB74 FC 6E                   	sub		sp,sp,#4	; allocate stack frame
   3839 0000DB76 E0 DF                   	sw		lr,[sp]	; save off link reg
   3840 0000DB78 E2 D3                   	sw		r3,2[sp]
   3841 0000DB7A 10 13                   	mov		r3,r1		; r3 = msg address
   3842 0000DB7C                        putmsg3:
   3843 0000DB7C 30 E1                   	lb		r1,[r3]		; get char to display
   3844 0000DB7E 03 A8                   	beq		putmsg4
   3845 0000DB80 07 AF                   	call	putcharScr	; store to screen
   3846 0000DB82 01 63                   	add		r3,r3,#1	; inc msg pointer
   3847 0000DB84 FB BE                   	br		putmsg3
   3848 0000DB86                        putmsg4:
   3849 0000DB86 30 11                   	mov		r1,r3
   3850 0000DB88 E2 F3                   	lw		r3,2[sp]
   3851 0000DB8A E0 FF                   	lw		lr,[sp]
   3852 0000DB8C 04 6E                   	add		sp,sp,#4
   3853 0000DB8E F0 80                   	ret
                                        
                                        
                                        ;-----------------------------------------------------------------
                                        ; Put a character to the screen
                                        ;
                                        ; Parameters:
                                        ;	r1.b = character to put
                                        ;-----------------------------------------------------------------
                                        
   3863 0000DB90                        putcharScr
   3864 0000DB90 F6 6E                   	sub		sp,sp,#10
   3865 0000DB92 E0 DF                   	sw		lr,[sp]
   3866 0000DB94 E2 D1                   	sw		r1,2[sp]
   3867 0000DB96 E4 D4                   	sw		r4,4[sp]
   3868 0000DB98 E6 D5                   	sw		r5,6[sp]
   3869 0000DB9A E8 D6                   	sw		r6,8[sp]
                                        
   3871 0000DB9C 0E 21                   	zxb		r1			; mask
                                        
                                        	; first turn off any flashing cursor - it may be moved
   3874 0000DB9E 10 14                   	lw		r4,r1
   3875 0000DBA0 00 11                   	lw		r1,#0
   3876 0000DBA2 E7 BF                   	call	flashCursor
   3877 0000DBA4 40 11                   	lw		r1,r4
                                        
                                        	; process carriage return
   3880 0000DBA6 FF 4F 13 10             	cmp		r1,#CR		; carriage return ?
   3881 0000DBAA 0A A9                   	bne		pc1
   3882 0000DBAC 03 40 04 F1             	lw		r1,pos		; subtract X from position
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 69
noc_boot11.a
   3883 0000DBB0 03 40 02 E4             	lb		r4,cursx
   3884 0000DBB4 42 21                   	sub		r1,r4
   3885 0000DBB6 03 40 04 D1             	sw		r1,pos
   3886 0000DBBA 03 40 02 C0             	sb		r0,cursx	; and set X to zero
   3887 0000DBBE 70 AE                   	jmp		pc7
                                        
                                        	; process line feed
   3890 0000DBC0                        pc1
   3891 0000DBC0 FF 4F 16 10             	cmp		r1,#LF		; line feed ?
   3892 0000DBC4 14 A9                   	bne		pc2
   3893 0000DBC6 03 40 03 E1             	lb		r1,cursy	; past line 31 ?
   3894 0000DBCA 03 40 01 E4             	lb		r4,txtHeight
   3895 0000DBCE FE 64                   	sub		r4,r4,#2
   3896 0000DBD0 4D 21                   	cmp		r1,r4
   3897 0000DBD2 02 A4                   	bltu	pc3			; if we are, then just scroll the screen
   3898 0000DBD4 73 AF                   	call	scrollScreenUp
   3899 0000DBD6 64 AE                   	jmp		pc7
   3900 0000DBD8                        pc3
   3901 0000DBD8 01 61                   	add		r1,r1,#1	; increment Y
   3902 0000DBDA 03 40 03 C1             	sb		r1,cursy
   3903 0000DBDE 03 40 04 F1             	lw		r1,pos		; and the cursor position
   3904 0000DBE2 03 40 00 E4             	lb		r4,txtWidth
   3905 0000DBE6 40 21                   	add		r1,r4
   3906 0000DBE8 03 40 04 D1             	sw		r1,pos
   3907 0000DBEC 59 AE                   	jmp		pc7
                                        
                                        	; backspace
   3910 0000DBEE                        pc2
   3911 0000DBEE FF 4F 18 10             	cmp		r1,#CTRLH	; backspace ?
   3912 0000DBF2 21 A9                   	bne		pc4
   3913 0000DBF4 03 40 02 E1             	lb		r1,cursx	; is cursor.x already zero ?
   3914 0000DBF8 01 A9                   	bne		pc5			
   3915 0000DBFA 52 AE                   	jmp		pc7			; can't backspace
   3916 0000DBFC                        pc5
   3917 0000DBFC FF 61                   	sub		r1,r1,#1
   3918 0000DBFE 03 40 02 C1             	sb		r1,cursx
   3919 0000DC02 03 40 04 F4             	lw		r4,pos
   3920 0000DC06 FF 64                   	sub		r4,r4,#1
   3921 0000DC08 03 40 04 D4             	sw		r4,pos
                                        	; shift remaining characters on line over
   3923 0000DC0C 81 34                   	shl		r4,#1		; r4 = n
   3924 0000DC0E 00 42 00 16             	lw		r6,#TXTSCR
   3925 0000DC12 40 26                   	add		r6,r4		; r6 = target pos
   3926 0000DC14 03 40 00 E4             	lb		r4,txtWidth
   3927 0000DC18 FE 64                   	sub		r4,r4,#2
   3928 0000DC1A                        pc6
   3929 0000DC1A 62 F5                   	lw		r5,2[r6]	; shift next char
   3930 0000DC1C 60 D5                   	sw		r5,[r6]		; over to this one
   3931 0000DC1E 02 66                   	add		r6,r6,#2
   3932 0000DC20 01 61                   	add		r1,r1,#1	; until X = 39
   3933 0000DC22 4D 21                   	cmp		r1,r4
   3934 0000DC24 FA B4                   	bltu	pc6
                                        	; blank trailing character
   3936 0000DC26 02 40 00 11             	lw		r1,#' '
   3937 0000DC2A 72 BF                   	call	AsciiToScreen
   3938 0000DC2C 03 40 0E F5             	lw		r5,NormAttr
   3939 0000DC30 56 21                   	or		r1,r5
   3940 0000DC32 60 D1                   	sw		r1,[r6]
   3941 0000DC34 35 AE                   	jmp		pc7
                                        
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 70
noc_boot11.a
                                        	; control character (non-printable)
   3944 0000DC36                        pc4
   3945 0000DC36 FE 4F 10 10             	cmp		r1,#' '
   3946 0000DC3A 01 A5                   	bgeu	pc11
   3947 0000DC3C 31 AE                   	jmp		pc7
                                        
                                        
                                        	; some other character
                                        	; put the character to the screen, then advance cursor
   3952 0000DC3E                        pc11
   3953 0000DC3E 68 BF                   	call	AsciiToScreen
   3954 0000DC40 03 40 0E F4             	lw		r4,NormAttr
   3955 0000DC44 46 21                   	or		r1,r4
   3956 0000DC46 00 42 00 14             	lw		r4,#TXTSCR
   3957 0000DC4A 03 40 04 F5             	lw		r5,pos
   3958 0000DC4E 81 35                   	shl		r5,#1		; pos * 2
   3959 0000DC50 50 24                   	add		r4,r5		; scr[pos]
   3960 0000DC52 40 D1                   	sw		r1,[r4]		; = char
                                        	; advance cursor
   3962 0000DC54 03 40 04 F5             	lw		r5,pos
   3963 0000DC58 03 40 00 E1             	lb		r1,txtWidth
   3964 0000DC5C FE 61                   	sub		r1,r1,#2
   3965 0000DC5E 03 40 02 E4             	lb		r4,cursx
   3966 0000DC62 1D 24                   	cmp		r4,r1		; would we be at end of line ?
   3967 0000DC64 17 A6                   	bleu	pc8
   3968 0000DC66 42 25                   	sub		r5,r4		; pos -= cursx
   3969 0000DC68 03 40 04 D5             	sw		r5,pos
   3970 0000DC6C 03 40 02 C0             	sb		r0,cursx	; cursor.x = 0
   3971 0000DC70 03 40 03 E4             	lb		r4,cursy
   3972 0000DC74 03 40 01 E1             	lb		r1,txtHeight
   3973 0000DC78 FE 61                   	sub		r1,r1,#2
   3974 0000DC7A 1D 24                   	cmp		r4,r1		; at last line of screen ?
   3975 0000DC7C 02 A6                   	bleu	pc9
   3976 0000DC7E 1E AF                   	call	scrollScreenUp	; yes, scroll
   3977 0000DC80 0F AE                   	br		pc7
   3978 0000DC82                        pc9
   3979 0000DC82 01 64                   	add		r4,r4,#1	; cursor.y++
   3980 0000DC84 03 40 03 C4             	sb		r4,cursy
   3981 0000DC88 03 40 00 E1             	lb		r1,txtWidth
   3982 0000DC8C 10 25                   	add		r5,r1		; pos += txtWidth
   3983 0000DC8E 03 40 04 D5             	sw		r5,pos
   3984 0000DC92 06 AE                   	br		pc7
   3985 0000DC94                        pc8						; not at EOL
   3986 0000DC94 01 64                   	add		r4,r4,#1	; cursor.x++
   3987 0000DC96 03 40 02 C4             	sb		r4,cursx
   3988 0000DC9A 01 65                   	add		r5,r5,#1	; pos++
   3989 0000DC9C 03 40 04 D5             	sw		r5,pos
                                        
   3991 0000DCA0                        pc7
   3992 0000DCA0 03 40 0C E1             	lb		r1,cursFlash	; flash or don't flash the cursor
   3993 0000DCA4 66 BF                   	call	flashCursor
   3994 0000DCA6 03 40 04 F5             	lw		r5,pos
   3995 0000DCAA 10 4B 0E D5             	sw		r5,TXTCTRL+14
   3996 0000DCAE E0 FF                   	lw		lr,[sp]
   3997 0000DCB0 E2 F1                   	lw		r1,2[sp]
   3998 0000DCB2 E4 F4                   	lw		r4,4[sp]
   3999 0000DCB4 E6 F5                   	lw		r5,6[sp]
   4000 0000DCB6 E8 F6                   	lw		r6,8[sp]
   4001 0000DCB8 0A 6E                   	add		sp,sp,#10
   4002 0000DCBA F0 80                   	ret
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 71
noc_boot11.a
                                        
   4004 0000DCBC                        scrollScreenUp:
   4005 0000DCBC FC 6E                   	sub		sp,sp,#4
   4006 0000DCBE E0 DF                   	sw		lr,[sp]
   4007 0000DCC0 E2 D5                   	sw		r5,2[sp]
   4008 0000DCC2 61 40 07 13             	lw		r3,#1559	; number of chars to move - 1
   4009 0000DCC6 00 42 00 12             	lw		r2,#TXTSCR
   4010 0000DCCA 03 40 00 E1             	lb		r1,txtWidth
   4011 0000DCCE 81 31                   	shl		r1,#1
   4012 0000DCD0                        scrollScreenUp1:
   4013 0000DCD0 20 15                   	mov		r5,r2
   4014 0000DCD2 10 25                   	add		r5,r1
   4015 0000DCD4 50 F4                   	lw		r4,[r5]		; char at next line
   4016 0000DCD6 20 D4                   	sw		r4,[r2]		; goes to this line
   4017 0000DCD8 02 62                   	add		r2,r2,#2
   4018 0000DCDA FF 63                   	sub		r3,r3,#1
   4019 0000DCDC F9 B9                   	bne     scrollScreenUp1
                                        	; blank out last line
   4021 0000DCDE 02 40 00 11             	lw		r1,#' '
   4022 0000DCE2 16 BF                   	call	AsciiToScreen
   4023 0000DCE4 03 40 0E F3             	lw		r3,NormAttr
   4024 0000DCE8 36 21                   	or		r1,r3
   4025 0000DCEA 03 40 00 E3             	lb		r3,txtWidth
   4026 0000DCEE                        scrollScreenUp2:
   4027 0000DCEE 20 D1                   	sw		r1,[r2]
   4028 0000DCF0 02 62                   	add		r2,r2,#2
   4029 0000DCF2 FF 63                   	sub		r3,r3,#1
   4030 0000DCF4 FC B9                   	bne     scrollScreenUp2
   4031 0000DCF6 E0 FF                   	lw		lr,[sp]
   4032 0000DCF8 E2 F5                   	lw		r5,2[sp]
   4033 0000DCFA 04 6E                   	add		sp,sp,#4
   4034 0000DCFC F0 80                   	ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Get character from keyboard buffer. Characters are placed in the buffer
                                        ; when a keystroke message is sent by node $21.
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	r1 = ascii character, 0 if no char available.
                                        ;	.ZF = 1 if no char available, otherwise .ZF = 0
                                        ;----------------------------------------------------------------------------
                                        
   4047 0000DCFE                        kbdGetChar:
   4048 0000DCFE 0A 40 02 E1             	lb		r1,kbdcnt
   4049 0000DD02 10 A8                   	beq		kbdGetCharXitZero
   4050 0000DD04 FE 6E                   	add		sp,sp,#-2
   4051 0000DD06 E0 D2                   	sw		r2,[sp]
   4052 0000DD08 FF 61                   	sub		r1,r1,#1
   4053 0000DD0A 0A 40 02 C1             	sb		r1,kbdcnt
   4054 0000DD0E 0A 40 01 E2             	lb		r2,kbdtail
   4055 0000DD12 06 40 20 E1             	lb		r1,kbdbuf[r2]
   4056 0000DD16 02 62                   	add		r2,r2,#2
   4057 0000DD18 01 40 5E 32             	and		r2,#30
   4058 0000DD1C 0A 40 01 C2             	sb		r2,kbdtail
   4059 0000DD20 E0 F2                   	lw		r2,[sp]
   4060 0000DD22 02 6E                   	add		sp,sp,#2			; this should leave the ZF clear
   4061 0000DD24                        kbdGetCharXitZero:
   4062 0000DD24 F0 80                   	ret
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 72
noc_boot11.a
                                        
   4064 0000DD26                        		
   4065 0000DD26 42 75 74 74 65 72 66    	db	"Butterfly Grid Computer Starting",0
   4065 0000DD2D 6C 79 20 47 72 69 64  
   4065 0000DD34 20 43 6F 6D 70 75 74  
   4065 0000DD3B 65 72 20 53 74 61 72  
   4065 0000DD42 74 69 6E 67 00        
                                        
   4067 0000DD47                        txtctrl_dat:
   4068 0000DD47 34 1F 34 00 10 00 07    	db	52,31,52,0,16,0,7,$22,$1F,$E0,31,0,0,0,3,0
   4068 0000DD4E 22 1F E0 1F 00 00 00  
   4068 0000DD55 03 00                 
                                        
                                        	; Table of offsets of start of video line in video
                                        	; memory assuming 52 chars per line.
   4072 0000DD57 FF                      	.align	2
   4073 0000DD58                        lineTbl:
   4074 0000DD58 00 00 68 00 D0 00 38    	dw	0,104,208,312,416,520,624,728
   4074 0000DD5F 01 A0 01 08 02 70 02  
   4074 0000DD66 D8 02                 
   4075 0000DD68 40 03 A8 03 10 04 78    	dw	832,936,1040,1144,1248,1352,1456,1560,
   4075 0000DD6F 04 E0 04 48 05 B0 05  
   4075 0000DD76 18 06                 
   4076 0000DD78 80 06 E8 06 50 07 B8    	dw	1664,1768,1872,1976,2080,2184,2288,2392,
   4076 0000DD7F 07 20 08 88 08 F0 08  
   4076 0000DD86 58 09                 
   4077 0000DD88 C0 09 28 0A 90 0A F8    	dw	2496,2600,2704,2808,2912,3016,3120,3224
   4077 0000DD8F 0A 60 0B C8 0B 30 0C  
   4077 0000DD96 98 0C                 
                                        ; 56 columns display table
                                        ;	dw	0,112,224,336,448,560,672,784
                                        ;	dw	896,1008,1120,1232,1344,1456,1568,1680
                                        ;	dw	1792,1804,1916,2028,2140,2252,2364,2476
                                        ;	dw	2588,2700,2812,2924,3036,3148,3260,3372
                                        
   4084 0000DD98 FF FF FF FF FF FF FF    		org		0xFFFE
   4084 0000DD9F FF FF FF FF FF FF FF  
   4084 0000DDA6 FF FF FF FF FF FF FF  
   4084 0000DDAD FF FF FF FF FF FF FF  
   4084 0000DDB4 FF FF FF FF FF FF FF  
   4084 0000DDBB FF FF FF FF FF FF FF  
   4084 0000DDC2 FF FF FF FF FF FF FF  
   4084 0000DDC9 FF FF FF FF FF FF FF  
   4084 0000DDD0 FF FF FF FF FF FF FF  
   4084 0000DDD7 FF FF FF FF FF FF FF  
   4084 0000DDDE FF FF FF FF FF FF FF  
   4084 0000DDE5 FF FF FF FF FF FF FF  
   4084 0000DDEC FF FF FF FF FF FF FF  
   4084 0000DDF3 FF FF FF FF FF FF FF  
   4084 0000DDFA FF FF FF FF FF FF FF  
   4084 0000DE01 FF FF FF FF FF FF FF  
   4084 0000DE08 FF FF FF FF FF FF FF  
   4084 0000DE0F FF FF FF FF FF FF FF  
   4084 0000DE16 FF FF FF FF FF FF FF  
   4084 0000DE1D FF FF FF FF FF FF FF  
   4084 0000DE24 FF FF FF FF FF FF FF  
   4084 0000DE2B FF FF FF FF FF FF FF  
   4084 0000DE32 FF FF FF FF FF FF FF  
   4084 0000DE39 FF FF FF FF FF FF FF  
   4084 0000DE40 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 73
noc_boot11.a
   4084 0000DE47 FF FF FF FF FF FF FF  
   4084 0000DE4E FF FF FF FF FF FF FF  
   4084 0000DE55 FF FF FF FF FF FF FF  
   4084 0000DE5C FF FF FF FF FF FF FF  
   4084 0000DE63 FF FF FF FF FF FF FF  
   4084 0000DE6A FF FF FF FF FF FF FF  
   4084 0000DE71 FF FF FF FF FF FF FF  
   4084 0000DE78 FF FF FF FF FF FF FF  
   4084 0000DE7F FF FF FF FF FF FF FF  
   4084 0000DE86 FF FF FF FF FF FF FF  
   4084 0000DE8D FF FF FF FF FF FF FF  
   4084 0000DE94 FF FF FF FF FF FF FF  
   4084 0000DE9B FF FF FF FF FF FF FF  
   4084 0000DEA2 FF FF FF FF FF FF FF  
   4084 0000DEA9 FF FF FF FF FF FF FF  
   4084 0000DEB0 FF FF FF FF FF FF FF  
   4084 0000DEB7 FF FF FF FF FF FF FF  
   4084 0000DEBE FF FF FF FF FF FF FF  
   4084 0000DEC5 FF FF FF FF FF FF FF  
   4084 0000DECC FF FF FF FF FF FF FF  
   4084 0000DED3 FF FF FF FF FF FF FF  
   4084 0000DEDA FF FF FF FF FF FF FF  
   4084 0000DEE1 FF FF FF FF FF FF FF  
   4084 0000DEE8 FF FF FF FF FF FF FF  
   4084 0000DEEF FF FF FF FF FF FF FF  
   4084 0000DEF6 FF FF FF FF FF FF FF  
   4084 0000DEFD FF FF FF FF FF FF FF  
   4084 0000DF04 FF FF FF FF FF FF FF  
   4084 0000DF0B FF FF FF FF FF FF FF  
   4084 0000DF12 FF FF FF FF FF FF FF  
   4084 0000DF19 FF FF FF FF FF FF FF  
   4084 0000DF20 FF FF FF FF FF FF FF  
   4084 0000DF27 FF FF FF FF FF FF FF  
   4084 0000DF2E FF FF FF FF FF FF FF  
   4084 0000DF35 FF FF FF FF FF FF FF  
   4084 0000DF3C FF FF FF FF FF FF FF  
   4084 0000DF43 FF FF FF FF FF FF FF  
   4084 0000DF4A FF FF FF FF FF FF FF  
   4084 0000DF51 FF FF FF FF FF FF FF  
   4084 0000DF58 FF FF FF FF FF FF FF  
   4084 0000DF5F FF FF FF FF FF FF FF  
   4084 0000DF66 FF FF FF FF FF FF FF  
   4084 0000DF6D FF FF FF FF FF FF FF  
   4084 0000DF74 FF FF FF FF FF FF FF  
   4084 0000DF7B FF FF FF FF FF FF FF  
   4084 0000DF82 FF FF FF FF FF FF FF  
   4084 0000DF89 FF FF FF FF FF FF FF  
   4084 0000DF90 FF FF FF FF FF FF FF  
   4084 0000DF97 FF FF FF FF FF FF FF  
   4084 0000DF9E FF FF FF FF FF FF FF  
   4084 0000DFA5 FF FF FF FF FF FF FF  
   4084 0000DFAC FF FF FF FF FF FF FF  
   4084 0000DFB3 FF FF FF FF FF FF FF  
   4084 0000DFBA FF FF FF FF FF FF FF  
   4084 0000DFC1 FF FF FF FF FF FF FF  
   4084 0000DFC8 FF FF FF FF FF FF FF  
   4084 0000DFCF FF FF FF FF FF FF FF  
   4084 0000DFD6 FF FF FF FF FF FF FF  
   4084 0000DFDD FF FF FF FF FF FF FF  
   4084 0000DFE4 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 74
noc_boot11.a
   4084 0000DFEB FF FF FF FF FF FF FF  
   4084 0000DFF2 FF FF FF FF FF FF FF  
   4084 0000DFF9 FF FF FF FF FF FF FF  
   4084 0000E000 FF FF FF FF FF FF FF  
   4084 0000E007 FF FF FF FF FF FF FF  
   4084 0000E00E FF FF FF FF FF FF FF  
   4084 0000E015 FF FF FF FF FF FF FF  
   4084 0000E01C FF FF FF FF FF FF FF  
   4084 0000E023 FF FF FF FF FF FF FF  
   4084 0000E02A FF FF FF FF FF FF FF  
   4084 0000E031 FF FF FF FF FF FF FF  
   4084 0000E038 FF FF FF FF FF FF FF  
   4084 0000E03F FF FF FF FF FF FF FF  
   4084 0000E046 FF FF FF FF FF FF FF  
   4084 0000E04D FF FF FF FF FF FF FF  
   4084 0000E054 FF FF FF FF FF FF FF  
   4084 0000E05B FF FF FF FF FF FF FF  
   4084 0000E062 FF FF FF FF FF FF FF  
   4084 0000E069 FF FF FF FF FF FF FF  
   4084 0000E070 FF FF FF FF FF FF FF  
   4084 0000E077 FF FF FF FF FF FF FF  
   4084 0000E07E FF FF FF FF FF FF FF  
   4084 0000E085 FF FF FF FF FF FF FF  
   4084 0000E08C FF FF FF FF FF FF FF  
   4084 0000E093 FF FF FF FF FF FF FF  
   4084 0000E09A FF FF FF FF FF FF FF  
   4084 0000E0A1 FF FF FF FF FF FF FF  
   4084 0000E0A8 FF FF FF FF FF FF FF  
   4084 0000E0AF FF FF FF FF FF FF FF  
   4084 0000E0B6 FF FF FF FF FF FF FF  
   4084 0000E0BD FF FF FF FF FF FF FF  
   4084 0000E0C4 FF FF FF FF FF FF FF  
   4084 0000E0CB FF FF FF FF FF FF FF  
   4084 0000E0D2 FF FF FF FF FF FF FF  
   4084 0000E0D9 FF FF FF FF FF FF FF  
   4084 0000E0E0 FF FF FF FF FF FF FF  
   4084 0000E0E7 FF FF FF FF FF FF FF  
   4084 0000E0EE FF FF FF FF FF FF FF  
   4084 0000E0F5 FF FF FF FF FF FF FF  
   4084 0000E0FC FF FF FF FF FF FF FF  
   4084 0000E103 FF FF FF FF FF FF FF  
   4084 0000E10A FF FF FF FF FF FF FF  
   4084 0000E111 FF FF FF FF FF FF FF  
   4084 0000E118 FF FF FF FF FF FF FF  
   4084 0000E11F FF FF FF FF FF FF FF  
   4084 0000E126 FF FF FF FF FF FF FF  
   4084 0000E12D FF FF FF FF FF FF FF  
   4084 0000E134 FF FF FF FF FF FF FF  
   4084 0000E13B FF FF FF FF FF FF FF  
   4084 0000E142 FF FF FF FF FF FF FF  
   4084 0000E149 FF FF FF FF FF FF FF  
   4084 0000E150 FF FF FF FF FF FF FF  
   4084 0000E157 FF FF FF FF FF FF FF  
   4084 0000E15E FF FF FF FF FF FF FF  
   4084 0000E165 FF FF FF FF FF FF FF  
   4084 0000E16C FF FF FF FF FF FF FF  
   4084 0000E173 FF FF FF FF FF FF FF  
   4084 0000E17A FF FF FF FF FF FF FF  
   4084 0000E181 FF FF FF FF FF FF FF  
   4084 0000E188 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 75
noc_boot11.a
   4084 0000E18F FF FF FF FF FF FF FF  
   4084 0000E196 FF FF FF FF FF FF FF  
   4084 0000E19D FF FF FF FF FF FF FF  
   4084 0000E1A4 FF FF FF FF FF FF FF  
   4084 0000E1AB FF FF FF FF FF FF FF  
   4084 0000E1B2 FF FF FF FF FF FF FF  
   4084 0000E1B9 FF FF FF FF FF FF FF  
   4084 0000E1C0 FF FF FF FF FF FF FF  
   4084 0000E1C7 FF FF FF FF FF FF FF  
   4084 0000E1CE FF FF FF FF FF FF FF  
   4084 0000E1D5 FF FF FF FF FF FF FF  
   4084 0000E1DC FF FF FF FF FF FF FF  
   4084 0000E1E3 FF FF FF FF FF FF FF  
   4084 0000E1EA FF FF FF FF FF FF FF  
   4084 0000E1F1 FF FF FF FF FF FF FF  
   4084 0000E1F8 FF FF FF FF FF FF FF  
   4084 0000E1FF FF FF FF FF FF FF FF  
   4084 0000E206 FF FF FF FF FF FF FF  
   4084 0000E20D FF FF FF FF FF FF FF  
   4084 0000E214 FF FF FF FF FF FF FF  
   4084 0000E21B FF FF FF FF FF FF FF  
   4084 0000E222 FF FF FF FF FF FF FF  
   4084 0000E229 FF FF FF FF FF FF FF  
   4084 0000E230 FF FF FF FF FF FF FF  
   4084 0000E237 FF FF FF FF FF FF FF  
   4084 0000E23E FF FF FF FF FF FF FF  
   4084 0000E245 FF FF FF FF FF FF FF  
   4084 0000E24C FF FF FF FF FF FF FF  
   4084 0000E253 FF FF FF FF FF FF FF  
   4084 0000E25A FF FF FF FF FF FF FF  
   4084 0000E261 FF FF FF FF FF FF FF  
   4084 0000E268 FF FF FF FF FF FF FF  
   4084 0000E26F FF FF FF FF FF FF FF  
   4084 0000E276 FF FF FF FF FF FF FF  
   4084 0000E27D FF FF FF FF FF FF FF  
   4084 0000E284 FF FF FF FF FF FF FF  
   4084 0000E28B FF FF FF FF FF FF FF  
   4084 0000E292 FF FF FF FF FF FF FF  
   4084 0000E299 FF FF FF FF FF FF FF  
   4084 0000E2A0 FF FF FF FF FF FF FF  
   4084 0000E2A7 FF FF FF FF FF FF FF  
   4084 0000E2AE FF FF FF FF FF FF FF  
   4084 0000E2B5 FF FF FF FF FF FF FF  
   4084 0000E2BC FF FF FF FF FF FF FF  
   4084 0000E2C3 FF FF FF FF FF FF FF  
   4084 0000E2CA FF FF FF FF FF FF FF  
   4084 0000E2D1 FF FF FF FF FF FF FF  
   4084 0000E2D8 FF FF FF FF FF FF FF  
   4084 0000E2DF FF FF FF FF FF FF FF  
   4084 0000E2E6 FF FF FF FF FF FF FF  
   4084 0000E2ED FF FF FF FF FF FF FF  
   4084 0000E2F4 FF FF FF FF FF FF FF  
   4084 0000E2FB FF FF FF FF FF FF FF  
   4084 0000E302 FF FF FF FF FF FF FF  
   4084 0000E309 FF FF FF FF FF FF FF  
   4084 0000E310 FF FF FF FF FF FF FF  
   4084 0000E317 FF FF FF FF FF FF FF  
   4084 0000E31E FF FF FF FF FF FF FF  
   4084 0000E325 FF FF FF FF FF FF FF  
   4084 0000E32C FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 76
noc_boot11.a
   4084 0000E333 FF FF FF FF FF FF FF  
   4084 0000E33A FF FF FF FF FF FF FF  
   4084 0000E341 FF FF FF FF FF FF FF  
   4084 0000E348 FF FF FF FF FF FF FF  
   4084 0000E34F FF FF FF FF FF FF FF  
   4084 0000E356 FF FF FF FF FF FF FF  
   4084 0000E35D FF FF FF FF FF FF FF  
   4084 0000E364 FF FF FF FF FF FF FF  
   4084 0000E36B FF FF FF FF FF FF FF  
   4084 0000E372 FF FF FF FF FF FF FF  
   4084 0000E379 FF FF FF FF FF FF FF  
   4084 0000E380 FF FF FF FF FF FF FF  
   4084 0000E387 FF FF FF FF FF FF FF  
   4084 0000E38E FF FF FF FF FF FF FF  
   4084 0000E395 FF FF FF FF FF FF FF  
   4084 0000E39C FF FF FF FF FF FF FF  
   4084 0000E3A3 FF FF FF FF FF FF FF  
   4084 0000E3AA FF FF FF FF FF FF FF  
   4084 0000E3B1 FF FF FF FF FF FF FF  
   4084 0000E3B8 FF FF FF FF FF FF FF  
   4084 0000E3BF FF FF FF FF FF FF FF  
   4084 0000E3C6 FF FF FF FF FF FF FF  
   4084 0000E3CD FF FF FF FF FF FF FF  
   4084 0000E3D4 FF FF FF FF FF FF FF  
   4084 0000E3DB FF FF FF FF FF FF FF  
   4084 0000E3E2 FF FF FF FF FF FF FF  
   4084 0000E3E9 FF FF FF FF FF FF FF  
   4084 0000E3F0 FF FF FF FF FF FF FF  
   4084 0000E3F7 FF FF FF FF FF FF FF  
   4084 0000E3FE FF FF FF FF FF FF FF  
   4084 0000E405 FF FF FF FF FF FF FF  
   4084 0000E40C FF FF FF FF FF FF FF  
   4084 0000E413 FF FF FF FF FF FF FF  
   4084 0000E41A FF FF FF FF FF FF FF  
   4084 0000E421 FF FF FF FF FF FF FF  
   4084 0000E428 FF FF FF FF FF FF FF  
   4084 0000E42F FF FF FF FF FF FF FF  
   4084 0000E436 FF FF FF FF FF FF FF  
   4084 0000E43D FF FF FF FF FF FF FF  
   4084 0000E444 FF FF FF FF FF FF FF  
   4084 0000E44B FF FF FF FF FF FF FF  
   4084 0000E452 FF FF FF FF FF FF FF  
   4084 0000E459 FF FF FF FF FF FF FF  
   4084 0000E460 FF FF FF FF FF FF FF  
   4084 0000E467 FF FF FF FF FF FF FF  
   4084 0000E46E FF FF FF FF FF FF FF  
   4084 0000E475 FF FF FF FF FF FF FF  
   4084 0000E47C FF FF FF FF FF FF FF  
   4084 0000E483 FF FF FF FF FF FF FF  
   4084 0000E48A FF FF FF FF FF FF FF  
   4084 0000E491 FF FF FF FF FF FF FF  
   4084 0000E498 FF FF FF FF FF FF FF  
   4084 0000E49F FF FF FF FF FF FF FF  
   4084 0000E4A6 FF FF FF FF FF FF FF  
   4084 0000E4AD FF FF FF FF FF FF FF  
   4084 0000E4B4 FF FF FF FF FF FF FF  
   4084 0000E4BB FF FF FF FF FF FF FF  
   4084 0000E4C2 FF FF FF FF FF FF FF  
   4084 0000E4C9 FF FF FF FF FF FF FF  
   4084 0000E4D0 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 77
noc_boot11.a
   4084 0000E4D7 FF FF FF FF FF FF FF  
   4084 0000E4DE FF FF FF FF FF FF FF  
   4084 0000E4E5 FF FF FF FF FF FF FF  
   4084 0000E4EC FF FF FF FF FF FF FF  
   4084 0000E4F3 FF FF FF FF FF FF FF  
   4084 0000E4FA FF FF FF FF FF FF FF  
   4084 0000E501 FF FF FF FF FF FF FF  
   4084 0000E508 FF FF FF FF FF FF FF  
   4084 0000E50F FF FF FF FF FF FF FF  
   4084 0000E516 FF FF FF FF FF FF FF  
   4084 0000E51D FF FF FF FF FF FF FF  
   4084 0000E524 FF FF FF FF FF FF FF  
   4084 0000E52B FF FF FF FF FF FF FF  
   4084 0000E532 FF FF FF FF FF FF FF  
   4084 0000E539 FF FF FF FF FF FF FF  
   4084 0000E540 FF FF FF FF FF FF FF  
   4084 0000E547 FF FF FF FF FF FF FF  
   4084 0000E54E FF FF FF FF FF FF FF  
   4084 0000E555 FF FF FF FF FF FF FF  
   4084 0000E55C FF FF FF FF FF FF FF  
   4084 0000E563 FF FF FF FF FF FF FF  
   4084 0000E56A FF FF FF FF FF FF FF  
   4084 0000E571 FF FF FF FF FF FF FF  
   4084 0000E578 FF FF FF FF FF FF FF  
   4084 0000E57F FF FF FF FF FF FF FF  
   4084 0000E586 FF FF FF FF FF FF FF  
   4084 0000E58D FF FF FF FF FF FF FF  
   4084 0000E594 FF FF FF FF FF FF FF  
   4084 0000E59B FF FF FF FF FF FF FF  
   4084 0000E5A2 FF FF FF FF FF FF FF  
   4084 0000E5A9 FF FF FF FF FF FF FF  
   4084 0000E5B0 FF FF FF FF FF FF FF  
   4084 0000E5B7 FF FF FF FF FF FF FF  
   4084 0000E5BE FF FF FF FF FF FF FF  
   4084 0000E5C5 FF FF FF FF FF FF FF  
   4084 0000E5CC FF FF FF FF FF FF FF  
   4084 0000E5D3 FF FF FF FF FF FF FF  
   4084 0000E5DA FF FF FF FF FF FF FF  
   4084 0000E5E1 FF FF FF FF FF FF FF  
   4084 0000E5E8 FF FF FF FF FF FF FF  
   4084 0000E5EF FF FF FF FF FF FF FF  
   4084 0000E5F6 FF FF FF FF FF FF FF  
   4084 0000E5FD FF FF FF FF FF FF FF  
   4084 0000E604 FF FF FF FF FF FF FF  
   4084 0000E60B FF FF FF FF FF FF FF  
   4084 0000E612 FF FF FF FF FF FF FF  
   4084 0000E619 FF FF FF FF FF FF FF  
   4084 0000E620 FF FF FF FF FF FF FF  
   4084 0000E627 FF FF FF FF FF FF FF  
   4084 0000E62E FF FF FF FF FF FF FF  
   4084 0000E635 FF FF FF FF FF FF FF  
   4084 0000E63C FF FF FF FF FF FF FF  
   4084 0000E643 FF FF FF FF FF FF FF  
   4084 0000E64A FF FF FF FF FF FF FF  
   4084 0000E651 FF FF FF FF FF FF FF  
   4084 0000E658 FF FF FF FF FF FF FF  
   4084 0000E65F FF FF FF FF FF FF FF  
   4084 0000E666 FF FF FF FF FF FF FF  
   4084 0000E66D FF FF FF FF FF FF FF  
   4084 0000E674 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 78
noc_boot11.a
   4084 0000E67B FF FF FF FF FF FF FF  
   4084 0000E682 FF FF FF FF FF FF FF  
   4084 0000E689 FF FF FF FF FF FF FF  
   4084 0000E690 FF FF FF FF FF FF FF  
   4084 0000E697 FF FF FF FF FF FF FF  
   4084 0000E69E FF FF FF FF FF FF FF  
   4084 0000E6A5 FF FF FF FF FF FF FF  
   4084 0000E6AC FF FF FF FF FF FF FF  
   4084 0000E6B3 FF FF FF FF FF FF FF  
   4084 0000E6BA FF FF FF FF FF FF FF  
   4084 0000E6C1 FF FF FF FF FF FF FF  
   4084 0000E6C8 FF FF FF FF FF FF FF  
   4084 0000E6CF FF FF FF FF FF FF FF  
   4084 0000E6D6 FF FF FF FF FF FF FF  
   4084 0000E6DD FF FF FF FF FF FF FF  
   4084 0000E6E4 FF FF FF FF FF FF FF  
   4084 0000E6EB FF FF FF FF FF FF FF  
   4084 0000E6F2 FF FF FF FF FF FF FF  
   4084 0000E6F9 FF FF FF FF FF FF FF  
   4084 0000E700 FF FF FF FF FF FF FF  
   4084 0000E707 FF FF FF FF FF FF FF  
   4084 0000E70E FF FF FF FF FF FF FF  
   4084 0000E715 FF FF FF FF FF FF FF  
   4084 0000E71C FF FF FF FF FF FF FF  
   4084 0000E723 FF FF FF FF FF FF FF  
   4084 0000E72A FF FF FF FF FF FF FF  
   4084 0000E731 FF FF FF FF FF FF FF  
   4084 0000E738 FF FF FF FF FF FF FF  
   4084 0000E73F FF FF FF FF FF FF FF  
   4084 0000E746 FF FF FF FF FF FF FF  
   4084 0000E74D FF FF FF FF FF FF FF  
   4084 0000E754 FF FF FF FF FF FF FF  
   4084 0000E75B FF FF FF FF FF FF FF  
   4084 0000E762 FF FF FF FF FF FF FF  
   4084 0000E769 FF FF FF FF FF FF FF  
   4084 0000E770 FF FF FF FF FF FF FF  
   4084 0000E777 FF FF FF FF FF FF FF  
   4084 0000E77E FF FF FF FF FF FF FF  
   4084 0000E785 FF FF FF FF FF FF FF  
   4084 0000E78C FF FF FF FF FF FF FF  
   4084 0000E793 FF FF FF FF FF FF FF  
   4084 0000E79A FF FF FF FF FF FF FF  
   4084 0000E7A1 FF FF FF FF FF FF FF  
   4084 0000E7A8 FF FF FF FF FF FF FF  
   4084 0000E7AF FF FF FF FF FF FF FF  
   4084 0000E7B6 FF FF FF FF FF FF FF  
   4084 0000E7BD FF FF FF FF FF FF FF  
   4084 0000E7C4 FF FF FF FF FF FF FF  
   4084 0000E7CB FF FF FF FF FF FF FF  
   4084 0000E7D2 FF FF FF FF FF FF FF  
   4084 0000E7D9 FF FF FF FF FF FF FF  
   4084 0000E7E0 FF FF FF FF FF FF FF  
   4084 0000E7E7 FF FF FF FF FF FF FF  
   4084 0000E7EE FF FF FF FF FF FF FF  
   4084 0000E7F5 FF FF FF FF FF FF FF  
   4084 0000E7FC FF FF FF FF FF FF FF  
   4084 0000E803 FF FF FF FF FF FF FF  
   4084 0000E80A FF FF FF FF FF FF FF  
   4084 0000E811 FF FF FF FF FF FF FF  
   4084 0000E818 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 79
noc_boot11.a
   4084 0000E81F FF FF FF FF FF FF FF  
   4084 0000E826 FF FF FF FF FF FF FF  
   4084 0000E82D FF FF FF FF FF FF FF  
   4084 0000E834 FF FF FF FF FF FF FF  
   4084 0000E83B FF FF FF FF FF FF FF  
   4084 0000E842 FF FF FF FF FF FF FF  
   4084 0000E849 FF FF FF FF FF FF FF  
   4084 0000E850 FF FF FF FF FF FF FF  
   4084 0000E857 FF FF FF FF FF FF FF  
   4084 0000E85E FF FF FF FF FF FF FF  
   4084 0000E865 FF FF FF FF FF FF FF  
   4084 0000E86C FF FF FF FF FF FF FF  
   4084 0000E873 FF FF FF FF FF FF FF  
   4084 0000E87A FF FF FF FF FF FF FF  
   4084 0000E881 FF FF FF FF FF FF FF  
   4084 0000E888 FF FF FF FF FF FF FF  
   4084 0000E88F FF FF FF FF FF FF FF  
   4084 0000E896 FF FF FF FF FF FF FF  
   4084 0000E89D FF FF FF FF FF FF FF  
   4084 0000E8A4 FF FF FF FF FF FF FF  
   4084 0000E8AB FF FF FF FF FF FF FF  
   4084 0000E8B2 FF FF FF FF FF FF FF  
   4084 0000E8B9 FF FF FF FF FF FF FF  
   4084 0000E8C0 FF FF FF FF FF FF FF  
   4084 0000E8C7 FF FF FF FF FF FF FF  
   4084 0000E8CE FF FF FF FF FF FF FF  
   4084 0000E8D5 FF FF FF FF FF FF FF  
   4084 0000E8DC FF FF FF FF FF FF FF  
   4084 0000E8E3 FF FF FF FF FF FF FF  
   4084 0000E8EA FF FF FF FF FF FF FF  
   4084 0000E8F1 FF FF FF FF FF FF FF  
   4084 0000E8F8 FF FF FF FF FF FF FF  
   4084 0000E8FF FF FF FF FF FF FF FF  
   4084 0000E906 FF FF FF FF FF FF FF  
   4084 0000E90D FF FF FF FF FF FF FF  
   4084 0000E914 FF FF FF FF FF FF FF  
   4084 0000E91B FF FF FF FF FF FF FF  
   4084 0000E922 FF FF FF FF FF FF FF  
   4084 0000E929 FF FF FF FF FF FF FF  
   4084 0000E930 FF FF FF FF FF FF FF  
   4084 0000E937 FF FF FF FF FF FF FF  
   4084 0000E93E FF FF FF FF FF FF FF  
   4084 0000E945 FF FF FF FF FF FF FF  
   4084 0000E94C FF FF FF FF FF FF FF  
   4084 0000E953 FF FF FF FF FF FF FF  
   4084 0000E95A FF FF FF FF FF FF FF  
   4084 0000E961 FF FF FF FF FF FF FF  
   4084 0000E968 FF FF FF FF FF FF FF  
   4084 0000E96F FF FF FF FF FF FF FF  
   4084 0000E976 FF FF FF FF FF FF FF  
   4084 0000E97D FF FF FF FF FF FF FF  
   4084 0000E984 FF FF FF FF FF FF FF  
   4084 0000E98B FF FF FF FF FF FF FF  
   4084 0000E992 FF FF FF FF FF FF FF  
   4084 0000E999 FF FF FF FF FF FF FF  
   4084 0000E9A0 FF FF FF FF FF FF FF  
   4084 0000E9A7 FF FF FF FF FF FF FF  
   4084 0000E9AE FF FF FF FF FF FF FF  
   4084 0000E9B5 FF FF FF FF FF FF FF  
   4084 0000E9BC FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 80
noc_boot11.a
   4084 0000E9C3 FF FF FF FF FF FF FF  
   4084 0000E9CA FF FF FF FF FF FF FF  
   4084 0000E9D1 FF FF FF FF FF FF FF  
   4084 0000E9D8 FF FF FF FF FF FF FF  
   4084 0000E9DF FF FF FF FF FF FF FF  
   4084 0000E9E6 FF FF FF FF FF FF FF  
   4084 0000E9ED FF FF FF FF FF FF FF  
   4084 0000E9F4 FF FF FF FF FF FF FF  
   4084 0000E9FB FF FF FF FF FF FF FF  
   4084 0000EA02 FF FF FF FF FF FF FF  
   4084 0000EA09 FF FF FF FF FF FF FF  
   4084 0000EA10 FF FF FF FF FF FF FF  
   4084 0000EA17 FF FF FF FF FF FF FF  
   4084 0000EA1E FF FF FF FF FF FF FF  
   4084 0000EA25 FF FF FF FF FF FF FF  
   4084 0000EA2C FF FF FF FF FF FF FF  
   4084 0000EA33 FF FF FF FF FF FF FF  
   4084 0000EA3A FF FF FF FF FF FF FF  
   4084 0000EA41 FF FF FF FF FF FF FF  
   4084 0000EA48 FF FF FF FF FF FF FF  
   4084 0000EA4F FF FF FF FF FF FF FF  
   4084 0000EA56 FF FF FF FF FF FF FF  
   4084 0000EA5D FF FF FF FF FF FF FF  
   4084 0000EA64 FF FF FF FF FF FF FF  
   4084 0000EA6B FF FF FF FF FF FF FF  
   4084 0000EA72 FF FF FF FF FF FF FF  
   4084 0000EA79 FF FF FF FF FF FF FF  
   4084 0000EA80 FF FF FF FF FF FF FF  
   4084 0000EA87 FF FF FF FF FF FF FF  
   4084 0000EA8E FF FF FF FF FF FF FF  
   4084 0000EA95 FF FF FF FF FF FF FF  
   4084 0000EA9C FF FF FF FF FF FF FF  
   4084 0000EAA3 FF FF FF FF FF FF FF  
   4084 0000EAAA FF FF FF FF FF FF FF  
   4084 0000EAB1 FF FF FF FF FF FF FF  
   4084 0000EAB8 FF FF FF FF FF FF FF  
   4084 0000EABF FF FF FF FF FF FF FF  
   4084 0000EAC6 FF FF FF FF FF FF FF  
   4084 0000EACD FF FF FF FF FF FF FF  
   4084 0000EAD4 FF FF FF FF FF FF FF  
   4084 0000EADB FF FF FF FF FF FF FF  
   4084 0000EAE2 FF FF FF FF FF FF FF  
   4084 0000EAE9 FF FF FF FF FF FF FF  
   4084 0000EAF0 FF FF FF FF FF FF FF  
   4084 0000EAF7 FF FF FF FF FF FF FF  
   4084 0000EAFE FF FF FF FF FF FF FF  
   4084 0000EB05 FF FF FF FF FF FF FF  
   4084 0000EB0C FF FF FF FF FF FF FF  
   4084 0000EB13 FF FF FF FF FF FF FF  
   4084 0000EB1A FF FF FF FF FF FF FF  
   4084 0000EB21 FF FF FF FF FF FF FF  
   4084 0000EB28 FF FF FF FF FF FF FF  
   4084 0000EB2F FF FF FF FF FF FF FF  
   4084 0000EB36 FF FF FF FF FF FF FF  
   4084 0000EB3D FF FF FF FF FF FF FF  
   4084 0000EB44 FF FF FF FF FF FF FF  
   4084 0000EB4B FF FF FF FF FF FF FF  
   4084 0000EB52 FF FF FF FF FF FF FF  
   4084 0000EB59 FF FF FF FF FF FF FF  
   4084 0000EB60 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 81
noc_boot11.a
   4084 0000EB67 FF FF FF FF FF FF FF  
   4084 0000EB6E FF FF FF FF FF FF FF  
   4084 0000EB75 FF FF FF FF FF FF FF  
   4084 0000EB7C FF FF FF FF FF FF FF  
   4084 0000EB83 FF FF FF FF FF FF FF  
   4084 0000EB8A FF FF FF FF FF FF FF  
   4084 0000EB91 FF FF FF FF FF FF FF  
   4084 0000EB98 FF FF FF FF FF FF FF  
   4084 0000EB9F FF FF FF FF FF FF FF  
   4084 0000EBA6 FF FF FF FF FF FF FF  
   4084 0000EBAD FF FF FF FF FF FF FF  
   4084 0000EBB4 FF FF FF FF FF FF FF  
   4084 0000EBBB FF FF FF FF FF FF FF  
   4084 0000EBC2 FF FF FF FF FF FF FF  
   4084 0000EBC9 FF FF FF FF FF FF FF  
   4084 0000EBD0 FF FF FF FF FF FF FF  
   4084 0000EBD7 FF FF FF FF FF FF FF  
   4084 0000EBDE FF FF FF FF FF FF FF  
   4084 0000EBE5 FF FF FF FF FF FF FF  
   4084 0000EBEC FF FF FF FF FF FF FF  
   4084 0000EBF3 FF FF FF FF FF FF FF  
   4084 0000EBFA FF FF FF FF FF FF FF  
   4084 0000EC01 FF FF FF FF FF FF FF  
   4084 0000EC08 FF FF FF FF FF FF FF  
   4084 0000EC0F FF FF FF FF FF FF FF  
   4084 0000EC16 FF FF FF FF FF FF FF  
   4084 0000EC1D FF FF FF FF FF FF FF  
   4084 0000EC24 FF FF FF FF FF FF FF  
   4084 0000EC2B FF FF FF FF FF FF FF  
   4084 0000EC32 FF FF FF FF FF FF FF  
   4084 0000EC39 FF FF FF FF FF FF FF  
   4084 0000EC40 FF FF FF FF FF FF FF  
   4084 0000EC47 FF FF FF FF FF FF FF  
   4084 0000EC4E FF FF FF FF FF FF FF  
   4084 0000EC55 FF FF FF FF FF FF FF  
   4084 0000EC5C FF FF FF FF FF FF FF  
   4084 0000EC63 FF FF FF FF FF FF FF  
   4084 0000EC6A FF FF FF FF FF FF FF  
   4084 0000EC71 FF FF FF FF FF FF FF  
   4084 0000EC78 FF FF FF FF FF FF FF  
   4084 0000EC7F FF FF FF FF FF FF FF  
   4084 0000EC86 FF FF FF FF FF FF FF  
   4084 0000EC8D FF FF FF FF FF FF FF  
   4084 0000EC94 FF FF FF FF FF FF FF  
   4084 0000EC9B FF FF FF FF FF FF FF  
   4084 0000ECA2 FF FF FF FF FF FF FF  
   4084 0000ECA9 FF FF FF FF FF FF FF  
   4084 0000ECB0 FF FF FF FF FF FF FF  
   4084 0000ECB7 FF FF FF FF FF FF FF  
   4084 0000ECBE FF FF FF FF FF FF FF  
   4084 0000ECC5 FF FF FF FF FF FF FF  
   4084 0000ECCC FF FF FF FF FF FF FF  
   4084 0000ECD3 FF FF FF FF FF FF FF  
   4084 0000ECDA FF FF FF FF FF FF FF  
   4084 0000ECE1 FF FF FF FF FF FF FF  
   4084 0000ECE8 FF FF FF FF FF FF FF  
   4084 0000ECEF FF FF FF FF FF FF FF  
   4084 0000ECF6 FF FF FF FF FF FF FF  
   4084 0000ECFD FF FF FF FF FF FF FF  
   4084 0000ED04 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 82
noc_boot11.a
   4084 0000ED0B FF FF FF FF FF FF FF  
   4084 0000ED12 FF FF FF FF FF FF FF  
   4084 0000ED19 FF FF FF FF FF FF FF  
   4084 0000ED20 FF FF FF FF FF FF FF  
   4084 0000ED27 FF FF FF FF FF FF FF  
   4084 0000ED2E FF FF FF FF FF FF FF  
   4084 0000ED35 FF FF FF FF FF FF FF  
   4084 0000ED3C FF FF FF FF FF FF FF  
   4084 0000ED43 FF FF FF FF FF FF FF  
   4084 0000ED4A FF FF FF FF FF FF FF  
   4084 0000ED51 FF FF FF FF FF FF FF  
   4084 0000ED58 FF FF FF FF FF FF FF  
   4084 0000ED5F FF FF FF FF FF FF FF  
   4084 0000ED66 FF FF FF FF FF FF FF  
   4084 0000ED6D FF FF FF FF FF FF FF  
   4084 0000ED74 FF FF FF FF FF FF FF  
   4084 0000ED7B FF FF FF FF FF FF FF  
   4084 0000ED82 FF FF FF FF FF FF FF  
   4084 0000ED89 FF FF FF FF FF FF FF  
   4084 0000ED90 FF FF FF FF FF FF FF  
   4084 0000ED97 FF FF FF FF FF FF FF  
   4084 0000ED9E FF FF FF FF FF FF FF  
   4084 0000EDA5 FF FF FF FF FF FF FF  
   4084 0000EDAC FF FF FF FF FF FF FF  
   4084 0000EDB3 FF FF FF FF FF FF FF  
   4084 0000EDBA FF FF FF FF FF FF FF  
   4084 0000EDC1 FF FF FF FF FF FF FF  
   4084 0000EDC8 FF FF FF FF FF FF FF  
   4084 0000EDCF FF FF FF FF FF FF FF  
   4084 0000EDD6 FF FF FF FF FF FF FF  
   4084 0000EDDD FF FF FF FF FF FF FF  
   4084 0000EDE4 FF FF FF FF FF FF FF  
   4084 0000EDEB FF FF FF FF FF FF FF  
   4084 0000EDF2 FF FF FF FF FF FF FF  
   4084 0000EDF9 FF FF FF FF FF FF FF  
   4084 0000EE00 FF FF FF FF FF FF FF  
   4084 0000EE07 FF FF FF FF FF FF FF  
   4084 0000EE0E FF FF FF FF FF FF FF  
   4084 0000EE15 FF FF FF FF FF FF FF  
   4084 0000EE1C FF FF FF FF FF FF FF  
   4084 0000EE23 FF FF FF FF FF FF FF  
   4084 0000EE2A FF FF FF FF FF FF FF  
   4084 0000EE31 FF FF FF FF FF FF FF  
   4084 0000EE38 FF FF FF FF FF FF FF  
   4084 0000EE3F FF FF FF FF FF FF FF  
   4084 0000EE46 FF FF FF FF FF FF FF  
   4084 0000EE4D FF FF FF FF FF FF FF  
   4084 0000EE54 FF FF FF FF FF FF FF  
   4084 0000EE5B FF FF FF FF FF FF FF  
   4084 0000EE62 FF FF FF FF FF FF FF  
   4084 0000EE69 FF FF FF FF FF FF FF  
   4084 0000EE70 FF FF FF FF FF FF FF  
   4084 0000EE77 FF FF FF FF FF FF FF  
   4084 0000EE7E FF FF FF FF FF FF FF  
   4084 0000EE85 FF FF FF FF FF FF FF  
   4084 0000EE8C FF FF FF FF FF FF FF  
   4084 0000EE93 FF FF FF FF FF FF FF  
   4084 0000EE9A FF FF FF FF FF FF FF  
   4084 0000EEA1 FF FF FF FF FF FF FF  
   4084 0000EEA8 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 83
noc_boot11.a
   4084 0000EEAF FF FF FF FF FF FF FF  
   4084 0000EEB6 FF FF FF FF FF FF FF  
   4084 0000EEBD FF FF FF FF FF FF FF  
   4084 0000EEC4 FF FF FF FF FF FF FF  
   4084 0000EECB FF FF FF FF FF FF FF  
   4084 0000EED2 FF FF FF FF FF FF FF  
   4084 0000EED9 FF FF FF FF FF FF FF  
   4084 0000EEE0 FF FF FF FF FF FF FF  
   4084 0000EEE7 FF FF FF FF FF FF FF  
   4084 0000EEEE FF FF FF FF FF FF FF  
   4084 0000EEF5 FF FF FF FF FF FF FF  
   4084 0000EEFC FF FF FF FF FF FF FF  
   4084 0000EF03 FF FF FF FF FF FF FF  
   4084 0000EF0A FF FF FF FF FF FF FF  
   4084 0000EF11 FF FF FF FF FF FF FF  
   4084 0000EF18 FF FF FF FF FF FF FF  
   4084 0000EF1F FF FF FF FF FF FF FF  
   4084 0000EF26 FF FF FF FF FF FF FF  
   4084 0000EF2D FF FF FF FF FF FF FF  
   4084 0000EF34 FF FF FF FF FF FF FF  
   4084 0000EF3B FF FF FF FF FF FF FF  
   4084 0000EF42 FF FF FF FF FF FF FF  
   4084 0000EF49 FF FF FF FF FF FF FF  
   4084 0000EF50 FF FF FF FF FF FF FF  
   4084 0000EF57 FF FF FF FF FF FF FF  
   4084 0000EF5E FF FF FF FF FF FF FF  
   4084 0000EF65 FF FF FF FF FF FF FF  
   4084 0000EF6C FF FF FF FF FF FF FF  
   4084 0000EF73 FF FF FF FF FF FF FF  
   4084 0000EF7A FF FF FF FF FF FF FF  
   4084 0000EF81 FF FF FF FF FF FF FF  
   4084 0000EF88 FF FF FF FF FF FF FF  
   4084 0000EF8F FF FF FF FF FF FF FF  
   4084 0000EF96 FF FF FF FF FF FF FF  
   4084 0000EF9D FF FF FF FF FF FF FF  
   4084 0000EFA4 FF FF FF FF FF FF FF  
   4084 0000EFAB FF FF FF FF FF FF FF  
   4084 0000EFB2 FF FF FF FF FF FF FF  
   4084 0000EFB9 FF FF FF FF FF FF FF  
   4084 0000EFC0 FF FF FF FF FF FF FF  
   4084 0000EFC7 FF FF FF FF FF FF FF  
   4084 0000EFCE FF FF FF FF FF FF FF  
   4084 0000EFD5 FF FF FF FF FF FF FF  
   4084 0000EFDC FF FF FF FF FF FF FF  
   4084 0000EFE3 FF FF FF FF FF FF FF  
   4084 0000EFEA FF FF FF FF FF FF FF  
   4084 0000EFF1 FF FF FF FF FF FF FF  
   4084 0000EFF8 FF FF FF FF FF FF FF  
   4084 0000EFFF FF FF FF FF FF FF FF  
   4084 0000F006 FF FF FF FF FF FF FF  
   4084 0000F00D FF FF FF FF FF FF FF  
   4084 0000F014 FF FF FF FF FF FF FF  
   4084 0000F01B FF FF FF FF FF FF FF  
   4084 0000F022 FF FF FF FF FF FF FF  
   4084 0000F029 FF FF FF FF FF FF FF  
   4084 0000F030 FF FF FF FF FF FF FF  
   4084 0000F037 FF FF FF FF FF FF FF  
   4084 0000F03E FF FF FF FF FF FF FF  
   4084 0000F045 FF FF FF FF FF FF FF  
   4084 0000F04C FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 84
noc_boot11.a
   4084 0000F053 FF FF FF FF FF FF FF  
   4084 0000F05A FF FF FF FF FF FF FF  
   4084 0000F061 FF FF FF FF FF FF FF  
   4084 0000F068 FF FF FF FF FF FF FF  
   4084 0000F06F FF FF FF FF FF FF FF  
   4084 0000F076 FF FF FF FF FF FF FF  
   4084 0000F07D FF FF FF FF FF FF FF  
   4084 0000F084 FF FF FF FF FF FF FF  
   4084 0000F08B FF FF FF FF FF FF FF  
   4084 0000F092 FF FF FF FF FF FF FF  
   4084 0000F099 FF FF FF FF FF FF FF  
   4084 0000F0A0 FF FF FF FF FF FF FF  
   4084 0000F0A7 FF FF FF FF FF FF FF  
   4084 0000F0AE FF FF FF FF FF FF FF  
   4084 0000F0B5 FF FF FF FF FF FF FF  
   4084 0000F0BC FF FF FF FF FF FF FF  
   4084 0000F0C3 FF FF FF FF FF FF FF  
   4084 0000F0CA FF FF FF FF FF FF FF  
   4084 0000F0D1 FF FF FF FF FF FF FF  
   4084 0000F0D8 FF FF FF FF FF FF FF  
   4084 0000F0DF FF FF FF FF FF FF FF  
   4084 0000F0E6 FF FF FF FF FF FF FF  
   4084 0000F0ED FF FF FF FF FF FF FF  
   4084 0000F0F4 FF FF FF FF FF FF FF  
   4084 0000F0FB FF FF FF FF FF FF FF  
   4084 0000F102 FF FF FF FF FF FF FF  
   4084 0000F109 FF FF FF FF FF FF FF  
   4084 0000F110 FF FF FF FF FF FF FF  
   4084 0000F117 FF FF FF FF FF FF FF  
   4084 0000F11E FF FF FF FF FF FF FF  
   4084 0000F125 FF FF FF FF FF FF FF  
   4084 0000F12C FF FF FF FF FF FF FF  
   4084 0000F133 FF FF FF FF FF FF FF  
   4084 0000F13A FF FF FF FF FF FF FF  
   4084 0000F141 FF FF FF FF FF FF FF  
   4084 0000F148 FF FF FF FF FF FF FF  
   4084 0000F14F FF FF FF FF FF FF FF  
   4084 0000F156 FF FF FF FF FF FF FF  
   4084 0000F15D FF FF FF FF FF FF FF  
   4084 0000F164 FF FF FF FF FF FF FF  
   4084 0000F16B FF FF FF FF FF FF FF  
   4084 0000F172 FF FF FF FF FF FF FF  
   4084 0000F179 FF FF FF FF FF FF FF  
   4084 0000F180 FF FF FF FF FF FF FF  
   4084 0000F187 FF FF FF FF FF FF FF  
   4084 0000F18E FF FF FF FF FF FF FF  
   4084 0000F195 FF FF FF FF FF FF FF  
   4084 0000F19C FF FF FF FF FF FF FF  
   4084 0000F1A3 FF FF FF FF FF FF FF  
   4084 0000F1AA FF FF FF FF FF FF FF  
   4084 0000F1B1 FF FF FF FF FF FF FF  
   4084 0000F1B8 FF FF FF FF FF FF FF  
   4084 0000F1BF FF FF FF FF FF FF FF  
   4084 0000F1C6 FF FF FF FF FF FF FF  
   4084 0000F1CD FF FF FF FF FF FF FF  
   4084 0000F1D4 FF FF FF FF FF FF FF  
   4084 0000F1DB FF FF FF FF FF FF FF  
   4084 0000F1E2 FF FF FF FF FF FF FF  
   4084 0000F1E9 FF FF FF FF FF FF FF  
   4084 0000F1F0 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 85
noc_boot11.a
   4084 0000F1F7 FF FF FF FF FF FF FF  
   4084 0000F1FE FF FF FF FF FF FF FF  
   4084 0000F205 FF FF FF FF FF FF FF  
   4084 0000F20C FF FF FF FF FF FF FF  
   4084 0000F213 FF FF FF FF FF FF FF  
   4084 0000F21A FF FF FF FF FF FF FF  
   4084 0000F221 FF FF FF FF FF FF FF  
   4084 0000F228 FF FF FF FF FF FF FF  
   4084 0000F22F FF FF FF FF FF FF FF  
   4084 0000F236 FF FF FF FF FF FF FF  
   4084 0000F23D FF FF FF FF FF FF FF  
   4084 0000F244 FF FF FF FF FF FF FF  
   4084 0000F24B FF FF FF FF FF FF FF  
   4084 0000F252 FF FF FF FF FF FF FF  
   4084 0000F259 FF FF FF FF FF FF FF  
   4084 0000F260 FF FF FF FF FF FF FF  
   4084 0000F267 FF FF FF FF FF FF FF  
   4084 0000F26E FF FF FF FF FF FF FF  
   4084 0000F275 FF FF FF FF FF FF FF  
   4084 0000F27C FF FF FF FF FF FF FF  
   4084 0000F283 FF FF FF FF FF FF FF  
   4084 0000F28A FF FF FF FF FF FF FF  
   4084 0000F291 FF FF FF FF FF FF FF  
   4084 0000F298 FF FF FF FF FF FF FF  
   4084 0000F29F FF FF FF FF FF FF FF  
   4084 0000F2A6 FF FF FF FF FF FF FF  
   4084 0000F2AD FF FF FF FF FF FF FF  
   4084 0000F2B4 FF FF FF FF FF FF FF  
   4084 0000F2BB FF FF FF FF FF FF FF  
   4084 0000F2C2 FF FF FF FF FF FF FF  
   4084 0000F2C9 FF FF FF FF FF FF FF  
   4084 0000F2D0 FF FF FF FF FF FF FF  
   4084 0000F2D7 FF FF FF FF FF FF FF  
   4084 0000F2DE FF FF FF FF FF FF FF  
   4084 0000F2E5 FF FF FF FF FF FF FF  
   4084 0000F2EC FF FF FF FF FF FF FF  
   4084 0000F2F3 FF FF FF FF FF FF FF  
   4084 0000F2FA FF FF FF FF FF FF FF  
   4084 0000F301 FF FF FF FF FF FF FF  
   4084 0000F308 FF FF FF FF FF FF FF  
   4084 0000F30F FF FF FF FF FF FF FF  
   4084 0000F316 FF FF FF FF FF FF FF  
   4084 0000F31D FF FF FF FF FF FF FF  
   4084 0000F324 FF FF FF FF FF FF FF  
   4084 0000F32B FF FF FF FF FF FF FF  
   4084 0000F332 FF FF FF FF FF FF FF  
   4084 0000F339 FF FF FF FF FF FF FF  
   4084 0000F340 FF FF FF FF FF FF FF  
   4084 0000F347 FF FF FF FF FF FF FF  
   4084 0000F34E FF FF FF FF FF FF FF  
   4084 0000F355 FF FF FF FF FF FF FF  
   4084 0000F35C FF FF FF FF FF FF FF  
   4084 0000F363 FF FF FF FF FF FF FF  
   4084 0000F36A FF FF FF FF FF FF FF  
   4084 0000F371 FF FF FF FF FF FF FF  
   4084 0000F378 FF FF FF FF FF FF FF  
   4084 0000F37F FF FF FF FF FF FF FF  
   4084 0000F386 FF FF FF FF FF FF FF  
   4084 0000F38D FF FF FF FF FF FF FF  
   4084 0000F394 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 86
noc_boot11.a
   4084 0000F39B FF FF FF FF FF FF FF  
   4084 0000F3A2 FF FF FF FF FF FF FF  
   4084 0000F3A9 FF FF FF FF FF FF FF  
   4084 0000F3B0 FF FF FF FF FF FF FF  
   4084 0000F3B7 FF FF FF FF FF FF FF  
   4084 0000F3BE FF FF FF FF FF FF FF  
   4084 0000F3C5 FF FF FF FF FF FF FF  
   4084 0000F3CC FF FF FF FF FF FF FF  
   4084 0000F3D3 FF FF FF FF FF FF FF  
   4084 0000F3DA FF FF FF FF FF FF FF  
   4084 0000F3E1 FF FF FF FF FF FF FF  
   4084 0000F3E8 FF FF FF FF FF FF FF  
   4084 0000F3EF FF FF FF FF FF FF FF  
   4084 0000F3F6 FF FF FF FF FF FF FF  
   4084 0000F3FD FF FF FF FF FF FF FF  
   4084 0000F404 FF FF FF FF FF FF FF  
   4084 0000F40B FF FF FF FF FF FF FF  
   4084 0000F412 FF FF FF FF FF FF FF  
   4084 0000F419 FF FF FF FF FF FF FF  
   4084 0000F420 FF FF FF FF FF FF FF  
   4084 0000F427 FF FF FF FF FF FF FF  
   4084 0000F42E FF FF FF FF FF FF FF  
   4084 0000F435 FF FF FF FF FF FF FF  
   4084 0000F43C FF FF FF FF FF FF FF  
   4084 0000F443 FF FF FF FF FF FF FF  
   4084 0000F44A FF FF FF FF FF FF FF  
   4084 0000F451 FF FF FF FF FF FF FF  
   4084 0000F458 FF FF FF FF FF FF FF  
   4084 0000F45F FF FF FF FF FF FF FF  
   4084 0000F466 FF FF FF FF FF FF FF  
   4084 0000F46D FF FF FF FF FF FF FF  
   4084 0000F474 FF FF FF FF FF FF FF  
   4084 0000F47B FF FF FF FF FF FF FF  
   4084 0000F482 FF FF FF FF FF FF FF  
   4084 0000F489 FF FF FF FF FF FF FF  
   4084 0000F490 FF FF FF FF FF FF FF  
   4084 0000F497 FF FF FF FF FF FF FF  
   4084 0000F49E FF FF FF FF FF FF FF  
   4084 0000F4A5 FF FF FF FF FF FF FF  
   4084 0000F4AC FF FF FF FF FF FF FF  
   4084 0000F4B3 FF FF FF FF FF FF FF  
   4084 0000F4BA FF FF FF FF FF FF FF  
   4084 0000F4C1 FF FF FF FF FF FF FF  
   4084 0000F4C8 FF FF FF FF FF FF FF  
   4084 0000F4CF FF FF FF FF FF FF FF  
   4084 0000F4D6 FF FF FF FF FF FF FF  
   4084 0000F4DD FF FF FF FF FF FF FF  
   4084 0000F4E4 FF FF FF FF FF FF FF  
   4084 0000F4EB FF FF FF FF FF FF FF  
   4084 0000F4F2 FF FF FF FF FF FF FF  
   4084 0000F4F9 FF FF FF FF FF FF FF  
   4084 0000F500 FF FF FF FF FF FF FF  
   4084 0000F507 FF FF FF FF FF FF FF  
   4084 0000F50E FF FF FF FF FF FF FF  
   4084 0000F515 FF FF FF FF FF FF FF  
   4084 0000F51C FF FF FF FF FF FF FF  
   4084 0000F523 FF FF FF FF FF FF FF  
   4084 0000F52A FF FF FF FF FF FF FF  
   4084 0000F531 FF FF FF FF FF FF FF  
   4084 0000F538 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 87
noc_boot11.a
   4084 0000F53F FF FF FF FF FF FF FF  
   4084 0000F546 FF FF FF FF FF FF FF  
   4084 0000F54D FF FF FF FF FF FF FF  
   4084 0000F554 FF FF FF FF FF FF FF  
   4084 0000F55B FF FF FF FF FF FF FF  
   4084 0000F562 FF FF FF FF FF FF FF  
   4084 0000F569 FF FF FF FF FF FF FF  
   4084 0000F570 FF FF FF FF FF FF FF  
   4084 0000F577 FF FF FF FF FF FF FF  
   4084 0000F57E FF FF FF FF FF FF FF  
   4084 0000F585 FF FF FF FF FF FF FF  
   4084 0000F58C FF FF FF FF FF FF FF  
   4084 0000F593 FF FF FF FF FF FF FF  
   4084 0000F59A FF FF FF FF FF FF FF  
   4084 0000F5A1 FF FF FF FF FF FF FF  
   4084 0000F5A8 FF FF FF FF FF FF FF  
   4084 0000F5AF FF FF FF FF FF FF FF  
   4084 0000F5B6 FF FF FF FF FF FF FF  
   4084 0000F5BD FF FF FF FF FF FF FF  
   4084 0000F5C4 FF FF FF FF FF FF FF  
   4084 0000F5CB FF FF FF FF FF FF FF  
   4084 0000F5D2 FF FF FF FF FF FF FF  
   4084 0000F5D9 FF FF FF FF FF FF FF  
   4084 0000F5E0 FF FF FF FF FF FF FF  
   4084 0000F5E7 FF FF FF FF FF FF FF  
   4084 0000F5EE FF FF FF FF FF FF FF  
   4084 0000F5F5 FF FF FF FF FF FF FF  
   4084 0000F5FC FF FF FF FF FF FF FF  
   4084 0000F603 FF FF FF FF FF FF FF  
   4084 0000F60A FF FF FF FF FF FF FF  
   4084 0000F611 FF FF FF FF FF FF FF  
   4084 0000F618 FF FF FF FF FF FF FF  
   4084 0000F61F FF FF FF FF FF FF FF  
   4084 0000F626 FF FF FF FF FF FF FF  
   4084 0000F62D FF FF FF FF FF FF FF  
   4084 0000F634 FF FF FF FF FF FF FF  
   4084 0000F63B FF FF FF FF FF FF FF  
   4084 0000F642 FF FF FF FF FF FF FF  
   4084 0000F649 FF FF FF FF FF FF FF  
   4084 0000F650 FF FF FF FF FF FF FF  
   4084 0000F657 FF FF FF FF FF FF FF  
   4084 0000F65E FF FF FF FF FF FF FF  
   4084 0000F665 FF FF FF FF FF FF FF  
   4084 0000F66C FF FF FF FF FF FF FF  
   4084 0000F673 FF FF FF FF FF FF FF  
   4084 0000F67A FF FF FF FF FF FF FF  
   4084 0000F681 FF FF FF FF FF FF FF  
   4084 0000F688 FF FF FF FF FF FF FF  
   4084 0000F68F FF FF FF FF FF FF FF  
   4084 0000F696 FF FF FF FF FF FF FF  
   4084 0000F69D FF FF FF FF FF FF FF  
   4084 0000F6A4 FF FF FF FF FF FF FF  
   4084 0000F6AB FF FF FF FF FF FF FF  
   4084 0000F6B2 FF FF FF FF FF FF FF  
   4084 0000F6B9 FF FF FF FF FF FF FF  
   4084 0000F6C0 FF FF FF FF FF FF FF  
   4084 0000F6C7 FF FF FF FF FF FF FF  
   4084 0000F6CE FF FF FF FF FF FF FF  
   4084 0000F6D5 FF FF FF FF FF FF FF  
   4084 0000F6DC FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 88
noc_boot11.a
   4084 0000F6E3 FF FF FF FF FF FF FF  
   4084 0000F6EA FF FF FF FF FF FF FF  
   4084 0000F6F1 FF FF FF FF FF FF FF  
   4084 0000F6F8 FF FF FF FF FF FF FF  
   4084 0000F6FF FF FF FF FF FF FF FF  
   4084 0000F706 FF FF FF FF FF FF FF  
   4084 0000F70D FF FF FF FF FF FF FF  
   4084 0000F714 FF FF FF FF FF FF FF  
   4084 0000F71B FF FF FF FF FF FF FF  
   4084 0000F722 FF FF FF FF FF FF FF  
   4084 0000F729 FF FF FF FF FF FF FF  
   4084 0000F730 FF FF FF FF FF FF FF  
   4084 0000F737 FF FF FF FF FF FF FF  
   4084 0000F73E FF FF FF FF FF FF FF  
   4084 0000F745 FF FF FF FF FF FF FF  
   4084 0000F74C FF FF FF FF FF FF FF  
   4084 0000F753 FF FF FF FF FF FF FF  
   4084 0000F75A FF FF FF FF FF FF FF  
   4084 0000F761 FF FF FF FF FF FF FF  
   4084 0000F768 FF FF FF FF FF FF FF  
   4084 0000F76F FF FF FF FF FF FF FF  
   4084 0000F776 FF FF FF FF FF FF FF  
   4084 0000F77D FF FF FF FF FF FF FF  
   4084 0000F784 FF FF FF FF FF FF FF  
   4084 0000F78B FF FF FF FF FF FF FF  
   4084 0000F792 FF FF FF FF FF FF FF  
   4084 0000F799 FF FF FF FF FF FF FF  
   4084 0000F7A0 FF FF FF FF FF FF FF  
   4084 0000F7A7 FF FF FF FF FF FF FF  
   4084 0000F7AE FF FF FF FF FF FF FF  
   4084 0000F7B5 FF FF FF FF FF FF FF  
   4084 0000F7BC FF FF FF FF FF FF FF  
   4084 0000F7C3 FF FF FF FF FF FF FF  
   4084 0000F7CA FF FF FF FF FF FF FF  
   4084 0000F7D1 FF FF FF FF FF FF FF  
   4084 0000F7D8 FF FF FF FF FF FF FF  
   4084 0000F7DF FF FF FF FF FF FF FF  
   4084 0000F7E6 FF FF FF FF FF FF FF  
   4084 0000F7ED FF FF FF FF FF FF FF  
   4084 0000F7F4 FF FF FF FF FF FF FF  
   4084 0000F7FB FF FF FF FF FF FF FF  
   4084 0000F802 FF FF FF FF FF FF FF  
   4084 0000F809 FF FF FF FF FF FF FF  
   4084 0000F810 FF FF FF FF FF FF FF  
   4084 0000F817 FF FF FF FF FF FF FF  
   4084 0000F81E FF FF FF FF FF FF FF  
   4084 0000F825 FF FF FF FF FF FF FF  
   4084 0000F82C FF FF FF FF FF FF FF  
   4084 0000F833 FF FF FF FF FF FF FF  
   4084 0000F83A FF FF FF FF FF FF FF  
   4084 0000F841 FF FF FF FF FF FF FF  
   4084 0000F848 FF FF FF FF FF FF FF  
   4084 0000F84F FF FF FF FF FF FF FF  
   4084 0000F856 FF FF FF FF FF FF FF  
   4084 0000F85D FF FF FF FF FF FF FF  
   4084 0000F864 FF FF FF FF FF FF FF  
   4084 0000F86B FF FF FF FF FF FF FF  
   4084 0000F872 FF FF FF FF FF FF FF  
   4084 0000F879 FF FF FF FF FF FF FF  
   4084 0000F880 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 89
noc_boot11.a
   4084 0000F887 FF FF FF FF FF FF FF  
   4084 0000F88E FF FF FF FF FF FF FF  
   4084 0000F895 FF FF FF FF FF FF FF  
   4084 0000F89C FF FF FF FF FF FF FF  
   4084 0000F8A3 FF FF FF FF FF FF FF  
   4084 0000F8AA FF FF FF FF FF FF FF  
   4084 0000F8B1 FF FF FF FF FF FF FF  
   4084 0000F8B8 FF FF FF FF FF FF FF  
   4084 0000F8BF FF FF FF FF FF FF FF  
   4084 0000F8C6 FF FF FF FF FF FF FF  
   4084 0000F8CD FF FF FF FF FF FF FF  
   4084 0000F8D4 FF FF FF FF FF FF FF  
   4084 0000F8DB FF FF FF FF FF FF FF  
   4084 0000F8E2 FF FF FF FF FF FF FF  
   4084 0000F8E9 FF FF FF FF FF FF FF  
   4084 0000F8F0 FF FF FF FF FF FF FF  
   4084 0000F8F7 FF FF FF FF FF FF FF  
   4084 0000F8FE FF FF FF FF FF FF FF  
   4084 0000F905 FF FF FF FF FF FF FF  
   4084 0000F90C FF FF FF FF FF FF FF  
   4084 0000F913 FF FF FF FF FF FF FF  
   4084 0000F91A FF FF FF FF FF FF FF  
   4084 0000F921 FF FF FF FF FF FF FF  
   4084 0000F928 FF FF FF FF FF FF FF  
   4084 0000F92F FF FF FF FF FF FF FF  
   4084 0000F936 FF FF FF FF FF FF FF  
   4084 0000F93D FF FF FF FF FF FF FF  
   4084 0000F944 FF FF FF FF FF FF FF  
   4084 0000F94B FF FF FF FF FF FF FF  
   4084 0000F952 FF FF FF FF FF FF FF  
   4084 0000F959 FF FF FF FF FF FF FF  
   4084 0000F960 FF FF FF FF FF FF FF  
   4084 0000F967 FF FF FF FF FF FF FF  
   4084 0000F96E FF FF FF FF FF FF FF  
   4084 0000F975 FF FF FF FF FF FF FF  
   4084 0000F97C FF FF FF FF FF FF FF  
   4084 0000F983 FF FF FF FF FF FF FF  
   4084 0000F98A FF FF FF FF FF FF FF  
   4084 0000F991 FF FF FF FF FF FF FF  
   4084 0000F998 FF FF FF FF FF FF FF  
   4084 0000F99F FF FF FF FF FF FF FF  
   4084 0000F9A6 FF FF FF FF FF FF FF  
   4084 0000F9AD FF FF FF FF FF FF FF  
   4084 0000F9B4 FF FF FF FF FF FF FF  
   4084 0000F9BB FF FF FF FF FF FF FF  
   4084 0000F9C2 FF FF FF FF FF FF FF  
   4084 0000F9C9 FF FF FF FF FF FF FF  
   4084 0000F9D0 FF FF FF FF FF FF FF  
   4084 0000F9D7 FF FF FF FF FF FF FF  
   4084 0000F9DE FF FF FF FF FF FF FF  
   4084 0000F9E5 FF FF FF FF FF FF FF  
   4084 0000F9EC FF FF FF FF FF FF FF  
   4084 0000F9F3 FF FF FF FF FF FF FF  
   4084 0000F9FA FF FF FF FF FF FF FF  
   4084 0000FA01 FF FF FF FF FF FF FF  
   4084 0000FA08 FF FF FF FF FF FF FF  
   4084 0000FA0F FF FF FF FF FF FF FF  
   4084 0000FA16 FF FF FF FF FF FF FF  
   4084 0000FA1D FF FF FF FF FF FF FF  
   4084 0000FA24 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 90
noc_boot11.a
   4084 0000FA2B FF FF FF FF FF FF FF  
   4084 0000FA32 FF FF FF FF FF FF FF  
   4084 0000FA39 FF FF FF FF FF FF FF  
   4084 0000FA40 FF FF FF FF FF FF FF  
   4084 0000FA47 FF FF FF FF FF FF FF  
   4084 0000FA4E FF FF FF FF FF FF FF  
   4084 0000FA55 FF FF FF FF FF FF FF  
   4084 0000FA5C FF FF FF FF FF FF FF  
   4084 0000FA63 FF FF FF FF FF FF FF  
   4084 0000FA6A FF FF FF FF FF FF FF  
   4084 0000FA71 FF FF FF FF FF FF FF  
   4084 0000FA78 FF FF FF FF FF FF FF  
   4084 0000FA7F FF FF FF FF FF FF FF  
   4084 0000FA86 FF FF FF FF FF FF FF  
   4084 0000FA8D FF FF FF FF FF FF FF  
   4084 0000FA94 FF FF FF FF FF FF FF  
   4084 0000FA9B FF FF FF FF FF FF FF  
   4084 0000FAA2 FF FF FF FF FF FF FF  
   4084 0000FAA9 FF FF FF FF FF FF FF  
   4084 0000FAB0 FF FF FF FF FF FF FF  
   4084 0000FAB7 FF FF FF FF FF FF FF  
   4084 0000FABE FF FF FF FF FF FF FF  
   4084 0000FAC5 FF FF FF FF FF FF FF  
   4084 0000FACC FF FF FF FF FF FF FF  
   4084 0000FAD3 FF FF FF FF FF FF FF  
   4084 0000FADA FF FF FF FF FF FF FF  
   4084 0000FAE1 FF FF FF FF FF FF FF  
   4084 0000FAE8 FF FF FF FF FF FF FF  
   4084 0000FAEF FF FF FF FF FF FF FF  
   4084 0000FAF6 FF FF FF FF FF FF FF  
   4084 0000FAFD FF FF FF FF FF FF FF  
   4084 0000FB04 FF FF FF FF FF FF FF  
   4084 0000FB0B FF FF FF FF FF FF FF  
   4084 0000FB12 FF FF FF FF FF FF FF  
   4084 0000FB19 FF FF FF FF FF FF FF  
   4084 0000FB20 FF FF FF FF FF FF FF  
   4084 0000FB27 FF FF FF FF FF FF FF  
   4084 0000FB2E FF FF FF FF FF FF FF  
   4084 0000FB35 FF FF FF FF FF FF FF  
   4084 0000FB3C FF FF FF FF FF FF FF  
   4084 0000FB43 FF FF FF FF FF FF FF  
   4084 0000FB4A FF FF FF FF FF FF FF  
   4084 0000FB51 FF FF FF FF FF FF FF  
   4084 0000FB58 FF FF FF FF FF FF FF  
   4084 0000FB5F FF FF FF FF FF FF FF  
   4084 0000FB66 FF FF FF FF FF FF FF  
   4084 0000FB6D FF FF FF FF FF FF FF  
   4084 0000FB74 FF FF FF FF FF FF FF  
   4084 0000FB7B FF FF FF FF FF FF FF  
   4084 0000FB82 FF FF FF FF FF FF FF  
   4084 0000FB89 FF FF FF FF FF FF FF  
   4084 0000FB90 FF FF FF FF FF FF FF  
   4084 0000FB97 FF FF FF FF FF FF FF  
   4084 0000FB9E FF FF FF FF FF FF FF  
   4084 0000FBA5 FF FF FF FF FF FF FF  
   4084 0000FBAC FF FF FF FF FF FF FF  
   4084 0000FBB3 FF FF FF FF FF FF FF  
   4084 0000FBBA FF FF FF FF FF FF FF  
   4084 0000FBC1 FF FF FF FF FF FF FF  
   4084 0000FBC8 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 91
noc_boot11.a
   4084 0000FBCF FF FF FF FF FF FF FF  
   4084 0000FBD6 FF FF FF FF FF FF FF  
   4084 0000FBDD FF FF FF FF FF FF FF  
   4084 0000FBE4 FF FF FF FF FF FF FF  
   4084 0000FBEB FF FF FF FF FF FF FF  
   4084 0000FBF2 FF FF FF FF FF FF FF  
   4084 0000FBF9 FF FF FF FF FF FF FF  
   4084 0000FC00 FF FF FF FF FF FF FF  
   4084 0000FC07 FF FF FF FF FF FF FF  
   4084 0000FC0E FF FF FF FF FF FF FF  
   4084 0000FC15 FF FF FF FF FF FF FF  
   4084 0000FC1C FF FF FF FF FF FF FF  
   4084 0000FC23 FF FF FF FF FF FF FF  
   4084 0000FC2A FF FF FF FF FF FF FF  
   4084 0000FC31 FF FF FF FF FF FF FF  
   4084 0000FC38 FF FF FF FF FF FF FF  
   4084 0000FC3F FF FF FF FF FF FF FF  
   4084 0000FC46 FF FF FF FF FF FF FF  
   4084 0000FC4D FF FF FF FF FF FF FF  
   4084 0000FC54 FF FF FF FF FF FF FF  
   4084 0000FC5B FF FF FF FF FF FF FF  
   4084 0000FC62 FF FF FF FF FF FF FF  
   4084 0000FC69 FF FF FF FF FF FF FF  
   4084 0000FC70 FF FF FF FF FF FF FF  
   4084 0000FC77 FF FF FF FF FF FF FF  
   4084 0000FC7E FF FF FF FF FF FF FF  
   4084 0000FC85 FF FF FF FF FF FF FF  
   4084 0000FC8C FF FF FF FF FF FF FF  
   4084 0000FC93 FF FF FF FF FF FF FF  
   4084 0000FC9A FF FF FF FF FF FF FF  
   4084 0000FCA1 FF FF FF FF FF FF FF  
   4084 0000FCA8 FF FF FF FF FF FF FF  
   4084 0000FCAF FF FF FF FF FF FF FF  
   4084 0000FCB6 FF FF FF FF FF FF FF  
   4084 0000FCBD FF FF FF FF FF FF FF  
   4084 0000FCC4 FF FF FF FF FF FF FF  
   4084 0000FCCB FF FF FF FF FF FF FF  
   4084 0000FCD2 FF FF FF FF FF FF FF  
   4084 0000FCD9 FF FF FF FF FF FF FF  
   4084 0000FCE0 FF FF FF FF FF FF FF  
   4084 0000FCE7 FF FF FF FF FF FF FF  
   4084 0000FCEE FF FF FF FF FF FF FF  
   4084 0000FCF5 FF FF FF FF FF FF FF  
   4084 0000FCFC FF FF FF FF FF FF FF  
   4084 0000FD03 FF FF FF FF FF FF FF  
   4084 0000FD0A FF FF FF FF FF FF FF  
   4084 0000FD11 FF FF FF FF FF FF FF  
   4084 0000FD18 FF FF FF FF FF FF FF  
   4084 0000FD1F FF FF FF FF FF FF FF  
   4084 0000FD26 FF FF FF FF FF FF FF  
   4084 0000FD2D FF FF FF FF FF FF FF  
   4084 0000FD34 FF FF FF FF FF FF FF  
   4084 0000FD3B FF FF FF FF FF FF FF  
   4084 0000FD42 FF FF FF FF FF FF FF  
   4084 0000FD49 FF FF FF FF FF FF FF  
   4084 0000FD50 FF FF FF FF FF FF FF  
   4084 0000FD57 FF FF FF FF FF FF FF  
   4084 0000FD5E FF FF FF FF FF FF FF  
   4084 0000FD65 FF FF FF FF FF FF FF  
   4084 0000FD6C FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 92
noc_boot11.a
   4084 0000FD73 FF FF FF FF FF FF FF  
   4084 0000FD7A FF FF FF FF FF FF FF  
   4084 0000FD81 FF FF FF FF FF FF FF  
   4084 0000FD88 FF FF FF FF FF FF FF  
   4084 0000FD8F FF FF FF FF FF FF FF  
   4084 0000FD96 FF FF FF FF FF FF FF  
   4084 0000FD9D FF FF FF FF FF FF FF  
   4084 0000FDA4 FF FF FF FF FF FF FF  
   4084 0000FDAB FF FF FF FF FF FF FF  
   4084 0000FDB2 FF FF FF FF FF FF FF  
   4084 0000FDB9 FF FF FF FF FF FF FF  
   4084 0000FDC0 FF FF FF FF FF FF FF  
   4084 0000FDC7 FF FF FF FF FF FF FF  
   4084 0000FDCE FF FF FF FF FF FF FF  
   4084 0000FDD5 FF FF FF FF FF FF FF  
   4084 0000FDDC FF FF FF FF FF FF FF  
   4084 0000FDE3 FF FF FF FF FF FF FF  
   4084 0000FDEA FF FF FF FF FF FF FF  
   4084 0000FDF1 FF FF FF FF FF FF FF  
   4084 0000FDF8 FF FF FF FF FF FF FF  
   4084 0000FDFF FF FF FF FF FF FF FF  
   4084 0000FE06 FF FF FF FF FF FF FF  
   4084 0000FE0D FF FF FF FF FF FF FF  
   4084 0000FE14 FF FF FF FF FF FF FF  
   4084 0000FE1B FF FF FF FF FF FF FF  
   4084 0000FE22 FF FF FF FF FF FF FF  
   4084 0000FE29 FF FF FF FF FF FF FF  
   4084 0000FE30 FF FF FF FF FF FF FF  
   4084 0000FE37 FF FF FF FF FF FF FF  
   4084 0000FE3E FF FF FF FF FF FF FF  
   4084 0000FE45 FF FF FF FF FF FF FF  
   4084 0000FE4C FF FF FF FF FF FF FF  
   4084 0000FE53 FF FF FF FF FF FF FF  
   4084 0000FE5A FF FF FF FF FF FF FF  
   4084 0000FE61 FF FF FF FF FF FF FF  
   4084 0000FE68 FF FF FF FF FF FF FF  
   4084 0000FE6F FF FF FF FF FF FF FF  
   4084 0000FE76 FF FF FF FF FF FF FF  
   4084 0000FE7D FF FF FF FF FF FF FF  
   4084 0000FE84 FF FF FF FF FF FF FF  
   4084 0000FE8B FF FF FF FF FF FF FF  
   4084 0000FE92 FF FF FF FF FF FF FF  
   4084 0000FE99 FF FF FF FF FF FF FF  
   4084 0000FEA0 FF FF FF FF FF FF FF  
   4084 0000FEA7 FF FF FF FF FF FF FF  
   4084 0000FEAE FF FF FF FF FF FF FF  
   4084 0000FEB5 FF FF FF FF FF FF FF  
   4084 0000FEBC FF FF FF FF FF FF FF  
   4084 0000FEC3 FF FF FF FF FF FF FF  
   4084 0000FECA FF FF FF FF FF FF FF  
   4084 0000FED1 FF FF FF FF FF FF FF  
   4084 0000FED8 FF FF FF FF FF FF FF  
   4084 0000FEDF FF FF FF FF FF FF FF  
   4084 0000FEE6 FF FF FF FF FF FF FF  
   4084 0000FEED FF FF FF FF FF FF FF  
   4084 0000FEF4 FF FF FF FF FF FF FF  
   4084 0000FEFB FF FF FF FF FF FF FF  
   4084 0000FF02 FF FF FF FF FF FF FF  
   4084 0000FF09 FF FF FF FF FF FF FF  
   4084 0000FF10 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Sun Jun 18 22:01:57 2017     Page 93
noc_boot11.a
   4084 0000FF17 FF FF FF FF FF FF FF  
   4084 0000FF1E FF FF FF FF FF FF FF  
   4084 0000FF25 FF FF FF FF FF FF FF  
   4084 0000FF2C FF FF FF FF FF FF FF  
   4084 0000FF33 FF FF FF FF FF FF FF  
   4084 0000FF3A FF FF FF FF FF FF FF  
   4084 0000FF41 FF FF FF FF FF FF FF  
   4084 0000FF48 FF FF FF FF FF FF FF  
   4084 0000FF4F FF FF FF FF FF FF FF  
   4084 0000FF56 FF FF FF FF FF FF FF  
   4084 0000FF5D FF FF FF FF FF FF FF  
   4084 0000FF64 FF FF FF FF FF FF FF  
   4084 0000FF6B FF FF FF FF FF FF FF  
   4084 0000FF72 FF FF FF FF FF FF FF  
   4084 0000FF79 FF FF FF FF FF FF FF  
   4084 0000FF80 FF FF FF FF FF FF FF  
   4084 0000FF87 FF FF FF FF FF FF FF  
   4084 0000FF8E FF FF FF FF FF FF FF  
   4084 0000FF95 FF FF FF FF FF FF FF  
   4084 0000FF9C FF FF FF FF FF FF FF  
   4084 0000FFA3 FF FF FF FF FF FF FF  
   4084 0000FFAA FF FF FF FF FF FF FF  
   4084 0000FFB1 FF FF FF FF FF FF FF  
   4084 0000FFB8 FF FF FF FF FF FF FF  
   4084 0000FFBF FF FF FF FF FF FF FF  
   4084 0000FFC6 FF FF FF FF FF FF FF  
   4084 0000FFCD FF FF FF FF FF FF FF  
   4084 0000FFD4 FF FF FF FF FF FF FF  
   4084 0000FFDB FF FF FF FF FF FF FF  
   4084 0000FFE2 FF FF FF FF FF FF FF  
   4084 0000FFE9 FF FF FF FF FF FF FF  
   4084 0000FFF0 FF FF FF FF FF FF FF  
   4084 0000FFF7 FF FF FF FF FF FF FF  
                                      
   4085 0000FFFE 00 D8                   		dw		start
