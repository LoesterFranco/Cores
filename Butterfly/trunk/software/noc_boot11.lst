Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 1
noc_boot11.asm


Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 1
noc_boot11.asm


Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 1
noc_boot11.asm


Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 1
noc_boot11.asm


Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 1
noc_boot11.asm

                                        ; ============================================================================
                                        ;        __
                                        ;   \\__/ o\    (C) 2017  Robert Finch, Waterloo
                                        ;    \  __ /    All rights reserved.
                                        ;     \/_//     robfinch<remove>@finitron.ca
                                        ;       ||
                                        ;  
                                        ;
                                        ; This source file is free software: you can redistribute it and/or modify 
                                        ; it under the terms of the GNU Lesser General Public License as published 
                                        ; by the Free Software Foundation, either version 3 of the License, or     
                                        ; (at your option) any later version.                                      
                                        ;                                                                          
                                        ; This source file is distributed in the hope that it will be useful,      
                                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                                        ; GNU General Public License for more details.                             
                                        ;                                                                          
                                        ; You should have received a copy of the GNU General Public License        
                                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                                        ;                                    
                                        ;                                      
                                        ; This boot rom for the special node $11. This node is responsible for
                                        ; bringing the system up, and controls the text display and leds.
                                        ; ============================================================================
                                        ;
     27 = 0D                            CR	= 13
     28 = 0A                            LF	= 10
     29 = 08                            CTRLH	equ		8
     30 = 0A                            cursy	equ		10
     31 = 0B                            cursx	equ		11
     32 = 0C                            pos		equ		12
     33 = 0E                            txtHeight	equ	14
     34 = 0F                            txtWidth	equ	15
     35 = 10                            charToPrint	equ	16
     36 = 20                            txBuf	equ		32
     37 = 30                            rxBuf	equ		48
                                        
     39 = 2000                          TXTSCR		equ	$2000
     40 = 000000000000B100                              TXTCTRL		equ	$B100
     41 = 000000000000B200                              LEDS		equ	$B200
     42 = 000000000000B000                              ROUTER		equ	$B000
     43 = 10                            RTR_RXSTAT	equ	$10
     44 = 12                            RTR_TXSTAT	equ	$12
                                        
     46 = 00                            ROUTER_TRB	equ	0
                                        
                                        		.code
                                        		cpu		Butterfly16
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 1
tb.asm

                                        ;****************************************************************;
                                        ;                                                                ;
                                        ;		Tiny BASIC for the Finitron Butterfly                    ;
                                        ;                                                                ;
                                        ; Derived from a 68000 derivative of Palo Alto Tiny BASIC as     ;
                                        ; published in the May 1976 issue of Dr. Dobb's Journal.         ;
                                        ; Adapted to the 68000 by:                                       ;
                                        ;	Gordon brndly						                         ;
                                        ;	12147 - 51 Street					                         ;
                                        ;	Edmonton AB  T5W 3G8					                     ;
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 2
tb.asm
                                        ;	Canada							                             ;
                                        ;	(updated mailing address for 1996)			                 ;
                                        ;                                                                ;
                                        ; Adapted to the Butterfly by:                                    ;
                                        ;    Robert Finch                                                ;
                                        ;    Ontario, Canada                                             ;
                                        ;	 rob<remove>@finitron.ca                                     ;  
                                        ;****************************************************************;
                                        ;    Copyright (C) 2005 by Robert Finch. This program may be	 ;
                                        ;    freely distributed for personal use only. All commercial	 ;
                                        ;		       rights are reserved.			                     ;
                                        ;****************************************************************;
                                        ;
                                        ; Register Usage
                                        ; r8 = text pointer (global usage)
                                        ; r3,r4 = inputs parameters to subroutines
                                        ; r2 = return value
                                        ;
                                        ;* Vers. 1.0  1984/7/17	- Original version by Gordon brndly
                                        ;*	1.1  1984/12/9	- Addition of '0x' print term by Marvin Lipford
                                        ;*	1.2  1985/4/9	- Bug fix in multiply routine by Rick Murray
                                        
                                        ;	OPT	FRS,BRS 	forward ref.'s & brnches default to short
                                        
                                        ;XMIT_FULL		equ	0x40		; the transmit buffer is full
                                        ;DATA_PRESENT	equ	0x08		; there is data preset at the serial port bc_uart3
     86 = 01                            DATA_PRESENT	equ	0x01		; there is data preset at the serial port bc_uart3
     87 = 20                            XMIT_NOT_FULL	equ	0x20
                                        
     89 = 00000000FFFFDC40                              TS_TIMER	equ		0xFFFFDC40		; system time slice timer
     90 = 00000000FFFFDC50                              KBD			equ		0xFFFFDC50
                                        
     92 = 00000000FFFFDCA0                              RAND		equ		0xFFFFDCA0
     93 = 00000000FFFFD800                              VIC			equ		0xFFFFD800
                                        
     95 = 2000                          VIDEORAM	equ		0x00002000
                                        
                                        ; BOOT ROM routines
                                        
     99 = 0000000FFFFFF804                              getSerial	equ		0xFFFFFF804	; get a serial port character
    100 = 0000000FFFFFF808                              peekSerial	equ		0xFFFFFF808	; get a serial port character
    101 = 0000000FFFFFF80C                              putSerial	equ		0xFFFFFF80C	; put a character to serial port
    102 = 0000000FFFFFF82C                              clearScreen	equ		0xFFFFFF82C	; clear the screen
    103 = 0000000FFFFFF840                              getKbdCharWait	equ	0xFFFFFF840
    104 = 0000000FFFFFF844                              getKbdChar		equ	0xFFFFFF844
                                        
    106 = 20                            warmStart   equ     0x20
    107 = 24                            usrJmp      equ     0x24
                                        
    109 = 0D                            CR		equ	0x0D		; ASCII equates
    110 = 0A                            LF		equ	0x0A
    111 = 09                            TAB		equ	0x09
    112 = 03                            CTRLC	equ	0x03
    113 = 08                            CTRLH	equ	0x08
    114 = 13                            CTRLS	equ	0x13
    115 = 18                            CTRLX	equ	0x18
                                        
    117 = 50                            BUFLEN	equ	80	;	length of keyboard input buffer
                                        
                                        	code
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 3
tb.asm
                                        	org	0xC000	;
                                        ;
                                        ; Standard jump table. You can change these addresses if you are
                                        ; customizing this interpreter for a different environment.
                                        ;
    127 0000C000 0D AE                  START	jmp	CSTART	;	Cold Start entry point
    128 0000C002 45 AE                  GOWARM	jmp	WSTART	;	Warm Start entry point
    129 0000C004 80 40 0E AE            GOOUT	jmp	OUTC	;	Jump to character-out routine
    130 0000C008 80 40 0D AE            GOIN	jmp	INC		;Jump to character-in routine
    131 0000C00C 81 40 0F AE            GOAUXO	jmp	AUXOUT	;	Jump to auxiliary-out routine
    132 0000C010 81 40 0F AE            GOAUXI	jmp	AUXIN	;	Jump to auxiliary-in routine
    133 0000C014 8F 40 01 AE            GOBYE	jmp	BYEBYE	;	Jump to monitor, DOS, etc.
                                        ;
                                        ; Modifiable system constants:
                                        ;
    137 0000C018 00 02                  TXTBGN	dw	0x0200		;beginning of program memory
    138 0000C01A FF 1F                  ENDMEM	dw	0x1FFF	;	end of available memory
                                        ;
                                        ; The main interpreter starts here:
                                        ;
                                        ; Usage
                                        ; r1 = temp
                                        ; r8 = text buffer pointer
                                        ; r12 = end of text in text buffer
                                        ;
    147 0000C01C                        CSTART
                                        	; First save off the link register and OS sp value
    149 0000C01C FC 6E                   	sub		sp,sp,#4
    150 0000C01E E1 DF                   	sw		lr,[sp]
    151 0000C020 08 40 05 DE             	sw		sp,OSSP
    152 0000C024 01 4C 0B FE             	lw		sp,ENDMEM	; initialize stack pointer
    153 0000C028 E1 DF                   	sw      lr,[sp]    ; save off return address
                                        ;	lw		r1,#TXT_WIDTH
                                        ;	sb		r1,txtWidth
                                        ;	lw		r1,#TXT_HEIGHT
                                        ;	sb		r1,txtHeight
    158 0000C02A 03 40 02 C0             	sb		r0,cursx	; set screen output
    159 0000C02E 03 40 03 C0             	sb		r0,cursy
    160 0000C032 03 40 0C C0             	sb		r0,cursFlash
    161 0000C036 03 40 05 D0             	sw		r0,pos
    162 0000C03A F2 4B 00 12             	lw		r2,#0xBF20	; black chars, yellow background
    163 0000C03E 03 40 09 D2             	sw		r2,charToPrint
    164 0000C042 BF 49 02 AF             	call	clearScreen
    165 0000C046 20 4D 04 11             	lea		r1,msgInit	;	tell who we are
    166 0000C04A 7D 40 0C AF             	call	PRMESGAUX
    167 0000C04E 20 4D 04 11             	lea		r1,msgInit	;	tell who we are
    168 0000C052 7C 40 09 AF             	call	PRMESG
    169 0000C056 01 4C 09 F1             	lw		r1,TXTBGN	;	init. end-of-program pointer
    170 0000C05A 09 40 07 D1             	sw		r1,TXTUNF
    171 0000C05E 01 4C 0B F1             	lw		r1,ENDMEM	;	get address of end of memory
    172 0000C062 80 4F 10 11             	sub		r1,r1,#2048	; 	reserve 2K for the stack
    173 0000C066 0A 40 01 D1             	sw		r1,STKBOT
    174 0000C06A 00 4E 10 11             	sub     r1,r1,#8192 ;   1000 vars
    175 0000C06E 09 40 09 D1             	sw      r1,VARBGN
    176 0000C072 13 40 0D AF             	call    clearVars   ; clear the variable area
    177 0000C076 09 40 09 F1             	lw      r1,VARBGN   ; calculate number of bytes free
    178 0000C07A 09 40 07 F3             	lw		r3,TXTUNF
    179 0000C07E 32 21                   	sub     r1,r3
    180 0000C080 00 12                   	lw		r2,#0
    181 0000C082 6A 40 08 AF             	call	PRTNUM
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 4
tb.asm
    182 0000C086 2B 4D 02 11             	lea		r1,msgBytesFree
    183 0000C08A 7A 40 0D AF             	call	PRMESG
    184 0000C08E                        WSTART
    185 0000C08E 08 40 0D D0             	sw		r0,LOPVAR   ; initialize internal variables
    186 0000C092 08 40 09 D0             	sw		r0,STKGOS
    187 0000C096 08 40 07 D0             	sw		r0,CURRNT	;	current line number pointer = 0
    188 0000C09A 01 4C 0B FE             	lw		sp,ENDMEM	;	init S.P. again, just in case
    189 0000C09E 2C 4D 00 11             	lea		r1,msgReady	;	display "Ready"
    190 0000C0A2 7A 40 01 AF             	call	PRMESG
    191 0000C0A6                        ST3
    192 0000C0A6 03 40 0E 11             	lw		r1,#'>'		; Prompt with a '>' and
    193 0000C0AA 59 40 08 AF             	call	GETLN		; read a line.
    194 0000C0AE 76 40 01 AF             	call	TOUPBUF 	; convert to upper case
    195 0000C0B2 80 1C                   	lw		r12,r8		; save pointer to end of line
    196 0000C0B4 0A 40 0E 18             	lea		r8,BUFFER	; point to the beginning of line
    197 0000C0B8 72 40 0D AF             	call	TSTNUM		; is there a number there?
    198 0000C0BC 74 40 0C AF             	call	IGNBLK		; skip trailing blanks
    199 0000C0C0 16 21                   	or      r1,r1       ; does line no. exist? (or nonzero?)
    200 0000C0C2 BD A8                   	beq		DIRECT		; if not, it's a direct statement
    201 0000C0C4 00 40 11 10             	cmp		r1,#0xFFFF	; see if line no. is <= 16 bits
    202 0000C0C8 04 A6                   	bleu	ST2
    203 0000C0CA 2D 4D 0E 11             	lea		r1,msgLineRange	; if not, we've overflowed
    204 0000C0CE 56 40 0C AE             	br		ERROR
    205 0000C0D2                        ST2
                                            ; ugliness - store a character at potentially an
                                            ; odd address (unaligned).
    208 0000C0D2 10 12                   	lw		r2,r1       ; r2 = line number
    209 0000C0D4 8E C2                   	sb		r2,-2[r8]
    210 0000C0D6 A1 32                   	shr		r2,#1
    211 0000C0D8 A1 32                   	shr		r2,#1
    212 0000C0DA A1 32                   	shr		r2,#1
    213 0000C0DC A1 32                   	shr		r2,#1
    214 0000C0DE A1 32                   	shr		r2,#1
    215 0000C0E0 A1 32                   	shr		r2,#1
    216 0000C0E2 A1 32                   	shr		r2,#1
    217 0000C0E4 A1 32                   	shr		r2,#1
    218 0000C0E6 8F C2                   	sb		r2,-1[r8]	; store the binary line no.
    219 0000C0E8 FE 68                   	sub		r8,r8,#2
    220 0000C0EA 5C 40 0C AF             	call	FNDLN		; find this line in save area
    221 0000C0EE E0 31                   	tsr		r1,sr
    222 0000C0F0 90 1D                   	lw		r13,r9		; save possible line pointer
    223 0000C0F2 F0 31                   	trs		r1,sr
    224 0000C0F4 11 A9                   	bne		ST4			; if not found, insert
                                        	; here we found the line, so we're replacing the line
                                        	; in the text area
                                        	; first step - delete the line
    228 0000C0F6 00 11                   	lw		r1,#0
    229 0000C0F8 5E 40 02 AF             	call	FNDNXT		; find the next line (into r9)
    230 0000C0FC 0A A7                   	bgtu	ST6			; no more lines
    231 0000C0FE 90 11                   	lw		r1,r9		; r1 = pointer to next line
    232 0000C100 D0 12                   	lw		r2,r13		; pointer to line to be deleted
    233 0000C102 09 40 07 F3             	lw		r3,TXTUNF	; points to top of save area
    234 0000C106 5E 40 06 AF             	call	MVUP		; move up to delete
    235 0000C10A 09 40 07 D2             	sw		r2,TXTUNF	; update the end pointer
                                        	; we moved the lines of text after the line being
                                        	; deleted down, so the pointer to the next line
                                        	; needs to be reset
    239 0000C10E D0 19                   	lw		r9,r13
    240 0000C110 03 AE                   	br		ST4
                                        	; here there were no more lines, so just move the
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 5
tb.asm
                                        	; end of text pointer down
    243 0000C112                        ST6
    244 0000C112 09 40 07 DD             	sw		r13,TXTUNF
    245 0000C116 D0 19                   	lw		r9,r13
    246 0000C118                        ST4
                                        	; here we're inserting because the line wasn't found
                                        	; or it was deleted	from the text area
    249 0000C118 C0 11                   	lw		r1,r12		; calculate the length of new line
    250 0000C11A 82 21                   	sub		r1,r8
    251 0000C11C 1D 10                   	cmp		r1,#3		; is it just a line no. & CR?
    252 0000C11E C3 B2                   	ble		ST3			; if so, it was just a delete
                                        
    254 0000C120 09 40 07 FB             	lw		r11,TXTUNF	; compute new end of text
    255 0000C124 B0 1A                   	lw		r10,r11		; r10 = old TXTUNF
    256 0000C126 10 2B                   	add		r11,r1		; r11 = new top of TXTUNF (r1=line length)
                                        
    258 0000C128 09 40 09 F1             	lw		r1,VARBGN	; see if there's enough room
    259 0000C12C 1D 2B                   	cmp		r11,r1
    260 0000C12E 04 A4                   	bltu	ST5
    261 0000C130 3B 4D 09 11             	lea		r1,msgTooBig	; if not, say so
    262 0000C134 53 40 09 AE             	jmp		ERROR
                                        
                                        	; open a space in the text area
    265 0000C138                        ST5
    266 0000C138 09 40 07 DB             	sw		r11,TXTUNF	; if so, store new end position
    267 0000C13C A0 11                   	lw		r1,r10		; points to old end of text
    268 0000C13E B0 12                   	lw		r2,r11		; points to new end of text
    269 0000C140 90 13                   	lw		r3,r9       ; points to start of line after insert line
    270 0000C142 5C 40 0F AF             	call	MVDOWN		; move things out of the way
                                        
                                        	; copy line into text space
    273 0000C146 80 11                   	lw		r1,r8		; set up to do the insertion; move from buffer
    274 0000C148 D0 12                   	lw		r2,r13		; to vacated space
    275 0000C14A C0 13                   	lw		r3,r12		; until end of buffer
    276 0000C14C 5C 40 03 AF             	call	MVUP		; do it
    277 0000C150 AA BE                   	br		ST3			; go back and get another line
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** Tables *** DIRECT *** EXEC ***
                                        ;
                                        ; This section of the code tests a string against a table. When
                                        ; a match is found, control is transferred to the section of
                                        ; code according to the table.
                                        ;
                                        ; At 'EXEC', r8 should point to the string, r9 should point to
                                        ; the character table, and r10 should point to the execution
                                        ; table. At 'DIRECT', r8 should point to the string, r9 and
                                        ; r10 will be set up to point to TAB1 and TAB1_1, which are
                                        ; the tables of all direct and statement commands.
                                        ;
                                        ; A '.' in the string will terminate the test and the partial
                                        ; match will be considered as a match, e.g. 'P.', 'PR.','PRI.',
                                        ; 'PRIN.', or 'PRINT' will all match 'PRINT'.
                                        ;
                                        ; There are two tables: the character table and the execution
                                        ; table. The character table consists of any number of text items.
                                        ; Each item is a string of characters with the last character's
                                        ; high bit set to one. The execution table holds a 32-bit
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 6
tb.asm
                                        ; execution addresses that correspond to each entry in the
                                        ; character table.
                                        ;
                                        ; The end of the character table is a 0 byte which corresponds
                                        ; to the default routine in the execution table, which is
                                        ; executed if none of the other table items are matched.
                                        ;
                                        ; Character-matching tables:
    310 0000C152                        TAB1
    311 0000C152 4C 49 53 D4             	db	"LIS",('T'+0x80)        ; Direct commands
    312 0000C156 4C 4F 41 C4             	db	"LOA",('D'+0x80)
    313 0000C15A 4E 45 D7                	db	"NE",('W'+0x80)
    314 0000C15D 52 55 CE                	db	"RU",('N'+0x80)
    315 0000C160 53 41 56 C5             	db	"SAV",('E'+0x80)
    316 0000C164                        TAB2
    317 0000C164 4E 45 58 D4             	db	"NEX",('T'+0x80)         ; Direct / statement
    318 0000C168 4C 45 D4                	db	"LE",('T'+0x80)
    319 0000C16B 49 C6                   	db	"I",('F'+0x80)
    320 0000C16D 47 4F 54 CF             	db	"GOT",('O'+0x80)
    321 0000C171 47 4F 53 55 C2          	db	"GOSU",('B'+0x80)
    322 0000C176 52 45 54 55 52 CE       	db	"RETUR",('N'+0x80)
    323 0000C17C 52 45 CD                	db	"RE",('M'+0x80)
    324 0000C17F 46 4F D2                	db	"FO",('R'+0x80)
    325 0000C182 49 4E 50 55 D4          	db	"INPU",('T'+0x80)
    326 0000C187 50 52 49 4E D4          	db	"PRIN",('T'+0x80)
    327 0000C18C 50 4F 4B 45 D7          	db	"POKE",('W'+0x80)
    328 0000C191 50 4F 4B C5             	db	"POK",('E'+0x80)
    329 0000C195 53 54 4F D0             	db	"STO",('P'+0x80)
    330 0000C199 42 59 C5                	db	"BY",('E'+0x80)
    331 0000C19C 53 59 D3                	db	"SY",('S'+0x80)
    332 0000C19F 43 4C D3                	db	"CL",('S'+0x80)
    333 0000C1A2 43 4C D2                    db  "CL",('R'+0x80)
    334 0000C1A5 52 44 43 C6                 db	"RDC",('F'+0x80)
    335 0000C1A9 00                      	db	0
    336 0000C1AA                        TAB4
    337 0000C1AA 50 45 45 4B C3          	db	"PEEK",('C'+0x80)        ;Functions
    338 0000C1AF 50 45 45 4B D7          	db	"PEEK",('W'+0x80)        ;Functions
    339 0000C1B4 50 45 45 CB             	db	"PEE",('K'+0x80)         ;Functions
    340 0000C1B8 52 4E C4                	db	"RN",('D'+0x80)
    341 0000C1BB 41 42 D3                	db	"AB",('S'+0x80)
    342 0000C1BE 53 49 5A C5             	db	"SIZ",('E'+0x80)
    343 0000C1C2 55 53 D2                	db  "US",('R'+0x80)
    344 0000C1C5 00                      	db	0
    345 0000C1C6                        TAB5
    346 0000C1C6 54 CF                   	db	"T",('O'+0x80)           ;"TO" in "FOR"
    347 0000C1C8 00                      	db	0
    348 0000C1C9                        TAB6
    349 0000C1C9 53 54 45 D0             	db	"STE",('P'+0x80)         ;"STEP" in "FOR"
    350 0000C1CD 00                      	db	0
    351 0000C1CE                        TAB8
    352 0000C1CE 3E BD                   	db	'>',('='+0x80)           ;Relational operators
    353 0000C1D0 3C BE                   	db	'<',('>'+0x80)
    354 0000C1D2 BE                      	db	('>'+0x80)
    355 0000C1D3 BD                      	db	('='+0x80)
    356 0000C1D4 3C BD                   	db	'<',('='+0x80)
    357 0000C1D6 BC                      	db	('<'+0x80)
    358 0000C1D7 00                      	db	0
    359 0000C1D8                        TAB9
    360 0000C1D8 41 4E C4                    db  "AN",('D'+0x80)
    361 0000C1DB 00                          db  0
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 7
tb.asm
    362 0000C1DC                        TAB10
    363 0000C1DC 4F D2                       db  "O",('R'+0x80)
    364 0000C1DE 00                          db  0
                                        
    366 0000C1DF FF                      	.align	4
                                        
                                        ;* Execution address tables:
    369 0000C1E0                        TAB1_1
    370 0000C1E0 0E C3                   	dw	LISTX			;Direct commands
    371 0000C1E2 6C C5                   	dw	LOAD
    372 0000C1E4 86 C2                   	dw	NEW
    373 0000C1E6 9C C2                   	dw	RUN
    374 0000C1E8 00 C6                   	dw	SAVE
    375 0000C1EA                        TAB2_1
    376 0000C1EA 62 C4                   	dw	NEXT		;	Direct / statement
    377 0000C1EC 5E C5                   	dw	LET
    378 0000C1EE BC C4                   	dw	IF
    379 0000C1F0 D2 C2                   	dw	GOTO
    380 0000C1F2 A8 C3                   	dw	GOSUB
    381 0000C1F4 D8 C3                   	dw	RETURN
    382 0000C1F6 C4 C4                   	dw	IF2			; REM
    383 0000C1F8 02 C4                   	dw	FOR
    384 0000C1FA E2 C4                   	dw	INPUT
    385 0000C1FC 44 C3                   	dw	PRINT
    386 0000C1FE DA C6                   	dw	POKEW
    387 0000C200 BA C6                   	dw	POKE
    388 0000C202 94 C2                   	dw	STOP
    389 0000C204 14 C0                   	dw	GOBYE
    390 0000C206 F2 C6                   	dw	SYSX
    391 0000C208 DC D1                   	dw	_cls
    392 0000C20A EC C2                   	dw  _clr
    393 0000C20C 0C C2                   	dw	_rdcf
    394 0000C20E 56 C5                   	dw	DEFLT
    395 0000C210                        TAB4_1
    396 0000C210 70 CA                   	dw  PEEKC
    397 0000C212 7E CA                   	dw  PEEKW
    398 0000C214 64 CA                   	dw	PEEK			;Functions
    399 0000C216 9E CA                   	dw	RND
    400 0000C218 F8 CA                   	dw	ABS
    401 0000C21A 1E CB                   	dw	SIZEX
    402 0000C21C 8A CA                   	dw  USRX
    403 0000C21E 9A C8                   	dw	XP40
    404 0000C220                        TAB5_1
    405 0000C220 18 C4                   	dw	FR1			;"TO" in "FOR"
    406 0000C222 A6 CB                   	dw	QWHAT
    407 0000C224                        TAB6_1
    408 0000C224 2A C4                   	dw	FR2			;"STEP" in "FOR"
    409 0000C226 30 C4                   	dw	FR3
    410 0000C228                        TAB8_1
    411 0000C228 BC C7                   	dw	XP11	;>=		Relational operators
    412 0000C22A C6 C7                   	dw	XP12	;<>
    413 0000C22C D0 C7                   	dw	XP13	;>
    414 0000C22E E4 C7                   	dw	XP15	;=
    415 0000C230 DA C7                   	dw	XP14	;<=
    416 0000C232 EE C7                   	dw	XP16	;<
    417 0000C234 08 C8                   	dw	XP17
    418 0000C236                        TAB9_1
    419 0000C236 48 C7                       dw  XP_AND
    420 0000C238 50 C7                       dw  XP_ANDX
    421 0000C23A                        TAB10_1
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 8
tb.asm
    422 0000C23A 24 C7                       dw  XP_OR
    423 0000C23C 2C C7                       dw  XP_ORX
                                        
                                        ;*
                                        ; r3 = match flag (trashed)
                                        ; r9 = text table
                                        ; r10 = exec table
                                        ; r11 = trashed
    430 0000C23E                        DIRECT
    431 0000C23E 15 4C 02 19             	lea		r9,TAB1
    432 0000C242 1E 4C 00 1A             	lea		r10,TAB1_1
    433 0000C246                        EXEC
    434 0000C246 F0 1B                   	lw		r11,lr		; save link reg
    435 0000C248 68 40 06 AF             	call	IGNBLK		; ignore leading blanks
    436 0000C24C B0 1F                   	lw		lr,r11		; restore link reg
    437 0000C24E 80 1B                   	lw		r11,r8		; save the pointer
    438 0000C250 00 13                   	lw		r3,#0		; clear match flag
    439 0000C252                        EXLP
    440 0000C252 80 E1                   	lb		r1,[r8]		; get the program character
    441 0000C254 01 68                   	add		r8,r8,#1
    442 0000C256 90 E2                   	lb		r2,[r9]		; get the table character
    443 0000C258 02 A9                   	bne		EXNGO		; If end of table,
    444 0000C25A B0 18                   	lw		r8,r11		;	restore the text pointer and...
    445 0000C25C 12 AE                   	br		EXGO		;   execute the default.
    446 0000C25E                        EXNGO
    447 0000C25E 3D 21                   	cmp		r1,r3		; Else check for period...
    448 0000C260 10 A8                   	beq		EXGO		; if so, execute
    449 0000C262 07 40 5F 32             	and		r2,#0x7f	; ignore the table's high bit
    450 0000C266 1D 22                   	cmp		r2,r1		;		is there a match?
    451 0000C268 07 A8                   	beq		EXMAT
    452 0000C26A 04 6A                   	add		r10,r10,#4	;if not, try the next entry
    453 0000C26C B0 18                   	lw		r8,r11		; reset the program pointer
    454 0000C26E 00 13                   	lw		r3,#0		; sorry, no match
    455 0000C270                        EX1
    456 0000C270 01 69                   	add		r9,r9,#1
    457 0000C272 9F E1                   	lb		r1,-1[r9]	; get to the end of the entry
    458 0000C274 FD BB                   	bpl		EX1
    459 0000C276 ED BE                   	br		EXLP		; back for more matching
    460 0000C278                        EXMAT
    461 0000C278 02 40 0E 13             	lw		r3,#'.'		; we've got a match so far
    462 0000C27C 01 69                   	add		r9,r9,#1
    463 0000C27E 9F E1                   	lb		r1,-1[r9]	; end of table entry?
    464 0000C280 E8 BB                   	bpl		EXLP		; if not, go back for more
    465 0000C282                        EXGO
    466 0000C282 A1 FB                   	lw		r11,[r10]	; execute the appropriate routine
    467 0000C284 B0 80                   	jmp		[r11]
                                        
                                        
                                        ;    lb      r1,[r8]     ; get token from text space
                                        ;    bpl
                                        ;    and     r1,#0x7f
                                        ;    shl     r1,#2       ; * 4 - word offset
                                        ;    add     r1,r1,#TAB1_1
                                        ;    lw      r1,[r1]
                                        ;    jmp     [r1]
                                        
                                            
                                        ;
                                        ; What follows is the code to execute direct and statement
                                        ; commands. Control is transferred to these points via the command
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 9
tb.asm
                                        ; table lookup code of 'DIRECT' and 'EXEC' in the last section.
                                        ; After the command is executed, control is transferred to other
                                        ; sections as follows:
                                        ;
                                        ; For 'LISTX', 'NEW', and 'STOP': go back to the warm start point.
                                        ; For 'RUN': go execute the first stored line if any; else go
                                        ; back to the warm start point.
                                        ; For 'GOTO' and 'GOSUB': go execute the target line.
                                        ; For 'RETURN' and 'NEXT'; go back to saved return line.
                                        ; For all others: if 'CURRNT' is 0, go to warm start; else go
                                        ; execute next command. (This is done in 'FINISH'.)
                                        ;
                                        ;******************************************************************
                                        ;
                                        ; *** NEW *** STOP *** RUN (& friends) *** GOTO ***
                                        ;
                                        ; 'NEW<CR>' sets TXTUNF to point to TXTBGN
                                        ;
                                        ; 'STOP<CR>' goes back to WSTART
                                        ;
                                        ; 'RUN<CR>' finds the first stored line, stores its address
                                        ; in CURRNT, and starts executing it. Note that only those
                                        ; commands in TAB2 are legal for a stored program.
                                        ;
                                        ; There are 3 more entries in 'RUN':
                                        ; 'RUNNXL' finds next line, stores it's address and executes it.
                                        ; 'RUNTSL' stores the address of this line and executes it.
                                        ; 'RUNSML' continues the execution on same line.
                                        ;
                                        ; 'GOTO expr<CR>' evaluates the expression, finds the target
                                        ; line, and jumps to 'RUNTSL' to do it.
                                        ;
    514 0000C286                        NEW
    515 0000C286 47 40 0A AF             	call	ENDCHK
    516 0000C28A 01 4C 09 F1             	lw		r1,TXTBGN
    517 0000C28E 09 40 07 D1             	sw		r1,TXTUNF	;	set the end pointer
    518 0000C292 2E AF                   	call    clearVars
                                        
    520 0000C294                        STOP
    521 0000C294 47 40 03 AF             	call	ENDCHK
    522 0000C298 EF 4F 09 AE             	br		WSTART		; WSTART will reset the stack
                                        
    524 0000C29C                        RUN
    525 0000C29C 46 40 0F AF             	call	ENDCHK
    526 0000C2A0 01 4C 09 F8             	lw		r8,TXTBGN	;	set pointer to beginning
    527 0000C2A4 08 40 07 D8             	sw		r8,CURRNT
    528 0000C2A8 23 AF                   	call    clearVars
                                        
    530 0000C2AA                        RUNNXL					; RUN <next line>
    531 0000C2AA 08 40 07 F1             	lw		r1,CURRNT	; executing a program?
    532 0000C2AE EE 4F 0E A8             	beq		WSTART		; if not, we've finished a direct stat.
    533 0000C2B2 00 11                   	lw		r1,#0	    ; else find the next line number
    534 0000C2B4 80 19                   	lw		r9,r8
    535 0000C2B6 4E 40 0E AF             	call	FNDLNP		; search for the next line
    536 0000C2BA EE 4F 08 A7             	bgtu	WSTART		; if we've fallen off the end, stop
                                        
    538 0000C2BE                        RUNTSL					; RUN <this line>
    539 0000C2BE 08 40 07 D9             	sw		r9,CURRNT	; set CURRNT to point to the line no.
    540 0000C2C2 92 18                   	lea		r8,2[r9]	; set the text pointer to
                                        
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 10
tb.asm
    542 0000C2C4                        RUNSML                  ; RUN <same line>
    543 0000C2C4 67 40 0E AF             	call	CHKIO		; see if a control-C was pressed
    544 0000C2C8 16 4C 04 19             	lea		r9,TAB2		; find command in TAB2
    545 0000C2CC 1E 4C 0A 1A             	lea		r10,TAB2_1
    546 0000C2D0 BA BE                   	br		EXEC		; and execute it
                                        
    548 0000C2D2                        GOTO
    549 0000C2D2 21 40 0D AF             	call	OREXPR		;evaluate the following expression
    550 0000C2D6 10 15                   	lw      r5,r1
    551 0000C2D8 45 40 01 AF             	call	ENDCHK		;must find end of line
    552 0000C2DC 50 11                   	lw      r1,r5
    553 0000C2DE 4D 40 02 AF             	call	FNDLN		; find the target line
    554 0000C2E2 ED B8                   	beq		RUNTSL		; go do it
    555 0000C2E4 38 4D 05 11             	lea		r1,msgBadGotoGosub
    556 0000C2E8 45 40 0F AE             	br		ERROR		; no such line no.
                                        
                                        
    559 0000C2EC                        _clr
    560 0000C2EC 01 AF                       call    clearVars
    561 0000C2EE 58 AE                       br      FINISH
                                        
                                        ; Clear the variable area of memory
    564 0000C2F0                        clearVars
    565 0000C2F0 FC 6E                       sub     sp,sp,#4
    566 0000C2F2 E1 DF                       sw      lr,[sp]
    567 0000C2F4 E3 D6                       sw      r6,2[sp]
    568 0000C2F6 80 40 00 16                 lw      r6,#2048    ; number of words to clear
    569 0000C2FA 09 40 09 F1                 lw      r1,VARBGN
    570 0000C2FE                        cv1
    571 0000C2FE 11 D0                       sw      r0,[r1]
    572 0000C300 04 61                       add     r1,r1,#4
    573 0000C302 FF 66                       sub		r6,r6,#1
    574 0000C304 FC B9                       bne     cv1
    575 0000C306 E1 FF                       lw      lr,[sp]
    576 0000C308 E3 F6                       lw      r6,2[sp]
    577 0000C30A 04 6E                       add     sp,sp,#4
    578 0000C30C F0 80                       ret    
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; LIST
                                        ;
                                        ; LISTX has two forms:
                                        ; 'LIST<CR>' lists all saved lines
                                        ; 'LIST #<CR>' starts listing at the line #
                                        ; Control-S pauses the listing, control-C stops it.
                                        ;
                                        
    591 0000C30E                        LISTX
    592 0000C30E 60 40 02 AF             	call	TSTNUM		; see if there's a line no.
    593 0000C312 10 15                   	lw      r5,r1
    594 0000C314 43 40 03 AF             	call	ENDCHK		; if not, we get a zero
    595 0000C318 50 11                   	lw      r1,r5
    596 0000C31A 4B 40 04 AF             	call	FNDLN		; find this or next line
    597 0000C31E                        LS1
    598 0000C31E EB 4F 06 A7             	bgtu	WSTART		; warm start if we passed the end
                                        
    600 0000C322 90 11                   	lw		r1,r9
    601 0000C324 5C 40 07 AF             	call	PRTLN		; print the line
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 11
tb.asm
    602 0000C328 10 19                   	lw		r9,r1		; set pointer for next
    603 0000C32A 64 40 0B AF             	call	CHKIO		; check for listing halt request
    604 0000C32E 06 A8                   	beq		LS3
    605 0000C330 FE 4F 1D 10             	cmp		r1,#CTRLS	; pause the listing?
    606 0000C334 03 A9                   	bne		LS3
    607 0000C336                        LS2
    608 0000C336 64 40 05 AF             	call	CHKIO		; if so, wait for another keypress
    609 0000C33A FD B8                   	beq		LS2
    610 0000C33C                        LS3
    611 0000C33C 00 11                   	lw		r1,#0
    612 0000C33E 4A 40 0A AF             	call	FNDLNP		; find the next line
    613 0000C342 ED BE                   	br		LS1
                                        
                                        
                                        ;******************************************************************
                                        ; PRINT command is 'PRINT ....:' or 'PRINT ....<CR>'
                                        ; where '....' is a list of expressions, formats, back-arrows,
                                        ; and strings.	These items a separated by commas.
                                        ;
                                        ; A format is a pound sign followed by a number.  It controls
                                        ; the number of spaces the value of an expression is going to
                                        ; be printed in.  It stays effective for the rest of the print
                                        ; command unless changed by another format.  If no format is
                                        ; specified, 11 positions will be used.
                                        ;
                                        ; A string is quoted in a pair of single- or double-quotes.
                                        ;
                                        ; An underline (back-arrow) means generate a <CR> without a <LF>
                                        ;
                                        ; A <CR LF> is generated after the entire list has been printed
                                        ; or if the list is empty.  If the list ends with a semicolon,
                                        ; however, no <CR LF> is generated.
                                        ;
                                        
    636 0000C344                        PRINT
    637 0000C344 0B 15                   	lw		r5,#11		; D4 = number of print spaces
    638 0000C346 5D 40 04 AF             	call	TSTC		; if null list and ":"
    639 0000C34A 3A 08                   	db	':',PR2-*+1
    640 0000C34C 64 40 0A AF             	call	CRLF		; give CR-LF and continue
    641 0000C350 B9 BE                   	br		RUNSML		;		execution on the same line
    642 0000C352                        PR2
    643 0000C352 5C 40 0E AF             	call	TSTC		;if null list and <CR>
    644 0000C356 0D 08                   	db	CR,PR0-*+1
    645 0000C358 64 40 04 AF             	call	CRLF		;also give CR-LF and
    646 0000C35C A6 BE                   	br		RUNNXL		;execute the next line
    647 0000C35E                        PR0
    648 0000C35E 5C 40 08 AF             	call	TSTC		;else is it a format?
    649 0000C362 23 0A                   	db	'#',PR1-*+1
    650 0000C364 1D 40 04 AF             	call	OREXPR		; yes, evaluate expression
    651 0000C368 10 15                   	lw		r5,r1		; and save it as print width
    652 0000C36A 0B AE                   	br		PR3		; look for more to print
    653 0000C36C                        PR1
    654 0000C36C 5C 40 01 AF             	call	TSTC	;	is character expression? (MRL)
    655 0000C370 24 0C                   	db	'$',PR4-*+1
    656 0000C372 1C 40 0D AF             	call	OREXPR	;	yep. Evaluate expression (MRL)
    657 0000C376 E4 4F 05 AF             	call	GOOUT	;	print low byte (MRL)
    658 0000C37A 03 AE                   	br		PR3		;look for more. (MRL)
    659 0000C37C                        PR4
    660 0000C37C 4F 40 0F AF             	call	QTSTG	;	is it a string?
                                        	; the following branch must occupy only two bytes!
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 12
tb.asm
    662 0000C380 09 AE                   	br		PR8		;	if not, must be an expression
    663 0000C382                        PR3
    664 0000C382 5B 40 06 AF             	call	TSTC	;	if ",", go find next
    665 0000C386 2C 08                   	db	',',PR6-*+1
    666 0000C388 3E 40 07 AF             	call	FIN		;in the list.
    667 0000C38C E8 BE                   	br		PR0
    668 0000C38E                        PR6
    669 0000C38E 62 40 09 AF             	call	CRLF		;list ends here
    670 0000C392 06 AE                   	br		FINISH
    671 0000C394                        PR8
    672 0000C394 1B 40 0C AF             	call	OREXPR		; evaluate the expression
    673 0000C398 50 12                   	lw		r2,r5		; set the width
    674 0000C39A 51 40 0C AF             	call	PRTNUM		; print its value
    675 0000C39E F1 BE                   	br		PR3			; more to print?
                                        
    677 0000C3A0                        FINISH
    678 0000C3A0 3D 40 0B AF             	call	FIN		; Check end of command
    679 0000C3A4 3F 40 0F AE             	jmp		QWHAT	; print "What?" if wrong
                                        
                                        
                                        ;*******************************************************************
                                        ;
                                        ; *** GOSUB *** & RETURN ***
                                        ;
                                        ; 'GOSUB expr:' or 'GOSUB expr<CR>' is like the 'GOTO' command,
                                        ; except that the current text pointer, stack pointer, etc. are
                                        ; saved so that execution can be continued after the subroutine
                                        ; 'RETURN's.  In order that 'GOSUB' can be nested (and even
                                        ; recursive), the save area must be stacked.  The stack pointer
                                        ; is saved in 'STKGOS'.  The old 'STKGOS' is saved on the stack.
                                        ; If we are in the main routine, 'STKGOS' is zero (this was done
                                        ; in the initialization section of the interpreter), but we still
                                        ; save it as a flag for no further 'RETURN's.
                                        ;
    696 0000C3A8                        GOSUB
    697 0000C3A8 4B 40 03 AF             	call	PUSHA		; save the current 'FOR' parameters
    698 0000C3AC 1B 40 00 AF             	call	OREXPR		; get line number
    699 0000C3B0 46 40 09 AF             	call	FNDLN		; find the target line
    700 0000C3B4 04 A8                   	beq		gosub1
    701 0000C3B6 38 4D 05 11             	lea		r1,msgBadGotoGosub
    702 0000C3BA 3F 40 06 AE             	br		ERROR		; if not there, say "How?"
    703 0000C3BE                        gosub1
    704 0000C3BE FA 6E                   	sub		sp,sp,#6
    705 0000C3C0 E1 D8                   	sw		r8,[sp]		; save text pointer
    706 0000C3C2 08 40 07 F1             	lw		r1,CURRNT
    707 0000C3C6 E3 D1                   	sw		r1,2[sp]	; found it, save old 'CURRNT'...
    708 0000C3C8 08 40 09 F1             	lw		r1,STKGOS
    709 0000C3CC E5 D1                   	sw		r1,4[sp]	; and 'STKGOS'
    710 0000C3CE 08 40 0D D0             	sw		r0,LOPVAR	; load new values
    711 0000C3D2 08 40 09 DE             	sw		sp,STKGOS
    712 0000C3D6 73 BE                   	br		RUNTSL
                                        
                                        
                                        ; 'RETURN<CR>' undoes everything that 'GOSUB' did, and thus
                                        ; returns the execution to the command after the most recent
                                        ; 'GOSUB'.  If 'STKGOS' is zero, it indicates that we never had
                                        ; a 'GOSUB' and is thus an error.
                                        ;
    720 0000C3D8                        RETURN
    721 0000C3D8 3D 40 01 AF             	call	ENDCHK		; there should be just a <CR>
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 13
tb.asm
    722 0000C3DC 08 40 09 F1             	lw		r1,STKGOS	; get old stack pointer
    723 0000C3E0 04 A9                   	bne		return1
    724 0000C3E2 3A 4D 02 11             	lea		r1,msgRetWoGosub
    725 0000C3E6 3E 40 00 AE             	br		ERROR		; if zero, it doesn't exist
    726 0000C3EA                        return1
    727 0000C3EA 10 1E                   	lw		sp,r1		; else restore it
    728 0000C3EC E5 F1                   	lw		r1,4[sp]
    729 0000C3EE 08 40 09 D1             	sw		r1,STKGOS	; and the old 'STKGOS'
    730 0000C3F2 E3 F1                   	lw		r1,2[sp]
    731 0000C3F4 08 40 07 D1             	sw		r1,CURRNT	; and the old 'CURRNT'
    732 0000C3F8 E1 F8                   	lw		r8,[sp]		; and the old text pointer
    733 0000C3FA 06 6E                   	add		sp,sp,#6
    734 0000C3FC 47 40 05 AF             	call	POPA		;and the old 'FOR' parameters
    735 0000C400 CF BE                   	br		FINISH		;and we are back home
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** FOR *** & NEXT ***
                                        ;
                                        ; 'FOR' has two forms:
                                        ; 'FOR var=exp1 TO exp2 STEP exp1' and 'FOR var=exp1 TO exp2'
                                        ; The second form means the same thing as the first form with a
                                        ; STEP of positive 1.  The interpreter will find the variable 'var'
                                        ; and set its value to the current value of 'exp1'.  It also
                                        ; evaluates 'exp2' and 'exp1' and saves all these together with
                                        ; the text pointer, etc. in the 'FOR' save area, which consisits of
                                        ; 'LOPVAR', 'LOPINC', 'LOPLMT', 'LOPLN', and 'LOPPT'.  If there is
                                        ; already something in the save area (indicated by a non-zero
                                        ; 'LOPVAR'), then the old save area is saved on the stack before
                                        ; the new values are stored.  The interpreter will then dig in the
                                        ; stack and find out if this same variable was used in another
                                        ; currently active 'FOR' loop.  If that is the case, then the old
                                        ; 'FOR' loop is deactivated. (i.e. purged from the stack)
                                        ;
    757 0000C402                        FOR
    758 0000C402 48 40 06 AF             	call	PUSHA		; save the old 'FOR' save area
    759 0000C406 39 40 02 AF             	call	SETVAL		; set the control variable
    760 0000C40A 08 40 0D D1             	sw		r1,LOPVAR	; save its address
    761 0000C40E 1C 4C 06 19             	lea		r9,TAB5		; use 'EXEC' to test for 'TO'
    762 0000C412 22 4C 00 1A             	lea		r10,TAB5_1
    763 0000C416 17 BE                   	jmp		EXEC
    764 0000C418                        FR1
    765 0000C418 17 40 0A AF             	call	OREXPR		; evaluate the limit
    766 0000C41C 09 40 01 D1             	sw		r1,LOPLMT	; save that
    767 0000C420 1C 4C 09 19             	lea		r9,TAB6		; use 'EXEC' to look for the
    768 0000C424 22 4C 04 1A             	lea		r10,TAB6_1	; word 'STEP'
    769 0000C428 0E BE                   	jmp		EXEC
    770 0000C42A                        FR2
    771 0000C42A 17 40 01 AF             	call	OREXPR		; found it, get the step value
    772 0000C42E 01 AE                   	br		FR4
    773 0000C430                        FR3
    774 0000C430 01 11                   	lw		r1,#1		; not found, step defaults to 1
    775 0000C432                        FR4
    776 0000C432 08 40 0F D1             	sw		r1,LOPINC	; save that too
                                        
    778 0000C436                        FR5
    779 0000C436 08 40 07 F2             	lw		r2,CURRNT
    780 0000C43A 09 40 03 D2             	sw		r2,LOPLN	; save address of current line number
    781 0000C43E 09 40 05 D8             	sw		r8,LOPPT	; and text pointer
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 14
tb.asm
                                        
                                        
    784 0000C442 E0 13                   	lw		r3,sp		; dig into the stack to find 'LOPVAR'
    785 0000C444 08 40 0D F6             	lw		r6,LOPVAR
    786 0000C448 01 AE                   	br		FR7
    787 0000C44A                        FR6
    788 0000C44A 3A 13                   	lea		r3,10[r3]	; look at next stack frame
    789 0000C44C                        FR7
    790 0000C44C 31 F2                   	lw		r2,[r3]		; is it zero?
    791 0000C44E 08 A8                   	beq		FR8			; if so, we're done
    792 0000C450 6D 22                   	cmp		r2,r6		; same as current LOPVAR?
    793 0000C452 FB B9                   	bne		FR6			; nope, look some more
                                        
    795 0000C454 30 11                       lw      r1,r3       ; Else remove 5 words from...
    796 0000C456 3A 12                   	lea		r2,10[r3]   ; inside the stack.
    797 0000C458 E0 13                   	lw		r3,sp		
    798 0000C45A 44 40 03 AF             	call	MVDOWN
    799 0000C45E 0A 6E                   	add		sp,sp,#10	; set the SP 5 words up
    800 0000C460                        FR8
    801 0000C460 9F BE                       br	    FINISH		; and continue execution
                                        
                                        
                                        ; 'NEXT var' serves as the logical (not necessarily physical) end
                                        ; of the 'FOR' loop.  The control variable 'var' is checked with
                                        ; the 'LOPVAR'.  If they are not the same, the interpreter digs in
                                        ; the stack to find the right one and purges all those that didn't
                                        ; match.  Either way, it then adds the 'STEP' to that variable and
                                        ; checks the result with against the limit value.  If it is within
                                        ; the limit, control loops back to the command following the
                                        ; 'FOR'.  If it's outside the limit, the save area is purged and
                                        ; execution continues.
                                        ;
    814 0000C462                        NEXT
    815 0000C462 00 11                   	lw		r1,#0		; don't allocate it
    816 0000C464 23 40 08 AF             	call	TSTV		; get address of variable
    817 0000C468 04 A9                   	bne		NX4
    818 0000C46A 36 4D 01 11             	lea		r1,msgNextVar
    819 0000C46E 39 40 0C AE             	br		ERROR		; if no variable, say "What?"
    820 0000C472                        NX4
    821 0000C472 10 19                   	lw		r9,r1		; save variable's address
    822 0000C474                        NX0
    823 0000C474 08 40 0D F1             	lw		r1,LOPVAR	; If 'LOPVAR' is zero, we never...
    824 0000C478 04 A9                   	bne		NX5         ; had a FOR loop
    825 0000C47A 34 4D 0E 11             	lea		r1,msgNextFor
    826 0000C47E 39 40 04 AE             	br		ERROR		
    827 0000C482                        NX5
    828 0000C482 9D 21                   	cmp		r1,r9		; else we check them
    829 0000C484 03 A8                   	beq		NX2			; OK, they agree
    830 0000C486 43 40 00 AF             	call	POPA		; nope, let's see the next frame
    831 0000C48A F4 BE                   	br		NX0
    832 0000C48C                        NX2
    833 0000C48C 91 F1                   	lw		r1,[r9]		; get control variable's value
    834 0000C48E 08 40 0F F2             	lw		r2,LOPINC
    835 0000C492 20 21                   	add		r1,r2		; add in loop increment
                                        ;	BVS.L	QHOW		say "How?" for 32-bit overflow
    837 0000C494 91 D1                   	sw		r1,[r9]		; save control variable's new value
    838 0000C496 09 40 01 F3             	lw		r3,LOPLMT	; get loop's limit value
    839 0000C49A 26 22                   	or		r2,r2       ; check loop increment
    840 0000C49C 03 AB                   	bpl		NX1			; branch if loop increment is positive
    841 0000C49E 3D 21                   	cmp		r1,r3		; test against limit
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 15
tb.asm
    842 0000C4A0 0A A0                   	blt		NXPurge
    843 0000C4A2 02 AE                   	br      NX3
    844 0000C4A4                        NX1
    845 0000C4A4 3D 21                   	cmp		r1,r3
    846 0000C4A6 07 A3                   	bgt		NXPurge
    847 0000C4A8                        NX3	
    848 0000C4A8 09 40 03 F8             	lw		r8,LOPLN	; Within limit, go back to the...
    849 0000C4AC 08 40 07 D8             	sw		r8,CURRNT
    850 0000C4B0 09 40 05 F8             	lw		r8,LOPPT	; saved 'CURRNT' and text pointer.
    851 0000C4B4 75 BE                   	br		FINISH
                                        
    853 0000C4B6                        NXPurge
    854 0000C4B6 41 40 08 AF                 call    POPA        ; purge this loop
    855 0000C4BA 72 BE                       br      FINISH
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** REM *** IF *** INPUT *** LET (& DEFLT) ***
                                        ;
                                        ; 'REM' can be followed by anything and is ignored by the
                                        ; interpreter.
                                        ;
                                        ;REM
                                        ;    br	    IF2		    ; skip the rest of the line
                                        
                                        ; 'IF' is followed by an expression, as a condition and one or
                                        ; more commands (including other 'IF's) separated by colons.
                                        ; Note that the word 'THEN' is not used.  The interpreter evaluates
                                        ; the expression.  If it is non-zero, execution continues.  If it
                                        ; is zero, the commands that follow are ignored and execution
                                        ; continues on the next line.
                                        ;
    875 0000C4BC                        IF
    876 0000C4BC 12 40 08 AF                 call	OREXPR		; evaluate the expression
    877 0000C4C0                        IF1
    878 0000C4C0 16 21                       or      r1,r1       ; is it zero?
    879 0000C4C2 00 B9                       bne	    RUNSML		; if not, continue
    880 0000C4C4                        IF2
    881 0000C4C4 80 19                       lw		r9,r8		; set lookup pointer
    882 0000C4C6 00 11                   	lw		r1,#0		; find line #0 (impossible)
    883 0000C4C8 3F 40 0B AF             	call	FNDSKP		; if so, skip the rest of the line
    884 0000C4CC DD 4F 0F A7             	bgtu	WSTART		; if no next line, do a warm start
    885 0000C4D0                        IF3
    886 0000C4D0 EF 4F 05 AE             	br		RUNTSL		; run the next line
                                        
                                        
                                        ; INPUT is called first and establishes a stack frame
    890 0000C4D4                        INPERR
    891 0000C4D4 08 40 0B FE             	lw		sp,STKINP	; restore the old stack pointer
    892 0000C4D8 E5 F8                   	lw		r8,4[sp]
    893 0000C4DA 08 40 07 D8             	sw		r8,CURRNT	; and old 'CURRNT'
    894 0000C4DE E3 F8                   	lw		r8,2[sp]	; and old text pointer
    895 0000C4E0 0A 6E                   	add		sp,sp,#10	; fall through will subtract 10
                                        
                                        ; 'INPUT' is like the 'PRINT' command, and is followed by a list
                                        ; of items.  If the item is a string in single or double quotes,
                                        ; or is an underline (back arrow), it has the same effect as in
                                        ; 'PRINT'.  If an item is a variable, this variable name is
                                        ; printed out followed by a colon, then the interpreter waits for
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 16
tb.asm
                                        ; an expression to be typed in.  The variable is then set to the
                                        ; value of this expression.  If the variable is preceeded by a
                                        ; string (again in single or double quotes), the string will be
                                        ; displayed followed by a colon.  The interpreter the waits for an
                                        ; expression to be entered and sets the variable equal to the
                                        ; expression's value.  If the input expression is invalid, the
                                        ; interpreter will print "What?", "How?", or "Sorry" and reprint
                                        ; the prompt and redo the input.  The execution will not terminate
                                        ; unless you press control-C.  This is handled in 'INPERR'.
                                        ;
    912 0000C4E2                        INPUT
    913 0000C4E2 F6 6E                   	sub		sp,sp,#10	; allocate stack frame
    914 0000C4E4 E9 D5                   	sw      r5,8[sp]
    915 0000C4E6                        IP6
    916 0000C4E6 E1 D8                   	sw		r8,[sp]		; save in case of error
    917 0000C4E8 44 40 09 AF             	call	QTSTG		; is next item a string?
    918 0000C4EC 06 AE                   	br		IP2			; nope - this branch must take only two bytes
    919 0000C4EE 01 11                   	lw		r1,#1		; allocate var
    920 0000C4F0 1F 40 02 AF             	call	TSTV		; yes, but is it followed by a variable?
    921 0000C4F4 29 A8                   	beq     IP4		    ; if not, brnch
    922 0000C4F6 10 1A                   	lw		r10,r1		; put away the variable's address
    923 0000C4F8 10 AE                   	br		IP3			; if so, input to variable
    924 0000C4FA                        IP2
    925 0000C4FA E3 D8                   	sw		r8,2[sp]	; save for 'PRTSTG'
    926 0000C4FC 01 11                   	lw		r1,#1
    927 0000C4FE 1E 40 0B AF             	call	TSTV		; must be a variable now
    928 0000C502 04 A9                   	bne		IP7
    929 0000C504 33 4D 01 11             	lea		r1,msgInputVar
    930 0000C508 34 40 0F AE             	br		ERROR		; "What?" it isn't?
    931 0000C50C                        IP7
    932 0000C50C 10 1A                   	lw		r10,r1		; put away the variable's address
    933 0000C50E 80 E5                   	lb		r5,[r8]		; get ready for 'PRTSTG' by null terminating
    934 0000C510 80 C0                   	sb		r0,[r8]
    935 0000C512 E3 F1                   	lw		r1,2[sp]	; get back text pointer
    936 0000C514 41 40 07 AF             	call	PRTSTG		; print string as prompt
    937 0000C518 80 C5                   	sb		r5,[r8]		; un-null terminate
    938 0000C51A                        IP3
    939 0000C51A E3 D8                   	sw		r8,2[sp]	; save in case of error
    940 0000C51C 08 40 07 F1             	lw		r1,CURRNT
    941 0000C520 E5 D1                   	sw		r1,4[sp]	; also save 'CURRNT'
    942 0000C522 0F 11                   	lw		r1,#-1
    943 0000C524 08 40 07 D1             	sw		r1,CURRNT	; flag that we are in INPUT
    944 0000C528 08 40 0B DE             	sw		sp,STKINP	; save the stack pointer too
    945 0000C52C E7 DA                   	sw		r10,6[sp]	; save the variable address
    946 0000C52E 03 40 0A 11             	lw		r1,#':'		; print a colon first
    947 0000C532 35 40 04 AF             	call	GETLN		; then get an input line
    948 0000C536 0A 40 0E 18             	lea		r8,BUFFER	; point to the buffer
    949 0000C53A EA AF                   	call	OREXPR		; evaluate the input
    950 0000C53C E7 FA                   	lw		r10,6[sp]	; restore the variable address
    951 0000C53E A1 D1                   	sw		r1,[r10]	; save value in variable
    952 0000C540 E5 F1                   	lw		r1,4[sp]	; restore old 'CURRNT'
    953 0000C542 08 40 07 D1             	sw		r1,CURRNT
    954 0000C546 E3 F8                   	lw		r8,2[sp]	; and the old text pointer
    955 0000C548                        IP4
    956 0000C548 4D 40 03 AF             	call	TSTC		; is the next thing a comma?
    957 0000C54C 2C 04                   	db	',',IP5-*+1
    958 0000C54E CB BE                   	br		IP6			; yes, more items
    959 0000C550                        IP5
    960 0000C550 E9 F5                       lw      r5,8[sp]
    961 0000C552 0A 6E                   	add		sp,sp,#10	; clean up the stack
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 17
tb.asm
    962 0000C554 25 BE                   	jmp		FINISH
                                        
                                        
    965 0000C556                        DEFLT
    966 0000C556 80 E1                       lb      r1,[r8]
    967 0000C558 FF 4F 13 10                 cmp     r1,#CR      ; empty line is OK
    968 0000C55C 21 B8                   	beq	    FINISH	    ; else it is 'LET'
                                        
                                        
                                        ; 'LET' is followed by a list of items separated by commas.
                                        ; Each item consists of a variable, an equals sign, and an
                                        ; expression.  The interpreter evaluates the expression and sets
                                        ; the variable to that value.  The interpreter will also handle
                                        ; 'LET' commands without the word 'LET'.  This is done by 'DEFLT'.
                                        ;
    977 0000C55E                        LET
    978 0000C55E 2E 40 06 AF                 call	SETVAL		; do the assignment
    979 0000C562 4C 40 06 AF             	call	TSTC		; check for more 'LET' items
    980 0000C566 2C 04                   	db	',',LT1-*+1
    981 0000C568 FA BE                   	br	    LET
    982 0000C56A                        LT1
    983 0000C56A 1A BE                       br	    FINISH		; until we are finished.
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** LOAD *** & SAVE ***
                                        ;
                                        ; These two commands transfer a program to/from an auxiliary
                                        ; device such as a cassette, another computer, etc.  The program
                                        ; is converted to an easily-stored format: each line starts with
                                        ; a colon, the line no. as 4 hex digits, and the rest of the line.
                                        ; At the end, a line starting with an '@' sign is sent.  This
                                        ; format can be read back with a minimum of processing time by
                                        ; the Butterfly.
                                        ;
    998 0000C56C                        LOAD
    999 0000C56C 01 4C 09 F8             	lw		r8,TXTBGN	; set pointer to start of prog. area
   1000 0000C570 00 40 0D 11             	lw		r1,#CR		; For a CP/M host, tell it we're ready...
   1001 0000C574 D4 4F 0A AF             	call	GOAUXO		; by sending a CR to finish PIP command.
   1002 0000C578                        LOD1
   1003 0000C578 D4 4F 0A AF             	call	GOAUXI		; look for start of line
   1004 0000C57C FD BA                   	bmi		LOD1
   1005 0000C57E FC 4F 10 10             	cmp		r1,#'@'		; end of program?
   1006 0000C582 1B A8                   	beq		LODEND
   1007 0000C584 FE 4F 16 10             	cmp     r1,#0x1A    ; or EOF marker
   1008 0000C588 18 A8                   	beq     LODEND
   1009 0000C58A FC 4F 16 10             	cmp		r1,#':'		; if not, is it start of line?
   1010 0000C58E F4 B9                   	bne		LOD1		; if not, wait for it
   1011 0000C590 18 AF                   	call	GCHAR		; get line number
   1012 0000C592 80 C1                   	sb		r1,[r8]		; store it
   1013 0000C594 A1 31                   	shr		r1,#1
   1014 0000C596 A1 31                   	shr		r1,#1
   1015 0000C598 A1 31                   	shr		r1,#1
   1016 0000C59A A1 31                   	shr		r1,#1
   1017 0000C59C A1 31                   	shr		r1,#1
   1018 0000C59E A1 31                   	shr		r1,#1
   1019 0000C5A0 A1 31                   	shr		r1,#1
   1020 0000C5A2 A1 31                   	shr		r1,#1
   1021 0000C5A4 81 C1                   	sb		r1,1[r8]
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 18
tb.asm
   1022 0000C5A6 02 68                   	add		r8,r8,#2
   1023 0000C5A8                        LOD2
   1024 0000C5A8 D3 4F 02 AF             	call	GOAUXI		; get another text char.
   1025 0000C5AC FD BA                   	bmi		LOD2
   1026 0000C5AE 80 C1                   	sb		r1,[r8]
   1027 0000C5B0 01 68                   	add		r8,r8,#1	; store it
   1028 0000C5B2 FF 4F 13 10             	cmp		r1,#CR		; is it the end of the line?
   1029 0000C5B6 F8 B9                   	bne		LOD2		; if not, go back for more
   1030 0000C5B8 DF BE                   	br		LOD1		; if so, start a new line
   1031 0000C5BA                        LODEND
   1032 0000C5BA 09 40 07 D8             	sw		r8,TXTUNF	; set end-of program pointer
   1033 0000C5BE D6 4F 06 AE             	br		WSTART		; back to direct mode
                                        
                                        
                                        ; get character from input (16 bit value)
   1037 0000C5C2                        GCHAR
   1038 0000C5C2 FA 6E                   	sub		sp,sp,#6
   1039 0000C5C4 E1 DF                   	sw		lr,[sp]
   1040 0000C5C6 E3 D5                   	sw		r5,2[sp]
   1041 0000C5C8 E5 D6                   	sw		r6,4[sp]
   1042 0000C5CA 04 16                   	lw      r6,#4       ; repeat four times
   1043 0000C5CC 00 15                   	lw		r5,#0
   1044 0000C5CE                        GCHAR1
   1045 0000C5CE D1 4F 0F AF             	call	GOAUXI		; get a char
   1046 0000C5D2 FD BA                   	bmi		GCHAR1
   1047 0000C5D4 0D AF                   	call	asciiToHex
   1048 0000C5D6 81 35                   	shl		r5,#1
   1049 0000C5D8 81 35                   	shl		r5,#1
   1050 0000C5DA 81 35                   	shl		r5,#1
   1051 0000C5DC 81 35                   	shl		r5,#1
   1052 0000C5DE 16 25                   	or		r5,r1
   1053 0000C5E0 FF 66                   	sub		r6,r6,#1
   1054 0000C5E2 F5 B9                   	bne     GCHAR1
   1055 0000C5E4 50 11                   	lw		r1,r5
   1056 0000C5E6 E1 FF                   	lw		lr,[sp]
   1057 0000C5E8 E3 F5                   	lw		r5,2[sp]
   1058 0000C5EA E5 F6                   	lw		r6,4[sp]
   1059 0000C5EC 06 6E                   	add     sp,sp,#6
   1060 0000C5EE F0 80                   	ret
                                        
                                        
                                        ; convert an ascii char to hex code
                                        ; input
                                        ;	r2 = char to convert
                                        
   1067 0000C5F0                        asciiToHex
   1068 0000C5F0 FC 4F 17 10             	cmp		r1,#'9'
   1069 0000C5F4 01 A2                   	ble		a2h1		; less than '9'
   1070 0000C5F6 F9 61                   	sub		r1,r1,#7	; shift 'A' to '9'+1
   1071 0000C5F8                        a2h1
   1072 0000C5F8 D0 61                   	sub		r1,r1,#'0'	;
   1073 0000C5FA 00 40 5F 31             	and		r1,#15		; make sure a nybble
   1074 0000C5FE F0 80                   	ret
                                        
                                        
                                        
   1078 0000C600                        SAVE
   1079 0000C600 01 4C 09 F8             	lw		r8,TXTBGN	;set pointer to start of prog. area
   1080 0000C604 09 40 07 F9             	lw		r9,TXTUNF	;set pointer to end of prog. area
   1081 0000C608                        SAVE1
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 19
tb.asm
   1082 0000C608 28 AF                   	call    AUXOCRLF    ; send out a CR & LF (CP/M likes this)
   1083 0000C60A 9D 28                   	cmp		r8,r9		; are we finished?
   1084 0000C60C 1B A5                   	bgeu	SAVEND
   1085 0000C60E 03 40 0A 11             	lw		r1,#':'		; if not, start a line
   1086 0000C612 CF 4F 0B AF             	call	GOAUXO
   1087 0000C616 80 E1                   	lb		r1,[r8]		; get line number
   1088 0000C618 0E 21                   	zxb		r1
   1089 0000C61A 81 E2                   	lb		r2,1[r8]
   1090 0000C61C 0E 22                   	zxb		r2
   1091 0000C61E 81 32                   	shl		r2,#1
   1092 0000C620 81 32                   	shl		r2,#1
   1093 0000C622 81 32                   	shl		r2,#1
   1094 0000C624 81 32                   	shl		r2,#1
   1095 0000C626 81 32                   	shl		r2,#1
   1096 0000C628 81 32                   	shl		r2,#1
   1097 0000C62A 81 32                   	shl		r2,#1
   1098 0000C62C 81 32                   	shl		r2,#1
   1099 0000C62E 26 21                   	or		r1,r2
   1100 0000C630 02 68                   	add		r8,r8,#2
   1101 0000C632 1F AF                   	call	PWORD       ; output line number as 4-digit hex
   1102 0000C634                        SAVE2
   1103 0000C634 80 E1                   	lb		r1,[r8]		; get a text char.
   1104 0000C636 01 68                   	add		r8,r8,#1
   1105 0000C638 FF 4F 13 10             	cmp		r1,#CR		; is it the end of the line?
   1106 0000C63C E5 B8                   	beq		SAVE1		; if so, send CR & LF and start new line
   1107 0000C63E CE 4F 05 AF             	call	GOAUXO		; send it out
   1108 0000C642 F8 BE                   	br		SAVE2		; go back for more text
   1109 0000C644                        SAVEND
   1110 0000C644 04 40 00 11             	lw		r1,#'@'		; send end-of-program indicator
   1111 0000C648 CE 4F 00 AF             	call	GOAUXO
   1112 0000C64C 06 AF                   	call    AUXOCRLF    ; followed by a CR & LF
   1113 0000C64E 01 40 0A 11             	lw		r1,#0x1A	; and a control-Z to end the CP/M file
   1114 0000C652 CD 4F 0B AF             	call	GOAUXO
   1115 0000C656 D1 4F 0A AE             	br		WSTART		; then go do a warm start
                                        
                                        
                                        ; output a CR LF sequence to auxillary output
                                        ; Registers Affected
                                        ;   r3 = LF
   1121 0000C65A                        AUXOCRLF
   1122 0000C65A FE 6E                       sub     sp,sp,#2
   1123 0000C65C E1 DF                       sw      lr,[sp]
   1124 0000C65E 00 40 0D 11                 lw      r1,#CR
   1125 0000C662 CD 4F 03 AF                 call    GOAUXO
   1126 0000C666 0A 11                       lw      r1,#LF
   1127 0000C668 CD 4F 00 AF                 call    GOAUXO
   1128 0000C66C E1 FF                       lw      lr,[sp]
   1129 0000C66E 02 6E                   	add		sp,sp,#2
   1130 0000C670 F0 80                       ret
                                        
                                        
                                        ; output a word in hex format
                                        ; tricky because of the need to reverse the order of the chars
   1135 0000C672                        PWORD
   1136 0000C672 FC 6E                   	sub		sp,sp,#4
   1137 0000C674 E1 DF                   	sw		lr,[sp]
   1138 0000C676 E3 D5                   	sw		r5,2[sp]
   1139 0000C678 0A 40 05 15             	lea     r5,NUMWKA+3
   1140 0000C67C 10 14                   	lw		r4,r1		; r4 = value
   1141 0000C67E                        pword1
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 20
tb.asm
   1142 0000C67E 40 11                       lw      r1,r4       ; r1 = value
   1143 0000C680 A1 34                       shr     r4,#1       ; shift over to next nybble
   1144 0000C682 A1 34                       shr     r4,#1
   1145 0000C684 A1 34                       shr     r4,#1
   1146 0000C686 A1 34                       shr     r4,#1
   1147 0000C688 10 AF                       call    toAsciiHex  ; convert LS nybble to ascii hex
   1148 0000C68A 50 C1                       sb      r1,[r5]     ; save in work area
   1149 0000C68C FF 65                       sub     r5,r5,#1
   1150 0000C68E F5 4F 5E 10                 cmp     r5,#NUMWKA
   1151 0000C692 F5 B5                       bgeu    pword1
   1152 0000C694                        pword2
   1153 0000C694 01 65                       add     r5,r5,#1
   1154 0000C696 50 E1                       lb      r1,[r5]     ; get char to output
   1155 0000C698 CB 4F 08 AF             	call	GOAUXO		; send it
   1156 0000C69C F5 4F 5B 10             	cmp     r5,#NUMWKA+3
   1157 0000C6A0 F9 B4                   	bltu    pword2
                                        
   1159 0000C6A2 E3 F5                   	lw		r5,2[sp]
   1160 0000C6A4 E1 FF                   	lw		lr,[sp]
   1161 0000C6A6 04 6E                   	add		sp,sp,#4
   1162 0000C6A8 F0 80                   	ret
                                        
                                        
                                        ; convert nybble in r2 to ascii hex char2
                                        ; r2 = character to convert
                                        
   1168 0000C6AA                        toAsciiHex
   1169 0000C6AA 00 40 5F 31             	and		r1,#15		; make sure it's a nybble
   1170 0000C6AE FF 4F 16 10             	cmp		r1,#10		; > 10 ?
   1171 0000C6B2 01 A0                   	blt		tah1
   1172 0000C6B4 07 61                   	add		r1,r1,#7	; bump it up to the letter 'A'
   1173 0000C6B6                        tah1
   1174 0000C6B6 30 61                   	add		r1,r1,#'0'	; bump up to ascii '0'
   1175 0000C6B8 F0 80                   	ret
                                        
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** POKE *** & SYSX ***
                                        ;
                                        ; 'POKE expr1,expr2' stores the byte from 'expr2' into the memory
                                        ; address specified by 'expr1'.
                                        ;
                                        ; 'SYSX expr' jumps to the machine language subroutine whose
                                        ; starting address is specified by 'expr'.  The subroutine can use
                                        ; all registers but must leave the stack the way it found it.
                                        ; The subroutine returns to the interpreter by executing an RET.
                                        ;
   1191 0000C6BA                        POKE
   1192 0000C6BA FE 6E                   	sub		sp,sp,#2
   1193 0000C6BC 29 AF                   	call	OREXPR		; get the memory address
   1194 0000C6BE 41 40 08 AF             	call	TSTC		; it must be followed by a comma
   1195 0000C6C2 2C 10                   	db	',',PKER-*+1
   1196 0000C6C4 E1 D1                   	sw		r1,[sp]	    ; save the address
   1197 0000C6C6 24 AF                   	call	OREXPR		; get the byte to be POKE'd
   1198 0000C6C8 E1 F2                   	lw		r2,[sp]	    ; get the address back
   1199 0000C6CA 20 C1                   	sb		r1,[r2]		; store the byte in memory
   1200 0000C6CC 02 6E                   	add		sp,sp,#2
   1201 0000C6CE E6 4F 07 AE             	br		FINISH
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 21
tb.asm
   1202 0000C6D2                        PKER
   1203 0000C6D2 2C 4D 0A 11             	lea		r1,msgComma
   1204 0000C6D6 26 40 08 AE             	br		ERROR		; if no comma, say "What?"
                                        
                                        
   1207 0000C6DA                        POKEW
   1208 0000C6DA FE 6E                   	sub		sp,sp,#2
   1209 0000C6DC 19 AF                   	call	OREXPR		; get the memory address
   1210 0000C6DE 40 40 08 AF             	call	TSTC		; it must be followed by a comma
   1211 0000C6E2 2C F0                   	db	',',PKER-*+1
   1212 0000C6E4 E1 D1                   	sw		r1,[sp]	    ; save the address
   1213 0000C6E6 14 AF                   	call	OREXPR		; get the byte to be POKE'd
   1214 0000C6E8 E1 F2                   	lw		r2,[sp]	    ; get the address back
   1215 0000C6EA 21 D1                   	sw		r1,[r2]		; store the word in memory
   1216 0000C6EC 02 6E                   	add		sp,sp,#2
   1217 0000C6EE E5 4F 07 AE             	jmp		FINISH
                                        
                                        
   1220 0000C6F2                        SYSX
   1221 0000C6F2 FE 6E                   	sub		sp,sp,#2
   1222 0000C6F4 0D AF                   	call	OREXPR		; get the subroutine's address
   1223 0000C6F6 16 20                   	or		r0,r1		; make sure we got a valid address
   1224 0000C6F8 04 A9                   	bne		sysx1
   1225 0000C6FA 31 4D 0F 11             	lea		r1,msgSYSBad
   1226 0000C6FE 25 40 04 AE             	br		ERROR
   1227 0000C702                        sysx1
   1228 0000C702 E1 D8                   	sw		r8,[sp]	    ; save the text pointer
   1229 0000C704 C7 49 0C AF             	call	[r1]		; jump to the subroutine
   1230 0000C708 E1 F8                   	lw		r8,[sp]	    ; restore the text pointer
   1231 0000C70A 02 6E                   	add		sp,sp,#2
   1232 0000C70C E4 4F 08 AE             	br		FINISH
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** EXPR ***
                                        ;
                                        ; 'EXPR' evaluates arithmetical or logical expressions.
                                        ; <OREXPR>::= <ANDEXPR> OR <ANDEXPR> ...
                                        ; <ANDEXPR>::=<EXPR> AND <EXPR> ...
                                        ; <EXPR>::=<EXPR2>
                                        ;	   <EXPR2><rel.op.><EXPR2>
                                        ; where <rel.op.> is one of the operators in TAB8 and the result
                                        ; of these operations is 1 if true and 0 if false.
                                        ; <EXPR2>::=(+ or -)<EXPR3>(+ or -)<EXPR3>(...
                                        ; where () are optional and (... are optional repeats.
                                        ; <EXPR3>::=<EXPR4>( <* or /><EXPR4> )(...
                                        ; <EXPR4>::=<variable>
                                        ;	    <function>
                                        ;	    (<EXPR>)
                                        ; <EXPR> is recursive so that the variable '@' can have an <EXPR>
                                        ; as an index, functions can have an <EXPR> as arguments, and
                                        ; <EXPR4> can be an <EXPR> in parenthesis.
                                        ;
                                        
                                        
                                        ; <OREXPR>::=<ANDEXPR> OR <ANDEXPR> ...
                                        ;
   1260 0000C710                        OREXPR
   1261 0000C710 FC 6E                   	sub		sp,sp,#4
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 22
tb.asm
   1262 0000C712 E1 DF                   	sw		lr,[sp]
   1263 0000C714 0F AF                   	call	ANDEXPR		; get first <ANDEXPR>
   1264 0000C716                        XP_OR1
   1265 0000C716 E3 D1                   	sw		r1,2[sp]	; save <ANDEXPR> value
   1266 0000C718 1D 4C 0C 19             	lea		r9,TAB10		; look up a logical operator
   1267 0000C71C 23 4C 0A 1A             	lea		r10,TAB10_1
   1268 0000C720 D9 4F 01 AE             	jmp		EXEC		; go do it
                                        
   1270 0000C724                        XP_OR
   1271 0000C724 07 AF                       call    ANDEXPR
   1272 0000C726 E3 F2                       lw      r2,2[sp]
   1273 0000C728 26 21                       or      r1,r2
   1274 0000C72A F5 BE                       br      XP_OR1
                                        
   1276 0000C72C                        XP_ORX
   1277 0000C72C E3 F1                   	lw		r1,2[sp]
   1278 0000C72E E1 FF                       lw      lr,[sp]
   1279 0000C730 04 6E                       add     sp,sp,#4
   1280 0000C732 F0 80                       ret
                                        
                                        
                                        ; <ANDEXPR>::=<EXPR> AND <EXPR> ...
                                        ;
   1285 0000C734                        ANDEXPR
   1286 0000C734 FC 6E                   	sub		sp,sp,#4
   1287 0000C736 E1 DF                   	sw		lr,[sp]
   1288 0000C738 37 AF                   	call	EXPR		; get first <EXPR>
   1289 0000C73A                        XP_AND1
   1290 0000C73A E3 D1                   	sw		r1,2[sp]	; save <EXPR> value
   1291 0000C73C 1D 4C 08 19             	lea		r9,TAB9		; look up a logical operator
   1292 0000C740 23 4C 06 1A             	lea		r10,TAB9_1
   1293 0000C744 D7 4F 0F AE             	jmp		EXEC		; go do it
                                        
   1295 0000C748                        XP_AND
   1296 0000C748 2F AF                       call    EXPR
   1297 0000C74A E3 F2                       lw      r2,2[sp]
   1298 0000C74C 25 21                       and     r1,r2
   1299 0000C74E F5 BE                       br      XP_AND1
                                        
   1301 0000C750                        XP_ANDX
   1302 0000C750 E3 F1                   	lw		r1,2[sp]
   1303 0000C752 E1 FF                       lw      lr,[sp]
   1304 0000C754 04 6E                       add     sp,sp,#4
   1305 0000C756 F0 80                       ret
                                        
                                        
                                        ; Determine if the character is a digit
                                        ;   Parameters
                                        ;       r2 = char to test
                                        ;   Returns
                                        ;       r1 = 1 if digit, otherwise 0
                                        ;
   1314 0000C758                        isDigit
   1315 0000C758 FD 4F 10 10                 cmp     r1,#'0'
   1316 0000C75C 05 A0                       blt     isDigitFalse
   1317 0000C75E FC 4F 17 10                 cmp     r1,#'9'
   1318 0000C762 02 A3                       bgt     isDigitFalse
   1319 0000C764 01 11                       lw      r1,#1
   1320 0000C766 F0 80                       ret
   1321 0000C768                        isDigitFalse
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 23
tb.asm
   1322 0000C768 00 11                       lw      r1,#0
   1323 0000C76A F0 80                       ret
                                        
                                        
                                        ; Determine if the character is a alphabetic
                                        ;   Parameters
                                        ;       r2 = char to test
                                        ;   Returns
                                        ;       r1 = 1 if alpha, otherwise 0
                                        ;
   1332 0000C76C                        isAlpha
   1333 0000C76C FB 4F 1F 10                 cmp     r1,#'A'
   1334 0000C770 0B A0                       blt     isAlphaFalse
   1335 0000C772 FA 4F 16 10                 cmp     r1,#'Z'
   1336 0000C776 06 A2                       ble     isAlphaTrue
   1337 0000C778 F9 4F 1F 10                 cmp     r1,#'a'
   1338 0000C77C 05 A0                       blt     isAlphaFalse
   1339 0000C77E F8 4F 16 10                 cmp     r1,#'z'
   1340 0000C782 02 A3                       bgt     isAlphaFalse
   1341 0000C784                        isAlphaTrue
   1342 0000C784 01 11                       lw      r1,#1
   1343 0000C786 F0 80                       ret
   1344 0000C788                        isAlphaFalse
   1345 0000C788 00 11                       lw      r1,#0
   1346 0000C78A F0 80                       ret
                                        
                                        
                                        ; Determine if the character is a alphanumeric
                                        ;   Parameters
                                        ;       r1 = char to test
                                        ;   Returns
                                        ;       r1 = 1 if alpha, otherwise 0
                                        ;
   1355 0000C78C                        isAlnum
   1356 0000C78C FE 6E                       sub     sp,sp,#2
   1357 0000C78E E1 DF                       sw      lr,[sp]
   1358 0000C790 10 12                       lw      r2,r1		; save test char
   1359 0000C792 E2 BF                       call    isDigit
   1360 0000C794 06 A9                       bne		isDigitx	; if it is a digit
   1361 0000C796 20 11                       lw      r1,r2		; get back test char
   1362 0000C798 E9 BF                       call    isAlpha
   1363 0000C79A E1 FF                       lw      lr,[sp]
   1364 0000C79C 02 6E                       add		sp,sp,#2
   1365 0000C79E 16 21                       or      r1,r1
   1366 0000C7A0 F0 80                       ret
   1367 0000C7A2                        isDigitx
   1368 0000C7A2 E1 FF                       lw      lr,[sp]
   1369 0000C7A4 02 6E                       add     sp,sp,#2	; return Z=0
   1370 0000C7A6 F0 80                       ret
                                        
                                        
   1373 0000C7A8                        EXPR
   1374 0000C7A8 FC 6E                   	sub		sp,sp,#4
   1375 0000C7AA E1 DF                   	sw		lr,[sp]
   1376 0000C7AC 39 AF                   	call	EXPR2
   1377 0000C7AE E3 D1                   	sw		r1,2[sp]	; save <EXPR2> value
   1378 0000C7B0 1C 4C 0E 19             	lea		r9,TAB8		; look up a relational operator
   1379 0000C7B4 22 4C 08 1A             	lea		r10,TAB8_1
   1380 0000C7B8 D4 4F 05 AE             	jmp		EXEC		; go do it
                                        
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 24
tb.asm
   1382 0000C7BC                        XP11
   1383 0000C7BC E3 F1                   	lw		r1,2[sp]
   1384 0000C7BE 28 AF                   	call	XP18	; is it ">="?
   1385 0000C7C0 1D 22                   	cmp		r2,r1
   1386 0000C7C2 1E A1                   	bge		XPRT1	; no, return r2=1
   1387 0000C7C4 19 AE                   	br		XPRT0	; else return r2=0
                                        
   1389 0000C7C6                        XP12
   1390 0000C7C6 E3 F1                   	lw		r1,2[sp]
   1391 0000C7C8 23 AF                   	call	XP18	; is it "<>"?
   1392 0000C7CA 1D 22                   	cmp		r2,r1
   1393 0000C7CC 19 A9                   	bne		XPRT1	; no, return r2=1
   1394 0000C7CE 14 AE                   	br		XPRT0	; else return r2=0
                                        
   1396 0000C7D0                        XP13
   1397 0000C7D0 E3 F1                   	lw		r1,2[sp]
   1398 0000C7D2 1E AF                   	call	XP18	; is it ">"?
   1399 0000C7D4 1D 22                   	cmp		r2,r1
   1400 0000C7D6 14 A3                   	bgt		XPRT1	; no, return r2=1
   1401 0000C7D8 0F AE                   	br		XPRT0	; else return r2=0
                                        
   1403 0000C7DA                        XP14
   1404 0000C7DA E3 F1                   	lw		r1,2[sp]
   1405 0000C7DC 19 AF                   	call	XP18	; is it "<="?
   1406 0000C7DE 1D 22                   	cmp		r2,r1
   1407 0000C7E0 0F A2                   	ble		XPRT1	; no, return r2=1
   1408 0000C7E2 0A AE                   	br		XPRT0	; else return r2=0
                                        
   1410 0000C7E4                        XP15
   1411 0000C7E4 E3 F1                   	lw		r1,2[sp]
   1412 0000C7E6 14 AF                   	call	XP18	; is it "="?
   1413 0000C7E8 1D 22                   	cmp		r2,r1
   1414 0000C7EA 0A A8                   	beq		XPRT1	; if not, return r2=1
   1415 0000C7EC 05 AE                   	br		XPRT0	; else return r2=0
                                        
                                        
   1418 0000C7EE                        XP16
   1419 0000C7EE E3 F1                   	lw		r1,2[sp]
   1420 0000C7F0 0F AF                   	call	XP18	; is it "<"?
   1421 0000C7F2 1D 22                   	cmp		r2,r1
   1422 0000C7F4 05 A0                   	blt		XPRT1	; if not, return r2=1
   1423 0000C7F6 00 AE                   	br		XPRT0	; else return r2=0
                                        
   1425 0000C7F8                        XPRT0
   1426 0000C7F8 E1 FF                   	lw		lr,[sp]
   1427 0000C7FA 04 6E                   	add		sp,sp,#4
   1428 0000C7FC 00 11                   	lw		r1,#0   ; return r1=0 (false)
   1429 0000C7FE F0 80                   	ret
                                        
   1431 0000C800                        XPRT1
   1432 0000C800 E1 FF                   	lw		lr,[sp]
   1433 0000C802 04 6E                   	add		sp,sp,#4
   1434 0000C804 01 11                   	lw		r1,#1	; return r1=1 (true)
   1435 0000C806 F0 80                   	ret
                                        
   1437 0000C808                        XP17				; it's not a rel. operator
   1438 0000C808 E3 F1                   	lw		r1,2[sp]	; return r2=<EXPR2>
   1439 0000C80A E1 FF                   	lw		lr,[sp]
   1440 0000C80C 04 6E                   	add		sp,sp,#4
   1441 0000C80E F0 80                   	ret
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 25
tb.asm
                                        
   1443 0000C810                        XP18
   1444 0000C810 FC 6E                   	sub		sp,sp,#4
   1445 0000C812 E1 DF                   	sw		lr,[sp]
   1446 0000C814 E3 D1                   	sw		r1,2[sp]
   1447 0000C816 04 AF                   	call	EXPR2		; do a second <EXPR2>
   1448 0000C818 E3 F2                   	lw		r2,2[sp]
   1449 0000C81A E1 FF                   	lw		lr,[sp]
   1450 0000C81C 04 6E                   	add		sp,sp,#4
   1451 0000C81E F0 80                   	ret
                                        
                                        ; <EXPR2>::=(+ or -)<EXPR3>(+ or -)<EXPR3>(...
                                        
   1455 0000C820                        EXPR2
   1456 0000C820 FC 6E                   	sub		sp,sp,#4
   1457 0000C822 E1 DF                   	sw		lr,[sp]
   1458 0000C824 36 40 05 AF             	call	TSTC		; negative sign?
   1459 0000C828 2D 08                   	db	'-',XP21-*+1
   1460 0000C82A 00 11                   	lw		r1,#0		; yes, fake '0-'
   1461 0000C82C E3 D1                   	sw		r1,2[sp]
   1462 0000C82E 0F AE                   	br		XP26
   1463 0000C830                        XP21
   1464 0000C830 35 40 0F AF             	call	TSTC		; positive sign? ignore it
   1465 0000C834 2B 02                   	db	'+',XP22-*+1
   1466 0000C836                        XP22
   1467 0000C836 12 AF                   	call	EXPR3		; first <EXPR3>
   1468 0000C838                        XP23
   1469 0000C838 E3 D1                   	sw		r1,2[sp]	; yes, save the value
   1470 0000C83A 35 40 0A AF             	call	TSTC		; add?
   1471 0000C83E 2B 0A                   	db	'+',XP25-*+1
   1472 0000C840 0D AF                   	call	EXPR3		; get the second <EXPR3>
   1473 0000C842                        XP24
   1474 0000C842 E3 F2                   	lw		r2,2[sp]
   1475 0000C844 20 21                   	add		r1,r2		; add it to the first <EXPR3>
                                        ;	BVS.L	QHOW		brnch if there's an overflow
   1477 0000C846 F8 BE                   	br		XP23		; else go back for more operations
   1478 0000C848                        XP25
   1479 0000C848 35 40 03 AF             	call	TSTC		; subtract?
   1480 0000C84C 2D 08                   	db	'-',XP45-*+1
   1481 0000C84E                        XP26
   1482 0000C84E 06 AF                   	call	EXPR3		; get second <EXPR3>
   1483 0000C850 20 31                   	neg		r1			; change its sign
   1484 0000C852 F7 BE                   	br		XP24		; and do an addition
                                        
   1486 0000C854                        XP45
   1487 0000C854 E3 F1                   	lw		r1,2[sp]
   1488 0000C856 E1 FF                   	lw		lr,[sp]
   1489 0000C858 04 6E                   	add		sp,sp,#4
   1490 0000C85A F0 80                   	ret
                                        
                                        
                                        ; <EXPR3>::=<EXPR4>( <* or /><EXPR4> )(...
                                        
   1495 0000C85C                        EXPR3
   1496 0000C85C FC 6E                   	sub		sp,sp,#4
   1497 0000C85E E1 DF                   	sw		lr,[sp]
   1498 0000C860 14 AF                   	call	EXPR4		; get first <EXPR4>
   1499 0000C862                        XP31
   1500 0000C862 E3 D1                   	sw		r1,2[sp]	; yes, save that first result
   1501 0000C864 34 40 05 AF             	call	TSTC		; multiply?
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 26
tb.asm
   1502 0000C868 2A 0A                   	db	'*',XP34-*+1
   1503 0000C86A 0F AF                   	call	EXPR4		; get second <EXPR4>
   1504 0000C86C E3 F2                   	lw		r2,2[sp]
   1505 0000C86E B8 AF                   	call	MULT32		; multiply the two
   1506 0000C870 F8 BE                   	br		XP31		 ; then look for more terms
   1507 0000C872                        XP34
   1508 0000C872 33 40 0E AF             	call	TSTC		; divide?
   1509 0000C876 2F 0C                   	db	'/',XP47-*+1
   1510 0000C878 08 AF                   	call	EXPR4		; get second <EXPR4>
   1511 0000C87A 10 12                   	lw      r2,r1
   1512 0000C87C E3 F1                   	lw		r1,2[sp]
   1513 0000C87E CD AF                   	call	DIV32		; do the division
   1514 0000C880 F0 BE                   	br		XP31		; go back for any more terms
                                        
   1516 0000C882                        XP47
   1517 0000C882 E3 F1                   	lw		r1,2[sp]
   1518 0000C884 E1 FF                   	lw		lr,[sp]
   1519 0000C886 04 6E                   	add		sp,sp,#4
   1520 0000C888 F0 80                   	ret
                                        
                                        
                                        ; Functions are called through EXPR4
                                        ; <EXPR4>::=<variable>
                                        ;	    <function>
                                        ;	    (<EXPR>)
                                        
   1528 0000C88A                        EXPR4
   1529 0000C88A FA 6E                       sub     sp,sp,#6
   1530 0000C88C E1 DF                       sw      lr,[sp]
   1531 0000C88E 1A 4C 0A 19             	lea		r9,TAB4		; find possible function
   1532 0000C892 21 4C 00 1A             	lea		r10,TAB4_1
   1533 0000C896 CD 4F 06 AE             	jmp		EXEC        ; branch to function which does subsequent
                                        	                    ; ret for EXPR4
                                        
   1536 0000C89A                        XP40                    ; we get here if it wasn't a function
   1537 0000C89A 00 11                   	lw		r1,#0
   1538 0000C89C 1D AF                   	call	TSTV		
   1539 0000C89E 04 A8                   	beq     XP41        ; nor a variable
   1540 0000C8A0 11 F1                   	lw		r1,[r1]		; if a variable, return its value in r1
   1541 0000C8A2 E1 FF                   	lw      lr,[sp]
   1542 0000C8A4 06 6E                   	add     sp,sp,#6
   1543 0000C8A6 F0 80                   	ret
   1544 0000C8A8                        XP41
   1545 0000C8A8 33 40 05 AF             	call	TSTNUM		; or is it a number?
   1546 0000C8AC 26 22                   	or		r2,r2		; (if not, # of digits will be zero)
   1547 0000C8AE 01 A9                   	bne		XP46		; if so, return it in r1
   1548 0000C8B0 03 AF                   	call    PARN        ; check for (EXPR)
   1549 0000C8B2                        XP46
   1550 0000C8B2 E1 FF                   	lw      lr,[sp]
   1551 0000C8B4 06 6E                   	add     sp,sp,#6
   1552 0000C8B6 F0 80                   	ret
                                        
                                        
                                        ; Check for a parenthesized expression
   1556 0000C8B8                        PARN
   1557 0000C8B8 FE 6E                   	sub		sp,sp,#2
   1558 0000C8BA E1 DF                   	sw		lr,[sp]
   1559 0000C8BC 31 40 09 AF             	call	TSTC		; else look for ( OREXPR )
   1560 0000C8C0 28 10                   	db	'(',XP43-*+1
   1561 0000C8C2 26 BF                   	call	OREXPR
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 27
tb.asm
   1562 0000C8C4 31 40 05 AF             	call	TSTC
   1563 0000C8C8 29 08                   	db	')',XP43-*+1
   1564 0000C8CA                        XP42
   1565 0000C8CA E1 FF                   	lw		lr,[sp]
   1566 0000C8CC 02 6E                   	add		sp,sp,#2
   1567 0000C8CE F0 80                   	ret
   1568 0000C8D0                        XP43
   1569 0000C8D0 24 4D 07 11             	lea		r1,msgWhat
   1570 0000C8D4 16 40 09 AE             	br		ERROR
                                        
                                        
                                        ; ===== Test for a valid variable name.  Returns Z=1 if not
                                        ;	found, else returns Z=0 and the address of the
                                        ;	variable in r1.
                                        ; Parameters
                                        ;	r1 = 1 = allocate if not found
                                        ; Returns
                                        ;	r1 = address of variable, zero if not found
                                        
   1581 0000C8D8                        TSTV
   1582 0000C8D8 FA 6E                   	sub		sp,sp,#6
   1583 0000C8DA E1 DF                   	sw		lr,[sp]
   1584 0000C8DC E3 D5                   	sw		r5,2[sp]
   1585 0000C8DE 10 15                   	lw		r5,r1		; allocate flag
   1586 0000C8E0 33 40 0A AF             	call	IGNBLK
   1587 0000C8E4 80 E1                   	lb		r1,[r8]		; look at the program text
   1588 0000C8E6 FC 4F 10 10             	cmp     r1,#'@'
   1589 0000C8EA 1C A0                   	blt     tstv_notfound   ; C=1: not a variable
   1590 0000C8EC 12 A9                   	bne		TV1			; brnch if not "@" array
   1591 0000C8EE 01 68                   	add		r8,r8,#1	; If it is, it should be
   1592 0000C8F0 E3 BF                   	call	PARN		; followed by (EXPR) as its index.
   1593 0000C8F2 81 31                   	shl     r1,#1
   1594 0000C8F4 81 31                   	shl     r1,#1
                                        ;	BCS.L	QHOW		say "How?" if index is too big
   1596 0000C8F6 E5 D1                       sw      r1,4[sp]    ; save the index
   1597 0000C8F8 F4 6E                       sub		sp,sp,#12
   1598 0000C8FA E1 DF                       sw		lr,[sp]
   1599 0000C8FC 10 40 0F AF             	call	SIZEX		; get amount of free memory
   1600 0000C900 E5 F2                   	lw      r2,4[sp]    ; get back the index
   1601 0000C902 1D 22                   	cmp     r2,r1       ; see if there's enough memory
   1602 0000C904 02 A4                   	bltu	TV2
   1603 0000C906 14 40 0B AE             	jmp    	QSORRY		; if not, say "Sorry"
   1604 0000C90A                        TV2
   1605 0000C90A 09 40 09 F1             	lw      r1,VARBGN   ; put address of array element...
   1606 0000C90E 22 21                   	sub     r1,r2       ; into r1 (neg. offset is used)
   1607 0000C910 05 AE                   	br      TSTVRT
   1608 0000C912                        TV1	
   1609 0000C912 0D AF                       call    getVarName      ; get variable name
   1610 0000C914 07 A8                       beq     tstv_notfound   ; if not, set Z=1 and return
   1611 0000C916 50 12                       lw		r2,r5
   1612 0000C918 45 AF                       call    findVar     ; find or allocate
   1613 0000C91A 04 A8                       beq		tstv_notfound
   1614 0000C91C                        TSTVRT
   1615 0000C91C E3 F5                   	lw		r5,2[sp]
   1616 0000C91E E1 FF                   	lw		lr,[sp]
   1617 0000C920 06 6E                   	add		sp,sp,#6    ; Z=0 (found)
   1618 0000C922 F0 80                   	ret
   1619 0000C924                        tstv_notfound
   1620 0000C924 E3 F5                   	lw		r5,2[sp]
   1621 0000C926 E1 FF                       lw      lr,[sp]
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 28
tb.asm
   1622 0000C928 06 6E                       add     sp,sp,#6
   1623 0000C92A 00 11                       lw      r1,#0       ; Z=1 if not found
   1624 0000C92C F0 80                       ret
                                        
                                        
                                        ; Returns
                                        ;   r1 = 3 character variable name + type
                                        ;
   1630 0000C92E                        getVarName
   1631 0000C92E FA 6E                       sub     sp,sp,#6
   1632 0000C930 E1 DF                       sw      lr,[sp]
   1633 0000C932 E5 D5                       sw		r5,4[sp]
                                        
   1635 0000C934 80 E1                       lb      r1,[r8]     ; get first character
   1636 0000C936 E3 D1                       sw		r1,2[sp]	; save off current name
   1637 0000C938 19 BF                       call    isAlpha
   1638 0000C93A 2F A8                       beq     gvn1
   1639 0000C93C 02 15                       lw      r5,#2       ; loop twice more
                                        
                                        	; check for second/third character
   1642 0000C93E                        gvn4
   1643 0000C93E 01 68                   	add     r8,r8,#1
   1644 0000C940 80 E1                   	lb      r1,[r8]     ; do we have another char ?
   1645 0000C942 24 BF                   	call    isAlnum
   1646 0000C944 12 A8                   	beq     gvn2        ; nope
   1647 0000C946 E3 F1                   	lw      r1,2[sp]    ; get varname
   1648 0000C948 81 31                   	shl     r1,#1       ; shift left by eight
   1649 0000C94A 81 31                   	shl     r1,#1       ; shift left by eight
   1650 0000C94C 81 31                   	shl     r1,#1       ; shift left by eight
   1651 0000C94E 81 31                   	shl     r1,#1       ; shift left by eight
   1652 0000C950 81 31                   	shl     r1,#1       ; shift left by eight
   1653 0000C952 81 31                   	shl     r1,#1       ; shift left by eight
   1654 0000C954 81 31                   	shl     r1,#1       ; shift left by eight
   1655 0000C956 81 31                   	shl     r1,#1       ; shift left by eight
   1656 0000C958 80 E2                   	lb      r2,[r8]
   1657 0000C95A 26 21                   	or      r1,r2       ; add in new char
   1658 0000C95C E3 D1                       sw      r1,2[sp]   ; save off name again
   1659 0000C95E FF 65                       sub		r5,r5,#1
   1660 0000C960 EE B9                       bne     gvn4
                                        
                                            ; now ignore extra variable name characters
   1663 0000C962                        gvn6
   1664 0000C962 01 68                       add     r8,r8,#1
   1665 0000C964 80 E1                       lb      r1,[r8]
   1666 0000C966 12 BF                       call    isAlnum
   1667 0000C968 FC B9                       bne     gvn6        ; keep looping as long as we have identifier chars
                                            
   1669 0000C96A                        gvn2
   1670 0000C96A 80 E1                   	lb		r1,[r8]
   1671 0000C96C FD 4F 1B 10                 cmp     r1,#'%'
   1672 0000C970 05 A8                       beq     gvn3
   1673 0000C972 FD 4F 1C 10                 cmp     r1,#'$'
   1674 0000C976 02 A8                       beq     gvn3
   1675 0000C978 00 11                       lw      r1,#0
   1676 0000C97A FF 68                       sub     r8,r8,#1
                                        
                                            ; insert variable type indicator and return
   1679 0000C97C                        gvn3
   1680 0000C97C 01 68                       add     r8,r8,#1
   1681 0000C97E E3 F2                       lw      r2,2[sp]
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 29
tb.asm
   1682 0000C980 81 32                       shl     r2,#1
   1683 0000C982 81 32                       shl     r2,#1
   1684 0000C984 81 32                       shl     r2,#1
   1685 0000C986 81 32                       shl     r2,#1
   1686 0000C988 81 32                       shl     r2,#1
   1687 0000C98A 81 32                       shl     r2,#1
   1688 0000C98C 81 32                       shl     r2,#1
   1689 0000C98E 81 32                       shl     r2,#1
   1690 0000C990 26 21                       or      r1,r2       ; add in variable type
   1691 0000C992 E1 FF                       lw      lr,[sp]
   1692 0000C994 E5 F5                       lw		r5,4[sp]
   1693 0000C996 06 6E                       add     sp,sp,#6   ; return Z = 0, r1 = varname
   1694 0000C998 F0 80                       ret
                                        
                                            ; not a variable name
   1697 0000C99A                        gvn1
   1698 0000C99A E1 FF                       lw      lr,[sp]
   1699 0000C99C E5 F5                       lw		r5,4[sp]
   1700 0000C99E 06 6E                       add     sp,sp,#6
   1701 0000C9A0 00 11                       lw      r1,#0       ; return Z = 1 if not a varname
   1702 0000C9A2 F0 80                       ret
                                        
                                        
                                        ; Find variable
                                        ;   r1 = varname
                                        ;	r2 = allocate flag
                                        ; Returns
                                        ;   r1 = variable address, Z =0 if found / allocated, Z=1 if not found
                                        
   1711 0000C9A4                        findVar
   1712 0000C9A4 FC 6E                       sub     sp,sp,#4
   1713 0000C9A6 E1 DF                       sw      lr,[sp]
   1714 0000C9A8 E3 D7                       sw      r7,2[sp]
   1715 0000C9AA 09 40 09 F3                 lw      r3,VARBGN
   1716 0000C9AE                        fv4
   1717 0000C9AE 31 F7                       lw      r7,[r3]     ; get varname / type
   1718 0000C9B0 0A A8                       beq     fv3         ; no more vars ?
   1719 0000C9B2 7D 21                       cmp     r1,r7       ; match ?
   1720 0000C9B4 0B A8                       beq     fv1
   1721 0000C9B6 08 63                       add     r3,r3,#8    ; move to next var
   1722 0000C9B8 0A 40 01 F7                 lw      r7,STKBOT
   1723 0000C9BC 7D 23                       cmp     r3,r7
   1724 0000C9BE F7 B0                       blt     fv4         ; loop back to look at next var
                                        
                                            ; variable not found
                                            ; no more memory
   1728 0000C9C0 29 4D 0A 11                 lea     r1,msgVarSpace
   1729 0000C9C4 F2 AE                       br      ERROR
                                        ;    lw      lr,[sp]
                                        ;    lw      r7,2[sp]
                                        ;    add     sp,sp,#4
                                        ;    lw      r1,#0
                                        ;    ret
                                        
                                            ; variable not found
                                            ; allocate new ?
   1738 0000C9C6                        fv3
   1739 0000C9C6 26 22                   	or		r2,r2
   1740 0000C9C8 06 A8                   	beq		fv2
   1741 0000C9CA 31 D1                       sw      r1,[r3]     ; save varname / type
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 30
tb.asm
                                            ; found variable
                                            ; return address
   1744 0000C9CC                        fv1
   1745 0000C9CC 34 11                       add     r1,r3,#4
   1746 0000C9CE E1 FF                       lw      lr,[sp]
   1747 0000C9D0 E3 F7                       lw      r7,2[sp]
   1748 0000C9D2 04 6E                       add     sp,sp,#4    ; Z = 0, r1 = address
   1749 0000C9D4 F0 80                       ret
                                        
                                            ; didn't find var and not allocating
   1752 0000C9D6                        fv2
   1753 0000C9D6 E1 FF                       lw      lr,[sp]
   1754 0000C9D8 E3 F7                       lw      r7,2[sp]
   1755 0000C9DA 04 6E                       add     sp,sp,#4    ; Z = 0, r1 = address
   1756 0000C9DC 00 11                   	lw		r1,#0		; Z = 1, r1 = 0
   1757 0000C9DE F0 80                       ret
                                        
                                        
                                        ; ===== Multiplies the 32 bit values in r1 and r2, returning
                                        ;	the 32 bit result in r1.
                                        ;
                                        
   1764 0000C9E0                        MULT32
   1765 0000C9E0 FA 6E                   	sub		sp,sp,#6
   1766 0000C9E2 E1 D5                   	sw		r5,[sp]		; w
   1767 0000C9E4 E3 D6                   	sw		r6,2[sp]	; s
   1768 0000C9E6 E5 D7                   	sw		r7,4[sp]
                                        
   1770 0000C9E8 00 15                   	lw		r5,#0		; w = 0;
   1771 0000C9EA 10 16                   	lw		r6,r1
   1772 0000C9EC 24 26                   	xor		r6,r2		; s = a ^ b
   1773 0000C9EE 16 21                   	or		r1,r1
   1774 0000C9F0 01 AB                   	bpl		mult1
   1775 0000C9F2 20 31                   	neg		r1
   1776 0000C9F4                        mult1
   1777 0000C9F4 26 22                   	or		r2,r2
   1778 0000C9F6 01 AB                   	bpl		mult2
   1779 0000C9F8 20 32                   	neg		r2
   1780 0000C9FA                        mult2
   1781 0000C9FA 10 17                   	lw		r7,r1
   1782 0000C9FC 51 37                   	and		r7,#1
   1783 0000C9FE 01 A8                   	beq		mult3
   1784 0000CA00 20 25                   	add		r5,r2		; w += b
   1785 0000CA02                        mult3
   1786 0000CA02 81 32                   	shl		r2,#1		; b <<= 1
   1787 0000CA04 A1 31                   	shr		r1,#1		; a >>= 1
   1788 0000CA06 F9 B9                   	bne		mult2       ; a = 0 ?
   1789 0000CA08                        mult4
   1790 0000CA08 66 26                       or      r6,r6
   1791 0000CA0A 01 AB                   	bpl		mult5
   1792 0000CA0C 20 35                   	neg		r5
   1793 0000CA0E                        mult5
   1794 0000CA0E 50 11                   	lw		r1,r5
   1795 0000CA10 E5 F7                   	lw		r7,4[sp]
   1796 0000CA12 E3 F6                   	lw		r6,2[sp]
   1797 0000CA14 E1 F5                   	lw		r5,[sp]
   1798 0000CA16 06 6E                   	add		sp,sp,#6
   1799 0000CA18 F0 80                   	ret
                                        
                                        
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 31
tb.asm
                                        ; ===== Divide the 32 bit value in r2 by the 32 bit value in r3.
                                        ;	Returns the 32 bit quotient in r1, remainder in r2
                                        ;
                                        ; r2 = a
                                        ; r3 = b
                                        ; r6 = remainder
                                        ; r7 = iteration count
                                        ; r8 = sign
                                        ;
                                        
                                        ; q = a / b
                                        ; a = r1
                                        ; b = r2
                                        ; q = r2
                                        
   1817 0000CA1A                        DIV32
   1818 0000CA1A 26 22                       or      r2,r2       ; check for divide-by-zero
   1819 0000CA1C 03 A9                       bne		div6
   1820 0000CA1E 28 4D 07 11                 lea		r1,msgDivZero
   1821 0000CA22 C3 AE                       br		ERROR		; divide by zero error
   1822 0000CA24                        div6
   1823 0000CA24 FA 6E                   	sub		sp,sp,#6
   1824 0000CA26 E1 D6                   	sw		r6,[sp]
   1825 0000CA28 E3 D7                   	sw		r7,2[sp]
   1826 0000CA2A E5 D8                   	sw		r8,4[sp]
                                        
   1828 0000CA2C 02 40 00 18                 lw      r8,#32      ; iteration count for 32 bits
   1829 0000CA30 00 16                   	lw		r6,#0		; r = 0
   1830 0000CA32 20 17                       lw      r7,r2       ; r7 = sign of result
   1831 0000CA34 14 27                       xor     r7,r1
   1832 0000CA36 16 21                   	or	    r1,r1	    ; take absolute value of r1 (a)
   1833 0000CA38 01 AB                   	bpl     div1
   1834 0000CA3A 20 31                   	neg     r1
   1835 0000CA3C                        div1
   1836 0000CA3C 26 22                       or      r2,r2	    ; take absolute value of r2 (b)
   1837 0000CA3E 01 AB                   	bpl	    div2
   1838 0000CA40 20 32                   	neg     r2
   1839 0000CA42                        div2
   1840 0000CA42 81 31                   	shl		r1,#1		; a <<= 1
   1841 0000CA44 61 26                   	adc		r6,r6		; r <<= 1
   1842 0000CA46 6D 22                   	cmp		r2,r6		; b < r ?
   1843 0000CA48 02 A7                   	bgtu	div4
   1844 0000CA4A 22 26                   	sub		r6,r2		; r -= b
   1845 0000CA4C 61 31                   	or      r1,#1       ; a |= 1
   1846 0000CA4E                        div4
   1847 0000CA4E FF 68                   	sub		r8,r8,#1
   1848 0000CA50 F8 B9                       bne     div2        ; n--
   1849 0000CA52 76 27                   	or      r7,r7
   1850 0000CA54 01 AB                   	bpl     div5
   1851 0000CA56 20 31                   	neg     r1
   1852 0000CA58                        div5
   1853 0000CA58 60 12                   	lw		r2,r6		; r2 = r
   1854 0000CA5A E3 F7                   	lw		r7,2[sp]
   1855 0000CA5C E5 F8                   	lw		r8,4[sp]
   1856 0000CA5E E1 F6                   	lw		r6,[sp]
   1857 0000CA60 06 6E                   	add		sp,sp,#6
   1858 0000CA62 F0 80                   	ret
                                        
                                        
                                        ; ===== The PEEK function returns the byte stored at the address
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 32
tb.asm
                                        ;	contained in the following expression.
                                        ;
   1864 0000CA64                        PEEK
   1865 0000CA64 29 BF                   	call	PARN		; get the memory address
   1866 0000CA66 10 E1                   	lb		r1,[r1]		; get the addressed byte
   1867 0000CA68 0E 21                   	zxb		r1			; upper 3 bytes will be zero
   1868 0000CA6A E1 FF                   	lw		lr,[sp]	; and return it
   1869 0000CA6C 06 6E                   	add		sp,sp,#6
   1870 0000CA6E F0 80                   	ret
                                        
                                        
                                        ; ===== The PEEK function returns the byte stored at the address
                                        ;	contained in the following expression.
                                        ;
   1876 0000CA70                        PEEKC
   1877 0000CA70 23 BF                   	call	PARN		; get the memory address
   1878 0000CA72 5E 31                   	and		r1,#-2		; align to char address
   1879 0000CA74 10 F1                   	lh		r1,[r1]		; get the addressed char
   1880 0000CA76 1E 21                   	zxc		r1
   1881 0000CA78 E1 FF                   	lw		lr,[sp]	; and return it
   1882 0000CA7A 06 6E                   	add		sp,sp,#6
   1883 0000CA7C F0 80                   	ret
                                        
                                        
                                        ; ===== The PEEK function returns the byte stored at the address
                                        ;	contained in the following expression.
                                        ;
   1889 0000CA7E                        PEEKW
   1890 0000CA7E 1C BF                   	call	PARN		; get the memory address
   1891 0000CA80 5C 31                   	and		r1,#-4		; align to word address
   1892 0000CA82 11 F1                   	lw		r1,[r1]		; get the addressed word
   1893 0000CA84 E1 FF                   	lw		lr,[sp]	; and return it
   1894 0000CA86 06 6E                   	add		sp,sp,#6
   1895 0000CA88 F0 80                   	ret
                                        
                                        
                                        ; user function call
                                        ; call the user function with argument in r1
   1900 0000CA8A                        USRX
   1901 0000CA8A 16 BF                   	call	PARN		; get expression value
   1902 0000CA8C E3 D8                   	sw		r8,2[sp]	; save the text pointer
   1903 0000CA8E 02 40 05 F2             	lw      r2,usrJmp   ; get usr vector
   1904 0000CA92 AB 49 05 AF             	call	[r2]		; jump to the subroutine
   1905 0000CA96 E3 F8                   	lw		r8,2[sp]	; restore the text pointer
   1906 0000CA98 E1 FF                   	lw		lr,[sp]
   1907 0000CA9A 06 6E                   	add		sp,sp,#6
   1908 0000CA9C F0 80                   	ret
                                        
                                        
                                        ; ===== The RND function returns a random number from 1 to
                                        ;	the value of the following expression in D0.
                                        ;
   1914 0000CA9E                        RND
   1915 0000CA9E 0C BF                   	call	PARN		; get the upper limit
   1916 0000CAA0 16 21                   	or		r1,r1		; it must be positive and non-zero
   1917 0000CAA2 0E A8                   	beq		rnd2
   1918 0000CAA4 0A AA                   	bmi		rnd1
   1919 0000CAA6 10 12                   	lw		r2,r1
   1920 0000CAA8 CA 4D 04 D0             	sh		r0,RAND+4	; read command
   1921 0000CAAC CA 4D 01 F1             	lw		r1,RAND		; get a number
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 33
tb.asm
   1922 0000CAB0 0E AF                   	call	modu4		; RND(n)=MOD(number,n)+1
   1923 0000CAB2 01 61                   	add		r1,r1,#1
   1924 0000CAB4 E1 FF                   	lw		lr,[sp]
   1925 0000CAB6 06 6E                   	add		sp,sp,#6
   1926 0000CAB8 F0 80                   	ret
   1927 0000CABA                        rnd1
   1928 0000CABA 30 4D 0B 11             	lea		r1,msgRNDBad
   1929 0000CABE 75 AE                   	br		ERROR
   1930 0000CAC0                        rnd2
   1931 0000CAC0 CA 4D 04 D0             	sh		r0,RAND+4
   1932 0000CAC4 CA 4D 01 F1             	lw		r1,RAND
   1933 0000CAC8 E1 FF                   	lw		lr,[sp]
   1934 0000CACA 06 6E                   	add		sp,sp,#6
   1935 0000CACC F0 80                   	ret
                                        
                                        
                                        ; r = a mod b
                                        ; a = r2
                                        ; b = r3
                                        ; r = r1
   1942 0000CACE                        modu4
   1943 0000CACE FA 6E                   	sub		sp,sp,#6
   1944 0000CAD0 E1 D5                   	sw		r5,[sp]
   1945 0000CAD2 E3 D6                   	sw		r6,2[sp]
   1946 0000CAD4 E5 D7                   	sw		r7,4[sp]
   1947 0000CAD6 02 40 00 17             	lw      r7,#32		; n = 32
   1948 0000CADA 00 15                   	lw		r5,#0		; w = 0
   1949 0000CADC 00 16                   	lw		r6,#0		; r = 0
   1950 0000CADE                        mod2
   1951 0000CADE 81 31                   	shl		r1,#1		; a <<= 1
   1952 0000CAE0 61 26                   	adc		r6,r6		; r <<= 1
   1953 0000CAE2 6D 22                   	cmp		r2,r6		; b < r ?
   1954 0000CAE4 01 A7                   	bgtu	mod1
   1955 0000CAE6 22 26                   	sub		r6,r2		; r -= b
   1956 0000CAE8                        mod1
   1957 0000CAE8 FF 67                   	sub		r7,r7,#1
   1958 0000CAEA F9 B9                       bne     mod2        ; n--
   1959 0000CAEC 60 11                   	lw		r1,r6
   1960 0000CAEE E1 F5                   	lw		r5,[sp]
   1961 0000CAF0 E3 F6                   	lw		r6,2[sp]
   1962 0000CAF2 E5 F7                   	lw		r7,4[sp]
   1963 0000CAF4 06 6E                   	add		sp,sp,#6
   1964 0000CAF6 F0 80                   	ret
                                        
                                        
                                        
                                        ; ===== The ABS function returns an absolute value in r2.
                                        ;
   1970 0000CAF8                        ABS
   1971 0000CAF8 ED 4F 0E AF             	call	PARN		; get the following expr.'s value
   1972 0000CAFC 16 21                   	or		r1,r1
   1973 0000CAFE 01 AB                   	bpl		abs1
   1974 0000CB00 20 31                   	neg		r1			; if negative, complement it
                                        ;	bmi		QHOW		; if still negative, it was too big
   1976 0000CB02                        abs1
   1977 0000CB02 E1 FF                   	lw		lr,[sp]
   1978 0000CB04 06 6E                   	add		sp,sp,#6
   1979 0000CB06 F0 80                   	ret
                                        
                                        
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 34
tb.asm
                                        ; ===== The SGN function returns the sign in r1. +1,0, or -1
                                        ;
   1984 0000CB08                        SGN
   1985 0000CB08 ED 4F 06 AF             	call	PARN		; get the following expr.'s value
   1986 0000CB0C 16 21                   	or		r1,r1
   1987 0000CB0E 04 A8                   	beq		sgn1
   1988 0000CB10 02 AB                   	bpl		sgn2
   1989 0000CB12 0F 11                   	lw		r1,#-1
   1990 0000CB14 01 AE                   	br		sgn1
   1991 0000CB16                        sgn2
   1992 0000CB16 01 11                   	lw		r1,#1
   1993 0000CB18                        sgn1
   1994 0000CB18 E1 FF                   	lw		lr,[sp]
   1995 0000CB1A 06 6E                   	add		sp,sp,#6
   1996 0000CB1C F0 80                   	ret
                                        
                                        
                                        ; ===== The SIZE function returns the size of free memory in r1.
                                        ;
   2001 0000CB1E                        SIZEX
   2002 0000CB1E 09 40 09 F1             	lw		r1,VARBGN	; get the number of free bytes...
   2003 0000CB22 09 40 07 F2             	lw		r2,TXTUNF	; between 'TXTUNF' and 'VARBGN'
   2004 0000CB26 22 21                   	sub		r1,r2
   2005 0000CB28 E1 FF                   	lw		lr,[sp]
   2006 0000CB2A 06 6E                   	add		sp,sp,#6
   2007 0000CB2C F0 80                   	ret					; return the number in r2
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** SETVAL *** FIN *** ENDCHK *** ERROR (& friends) ***
                                        ;
                                        ; 'SETVAL' expects a variable, followed by an equal sign and then
                                        ; an expression.  It evaluates the expression and sets the variable
                                        ; to that value.
                                        ;
                                        ; 'FIN' checks the end of a command.  If it ended with ":",
                                        ; execution continues.	If it ended with a CR, it finds the
                                        ; the next line and continues from there.
                                        ;
                                        ; 'ENDCHK' checks if a command is ended with a CR. This is
                                        ; required in certain commands, such as GOTO, RETURN, STOP, etc.
                                        ;
                                        ; 'ERROR' prints the string pointed to by A0. It then prints the
                                        ; line pointed to by CURRNT with a "?" inserted at where the
                                        ; old text pointer (should be on top of the stack) points to.
                                        ; Execution of Tiny BASIC is stopped and a warm start is done.
                                        ; If CURRNT is zero (indicating a direct command), the direct
                                        ; command is not printed. If CURRNT is -1 (indicating
                                        ; 'INPUT' command in progress), the input line is not printed
                                        ; and execution is not terminated but continues at 'INPERR'.
                                        ;
                                        ; Related to 'ERROR' are the following:
                                        ; 'QWHAT' saves text pointer on stack and gets "What?" message.
                                        ; 'AWHAT' just gets the "What?" message and jumps to 'ERROR'.
                                        ; 'QSORRY' and 'ASORRY' do the same kind of thing.
                                        ; 'QHOW' and 'AHOW' also do this for "How?".
                                        ;
                                        
                                        ; returns
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 35
tb.asm
                                        ; r2 = variable's address
                                        ;
   2044 0000CB2E                        SETVAL
   2045 0000CB2E FC 6E                       sub     sp,sp,#4
   2046 0000CB30 E1 DF                       sw      lr,[sp]
   2047 0000CB32 01 11                       lw		r1,#1		; allocate var
   2048 0000CB34 ED 4F 00 AF                 call	TSTV		; variable name?
   2049 0000CB38 03 A9                       bne		sv2
   2050 0000CB3A 2F 4D 04 11                	lea		r1,msgVar
   2051 0000CB3E 35 AE                      	br		ERROR 
   2052 0000CB40                        sv2
   2053 0000CB40 E3 D1                   	sw      r1,2[sp]    ; save the variable's address
   2054 0000CB42 1D 40 06 AF             	call	TSTC		; get past the "=" sign
   2055 0000CB46 3D 12                   	db	'=',SV1-*+1
   2056 0000CB48 DE 4F 02 AF             	call	OREXPR		; evaluate the expression
   2057 0000CB4C E3 F2                   	lw      r2,2[sp]    ; get back the variable's address
   2058 0000CB4E 21 D1                   	sw      r1,[r2]     ; and save value in the variable
   2059 0000CB50 20 11                   	lw		r1,r2		; return r1 = variable address
   2060 0000CB52 E1 FF                   	lw      lr,[sp]
   2061 0000CB54 04 6E                   	add     sp,sp,#4
   2062 0000CB56 F0 80                   	ret
   2063 0000CB58                        SV1
   2064 0000CB58 26 AE                       br	    QWHAT		; if no "=" sign
                                        
                                        
   2067 0000CB5A                        FIN
   2068 0000CB5A FE 6E                   	sub		sp,sp,#2
   2069 0000CB5C E1 DF                   	sw		lr,[sp]
   2070 0000CB5E 1C 40 08 AF             	call	TSTC		; *** FIN ***
   2071 0000CB62 3A 08                   	db	':',FI1-*+1
   2072 0000CB64 02 6E                   	add		sp,sp,#2	; if ":", discard return address
   2073 0000CB66 BA 4F 0D AE             	br		RUNSML		; continue on the same line
   2074 0000CB6A                        FI1
   2075 0000CB6A 1C 40 02 AF             	call	TSTC		; not ":", is it a CR?
   2076 0000CB6E 0D 0A                   	db	CR,FI2-*+1
   2077 0000CB70 E1 FF                   	lw		lr,[sp]	; else return to the caller
   2078 0000CB72 02 6E                   	add		sp,sp,#2	; yes, purge return address
   2079 0000CB74 B9 4F 09 AE             	br		RUNNXL		; execute the next line
   2080 0000CB78                        FI2
   2081 0000CB78 E1 FF                   	lw		lr,[sp]	; else return to the caller
   2082 0000CB7A 02 6E                   	add		sp,sp,#2
   2083 0000CB7C F0 80                   	ret
                                        
                                        
                                        ; Check that there is nothing else on the line
                                        ; Registers Affected
                                        ;   r1
                                        ;
   2090 0000CB7E                        ENDCHK
   2091 0000CB7E FE 6E                   	sub		sp,sp,#2
   2092 0000CB80 E1 DF                   	sw		lr,[sp]
   2093 0000CB82 1E 40 09 AF             	call	IGNBLK
   2094 0000CB86 80 E1                   	lb		r1,[r8]
   2095 0000CB88 FF 4F 13 10             	cmp		r1,#CR		; does it end with a CR?
   2096 0000CB8C 03 A8                   	beq		ec1
   2097 0000CB8E 3C 4D 0E 11             	lea		r1,msgExtraChars
   2098 0000CB92 0B AE                   	jmp		ERROR
   2099 0000CB94                        ec1
   2100 0000CB94 E1 FF                   	lw		lr,[sp]
   2101 0000CB96 02 6E                   	add		sp,sp,#2
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 36
tb.asm
   2102 0000CB98 F0 80                   	ret
                                        
                                        
   2105 0000CB9A                        TOOBIG
   2106 0000CB9A 3B 4D 09 11             	lea		r1,msgTooBig
   2107 0000CB9E 05 AE                   	br		ERROR
   2108 0000CBA0                        QSORRY
   2109 0000CBA0 24 4D 0F 11                 lea     r1,SRYMSG
   2110 0000CBA4 02 AE                   	br	    ERROR
   2111 0000CBA6                        QWHAT
   2112 0000CBA6 24 4D 07 11             	lea		r1,msgWhat
   2113 0000CBAA                        ERROR
   2114 0000CBAA 21 40 0D AF             	call	PRMESG		; display the error message
   2115 0000CBAE 08 40 07 F1             	lw		r1,CURRNT	; get the current line number
   2116 0000CBB2 A6 4F 0C A8             	beq		WSTART		; if zero, do a warm start
   2117 0000CBB6 11 10                   	cmp		r1,#-1		; is the line no. pointer = -1?
   2118 0000CBB8 C8 4F 0C A8             	beq		INPERR		; if so, redo input
   2119 0000CBBC 80 E5                   	lb		r5,[r8]		; save the char. pointed to
   2120 0000CBBE 80 C0                   	sb		r0,[r8]		; put a zero where the error is
   2121 0000CBC0 08 40 07 F1             	lw		r1,CURRNT	; point to start of current line
   2122 0000CBC4 17 40 07 AF             	call	PRTLN		; display the line in error up to the 0
   2123 0000CBC8 10 16                   	lw      r6,r1       ; save off end pointer
   2124 0000CBCA 80 C5                   	sb		r5,[r8]		; restore the character
   2125 0000CBCC 03 40 0F 11             	lw		r1,#'?'		; display a "?"
   2126 0000CBD0 A1 4F 08 AF             	call	GOOUT
   2127 0000CBD4 00 12                   	lw      r2,#0       ; stop char = 0
   2128 0000CBD6 6F 11                   	sub		r1,r6,#1	; point back to the error char.
   2129 0000CBD8 B6 AF                   	call	PRTSTG		; display the rest of the line
   2130 0000CBDA A5 4F 08 AE             	jmp	    WSTART		; and do a warm start
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** GETLN *** FNDLN (& friends) ***
                                        ;
                                        ; 'GETLN' reads in input line into 'BUFFER'. It first prompts with
                                        ; the character in r3 (given by the caller), then it fills the
                                        ; buffer and echos. It ignores LF's but still echos
                                        ; them back. Control-H is used to delete the last character
                                        ; entered (if there is one), and control-X is used to delete the
                                        ; whole line and start over again. CR signals the end of a line,
                                        ; and causes 'GETLN' to return.
                                        ;
                                        ;
   2146 0000CBDE                        GETLN
   2147 0000CBDE FC 6E                   	sub		sp,sp,#4
   2148 0000CBE0 E1 DF                   	sw		lr,[sp]
   2149 0000CBE2 E3 D5                   	sw		r5,2[sp]
   2150 0000CBE4 A0 4F 0E AF             	call	GOOUT		; display the prompt
   2151 0000CBE8 01 11                   	lw		r1,#1		; turn on cursor flash
   2152 0000CBEA 03 40 0C C1             	sb		r1,cursFlash
   2153 0000CBEE 02 40 00 11             	lw		r1,#' '		; and a space
   2154 0000CBF2 A0 4F 07 AF             	call	GOOUT
   2155 0000CBF6 0A 40 0E 18             	lea		r8,BUFFER	; r8 is the buffer pointer
   2156 0000CBFA                        GL1
   2157 0000CBFA 1E 40 03 AF             	call	CHKIO		; check keyboard
   2158 0000CBFE FD B8                   	beq		GL1			; wait for a char. to come in
   2159 0000CC00 FF 4F 18 10             	cmp		r1,#CTRLH	; delete last character?
   2160 0000CC04 14 A8                   	beq		GL3			; if so
   2161 0000CC06 FE 4F 18 10             	cmp		r1,#CTRLX	; delete the whole line?
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 37
tb.asm
   2162 0000CC0A 20 A8                   	beq		GL4			; if so
   2163 0000CC0C FF 4F 13 10             	cmp		r1,#CR		; accept a CR
   2164 0000CC10 03 A8                   	beq		GL2
   2165 0000CC12 FE 4F 10 10             	cmp		r1,#' '		; if other control char., discard it
   2166 0000CC16 F1 B4                   	bltu	GL1
   2167 0000CC18                        GL2
   2168 0000CC18 80 C1                   	sb		r1,[r8]		; save the char.
   2169 0000CC1A 01 68                   	add		r8,r8,#1
   2170 0000CC1C 9F 4F 02 AF             	call	GOOUT		; echo the char back out
   2171 0000CC20 8F E1                   	lb      r1,-1[r8]   ; get char back (GOOUT destroys r1)
   2172 0000CC22 FF 4F 13 10             	cmp		r1,#CR		; if it's a CR, end the line
   2173 0000CC26 25 A8                   	beq		GL7
   2174 0000CC28 F0 4F 83 10             	cmp		r8,#(BUFFER+BUFLEN-1)	; any more room?
   2175 0000CC2C E6 B4                   	bltu	GL1			; yes: get some more, else delete last char.
                                        
   2177 0000CC2E                        GL3
   2178 0000CC2E 08 11                   	lw		r1,#CTRLH	; delete a char. if possible
   2179 0000CC30 9E 4F 08 AF             	call	GOOUT
   2180 0000CC34 02 40 00 11             	lw		r1,#' '
   2181 0000CC38 9E 4F 04 AF             	call	GOOUT
   2182 0000CC3C F5 4F 82 10             	cmp		r8,#BUFFER	; any char.'s left?
   2183 0000CC40 DC B6                   	bleu	GL1			; if not
   2184 0000CC42 08 11                   	lw		r1,#CTRLH	; if so, finish the BS-space-BS sequence
   2185 0000CC44 9D 4F 0E AF             	call	GOOUT
   2186 0000CC48 FF 68                   	sub		r8,r8,#1	; decrement the text pointer
   2187 0000CC4A D7 BE                   	br		GL1			; back for more
                                        
   2189 0000CC4C                        GL4
   2190 0000CC4C 80 11                   	lw		r1,r8		; delete the whole line
   2191 0000CC4E F5 4F 12 15             	sub		r5,r1,#BUFFER   ; figure out how many backspaces we need
   2192 0000CC52 0C A8                   	beq		GL6			; if none needed, brnch
   2193 0000CC54                        GL5	
   2194 0000CC54 08 11                   	lw		r1,#CTRLH	; and display BS-space-BS sequences
   2195 0000CC56 9D 4F 05 AF             	call	GOOUT
   2196 0000CC5A 02 40 00 11             	lw		r1,#' '
   2197 0000CC5E 9D 4F 01 AF             	call	GOOUT
   2198 0000CC62 08 11                   	lw		r1,#CTRLH
   2199 0000CC64 9C 4F 0E AF             	call	GOOUT
   2200 0000CC68 FF 65                   	sub		r5,r5,#1
   2201 0000CC6A F4 B9                   	bne     GL5
   2202 0000CC6C                        GL6
   2203 0000CC6C 0A 40 0E 18             	lea		r8,BUFFER	; reinitialize the text pointer
   2204 0000CC70 C4 BE                   	br		GL1			; and go back for more
   2205 0000CC72                        GL7
   2206 0000CC72 00 11                   	lw		r1,#0		; turn off cursor flash
   2207 0000CC74 03 40 0C C1             	sb		r1,cursFlash
   2208 0000CC78 0A 11                   	lw		r1,#LF		; echo a LF for the CR
   2209 0000CC7A 9C 4F 03 AF             	call	GOOUT
   2210 0000CC7E E1 FF                   	lw		lr,[sp]
   2211 0000CC80 E3 F5                   	lw		r5,2[sp]
   2212 0000CC82 04 6E                   	add		sp,sp,#4
   2213 0000CC84 F0 80                   	ret
                                        
                                        
                                        ; 'FNDLN' finds a line with a given line no. (in r1) in the
                                        ; text save area.  r9 is used as the text pointer. If the line
                                        ; is found, r9 will point to the beginning of that line
                                        ; (i.e. the high byte of the line no.), and flags are Z.
                                        ; If that line is not there and a line with a higher line no.
                                        ; is found, r9 points there and flags are NC & NZ. If we reached
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 38
tb.asm
                                        ; the end of the text save area and cannot find the line, flags
                                        ; are C & NZ.
                                        ; Z=1 if line found
                                        ; N=1 if end of text save area
                                        ; Z=0 & N=0 if higher line found
                                        ;
                                        ; 'FNDLN' will initialize r9 to the beginning of the text save
                                        ; area to start the search. Some other entries of this routine
                                        ; will not initialize r9 and do the search.
                                        ; 'FNDLNP' will start with r9 and search for the line no.
                                        ; 'FNDNXT' will bump r9 by 2, find a CR and then start search.
                                        ; 'FNDSKP' uses r9 to find a CR, and then starts the search.
                                        ; return Z=1 if line is found, r9 = pointer to line
                                        ;
                                        ; Parameters
                                        ;	r1 = line number to find
                                        ;
   2239 0000CC86                        FNDLN
   2240 0000CC86 00 40 11 10             	cmp		r1,#0xFFFF	; line no. must be < 65535
   2241 0000CC8A 03 A6                   	bleu	fl1
   2242 0000CC8C 2D 4D 0E 11             	lea		r1,msgLineRange
   2243 0000CC90 8C BE                   	br		ERROR
   2244 0000CC92                        fl1
   2245 0000CC92 01 4C 09 F9             	lw		r9,TXTBGN	; init. the text save pointer
                                        
   2247 0000CC96                        FNDLNP
   2248 0000CC96 09 40 07 FA             	lw		r10,TXTUNF	; check if we passed the end
   2249 0000CC9A FF 6A                   	sub		r10,r10,#1
   2250 0000CC9C AD 29                   	cmp		r9,r10
   2251 0000CC9E 0F A7                   	bgtu	FNDRET		; if so, return with Z=0 & C=1
   2252 0000CCA0 90 E3                   	lb		r3,[r9]		; get low order byte of line number
   2253 0000CCA2 0E 23                   	zxb		r3
   2254 0000CCA4 91 E2                   	lb		r2,1[r9]	; get high order byte
   2255 0000CCA6 0E 22                   	zxb		r2
   2256 0000CCA8 81 32                   	shl		r2,#1
   2257 0000CCAA 81 32                   	shl		r2,#1
   2258 0000CCAC 81 32                   	shl		r2,#1
   2259 0000CCAE 81 32                   	shl		r2,#1
   2260 0000CCB0 81 32                   	shl		r2,#1
   2261 0000CCB2 81 32                   	shl		r2,#1
   2262 0000CCB4 81 32                   	shl		r2,#1
   2263 0000CCB6 81 32                   	shl		r2,#1
   2264 0000CCB8 36 22                   	or		r2,r3		; build whole line number
   2265 0000CCBA 2D 21                   	cmp		r1,r2		; is this the line we want?
   2266 0000CCBC 01 A7                   	bgtu	FNDNXT		; no, not there yet
   2267 0000CCBE                        FNDRET
   2268 0000CCBE F0 80                   	ret			; return the cond. codes
                                        
   2270 0000CCC0                        FNDNXT
   2271 0000CCC0 02 69                   	add		r9,r9,#2	; find the next line
                                        
   2273 0000CCC2                        FNDSKP
   2274 0000CCC2 90 E2                   	lb		r2,[r9]
   2275 0000CCC4 01 69                   	add		r9,r9,#1
   2276 0000CCC6 FF 4F 23 10             	cmp		r2,#CR		; try to find a CR
   2277 0000CCCA FB B9                   	bne		FNDSKP		; keep looking
   2278 0000CCCC E4 BE                   	br		FNDLNP		; check if end of text
                                        
                                        
                                        ;******************************************************************
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 39
tb.asm
                                        ; 'MVUP' moves a block up from where r1 points to where r2 points
                                        ; until r1=r3
                                        ;
   2285 0000CCCE                        MVUP1
   2286 0000CCCE 10 E4                   	lb		r4,[r1]
   2287 0000CCD0 20 C4                   	sb		r4,[r2]
   2288 0000CCD2 01 61                   	add		r1,r1,#1
   2289 0000CCD4 01 62                   	add		r2,r2,#1
   2290 0000CCD6                        MVUP
   2291 0000CCD6 3D 21                   	cmp		r1,r3
   2292 0000CCD8 FA B9                   	bne		MVUP1
   2293 0000CCDA                        MVRET
   2294 0000CCDA F0 80                   	ret
                                        
                                        
                                        ; 'MVDOWN' moves a block down from where r1 points to where r2
                                        ; points until r1=r3
                                        ;
   2300 0000CCDC                        MVDOWN1
   2301 0000CCDC FF 61                   	sub		r1,r1,#1
   2302 0000CCDE FF 62                   	sub		r2,r2,#1
   2303 0000CCE0 10 E4                   	lb		r4,[r1]
   2304 0000CCE2 20 C4                   	sb		r4,[r2]
   2305 0000CCE4                        MVDOWN
   2306 0000CCE4 3D 21                   	cmp		r1,r3
   2307 0000CCE6 FA B9                   	bne		MVDOWN1
   2308 0000CCE8 F0 80                   	ret
                                        
                                        
                                        ; 'POPA' restores the 'FOR' loop variable save area from the stack
                                        ;
                                        ; 'PUSHA' stacks for 'FOR' loop variable save area onto the stack
                                        ;
                                        ; Note: a single zero word is stored on the stack in the
                                        ; case that no FOR loops need to be saved. This needs to be
                                        ; done because PUSHA / POPA is called all the time.
                                        
   2319 0000CCEA                        POPA
   2320 0000CCEA E1 F1                   	lw		r1,[sp]		; restore LOPVAR, but zero means no more
   2321 0000CCEC 08 40 0D D1             	sw		r1,LOPVAR
   2322 0000CCF0 0E A8                   	beq		PP1
   2323 0000CCF2 E9 F1                   	lw		r1,8[sp]	; if not zero, restore the rest
   2324 0000CCF4 09 40 05 D1             	sw		r1,LOPPT
   2325 0000CCF8 E7 F1                   	lw		r1,6[sp]
   2326 0000CCFA 09 40 03 D1             	sw		r1,LOPLN
   2327 0000CCFE E5 F1                   	lw		r1,4[sp]
   2328 0000CD00 09 40 01 D1             	sw		r1,LOPLMT
   2329 0000CD04 E3 F1                   	lw		r1,2[sp]
   2330 0000CD06 08 40 0F D1             	sw		r1,LOPINC
   2331 0000CD0A 0A 6E                   	add		sp,sp,#10
   2332 0000CD0C F0 80                   	ret
   2333 0000CD0E                        PP1
   2334 0000CD0E 02 6E                   	add		sp,sp,#2
   2335 0000CD10 F0 80                   	ret
                                        
                                        
   2338 0000CD12                        PUSHA
   2339 0000CD12 0A 40 01 F1             	lw		r1,STKBOT	; Are we running out of stack room?
   2340 0000CD16 0A 61                   	add		r1,r1,#10	; we might need this many bytes
   2341 0000CD18 1D 2E                   	cmp		sp,r1
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 40
tb.asm
   2342 0000CD1A 42 B4                   	bltu	QSORRY		; out of stack space
   2343 0000CD1C 08 40 0D F1             	lw		r1,LOPVAR	; save loop variables
   2344 0000CD20 0F A8                   	beq		PU1			; if LOPVAR is zero, that's all
   2345 0000CD22 F6 6E                   	sub		sp,sp,#10
   2346 0000CD24 E1 D1                   	sw		r1,[sp]
   2347 0000CD26 09 40 05 F1             	lw		r1,LOPPT
   2348 0000CD2A E9 D1                   	sw		r1,8[sp]	; else save all the others
   2349 0000CD2C 09 40 03 F1             	lw		r1,LOPLN
   2350 0000CD30 E7 D1                   	sw		r1,6[sp]
   2351 0000CD32 09 40 01 F1             	lw		r1,LOPLMT
   2352 0000CD36 E5 D1                   	sw		r1,4[sp]
   2353 0000CD38 08 40 0F F1             	lw		r1,LOPINC
   2354 0000CD3C E3 D1                   	sw		r1,2[sp]
   2355 0000CD3E F0 80                   	ret
   2356 0000CD40                        PU1
   2357 0000CD40 FE 6E                   	sub		sp,sp,#2
   2358 0000CD42 E1 D1                   	sw		r1,[sp]
   2359 0000CD44 F0 80                   	ret
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** PRTSTG *** QTSTG *** PRTNUM *** PRTLN ***
                                        ;
                                        ; 'PRTSTG' prints a string pointed to by r3. It stops printing
                                        ; and returns to the caller when either a CR is printed or when
                                        ; the next byte is the same as what was passed in r4 by the
                                        ; caller.
                                        ;
                                        ; 'QTSTG' looks for an underline (back-arrow on some systems),
                                        ; single-quote, or double-quote.  If none of these are found, returns
                                        ; to the caller.  If underline, outputs a CR without a LF.  If single
                                        ; or double quote, prints the quoted string and demands a matching
                                        ; end quote.  After the printing, the next 2 bytes of the caller are
                                        ; skipped over (usually a short brnch instruction).
                                        ;
                                        ; 'PRTNUM' prints the 32 bit number in r3, leading blanks are added if
                                        ; needed to pad the number of spaces to the number in r4.
                                        ; However, if the number of digits is larger than the no. in
                                        ; r4, all digits are printed anyway. Negative sign is also
                                        ; printed and counted in, positive sign is not.
                                        ;
                                        ; 'PRTLN' prints the saved text line pointed to by r3
                                        ; with line no. and all.
                                        ;
                                        
                                        ; r1 = pointer to string
                                        ; r2 = stop character
                                        ; return r1 = pointer to end of line + 1
                                        
   2392 0000CD46                        PRTSTG
   2393 0000CD46 F8 6E                       sub     sp,sp,#8
   2394 0000CD48 E1 DF                       sw      lr,[sp]
   2395 0000CD4A E3 D5                       sw      r5,2[sp]
   2396 0000CD4C E5 D6                       sw      r6,4[sp]
   2397 0000CD4E E7 D7                       sw      r7,6[sp]
   2398 0000CD50 10 15                       lw      r5,r1       ; r5 = pointer
   2399 0000CD52 20 16                       lw      r6,r2       ; r6 = stop char
   2400 0000CD54                        PS1
   2401 0000CD54 50 E7                       lb      r7,[r5]     ; get a text character
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 41
tb.asm
   2402 0000CD56 01 65                       add     r5,r5,#1
   2403 0000CD58 6D 27                   	cmp     r7,r6		; same as stop character?
   2404 0000CD5A 09 A8                   	beq	    PRTRET		; if so, return
   2405 0000CD5C 70 11                   	lw      r1,r7
   2406 0000CD5E 95 4F 01 AF             	call	GOOUT		; display the char.
   2407 0000CD62 FF 4F 73 10             	cmp     r7,#CR      ; is it a C.R.?
   2408 0000CD66 F6 B9                   	bne	    PS1		    ; no, go back for more
   2409 0000CD68 0A 11                   	lw      r1,#LF      ; yes, add a L.F.
   2410 0000CD6A 94 4F 0B AF             	call	GOOUT
   2411 0000CD6E                        PRTRET
   2412 0000CD6E 70 12                       lw      r2,r7       ; return r2 = stop char
   2413 0000CD70 50 11                   	lw		r1,r5		; return r1 = line pointer
   2414 0000CD72 E3 F5                       lw      r5,2[sp]
   2415 0000CD74 E5 F6                       lw      r6,4[sp]
   2416 0000CD76 E7 F7                       lw      r7,6[sp]
   2417 0000CD78 E1 FF                       lw      lr,[sp]
   2418 0000CD7A 08 6E                       add     sp,sp,#8
   2419 0000CD7C F0 80                       ret			        ; then return
                                        
                                        
   2422 0000CD7E                        QTSTG
   2423 0000CD7E FE 6E                   	sub		sp,sp,#2
   2424 0000CD80 E1 DF                   	sw		lr,[sp]
   2425 0000CD82 B7 AF                   	call	TSTC		; *** QTSTG ***
   2426 0000CD84 22 18                   	db	'"',QT3-*+1
   2427 0000CD86 02 40 02 12             	lw		r2,#'"'		; it is a "
   2428 0000CD8A                        QT1
   2429 0000CD8A 80 11                   	lw		r1,r8
   2430 0000CD8C DC BF                   	call	PRTSTG		; print until another
   2431 0000CD8E 10 18                   	lw		r8,r1
   2432 0000CD90 FF 4F 26 10             	cmp		r2,#LF		; was last one a CR?
   2433 0000CD94 0E A9                   	bne		QT2
   2434 0000CD96 02 6E                   	add		sp,sp,#2
   2435 0000CD98 A8 4F 07 AE             	br		RUNNXL		; if so, run next line
   2436 0000CD9C                        QT3
   2437 0000CD9C AA AF                   	call	TSTC		; is it a single quote?
   2438 0000CD9E 27 08                   	db	"'",QT4-*+1
   2439 0000CDA0 02 40 07 12             	lw		r2,#''''	; if so, do same as above
   2440 0000CDA4 F2 BE                   	br		QT1
   2441 0000CDA6                        QT4
   2442 0000CDA6 A5 AF                   	call	TSTC		; is it an underline?
   2443 0000CDA8 5F 10                   	db	'_',QT5-*+1
   2444 0000CDAA 00 40 0D 11             	lw		r1,#CR		; if so, output a CR without LF
   2445 0000CDAE 92 4F 09 AF             	call	GOOUT
   2446 0000CDB2                        QT2
   2447 0000CDB2 E1 FF                   	lw		lr,[sp]
   2448 0000CDB4 02 6E                   	add		sp,sp,#2
   2449 0000CDB6 F2 80                   	jmp		2[lr]		; skip over 2 bytes when returning
   2450 0000CDB8                        QT5						; not " ' or _
   2451 0000CDB8 E1 FF                   	lw		lr,[sp]
   2452 0000CDBA 02 6E                   	add		sp,sp,#2
   2453 0000CDBC F0 80                   	ret
                                        
                                        
                                        ; Output a CR LF sequence
                                        ;
   2458 0000CDBE                        prCRLF
   2459 0000CDBE FE 6E                   	sub		sp,sp,#2
   2460 0000CDC0 E1 DF                   	sw		lr,[sp]
   2461 0000CDC2 00 40 0D 11             	lw		r1,#CR
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 42
tb.asm
   2462 0000CDC6 91 4F 0D AF             	call	GOOUT
   2463 0000CDCA 0A 11                   	lw		r1,#LF
   2464 0000CDCC 91 4F 0A AF             	call	GOOUT
   2465 0000CDD0 E1 FF                   	lw		lr,[sp]
   2466 0000CDD2 02 6E                   	add		sp,sp,#2
   2467 0000CDD4 F0 80                   	ret
                                        
                                        
                                        ; r1 = number to print
                                        ; r2 = number of digits
                                        ; Register Usage
                                        ;	r5 = number of padding spaces
   2474 0000CDD6                        PRTNUM
   2475 0000CDD6 F8 6E                   	sub		sp,sp,#8
   2476 0000CDD8 E1 DF                   	sw		lr,[sp]
   2477 0000CDDA E3 D5                   	sw		r5,2[sp]
   2478 0000CDDC E5 D6                   	sw		r6,4[sp]
   2479 0000CDDE E7 D7                   	sw		r7,6[sp]
                                        
   2481 0000CDE0 0A 40 02 17             	lea		r7,NUMWKA	; r7 = pointer to numeric work area
   2482 0000CDE4 10 16                   	lw		r6,r1		; save number for later
   2483 0000CDE6 20 15                   	lw		r5,r2		; r5 = min number of chars
   2484 0000CDE8 16 21                   	
   2485 0000CDEA 02 AB                   	bpl		PN1			; if not
   2486 0000CDEC 20 31                   	neg		r1			; else make it positive
   2487 0000CDEE FF 65                   	sub		r5,r5,#1	; one less for width count
   2488 0000CDF0                        PN1
   2489 0000CDF0 0A 12                   	lw		r2,#10		; divide by 10
   2490 0000CDF2 E1 4F 02 AF             	call	DIV32
   2491 0000CDF6 30 62                   	add		r2,r2,#'0'	; convert remainder to ascii
   2492 0000CDF8 70 C2                   	sb		r2,[r7]		; and store in buffer
   2493 0000CDFA 01 67                   	add		r7,r7,#1
   2494 0000CDFC FF 65                   	sub		r5,r5,#1	; decrement width
   2495 0000CDFE 10 10                   	cmp		r1,#0
   2496 0000CE00 F7 B9                   	bne		PN1
   2497 0000CE02                        PN6
   2498 0000CE02 56 25                   	or		r5,r5		; test pad count
   2499 0000CE04 06 A2                   	ble		PN4			; skip padding if not needed
   2500 0000CE06                        PN3
   2501 0000CE06 02 40 00 11             	lw		r1,#' '		; display the required leading spaces
   2502 0000CE0A 8F 4F 0B AF             	call	GOOUT
   2503 0000CE0E FF 65                   	sub		r5,r5,#1
   2504 0000CE10 FA B9                   	bne		PN3
   2505 0000CE12                        PN4
   2506 0000CE12 66 26                   	or		r6,r6		; is number negative?
   2507 0000CE14 04 AB                   	bpl		PN5
   2508 0000CE16 02 40 0D 11             	lw		r1,#'-'		; if so, display the sign
   2509 0000CE1A 8F 4F 03 AF             	call	GOOUT
   2510 0000CE1E                        PN5
   2511 0000CE1E FF 67                   	sub		r7,r7,#1
   2512 0000CE20 70 E1                   	lb		r1,[r7]		; now unstack the digits and display
   2513 0000CE22 8E 4F 0F AF             	call	GOOUT
   2514 0000CE26 F5 4F 7E 10             	cmp		r7,#NUMWKA
   2515 0000CE2A F9 B7                   	bgtu	PN5
   2516 0000CE2C                        PNRET
   2517 0000CE2C E1 FF                   	lw		lr,[sp]
   2518 0000CE2E E3 F5                   	lw		r5,2[sp]
   2519 0000CE30 E5 F6                   	lw		r6,4[sp]
   2520 0000CE32 E7 F7                   	lw		r7,6[sp]
   2521 0000CE34 08 6E                   	add		sp,sp,#8
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 43
tb.asm
   2522 0000CE36 F0 80                   	ret
                                        
                                        
                                        ; r1 = number to print
                                        ; r2 = number of digits
   2527 0000CE38                        PRTHEXNUM
   2528 0000CE38 F6 6E                   	sub		sp,sp,#10
   2529 0000CE3A E1 DF                   	sw		lr,[sp]
   2530 0000CE3C E3 D5                   	sw		r5,2[sp]
   2531 0000CE3E E5 D6                   	sw		r6,4[sp]
   2532 0000CE40 E7 D7                   	sw		r7,6[sp]
   2533 0000CE42 E9 D8                   	sw		r8,8[sp]
                                        
   2535 0000CE44 0A 40 02 17             	lea		r7,NUMWKA	; r7 = pointer to numeric work area
   2536 0000CE48 10 16                   	lw		r6,r1		; save number for later
   2537 0000CE4A 0A 15                   	lw		r5,#10		; r5 = min number of chars
   2538 0000CE4C 10 14                   	lw		r4,r1
   2539 0000CE4E 46 24                   	
   2540 0000CE50 03 AB                   	bpl		PHN1		; if not
   2541 0000CE52 20 34                   	neg		r4			; else make it positive
   2542 0000CE54 FF 65                   	sub		r5,r5,#1	; one less for width count
   2543 0000CE56 0A 18                   	lw		r8,#10		; maximum of 10 digits
   2544 0000CE58                        PHN1
   2545 0000CE58 40 11                   	lw		r1,r4
   2546 0000CE5A 00 40 5F 31             	and		r1,#15
   2547 0000CE5E FF 4F 16 10             	cmp		r1,#10
   2548 0000CE62 02 A0                   	blt		PHN7
   2549 0000CE64 37 61                   	add		r1,r1,#'A'-10
   2550 0000CE66 01 AE                   	br		PHN8
   2551 0000CE68                        PHN7
   2552 0000CE68 30 61                   	add		r1,r1,#'0'		; convert remainder to ascii
   2553 0000CE6A                        PHN8
   2554 0000CE6A 70 C1                   	sb		r1,[r7]		; and store in buffer
   2555 0000CE6C 01 67                   	add		r7,r7,#1
   2556 0000CE6E FF 65                   	sub		r5,r5,#1	; decrement width
   2557 0000CE70 A1 34                   	shr		r4,#1
   2558 0000CE72 A1 34                   	shr		r4,#1
   2559 0000CE74 A1 34                   	shr		r4,#1
   2560 0000CE76 A1 34                   	shr		r4,#1
   2561 0000CE78 02 A8                   	beq		PHN6			; is it zero yet ?
   2562 0000CE7A FF 68                   	sub		r8,r8,#1	; safety
   2563 0000CE7C ED B9                   	bne		PHN1
   2564 0000CE7E                        PHN6
   2565 0000CE7E 56 25                   	or		r5,r5		; test pad count
   2566 0000CE80 06 A2                   	ble		PHN4			; skip padding if not needed
   2567 0000CE82                        PHN3
   2568 0000CE82 02 40 00 11             	lw		r1,#' '		; display the required leading spaces
   2569 0000CE86 8B 4F 0D AF             	call	GOOUT
   2570 0000CE8A FF 65                   	sub		r5,r5,#1
   2571 0000CE8C FA B9                   	bne		PHN3
   2572 0000CE8E                        PHN4
   2573 0000CE8E 66 26                   	or		r6,r6		; is number negative?
   2574 0000CE90 04 AB                   	bpl		PHN5
   2575 0000CE92 02 40 0D 11             	lw		r1,#'-'		; if so, display the sign
   2576 0000CE96 8B 4F 05 AF             	call	GOOUT
   2577 0000CE9A                        PHN5
   2578 0000CE9A FF 67                   	sub		r7,r7,#1
   2579 0000CE9C 70 E1                   	lb		r1,[r7]		; now unstack the digits and display
   2580 0000CE9E 8B 4F 01 AF             	call	GOOUT
   2581 0000CEA2 F5 4F 7E 10             	cmp		r7,#NUMWKA
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 44
tb.asm
   2582 0000CEA6 F9 B7                   	bgtu	PHN5
   2583 0000CEA8                        PHNRET
   2584 0000CEA8 E1 FF                   	lw		lr,[sp]
   2585 0000CEAA E3 F5                   	lw		r5,2[sp]
   2586 0000CEAC E5 F6                   	lw		r6,4[sp]
   2587 0000CEAE E7 F7                   	lw		r7,6[sp]
   2588 0000CEB0 E9 F8                   	lw		r8,8[sp]
   2589 0000CEB2 0A 6E                   	add		sp,sp,#10
   2590 0000CEB4 F0 80                   	ret
                                        
                                        
                                        ; r1 = pointer to line
                                        ; returns r1 = pointer to end of line + 1
   2595 0000CEB6                        PRTLN
   2596 0000CEB6 FC 6E                       sub     sp,sp,#4
   2597 0000CEB8 E1 DF                       sw      lr,[sp]
   2598 0000CEBA E3 D5                       sw      r5,2[sp]
   2599 0000CEBC 12 15                       add     r5,r1,#2
   2600 0000CEBE 5E E1                       lb		r1,-2[r5]	; get the binary line number
   2601 0000CEC0 0E 21                       zxb		r1
   2602 0000CEC2 5F E2                       lb		r2,-1[r5]
   2603 0000CEC4 0E 22                       zxb		r2
   2604 0000CEC6 81 32                       shl		r2,#1
   2605 0000CEC8 81 32                       shl		r2,#1
   2606 0000CECA 81 32                       shl		r2,#1
   2607 0000CECC 81 32                       shl		r2,#1
   2608 0000CECE 81 32                       shl		r2,#1
   2609 0000CED0 81 32                       shl		r2,#1
   2610 0000CED2 81 32                       shl		r2,#1
   2611 0000CED4 81 32                       shl		r2,#1
   2612 0000CED6 26 21                       or		r1,r2
   2613 0000CED8 00 12                       lw      r2,#0       ; display a 0 or more digit line no.
   2614 0000CEDA 7D BF                   	call	PRTNUM
   2615 0000CEDC 02 40 00 11             	lw      r1,#' '     ; followed by a blank
   2616 0000CEE0 89 4F 00 AF             	call	GOOUT
   2617 0000CEE4 00 12                   	lw      r2,#0       ; stop char. is a zero
   2618 0000CEE6 50 11                   	lw      r1,r5
   2619 0000CEE8 2E BF                   	call    PRTSTG		; display the rest of the line
   2620 0000CEEA E3 F5                   	lw      r5,2[sp]
   2621 0000CEEC E1 FF                   	lw      lr,[sp]
   2622 0000CEEE 04 6E                   	add     sp,sp,#4
   2623 0000CEF0 F0 80                   	ret
                                        
                                        
                                        ; ===== Test text byte following the call to this subroutine. If it
                                        ;	equals the byte pointed to by r8, return to the code following
                                        ;	the call. If they are not equal, brnch to the point
                                        ;	indicated by the offset byte following the text byte.
                                        ;
                                        ; Registers Affected
                                        ;   r3,r8
                                        ; Returns
                                        ;	r8 = updated text pointer
                                        ;
   2636 0000CEF2                        TSTC
   2637 0000CEF2 FC 6E                   	sub		sp,sp,#4
   2638 0000CEF4 E1 DF                   	sw		lr,[sp]
   2639 0000CEF6 E3 D1                   	sw		r1,2[sp]
   2640 0000CEF8 2F AF                   	call	IGNBLK		; ignore leading blanks
   2641 0000CEFA E1 FF                   	lw		lr,[sp]	; get the return address
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 45
tb.asm
   2642 0000CEFC F0 E3                   	lb		r3,[lr]	; get the byte to compare
   2643 0000CEFE 80 E1                   	lb		r1,[r8]
   2644 0000CF00 1D 23                   	cmp		r3,r1		; is it = to what r8 points to?
   2645 0000CF02 05 A8                   	beq		TC1			; if so
                                        						; If not, add the second
   2647 0000CF04 F1 E3                   	lb		r3,1[lr]	; byte following the call to
   2648 0000CF06 30 2F                   	add		lr,r3		; the return address.
   2649 0000CF08 E3 F1                   	lw		r1,2[sp]
   2650 0000CF0A 04 6E                   	add		sp,sp,#4
   2651 0000CF0C F0 80                   	ret					; jump to the routine
   2652 0000CF0E                        TC1
   2653 0000CF0E 01 68                   	add		r8,r8,#1	; if equal, bump text pointer
   2654 0000CF10 E3 F1                   	lw		r1,2[sp]
   2655 0000CF12 04 6E                   	add     sp,sp,#4
   2656 0000CF14 F2 80                   	jmp		2[lr]		; Skip the 2 bytes following
                                        						; the call and continue.
                                        
                                        
                                        ; ===== See if the text pointed to by r8 is a number. If so,
                                        ;	return the number in r2 and the number of digits in r3,
                                        ;	else return zero in r2 and r3.
                                        ; Registers Affected
                                        ;   r1,r2,r3,r4
                                        ; Returns
                                        ; 	r1 = number
                                        ;	r2 = number of digits in number
                                        ;	r8 = updated text pointer
                                        ;
   2670 0000CF16                        TSTNUM
   2671 0000CF16 FE 6E                   	sub		sp,sp,#2
   2672 0000CF18 E1 DF                   	sw		lr,[sp]
   2673 0000CF1A 1E AF                   	call	IGNBLK		; skip over blanks
   2674 0000CF1C 00 11                   	lw		r1,#0		; initialize return parameters
   2675 0000CF1E 00 12                   	lw		r2,#0
   2676 0000CF20                        TN1
   2677 0000CF20 80 E3                   	lb		r3,[r8]
   2678 0000CF22 FD 4F 30 10             	cmp		r3,#'0'		; is it less than zero?
   2679 0000CF26 15 A4                   	bltu	TSNMRET 	; if so, that's all
   2680 0000CF28 FC 4F 37 10             	cmp		r3,#'9'		; is it greater than nine?
   2681 0000CF2C 12 A7                   	bgtu	TSNMRET 	; if so, return
   2682 0000CF2E 33 43 14 10             	cmp		r1,#214748364	; see if there's room for new digit
   2683 0000CF32 04 A6                   	bleu	TN2
   2684 0000CF34 27 4D 03 11             	lea		r1,msgNumTooBig
   2685 0000CF38 E3 4F 07 AE             	br		ERROR		; if not, we've overflowd
   2686 0000CF3C                        TN2
   2687 0000CF3C 10 14                   	lw		r4,r1		; quickly multiply result by 10
   2688 0000CF3E 81 31                   	shl		r1,#1		; * 2
   2689 0000CF40 81 31                   	shl		r1,#1		; * 4
   2690 0000CF42 40 21                   	add		r1,r4		; * 5
   2691 0000CF44 81 31                   	shl		r1,#1		; * 10
   2692 0000CF46 01 68                   	add		r8,r8,#1	; adjust text pointer
   2693 0000CF48 00 40 5F 33             	and		r3,#0xF		; add in the new digit
   2694 0000CF4C 30 21                   	add		r1,r3
   2695 0000CF4E 01 62                   	add		r2,r2,#1	; increment the no. of digits
   2696 0000CF50 E7 BE                   	br		TN1
   2697 0000CF52                        TSNMRET
   2698 0000CF52 E1 FF                   	lw		lr,[sp]
   2699 0000CF54 02 6E                   	add		sp,sp,#2
   2700 0000CF56 F0 80                   	ret
                                        
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 46
tb.asm
                                        
                                        ;===== Skip over blanks in the text pointed to by r8.
                                        ;
                                        ; Registers Affected:
                                        ;	r8
                                        ; Returns
                                        ;	r8 = pointer updateded past any spaces or tabs
                                        ;
   2710 0000CF58                        IGNBLK
   2711 0000CF58 FE 6E                   	sub		sp,sp,#2
   2712 0000CF5A E1 D1                   	sw		r1,[sp]
   2713 0000CF5C                        IGB2
   2714 0000CF5C 80 E1                   	lb		r1,[r8]			; get char
   2715 0000CF5E FE 4F 10 10             	cmp		r1,#' '			; see if it's a space
   2716 0000CF62 03 A8                   	beq		IGB1			; if so, swallow it
   2717 0000CF64 FF 4F 17 10             	cmp		r1,#'\t'		; or a tab
   2718 0000CF68 02 A9                   	bne		IGBRET
   2719 0000CF6A                        IGB1
   2720 0000CF6A 01 68                   	add		r8,r8,#1		; increment the text pointer
   2721 0000CF6C F7 BE                   	br		IGB2
   2722 0000CF6E                        IGBRET
   2723 0000CF6E E1 F1                   	lw		r1,[sp]
   2724 0000CF70 02 6E                   	add		sp,sp,#2
   2725 0000CF72 F0 80                   	ret
                                        
                                        
                                        ; ===== Convert the line of text in the input buffer to upper
                                        ;	case (except for stuff between quotes).
                                        ;
                                        ; Registers Affected
                                        ;   r1,r3
                                        ; Returns
                                        ;	r8 = pointing to end of text in buffer
                                        ;
   2736 0000CF74                        TOUPBUF
   2737 0000CF74 FE 6E                   	sub		sp,sp,#2
   2738 0000CF76 E1 DF                   	sw		lr,[sp]
   2739 0000CF78 0A 40 0E 18             	lea		r8,BUFFER	; set up text pointer
   2740 0000CF7C 00 13                   	lw		r3,#0		; clear quote flag
   2741 0000CF7E                        TOUPB1
   2742 0000CF7E 80 E1                   	lb		r1,[r8]		; get the next text char.
   2743 0000CF80 01 68                   	add		r8,r8,#1
   2744 0000CF82 FF 4F 13 10             	cmp		r1,#CR		; is it end of line?
   2745 0000CF86 13 A8                   	beq		TOUPBRT 	; if so, return
   2746 0000CF88 FD 4F 1E 10             	cmp		r1,#'"'		; a double quote?
   2747 0000CF8C 08 A8                   	beq		DOQUO
   2748 0000CF8E FD 4F 19 10             	cmp		r1,#''''	; or a single quote?
   2749 0000CF92 05 A8                   	beq		DOQUO
   2750 0000CF94 30 10                   	cmp		r3,#0		; inside quotes?
   2751 0000CF96 F3 B9                   	bne		TOUPB1		; if so, do the next one
   2752 0000CF98 0D AF                   	call	toUpper 	; convert to upper case
   2753 0000CF9A 8F C1                   	sb		r1,-1[r8]	; store it
   2754 0000CF9C F0 BE                   	br		TOUPB1		; and go back for more
   2755 0000CF9E                        DOQUO
   2756 0000CF9E 30 10                   	cmp		r3,#0		; are we inside quotes?
   2757 0000CFA0 02 A9                   	bne		DOQUO1
   2758 0000CFA2 10 13                   	lw		r3,r1		; if not, toggle inside-quotes flag
   2759 0000CFA4 EC BE                   	br		TOUPB1
   2760 0000CFA6                        DOQUO1
   2761 0000CFA6 1D 23                   	cmp		r3,r1		; make sure we're ending proper quote
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 47
tb.asm
   2762 0000CFA8 EA B9                   	bne		TOUPB1		; if not, ignore it
   2763 0000CFAA 00 13                   	lw		r3,#0		; else clear quote flag
   2764 0000CFAC E8 BE                   	br		TOUPB1
   2765 0000CFAE                        TOUPBRT
   2766 0000CFAE E1 FF                   	lw		lr,[sp]
   2767 0000CFB0 02 6E                   	add		sp,sp,#2
   2768 0000CFB2 F0 80                   	ret
                                        
                                        
                                        ; ===== Convert the character in r1 to upper case
                                        ;
   2773 0000CFB4                        toUpper
   2774 0000CFB4 F9 4F 1F 10             	cmp		r1,#'a'		; is it < 'a'?
   2775 0000CFB8 04 A0                   	blt	    TOUPRET
   2776 0000CFBA F8 4F 16 10             	cmp		r1,#'z'		; or > 'z'?
   2777 0000CFBE 01 A3                   	bgt	    TOUPRET
   2778 0000CFC0 E0 61                   	sub		r1,r1,#32	; if not, make it upper case
   2779 0000CFC2                        TOUPRET
   2780 0000CFC2 F0 80                   	ret
                                        
                                        
                                        ; 'CHKIO' checks the input. If there's no input, it will return
                                        ; to the caller with the Z flag set. If there is input, the Z
                                        ; flag is cleared and the input byte is in r2. However, if a
                                        ; control-C is read, 'CHKIO' will warm-start BASIC and will not
                                        ; return to the caller.
                                        ;
   2789 0000CFC4                        CHKIO
   2790 0000CFC4 FE 6E                   	sub		sp,sp,#2	; save link reg
   2791 0000CFC6 E1 DF                   	sw		lr,[sp]
   2792 0000CFC8 81 4F 0E AF             	call	GOIN		; get input if possible
   2793 0000CFCC 07 A8                   	beq		CHKRET2		; if Zero, no input
   2794 0000CFCE 1D 10                   	cmp		r1,#CTRLC	; is it control-C?
   2795 0000CFD0 02 A9                   	bne		CHKRET		; if not
   2796 0000CFD2 85 4F 0C AE             	jmp		WSTART		; if so, do a warm start
   2797 0000CFD6                        CHKRET
   2798 0000CFD6 E1 FF                   	lw		lr,[sp]
   2799 0000CFD8 02 6E                   	add		sp,sp,#2	; Z=0
   2800 0000CFDA F0 80                   	ret
   2801 0000CFDC                        CHKRET2
   2802 0000CFDC E1 FF                   	lw		lr,[sp]
   2803 0000CFDE 02 6E                   	add		sp,sp,#2
   2804 0000CFE0 00 11                   	lw		r1,#0		; Z=1
   2805 0000CFE2 F0 80                   	ret
                                        
                                        
                                        ; ===== Display a CR-LF sequence
                                        ;
   2810 0000CFE4                        CRLF
   2811 0000CFE4 25 4D 05 11             	lea		r1,CLMSG
                                        
                                        
                                        ; ===== Display a zero-ended string pointed to by register r1
                                        ; Registers Affected
                                        ;   r1,r2,r4
                                        ;
   2818 0000CFE8                        PRMESG
   2819 0000CFE8 FC 6E                   	sub		sp,sp,#4
   2820 0000CFEA E1 DF                   	sw		lr,[sp]
   2821 0000CFEC E3 D5                   	sw		r5,2[sp]
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 48
tb.asm
   2822 0000CFEE 10 15                   	lw      r5,r1       ; r5 = pointer to message
   2823 0000CFF0                        PRMESG1
   2824 0000CFF0 01 65                   	add		r5,r5,#1
   2825 0000CFF2 5F E1                   	lb		r1,-1[r5]	; 	get the char.
   2826 0000CFF4 03 A8                   	beq		PRMRET
   2827 0000CFF6 80 4F 05 AF             	call	GOOUT		;else display it trashes r4
   2828 0000CFFA FA BE                   	br		PRMESG1
   2829 0000CFFC                        PRMRET
   2830 0000CFFC 50 11                   	lw		r1,r5
   2831 0000CFFE E3 F5                   	lw		r5,2[sp]
   2832 0000D000 E1 FF                   	lw		lr,[sp]
   2833 0000D002 04 6E                   	add		sp,sp,#4
   2834 0000D004 F0 80                   	ret
                                        
                                        
                                        ; ===== Display a zero-ended string pointed to by register r1
                                        ; Registers Affected
                                        ;   r1,r2,r3
                                        ;
   2841 0000D006                        PRMESGAUX
   2842 0000D006 FC 6E                   	sub		sp,sp,#4
   2843 0000D008 E1 DF                   	sw		lr,[sp]
   2844 0000D00A E3 D5                   	sw		r5,2[sp]
   2845 0000D00C 10 15                   	lw      r5,r1       ; r3 = pointer
   2846 0000D00E                        PRMESGA1
   2847 0000D00E 01 65                   	add		r5,r5,#1
   2848 0000D010 5F E1                   	lb		r1,-1[r5]	; 	get the char.
   2849 0000D012 03 A8                   	beq		PRMRETA
   2850 0000D014 7F 4F 0A AF             	call	GOAUXO		;else display it
   2851 0000D018 FA BE                   	br		PRMESGA1
   2852 0000D01A                        PRMRETA
   2853 0000D01A 50 11                   	lw		r1,r5
   2854 0000D01C E3 F5                   	lw		r5,2[sp]
   2855 0000D01E E1 FF                   	lw		lr,[sp]
   2856 0000D020 04 6E                   	add		sp,sp,#4
   2857 0000D022 F0 80                   	ret
                                        
                                        ;*****************************************************
                                        ; The following routines are the only ones that need *
                                        ; to be changed for a different I/O environment.     *
                                        ;*****************************************************
                                        
                                        
                                        ; ===== Output character to the console (Port 1) from register D0
                                        ;	(Preserves all registers.)
                                        ;
   2868 0000D024                        OUTC
   2869 0000D024 18 AE                   	jmp		_putChar
                                        
                                        
                                        ; ===== Input a character from the console into register D0 (or
                                        ;	return Zero status if there's no character available).
                                        ;
   2875 0000D026                        INC
                                        
                                        ; get char from keyboard
                                        ; returns char in r1
   2879 0000D026                        _getChar
   2880 0000D026 C5 4D 02 E1             	lb		r1,KBD+2	; get keyboard strobe
   2881 0000D02A 06 AB                   	bpl		gc1
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 49
tb.asm
   2882 0000D02C C5 4D 00 E1             	lb		r1,KBD		; get character and clear keyboard strobe
   2883 0000D030 03 AA                   	bmi		gc1			; was it a keyup event ? (ignore)
   2884 0000D032 07 40 5F 31             	and		r1,#0x7f
   2885 0000D036 F0 80                   	ret
   2886 0000D038                        gc1
   2887 0000D038 00 11                   	lw		r1,#0		; return Z=1 (no character)
   2888 0000D03A F0 80                   	ret
                                        
                                        
                                        ; get char from keyboard
                                        ; returns char in r1
   2893 0000D03C                        _getCharWait
   2894 0000D03C                        gc2
   2895 0000D03C C5 4D 02 E1             	lb		r1,KBD+2	; get keyboard strobe
   2896 0000D040 FD BB                   	bpl		gc2
   2897 0000D042 C5 4D 00 E1             	lb		r1,KBD		; get character and clear keyboard strobe
   2898 0000D046 FA BA                   	bmi		gc2			; was it a keyup event ? (ignore)
   2899 0000D048 07 40 5F 31             	and		r1,#0x7f
   2900 0000D04C F0 80                   	ret
                                        
                                        
                                        ; ===== Output character to the host (Port 2) from register r1
                                        ;	(Preserves all registers.)
                                        ;
   2906 0000D04E                        AUXOUT
   2907 0000D04E 3D 49 0C AE             	jmp		putSerial	; call boot rom routine
                                        
                                        ;
                                        ; ===== Input a character from the host into register D0 (or
                                        ;	return negative status if there's no character available).
                                        ;
   2913 0000D052                        AUXIN
                                        ; get character from serial port
                                        ; return  N=1 if no character available
   2916 0000D052 3D 49 08 AE             	jmp		peekSerial
                                        
                                        ; r1 = char to print
                                        
   2920 0000D056                        _putChar
   2921 0000D056 F4 6E                   	sub		sp,sp,#12
   2922 0000D058 E1 DF                   	sw		lr,[sp]
   2923 0000D05A E5 D5                   	sw		r5,4[sp]
   2924 0000D05C E9 D6                   	sw		r6,8[sp]
                                        
   2926 0000D05E 07 40 5F 31             	and		r1,#0x7f	; mask to ascii
                                        
                                        	; first turn off any flashing cursor - it may be moved
   2929 0000D062 10 14                   	lw		r4,r1
   2930 0000D064 00 11                   	lw		r1,#0
   2931 0000D066 A8 AF                   	call	_flashCursor
   2932 0000D068 40 11                   	lw		r1,r4
                                        
                                        	; process carriage return
   2935 0000D06A FF 4F 13 10             	cmp		r1,#CR		; carriage return ?
   2936 0000D06E 0A A9                   	bne		pc1
   2937 0000D070 03 40 04 F1             	lh		r1,pos		; subtract X from position
   2938 0000D074 03 40 02 E4             	lb		r4,cursx
   2939 0000D078 42 21                   	sub		r1,r4
   2940 0000D07A 03 40 04 D1             	sh		r1,pos
   2941 0000D07E 03 40 02 C0             	sb		r0,cursx	; and set X to zero
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 50
tb.asm
   2942 0000D082 72 AE                   	jmp		pc7
                                        
                                        	; process line feed
   2945 0000D084                        pc1
   2946 0000D084 FF 4F 16 10             	cmp		r1,#LF		; line feed ?
   2947 0000D088 14 A9                   	bne		pc2
   2948 0000D08A 03 40 03 E1             	lb		r1,cursy	; past line 23 ?
   2949 0000D08E 03 40 01 E4             	lb		r4,txtHeight
   2950 0000D092 FE 64                   	sub		r4,r4,#2
   2951 0000D094 4D 21                   	cmp		r1,r4
   2952 0000D096 02 A4                   	bltu	pc3			; if we are, then just scroll the screen
   2953 0000D098 6F AF                   	call	_scrollScreen
   2954 0000D09A 66 AE                   	jmp		pc7
   2955 0000D09C                        pc3
   2956 0000D09C 01 61                   	add		r1,r1,#1	; increment Y
   2957 0000D09E 03 40 03 C1             	sb		r1,cursy
   2958 0000D0A2 03 40 04 F1             	lh		r1,pos		; and the cursor position
   2959 0000D0A6 03 40 00 E4             	lb		r4,txtWidth
   2960 0000D0AA 40 21                   	add		r1,r4
   2961 0000D0AC 03 40 04 D1             	sh		r1,pos
   2962 0000D0B0 5B AE                   	jmp		pc7
                                        
                                        	; backspace
   2965 0000D0B2                        pc2
   2966 0000D0B2 FF 4F 18 10             	cmp		r1,#8		; backspace ?
   2967 0000D0B6 22 A9                   	bne		pc4
   2968 0000D0B8 03 40 02 E1             	lb		r1,cursx	; is cursor.x already zero ?
   2969 0000D0BC 01 A9                   	bne		pc5			
   2970 0000D0BE 54 AE                   	jmp		pc7			; can't backspace
   2971 0000D0C0                        pc5
   2972 0000D0C0 FF 61                   	sub		r1,r1,#1
   2973 0000D0C2 03 40 02 C1             	sb		r1,cursx
   2974 0000D0C6 03 40 04 F4             	lh		r4,pos
   2975 0000D0CA FF 64                   	sub		r4,r4,#1
   2976 0000D0CC 03 40 04 D4             	sh		r4,pos
                                        	; shift remaining characters on line over
   2978 0000D0D0 81 34                   	shl		r4,#1		; r4 = n
   2979 0000D0D2 81 34                   	shl		r4,#1		; r4 = n
   2980 0000D0D4 00 42 00 16             	lw		r6,#VIDEORAM
   2981 0000D0D8 40 26                   	add		r6,r4		; r6 = target pos
   2982 0000D0DA 03 40 00 E4             	lb		r4,txtWidth
   2983 0000D0DE FE 64                   	sub		r4,r4,#2
   2984 0000D0E0                        pc6
   2985 0000D0E0 65 F5                   	lw		r5,4[r6]	; shift next char
   2986 0000D0E2 61 D5                   	sw		r5,[r6]		; over to this one
   2987 0000D0E4 04 66                   	add		r6,r6,#4
   2988 0000D0E6 01 61                   	add		r1,r1,#1	; until X = 39
   2989 0000D0E8 4D 21                   	cmp		r1,r4
   2990 0000D0EA FA B4                   	bltu	pc6
                                        	; blank trailing character
   2992 0000D0EC 02 40 00 15             	lw		r5,#' '
   2993 0000D0F0 03 40 08 D5             	sh		r5,charToPrint
   2994 0000D0F4 03 40 09 F5             	lw		r5,charToPrint
   2995 0000D0F8 61 D5                   	sw		r5,[r6]
   2996 0000D0FA 36 AE                   	jmp		pc7
                                        
                                        	; control charater (non-printable)
   2999 0000D0FC                        pc4
   3000 0000D0FC FE 4F 10 10             	cmp		r1,#' '
   3001 0000D100 01 A5                   	bgeu	pc11
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 51
tb.asm
   3002 0000D102 32 AE                   	jmp		pc7
                                        
                                        
                                        	; some other character
                                        	; put the character to the screen, then advance cursor
   3007 0000D104                        pc11
   3008 0000D104 03 40 08 D1             	sh		r1,charToPrint
   3009 0000D108 00 42 00 14             	lw		r4,#VIDEORAM
   3010 0000D10C 03 40 04 F5             	lh		r5,pos
   3011 0000D110 81 35                   	shl		r5,#1		; pos * 4
   3012 0000D112 81 35                   	shl		r5,#1		; pos * 4
   3013 0000D114 50 24                   	add		r4,r5		; scr[pos]
   3014 0000D116 03 40 09 F5             	lw		r5,charToPrint
   3015 0000D11A 41 D5                   	sw		r5,[r4]		; = char
                                        	; advance cursor
   3017 0000D11C 03 40 04 F5             	lh		r5,pos
   3018 0000D120 03 40 00 E1             	lb		r1,txtWidth
   3019 0000D124 FE 61                   	sub		r1,r1,#2
   3020 0000D126 03 40 02 E4             	lb		r4,cursx
   3021 0000D12A 1D 24                   	cmp		r4,r1		; would we be at end of line ?
   3022 0000D12C 17 A6                   	bleu	pc8
   3023 0000D12E 42 25                   	sub		r5,r4		; pos -= cursx
   3024 0000D130 03 40 04 D5             	sh		r5,pos
   3025 0000D134 03 40 02 C0             	sb		r0,cursx	; cursor.x = 0
   3026 0000D138 03 40 03 E4             	lb		r4,cursy
   3027 0000D13C 03 40 01 E1             	lb		r1,txtHeight
   3028 0000D140 FE 61                   	sub		r1,r1,#2
   3029 0000D142 1D 24                   	cmp		r4,r1		; at last line of screen ?
   3030 0000D144 02 A6                   	bleu	pc9
   3031 0000D146 18 AF                   	call	_scrollScreen	; yes, scroll
   3032 0000D148 0F AE                   	br		pc7
   3033 0000D14A                        pc9
   3034 0000D14A 01 64                   	add		r4,r4,#1	; cursor.y++
   3035 0000D14C 03 40 03 C4             	sb		r4,cursy
   3036 0000D150 03 40 00 E1             	lb		r1,txtWidth
   3037 0000D154 10 25                   	add		r5,r1		; pos += txtWidth
   3038 0000D156 03 40 04 D5             	sh		r5,pos
   3039 0000D15A 06 AE                   	br		pc7
   3040 0000D15C                        pc8						; not at EOL
   3041 0000D15C 01 64                   	add		r4,r4,#1	; cursor.x++
   3042 0000D15E 03 40 02 C4             	sb		r4,cursx
   3043 0000D162 01 65                   	add		r5,r5,#1	; pos++
   3044 0000D164 03 40 04 D5             	sh		r5,pos
                                        
   3046 0000D168                        pc7
   3047 0000D168 03 40 0C E1             	lb		r1,cursFlash	; flash or don't flash the cursor
   3048 0000D16C 25 AF                   	call	_flashCursor
   3049 0000D16E E1 FF                   	lw		lr,[sp]
   3050 0000D170 E5 F5                   	lw		r5,4[sp]
   3051 0000D172 E9 F6                   	lw		r6,8[sp]
   3052 0000D174 0C 6E                   	add		sp,sp,#12
   3053 0000D176 F0 80                   	ret
                                        
                                        
   3056 0000D178                        _scrollScreen
   3057 0000D178 FC 6E                   	sub		sp,sp,#4
   3058 0000D17A E1 D5                   	sw		r5,[sp]
   3059 0000D17C 60 40 00 13             	lw		r3,#1536	; number of chars to move - 1
   3060 0000D180 00 42 00 12             	lw		r2,#VIDEORAM
   3061 0000D184 03 40 00 E1             	lb		r1,txtWidth
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 52
tb.asm
   3062 0000D188 81 31                   	shl		r1,#1
   3063 0000D18A 81 31                   	shl		r1,#1
   3064 0000D18C                        ss1:
   3065 0000D18C 20 15                   	lw		r5,r2
   3066 0000D18E 10 25                   	add		r5,r1
   3067 0000D190 51 F4                   	lw		r4,[r5]		; char at next line
   3068 0000D192 21 D4                   	sw		r4,[r2]		; goes to this line
   3069 0000D194 04 62                   	add		r2,r2,#4
   3070 0000D196 FF 63                   	sub		r3,r3,#1
   3071 0000D198 F9 B9                   	bne     ss1
                                        	; blank out last line
   3073 0000D19A 02 40 00 13             	lw		r3,#' '
   3074 0000D19E 03 40 08 D3             	sh		r3,charToPrint
   3075 0000D1A2 03 40 00 E3             	lb		r3,txtWidth
   3076 0000D1A6 03 40 09 F4             	lw		r4,charToPrint	; and colors
   3077 0000D1AA                        ss2
   3078 0000D1AA 21 D4                   	sw		r4,[r2]
   3079 0000D1AC 04 62                   	add		r2,r2,#4
   3080 0000D1AE FF 63                   	sub		r3,r3,#1
   3081 0000D1B0 FC B9                   	bne     ss2
   3082 0000D1B2 E1 F5                   	lw		r5,[sp]
   3083 0000D1B4 04 6E                   	add		sp,sp,#4
   3084 0000D1B6 F0 80                   	ret
                                        
                                        
                                        ; flash the character at the screen position
                                        ;   r1: 1 = flash, 0 = no flash
   3089 0000D1B8                        _flashCursor
   3090 0000D1B8 00 42 00 12             	lw		r2,#VIDEORAM
   3091 0000D1BC 03 40 04 F3             	lh		r3,pos
   3092 0000D1C0 81 33                   	shl		r3,#1
   3093 0000D1C2 81 33                   	shl		r3,#1
   3094 0000D1C4 20 23                   	add		r3,r2		; r3 = scr[pos]
                                        
   3096 0000D1C6 16 21                   	or		r1,r1
   3097 0000D1C8 04 A8                   	beq		fc1
   3098 0000D1CA 33 E2                   	lb		r2,3[r3]	; get background color
   3099 0000D1CC 08 40 60 32             	or		r2,#0x80	; set flash indicator
   3100 0000D1D0 03 AE                   	br		fcx
   3101 0000D1D2                        fc1
   3102 0000D1D2 33 E2                   	lb		r2,3[r3]	; get background color
   3103 0000D1D4 07 40 5F 32             	and		r2,#0x7f	; clear flash indicator
   3104 0000D1D8                        fcx:
   3105 0000D1D8 33 C2                   	sb		r2,3[r3]
   3106 0000D1DA F0 80                   	ret
                                        
                                        
   3109 0000D1DC                        _cls
   3110 0000D1DC 32 49 05 AF             	call	clearScreen
   3111 0000D1E0 8D 4F 0E AE             	br		FINISH
                                        
                                        
                                        ;_clearScreen
                                        ;	lw		r3,#1680    ; number of chars to clear
                                        ;	lw		r2,VIC+4
                                        ;
                                        ;	lw		r4,#' '
                                        ;	sh		r4,charToPrint
                                        ;	lw		r4,charToPrint
                                        ;cls1
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 53
tb.asm
                                        ;	sw		r4,[r2]
                                        ;
                                        ;	add		r2,r2,#4
                                        ;	sub		r3,r3,#1
                                        ;	bne     cls1
                                        ;
                                        ;	sb		r0,cursx	; reset cursor position
                                        ;	sb		r0,cursy
                                        ;	sh		r0,pos
                                        ;
                                        ;	ret
                                        ;
                                        
   3135 0000D1E4                        _wait10
   3136 0000D1E4 20 00                   	nop
   3137 0000D1E6 20 00                   	nop
   3138 0000D1E8 20 00                   	nop
   3139 0000D1EA 20 00                   	nop
   3140 0000D1EC 20 00                   	nop
   3141 0000D1EE 20 00                   	nop
   3142 0000D1F0 20 00                   	nop
   3143 0000D1F2 20 00                   	nop
   3144 0000D1F4 20 00                   	nop
   3145 0000D1F6 20 00                   	nop
   3146 0000D1F8 F0 80                   	ret
                                        
                                        
                                        ; ===== Return to the resident monitor, operating system, etc.
                                        ;
   3151 0000D1FA                        BYEBYE
   3152 0000D1FA 08 40 05 FE             	lw		sp,OSSP
   3153 0000D1FE E1 FF                       lw      lr,[sp]
   3154 0000D200 02 6E                       add		sp,sp,#2
   3155 0000D202 F0 80                   	ret
                                        
                                        ;	MOVE.B	#228,D7 	return to Tutor
                                        ;	TRAP	#14
                                        
   3160 0000D204 0D 0A 42 75 74 74      msgInit db	CR,LF,"Butterfly Tiny BASIC v1.1",CR,LF,"(C) 2005-2017  Robert Finch",CR,LF,LF,0
   3160 0000D20A 65 72 66 6C 79 20 54  
   3160 0000D211 69 6E 79 20 42 41 53  
   3160 0000D218 49 43 20 76 31 2E 31  
   3160 0000D21F 0D 0A 28 43 29 20 32  
   3160 0000D226 30 30 35 2D 32 30 31  
   3160 0000D22D 37 20 20 52 6F 62 65  
   3160 0000D234 72 74 20 46 69 6E 63  
   3160 0000D23B 68 0D 0A 0A 00        
   3161 0000D240 0D 0A 4F 4B 0D 0A      OKMSG	db	CR,LF,"OK",CR,LF,0
   3161 0000D246 00                    
   3162 0000D247 57 68 61 74 3F 0D      msgWhat	db	"What?",CR,LF,0
   3162 0000D24D 0A 00                 
   3163 0000D24F 53 6F 72 72 79 2E      SRYMSG	db	"Sorry."
                                      
   3164 0000D255 0D 0A 00               CLMSG	db	CR,LF,0
   3165 0000D258 43 6F 6D 70 61 63      msgReadError	db	"Compact FLASH read error",CR,LF,0
   3165 0000D25E 74 20 46 4C 41 53 48  
   3165 0000D265 20 72 65 61 64 20 65  
   3165 0000D26C 72 72 6F 72 0D 0A 00  
                                      
   3166 0000D273 4E 75 6D 62 65 72      msgNumTooBig	db	"Number is too big",CR,LF,0
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 54
tb.asm
   3166 0000D279 20 69 73 20 74 6F 6F  
   3166 0000D280 20 62 69 67 0D 0A 00  
                                      
   3167 0000D287 44 69 76 69 73 69      msgDivZero		db	"Division by zero",CR,LF,0
   3167 0000D28D 6F 6E 20 62 79 20 7A  
   3167 0000D294 65 72 6F 0D 0A 00     
   3168 0000D29A 4F 75 74 20 6F 66      msgVarSpace     db  "Out of variable space",CR,LF,0
   3168 0000D2A0 20 76 61 72 69 61 62  
   3168 0000D2A7 6C 65 20 73 70 61 63  
   3168 0000D2AE 65 0D 0A 00           
   3169 0000D2B2 20 62 79 74 65 73      msgBytesFree	db	" bytes free",CR,LF,0
   3169 0000D2B8 20 66 72 65 65 0D 0A  
   3169 0000D2BF 00                    
   3170 0000D2C0 0D 0A 52 65 61 64      msgReady		db	CR,LF,"Ready",CR,LF,0
   3170 0000D2C6 79 0D 0A 00           
   3171 0000D2CA 45 78 70 65 63 74      msgComma		db	"Expecting a comma",CR,LF,0
   3171 0000D2D0 69 6E 67 20 61 20 63  
   3171 0000D2D7 6F 6D 6D 61 0D 0A 00  
                                      
   3172 0000D2DE 4C 69 6E 65 20 6E      msgLineRange	db	"Line number too big",CR,LF,0
   3172 0000D2E4 75 6D 62 65 72 20 74  
   3172 0000D2EB 6F 6F 20 62 69 67 0D  
   3172 0000D2F2 0A 00                 
   3173 0000D2F4 45 78 70 65 63 74      msgVar			db	"Expecting a variable",CR,LF,0
   3173 0000D2FA 69 6E 67 20 61 20 76  
   3173 0000D301 61 72 69 61 62 6C 65  
   3173 0000D308 0D 0A 00              
   3174 0000D30B 52 4E 44 20 62 61      msgRNDBad		db	"RND bad parameter",CR,LF,0
   3174 0000D311 64 20 70 61 72 61 6D  
   3174 0000D318 65 74 65 72 0D 0A 00  
                                      
   3175 0000D31F 53 59 53 20 62 61      msgSYSBad		db	"SYS bad address",CR,LF,0
   3175 0000D325 64 20 61 64 64 72 65  
   3175 0000D32C 73 73 0D 0A 00        
   3176 0000D331 49 4E 50 55 54 20      msgInputVar		db	"INPUT expecting a variable",CR,LF,0
   3176 0000D337 65 78 70 65 63 74 69  
   3176 0000D33E 6E 67 20 61 20 76 61  
   3176 0000D345 72 69 61 62 6C 65 0D  
   3176 0000D34C 0A 00                 
   3177 0000D34E 4E 45 58 54 20 77      msgNextFor		db	"NEXT without FOR",CR,LF,0
   3177 0000D354 69 74 68 6F 75 74 20  
   3177 0000D35B 46 4F 52 0D 0A 00     
   3178 0000D361 4E 45 58 54 20 65      msgNextVar		db	"NEXT expecting a defined variable",CR,LF,0
   3178 0000D367 78 70 65 63 74 69 6E  
   3178 0000D36E 67 20 61 20 64 65 66  
   3178 0000D375 69 6E 65 64 20 76 61  
   3178 0000D37C 72 69 61 62 6C 65 0D  
   3178 0000D383 0A 00                 
   3179 0000D385 47 4F 54 4F 2F 47      msgBadGotoGosub	db	"GOTO/GOSUB bad line number",CR,LF,0
   3179 0000D38B 4F 53 55 42 20 62 61  
   3179 0000D392 64 20 6C 69 6E 65 20  
   3179 0000D399 6E 75 6D 62 65 72 0D  
   3179 0000D3A0 0A 00                 
   3180 0000D3A2 52 45 54 55 52 4E      msgRetWoGosub   db	"RETURN without GOSUB",CR,LF,0
   3180 0000D3A8 20 77 69 74 68 6F 75  
   3180 0000D3AF 74 20 47 4F 53 55 42  
   3180 0000D3B6 0D 0A 00              
   3181 0000D3B9 50 72 6F 67 72 61      msgTooBig		db	"Program is too big",CR,LF,0
   3181 0000D3BF 6D 20 69 73 20 74 6F  
   3181 0000D3C6 6F 20 62 69 67 0D 0A  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 55
tb.asm
   3181 0000D3CD 00                    
   3182 0000D3CE 45 78 74 72 61 20      msgExtraChars	db	"Extra characters on line ignored",CR,LF,0
   3182 0000D3D4 63 68 61 72 61 63 74  
   3182 0000D3DB 65 72 73 20 6F 6E 20  
   3182 0000D3E2 6C 69 6E 65 20 69 67  
   3182 0000D3E9 6E 6F 72 65 64 0D 0A  
   3182 0000D3F0 00                    
                                        
   3184 0000D3F1 FF FF FF                	.align	4
   3249 = 0000D3F4                      LSTROM	equ	*		; end of possible ROM area
                                        ;
                                        ; Internal variables follow:
                                        ;
                                        		bss
                                        		org		0x0030
   3191 00000030                        txtWidth	db	0		; BIOS var =60
   3192 00000031                        txtHeight	db	0		; BIOS var =27
   3193 00000032                        cursx	db		0		; cursor x position
   3194 00000033                        cursy	db		0		; cursor y position
   3195 00000034                        pos		dw		0		; text screen position
                                        		org		0x0038
   3197 00000038                        charToPrint		dw		0
   3198 0000003A                        fgColor			db		0
   3199 0000003B                        bkColor			db		0
   3200 0000003C                        cursFlash		db		0	; flash the cursor ?
                                        
   3202 0000003D                        lineLinkTbl		fill.b	25,0	; screen line link table
   3203 00000056                         	align 4
                                        
                                        		org		0x0080
   3206 00000080                        typef   db      0   ; variable / expression type
   3207 00000081                                 align   4
   3208 00000084                        OSSP	dw	1	; OS value of sp
   3209 00000086                        CURRNT	dw	1	;	Current line pointer
   3210 00000088                        STKGOS	dw	1	;	Saves stack pointer in 'GOSUB'
   3211 0000008A                        STKINP	dw	1	;	Saves stack pointer during 'INPUT'
   3212 0000008C                        LOPVAR	dw	1	;	'FOR' loop save area
   3213 0000008E                        LOPINC	dw	1	;	increment
   3214 00000090                        LOPLMT	dw	1	;	limit
   3215 00000092                        LOPLN	dw	1	;	line number
   3216 00000094                        LOPPT	dw	1	;	text pointer
   3217 00000096                        TXTUNF	dw	1	;	points to unfilled text area
   3218 00000098                        VARBGN	dw	1	;	points to variable area
   3219 0000009A                        IVARBGN dw  1   ;   points to integer variable area
   3220 0000009C                        SVARBGN dw  1   ;   points to string variable area
   3221 0000009E                        FVARBGN dw  1   ;   points to float variable area
   3222 000000A0                        STKBOT	dw	1	;	holds lower limit for stack growth
   3223 000000A2                        NUMWKA	fill.b	12,0			; numeric work area
   3224 000000AE                        BUFFER	fill.b	BUFLEN,0x00		;		Keyboard input buffer
                                        
                                                bss
                                                org     0x2000
   3228 00002000                        textScr1
                                                org     0x2000
                                        ;	END
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 55
noc_boot11.asm


                                      
                                        		.code
   3232 0000D3F4 FF FF FF FF FF FF FF    		.org	$D800
   3232 0000D3FB FF FF FF FF FF FF FF  
   3232 0000D402 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 56
noc_boot11.asm
   3232 0000D409 FF FF FF FF FF FF FF  
   3232 0000D410 FF FF FF FF FF FF FF  
   3232 0000D417 FF FF FF FF FF FF FF  
   3232 0000D41E FF FF FF FF FF FF FF  
   3232 0000D425 FF FF FF FF FF FF FF  
   3232 0000D42C FF FF FF FF FF FF FF  
   3232 0000D433 FF FF FF FF FF FF FF  
   3232 0000D43A FF FF FF FF FF FF FF  
   3232 0000D441 FF FF FF FF FF FF FF  
   3232 0000D448 FF FF FF FF FF FF FF  
   3232 0000D44F FF FF FF FF FF FF FF  
   3232 0000D456 FF FF FF FF FF FF FF  
   3232 0000D45D FF FF FF FF FF FF FF  
   3232 0000D464 FF FF FF FF FF FF FF  
   3232 0000D46B FF FF FF FF FF FF FF  
   3232 0000D472 FF FF FF FF FF FF FF  
   3232 0000D479 FF FF FF FF FF FF FF  
   3232 0000D480 FF FF FF FF FF FF FF  
   3232 0000D487 FF FF FF FF FF FF FF  
   3232 0000D48E FF FF FF FF FF FF FF  
   3232 0000D495 FF FF FF FF FF FF FF  
   3232 0000D49C FF FF FF FF FF FF FF  
   3232 0000D4A3 FF FF FF FF FF FF FF  
   3232 0000D4AA FF FF FF FF FF FF FF  
   3232 0000D4B1 FF FF FF FF FF FF FF  
   3232 0000D4B8 FF FF FF FF FF FF FF  
   3232 0000D4BF FF FF FF FF FF FF FF  
   3232 0000D4C6 FF FF FF FF FF FF FF  
   3232 0000D4CD FF FF FF FF FF FF FF  
   3232 0000D4D4 FF FF FF FF FF FF FF  
   3232 0000D4DB FF FF FF FF FF FF FF  
   3232 0000D4E2 FF FF FF FF FF FF FF  
   3232 0000D4E9 FF FF FF FF FF FF FF  
   3232 0000D4F0 FF FF FF FF FF FF FF  
   3232 0000D4F7 FF FF FF FF FF FF FF  
   3232 0000D4FE FF FF FF FF FF FF FF  
   3232 0000D505 FF FF FF FF FF FF FF  
   3232 0000D50C FF FF FF FF FF FF FF  
   3232 0000D513 FF FF FF FF FF FF FF  
   3232 0000D51A FF FF FF FF FF FF FF  
   3232 0000D521 FF FF FF FF FF FF FF  
   3232 0000D528 FF FF FF FF FF FF FF  
   3232 0000D52F FF FF FF FF FF FF FF  
   3232 0000D536 FF FF FF FF FF FF FF  
   3232 0000D53D FF FF FF FF FF FF FF  
   3232 0000D544 FF FF FF FF FF FF FF  
   3232 0000D54B FF FF FF FF FF FF FF  
   3232 0000D552 FF FF FF FF FF FF FF  
   3232 0000D559 FF FF FF FF FF FF FF  
   3232 0000D560 FF FF FF FF FF FF FF  
   3232 0000D567 FF FF FF FF FF FF FF  
   3232 0000D56E FF FF FF FF FF FF FF  
   3232 0000D575 FF FF FF FF FF FF FF  
   3232 0000D57C FF FF FF FF FF FF FF  
   3232 0000D583 FF FF FF FF FF FF FF  
   3232 0000D58A FF FF FF FF FF FF FF  
   3232 0000D591 FF FF FF FF FF FF FF  
   3232 0000D598 FF FF FF FF FF FF FF  
   3232 0000D59F FF FF FF FF FF FF FF  
   3232 0000D5A6 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 57
noc_boot11.asm
   3232 0000D5AD FF FF FF FF FF FF FF  
   3232 0000D5B4 FF FF FF FF FF FF FF  
   3232 0000D5BB FF FF FF FF FF FF FF  
   3232 0000D5C2 FF FF FF FF FF FF FF  
   3232 0000D5C9 FF FF FF FF FF FF FF  
   3232 0000D5D0 FF FF FF FF FF FF FF  
   3232 0000D5D7 FF FF FF FF FF FF FF  
   3232 0000D5DE FF FF FF FF FF FF FF  
   3232 0000D5E5 FF FF FF FF FF FF FF  
   3232 0000D5EC FF FF FF FF FF FF FF  
   3232 0000D5F3 FF FF FF FF FF FF FF  
   3232 0000D5FA FF FF FF FF FF FF FF  
   3232 0000D601 FF FF FF FF FF FF FF  
   3232 0000D608 FF FF FF FF FF FF FF  
   3232 0000D60F FF FF FF FF FF FF FF  
   3232 0000D616 FF FF FF FF FF FF FF  
   3232 0000D61D FF FF FF FF FF FF FF  
   3232 0000D624 FF FF FF FF FF FF FF  
   3232 0000D62B FF FF FF FF FF FF FF  
   3232 0000D632 FF FF FF FF FF FF FF  
   3232 0000D639 FF FF FF FF FF FF FF  
   3232 0000D640 FF FF FF FF FF FF FF  
   3232 0000D647 FF FF FF FF FF FF FF  
   3232 0000D64E FF FF FF FF FF FF FF  
   3232 0000D655 FF FF FF FF FF FF FF  
   3232 0000D65C FF FF FF FF FF FF FF  
   3232 0000D663 FF FF FF FF FF FF FF  
   3232 0000D66A FF FF FF FF FF FF FF  
   3232 0000D671 FF FF FF FF FF FF FF  
   3232 0000D678 FF FF FF FF FF FF FF  
   3232 0000D67F FF FF FF FF FF FF FF  
   3232 0000D686 FF FF FF FF FF FF FF  
   3232 0000D68D FF FF FF FF FF FF FF  
   3232 0000D694 FF FF FF FF FF FF FF  
   3232 0000D69B FF FF FF FF FF FF FF  
   3232 0000D6A2 FF FF FF FF FF FF FF  
   3232 0000D6A9 FF FF FF FF FF FF FF  
   3232 0000D6B0 FF FF FF FF FF FF FF  
   3232 0000D6B7 FF FF FF FF FF FF FF  
   3232 0000D6BE FF FF FF FF FF FF FF  
   3232 0000D6C5 FF FF FF FF FF FF FF  
   3232 0000D6CC FF FF FF FF FF FF FF  
   3232 0000D6D3 FF FF FF FF FF FF FF  
   3232 0000D6DA FF FF FF FF FF FF FF  
   3232 0000D6E1 FF FF FF FF FF FF FF  
   3232 0000D6E8 FF FF FF FF FF FF FF  
   3232 0000D6EF FF FF FF FF FF FF FF  
   3232 0000D6F6 FF FF FF FF FF FF FF  
   3232 0000D6FD FF FF FF FF FF FF FF  
   3232 0000D704 FF FF FF FF FF FF FF  
   3232 0000D70B FF FF FF FF FF FF FF  
   3232 0000D712 FF FF FF FF FF FF FF  
   3232 0000D719 FF FF FF FF FF FF FF  
   3232 0000D720 FF FF FF FF FF FF FF  
   3232 0000D727 FF FF FF FF FF FF FF  
   3232 0000D72E FF FF FF FF FF FF FF  
   3232 0000D735 FF FF FF FF FF FF FF  
   3232 0000D73C FF FF FF FF FF FF FF  
   3232 0000D743 FF FF FF FF FF FF FF  
   3232 0000D74A FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 58
noc_boot11.asm
   3232 0000D751 FF FF FF FF FF FF FF  
   3232 0000D758 FF FF FF FF FF FF FF  
   3232 0000D75F FF FF FF FF FF FF FF  
   3232 0000D766 FF FF FF FF FF FF FF  
   3232 0000D76D FF FF FF FF FF FF FF  
   3232 0000D774 FF FF FF FF FF FF FF  
   3232 0000D77B FF FF FF FF FF FF FF  
   3232 0000D782 FF FF FF FF FF FF FF  
   3232 0000D789 FF FF FF FF FF FF FF  
   3232 0000D790 FF FF FF FF FF FF FF  
   3232 0000D797 FF FF FF FF FF FF FF  
   3232 0000D79E FF FF FF FF FF FF FF  
   3232 0000D7A5 FF FF FF FF FF FF FF  
   3232 0000D7AC FF FF FF FF FF FF FF  
   3232 0000D7B3 FF FF FF FF FF FF FF  
   3232 0000D7BA FF FF FF FF FF FF FF  
   3232 0000D7C1 FF FF FF FF FF FF FF  
   3232 0000D7C8 FF FF FF FF FF FF FF  
   3232 0000D7CF FF FF FF FF FF FF FF  
   3232 0000D7D6 FF FF FF FF FF FF FF  
   3232 0000D7DD FF FF FF FF FF FF FF  
   3232 0000D7E4 FF FF FF FF FF FF FF  
   3232 0000D7EB FF FF FF FF FF FF FF  
   3232 0000D7F2 FF FF FF FF FF FF FF  
   3232 0000D7F9 FF FF FF FF FF FF FF  
                                      
   3233 0000D800                        start:
   3234 0000D800 E4 31                   		tsr		r1,ID		; id register
   3235 0000D802 20 4B 00 C1             		sb		r1,LEDS
   3236 0000D806 FF 41 0E 1E             		lw		sp,#$1FFE
   3237 0000D80A 64 AF                   		call	InitTxtCtrl
   3238 0000D80C 04 11                   		lw		r1,#4
   3239 0000D80E 20 4B 00 C1             		sb		r1,LEDS
   3240 0000D812 01 40 0F 11             		lw		r1,#31
   3241 0000D816 00 40 0E C1             		sb		r1,txtHeight
   3242 0000D81A 03 40 04 11             		lw		r1,#52
   3243 0000D81E 00 40 0F C1             		sb		r1,txtWidth
   3244 0000D822 68 AF                   		call	ClearScreen
   3245 0000D824 72 AF                   		call	HomeCursor
   3246 0000D826 A8 4D 0C 11             		lw		r1,#msgStarting
   3247 0000D82A 73 AF                   		call	putmsgScr
   3248 0000D82C 07 AF                   		call	broadcastReset
   3249 0000D82E                        RecvLoop:
   3250 0000D82E                        noMsg1:
   3251 0000D82E 01 4B 00 E1             		lb		r1,ROUTER+RTR_RXSTAT
   3252 0000D832 FD B8                   		beq		noMsg1
   3253 0000D834 24 AF                   		call	Recv
   3254 0000D836 2F AF                   		call	RecvDispatch
   3255 0000D838 FA BE                   		bra		RecvLoop
   3256 0000D83A                        lockup:
   3257 0000D83A FF BE                   		bra		lockup
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Broadcast a reset message on the network.
                                        ;----------------------------------------------------------------------------
                                        
   3263 0000D83C                        broadcastReset:
   3264 0000D83C FE 6E                   		add		sp,sp,#-2
   3265 0000D83E E1 DF                   		sw		lr,[sp]
   3266 0000D840 42 AF                   		call	zeroTxBuf
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 59
noc_boot11.asm
   3267 0000D842 0F 40 0F 11             		lw		r1,#$FF		; global broadcast address
   3268 0000D846 02 40 0F C1             		sb		r1,txBuf+15
   3269 0000D84A 01 40 01 11             		lw		r1,#$11		; source of message
   3270 0000D84E 02 40 0E C1             		sb		r1,txBuf+14
   3271 0000D852 01 11                   		lw		r1,#1
   3272 0000D854 02 40 08 C1             		sb		r1,txBuf+8	; reset message
   3273 0000D858 03 AF                   		call	Xmit
   3274 0000D85A E1 FF                   		lw		lr,[sp]
   3275 0000D85C 02 6E                   		add		sp,sp,#2
   3276 0000D85E F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Transmit on the network.
                                        ;----------------------------------------------------------------------------
                                        
   3282 0000D860                        Xmit:
                                        		; wait for transmit buffer to empty
   3284 0000D860                        Xmit2:
   3285 0000D860 01 4B 02 E1             		lb		r1,ROUTER+RTR_TXSTAT
   3286 0000D864 FD B9                   		bne		Xmit2
   3287 0000D866 00 40 0F 12             		lw		r2,#15
   3288 0000D86A                        Xmit1:
   3289 0000D86A 02 40 20 E1             		lb		r1,txBuf[r2]
   3290 0000D86E 00 4B 20 C1             		sb		r1,ROUTER[r2]
   3291 0000D872 FF 62                   		add		r2,r2,#-1
   3292 0000D874 FA BB                   		bpl		Xmit1
                                        		; trigger a transmit
   3294 0000D876 01 11                   		lw		r1,#1
   3295 0000D878 01 4B 02 C2             		sb		r2,ROUTER+RTR_TXSTAT
   3296 0000D87C F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Receive from network.
                                        ; Receive status must have already indicated a message present.
                                        ;----------------------------------------------------------------------------
                                        
   3303 0000D87E                        Recv:
   3304 0000D87E 01 11                   		lw		r1,#1
   3305 0000D880 01 4B 00 C1             		sb		r1,ROUTER+RTR_RXSTAT	; pop the rx fifo
   3306 0000D884 00 40 0F 12             		lw		r2,#15
   3307 0000D888                        Recv1:
   3308 0000D888 00 4B 20 E1             		lb		r1,ROUTER[r2]			; copy message to local buffer
   3309 0000D88C 03 40 20 C1             		sb		r1,rxBuf[r2]
   3310 0000D890 FF 62                   		add		r2,r2,#-1
   3311 0000D892 FA BB                   		bpl		Recv1
   3312 0000D894 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ;----------------------------------------------------------------------------
                                        
   3317 0000D896                        RecvDispatch:
   3318 0000D896 03 40 08 E1             		lb		r1,rxBuf+8
   3319 0000D89A 1E 10                   		cmp		r1,#2				; status display ?
   3320 0000D89C 13 A9                   		bne		RecvDispatch2
   3321 0000D89E 03 40 0E E1             		lb		r1,rxBuf+14		; message source
   3322 0000D8A2 10 12                   		mov		r2,r1
   3323 0000D8A4 00 40 5F 32             		and		r2,#$F
   3324 0000D8A8 10 13                   		mov		r3,r1
   3325 0000D8AA A1 33                   		shr		r3,#1
   3326 0000D8AC A1 33                   		shr		r3,#1
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 60
noc_boot11.asm
   3327 0000D8AE A1 33                   		shr		r3,#1
   3328 0000D8B0 03 40 5E 33             		and		r3,#$3E
   3329 0000D8B4 AB 4D 3D F3             		lw		r3,lineTbl[r3]
   3330 0000D8B8 20 23                   		add		r3,r2
   3331 0000D8BA 20 23                   		add		r3,r2
   3332 0000D8BC F6 4B 05 11             		lw		r1,#$BF65
   3333 0000D8C0 00 42 31 D1             		sw		r1,TXTSCR[r3]
   3334 0000D8C4                        RecvDispatch2:
   3335 0000D8C4 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Zero out the transmit buffer.
                                        ;----------------------------------------------------------------------------
                                        
   3341 0000D8C6                        zeroTxBuf:
   3342 0000D8C6 00 40 0F 12             		lw		r2,#15
   3343 0000D8CA                        zeroTxBuf1:
   3344 0000D8CA 02 40 20 C0             		sb		r0,txBuf[r2]
   3345 0000D8CE FF 62                   		sub		r2,r2,#1
   3346 0000D8D0 FC BB                   		bpl		zeroTxBuf1
   3347 0000D8D2 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Initialize the text controller.
                                        ;----------------------------------------------------------------------------
                                        
   3353 0000D8D4                        InitTxtCtrl:
   3354 0000D8D4 02 11                   		lw		r1,#2
   3355 0000D8D6 20 4B 00 C1             		sb		r1,LEDS
   3356 0000D8DA 00 12                   		lw		r2,#0
   3357 0000D8DC                        itc1:
   3358 0000D8DC AA 4D 2D E1             		lb		r1,txtctrl_dat[r2]
   3359 0000D8E0 10 4B 20 C1             		sb		r1,TXTCTRL[r2]
   3360 0000D8E4 01 62                   		add		r2,r2,#1
   3361 0000D8E6 FF 4F 21 10             		cmp		r2,#15
   3362 0000D8EA F8 B2                   		ble		itc1
   3363 0000D8EC 03 11                   		lw		r1,#3
   3364 0000D8EE 20 4B 00 C1             		sb		r1,LEDS
   3365 0000D8F2 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Clear the screen.
                                        ;----------------------------------------------------------------------------
                                        
   3371 0000D8F4                        ClearScreen:
   3372 0000D8F4 80 40 00 11             		lw		r1,#2048
   3373 0000D8F8 00 42 00 12             		lw		r2,#TXTSCR
   3374 0000D8FC F0 4B 00 13             		lw		r3,#$BF00
   3375 0000D900                        cs1:
   3376 0000D900 21 D3                   		sw		r3,[r2]
   3377 0000D902 02 62                   		add		r2,r2,#2
   3378 0000D904 FF 61                   		add		r1,r1,#-1
   3379 0000D906 FC B9                   		bne		cs1
   3380 0000D908 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ;----------------------------------------------------------------------------
                                        
   3385 0000D90A                        HomeCursor:
   3386 0000D90A 0A C0                   		sb		r0,cursy
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 61
noc_boot11.asm
   3387 0000D90C 0B C0                   		sb		r0,cursx
   3388 0000D90E F0 80                   		ret
                                        
                                        ; flash the character at the screen position
                                        ;   r1: 1 = flash, 0 = no flash
   3392 0000D910                        flashCursor:
   3393 0000D910 F0 80                   		ret
                                        
                                        ;-----------------------------------------------------------------
                                        ; display a message on the screen
                                        ; r1 = message address
                                        ; screen pos controls where message is displayed
                                        ; Returns
                                        ; 	r1 = points to null character
                                        ;-----------------------------------------------------------------
   3402 0000D912                        putmsgScr:
   3403 0000D912 FC 6E                   	sub		sp,sp,#4	; allocate stack frame
   3404 0000D914 E1 DF                   	sw		lr,[sp]	; save off link reg
   3405 0000D916 E3 D3                   	sw		r3,2[sp]
   3406 0000D918 10 13                   	mov		r3,r1		; r3 = msg address
   3407 0000D91A                        putmsg3:
   3408 0000D91A 30 E1                   	lb		r1,[r3]		; get char to display
   3409 0000D91C 03 A8                   	beq		putmsg4
   3410 0000D91E 07 AF                   	call	putcharScr	; store to screen
   3411 0000D920 01 63                   	add		r3,r3,#1	; inc msg pointer
   3412 0000D922 FB BE                   	br		putmsg3
   3413 0000D924                        putmsg4:
   3414 0000D924 30 11                   	mov		r1,r3
   3415 0000D926 E3 F3                   	lw		r3,2[sp]
   3416 0000D928 E1 FF                   	lw		lr,[sp]
   3417 0000D92A 04 6E                   	add		sp,sp,#4
   3418 0000D92C F0 80                   	ret
                                        
                                        
                                        ;-----------------------------------------------------------------
                                        ; Put a character to the screen
                                        ;	r1.h = character to put
                                        ;-----------------------------------------------------------------
   3425 0000D92E                        putcharScr
   3426 0000D92E F8 6E                   	sub		sp,sp,#8
   3427 0000D930 E1 DF                   	sw		lr,[sp]
   3428 0000D932 E3 D4                   	sw		r4,2[sp]
   3429 0000D934 E5 D5                   	sw		r5,4[sp]
   3430 0000D936 E7 D6                   	sw		r6,6[sp]
                                        
   3432 0000D938 0E 21                   	zxb		r1			; mask
                                        
                                        	; first turn off any flashing cursor - it may be moved
   3435 0000D93A 10 14                   	lw		r4,r1
   3436 0000D93C 00 11                   	lw		r1,#0
   3437 0000D93E E8 BF                   	call	flashCursor
   3438 0000D940 40 11                   	lw		r1,r4
                                        
                                        	; process carriage return
   3441 0000D942 FF 4F 13 10             	cmp		r1,#CR		; carriage return ?
   3442 0000D946 08 A9                   	bne		pc1
   3443 0000D948 00 40 0D F1             	lw		r1,pos		; subtract X from position
   3444 0000D94C 0B E4                   	lb		r4,cursx
   3445 0000D94E 42 21                   	sub		r1,r4
   3446 0000D950 00 40 0D D1             	sw		r1,pos
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 62
noc_boot11.asm
   3447 0000D954 0B C0                   	sb		r0,cursx	; and set X to zero
   3448 0000D956 6B AE                   	jmp		pc7
                                        
                                        	; process line feed
   3451 0000D958                        pc1
   3452 0000D958 FF 4F 16 10             	cmp		r1,#LF		; line feed ?
   3453 0000D95C 12 A9                   	bne		pc2
   3454 0000D95E 0A E1                   	lb		r1,cursy	; past line 23 ?
   3455 0000D960 00 40 0E E4             	lb		r4,txtHeight
   3456 0000D964 FE 64                   	sub		r4,r4,#2
   3457 0000D966 4D 21                   	cmp		r1,r4
   3458 0000D968 02 A4                   	bltu	pc3			; if we are, then just scroll the screen
   3459 0000D96A FF BF                   	call	scrollScreenUp
   3460 0000D96C 60 AE                   	jmp		pc7
   3461 0000D96E                        pc3
   3462 0000D96E 01 61                   	add		r1,r1,#1	; increment Y
   3463 0000D970 0A C1                   	sb		r1,cursy
   3464 0000D972 00 40 0D F1             	lw		r1,pos		; and the cursor position
   3465 0000D976 00 40 0F E4             	lb		r4,txtWidth
   3466 0000D97A 40 21                   	add		r1,r4
   3467 0000D97C 00 40 0D D1             	sw		r1,pos
   3468 0000D980 56 AE                   	jmp		pc7
                                        
                                        	; backspace
   3471 0000D982                        pc2
   3472 0000D982 FF 4F 18 10             	cmp		r1,#CTRLH	; backspace ?
   3473 0000D986 1F A9                   	bne		pc4
   3474 0000D988 0B E1                   	lb		r1,cursx	; is cursor.x already zero ?
   3475 0000D98A 01 A9                   	bne		pc5			
   3476 0000D98C 50 AE                   	jmp		pc7			; can't backspace
   3477 0000D98E                        pc5
   3478 0000D98E FF 61                   	sub		r1,r1,#1
   3479 0000D990 0B C1                   	sb		r1,cursx
   3480 0000D992 00 40 0D F4             	lw		r4,pos
   3481 0000D996 FF 64                   	sub		r4,r4,#1
   3482 0000D998 00 40 0D D4             	sw		r4,pos
                                        	; shift remaining characters on line over
   3484 0000D99C 81 34                   	shl		r4,#1		; r4 = n
   3485 0000D99E 00 42 00 16             	lw		r6,#TXTSCR
   3486 0000D9A2 40 26                   	add		r6,r4		; r6 = target pos
   3487 0000D9A4 00 40 0F E4             	lb		r4,txtWidth
   3488 0000D9A8 FE 64                   	sub		r4,r4,#2
   3489 0000D9AA                        pc6
   3490 0000D9AA 63 F5                   	lw		r5,2[r6]	; shift next char
   3491 0000D9AC 61 D5                   	sw		r5,[r6]		; over to this one
   3492 0000D9AE 02 66                   	add		r6,r6,#2
   3493 0000D9B0 01 61                   	add		r1,r1,#1	; until X = 39
   3494 0000D9B2 4D 21                   	cmp		r1,r4
   3495 0000D9B4 FA B4                   	bltu	pc6
                                        	; blank trailing character
   3497 0000D9B6 02 40 00 15             	lw		r5,#' '
   3498 0000D9BA 01 40 00 C5             	sb		r5,charToPrint
   3499 0000D9BE 01 40 00 E5             	lb		r5,charToPrint
   3500 0000D9C2 61 D5                   	sw		r5,[r6]
   3501 0000D9C4 34 AE                   	jmp		pc7
                                        
                                        	; control character (non-printable)
   3504 0000D9C6                        pc4
   3505 0000D9C6 FE 4F 10 10             	cmp		r1,#' '
   3506 0000D9CA 01 A5                   	bgeu	pc11
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 63
noc_boot11.asm
   3507 0000D9CC 30 AE                   	jmp		pc7
                                        
                                        
                                        	; some other character
                                        	; put the character to the screen, then advance cursor
   3512 0000D9CE                        pc11
   3513 0000D9CE 01 40 00 C1             	sb		r1,charToPrint
   3514 0000D9D2 0B 40 0F 11             	lw		r1,#$BF
   3515 0000D9D6 01 40 01 C1             	sb		r1,charToPrint+1
   3516 0000D9DA 00 42 00 14             	lw		r4,#TXTSCR
   3517 0000D9DE 00 40 0D F5             	lw		r5,pos
   3518 0000D9E2 81 35                   	shl		r5,#1		; pos * 2
   3519 0000D9E4 50 24                   	add		r4,r5		; scr[pos]
   3520 0000D9E6 01 40 01 F5             	lw		r5,charToPrint
   3521 0000D9EA 41 D5                   	sw		r5,[r4]		; = char
                                        	; advance cursor
   3523 0000D9EC 00 40 0D F5             	lw		r5,pos
   3524 0000D9F0 00 40 0F E1             	lb		r1,txtWidth
   3525 0000D9F4 FE 61                   	sub		r1,r1,#2
   3526 0000D9F6 0B E4                   	lb		r4,cursx
   3527 0000D9F8 1D 24                   	cmp		r4,r1		; would we be at end of line ?
   3528 0000D9FA 14 A6                   	bleu	pc8
   3529 0000D9FC 42 25                   	sub		r5,r4		; pos -= cursx
   3530 0000D9FE 00 40 0C D5             	sh		r5,pos
   3531 0000DA02 0B C0                   	sb		r0,cursx	; cursor.x = 0
   3532 0000DA04 0A E4                   	lb		r4,cursy
   3533 0000DA06 00 40 0E E1             	lb		r1,txtHeight
   3534 0000DA0A FE 61                   	sub		r1,r1,#2
   3535 0000DA0C 1D 24                   	cmp		r4,r1		; at last line of screen ?
   3536 0000DA0E 02 A6                   	bleu	pc9
   3537 0000DA10 FF BF                   	call	scrollScreenUp	; yes, scroll
   3538 0000DA12 0D AE                   	br		pc7
   3539 0000DA14                        pc9
   3540 0000DA14 01 64                   	add		r4,r4,#1	; cursor.y++
   3541 0000DA16 0A C4                   	sb		r4,cursy
   3542 0000DA18 00 40 0F E1             	lb		r1,txtWidth
   3543 0000DA1C 10 25                   	add		r5,r1		; pos += txtWidth
   3544 0000DA1E 00 40 0D D5             	sw		r5,pos
   3545 0000DA22 05 AE                   	br		pc7
   3546 0000DA24                        pc8						; not at EOL
   3547 0000DA24 01 64                   	add		r4,r4,#1	; cursor.x++
   3548 0000DA26 0B C4                   	sb		r4,cursx
   3549 0000DA28 01 65                   	add		r5,r5,#1	; pos++
   3550 0000DA2A 00 40 0D D5             	sw		r5,pos
                                        
   3552 0000DA2E                        pc7
   3553 0000DA2E A2 4D 0E E1             	lb		r1,cursFlash	; flash or don't flash the cursor
   3554 0000DA32 6E BF                   	call	flashCursor
   3555 0000DA34 E1 FF                   	lw		lr,[sp]
   3556 0000DA36 E3 F4                   	lw		r4,2[sp]
   3557 0000DA38 E5 F5                   	lw		r5,4[sp]
   3558 0000DA3A E7 F6                   	lw		r6,6[sp]
   3559 0000DA3C 08 6E                   	add		sp,sp,#8
   3560 0000DA3E F0 80                   	ret
                                        
   3562 0000DA40                        irq_rout:
   3563 0000DA40 FE 6E                   	add		sp,sp,#-2
   3564 0000DA42 E1 D1                   	sw		r1,[sp]
   3565 0000DA44 48 4B 08 E1             	lb		r1,UART_X+UART_IS
   3566 0000DA48 10 10                   	cmp		r1,#0
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 64
noc_boot11.asm
   3567 0000DA4A 13 AB                   	bpl		notUartXIrq
   3568 0000DA4C 01 40 5C 31             	and		r1,#$1C
   3569 0000DA50 1C 10                   	cmp		r1,#$04
   3570 0000DA52 03 A9                   	bne		notRcvXIrq
   3571 0000DA54 4A 4B 08 E1             	lb		r1,UART_X+UART_TRB	; this should clear the Rx IRQ
                                        	sb		UartxRcvFifo
   3573 0000DA58 17 AE                   	bra		xitIrq
   3574 0000DA5A                        notRcvXIrq:
   3575 0000DA5A FF 4F 14 10             	cmp		r1,#$0C
   3576 0000DA5E FF B9                   	bne		notTxXIrq
   3577 0000DA60 A6 4D 00 E1             	lb		r1,UartxTxFifoCount
   3578 0000DA64 10 10                   	cmp		r1,#0
   3579 0000DA66 10 A8                   	beq		xitIrq
   3580 0000DA68 A6 4D 08 E1             	lb		r1,UartxTxFifo
   3581 0000DA6C 4D 4B 08 C1             	sb		r1,UART_X+UART_TRB
   3582 0000DA70 0B AE                   	bra		xitIrq
   3583 0000DA72                        notUartXIrq:
   3584 0000DA72 4E 4B 04 E1             	lb		r1,UART_Y+UART_IS
   3585 0000DA76 10 10                   	cmp		r1,#0
   3586 0000DA78 07 AB                   	bpl		notUartYIrq
   3587 0000DA7A 01 40 5C 31             	and		r1,#$1C
   3588 0000DA7E 1C 10                   	cmp		r1,#$04
   3589 0000DA80 FF B9                   	bne		notRcvYIrq
   3590 0000DA82 50 4B 04 E1             	lb		r1,UART_Y+UART_TRB	; this should clear the Rx IRQ
                                        	sb		UartyRcvFifo
   3592 0000DA86 00 AE                   	bra		xitIrq
   3593 0000DA88                        notUartYIrq:
   3594 0000DA88                        xitIrq:
   3595 0000DA88 E1 F1                   	lw		r1,[sp]
   3596 0000DA8A 02 6E                   	add		sp,sp,#2
   3597 0000DA8C                        	iret
   3598 0000DA8C                        		
   3599 0000DA8C 42 75 74 74 65 72 66    	db	"Butterfly Grid Computer Starting",0
   3599 0000DA93 6C 79 20 47 72 69 64  
   3599 0000DA9A 20 43 6F 6D 70 75 74  
   3599 0000DAA1 65 72 20 53 74 61 72  
   3599 0000DAA8 74 69 6E 67 00        
                                        
   3601 0000DAAD                        txtctrl_dat:
   3602 0000DAAD 34 1F 34 00 10 00 07    	db	52,31,52,0,16,0,7,$22,$1F,$E0,31,0,0,3,0
   3602 0000DAB4 22 1F E0 1F 00 00 03  
   3602 0000DABB 00                    
                                        
                                        	; Table of offsets of start of video line in video
                                        	; memory assuming 56 chars per line.
   3606 0000DABC                        lineTbl:
   3607 0000DABC 00 00 70 00 E0 00 50    	dw	0,112,224,336,448,560,672,784
   3607 0000DAC3 01 C0 01 30 02 A0 02  
   3607 0000DACA 10 03                 
   3608 0000DACC 80 03 F0 03 60 04 D0    	dw	896,1008,1120,1232,1344,1456,1568,1680
   3608 0000DAD3 04 40 05 B0 05 20 06  
   3608 0000DADA 90 06                 
   3609 0000DADC 00 07 0C 07 7C 07 EC    	dw	1792,1804,1916,2028,2140,2252,2364,2476
   3609 0000DAE3 07 5C 08 CC 08 3C 09  
   3609 0000DAEA AC 09                 
   3610 0000DAEC 1C 0A 8C 0A FC 0A 6C    	dw	2588,2700,2812,2924,3036,3148,3260,3372
   3610 0000DAF3 0B DC 0B 4C 0C BC 0C  
   3610 0000DAFA 2C 0D                 
                                        
   3612 0000DAFC FF FF FF FF FF FF FF    		org		0xFFFE
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 65
noc_boot11.asm
   3612 0000DB03 FF FF FF FF FF FF FF  
   3612 0000DB0A FF FF FF FF FF FF FF  
   3612 0000DB11 FF FF FF FF FF FF FF  
   3612 0000DB18 FF FF FF FF FF FF FF  
   3612 0000DB1F FF FF FF FF FF FF FF  
   3612 0000DB26 FF FF FF FF FF FF FF  
   3612 0000DB2D FF FF FF FF FF FF FF  
   3612 0000DB34 FF FF FF FF FF FF FF  
   3612 0000DB3B FF FF FF FF FF FF FF  
   3612 0000DB42 FF FF FF FF FF FF FF  
   3612 0000DB49 FF FF FF FF FF FF FF  
   3612 0000DB50 FF FF FF FF FF FF FF  
   3612 0000DB57 FF FF FF FF FF FF FF  
   3612 0000DB5E FF FF FF FF FF FF FF  
   3612 0000DB65 FF FF FF FF FF FF FF  
   3612 0000DB6C FF FF FF FF FF FF FF  
   3612 0000DB73 FF FF FF FF FF FF FF  
   3612 0000DB7A FF FF FF FF FF FF FF  
   3612 0000DB81 FF FF FF FF FF FF FF  
   3612 0000DB88 FF FF FF FF FF FF FF  
   3612 0000DB8F FF FF FF FF FF FF FF  
   3612 0000DB96 FF FF FF FF FF FF FF  
   3612 0000DB9D FF FF FF FF FF FF FF  
   3612 0000DBA4 FF FF FF FF FF FF FF  
   3612 0000DBAB FF FF FF FF FF FF FF  
   3612 0000DBB2 FF FF FF FF FF FF FF  
   3612 0000DBB9 FF FF FF FF FF FF FF  
   3612 0000DBC0 FF FF FF FF FF FF FF  
   3612 0000DBC7 FF FF FF FF FF FF FF  
   3612 0000DBCE FF FF FF FF FF FF FF  
   3612 0000DBD5 FF FF FF FF FF FF FF  
   3612 0000DBDC FF FF FF FF FF FF FF  
   3612 0000DBE3 FF FF FF FF FF FF FF  
   3612 0000DBEA FF FF FF FF FF FF FF  
   3612 0000DBF1 FF FF FF FF FF FF FF  
   3612 0000DBF8 FF FF FF FF FF FF FF  
   3612 0000DBFF FF FF FF FF FF FF FF  
   3612 0000DC06 FF FF FF FF FF FF FF  
   3612 0000DC0D FF FF FF FF FF FF FF  
   3612 0000DC14 FF FF FF FF FF FF FF  
   3612 0000DC1B FF FF FF FF FF FF FF  
   3612 0000DC22 FF FF FF FF FF FF FF  
   3612 0000DC29 FF FF FF FF FF FF FF  
   3612 0000DC30 FF FF FF FF FF FF FF  
   3612 0000DC37 FF FF FF FF FF FF FF  
   3612 0000DC3E FF FF FF FF FF FF FF  
   3612 0000DC45 FF FF FF FF FF FF FF  
   3612 0000DC4C FF FF FF FF FF FF FF  
   3612 0000DC53 FF FF FF FF FF FF FF  
   3612 0000DC5A FF FF FF FF FF FF FF  
   3612 0000DC61 FF FF FF FF FF FF FF  
   3612 0000DC68 FF FF FF FF FF FF FF  
   3612 0000DC6F FF FF FF FF FF FF FF  
   3612 0000DC76 FF FF FF FF FF FF FF  
   3612 0000DC7D FF FF FF FF FF FF FF  
   3612 0000DC84 FF FF FF FF FF FF FF  
   3612 0000DC8B FF FF FF FF FF FF FF  
   3612 0000DC92 FF FF FF FF FF FF FF  
   3612 0000DC99 FF FF FF FF FF FF FF  
   3612 0000DCA0 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 66
noc_boot11.asm
   3612 0000DCA7 FF FF FF FF FF FF FF  
   3612 0000DCAE FF FF FF FF FF FF FF  
   3612 0000DCB5 FF FF FF FF FF FF FF  
   3612 0000DCBC FF FF FF FF FF FF FF  
   3612 0000DCC3 FF FF FF FF FF FF FF  
   3612 0000DCCA FF FF FF FF FF FF FF  
   3612 0000DCD1 FF FF FF FF FF FF FF  
   3612 0000DCD8 FF FF FF FF FF FF FF  
   3612 0000DCDF FF FF FF FF FF FF FF  
   3612 0000DCE6 FF FF FF FF FF FF FF  
   3612 0000DCED FF FF FF FF FF FF FF  
   3612 0000DCF4 FF FF FF FF FF FF FF  
   3612 0000DCFB FF FF FF FF FF FF FF  
   3612 0000DD02 FF FF FF FF FF FF FF  
   3612 0000DD09 FF FF FF FF FF FF FF  
   3612 0000DD10 FF FF FF FF FF FF FF  
   3612 0000DD17 FF FF FF FF FF FF FF  
   3612 0000DD1E FF FF FF FF FF FF FF  
   3612 0000DD25 FF FF FF FF FF FF FF  
   3612 0000DD2C FF FF FF FF FF FF FF  
   3612 0000DD33 FF FF FF FF FF FF FF  
   3612 0000DD3A FF FF FF FF FF FF FF  
   3612 0000DD41 FF FF FF FF FF FF FF  
   3612 0000DD48 FF FF FF FF FF FF FF  
   3612 0000DD4F FF FF FF FF FF FF FF  
   3612 0000DD56 FF FF FF FF FF FF FF  
   3612 0000DD5D FF FF FF FF FF FF FF  
   3612 0000DD64 FF FF FF FF FF FF FF  
   3612 0000DD6B FF FF FF FF FF FF FF  
   3612 0000DD72 FF FF FF FF FF FF FF  
   3612 0000DD79 FF FF FF FF FF FF FF  
   3612 0000DD80 FF FF FF FF FF FF FF  
   3612 0000DD87 FF FF FF FF FF FF FF  
   3612 0000DD8E FF FF FF FF FF FF FF  
   3612 0000DD95 FF FF FF FF FF FF FF  
   3612 0000DD9C FF FF FF FF FF FF FF  
   3612 0000DDA3 FF FF FF FF FF FF FF  
   3612 0000DDAA FF FF FF FF FF FF FF  
   3612 0000DDB1 FF FF FF FF FF FF FF  
   3612 0000DDB8 FF FF FF FF FF FF FF  
   3612 0000DDBF FF FF FF FF FF FF FF  
   3612 0000DDC6 FF FF FF FF FF FF FF  
   3612 0000DDCD FF FF FF FF FF FF FF  
   3612 0000DDD4 FF FF FF FF FF FF FF  
   3612 0000DDDB FF FF FF FF FF FF FF  
   3612 0000DDE2 FF FF FF FF FF FF FF  
   3612 0000DDE9 FF FF FF FF FF FF FF  
   3612 0000DDF0 FF FF FF FF FF FF FF  
   3612 0000DDF7 FF FF FF FF FF FF FF  
   3612 0000DDFE FF FF FF FF FF FF FF  
   3612 0000DE05 FF FF FF FF FF FF FF  
   3612 0000DE0C FF FF FF FF FF FF FF  
   3612 0000DE13 FF FF FF FF FF FF FF  
   3612 0000DE1A FF FF FF FF FF FF FF  
   3612 0000DE21 FF FF FF FF FF FF FF  
   3612 0000DE28 FF FF FF FF FF FF FF  
   3612 0000DE2F FF FF FF FF FF FF FF  
   3612 0000DE36 FF FF FF FF FF FF FF  
   3612 0000DE3D FF FF FF FF FF FF FF  
   3612 0000DE44 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 67
noc_boot11.asm
   3612 0000DE4B FF FF FF FF FF FF FF  
   3612 0000DE52 FF FF FF FF FF FF FF  
   3612 0000DE59 FF FF FF FF FF FF FF  
   3612 0000DE60 FF FF FF FF FF FF FF  
   3612 0000DE67 FF FF FF FF FF FF FF  
   3612 0000DE6E FF FF FF FF FF FF FF  
   3612 0000DE75 FF FF FF FF FF FF FF  
   3612 0000DE7C FF FF FF FF FF FF FF  
   3612 0000DE83 FF FF FF FF FF FF FF  
   3612 0000DE8A FF FF FF FF FF FF FF  
   3612 0000DE91 FF FF FF FF FF FF FF  
   3612 0000DE98 FF FF FF FF FF FF FF  
   3612 0000DE9F FF FF FF FF FF FF FF  
   3612 0000DEA6 FF FF FF FF FF FF FF  
   3612 0000DEAD FF FF FF FF FF FF FF  
   3612 0000DEB4 FF FF FF FF FF FF FF  
   3612 0000DEBB FF FF FF FF FF FF FF  
   3612 0000DEC2 FF FF FF FF FF FF FF  
   3612 0000DEC9 FF FF FF FF FF FF FF  
   3612 0000DED0 FF FF FF FF FF FF FF  
   3612 0000DED7 FF FF FF FF FF FF FF  
   3612 0000DEDE FF FF FF FF FF FF FF  
   3612 0000DEE5 FF FF FF FF FF FF FF  
   3612 0000DEEC FF FF FF FF FF FF FF  
   3612 0000DEF3 FF FF FF FF FF FF FF  
   3612 0000DEFA FF FF FF FF FF FF FF  
   3612 0000DF01 FF FF FF FF FF FF FF  
   3612 0000DF08 FF FF FF FF FF FF FF  
   3612 0000DF0F FF FF FF FF FF FF FF  
   3612 0000DF16 FF FF FF FF FF FF FF  
   3612 0000DF1D FF FF FF FF FF FF FF  
   3612 0000DF24 FF FF FF FF FF FF FF  
   3612 0000DF2B FF FF FF FF FF FF FF  
   3612 0000DF32 FF FF FF FF FF FF FF  
   3612 0000DF39 FF FF FF FF FF FF FF  
   3612 0000DF40 FF FF FF FF FF FF FF  
   3612 0000DF47 FF FF FF FF FF FF FF  
   3612 0000DF4E FF FF FF FF FF FF FF  
   3612 0000DF55 FF FF FF FF FF FF FF  
   3612 0000DF5C FF FF FF FF FF FF FF  
   3612 0000DF63 FF FF FF FF FF FF FF  
   3612 0000DF6A FF FF FF FF FF FF FF  
   3612 0000DF71 FF FF FF FF FF FF FF  
   3612 0000DF78 FF FF FF FF FF FF FF  
   3612 0000DF7F FF FF FF FF FF FF FF  
   3612 0000DF86 FF FF FF FF FF FF FF  
   3612 0000DF8D FF FF FF FF FF FF FF  
   3612 0000DF94 FF FF FF FF FF FF FF  
   3612 0000DF9B FF FF FF FF FF FF FF  
   3612 0000DFA2 FF FF FF FF FF FF FF  
   3612 0000DFA9 FF FF FF FF FF FF FF  
   3612 0000DFB0 FF FF FF FF FF FF FF  
   3612 0000DFB7 FF FF FF FF FF FF FF  
   3612 0000DFBE FF FF FF FF FF FF FF  
   3612 0000DFC5 FF FF FF FF FF FF FF  
   3612 0000DFCC FF FF FF FF FF FF FF  
   3612 0000DFD3 FF FF FF FF FF FF FF  
   3612 0000DFDA FF FF FF FF FF FF FF  
   3612 0000DFE1 FF FF FF FF FF FF FF  
   3612 0000DFE8 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 68
noc_boot11.asm
   3612 0000DFEF FF FF FF FF FF FF FF  
   3612 0000DFF6 FF FF FF FF FF FF FF  
   3612 0000DFFD FF FF FF FF FF FF FF  
   3612 0000E004 FF FF FF FF FF FF FF  
   3612 0000E00B FF FF FF FF FF FF FF  
   3612 0000E012 FF FF FF FF FF FF FF  
   3612 0000E019 FF FF FF FF FF FF FF  
   3612 0000E020 FF FF FF FF FF FF FF  
   3612 0000E027 FF FF FF FF FF FF FF  
   3612 0000E02E FF FF FF FF FF FF FF  
   3612 0000E035 FF FF FF FF FF FF FF  
   3612 0000E03C FF FF FF FF FF FF FF  
   3612 0000E043 FF FF FF FF FF FF FF  
   3612 0000E04A FF FF FF FF FF FF FF  
   3612 0000E051 FF FF FF FF FF FF FF  
   3612 0000E058 FF FF FF FF FF FF FF  
   3612 0000E05F FF FF FF FF FF FF FF  
   3612 0000E066 FF FF FF FF FF FF FF  
   3612 0000E06D FF FF FF FF FF FF FF  
   3612 0000E074 FF FF FF FF FF FF FF  
   3612 0000E07B FF FF FF FF FF FF FF  
   3612 0000E082 FF FF FF FF FF FF FF  
   3612 0000E089 FF FF FF FF FF FF FF  
   3612 0000E090 FF FF FF FF FF FF FF  
   3612 0000E097 FF FF FF FF FF FF FF  
   3612 0000E09E FF FF FF FF FF FF FF  
   3612 0000E0A5 FF FF FF FF FF FF FF  
   3612 0000E0AC FF FF FF FF FF FF FF  
   3612 0000E0B3 FF FF FF FF FF FF FF  
   3612 0000E0BA FF FF FF FF FF FF FF  
   3612 0000E0C1 FF FF FF FF FF FF FF  
   3612 0000E0C8 FF FF FF FF FF FF FF  
   3612 0000E0CF FF FF FF FF FF FF FF  
   3612 0000E0D6 FF FF FF FF FF FF FF  
   3612 0000E0DD FF FF FF FF FF FF FF  
   3612 0000E0E4 FF FF FF FF FF FF FF  
   3612 0000E0EB FF FF FF FF FF FF FF  
   3612 0000E0F2 FF FF FF FF FF FF FF  
   3612 0000E0F9 FF FF FF FF FF FF FF  
   3612 0000E100 FF FF FF FF FF FF FF  
   3612 0000E107 FF FF FF FF FF FF FF  
   3612 0000E10E FF FF FF FF FF FF FF  
   3612 0000E115 FF FF FF FF FF FF FF  
   3612 0000E11C FF FF FF FF FF FF FF  
   3612 0000E123 FF FF FF FF FF FF FF  
   3612 0000E12A FF FF FF FF FF FF FF  
   3612 0000E131 FF FF FF FF FF FF FF  
   3612 0000E138 FF FF FF FF FF FF FF  
   3612 0000E13F FF FF FF FF FF FF FF  
   3612 0000E146 FF FF FF FF FF FF FF  
   3612 0000E14D FF FF FF FF FF FF FF  
   3612 0000E154 FF FF FF FF FF FF FF  
   3612 0000E15B FF FF FF FF FF FF FF  
   3612 0000E162 FF FF FF FF FF FF FF  
   3612 0000E169 FF FF FF FF FF FF FF  
   3612 0000E170 FF FF FF FF FF FF FF  
   3612 0000E177 FF FF FF FF FF FF FF  
   3612 0000E17E FF FF FF FF FF FF FF  
   3612 0000E185 FF FF FF FF FF FF FF  
   3612 0000E18C FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 69
noc_boot11.asm
   3612 0000E193 FF FF FF FF FF FF FF  
   3612 0000E19A FF FF FF FF FF FF FF  
   3612 0000E1A1 FF FF FF FF FF FF FF  
   3612 0000E1A8 FF FF FF FF FF FF FF  
   3612 0000E1AF FF FF FF FF FF FF FF  
   3612 0000E1B6 FF FF FF FF FF FF FF  
   3612 0000E1BD FF FF FF FF FF FF FF  
   3612 0000E1C4 FF FF FF FF FF FF FF  
   3612 0000E1CB FF FF FF FF FF FF FF  
   3612 0000E1D2 FF FF FF FF FF FF FF  
   3612 0000E1D9 FF FF FF FF FF FF FF  
   3612 0000E1E0 FF FF FF FF FF FF FF  
   3612 0000E1E7 FF FF FF FF FF FF FF  
   3612 0000E1EE FF FF FF FF FF FF FF  
   3612 0000E1F5 FF FF FF FF FF FF FF  
   3612 0000E1FC FF FF FF FF FF FF FF  
   3612 0000E203 FF FF FF FF FF FF FF  
   3612 0000E20A FF FF FF FF FF FF FF  
   3612 0000E211 FF FF FF FF FF FF FF  
   3612 0000E218 FF FF FF FF FF FF FF  
   3612 0000E21F FF FF FF FF FF FF FF  
   3612 0000E226 FF FF FF FF FF FF FF  
   3612 0000E22D FF FF FF FF FF FF FF  
   3612 0000E234 FF FF FF FF FF FF FF  
   3612 0000E23B FF FF FF FF FF FF FF  
   3612 0000E242 FF FF FF FF FF FF FF  
   3612 0000E249 FF FF FF FF FF FF FF  
   3612 0000E250 FF FF FF FF FF FF FF  
   3612 0000E257 FF FF FF FF FF FF FF  
   3612 0000E25E FF FF FF FF FF FF FF  
   3612 0000E265 FF FF FF FF FF FF FF  
   3612 0000E26C FF FF FF FF FF FF FF  
   3612 0000E273 FF FF FF FF FF FF FF  
   3612 0000E27A FF FF FF FF FF FF FF  
   3612 0000E281 FF FF FF FF FF FF FF  
   3612 0000E288 FF FF FF FF FF FF FF  
   3612 0000E28F FF FF FF FF FF FF FF  
   3612 0000E296 FF FF FF FF FF FF FF  
   3612 0000E29D FF FF FF FF FF FF FF  
   3612 0000E2A4 FF FF FF FF FF FF FF  
   3612 0000E2AB FF FF FF FF FF FF FF  
   3612 0000E2B2 FF FF FF FF FF FF FF  
   3612 0000E2B9 FF FF FF FF FF FF FF  
   3612 0000E2C0 FF FF FF FF FF FF FF  
   3612 0000E2C7 FF FF FF FF FF FF FF  
   3612 0000E2CE FF FF FF FF FF FF FF  
   3612 0000E2D5 FF FF FF FF FF FF FF  
   3612 0000E2DC FF FF FF FF FF FF FF  
   3612 0000E2E3 FF FF FF FF FF FF FF  
   3612 0000E2EA FF FF FF FF FF FF FF  
   3612 0000E2F1 FF FF FF FF FF FF FF  
   3612 0000E2F8 FF FF FF FF FF FF FF  
   3612 0000E2FF FF FF FF FF FF FF FF  
   3612 0000E306 FF FF FF FF FF FF FF  
   3612 0000E30D FF FF FF FF FF FF FF  
   3612 0000E314 FF FF FF FF FF FF FF  
   3612 0000E31B FF FF FF FF FF FF FF  
   3612 0000E322 FF FF FF FF FF FF FF  
   3612 0000E329 FF FF FF FF FF FF FF  
   3612 0000E330 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 70
noc_boot11.asm
   3612 0000E337 FF FF FF FF FF FF FF  
   3612 0000E33E FF FF FF FF FF FF FF  
   3612 0000E345 FF FF FF FF FF FF FF  
   3612 0000E34C FF FF FF FF FF FF FF  
   3612 0000E353 FF FF FF FF FF FF FF  
   3612 0000E35A FF FF FF FF FF FF FF  
   3612 0000E361 FF FF FF FF FF FF FF  
   3612 0000E368 FF FF FF FF FF FF FF  
   3612 0000E36F FF FF FF FF FF FF FF  
   3612 0000E376 FF FF FF FF FF FF FF  
   3612 0000E37D FF FF FF FF FF FF FF  
   3612 0000E384 FF FF FF FF FF FF FF  
   3612 0000E38B FF FF FF FF FF FF FF  
   3612 0000E392 FF FF FF FF FF FF FF  
   3612 0000E399 FF FF FF FF FF FF FF  
   3612 0000E3A0 FF FF FF FF FF FF FF  
   3612 0000E3A7 FF FF FF FF FF FF FF  
   3612 0000E3AE FF FF FF FF FF FF FF  
   3612 0000E3B5 FF FF FF FF FF FF FF  
   3612 0000E3BC FF FF FF FF FF FF FF  
   3612 0000E3C3 FF FF FF FF FF FF FF  
   3612 0000E3CA FF FF FF FF FF FF FF  
   3612 0000E3D1 FF FF FF FF FF FF FF  
   3612 0000E3D8 FF FF FF FF FF FF FF  
   3612 0000E3DF FF FF FF FF FF FF FF  
   3612 0000E3E6 FF FF FF FF FF FF FF  
   3612 0000E3ED FF FF FF FF FF FF FF  
   3612 0000E3F4 FF FF FF FF FF FF FF  
   3612 0000E3FB FF FF FF FF FF FF FF  
   3612 0000E402 FF FF FF FF FF FF FF  
   3612 0000E409 FF FF FF FF FF FF FF  
   3612 0000E410 FF FF FF FF FF FF FF  
   3612 0000E417 FF FF FF FF FF FF FF  
   3612 0000E41E FF FF FF FF FF FF FF  
   3612 0000E425 FF FF FF FF FF FF FF  
   3612 0000E42C FF FF FF FF FF FF FF  
   3612 0000E433 FF FF FF FF FF FF FF  
   3612 0000E43A FF FF FF FF FF FF FF  
   3612 0000E441 FF FF FF FF FF FF FF  
   3612 0000E448 FF FF FF FF FF FF FF  
   3612 0000E44F FF FF FF FF FF FF FF  
   3612 0000E456 FF FF FF FF FF FF FF  
   3612 0000E45D FF FF FF FF FF FF FF  
   3612 0000E464 FF FF FF FF FF FF FF  
   3612 0000E46B FF FF FF FF FF FF FF  
   3612 0000E472 FF FF FF FF FF FF FF  
   3612 0000E479 FF FF FF FF FF FF FF  
   3612 0000E480 FF FF FF FF FF FF FF  
   3612 0000E487 FF FF FF FF FF FF FF  
   3612 0000E48E FF FF FF FF FF FF FF  
   3612 0000E495 FF FF FF FF FF FF FF  
   3612 0000E49C FF FF FF FF FF FF FF  
   3612 0000E4A3 FF FF FF FF FF FF FF  
   3612 0000E4AA FF FF FF FF FF FF FF  
   3612 0000E4B1 FF FF FF FF FF FF FF  
   3612 0000E4B8 FF FF FF FF FF FF FF  
   3612 0000E4BF FF FF FF FF FF FF FF  
   3612 0000E4C6 FF FF FF FF FF FF FF  
   3612 0000E4CD FF FF FF FF FF FF FF  
   3612 0000E4D4 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 71
noc_boot11.asm
   3612 0000E4DB FF FF FF FF FF FF FF  
   3612 0000E4E2 FF FF FF FF FF FF FF  
   3612 0000E4E9 FF FF FF FF FF FF FF  
   3612 0000E4F0 FF FF FF FF FF FF FF  
   3612 0000E4F7 FF FF FF FF FF FF FF  
   3612 0000E4FE FF FF FF FF FF FF FF  
   3612 0000E505 FF FF FF FF FF FF FF  
   3612 0000E50C FF FF FF FF FF FF FF  
   3612 0000E513 FF FF FF FF FF FF FF  
   3612 0000E51A FF FF FF FF FF FF FF  
   3612 0000E521 FF FF FF FF FF FF FF  
   3612 0000E528 FF FF FF FF FF FF FF  
   3612 0000E52F FF FF FF FF FF FF FF  
   3612 0000E536 FF FF FF FF FF FF FF  
   3612 0000E53D FF FF FF FF FF FF FF  
   3612 0000E544 FF FF FF FF FF FF FF  
   3612 0000E54B FF FF FF FF FF FF FF  
   3612 0000E552 FF FF FF FF FF FF FF  
   3612 0000E559 FF FF FF FF FF FF FF  
   3612 0000E560 FF FF FF FF FF FF FF  
   3612 0000E567 FF FF FF FF FF FF FF  
   3612 0000E56E FF FF FF FF FF FF FF  
   3612 0000E575 FF FF FF FF FF FF FF  
   3612 0000E57C FF FF FF FF FF FF FF  
   3612 0000E583 FF FF FF FF FF FF FF  
   3612 0000E58A FF FF FF FF FF FF FF  
   3612 0000E591 FF FF FF FF FF FF FF  
   3612 0000E598 FF FF FF FF FF FF FF  
   3612 0000E59F FF FF FF FF FF FF FF  
   3612 0000E5A6 FF FF FF FF FF FF FF  
   3612 0000E5AD FF FF FF FF FF FF FF  
   3612 0000E5B4 FF FF FF FF FF FF FF  
   3612 0000E5BB FF FF FF FF FF FF FF  
   3612 0000E5C2 FF FF FF FF FF FF FF  
   3612 0000E5C9 FF FF FF FF FF FF FF  
   3612 0000E5D0 FF FF FF FF FF FF FF  
   3612 0000E5D7 FF FF FF FF FF FF FF  
   3612 0000E5DE FF FF FF FF FF FF FF  
   3612 0000E5E5 FF FF FF FF FF FF FF  
   3612 0000E5EC FF FF FF FF FF FF FF  
   3612 0000E5F3 FF FF FF FF FF FF FF  
   3612 0000E5FA FF FF FF FF FF FF FF  
   3612 0000E601 FF FF FF FF FF FF FF  
   3612 0000E608 FF FF FF FF FF FF FF  
   3612 0000E60F FF FF FF FF FF FF FF  
   3612 0000E616 FF FF FF FF FF FF FF  
   3612 0000E61D FF FF FF FF FF FF FF  
   3612 0000E624 FF FF FF FF FF FF FF  
   3612 0000E62B FF FF FF FF FF FF FF  
   3612 0000E632 FF FF FF FF FF FF FF  
   3612 0000E639 FF FF FF FF FF FF FF  
   3612 0000E640 FF FF FF FF FF FF FF  
   3612 0000E647 FF FF FF FF FF FF FF  
   3612 0000E64E FF FF FF FF FF FF FF  
   3612 0000E655 FF FF FF FF FF FF FF  
   3612 0000E65C FF FF FF FF FF FF FF  
   3612 0000E663 FF FF FF FF FF FF FF  
   3612 0000E66A FF FF FF FF FF FF FF  
   3612 0000E671 FF FF FF FF FF FF FF  
   3612 0000E678 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 72
noc_boot11.asm
   3612 0000E67F FF FF FF FF FF FF FF  
   3612 0000E686 FF FF FF FF FF FF FF  
   3612 0000E68D FF FF FF FF FF FF FF  
   3612 0000E694 FF FF FF FF FF FF FF  
   3612 0000E69B FF FF FF FF FF FF FF  
   3612 0000E6A2 FF FF FF FF FF FF FF  
   3612 0000E6A9 FF FF FF FF FF FF FF  
   3612 0000E6B0 FF FF FF FF FF FF FF  
   3612 0000E6B7 FF FF FF FF FF FF FF  
   3612 0000E6BE FF FF FF FF FF FF FF  
   3612 0000E6C5 FF FF FF FF FF FF FF  
   3612 0000E6CC FF FF FF FF FF FF FF  
   3612 0000E6D3 FF FF FF FF FF FF FF  
   3612 0000E6DA FF FF FF FF FF FF FF  
   3612 0000E6E1 FF FF FF FF FF FF FF  
   3612 0000E6E8 FF FF FF FF FF FF FF  
   3612 0000E6EF FF FF FF FF FF FF FF  
   3612 0000E6F6 FF FF FF FF FF FF FF  
   3612 0000E6FD FF FF FF FF FF FF FF  
   3612 0000E704 FF FF FF FF FF FF FF  
   3612 0000E70B FF FF FF FF FF FF FF  
   3612 0000E712 FF FF FF FF FF FF FF  
   3612 0000E719 FF FF FF FF FF FF FF  
   3612 0000E720 FF FF FF FF FF FF FF  
   3612 0000E727 FF FF FF FF FF FF FF  
   3612 0000E72E FF FF FF FF FF FF FF  
   3612 0000E735 FF FF FF FF FF FF FF  
   3612 0000E73C FF FF FF FF FF FF FF  
   3612 0000E743 FF FF FF FF FF FF FF  
   3612 0000E74A FF FF FF FF FF FF FF  
   3612 0000E751 FF FF FF FF FF FF FF  
   3612 0000E758 FF FF FF FF FF FF FF  
   3612 0000E75F FF FF FF FF FF FF FF  
   3612 0000E766 FF FF FF FF FF FF FF  
   3612 0000E76D FF FF FF FF FF FF FF  
   3612 0000E774 FF FF FF FF FF FF FF  
   3612 0000E77B FF FF FF FF FF FF FF  
   3612 0000E782 FF FF FF FF FF FF FF  
   3612 0000E789 FF FF FF FF FF FF FF  
   3612 0000E790 FF FF FF FF FF FF FF  
   3612 0000E797 FF FF FF FF FF FF FF  
   3612 0000E79E FF FF FF FF FF FF FF  
   3612 0000E7A5 FF FF FF FF FF FF FF  
   3612 0000E7AC FF FF FF FF FF FF FF  
   3612 0000E7B3 FF FF FF FF FF FF FF  
   3612 0000E7BA FF FF FF FF FF FF FF  
   3612 0000E7C1 FF FF FF FF FF FF FF  
   3612 0000E7C8 FF FF FF FF FF FF FF  
   3612 0000E7CF FF FF FF FF FF FF FF  
   3612 0000E7D6 FF FF FF FF FF FF FF  
   3612 0000E7DD FF FF FF FF FF FF FF  
   3612 0000E7E4 FF FF FF FF FF FF FF  
   3612 0000E7EB FF FF FF FF FF FF FF  
   3612 0000E7F2 FF FF FF FF FF FF FF  
   3612 0000E7F9 FF FF FF FF FF FF FF  
   3612 0000E800 FF FF FF FF FF FF FF  
   3612 0000E807 FF FF FF FF FF FF FF  
   3612 0000E80E FF FF FF FF FF FF FF  
   3612 0000E815 FF FF FF FF FF FF FF  
   3612 0000E81C FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 73
noc_boot11.asm
   3612 0000E823 FF FF FF FF FF FF FF  
   3612 0000E82A FF FF FF FF FF FF FF  
   3612 0000E831 FF FF FF FF FF FF FF  
   3612 0000E838 FF FF FF FF FF FF FF  
   3612 0000E83F FF FF FF FF FF FF FF  
   3612 0000E846 FF FF FF FF FF FF FF  
   3612 0000E84D FF FF FF FF FF FF FF  
   3612 0000E854 FF FF FF FF FF FF FF  
   3612 0000E85B FF FF FF FF FF FF FF  
   3612 0000E862 FF FF FF FF FF FF FF  
   3612 0000E869 FF FF FF FF FF FF FF  
   3612 0000E870 FF FF FF FF FF FF FF  
   3612 0000E877 FF FF FF FF FF FF FF  
   3612 0000E87E FF FF FF FF FF FF FF  
   3612 0000E885 FF FF FF FF FF FF FF  
   3612 0000E88C FF FF FF FF FF FF FF  
   3612 0000E893 FF FF FF FF FF FF FF  
   3612 0000E89A FF FF FF FF FF FF FF  
   3612 0000E8A1 FF FF FF FF FF FF FF  
   3612 0000E8A8 FF FF FF FF FF FF FF  
   3612 0000E8AF FF FF FF FF FF FF FF  
   3612 0000E8B6 FF FF FF FF FF FF FF  
   3612 0000E8BD FF FF FF FF FF FF FF  
   3612 0000E8C4 FF FF FF FF FF FF FF  
   3612 0000E8CB FF FF FF FF FF FF FF  
   3612 0000E8D2 FF FF FF FF FF FF FF  
   3612 0000E8D9 FF FF FF FF FF FF FF  
   3612 0000E8E0 FF FF FF FF FF FF FF  
   3612 0000E8E7 FF FF FF FF FF FF FF  
   3612 0000E8EE FF FF FF FF FF FF FF  
   3612 0000E8F5 FF FF FF FF FF FF FF  
   3612 0000E8FC FF FF FF FF FF FF FF  
   3612 0000E903 FF FF FF FF FF FF FF  
   3612 0000E90A FF FF FF FF FF FF FF  
   3612 0000E911 FF FF FF FF FF FF FF  
   3612 0000E918 FF FF FF FF FF FF FF  
   3612 0000E91F FF FF FF FF FF FF FF  
   3612 0000E926 FF FF FF FF FF FF FF  
   3612 0000E92D FF FF FF FF FF FF FF  
   3612 0000E934 FF FF FF FF FF FF FF  
   3612 0000E93B FF FF FF FF FF FF FF  
   3612 0000E942 FF FF FF FF FF FF FF  
   3612 0000E949 FF FF FF FF FF FF FF  
   3612 0000E950 FF FF FF FF FF FF FF  
   3612 0000E957 FF FF FF FF FF FF FF  
   3612 0000E95E FF FF FF FF FF FF FF  
   3612 0000E965 FF FF FF FF FF FF FF  
   3612 0000E96C FF FF FF FF FF FF FF  
   3612 0000E973 FF FF FF FF FF FF FF  
   3612 0000E97A FF FF FF FF FF FF FF  
   3612 0000E981 FF FF FF FF FF FF FF  
   3612 0000E988 FF FF FF FF FF FF FF  
   3612 0000E98F FF FF FF FF FF FF FF  
   3612 0000E996 FF FF FF FF FF FF FF  
   3612 0000E99D FF FF FF FF FF FF FF  
   3612 0000E9A4 FF FF FF FF FF FF FF  
   3612 0000E9AB FF FF FF FF FF FF FF  
   3612 0000E9B2 FF FF FF FF FF FF FF  
   3612 0000E9B9 FF FF FF FF FF FF FF  
   3612 0000E9C0 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 74
noc_boot11.asm
   3612 0000E9C7 FF FF FF FF FF FF FF  
   3612 0000E9CE FF FF FF FF FF FF FF  
   3612 0000E9D5 FF FF FF FF FF FF FF  
   3612 0000E9DC FF FF FF FF FF FF FF  
   3612 0000E9E3 FF FF FF FF FF FF FF  
   3612 0000E9EA FF FF FF FF FF FF FF  
   3612 0000E9F1 FF FF FF FF FF FF FF  
   3612 0000E9F8 FF FF FF FF FF FF FF  
   3612 0000E9FF FF FF FF FF FF FF FF  
   3612 0000EA06 FF FF FF FF FF FF FF  
   3612 0000EA0D FF FF FF FF FF FF FF  
   3612 0000EA14 FF FF FF FF FF FF FF  
   3612 0000EA1B FF FF FF FF FF FF FF  
   3612 0000EA22 FF FF FF FF FF FF FF  
   3612 0000EA29 FF FF FF FF FF FF FF  
   3612 0000EA30 FF FF FF FF FF FF FF  
   3612 0000EA37 FF FF FF FF FF FF FF  
   3612 0000EA3E FF FF FF FF FF FF FF  
   3612 0000EA45 FF FF FF FF FF FF FF  
   3612 0000EA4C FF FF FF FF FF FF FF  
   3612 0000EA53 FF FF FF FF FF FF FF  
   3612 0000EA5A FF FF FF FF FF FF FF  
   3612 0000EA61 FF FF FF FF FF FF FF  
   3612 0000EA68 FF FF FF FF FF FF FF  
   3612 0000EA6F FF FF FF FF FF FF FF  
   3612 0000EA76 FF FF FF FF FF FF FF  
   3612 0000EA7D FF FF FF FF FF FF FF  
   3612 0000EA84 FF FF FF FF FF FF FF  
   3612 0000EA8B FF FF FF FF FF FF FF  
   3612 0000EA92 FF FF FF FF FF FF FF  
   3612 0000EA99 FF FF FF FF FF FF FF  
   3612 0000EAA0 FF FF FF FF FF FF FF  
   3612 0000EAA7 FF FF FF FF FF FF FF  
   3612 0000EAAE FF FF FF FF FF FF FF  
   3612 0000EAB5 FF FF FF FF FF FF FF  
   3612 0000EABC FF FF FF FF FF FF FF  
   3612 0000EAC3 FF FF FF FF FF FF FF  
   3612 0000EACA FF FF FF FF FF FF FF  
   3612 0000EAD1 FF FF FF FF FF FF FF  
   3612 0000EAD8 FF FF FF FF FF FF FF  
   3612 0000EADF FF FF FF FF FF FF FF  
   3612 0000EAE6 FF FF FF FF FF FF FF  
   3612 0000EAED FF FF FF FF FF FF FF  
   3612 0000EAF4 FF FF FF FF FF FF FF  
   3612 0000EAFB FF FF FF FF FF FF FF  
   3612 0000EB02 FF FF FF FF FF FF FF  
   3612 0000EB09 FF FF FF FF FF FF FF  
   3612 0000EB10 FF FF FF FF FF FF FF  
   3612 0000EB17 FF FF FF FF FF FF FF  
   3612 0000EB1E FF FF FF FF FF FF FF  
   3612 0000EB25 FF FF FF FF FF FF FF  
   3612 0000EB2C FF FF FF FF FF FF FF  
   3612 0000EB33 FF FF FF FF FF FF FF  
   3612 0000EB3A FF FF FF FF FF FF FF  
   3612 0000EB41 FF FF FF FF FF FF FF  
   3612 0000EB48 FF FF FF FF FF FF FF  
   3612 0000EB4F FF FF FF FF FF FF FF  
   3612 0000EB56 FF FF FF FF FF FF FF  
   3612 0000EB5D FF FF FF FF FF FF FF  
   3612 0000EB64 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 75
noc_boot11.asm
   3612 0000EB6B FF FF FF FF FF FF FF  
   3612 0000EB72 FF FF FF FF FF FF FF  
   3612 0000EB79 FF FF FF FF FF FF FF  
   3612 0000EB80 FF FF FF FF FF FF FF  
   3612 0000EB87 FF FF FF FF FF FF FF  
   3612 0000EB8E FF FF FF FF FF FF FF  
   3612 0000EB95 FF FF FF FF FF FF FF  
   3612 0000EB9C FF FF FF FF FF FF FF  
   3612 0000EBA3 FF FF FF FF FF FF FF  
   3612 0000EBAA FF FF FF FF FF FF FF  
   3612 0000EBB1 FF FF FF FF FF FF FF  
   3612 0000EBB8 FF FF FF FF FF FF FF  
   3612 0000EBBF FF FF FF FF FF FF FF  
   3612 0000EBC6 FF FF FF FF FF FF FF  
   3612 0000EBCD FF FF FF FF FF FF FF  
   3612 0000EBD4 FF FF FF FF FF FF FF  
   3612 0000EBDB FF FF FF FF FF FF FF  
   3612 0000EBE2 FF FF FF FF FF FF FF  
   3612 0000EBE9 FF FF FF FF FF FF FF  
   3612 0000EBF0 FF FF FF FF FF FF FF  
   3612 0000EBF7 FF FF FF FF FF FF FF  
   3612 0000EBFE FF FF FF FF FF FF FF  
   3612 0000EC05 FF FF FF FF FF FF FF  
   3612 0000EC0C FF FF FF FF FF FF FF  
   3612 0000EC13 FF FF FF FF FF FF FF  
   3612 0000EC1A FF FF FF FF FF FF FF  
   3612 0000EC21 FF FF FF FF FF FF FF  
   3612 0000EC28 FF FF FF FF FF FF FF  
   3612 0000EC2F FF FF FF FF FF FF FF  
   3612 0000EC36 FF FF FF FF FF FF FF  
   3612 0000EC3D FF FF FF FF FF FF FF  
   3612 0000EC44 FF FF FF FF FF FF FF  
   3612 0000EC4B FF FF FF FF FF FF FF  
   3612 0000EC52 FF FF FF FF FF FF FF  
   3612 0000EC59 FF FF FF FF FF FF FF  
   3612 0000EC60 FF FF FF FF FF FF FF  
   3612 0000EC67 FF FF FF FF FF FF FF  
   3612 0000EC6E FF FF FF FF FF FF FF  
   3612 0000EC75 FF FF FF FF FF FF FF  
   3612 0000EC7C FF FF FF FF FF FF FF  
   3612 0000EC83 FF FF FF FF FF FF FF  
   3612 0000EC8A FF FF FF FF FF FF FF  
   3612 0000EC91 FF FF FF FF FF FF FF  
   3612 0000EC98 FF FF FF FF FF FF FF  
   3612 0000EC9F FF FF FF FF FF FF FF  
   3612 0000ECA6 FF FF FF FF FF FF FF  
   3612 0000ECAD FF FF FF FF FF FF FF  
   3612 0000ECB4 FF FF FF FF FF FF FF  
   3612 0000ECBB FF FF FF FF FF FF FF  
   3612 0000ECC2 FF FF FF FF FF FF FF  
   3612 0000ECC9 FF FF FF FF FF FF FF  
   3612 0000ECD0 FF FF FF FF FF FF FF  
   3612 0000ECD7 FF FF FF FF FF FF FF  
   3612 0000ECDE FF FF FF FF FF FF FF  
   3612 0000ECE5 FF FF FF FF FF FF FF  
   3612 0000ECEC FF FF FF FF FF FF FF  
   3612 0000ECF3 FF FF FF FF FF FF FF  
   3612 0000ECFA FF FF FF FF FF FF FF  
   3612 0000ED01 FF FF FF FF FF FF FF  
   3612 0000ED08 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 76
noc_boot11.asm
   3612 0000ED0F FF FF FF FF FF FF FF  
   3612 0000ED16 FF FF FF FF FF FF FF  
   3612 0000ED1D FF FF FF FF FF FF FF  
   3612 0000ED24 FF FF FF FF FF FF FF  
   3612 0000ED2B FF FF FF FF FF FF FF  
   3612 0000ED32 FF FF FF FF FF FF FF  
   3612 0000ED39 FF FF FF FF FF FF FF  
   3612 0000ED40 FF FF FF FF FF FF FF  
   3612 0000ED47 FF FF FF FF FF FF FF  
   3612 0000ED4E FF FF FF FF FF FF FF  
   3612 0000ED55 FF FF FF FF FF FF FF  
   3612 0000ED5C FF FF FF FF FF FF FF  
   3612 0000ED63 FF FF FF FF FF FF FF  
   3612 0000ED6A FF FF FF FF FF FF FF  
   3612 0000ED71 FF FF FF FF FF FF FF  
   3612 0000ED78 FF FF FF FF FF FF FF  
   3612 0000ED7F FF FF FF FF FF FF FF  
   3612 0000ED86 FF FF FF FF FF FF FF  
   3612 0000ED8D FF FF FF FF FF FF FF  
   3612 0000ED94 FF FF FF FF FF FF FF  
   3612 0000ED9B FF FF FF FF FF FF FF  
   3612 0000EDA2 FF FF FF FF FF FF FF  
   3612 0000EDA9 FF FF FF FF FF FF FF  
   3612 0000EDB0 FF FF FF FF FF FF FF  
   3612 0000EDB7 FF FF FF FF FF FF FF  
   3612 0000EDBE FF FF FF FF FF FF FF  
   3612 0000EDC5 FF FF FF FF FF FF FF  
   3612 0000EDCC FF FF FF FF FF FF FF  
   3612 0000EDD3 FF FF FF FF FF FF FF  
   3612 0000EDDA FF FF FF FF FF FF FF  
   3612 0000EDE1 FF FF FF FF FF FF FF  
   3612 0000EDE8 FF FF FF FF FF FF FF  
   3612 0000EDEF FF FF FF FF FF FF FF  
   3612 0000EDF6 FF FF FF FF FF FF FF  
   3612 0000EDFD FF FF FF FF FF FF FF  
   3612 0000EE04 FF FF FF FF FF FF FF  
   3612 0000EE0B FF FF FF FF FF FF FF  
   3612 0000EE12 FF FF FF FF FF FF FF  
   3612 0000EE19 FF FF FF FF FF FF FF  
   3612 0000EE20 FF FF FF FF FF FF FF  
   3612 0000EE27 FF FF FF FF FF FF FF  
   3612 0000EE2E FF FF FF FF FF FF FF  
   3612 0000EE35 FF FF FF FF FF FF FF  
   3612 0000EE3C FF FF FF FF FF FF FF  
   3612 0000EE43 FF FF FF FF FF FF FF  
   3612 0000EE4A FF FF FF FF FF FF FF  
   3612 0000EE51 FF FF FF FF FF FF FF  
   3612 0000EE58 FF FF FF FF FF FF FF  
   3612 0000EE5F FF FF FF FF FF FF FF  
   3612 0000EE66 FF FF FF FF FF FF FF  
   3612 0000EE6D FF FF FF FF FF FF FF  
   3612 0000EE74 FF FF FF FF FF FF FF  
   3612 0000EE7B FF FF FF FF FF FF FF  
   3612 0000EE82 FF FF FF FF FF FF FF  
   3612 0000EE89 FF FF FF FF FF FF FF  
   3612 0000EE90 FF FF FF FF FF FF FF  
   3612 0000EE97 FF FF FF FF FF FF FF  
   3612 0000EE9E FF FF FF FF FF FF FF  
   3612 0000EEA5 FF FF FF FF FF FF FF  
   3612 0000EEAC FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 77
noc_boot11.asm
   3612 0000EEB3 FF FF FF FF FF FF FF  
   3612 0000EEBA FF FF FF FF FF FF FF  
   3612 0000EEC1 FF FF FF FF FF FF FF  
   3612 0000EEC8 FF FF FF FF FF FF FF  
   3612 0000EECF FF FF FF FF FF FF FF  
   3612 0000EED6 FF FF FF FF FF FF FF  
   3612 0000EEDD FF FF FF FF FF FF FF  
   3612 0000EEE4 FF FF FF FF FF FF FF  
   3612 0000EEEB FF FF FF FF FF FF FF  
   3612 0000EEF2 FF FF FF FF FF FF FF  
   3612 0000EEF9 FF FF FF FF FF FF FF  
   3612 0000EF00 FF FF FF FF FF FF FF  
   3612 0000EF07 FF FF FF FF FF FF FF  
   3612 0000EF0E FF FF FF FF FF FF FF  
   3612 0000EF15 FF FF FF FF FF FF FF  
   3612 0000EF1C FF FF FF FF FF FF FF  
   3612 0000EF23 FF FF FF FF FF FF FF  
   3612 0000EF2A FF FF FF FF FF FF FF  
   3612 0000EF31 FF FF FF FF FF FF FF  
   3612 0000EF38 FF FF FF FF FF FF FF  
   3612 0000EF3F FF FF FF FF FF FF FF  
   3612 0000EF46 FF FF FF FF FF FF FF  
   3612 0000EF4D FF FF FF FF FF FF FF  
   3612 0000EF54 FF FF FF FF FF FF FF  
   3612 0000EF5B FF FF FF FF FF FF FF  
   3612 0000EF62 FF FF FF FF FF FF FF  
   3612 0000EF69 FF FF FF FF FF FF FF  
   3612 0000EF70 FF FF FF FF FF FF FF  
   3612 0000EF77 FF FF FF FF FF FF FF  
   3612 0000EF7E FF FF FF FF FF FF FF  
   3612 0000EF85 FF FF FF FF FF FF FF  
   3612 0000EF8C FF FF FF FF FF FF FF  
   3612 0000EF93 FF FF FF FF FF FF FF  
   3612 0000EF9A FF FF FF FF FF FF FF  
   3612 0000EFA1 FF FF FF FF FF FF FF  
   3612 0000EFA8 FF FF FF FF FF FF FF  
   3612 0000EFAF FF FF FF FF FF FF FF  
   3612 0000EFB6 FF FF FF FF FF FF FF  
   3612 0000EFBD FF FF FF FF FF FF FF  
   3612 0000EFC4 FF FF FF FF FF FF FF  
   3612 0000EFCB FF FF FF FF FF FF FF  
   3612 0000EFD2 FF FF FF FF FF FF FF  
   3612 0000EFD9 FF FF FF FF FF FF FF  
   3612 0000EFE0 FF FF FF FF FF FF FF  
   3612 0000EFE7 FF FF FF FF FF FF FF  
   3612 0000EFEE FF FF FF FF FF FF FF  
   3612 0000EFF5 FF FF FF FF FF FF FF  
   3612 0000EFFC FF FF FF FF FF FF FF  
   3612 0000F003 FF FF FF FF FF FF FF  
   3612 0000F00A FF FF FF FF FF FF FF  
   3612 0000F011 FF FF FF FF FF FF FF  
   3612 0000F018 FF FF FF FF FF FF FF  
   3612 0000F01F FF FF FF FF FF FF FF  
   3612 0000F026 FF FF FF FF FF FF FF  
   3612 0000F02D FF FF FF FF FF FF FF  
   3612 0000F034 FF FF FF FF FF FF FF  
   3612 0000F03B FF FF FF FF FF FF FF  
   3612 0000F042 FF FF FF FF FF FF FF  
   3612 0000F049 FF FF FF FF FF FF FF  
   3612 0000F050 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 78
noc_boot11.asm
   3612 0000F057 FF FF FF FF FF FF FF  
   3612 0000F05E FF FF FF FF FF FF FF  
   3612 0000F065 FF FF FF FF FF FF FF  
   3612 0000F06C FF FF FF FF FF FF FF  
   3612 0000F073 FF FF FF FF FF FF FF  
   3612 0000F07A FF FF FF FF FF FF FF  
   3612 0000F081 FF FF FF FF FF FF FF  
   3612 0000F088 FF FF FF FF FF FF FF  
   3612 0000F08F FF FF FF FF FF FF FF  
   3612 0000F096 FF FF FF FF FF FF FF  
   3612 0000F09D FF FF FF FF FF FF FF  
   3612 0000F0A4 FF FF FF FF FF FF FF  
   3612 0000F0AB FF FF FF FF FF FF FF  
   3612 0000F0B2 FF FF FF FF FF FF FF  
   3612 0000F0B9 FF FF FF FF FF FF FF  
   3612 0000F0C0 FF FF FF FF FF FF FF  
   3612 0000F0C7 FF FF FF FF FF FF FF  
   3612 0000F0CE FF FF FF FF FF FF FF  
   3612 0000F0D5 FF FF FF FF FF FF FF  
   3612 0000F0DC FF FF FF FF FF FF FF  
   3612 0000F0E3 FF FF FF FF FF FF FF  
   3612 0000F0EA FF FF FF FF FF FF FF  
   3612 0000F0F1 FF FF FF FF FF FF FF  
   3612 0000F0F8 FF FF FF FF FF FF FF  
   3612 0000F0FF FF FF FF FF FF FF FF  
   3612 0000F106 FF FF FF FF FF FF FF  
   3612 0000F10D FF FF FF FF FF FF FF  
   3612 0000F114 FF FF FF FF FF FF FF  
   3612 0000F11B FF FF FF FF FF FF FF  
   3612 0000F122 FF FF FF FF FF FF FF  
   3612 0000F129 FF FF FF FF FF FF FF  
   3612 0000F130 FF FF FF FF FF FF FF  
   3612 0000F137 FF FF FF FF FF FF FF  
   3612 0000F13E FF FF FF FF FF FF FF  
   3612 0000F145 FF FF FF FF FF FF FF  
   3612 0000F14C FF FF FF FF FF FF FF  
   3612 0000F153 FF FF FF FF FF FF FF  
   3612 0000F15A FF FF FF FF FF FF FF  
   3612 0000F161 FF FF FF FF FF FF FF  
   3612 0000F168 FF FF FF FF FF FF FF  
   3612 0000F16F FF FF FF FF FF FF FF  
   3612 0000F176 FF FF FF FF FF FF FF  
   3612 0000F17D FF FF FF FF FF FF FF  
   3612 0000F184 FF FF FF FF FF FF FF  
   3612 0000F18B FF FF FF FF FF FF FF  
   3612 0000F192 FF FF FF FF FF FF FF  
   3612 0000F199 FF FF FF FF FF FF FF  
   3612 0000F1A0 FF FF FF FF FF FF FF  
   3612 0000F1A7 FF FF FF FF FF FF FF  
   3612 0000F1AE FF FF FF FF FF FF FF  
   3612 0000F1B5 FF FF FF FF FF FF FF  
   3612 0000F1BC FF FF FF FF FF FF FF  
   3612 0000F1C3 FF FF FF FF FF FF FF  
   3612 0000F1CA FF FF FF FF FF FF FF  
   3612 0000F1D1 FF FF FF FF FF FF FF  
   3612 0000F1D8 FF FF FF FF FF FF FF  
   3612 0000F1DF FF FF FF FF FF FF FF  
   3612 0000F1E6 FF FF FF FF FF FF FF  
   3612 0000F1ED FF FF FF FF FF FF FF  
   3612 0000F1F4 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 79
noc_boot11.asm
   3612 0000F1FB FF FF FF FF FF FF FF  
   3612 0000F202 FF FF FF FF FF FF FF  
   3612 0000F209 FF FF FF FF FF FF FF  
   3612 0000F210 FF FF FF FF FF FF FF  
   3612 0000F217 FF FF FF FF FF FF FF  
   3612 0000F21E FF FF FF FF FF FF FF  
   3612 0000F225 FF FF FF FF FF FF FF  
   3612 0000F22C FF FF FF FF FF FF FF  
   3612 0000F233 FF FF FF FF FF FF FF  
   3612 0000F23A FF FF FF FF FF FF FF  
   3612 0000F241 FF FF FF FF FF FF FF  
   3612 0000F248 FF FF FF FF FF FF FF  
   3612 0000F24F FF FF FF FF FF FF FF  
   3612 0000F256 FF FF FF FF FF FF FF  
   3612 0000F25D FF FF FF FF FF FF FF  
   3612 0000F264 FF FF FF FF FF FF FF  
   3612 0000F26B FF FF FF FF FF FF FF  
   3612 0000F272 FF FF FF FF FF FF FF  
   3612 0000F279 FF FF FF FF FF FF FF  
   3612 0000F280 FF FF FF FF FF FF FF  
   3612 0000F287 FF FF FF FF FF FF FF  
   3612 0000F28E FF FF FF FF FF FF FF  
   3612 0000F295 FF FF FF FF FF FF FF  
   3612 0000F29C FF FF FF FF FF FF FF  
   3612 0000F2A3 FF FF FF FF FF FF FF  
   3612 0000F2AA FF FF FF FF FF FF FF  
   3612 0000F2B1 FF FF FF FF FF FF FF  
   3612 0000F2B8 FF FF FF FF FF FF FF  
   3612 0000F2BF FF FF FF FF FF FF FF  
   3612 0000F2C6 FF FF FF FF FF FF FF  
   3612 0000F2CD FF FF FF FF FF FF FF  
   3612 0000F2D4 FF FF FF FF FF FF FF  
   3612 0000F2DB FF FF FF FF FF FF FF  
   3612 0000F2E2 FF FF FF FF FF FF FF  
   3612 0000F2E9 FF FF FF FF FF FF FF  
   3612 0000F2F0 FF FF FF FF FF FF FF  
   3612 0000F2F7 FF FF FF FF FF FF FF  
   3612 0000F2FE FF FF FF FF FF FF FF  
   3612 0000F305 FF FF FF FF FF FF FF  
   3612 0000F30C FF FF FF FF FF FF FF  
   3612 0000F313 FF FF FF FF FF FF FF  
   3612 0000F31A FF FF FF FF FF FF FF  
   3612 0000F321 FF FF FF FF FF FF FF  
   3612 0000F328 FF FF FF FF FF FF FF  
   3612 0000F32F FF FF FF FF FF FF FF  
   3612 0000F336 FF FF FF FF FF FF FF  
   3612 0000F33D FF FF FF FF FF FF FF  
   3612 0000F344 FF FF FF FF FF FF FF  
   3612 0000F34B FF FF FF FF FF FF FF  
   3612 0000F352 FF FF FF FF FF FF FF  
   3612 0000F359 FF FF FF FF FF FF FF  
   3612 0000F360 FF FF FF FF FF FF FF  
   3612 0000F367 FF FF FF FF FF FF FF  
   3612 0000F36E FF FF FF FF FF FF FF  
   3612 0000F375 FF FF FF FF FF FF FF  
   3612 0000F37C FF FF FF FF FF FF FF  
   3612 0000F383 FF FF FF FF FF FF FF  
   3612 0000F38A FF FF FF FF FF FF FF  
   3612 0000F391 FF FF FF FF FF FF FF  
   3612 0000F398 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 80
noc_boot11.asm
   3612 0000F39F FF FF FF FF FF FF FF  
   3612 0000F3A6 FF FF FF FF FF FF FF  
   3612 0000F3AD FF FF FF FF FF FF FF  
   3612 0000F3B4 FF FF FF FF FF FF FF  
   3612 0000F3BB FF FF FF FF FF FF FF  
   3612 0000F3C2 FF FF FF FF FF FF FF  
   3612 0000F3C9 FF FF FF FF FF FF FF  
   3612 0000F3D0 FF FF FF FF FF FF FF  
   3612 0000F3D7 FF FF FF FF FF FF FF  
   3612 0000F3DE FF FF FF FF FF FF FF  
   3612 0000F3E5 FF FF FF FF FF FF FF  
   3612 0000F3EC FF FF FF FF FF FF FF  
   3612 0000F3F3 FF FF FF FF FF FF FF  
   3612 0000F3FA FF FF FF FF FF FF FF  
   3612 0000F401 FF FF FF FF FF FF FF  
   3612 0000F408 FF FF FF FF FF FF FF  
   3612 0000F40F FF FF FF FF FF FF FF  
   3612 0000F416 FF FF FF FF FF FF FF  
   3612 0000F41D FF FF FF FF FF FF FF  
   3612 0000F424 FF FF FF FF FF FF FF  
   3612 0000F42B FF FF FF FF FF FF FF  
   3612 0000F432 FF FF FF FF FF FF FF  
   3612 0000F439 FF FF FF FF FF FF FF  
   3612 0000F440 FF FF FF FF FF FF FF  
   3612 0000F447 FF FF FF FF FF FF FF  
   3612 0000F44E FF FF FF FF FF FF FF  
   3612 0000F455 FF FF FF FF FF FF FF  
   3612 0000F45C FF FF FF FF FF FF FF  
   3612 0000F463 FF FF FF FF FF FF FF  
   3612 0000F46A FF FF FF FF FF FF FF  
   3612 0000F471 FF FF FF FF FF FF FF  
   3612 0000F478 FF FF FF FF FF FF FF  
   3612 0000F47F FF FF FF FF FF FF FF  
   3612 0000F486 FF FF FF FF FF FF FF  
   3612 0000F48D FF FF FF FF FF FF FF  
   3612 0000F494 FF FF FF FF FF FF FF  
   3612 0000F49B FF FF FF FF FF FF FF  
   3612 0000F4A2 FF FF FF FF FF FF FF  
   3612 0000F4A9 FF FF FF FF FF FF FF  
   3612 0000F4B0 FF FF FF FF FF FF FF  
   3612 0000F4B7 FF FF FF FF FF FF FF  
   3612 0000F4BE FF FF FF FF FF FF FF  
   3612 0000F4C5 FF FF FF FF FF FF FF  
   3612 0000F4CC FF FF FF FF FF FF FF  
   3612 0000F4D3 FF FF FF FF FF FF FF  
   3612 0000F4DA FF FF FF FF FF FF FF  
   3612 0000F4E1 FF FF FF FF FF FF FF  
   3612 0000F4E8 FF FF FF FF FF FF FF  
   3612 0000F4EF FF FF FF FF FF FF FF  
   3612 0000F4F6 FF FF FF FF FF FF FF  
   3612 0000F4FD FF FF FF FF FF FF FF  
   3612 0000F504 FF FF FF FF FF FF FF  
   3612 0000F50B FF FF FF FF FF FF FF  
   3612 0000F512 FF FF FF FF FF FF FF  
   3612 0000F519 FF FF FF FF FF FF FF  
   3612 0000F520 FF FF FF FF FF FF FF  
   3612 0000F527 FF FF FF FF FF FF FF  
   3612 0000F52E FF FF FF FF FF FF FF  
   3612 0000F535 FF FF FF FF FF FF FF  
   3612 0000F53C FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 81
noc_boot11.asm
   3612 0000F543 FF FF FF FF FF FF FF  
   3612 0000F54A FF FF FF FF FF FF FF  
   3612 0000F551 FF FF FF FF FF FF FF  
   3612 0000F558 FF FF FF FF FF FF FF  
   3612 0000F55F FF FF FF FF FF FF FF  
   3612 0000F566 FF FF FF FF FF FF FF  
   3612 0000F56D FF FF FF FF FF FF FF  
   3612 0000F574 FF FF FF FF FF FF FF  
   3612 0000F57B FF FF FF FF FF FF FF  
   3612 0000F582 FF FF FF FF FF FF FF  
   3612 0000F589 FF FF FF FF FF FF FF  
   3612 0000F590 FF FF FF FF FF FF FF  
   3612 0000F597 FF FF FF FF FF FF FF  
   3612 0000F59E FF FF FF FF FF FF FF  
   3612 0000F5A5 FF FF FF FF FF FF FF  
   3612 0000F5AC FF FF FF FF FF FF FF  
   3612 0000F5B3 FF FF FF FF FF FF FF  
   3612 0000F5BA FF FF FF FF FF FF FF  
   3612 0000F5C1 FF FF FF FF FF FF FF  
   3612 0000F5C8 FF FF FF FF FF FF FF  
   3612 0000F5CF FF FF FF FF FF FF FF  
   3612 0000F5D6 FF FF FF FF FF FF FF  
   3612 0000F5DD FF FF FF FF FF FF FF  
   3612 0000F5E4 FF FF FF FF FF FF FF  
   3612 0000F5EB FF FF FF FF FF FF FF  
   3612 0000F5F2 FF FF FF FF FF FF FF  
   3612 0000F5F9 FF FF FF FF FF FF FF  
   3612 0000F600 FF FF FF FF FF FF FF  
   3612 0000F607 FF FF FF FF FF FF FF  
   3612 0000F60E FF FF FF FF FF FF FF  
   3612 0000F615 FF FF FF FF FF FF FF  
   3612 0000F61C FF FF FF FF FF FF FF  
   3612 0000F623 FF FF FF FF FF FF FF  
   3612 0000F62A FF FF FF FF FF FF FF  
   3612 0000F631 FF FF FF FF FF FF FF  
   3612 0000F638 FF FF FF FF FF FF FF  
   3612 0000F63F FF FF FF FF FF FF FF  
   3612 0000F646 FF FF FF FF FF FF FF  
   3612 0000F64D FF FF FF FF FF FF FF  
   3612 0000F654 FF FF FF FF FF FF FF  
   3612 0000F65B FF FF FF FF FF FF FF  
   3612 0000F662 FF FF FF FF FF FF FF  
   3612 0000F669 FF FF FF FF FF FF FF  
   3612 0000F670 FF FF FF FF FF FF FF  
   3612 0000F677 FF FF FF FF FF FF FF  
   3612 0000F67E FF FF FF FF FF FF FF  
   3612 0000F685 FF FF FF FF FF FF FF  
   3612 0000F68C FF FF FF FF FF FF FF  
   3612 0000F693 FF FF FF FF FF FF FF  
   3612 0000F69A FF FF FF FF FF FF FF  
   3612 0000F6A1 FF FF FF FF FF FF FF  
   3612 0000F6A8 FF FF FF FF FF FF FF  
   3612 0000F6AF FF FF FF FF FF FF FF  
   3612 0000F6B6 FF FF FF FF FF FF FF  
   3612 0000F6BD FF FF FF FF FF FF FF  
   3612 0000F6C4 FF FF FF FF FF FF FF  
   3612 0000F6CB FF FF FF FF FF FF FF  
   3612 0000F6D2 FF FF FF FF FF FF FF  
   3612 0000F6D9 FF FF FF FF FF FF FF  
   3612 0000F6E0 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 82
noc_boot11.asm
   3612 0000F6E7 FF FF FF FF FF FF FF  
   3612 0000F6EE FF FF FF FF FF FF FF  
   3612 0000F6F5 FF FF FF FF FF FF FF  
   3612 0000F6FC FF FF FF FF FF FF FF  
   3612 0000F703 FF FF FF FF FF FF FF  
   3612 0000F70A FF FF FF FF FF FF FF  
   3612 0000F711 FF FF FF FF FF FF FF  
   3612 0000F718 FF FF FF FF FF FF FF  
   3612 0000F71F FF FF FF FF FF FF FF  
   3612 0000F726 FF FF FF FF FF FF FF  
   3612 0000F72D FF FF FF FF FF FF FF  
   3612 0000F734 FF FF FF FF FF FF FF  
   3612 0000F73B FF FF FF FF FF FF FF  
   3612 0000F742 FF FF FF FF FF FF FF  
   3612 0000F749 FF FF FF FF FF FF FF  
   3612 0000F750 FF FF FF FF FF FF FF  
   3612 0000F757 FF FF FF FF FF FF FF  
   3612 0000F75E FF FF FF FF FF FF FF  
   3612 0000F765 FF FF FF FF FF FF FF  
   3612 0000F76C FF FF FF FF FF FF FF  
   3612 0000F773 FF FF FF FF FF FF FF  
   3612 0000F77A FF FF FF FF FF FF FF  
   3612 0000F781 FF FF FF FF FF FF FF  
   3612 0000F788 FF FF FF FF FF FF FF  
   3612 0000F78F FF FF FF FF FF FF FF  
   3612 0000F796 FF FF FF FF FF FF FF  
   3612 0000F79D FF FF FF FF FF FF FF  
   3612 0000F7A4 FF FF FF FF FF FF FF  
   3612 0000F7AB FF FF FF FF FF FF FF  
   3612 0000F7B2 FF FF FF FF FF FF FF  
   3612 0000F7B9 FF FF FF FF FF FF FF  
   3612 0000F7C0 FF FF FF FF FF FF FF  
   3612 0000F7C7 FF FF FF FF FF FF FF  
   3612 0000F7CE FF FF FF FF FF FF FF  
   3612 0000F7D5 FF FF FF FF FF FF FF  
   3612 0000F7DC FF FF FF FF FF FF FF  
   3612 0000F7E3 FF FF FF FF FF FF FF  
   3612 0000F7EA FF FF FF FF FF FF FF  
   3612 0000F7F1 FF FF FF FF FF FF FF  
   3612 0000F7F8 FF FF FF FF FF FF FF  
   3612 0000F7FF FF FF FF FF FF FF FF  
   3612 0000F806 FF FF FF FF FF FF FF  
   3612 0000F80D FF FF FF FF FF FF FF  
   3612 0000F814 FF FF FF FF FF FF FF  
   3612 0000F81B FF FF FF FF FF FF FF  
   3612 0000F822 FF FF FF FF FF FF FF  
   3612 0000F829 FF FF FF FF FF FF FF  
   3612 0000F830 FF FF FF FF FF FF FF  
   3612 0000F837 FF FF FF FF FF FF FF  
   3612 0000F83E FF FF FF FF FF FF FF  
   3612 0000F845 FF FF FF FF FF FF FF  
   3612 0000F84C FF FF FF FF FF FF FF  
   3612 0000F853 FF FF FF FF FF FF FF  
   3612 0000F85A FF FF FF FF FF FF FF  
   3612 0000F861 FF FF FF FF FF FF FF  
   3612 0000F868 FF FF FF FF FF FF FF  
   3612 0000F86F FF FF FF FF FF FF FF  
   3612 0000F876 FF FF FF FF FF FF FF  
   3612 0000F87D FF FF FF FF FF FF FF  
   3612 0000F884 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 83
noc_boot11.asm
   3612 0000F88B FF FF FF FF FF FF FF  
   3612 0000F892 FF FF FF FF FF FF FF  
   3612 0000F899 FF FF FF FF FF FF FF  
   3612 0000F8A0 FF FF FF FF FF FF FF  
   3612 0000F8A7 FF FF FF FF FF FF FF  
   3612 0000F8AE FF FF FF FF FF FF FF  
   3612 0000F8B5 FF FF FF FF FF FF FF  
   3612 0000F8BC FF FF FF FF FF FF FF  
   3612 0000F8C3 FF FF FF FF FF FF FF  
   3612 0000F8CA FF FF FF FF FF FF FF  
   3612 0000F8D1 FF FF FF FF FF FF FF  
   3612 0000F8D8 FF FF FF FF FF FF FF  
   3612 0000F8DF FF FF FF FF FF FF FF  
   3612 0000F8E6 FF FF FF FF FF FF FF  
   3612 0000F8ED FF FF FF FF FF FF FF  
   3612 0000F8F4 FF FF FF FF FF FF FF  
   3612 0000F8FB FF FF FF FF FF FF FF  
   3612 0000F902 FF FF FF FF FF FF FF  
   3612 0000F909 FF FF FF FF FF FF FF  
   3612 0000F910 FF FF FF FF FF FF FF  
   3612 0000F917 FF FF FF FF FF FF FF  
   3612 0000F91E FF FF FF FF FF FF FF  
   3612 0000F925 FF FF FF FF FF FF FF  
   3612 0000F92C FF FF FF FF FF FF FF  
   3612 0000F933 FF FF FF FF FF FF FF  
   3612 0000F93A FF FF FF FF FF FF FF  
   3612 0000F941 FF FF FF FF FF FF FF  
   3612 0000F948 FF FF FF FF FF FF FF  
   3612 0000F94F FF FF FF FF FF FF FF  
   3612 0000F956 FF FF FF FF FF FF FF  
   3612 0000F95D FF FF FF FF FF FF FF  
   3612 0000F964 FF FF FF FF FF FF FF  
   3612 0000F96B FF FF FF FF FF FF FF  
   3612 0000F972 FF FF FF FF FF FF FF  
   3612 0000F979 FF FF FF FF FF FF FF  
   3612 0000F980 FF FF FF FF FF FF FF  
   3612 0000F987 FF FF FF FF FF FF FF  
   3612 0000F98E FF FF FF FF FF FF FF  
   3612 0000F995 FF FF FF FF FF FF FF  
   3612 0000F99C FF FF FF FF FF FF FF  
   3612 0000F9A3 FF FF FF FF FF FF FF  
   3612 0000F9AA FF FF FF FF FF FF FF  
   3612 0000F9B1 FF FF FF FF FF FF FF  
   3612 0000F9B8 FF FF FF FF FF FF FF  
   3612 0000F9BF FF FF FF FF FF FF FF  
   3612 0000F9C6 FF FF FF FF FF FF FF  
   3612 0000F9CD FF FF FF FF FF FF FF  
   3612 0000F9D4 FF FF FF FF FF FF FF  
   3612 0000F9DB FF FF FF FF FF FF FF  
   3612 0000F9E2 FF FF FF FF FF FF FF  
   3612 0000F9E9 FF FF FF FF FF FF FF  
   3612 0000F9F0 FF FF FF FF FF FF FF  
   3612 0000F9F7 FF FF FF FF FF FF FF  
   3612 0000F9FE FF FF FF FF FF FF FF  
   3612 0000FA05 FF FF FF FF FF FF FF  
   3612 0000FA0C FF FF FF FF FF FF FF  
   3612 0000FA13 FF FF FF FF FF FF FF  
   3612 0000FA1A FF FF FF FF FF FF FF  
   3612 0000FA21 FF FF FF FF FF FF FF  
   3612 0000FA28 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 84
noc_boot11.asm
   3612 0000FA2F FF FF FF FF FF FF FF  
   3612 0000FA36 FF FF FF FF FF FF FF  
   3612 0000FA3D FF FF FF FF FF FF FF  
   3612 0000FA44 FF FF FF FF FF FF FF  
   3612 0000FA4B FF FF FF FF FF FF FF  
   3612 0000FA52 FF FF FF FF FF FF FF  
   3612 0000FA59 FF FF FF FF FF FF FF  
   3612 0000FA60 FF FF FF FF FF FF FF  
   3612 0000FA67 FF FF FF FF FF FF FF  
   3612 0000FA6E FF FF FF FF FF FF FF  
   3612 0000FA75 FF FF FF FF FF FF FF  
   3612 0000FA7C FF FF FF FF FF FF FF  
   3612 0000FA83 FF FF FF FF FF FF FF  
   3612 0000FA8A FF FF FF FF FF FF FF  
   3612 0000FA91 FF FF FF FF FF FF FF  
   3612 0000FA98 FF FF FF FF FF FF FF  
   3612 0000FA9F FF FF FF FF FF FF FF  
   3612 0000FAA6 FF FF FF FF FF FF FF  
   3612 0000FAAD FF FF FF FF FF FF FF  
   3612 0000FAB4 FF FF FF FF FF FF FF  
   3612 0000FABB FF FF FF FF FF FF FF  
   3612 0000FAC2 FF FF FF FF FF FF FF  
   3612 0000FAC9 FF FF FF FF FF FF FF  
   3612 0000FAD0 FF FF FF FF FF FF FF  
   3612 0000FAD7 FF FF FF FF FF FF FF  
   3612 0000FADE FF FF FF FF FF FF FF  
   3612 0000FAE5 FF FF FF FF FF FF FF  
   3612 0000FAEC FF FF FF FF FF FF FF  
   3612 0000FAF3 FF FF FF FF FF FF FF  
   3612 0000FAFA FF FF FF FF FF FF FF  
   3612 0000FB01 FF FF FF FF FF FF FF  
   3612 0000FB08 FF FF FF FF FF FF FF  
   3612 0000FB0F FF FF FF FF FF FF FF  
   3612 0000FB16 FF FF FF FF FF FF FF  
   3612 0000FB1D FF FF FF FF FF FF FF  
   3612 0000FB24 FF FF FF FF FF FF FF  
   3612 0000FB2B FF FF FF FF FF FF FF  
   3612 0000FB32 FF FF FF FF FF FF FF  
   3612 0000FB39 FF FF FF FF FF FF FF  
   3612 0000FB40 FF FF FF FF FF FF FF  
   3612 0000FB47 FF FF FF FF FF FF FF  
   3612 0000FB4E FF FF FF FF FF FF FF  
   3612 0000FB55 FF FF FF FF FF FF FF  
   3612 0000FB5C FF FF FF FF FF FF FF  
   3612 0000FB63 FF FF FF FF FF FF FF  
   3612 0000FB6A FF FF FF FF FF FF FF  
   3612 0000FB71 FF FF FF FF FF FF FF  
   3612 0000FB78 FF FF FF FF FF FF FF  
   3612 0000FB7F FF FF FF FF FF FF FF  
   3612 0000FB86 FF FF FF FF FF FF FF  
   3612 0000FB8D FF FF FF FF FF FF FF  
   3612 0000FB94 FF FF FF FF FF FF FF  
   3612 0000FB9B FF FF FF FF FF FF FF  
   3612 0000FBA2 FF FF FF FF FF FF FF  
   3612 0000FBA9 FF FF FF FF FF FF FF  
   3612 0000FBB0 FF FF FF FF FF FF FF  
   3612 0000FBB7 FF FF FF FF FF FF FF  
   3612 0000FBBE FF FF FF FF FF FF FF  
   3612 0000FBC5 FF FF FF FF FF FF FF  
   3612 0000FBCC FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 85
noc_boot11.asm
   3612 0000FBD3 FF FF FF FF FF FF FF  
   3612 0000FBDA FF FF FF FF FF FF FF  
   3612 0000FBE1 FF FF FF FF FF FF FF  
   3612 0000FBE8 FF FF FF FF FF FF FF  
   3612 0000FBEF FF FF FF FF FF FF FF  
   3612 0000FBF6 FF FF FF FF FF FF FF  
   3612 0000FBFD FF FF FF FF FF FF FF  
   3612 0000FC04 FF FF FF FF FF FF FF  
   3612 0000FC0B FF FF FF FF FF FF FF  
   3612 0000FC12 FF FF FF FF FF FF FF  
   3612 0000FC19 FF FF FF FF FF FF FF  
   3612 0000FC20 FF FF FF FF FF FF FF  
   3612 0000FC27 FF FF FF FF FF FF FF  
   3612 0000FC2E FF FF FF FF FF FF FF  
   3612 0000FC35 FF FF FF FF FF FF FF  
   3612 0000FC3C FF FF FF FF FF FF FF  
   3612 0000FC43 FF FF FF FF FF FF FF  
   3612 0000FC4A FF FF FF FF FF FF FF  
   3612 0000FC51 FF FF FF FF FF FF FF  
   3612 0000FC58 FF FF FF FF FF FF FF  
   3612 0000FC5F FF FF FF FF FF FF FF  
   3612 0000FC66 FF FF FF FF FF FF FF  
   3612 0000FC6D FF FF FF FF FF FF FF  
   3612 0000FC74 FF FF FF FF FF FF FF  
   3612 0000FC7B FF FF FF FF FF FF FF  
   3612 0000FC82 FF FF FF FF FF FF FF  
   3612 0000FC89 FF FF FF FF FF FF FF  
   3612 0000FC90 FF FF FF FF FF FF FF  
   3612 0000FC97 FF FF FF FF FF FF FF  
   3612 0000FC9E FF FF FF FF FF FF FF  
   3612 0000FCA5 FF FF FF FF FF FF FF  
   3612 0000FCAC FF FF FF FF FF FF FF  
   3612 0000FCB3 FF FF FF FF FF FF FF  
   3612 0000FCBA FF FF FF FF FF FF FF  
   3612 0000FCC1 FF FF FF FF FF FF FF  
   3612 0000FCC8 FF FF FF FF FF FF FF  
   3612 0000FCCF FF FF FF FF FF FF FF  
   3612 0000FCD6 FF FF FF FF FF FF FF  
   3612 0000FCDD FF FF FF FF FF FF FF  
   3612 0000FCE4 FF FF FF FF FF FF FF  
   3612 0000FCEB FF FF FF FF FF FF FF  
   3612 0000FCF2 FF FF FF FF FF FF FF  
   3612 0000FCF9 FF FF FF FF FF FF FF  
   3612 0000FD00 FF FF FF FF FF FF FF  
   3612 0000FD07 FF FF FF FF FF FF FF  
   3612 0000FD0E FF FF FF FF FF FF FF  
   3612 0000FD15 FF FF FF FF FF FF FF  
   3612 0000FD1C FF FF FF FF FF FF FF  
   3612 0000FD23 FF FF FF FF FF FF FF  
   3612 0000FD2A FF FF FF FF FF FF FF  
   3612 0000FD31 FF FF FF FF FF FF FF  
   3612 0000FD38 FF FF FF FF FF FF FF  
   3612 0000FD3F FF FF FF FF FF FF FF  
   3612 0000FD46 FF FF FF FF FF FF FF  
   3612 0000FD4D FF FF FF FF FF FF FF  
   3612 0000FD54 FF FF FF FF FF FF FF  
   3612 0000FD5B FF FF FF FF FF FF FF  
   3612 0000FD62 FF FF FF FF FF FF FF  
   3612 0000FD69 FF FF FF FF FF FF FF  
   3612 0000FD70 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 86
noc_boot11.asm
   3612 0000FD77 FF FF FF FF FF FF FF  
   3612 0000FD7E FF FF FF FF FF FF FF  
   3612 0000FD85 FF FF FF FF FF FF FF  
   3612 0000FD8C FF FF FF FF FF FF FF  
   3612 0000FD93 FF FF FF FF FF FF FF  
   3612 0000FD9A FF FF FF FF FF FF FF  
   3612 0000FDA1 FF FF FF FF FF FF FF  
   3612 0000FDA8 FF FF FF FF FF FF FF  
   3612 0000FDAF FF FF FF FF FF FF FF  
   3612 0000FDB6 FF FF FF FF FF FF FF  
   3612 0000FDBD FF FF FF FF FF FF FF  
   3612 0000FDC4 FF FF FF FF FF FF FF  
   3612 0000FDCB FF FF FF FF FF FF FF  
   3612 0000FDD2 FF FF FF FF FF FF FF  
   3612 0000FDD9 FF FF FF FF FF FF FF  
   3612 0000FDE0 FF FF FF FF FF FF FF  
   3612 0000FDE7 FF FF FF FF FF FF FF  
   3612 0000FDEE FF FF FF FF FF FF FF  
   3612 0000FDF5 FF FF FF FF FF FF FF  
   3612 0000FDFC FF FF FF FF FF FF FF  
   3612 0000FE03 FF FF FF FF FF FF FF  
   3612 0000FE0A FF FF FF FF FF FF FF  
   3612 0000FE11 FF FF FF FF FF FF FF  
   3612 0000FE18 FF FF FF FF FF FF FF  
   3612 0000FE1F FF FF FF FF FF FF FF  
   3612 0000FE26 FF FF FF FF FF FF FF  
   3612 0000FE2D FF FF FF FF FF FF FF  
   3612 0000FE34 FF FF FF FF FF FF FF  
   3612 0000FE3B FF FF FF FF FF FF FF  
   3612 0000FE42 FF FF FF FF FF FF FF  
   3612 0000FE49 FF FF FF FF FF FF FF  
   3612 0000FE50 FF FF FF FF FF FF FF  
   3612 0000FE57 FF FF FF FF FF FF FF  
   3612 0000FE5E FF FF FF FF FF FF FF  
   3612 0000FE65 FF FF FF FF FF FF FF  
   3612 0000FE6C FF FF FF FF FF FF FF  
   3612 0000FE73 FF FF FF FF FF FF FF  
   3612 0000FE7A FF FF FF FF FF FF FF  
   3612 0000FE81 FF FF FF FF FF FF FF  
   3612 0000FE88 FF FF FF FF FF FF FF  
   3612 0000FE8F FF FF FF FF FF FF FF  
   3612 0000FE96 FF FF FF FF FF FF FF  
   3612 0000FE9D FF FF FF FF FF FF FF  
   3612 0000FEA4 FF FF FF FF FF FF FF  
   3612 0000FEAB FF FF FF FF FF FF FF  
   3612 0000FEB2 FF FF FF FF FF FF FF  
   3612 0000FEB9 FF FF FF FF FF FF FF  
   3612 0000FEC0 FF FF FF FF FF FF FF  
   3612 0000FEC7 FF FF FF FF FF FF FF  
   3612 0000FECE FF FF FF FF FF FF FF  
   3612 0000FED5 FF FF FF FF FF FF FF  
   3612 0000FEDC FF FF FF FF FF FF FF  
   3612 0000FEE3 FF FF FF FF FF FF FF  
   3612 0000FEEA FF FF FF FF FF FF FF  
   3612 0000FEF1 FF FF FF FF FF FF FF  
   3612 0000FEF8 FF FF FF FF FF FF FF  
   3612 0000FEFF FF FF FF FF FF FF FF  
   3612 0000FF06 FF FF FF FF FF FF FF  
   3612 0000FF0D FF FF FF FF FF FF FF  
   3612 0000FF14 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Tue Jun 13 03:21:11 2017     Page 87
noc_boot11.asm
   3612 0000FF1B FF FF FF FF FF FF FF  
   3612 0000FF22 FF FF FF FF FF FF FF  
   3612 0000FF29 FF FF FF FF FF FF FF  
   3612 0000FF30 FF FF FF FF FF FF FF  
   3612 0000FF37 FF FF FF FF FF FF FF  
   3612 0000FF3E FF FF FF FF FF FF FF  
   3612 0000FF45 FF FF FF FF FF FF FF  
   3612 0000FF4C FF FF FF FF FF FF FF  
   3612 0000FF53 FF FF FF FF FF FF FF  
   3612 0000FF5A FF FF FF FF FF FF FF  
   3612 0000FF61 FF FF FF FF FF FF FF  
   3612 0000FF68 FF FF FF FF FF FF FF  
   3612 0000FF6F FF FF FF FF FF FF FF  
   3612 0000FF76 FF FF FF FF FF FF FF  
   3612 0000FF7D FF FF FF FF FF FF FF  
   3612 0000FF84 FF FF FF FF FF FF FF  
   3612 0000FF8B FF FF FF FF FF FF FF  
   3612 0000FF92 FF FF FF FF FF FF FF  
   3612 0000FF99 FF FF FF FF FF FF FF  
   3612 0000FFA0 FF FF FF FF FF FF FF  
   3612 0000FFA7 FF FF FF FF FF FF FF  
   3612 0000FFAE FF FF FF FF FF FF FF  
   3612 0000FFB5 FF FF FF FF FF FF FF  
   3612 0000FFBC FF FF FF FF FF FF FF  
   3612 0000FFC3 FF FF FF FF FF FF FF  
   3612 0000FFCA FF FF FF FF FF FF FF  
   3612 0000FFD1 FF FF FF FF FF FF FF  
   3612 0000FFD8 FF FF FF FF FF FF FF  
   3612 0000FFDF FF FF FF FF FF FF FF  
   3612 0000FFE6 FF FF FF FF FF FF FF  
   3612 0000FFED FF FF FF FF FF FF FF  
   3612 0000FFF4 FF FF FF FF FF FF FF  
   3612 0000FFFB FF FF FF              
   3613 0000FFFE 00 D8                   		dw		start
