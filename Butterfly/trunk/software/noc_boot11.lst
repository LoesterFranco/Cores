Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 1
noc_boot11.a

                                        ; ============================================================================
                                        ;        __
                                        ;   \\__/ o\    (C) 2017  Robert Finch, Waterloo
                                        ;    \  __ /    All rights reserved.
                                        ;     \/_//     robfinch<remove>@finitron.ca
                                        ;       ||
                                        ;  
                                        ;
                                        ; This source file is free software: you can redistribute it and/or modify 
                                        ; it under the terms of the GNU Lesser General Public License as published 
                                        ; by the Free Software Foundation, either version 3 of the License, or     
                                        ; (at your option) any later version.                                      
                                        ;                                                                          
                                        ; This source file is distributed in the hope that it will be useful,      
                                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                                        ; GNU General Public License for more details.                             
                                        ;                                                                          
                                        ; You should have received a copy of the GNU General Public License        
                                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                                        ;                                    
                                        ;                                      
                                        ; This boot rom for the special node $11. This node is responsible for
                                        ; bringing the system up, and controls the text display and leds.
                                        ; ============================================================================
                                        ;
     27 = 0D                            CR	= 13
     28 = 0A                            LF	= 10
     29 = 08                            CTRLH	equ		8
                                        
     31 = 01                            MT_RST		equ		1
     32 = 02                            MT_RST_ACK	equ		2
     33 = 03                            MT_STOP		equ		3
     34 = 04                            MT_KEYSTROKE			equ	4
     35 = 05                            MT_SET_INPUT_FOCUS		equ	5
     36 = 06                            MT_BUTTON_STATUS		equ	6
     37 = 07                            MT_REQ_INP_FOCUS		equ	7
     38 = 08                            MT_GRNT_INP_FOCUS		equ 8
     39 = 09                            MT_PING					equ	9
     40 = 0A                            MT_START_BASIC_LOAD		equ	10
     41 = 0B                            MT_LOAD_BASIC_CHAR		equ	11
     42 = 0C                            MT_RUN_BASIC_PROG		equ	12
     43 = 0D                            MT_BASIC_EXIT			equ	13
     44 = 0F                            MT_REQ_OUT_FOCUS		equ	15
     45 = 10                            MT_GRNT_OUT_FOCUS		equ	16
     46 = 11                            MT_OUT_CHAR				equ	17
     47 = 12                            MT_PING_ACK				equ	18
     48 = 13                            MT_ETH_PACKET			equ	19
     49 = 14                            MT_GET_DATETIME			equ	20
     50 = 15                            MT_SET_DATETIME			equ	21
     51 = 16                            MT_DATETIME_ACK			equ	22
                                        
                                        		bss
                                        		org		0x0040
     56 00000040                        txBuf	fill.b	16,0
     57 00000050                        rxBuf	fill.b	16,0
     58 00000060                        kbdbuf	fill.w	16,0
     59 000000A0                        kbdhead	db	0
     60 000000A1                        kbdtail	db	0
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 2
noc_boot11.a
     61 000000A2                        kbdcnt	db	0
     62 000000A3                        pingcnt		dw	0
     63 000000A7                        FocusTbl	fill.b	64,0
     64 000000E7                        HTOutFocus	db		0
                                        		align	2
     66 000000E8                        packetPtr	dw		0
                                        
     67 = 2000                          TXTSCR		equ	$2000
     68 = 000000000000B100                              TXTCTRL		equ	$B100
     69 = 000000000000B200                              LEDS		equ	$B200
     70 = 000000000000B000                              ROUTER		equ	$B000
     71 = 10                            RTR_RXSTAT	equ	$10
     72 = 12                            RTR_TXSTAT	equ	$12
                                        
     74 = 0F                            MSG_DST		equ	15
     75 = 0E                            MSG_SRC		equ	14
     76 = 09                            MSG_TTL		equ	9
     77 = 08                            MSG_TYPE	equ	8
     78 = 07                            MSG_GSD		equ	7
                                        
     80 = 00                            ROUTER_TRB	equ	0
                                        
                                        		.code
                                        		cpu		Butterfly16
                                        		.org	$C000
                                        ; ============================================================================
                                        ;        __
                                        ;   \\__/ o\    (C) 2017  Robert Finch, Waterloo
                                        ;    \  __ /    All rights reserved.
                                        ;     \/_//     robfinch<remove>@finitron.ca
                                        ;       ||
                                        ;  
                                        ;
                                        ; This source file is free software: you can redistribute it and/or modify 
                                        ; it under the terms of the GNU Lesser General Public License as published 
                                        ; by the Free Software Foundation, either version 3 of the License, or     
                                        ; (at your option) any later version.                                      
                                        ;                                                                          
                                        ; This source file is distributed in the hope that it will be useful,      
                                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                                        ; GNU General Public License for more details.                             
                                        ;                                                                          
                                        ; You should have received a copy of the GNU General Public License        
                                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                                        ;                                    
                                        ;                                      
                                        ; Networking software components
                                        ; ============================================================================
                                        ;
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Zero out the transmit buffer.
                                        ; Used before building transmit buffer.
                                        ; Automatically inserts a time-to-live of 63, and the source id.
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 3
noc_boot11.a
                                        ; Registers Affected:
                                        ;	<none>
                                        ;----------------------------------------------------------------------------
                                        
    125 0000C000                        zeroTxBuf:
    126 0000C000 FE 6E                   		add		sp,sp,#-2
    127 0000C002 E0 D2                   		sw		r2,[sp]
    128 0000C004 00 40 0F 12             		lw		r2,#15
    129 0000C008                        zeroTxBuf1:
    130 0000C008 04 40 20 C0             		sb		r0,txBuf[r2]
    131 0000C00C FF 62                   		sub		r2,r2,#1
    132 0000C00E FC BB                   		bpl		zeroTxBuf1
    133 0000C010 03 40 0F 12             		lw		r2,#63
    134 0000C014 04 40 09 C2             		sb		r2,txBuf+MSG_TTL
    135 0000C018 E4 32                   		tsr		r2,ID
    136 0000C01A A1 32                   		shr		r2,#1
    137 0000C01C A1 32                   		shr		r2,#1
    138 0000C01E A1 32                   		shr		r2,#1
    139 0000C020 A1 32                   		shr		r2,#1
    140 0000C022 04 40 0E C2             		sb		r2,txBuf+MSG_SRC	; X+Y
    141 0000C026 E4 32                   		tsr		r2,ID
    142 0000C028 00 40 5F 32             		and		r2,#$F
    143 0000C02C 06 4C 0C C2             		sb		r2,txBuf+MSG_GDS	; and Z
    144 0000C030 E0 F2                   		lw		r2,[sp]
    145 0000C032 02 6E                   		add		sp,sp,#2
    146 0000C034 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Set the destination address field in the transmit buffer based on the
                                        ; source address in the receive buffer.
                                        ;----------------------------------------------------------------------------
                                        
    153 0000C036                        SetDestFromRx:
    154 0000C036 05 40 0E E1             		lb		r1,rxBuf+MSG_SRC
    155 0000C03A 04 40 0F C1             		sb		r1,txBuf+MSG_DST
    156 0000C03E 08 4C 0E E1             		lb		r1,rxBuf+MSG_GDS
    157 0000C042 08 4C 02 E2             		lb		r2,txBuf+MSG_GDS
    158 0000C046 81 31                   		shl		r1,#1
    159 0000C048 81 31                   		shl		r1,#1
    160 0000C04A 81 31                   		shl		r1,#1
    161 0000C04C 81 31                   		shl		r1,#1
    162 0000C04E 26 21                   		or		r1,r2
    163 0000C050 09 4C 00 C1             		sb		r1,txBuf+MSG_GDS
    164 0000C054 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Transmit on the network.
                                        ; Blocks until the transmit buffer is open.
                                        ;
                                        ; Prerequisites:
                                        ;	The transmit buffer txBuf must have already been loaded.
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	<none>
                                        ;----------------------------------------------------------------------------
                                        
    180 0000C056 FC 6E                  Xmit:	
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 4
noc_boot11.a
    181 0000C058 E0 D1                   		sw		r1,[sp]
    182 0000C05A E2 D2                   		sw		r2,2[sp]
                                        		; wait for transmit buffer to empty
    184 0000C05C                        Xmit2:
    185 0000C05C 01 4B 02 E1             		lb		r1,ROUTER+RTR_TXSTAT
    186 0000C060 FD B9                   		bne		Xmit2
    187 0000C062 00 40 0F 12             		lw		r2,#15
    188 0000C066                        Xmit1:
    189 0000C066 04 40 20 E1             		lb		r1,txBuf[r2]
    190 0000C06A 00 4B 20 C1             		sb		r1,ROUTER[r2]
    191 0000C06E FF 62                   		add		r2,r2,#-1
    192 0000C070 FA BB                   		bpl		Xmit1
                                        		; trigger a transmit
    194 0000C072 01 11                   		lw		r1,#1
    195 0000C074 01 4B 02 C2             		sb		r2,ROUTER+RTR_TXSTAT
    196 0000C078 E2 F2                   		lw		r2,2[sp]
    197 0000C07A E0 F1                   		lw		r1,[sp]
    198 0000C07C 04 6E                   		add		sp,sp,#4
    199 0000C07E F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Receive from network.
                                        ; Receive status must have already indicated a message present.
                                        ; Copies recieve buffer from router to rxBuf.
                                        ; The router fifo is configured with first word fall-through. This means
                                        ; the data word appears on the fifo output before the fifo is popped.
                                        ; A fifo pop signal has to be sent after reading the data.
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	<none>
                                        ;----------------------------------------------------------------------------
                                        
    217 0000C080                        Recv:
    218 0000C080 FC 6E                   		add		sp,sp,#-4
    219 0000C082 E0 D1                   		sw		r1,[sp]
    220 0000C084 E2 D2                   		sw		r2,2[sp]
    221 0000C086 00 40 0F 12             		lw		r2,#15
    222 0000C08A                        Recv1:
    223 0000C08A 00 4B 20 E1             		lb		r1,ROUTER[r2]			; copy message to local buffer
    224 0000C08E 05 40 20 C1             		sb		r1,rxBuf[r2]
    225 0000C092 FF 62                   		add		r2,r2,#-1
    226 0000C094 FA BB                   		bpl		Recv1
    227 0000C096 01 4B 00 E1             		lb		r1,ROUTER+RTR_RXSTAT
    228 0000C09A 04 40 60 31             		or		r1,#$40
    229 0000C09E 01 4B 00 C1             		sb		r1,ROUTER+RTR_RXSTAT	; pop the rx fifo
    230 0000C0A2 E0 F1                   		lw		r1,[sp]
    231 0000C0A4 E2 F2                   		lw		r2,2[sp]
    232 0000C0A6 04 6E                   		add		sp,sp,#4
    233 0000C0A8 F0 80                   		ret
                                        
                                        ;****************************************************************;
                                        ;                                                                ;
                                        ;		Tiny BASIC for the Finitron Butterfly                    ;
                                        ;                                                                ;
                                        ; Derived from a 68000 derivative of Palo Alto Tiny BASIC as     ;
                                        ; published in the May 1976 issue of Dr. Dobb's Journal.         ;
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 5
noc_boot11.a
                                        ; Adapted to the 68000 by:                                       ;
                                        ;	Gordon brndly						                         ;
                                        ;	12147 - 51 Street					                         ;
                                        ;	Edmonton AB  T5W 3G8					                     ;
                                        ;	Canada							                             ;
                                        ;	(updated mailing address for 1996)			                 ;
                                        ;                                                                ;
                                        ; Adapted to the Butterfly by:                                    ;
                                        ;    Robert Finch                                                ;
                                        ;    Ontario, Canada                                             ;
                                        ;	 rob<remove>@finitron.ca                                     ;  
                                        ;****************************************************************;
                                        ;    Copyright (C) 2005 by Robert Finch. This program may be	 ;
                                        ;    freely distributed for personal use only. All commercial	 ;
                                        ;		       rights are reserved.			                     ;
                                        ;****************************************************************;
                                        ;
                                        ; Register Usage
                                        ; r8 = text pointer (global usage)
                                        ; r3,r4 = inputs parameters to subroutines
                                        ; r2 = return value
                                        ;
                                        ;* Vers. 1.0  1984/7/17	- Original version by Gordon brndly
                                        ;*	1.1  1984/12/9	- Addition of '0x' print term by Marvin Lipford
                                        ;*	1.2  1985/4/9	- Bug fix in multiply routine by Rick Murray
                                        
                                        ;	OPT	FRS,BRS 	forward ref.'s & brnches default to short
                                        
                                        ;XMIT_FULL		equ	0x40		; the transmit buffer is full
                                        ;DATA_PRESENT	equ	0x08		; there is data preset at the serial port bc_uart3
    270 = 01                            DATA_PRESENT	equ	0x01		; there is data preset at the serial port bc_uart3
    271 = 20                            XMIT_NOT_FULL	equ	0x20
                                        
    273 = 00000000FFFFDC40                              TS_TIMER	equ		0xFFFFDC40		; system time slice timer
    274 = 00000000FFFFDC50                              KBD			equ		0xFFFFDC50
                                        
    276 = 00000000FFFFDCA0                              RAND		equ		0xFFFFDCA0
    277 = 00000000FFFFD800                              VIC			equ		0xFFFFD800
                                        
    279 = 2000                          VIDEORAM	equ		0x00002000
                                        
                                        ; BOOT ROM routines
                                        
    283 = 0000000FFFFFF804                              getSerial	equ		0xFFFFFF804	; get a serial port character
    284 = 0000000FFFFFF808                              peekSerial	equ		0xFFFFFF808	; get a serial port character
    285 = 0000000FFFFFF80C                              putSerial	equ		0xFFFFFF80C	; put a character to serial port
    286 = 0000000FFFFFF840                              getKbdCharWait	equ	0xFFFFFF840
    287 = 0000000FFFFFF844                              getKbdChar		equ	0xFFFFFF844
                                        
    289 = 20                            warmStart   equ     0x20
    290 = 24                            usrJmp      equ     0x24
                                        
    292 = 0D                            CR		equ	0x0D		; ASCII equates
    293 = 0A                            LF		equ	0x0A
    294 = 09                            TAB		equ	0x09
    295 = 03                            CTRLC	equ	0x03
    296 = 08                            CTRLH	equ	0x08
    297 = 13                            CTRLS	equ	0x13
    298 = 18                            CTRLX	equ	0x18
                                        
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 6
noc_boot11.a
    300 = 50                            BUFLEN	equ	80	;	length of keyboard input buffer
                                        
                                        	code
                                        ;	org	0xC000	;
                                        ;
                                        ; Standard jump table. You can change these addresses if you are
                                        ; customizing this interpreter for a different environment.
                                        ;
    309 0000C0AA 0D AE                  START	jmp	CSTART	;	Cold Start entry point
    310 0000C0AC 41 AE                  GOWARM	jmp	WSTART	;	Warm Start entry point
    311 0000C0AE 8B 40 06 AE            GOOUT	jmp	OUTC	;	Jump to character-out routine
    312 0000C0B2 8C 40 06 AE            GOIN	jmp	INC		;Jump to character-in routine
    313 0000C0B6 8F 40 00 AE            GOAUXO	jmp	AUXOUT	;	Jump to auxiliary-out routine
    314 0000C0BA 8F 40 05 AE            GOAUXI	jmp	AUXIN	;	Jump to auxiliary-in routine
    315 0000C0BE 90 40 0B AE            GOBYE	jmp	BYEBYE	;	Jump to monitor, DOS, etc.
                                        ;
                                        ; Modifiable system constants:
                                        ;
    319 0000C0C2 00 02                  TXTBGN	dw	0x0200		;beginning of program memory
    320 0000C0C4 00 1E                  ENDMEM	dw	0x1E00	;	end of available memory
                                        ;
                                        ; The main interpreter starts here:
                                        ;
                                        ; Usage
                                        ; r1 = temp
                                        ; r8 = text buffer pointer
                                        ; r12 = end of text in text buffer
                                        ;
    329 0000C0C6                        CSTART
    330 0000C0C6 06 11                   	lw		r1,#6
    331 0000C0C8 20 4B 00 C1             	sb		r1,LEDS
                                        	; First save off the link register and OS sp value
    333 0000C0CC FC 6E                   	sub		sp,sp,#4
    334 0000C0CE E0 DF                   	sw		lr,[sp]
    335 0000C0D0 05 40 0E DE             	sw		sp,OSSP
    336 0000C0D4 0C 4C 04 FE             	lw		sp,ENDMEM	; initialize stack pointer
    337 0000C0D8 E0 DF                   	sw      lr,[sp]    ; save off return address
                                        ;	lw		r1,#TXT_WIDTH
                                        ;	sb		r1,txtWidth
                                        ;	lw		r1,#TXT_HEIGHT
                                        ;	sb		r1,txtHeight
    342 0000C0DA 03 40 02 C0             	sb		r0,cursx	; set screen output
    343 0000C0DE 03 40 03 C0             	sb		r0,cursy
    344 0000C0E2 03 40 0C C0             	sb		r0,cursFlash
    345 0000C0E6 03 40 04 D0             	sw		r0,pos
                                        ;	lw		r2,#0xBF20	; black chars, yellow background
                                        ;	sw		r2,charToPrint
                                        ;	call	ClearScreen
                                        ;	lea		r1,msgInit	;	tell who we are
                                        ;	call	PRMESGAUX
    351 0000C0EA 2E 4D 02 11             	lea		r1,msgInit	;	tell who we are
    352 0000C0EE 87 40 08 AF             	call	PRMESG
    353 0000C0F2 0C 4C 02 F1             	lw		r1,TXTBGN	;	init. end-of-program pointer
    354 0000C0F6 07 40 00 D1             	sw		r1,TXTUNF
    355 0000C0FA 0C 4C 04 F1             	lw		r1,ENDMEM	;	get address of end of memory
    356 0000C0FE E0 4F 10 11             	sub		r1,r1,#512	; 	reserve 512 bytes for the stack
    357 0000C102 07 40 0A D1             	sw		r1,STKBOT
    358 0000C106 E0 4F 10 11             	sub     r1,r1,#512 ;   128 vars
    359 0000C10A 07 40 02 D1             	sw      r1,VARBGN
    360 0000C10E 15 40 0F AF             	call    clearVars   ; clear the variable area
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 7
noc_boot11.a
    361 0000C112 07 40 02 F1             	lw      r1,VARBGN   ; calculate number of bytes free
    362 0000C116 07 40 00 F3             	lw		r3,TXTUNF
    363 0000C11A 32 21                   	sub     r1,r3
    364 0000C11C 00 12                   	lw		r2,#0
    365 0000C11E 70 40 03 AF             	call	PRTNUM
    366 0000C122 07 11                   	lw		r1,#7
    367 0000C124 20 4B 00 C1             	sb		r1,LEDS
    368 0000C128 39 4D 00 11             	lea		r1,msgBytesFree
    369 0000C12C 85 40 09 AF             	call	PRMESG
    370 0000C130                        WSTART
    371 0000C130 06 40 06 D0             	sw		r0,LOPVAR   ; initialize internal variables
    372 0000C134 06 40 02 D0             	sw		r0,STKGOS
    373 0000C138 06 40 00 D0             	sw		r0,CURRNT	;	current line number pointer = 0
    374 0000C13C 0C 4C 04 FE             	lw		sp,ENDMEM	;	init S.P. again, just in case
    375 0000C140 39 4D 0E 11             	lea		r1,msgReady	;	display "Ready"
    376 0000C144 84 40 0D AF             	call	PRMESG
    377 0000C148                        ST3
    378 0000C148 03 40 0E 11             	lw		r1,#'>'		; Prompt with a '>' and
    379 0000C14C 60 40 07 AF             	call	GETLN		; read a line.
    380 0000C150 80 40 0D AF             	call	TOUPBUF 	; convert to upper case
    381 0000C154 80 1C                   	lw		r12,r8		; save pointer to end of line
    382 0000C156 0A 40 0E 18             	lea		r8,BUFFER	; point to the beginning of line
    383 0000C15A 78 40 08 AF             	call	TSTNUM		; is there a number there?
    384 0000C15E 7F 40 08 AF             	call	IGNBLK		; skip trailing blanks
    385 0000C162 16 21                   	or      r1,r1       ; does line no. exist? (or nonzero?)
    386 0000C164 BB A8                   	beq		DIRECT		; if not, it's a direct statement
    387 0000C166 00 40 11 10             	cmp		r1,#0xFFFF	; see if line no. is <= 16 bits
    388 0000C16A 04 A6                   	bleu	ST2
    389 0000C16C 3B 4D 0C 11             	lea		r1,msgLineRange	; if not, we've overflowed
    390 0000C170 5D 40 0B AE             	br		ERROR
    391 0000C174                        ST2
                                            ; ugliness - store a character at potentially an
                                            ; odd address (unaligned).
    394 0000C174 10 12                   	lw		r2,r1       ; r2 = line number
    395 0000C176 8E C2                   	sb		r2,-2[r8]
    396 0000C178 A1 32                   	shr		r2,#1
    397 0000C17A A1 32                   	shr		r2,#1
    398 0000C17C A1 32                   	shr		r2,#1
    399 0000C17E A1 32                   	shr		r2,#1
    400 0000C180 A1 32                   	shr		r2,#1
    401 0000C182 A1 32                   	shr		r2,#1
    402 0000C184 A1 32                   	shr		r2,#1
    403 0000C186 A1 32                   	shr		r2,#1
    404 0000C188 8F C2                   	sb		r2,-1[r8]	; store the binary line no.
    405 0000C18A FE 68                   	sub		r8,r8,#2
    406 0000C18C 62 40 04 AF             	call	FNDLN		; find this line in save area
    407 0000C190 E0 31                   	tsr		r1,sr
    408 0000C192 90 1D                   	lw		r13,r9		; save possible line pointer
    409 0000C194 F0 31                   	trs		r1,sr
    410 0000C196 11 A9                   	bne		ST4			; if not found, insert
                                        	; here we found the line, so we're replacing the line
                                        	; in the text area
                                        	; first step - delete the line
    414 0000C198 00 11                   	lw		r1,#0
    415 0000C19A 63 40 0A AF             	call	FNDNXT		; find the next line (into r9)
    416 0000C19E 0A A7                   	bgtu	ST6			; no more lines
    417 0000C1A0 90 11                   	lw		r1,r9		; r1 = pointer to next line
    418 0000C1A2 D0 12                   	lw		r2,r13		; pointer to line to be deleted
    419 0000C1A4 07 40 00 F3             	lw		r3,TXTUNF	; points to top of save area
    420 0000C1A8 63 40 0E AF             	call	MVUP		; move up to delete
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 8
noc_boot11.a
    421 0000C1AC 07 40 00 D2             	sw		r2,TXTUNF	; update the end pointer
                                        	; we moved the lines of text after the line being
                                        	; deleted down, so the pointer to the next line
                                        	; needs to be reset
    425 0000C1B0 D0 19                   	lw		r9,r13
    426 0000C1B2 03 AE                   	br		ST4
                                        	; here there were no more lines, so just move the
                                        	; end of text pointer down
    429 0000C1B4                        ST6
    430 0000C1B4 07 40 00 DD             	sw		r13,TXTUNF
    431 0000C1B8 D0 19                   	lw		r9,r13
    432 0000C1BA                        ST4
                                        	; here we're inserting because the line wasn't found
                                        	; or it was deleted	from the text area
    435 0000C1BA C0 11                   	lw		r1,r12		; calculate the length of new line
    436 0000C1BC 82 21                   	sub		r1,r8
    437 0000C1BE 1D 10                   	cmp		r1,#3		; is it just a line no. & CR?
    438 0000C1C0 C3 B2                   	ble		ST3			; if so, it was just a delete
                                        
    440 0000C1C2 07 40 00 FB             	lw		r11,TXTUNF	; compute new end of text
    441 0000C1C6 B0 1A                   	lw		r10,r11		; r10 = old TXTUNF
    442 0000C1C8 10 2B                   	add		r11,r1		; r11 = new top of TXTUNF (r1=line length)
                                        
    444 0000C1CA 07 40 02 F1             	lw		r1,VARBGN	; see if there's enough room
    445 0000C1CE 1D 2B                   	cmp		r11,r1
    446 0000C1D0 04 A4                   	bltu	ST5
    447 0000C1D2 49 4D 07 11             	lea		r1,msgTooBig	; if not, say so
    448 0000C1D6 5A 40 08 AE             	jmp		ERROR
                                        
                                        	; open a space in the text area
    451 0000C1DA                        ST5
    452 0000C1DA 07 40 00 DB             	sw		r11,TXTUNF	; if so, store new end position
    453 0000C1DE A0 11                   	lw		r1,r10		; points to old end of text
    454 0000C1E0 B0 12                   	lw		r2,r11		; points to new end of text
    455 0000C1E2 90 13                   	lw		r3,r9       ; points to start of line after insert line
    456 0000C1E4 62 40 07 AF             	call	MVDOWN		; move things out of the way
                                        
                                        	; copy line into text space
    459 0000C1E8 80 11                   	lw		r1,r8		; set up to do the insertion; move from buffer
    460 0000C1EA D0 12                   	lw		r2,r13		; to vacated space
    461 0000C1EC C0 13                   	lw		r3,r12		; until end of buffer
    462 0000C1EE 61 40 0B AF             	call	MVUP		; do it
    463 0000C1F2 AA BE                   	br		ST3			; go back and get another line
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** Tables *** DIRECT *** EXEC ***
                                        ;
                                        ; This section of the code tests a string against a table. When
                                        ; a match is found, control is transferred to the section of
                                        ; code according to the table.
                                        ;
                                        ; At 'EXEC', r8 should point to the string, r9 should point to
                                        ; the character table, and r10 should point to the execution
                                        ; table. At 'DIRECT', r8 should point to the string, r9 and
                                        ; r10 will be set up to point to TAB1 and TAB1_1, which are
                                        ; the tables of all direct and statement commands.
                                        ;
                                        ; A '.' in the string will terminate the test and the partial
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 9
noc_boot11.a
                                        ; match will be considered as a match, e.g. 'P.', 'PR.','PRI.',
                                        ; 'PRIN.', or 'PRINT' will all match 'PRINT'.
                                        ;
                                        ; There are two tables: the character table and the execution
                                        ; table. The character table consists of any number of text items.
                                        ; Each item is a string of characters with the last character's
                                        ; high bit set to one. The execution table holds a 32-bit
                                        ; execution addresses that correspond to each entry in the
                                        ; character table.
                                        ;
                                        ; The end of the character table is a 0 byte which corresponds
                                        ; to the default routine in the execution table, which is
                                        ; executed if none of the other table items are matched.
                                        ;
                                        ; Character-matching tables:
    496 0000C1F4                        TAB1
    497 0000C1F4 4C 49 53 D4             	db	"LIS",('T'+0x80)        ; Direct commands
    498 0000C1F8 4C 4F 41 C4             	db	"LOA",('D'+0x80)
    499 0000C1FC 4E 45 D7                	db	"NE",('W'+0x80)
    500 0000C1FF 52 55 CE                	db	"RU",('N'+0x80)
    501 0000C202 53 41 56 C5             	db	"SAV",('E'+0x80)
    502 0000C206                        TAB2
    503 0000C206 4E 45 58 D4             	db	"NEX",('T'+0x80)         ; Direct / statement
    504 0000C20A 4C 45 D4                	db	"LE",('T'+0x80)
    505 0000C20D 49 C6                   	db	"I",('F'+0x80)
    506 0000C20F 47 4F 54 CF             	db	"GOT",('O'+0x80)
    507 0000C213 47 4F 53 55 C2          	db	"GOSU",('B'+0x80)
    508 0000C218 52 45 54 55 52 CE       	db	"RETUR",('N'+0x80)
    509 0000C21E 52 45 CD                	db	"RE",('M'+0x80)
    510 0000C221 46 4F D2                	db	"FO",('R'+0x80)
    511 0000C224 49 4E 50 55 D4          	db	"INPU",('T'+0x80)
    512 0000C229 50 52 49 4E D4          	db	"PRIN",('T'+0x80)
    513 0000C22E 50 4F 4B 45 D7          	db	"POKE",('W'+0x80)
    514 0000C233 50 4F 4B C5             	db	"POK",('E'+0x80)
    515 0000C237 53 54 4F D0             	db	"STO",('P'+0x80)
    516 0000C23B 42 59 C5                	db	"BY",('E'+0x80)
    517 0000C23E 53 59 D3                	db	"SY",('S'+0x80)
    518 0000C241 43 4C D3                	db	"CL",('S'+0x80)
    519 0000C244 43 4C D2                    db  "CL",('R'+0x80)
    520 0000C247 00                      	db	0
    521 0000C248                        TAB4
    522 0000C248 4E 4F 44 45 4E 55 CD    	db	"NODENU",('M'+0x80)
                                      
    523 0000C24F 50 45 45 4B D7          	db	"PEEK",('W'+0x80)        ;Functions
    524 0000C254 50 45 45 CB             	db	"PEE",('K'+0x80)         ;Functions
    525 0000C258 52 4E C4                	db	"RN",('D'+0x80)
    526 0000C25B 41 42 D3                	db	"AB",('S'+0x80)
    527 0000C25E 53 49 5A C5             	db	"SIZ",('E'+0x80)
    528 0000C262 55 53 D2                	db  "US",('R'+0x80)
    529 0000C265 00                      	db	0
    530 0000C266                        TAB5
    531 0000C266 54 CF                   	db	"T",('O'+0x80)           ;"TO" in "FOR"
    532 0000C268 00                      	db	0
    533 0000C269                        TAB6
    534 0000C269 53 54 45 D0             	db	"STE",('P'+0x80)         ;"STEP" in "FOR"
    535 0000C26D 00                      	db	0
    536 0000C26E                        TAB8
    537 0000C26E 3E BD                   	db	'>',('='+0x80)           ;Relational operators
    538 0000C270 3C BE                   	db	'<',('>'+0x80)
    539 0000C272 BE                      	db	('>'+0x80)
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 10
noc_boot11.a
    540 0000C273 BD                      	db	('='+0x80)
    541 0000C274 3C BD                   	db	'<',('='+0x80)
    542 0000C276 BC                      	db	('<'+0x80)
    543 0000C277 00                      	db	0
    544 0000C278                        TAB9
    545 0000C278 41 4E C4                    db  "AN",('D'+0x80)
    546 0000C27B 00                          db  0
    547 0000C27C                        TAB10
    548 0000C27C 4F D2                       db  "O",('R'+0x80)
    549 0000C27E 00                          db  0
                                        
    551 0000C27F FF                      	.align	4
                                        
                                        ;* Execution address tables:
    554 0000C280                        TAB1_1
    555 0000C280 EE C3                   	dw	LISTX			;Direct commands
    556 0000C282 54 C6                   	dw	LOAD
    557 0000C284 32 C3                   	dw	NEW
    558 0000C286 48 C3                   	dw	RUN
    559 0000C288 E8 C6                   	dw	SAVE
    560 0000C28A                        TAB2_1
    561 0000C28A 46 C5                   	dw	NEXT		;	Direct / statement
    562 0000C28C 46 C6                   	dw	LET
    563 0000C28E A0 C5                   	dw	IF
    564 0000C290 B2 C3                   	dw	GOTO
    565 0000C292 88 C4                   	dw	GOSUB
    566 0000C294 B8 C4                   	dw	RETURN
    567 0000C296 AA C5                   	dw	IF2			; REM
    568 0000C298 E2 C4                   	dw	FOR
    569 0000C29A C8 C5                   	dw	INPUT
    570 0000C29C 24 C4                   	dw	PRINT
    571 0000C29E 1E C8                   	dw	POKEW
    572 0000C2A0 FE C7                   	dw	POKE
    573 0000C2A2 40 C3                   	dw	STOP
    574 0000C2A4 BE C0                   	dw	GOBYE
    575 0000C2A6 36 C8                   	dw	SYSX
    576 0000C2A8 D0 D2                   	dw	_cls
    577 0000C2AA CC C3                   	dw  _clr
    578 0000C2AC 3E C6                   	dw	DEFLT
    579 0000C2AE                        TAB4_1
    580 0000C2AE A6 CC                   	dw	NODENUM
    581 0000C2B0 F2 CB                   	dw  PEEKW
    582 0000C2B2 E6 CB                   	dw	PEEK			;Functions
    583 0000C2B4 14 CC                   	dw	RND
    584 0000C2B6 70 CC                   	dw	ABS
    585 0000C2B8 96 CC                   	dw	SIZEX
    586 0000C2BA FE CB                   	dw  USRX
    587 0000C2BC DE C9                   	dw	XP40
    588 0000C2BE                        TAB5_1
    589 0000C2BE FA C4                   	dw	FR1			;"TO" in "FOR"
    590 0000C2C0 26 CD                   	dw	QWHAT
    591 0000C2C2                        TAB6_1
    592 0000C2C2 0E C5                   	dw	FR2			;"STEP" in "FOR"
    593 0000C2C4 14 C5                   	dw	FR3
    594 0000C2C6                        TAB8_1
    595 0000C2C6 00 C9                   	dw	XP11	;>=		Relational operators
    596 0000C2C8 0A C9                   	dw	XP12	;<>
    597 0000C2CA 14 C9                   	dw	XP13	;>
    598 0000C2CC 28 C9                   	dw	XP15	;=
    599 0000C2CE 1E C9                   	dw	XP14	;<=
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 11
noc_boot11.a
    600 0000C2D0 32 C9                   	dw	XP16	;<
    601 0000C2D2 4C C9                   	dw	XP17
    602 0000C2D4                        TAB9_1
    603 0000C2D4 8C C8                       dw  XP_AND
    604 0000C2D6 94 C8                       dw  XP_ANDX
    605 0000C2D8                        TAB10_1
    606 0000C2D8 68 C8                       dw  XP_OR
    607 0000C2DA 70 C8                       dw  XP_ORX
                                        
                                        ;*
                                        ; r3 = match flag (trashed)
                                        ; r9 = text table
                                        ; r10 = exec table
                                        ; r11 = trashed
    614 0000C2DC                        DIRECT
    615 0000C2DC 1F 4C 04 19             	lea		r9,TAB1
    616 0000C2E0 28 4C 00 1A             	lea		r10,TAB1_1
    617 0000C2E4                        EXEC
    618 0000C2E4 F0 1B                   	lw		r11,lr		; save link reg
    619 0000C2E6 73 40 04 AF             	call	IGNBLK		; ignore leading blanks
    620 0000C2EA B0 1F                   	lw		lr,r11		; restore link reg
    621 0000C2EC 80 1B                   	lw		r11,r8		; save the pointer
    622 0000C2EE 00 13                   	lw		r3,#0		; clear match flag
    623 0000C2F0                        EXLP
    624 0000C2F0 80 E1                   	lb		r1,[r8]		; get the program character
    625 0000C2F2 01 68                   	add		r8,r8,#1
    626 0000C2F4 90 E2                   	lb		r2,[r9]		; get the table character
    627 0000C2F6 02 A9                   	bne		EXNGO		; If end of table,
    628 0000C2F8 B0 18                   	lw		r8,r11		;	restore the text pointer and...
    629 0000C2FA 12 AE                   	br		EXGO		;   execute the default.
    630 0000C2FC                        EXNGO
    631 0000C2FC 3D 21                   	cmp		r1,r3		; Else check for period...
    632 0000C2FE 10 A8                   	beq		EXGO		; if so, execute
    633 0000C300 07 40 5F 32             	and		r2,#0x7f	; ignore the table's high bit
    634 0000C304 1D 22                   	cmp		r2,r1		;		is there a match?
    635 0000C306 07 A8                   	beq		EXMAT
    636 0000C308 04 6A                   	add		r10,r10,#4	;if not, try the next entry
    637 0000C30A B0 18                   	lw		r8,r11		; reset the program pointer
    638 0000C30C 00 13                   	lw		r3,#0		; sorry, no match
    639 0000C30E                        EX1
    640 0000C30E 01 69                   	add		r9,r9,#1
    641 0000C310 9F E1                   	lb		r1,-1[r9]	; get to the end of the entry
    642 0000C312 FD BB                   	bpl		EX1
    643 0000C314 ED BE                   	br		EXLP		; back for more matching
    644 0000C316                        EXMAT
    645 0000C316 02 40 0E 13             	lw		r3,#'.'		; we've got a match so far
    646 0000C31A 01 69                   	add		r9,r9,#1
    647 0000C31C 9F E1                   	lb		r1,-1[r9]	; end of table entry?
    648 0000C31E E8 BB                   	bpl		EXLP		; if not, go back for more
    649 0000C320                        EXGO
    650 0000C320 01 4B 00 E1             	lb		r1,ROUTER+RTR_RXSTAT
    651 0000C324 04 A8                   	beq		EXGO1
    652 0000C326 EA 4F 0B AF             	call	Recv
    653 0000C32A AF 40 0D AF             	call	RecvDispatch
    654 0000C32E                        EXGO1
    655 0000C32E A0 FB                   	lw		r11,[r10]	; execute the appropriate routine
    656 0000C330 B0 80                   	jmp		[r11]
                                        
                                        
                                        ;    lb      r1,[r8]     ; get token from text space
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 12
noc_boot11.a
                                        ;    bpl
                                        ;    and     r1,#0x7f
                                        ;    shl     r1,#2       ; * 4 - word offset
                                        ;    add     r1,r1,#TAB1_1
                                        ;    lw      r1,[r1]
                                        ;    jmp     [r1]
                                        
                                            
                                        ;
                                        ; What follows is the code to execute direct and statement
                                        ; commands. Control is transferred to these points via the command
                                        ; table lookup code of 'DIRECT' and 'EXEC' in the last section.
                                        ; After the command is executed, control is transferred to other
                                        ; sections as follows:
                                        ;
                                        ; For 'LISTX', 'NEW', and 'STOP': go back to the warm start point.
                                        ; For 'RUN': go execute the first stored line if any; else go
                                        ; back to the warm start point.
                                        ; For 'GOTO' and 'GOSUB': go execute the target line.
                                        ; For 'RETURN' and 'NEXT'; go back to saved return line.
                                        ; For all others: if 'CURRNT' is 0, go to warm start; else go
                                        ; execute next command. (This is done in 'FINISH'.)
                                        ;
                                        ;******************************************************************
                                        ;
                                        ; *** NEW *** STOP *** RUN (& friends) *** GOTO ***
                                        ;
                                        ; 'NEW<CR>' sets TXTUNF to point to TXTBGN
                                        ;
                                        ; 'STOP<CR>' goes back to WSTART
                                        ;
                                        ; 'RUN<CR>' finds the first stored line, stores its address
                                        ; in CURRNT, and starts executing it. Note that only those
                                        ; commands in TAB2 are legal for a stored program.
                                        ;
                                        ; RUN ON <node number> sends a run command to the specified node
                                        ;
                                        ; There are 3 more entries in 'RUN':
                                        ; 'RUNNXL' finds next line, stores it's address and executes it.
                                        ; 'RUNTSL' stores the address of this line and executes it.
                                        ; 'RUNSML' continues the execution on same line.
                                        ;
                                        ; 'GOTO expr<CR>' evaluates the expression, finds the target
                                        ; line, and jumps to 'RUNTSL' to do it.
                                        ;
    705 0000C332                        NEW
    706 0000C332 4E 40 04 AF             	call	ENDCHK
    707 0000C336 0C 4C 02 F1             	lw		r1,TXTBGN
    708 0000C33A 07 40 00 D1             	sw		r1,TXTUNF	;	set the end pointer
    709 0000C33E 48 AF                   	call    clearVars
                                        
    711 0000C340                        STOP
    712 0000C340 4D 40 0D AF             	call	ENDCHK
    713 0000C344 EF 4F 04 AE             	br		WSTART		; WSTART will reset the stack
                                        
    715 0000C348                        RUN
    716 0000C348 70 40 03 AF             	call	IGNBLK
    717 0000C34C 80 E1                   	lb		r1,[r8]
    718 0000C34E FB 4F 11 10             	cmp		r1,#'O'
    719 0000C352 14 A9                   	bne		RUN1
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 13
noc_boot11.a
    720 0000C354 81 E1                   	lb		r1,1[r8]
    721 0000C356 FB 4F 12 10             	cmp		r1,#'N'
    722 0000C35A 10 A9                   	bne		RUN1
    723 0000C35C 02 68                   	add		r8,r8,#2
    724 0000C35E 27 40 09 AF             	call	OREXPR
    725 0000C362 E4 4F 0D AF             	call	zeroTxBuf
    726 0000C366 04 40 0F C1             	sb		r1,txBuf+MSG_DST
    727 0000C36A E4 31                   	tsr		r1,ID
    728 0000C36C 04 40 0E C1             	sb		r1,txBuf+MSG_SRC
                                        	lb		r1,#MT_RUN_BASIC_PROG
    730 0000C370 04 40 08 C1             	sb		r1,txBuf+MSG_TYPE
    731 0000C374 E6 4F 0F AF             	call	Xmit
    732 0000C378 ED 4F 0A AE             	br		WSTART
    733 0000C37C                        RUN1
    734 0000C37C 4B 40 0F AF             	call	ENDCHK
    735 0000C380 0C 4C 02 F8             	lw		r8,TXTBGN	;	set pointer to beginning
    736 0000C384 06 40 00 D8             	sw		r8,CURRNT
    737 0000C388 23 AF                   	call    clearVars
                                        
    739 0000C38A                        RUNNXL					; RUN <next line>
    740 0000C38A 06 40 00 F1             	lw		r1,CURRNT	; executing a program?
    741 0000C38E EC 4F 0F A8             	beq		WSTART		; if not, we've finished a direct stat.
    742 0000C392 00 11                   	lw		r1,#0	    ; else find the next line number
    743 0000C394 80 19                   	lw		r9,r8
    744 0000C396 52 40 07 AF             	call	FNDLNP		; search for the next line
    745 0000C39A EC 4F 09 A7             	bgtu	WSTART		; if we've fallen off the end, stop
                                        
    747 0000C39E                        RUNTSL					; RUN <this line>
    748 0000C39E 06 40 00 D9             	sw		r9,CURRNT	; set CURRNT to point to the line no.
    749 0000C3A2 92 18                   	lea		r8,2[r9]	; set the text pointer to
                                        
    751 0000C3A4                        RUNSML                  ; RUN <same line>
    752 0000C3A4 70 40 0B AF             	call	CHKIO		; see if a control-C was pressed
    753 0000C3A8 20 4C 06 19             	lea		r9,TAB2		; find command in TAB2
    754 0000C3AC 28 4C 0A 1A             	lea		r10,TAB2_1
    755 0000C3B0 99 BE                   	br		EXEC		; and execute it
                                        
    757 0000C3B2                        GOTO
    758 0000C3B2 24 40 0F AF             	call	OREXPR		;evaluate the following expression
    759 0000C3B6 10 15                   	lw      r5,r1
    760 0000C3B8 4A 40 01 AF             	call	ENDCHK		;must find end of line
    761 0000C3BC 50 11                   	lw      r1,r5
    762 0000C3BE 50 40 0B AF             	call	FNDLN		; find the target line
    763 0000C3C2 ED B8                   	beq		RUNTSL		; go do it
    764 0000C3C4 46 4D 03 11             	lea		r1,msgBadGotoGosub
    765 0000C3C8 4A 40 0F AE             	br		ERROR		; no such line no.
                                        
                                        
    768 0000C3CC                        _clr
    769 0000C3CC 01 AF                       call    clearVars
    770 0000C3CE 58 AE                       br      FINISH
                                        
                                        ; Clear the variable area of memory
    773 0000C3D0                        clearVars
    774 0000C3D0 FC 6E                       sub     sp,sp,#4
    775 0000C3D2 E0 DF                       sw      lr,[sp]
    776 0000C3D4 E2 D6                       sw      r6,2[sp]
    777 0000C3D6 10 40 00 16                 lw      r6,#256		; number of words to clear
    778 0000C3DA 07 40 02 F1                 lw      r1,VARBGN
    779 0000C3DE                        cv1
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 14
noc_boot11.a
    780 0000C3DE 10 D0                       sw      r0,[r1]
    781 0000C3E0 02 61                       add     r1,r1,#2
    782 0000C3E2 FF 66                       sub		r6,r6,#1
    783 0000C3E4 FC B9                       bne     cv1
    784 0000C3E6 E0 FF                       lw      lr,[sp]
    785 0000C3E8 E2 F6                       lw      r6,2[sp]
    786 0000C3EA 04 6E                       add     sp,sp,#4
    787 0000C3EC F0 80                       ret    
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; LIST
                                        ;
                                        ; LISTX has two forms:
                                        ; 'LIST<CR>' lists all saved lines
                                        ; 'LIST #<CR>' starts listing at the line #
                                        ; Control-S pauses the listing, control-C stops it.
                                        ;
                                        
    800 0000C3EE                        LISTX
    801 0000C3EE 63 40 0E AF             	call	TSTNUM		; see if there's a line no.
    802 0000C3F2 10 15                   	lw      r5,r1
    803 0000C3F4 48 40 03 AF             	call	ENDCHK		; if not, we get a zero
    804 0000C3F8 50 11                   	lw      r1,r5
    805 0000C3FA 4E 40 0D AF             	call	FNDLN		; find this or next line
    806 0000C3FE                        LS1
    807 0000C3FE E9 4F 07 A7             	bgtu	WSTART		; warm start if we passed the end
                                        
    809 0000C402 90 11                   	lw		r1,r9
    810 0000C404 60 40 00 AF             	call	PRTLN		; print the line
    811 0000C408 10 19                   	lw		r9,r1		; set pointer for next
    812 0000C40A 6D 40 08 AF             	call	CHKIO		; check for listing halt request
    813 0000C40E 06 A8                   	beq		LS3
    814 0000C410 FE 4F 1D 10             	cmp		r1,#CTRLS	; pause the listing?
    815 0000C414 03 A9                   	bne		LS3
    816 0000C416                        LS2
    817 0000C416 6D 40 02 AF             	call	CHKIO		; if so, wait for another keypress
    818 0000C41A FD B8                   	beq		LS2
    819 0000C41C                        LS3
    820 0000C41C 00 11                   	lw		r1,#0
    821 0000C41E 4E 40 03 AF             	call	FNDLNP		; find the next line
    822 0000C422 ED BE                   	br		LS1
                                        
                                        
                                        ;******************************************************************
                                        ; PRINT command is 'PRINT ....:' or 'PRINT ....<CR>'
                                        ; where '....' is a list of expressions, formats, back-arrows,
                                        ; and strings.	These items a separated by commas.
                                        ;
                                        ; A format is a pound sign followed by a number.  It controls
                                        ; the number of spaces the value of an expression is going to
                                        ; be printed in.  It stays effective for the rest of the print
                                        ; command unless changed by another format.  If no format is
                                        ; specified, 11 positions will be used.
                                        ;
                                        ; A string is quoted in a pair of single- or double-quotes.
                                        ;
                                        ; An underline (back-arrow) means generate a <CR> without a <LF>
                                        ;
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 15
noc_boot11.a
                                        ; A <CR LF> is generated after the entire list has been printed
                                        ; or if the list is empty.  If the list ends with a semicolon,
                                        ; however, no <CR LF> is generated.
                                        ;
                                        
    845 0000C424                        PRINT
    846 0000C424 0B 15                   	lw		r5,#11		; D4 = number of print spaces
    847 0000C426 60 40 0D AF             	call	TSTC		; if null list and ":"
    848 0000C42A 3A 08                   	db	':',PR2-*+1
    849 0000C42C 6D 40 07 AF             	call	CRLF		; give CR-LF and continue
    850 0000C430 B9 BE                   	br		RUNSML		;		execution on the same line
    851 0000C432                        PR2
    852 0000C432 60 40 07 AF             	call	TSTC		;if null list and <CR>
    853 0000C436 0D 08                   	db	CR,PR0-*+1
    854 0000C438 6D 40 01 AF             	call	CRLF		;also give CR-LF and
    855 0000C43C A6 BE                   	br		RUNNXL		;execute the next line
    856 0000C43E                        PR0
    857 0000C43E 60 40 01 AF             	call	TSTC		;else is it a format?
    858 0000C442 23 0A                   	db	'#',PR1-*+1
    859 0000C444 20 40 06 AF             	call	OREXPR		; yes, evaluate expression
    860 0000C448 10 15                   	lw		r5,r1		; and save it as print width
    861 0000C44A 0B AE                   	br		PR3		; look for more to print
    862 0000C44C                        PR1
    863 0000C44C 5F 40 0A AF             	call	TSTC	;	is character expression? (MRL)
    864 0000C450 24 0C                   	db	'$',PR4-*+1
    865 0000C452 1F 40 0F AF             	call	OREXPR	;	yep. Evaluate expression (MRL)
    866 0000C456 E2 4F 0A AF             	call	GOOUT	;	print low byte (MRL)
    867 0000C45A 03 AE                   	br		PR3		;look for more. (MRL)
    868 0000C45C                        PR4
    869 0000C45C 53 40 08 AF             	call	QTSTG	;	is it a string?
                                        	; the following branch must occupy only two bytes!
    871 0000C460 09 AE                   	br		PR8		;	if not, must be an expression
    872 0000C462                        PR3
    873 0000C462 5E 40 0F AF             	call	TSTC	;	if ",", go find next
    874 0000C466 2C 08                   	db	',',PR6-*+1
    875 0000C468 43 40 07 AF             	call	FIN		;in the list.
    876 0000C46C E8 BE                   	br		PR0
    877 0000C46E                        PR6
    878 0000C46E 6B 40 06 AF             	call	CRLF		;list ends here
    879 0000C472 06 AE                   	br		FINISH
    880 0000C474                        PR8
    881 0000C474 1E 40 0E AF             	call	OREXPR		; evaluate the expression
    882 0000C478 50 12                   	lw		r2,r5		; set the width
    883 0000C47A 55 40 05 AF             	call	PRTNUM		; print its value
    884 0000C47E F1 BE                   	br		PR3			; more to print?
                                        
    886 0000C480                        FINISH
    887 0000C480 42 40 0B AF             	call	FIN		; Check end of command
    888 0000C484 44 40 0F AE             	jmp		QWHAT	; print "What?" if wrong
                                        
                                        
                                        ;*******************************************************************
                                        ;
                                        ; *** GOSUB *** & RETURN ***
                                        ;
                                        ; 'GOSUB expr:' or 'GOSUB expr<CR>' is like the 'GOTO' command,
                                        ; except that the current text pointer, stack pointer, etc. are
                                        ; saved so that execution can be continued after the subroutine
                                        ; 'RETURN's.  In order that 'GOSUB' can be nested (and even
                                        ; recursive), the save area must be stacked.  The stack pointer
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 16
noc_boot11.a
                                        ; is saved in 'STKGOS'.  The old 'STKGOS' is saved on the stack.
                                        ; If we are in the main routine, 'STKGOS' is zero (this was done
                                        ; in the initialization section of the interpreter), but we still
                                        ; save it as a flag for no further 'RETURN's.
                                        ;
    905 0000C488                        GOSUB
    906 0000C488 4E 40 0C AF             	call	PUSHA		; save the current 'FOR' parameters
    907 0000C48C 1E 40 02 AF             	call	OREXPR		; get line number
    908 0000C490 4A 40 02 AF             	call	FNDLN		; find the target line
    909 0000C494 04 A8                   	beq		gosub1
    910 0000C496 46 4D 03 11             	lea		r1,msgBadGotoGosub
    911 0000C49A 44 40 06 AE             	br		ERROR		; if not there, say "How?"
    912 0000C49E                        gosub1
    913 0000C49E FA 6E                   	sub		sp,sp,#6
    914 0000C4A0 E0 D8                   	sw		r8,[sp]		; save text pointer
    915 0000C4A2 06 40 00 F1             	lw		r1,CURRNT
    916 0000C4A6 E2 D1                   	sw		r1,2[sp]	; found it, save old 'CURRNT'...
    917 0000C4A8 06 40 02 F1             	lw		r1,STKGOS
    918 0000C4AC E4 D1                   	sw		r1,4[sp]	; and 'STKGOS'
    919 0000C4AE 06 40 06 D0             	sw		r0,LOPVAR	; load new values
    920 0000C4B2 06 40 02 DE             	sw		sp,STKGOS
    921 0000C4B6 73 BE                   	br		RUNTSL
                                        
                                        
                                        ; 'RETURN<CR>' undoes everything that 'GOSUB' did, and thus
                                        ; returns the execution to the command after the most recent
                                        ; 'GOSUB'.  If 'STKGOS' is zero, it indicates that we never had
                                        ; a 'GOSUB' and is thus an error.
                                        ;
    929 0000C4B8                        RETURN
    930 0000C4B8 42 40 01 AF             	call	ENDCHK		; there should be just a <CR>
    931 0000C4BC 06 40 02 F1             	lw		r1,STKGOS	; get old stack pointer
    932 0000C4C0 04 A9                   	bne		return1
    933 0000C4C2 48 4D 00 11             	lea		r1,msgRetWoGosub
    934 0000C4C6 43 40 00 AE             	br		ERROR		; if zero, it doesn't exist
    935 0000C4CA                        return1
    936 0000C4CA 10 1E                   	lw		sp,r1		; else restore it
    937 0000C4CC E4 F1                   	lw		r1,4[sp]
    938 0000C4CE 06 40 02 D1             	sw		r1,STKGOS	; and the old 'STKGOS'
    939 0000C4D2 E2 F1                   	lw		r1,2[sp]
    940 0000C4D4 06 40 00 D1             	sw		r1,CURRNT	; and the old 'CURRNT'
    941 0000C4D8 E0 F8                   	lw		r8,[sp]		; and the old text pointer
    942 0000C4DA 06 6E                   	add		sp,sp,#6
    943 0000C4DC 4A 40 0E AF             	call	POPA		;and the old 'FOR' parameters
    944 0000C4E0 CF BE                   	br		FINISH		;and we are back home
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** FOR *** & NEXT ***
                                        ;
                                        ; 'FOR' has two forms:
                                        ; 'FOR var=exp1 TO exp2 STEP exp1' and 'FOR var=exp1 TO exp2'
                                        ; The second form means the same thing as the first form with a
                                        ; STEP of positive 1.  The interpreter will find the variable 'var'
                                        ; and set its value to the current value of 'exp1'.  It also
                                        ; evaluates 'exp2' and 'exp1' and saves all these together with
                                        ; the text pointer, etc. in the 'FOR' save area, which consisits of
                                        ; 'LOPVAR', 'LOPINC', 'LOPLMT', 'LOPLN', and 'LOPPT'.  If there is
                                        ; already something in the save area (indicated by a non-zero
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 17
noc_boot11.a
                                        ; 'LOPVAR'), then the old save area is saved on the stack before
                                        ; the new values are stored.  The interpreter will then dig in the
                                        ; stack and find out if this same variable was used in another
                                        ; currently active 'FOR' loop.  If that is the case, then the old
                                        ; 'FOR' loop is deactivated. (i.e. purged from the stack)
                                        ;
    966 0000C4E2                        FOR
    967 0000C4E2 4B 40 0F AF             	call	PUSHA		; save the old 'FOR' save area
    968 0000C4E6 3E 40 02 AF             	call	SETVAL		; set the control variable
    969 0000C4EA 06 40 06 D1             	sw		r1,LOPVAR	; save its address
    970 0000C4EE 26 4C 06 19             	lea		r9,TAB5		; use 'EXEC' to test for 'TO'
    971 0000C4F2 2B 4C 0E 1A             	lea		r10,TAB5_1
    972 0000C4F6 EF 4F 05 AE             	jmp		EXEC
    973 0000C4FA                        FR1
    974 0000C4FA 1A 40 0B AF             	call	OREXPR		; evaluate the limit
    975 0000C4FE 06 40 0A D1             	sw		r1,LOPLMT	; save that
    976 0000C502 26 4C 09 19             	lea		r9,TAB6		; use 'EXEC' to look for the
    977 0000C506 2C 4C 02 1A             	lea		r10,TAB6_1	; word 'STEP'
    978 0000C50A EE 4F 0B AE             	jmp		EXEC
    979 0000C50E                        FR2
    980 0000C50E 1A 40 01 AF             	call	OREXPR		; found it, get the step value
    981 0000C512 01 AE                   	br		FR4
    982 0000C514                        FR3
    983 0000C514 01 11                   	lw		r1,#1		; not found, step defaults to 1
    984 0000C516                        FR4
    985 0000C516 06 40 08 D1             	sw		r1,LOPINC	; save that too
                                        
    987 0000C51A                        FR5
    988 0000C51A 06 40 00 F2             	lw		r2,CURRNT
    989 0000C51E 06 40 0C D2             	sw		r2,LOPLN	; save address of current line number
    990 0000C522 06 40 0E D8             	sw		r8,LOPPT	; and text pointer
                                        
                                        
    993 0000C526 E0 13                   	lw		r3,sp		; dig into the stack to find 'LOPVAR'
    994 0000C528 06 40 06 F6             	lw		r6,LOPVAR
    995 0000C52C 01 AE                   	br		FR7
    996 0000C52E                        FR6
    997 0000C52E 3A 13                   	lea		r3,10[r3]	; look at next stack frame
    998 0000C530                        FR7
    999 0000C530 30 F2                   	lw		r2,[r3]		; is it zero?
   1000 0000C532 08 A8                   	beq		FR8			; if so, we're done
   1001 0000C534 6D 22                   	cmp		r2,r6		; same as current LOPVAR?
   1002 0000C536 FB B9                   	bne		FR6			; nope, look some more
                                        
   1004 0000C538 30 11                       lw      r1,r3       ; Else remove 5 words from...
   1005 0000C53A 3A 12                   	lea		r2,10[r3]   ; inside the stack.
   1006 0000C53C E0 13                   	lw		r3,sp		
   1007 0000C53E 47 40 0A AF             	call	MVDOWN
   1008 0000C542 0A 6E                   	add		sp,sp,#10	; set the SP 5 words up
   1009 0000C544                        FR8
   1010 0000C544 9D BE                       br	    FINISH		; and continue execution
                                        
                                        
                                        ; 'NEXT var' serves as the logical (not necessarily physical) end
                                        ; of the 'FOR' loop.  The control variable 'var' is checked with
                                        ; the 'LOPVAR'.  If they are not the same, the interpreter digs in
                                        ; the stack to find the right one and purges all those that didn't
                                        ; match.  Either way, it then adds the 'STEP' to that variable and
                                        ; checks the result with against the limit value.  If it is within
                                        ; the limit, control loops back to the command following the
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 18
noc_boot11.a
                                        ; 'FOR'.  If it's outside the limit, the save area is purged and
                                        ; execution continues.
                                        ;
   1023 0000C546                        NEXT
   1024 0000C546 00 11                   	lw		r1,#0		; don't allocate it
   1025 0000C548 26 40 08 AF             	call	TSTV		; get address of variable
   1026 0000C54C 04 A9                   	bne		NX4
   1027 0000C54E 43 4D 0F 11             	lea		r1,msgNextVar
   1028 0000C552 3E 40 0A AE             	br		ERROR		; if no variable, say "What?"
   1029 0000C556                        NX4
   1030 0000C556 10 19                   	lw		r9,r1		; save variable's address
   1031 0000C558                        NX0
   1032 0000C558 06 40 06 F1             	lw		r1,LOPVAR	; If 'LOPVAR' is zero, we never...
   1033 0000C55C 04 A9                   	bne		NX5         ; had a FOR loop
   1034 0000C55E 42 4D 0C 11             	lea		r1,msgNextFor
   1035 0000C562 3E 40 02 AE             	br		ERROR		
   1036 0000C566                        NX5
   1037 0000C566 9D 21                   	cmp		r1,r9		; else we check them
   1038 0000C568 03 A8                   	beq		NX2			; OK, they agree
   1039 0000C56A 46 40 07 AF             	call	POPA		; nope, let's see the next frame
   1040 0000C56E F4 BE                   	br		NX0
   1041 0000C570                        NX2
   1042 0000C570 90 F1                   	lw		r1,[r9]		; get control variable's value
   1043 0000C572 06 40 08 F2             	lw		r2,LOPINC
   1044 0000C576 20 21                   	add		r1,r2		; add in loop increment
                                        ;	BVS.L	QHOW		say "How?" for 32-bit overflow
   1046 0000C578 90 D1                   	sw		r1,[r9]		; save control variable's new value
   1047 0000C57A 06 40 0A F3             	lw		r3,LOPLMT	; get loop's limit value
   1048 0000C57E 26 22                   	or		r2,r2       ; check loop increment
   1049 0000C580 03 AB                   	bpl		NX1			; branch if loop increment is positive
   1050 0000C582 3D 21                   	cmp		r1,r3		; test against limit
   1051 0000C584 0A A0                   	blt		NXPurge
   1052 0000C586 02 AE                   	br      NX3
   1053 0000C588                        NX1
   1054 0000C588 3D 21                   	cmp		r1,r3
   1055 0000C58A 07 A3                   	bgt		NXPurge
   1056 0000C58C                        NX3	
   1057 0000C58C 06 40 0C F8             	lw		r8,LOPLN	; Within limit, go back to the...
   1058 0000C590 06 40 00 D8             	sw		r8,CURRNT
   1059 0000C594 06 40 0E F8             	lw		r8,LOPPT	; saved 'CURRNT' and text pointer.
   1060 0000C598 73 BE                   	br		FINISH
                                        
   1062 0000C59A                        NXPurge
   1063 0000C59A 44 40 0F AF                 call    POPA        ; purge this loop
   1064 0000C59E 70 BE                       br      FINISH
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** REM *** IF *** INPUT *** LET (& DEFLT) ***
                                        ;
                                        ; 'REM' can be followed by anything and is ignored by the
                                        ; interpreter.
                                        ;
                                        ;REM
                                        ;    br	    IF2		    ; skip the rest of the line
                                        
                                        ; 'IF' is followed by an expression, as a condition and one or
                                        ; more commands (including other 'IF's) separated by colons.
                                        ; Note that the word 'THEN' is not used.  The interpreter evaluates
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 19
noc_boot11.a
                                        ; the expression.  If it is non-zero, execution continues.  If it
                                        ; is zero, the commands that follow are ignored and execution
                                        ; continues on the next line.
                                        ;
   1084 0000C5A0                        IF
   1085 0000C5A0 15 40 08 AF                 call	OREXPR		; evaluate the expression
   1086 0000C5A4                        IF1
   1087 0000C5A4 16 21                       or      r1,r1       ; is it zero?
   1088 0000C5A6 EF 4F 0D A9                 bne	    RUNSML		; if not, continue
   1089 0000C5AA                        IF2
   1090 0000C5AA 80 19                       lw		r9,r8		; set lookup pointer
   1091 0000C5AC 00 11                   	lw		r1,#0		; find line #0 (impossible)
   1092 0000C5AE 43 40 01 AF             	call	FNDSKP		; if so, skip the rest of the line
   1093 0000C5B2 DB 4F 0D A7             	bgtu	WSTART		; if no next line, do a warm start
   1094 0000C5B6                        IF3
   1095 0000C5B6 EF 4F 02 AE             	br		RUNTSL		; run the next line
                                        
                                        
                                        ; INPUT is called first and establishes a stack frame
   1099 0000C5BA                        INPERR
   1100 0000C5BA 06 40 04 FE             	lw		sp,STKINP	; restore the old stack pointer
   1101 0000C5BE E4 F8                   	lw		r8,4[sp]
   1102 0000C5C0 06 40 00 D8             	sw		r8,CURRNT	; and old 'CURRNT'
   1103 0000C5C4 E2 F8                   	lw		r8,2[sp]	; and old text pointer
   1104 0000C5C6 0A 6E                   	add		sp,sp,#10	; fall through will subtract 10
                                        
                                        ; 'INPUT' is like the 'PRINT' command, and is followed by a list
                                        ; of items.  If the item is a string in single or double quotes,
                                        ; or is an underline (back arrow), it has the same effect as in
                                        ; 'PRINT'.  If an item is a variable, this variable name is
                                        ; printed out followed by a colon, then the interpreter waits for
                                        ; an expression to be typed in.  The variable is then set to the
                                        ; value of this expression.  If the variable is preceeded by a
                                        ; string (again in single or double quotes), the string will be
                                        ; displayed followed by a colon.  The interpreter the waits for an
                                        ; expression to be entered and sets the variable equal to the
                                        ; expression's value.  If the input expression is invalid, the
                                        ; interpreter will print "What?", "How?", or "Sorry" and reprint
                                        ; the prompt and redo the input.  The execution will not terminate
                                        ; unless you press control-C.  This is handled in 'INPERR'.
                                        ;
   1121 0000C5C8                        INPUT
   1122 0000C5C8 F6 6E                   	sub		sp,sp,#10	; allocate stack frame
   1123 0000C5CA E8 D5                   	sw      r5,8[sp]
   1124 0000C5CC                        IP6
   1125 0000C5CC E0 D8                   	sw		r8,[sp]		; save in case of error
   1126 0000C5CE 47 40 0F AF             	call	QTSTG		; is next item a string?
   1127 0000C5D2 06 AE                   	br		IP2			; nope - this branch must take only two bytes
   1128 0000C5D4 01 11                   	lw		r1,#1		; allocate var
   1129 0000C5D6 22 40 01 AF             	call	TSTV		; yes, but is it followed by a variable?
   1130 0000C5DA 2A A8                   	beq     IP4		    ; if not, brnch
   1131 0000C5DC 10 1A                   	lw		r10,r1		; put away the variable's address
   1132 0000C5DE 10 AE                   	br		IP3			; if so, input to variable
   1133 0000C5E0                        IP2
   1134 0000C5E0 E2 D8                   	sw		r8,2[sp]	; save for 'PRTSTG'
   1135 0000C5E2 01 11                   	lw		r1,#1
   1136 0000C5E4 21 40 0A AF             	call	TSTV		; must be a variable now
   1137 0000C5E8 04 A9                   	bne		IP7
   1138 0000C5EA 40 4D 0F 11             	lea		r1,msgInputVar
   1139 0000C5EE 39 40 0C AE             	br		ERROR		; "What?" it isn't?
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 20
noc_boot11.a
   1140 0000C5F2                        IP7
   1141 0000C5F2 10 1A                   	lw		r10,r1		; put away the variable's address
   1142 0000C5F4 80 E5                   	lb		r5,[r8]		; get ready for 'PRTSTG' by null terminating
   1143 0000C5F6 80 C0                   	sb		r0,[r8]
   1144 0000C5F8 E2 F1                   	lw		r1,2[sp]	; get back text pointer
   1145 0000C5FA 44 40 0D AF             	call	PRTSTG		; print string as prompt
   1146 0000C5FE 80 C5                   	sb		r5,[r8]		; un-null terminate
   1147 0000C600                        IP3
   1148 0000C600 E2 D8                   	sw		r8,2[sp]	; save in case of error
   1149 0000C602 06 40 00 F1             	lw		r1,CURRNT
   1150 0000C606 E4 D1                   	sw		r1,4[sp]	; also save 'CURRNT'
   1151 0000C608 0F 11                   	lw		r1,#-1
   1152 0000C60A 06 40 00 D1             	sw		r1,CURRNT	; flag that we are in INPUT
   1153 0000C60E 06 40 04 DE             	sw		sp,STKINP	; save the stack pointer too
   1154 0000C612 E6 DA                   	sw		r10,6[sp]	; save the variable address
   1155 0000C614 03 40 0A 11             	lw		r1,#':'		; print a colon first
   1156 0000C618 3A 40 01 AF             	call	GETLN		; then get an input line
   1157 0000C61C 0A 40 0E 18             	lea		r8,BUFFER	; point to the buffer
   1158 0000C620 11 40 08 AF             	call	OREXPR		; evaluate the input
   1159 0000C624 E6 FA                   	lw		r10,6[sp]	; restore the variable address
   1160 0000C626 A0 D1                   	sw		r1,[r10]	; save value in variable
   1161 0000C628 E4 F1                   	lw		r1,4[sp]	; restore old 'CURRNT'
   1162 0000C62A 06 40 00 D1             	sw		r1,CURRNT
   1163 0000C62E E2 F8                   	lw		r8,2[sp]	; and the old text pointer
   1164 0000C630                        IP4
   1165 0000C630 50 40 08 AF             	call	TSTC		; is the next thing a comma?
   1166 0000C634 2C 04                   	db	',',IP5-*+1
   1167 0000C636 CA BE                   	br		IP6			; yes, more items
   1168 0000C638                        IP5
   1169 0000C638 E8 F5                       lw      r5,8[sp]
   1170 0000C63A 0A 6E                   	add		sp,sp,#10	; clean up the stack
   1171 0000C63C 21 BE                   	jmp		FINISH
                                        
                                        
   1174 0000C63E                        DEFLT
   1175 0000C63E 80 E1                       lb      r1,[r8]
   1176 0000C640 FF 4F 13 10                 cmp     r1,#CR      ; empty line is OK
   1177 0000C644 1D B8                   	beq	    FINISH	    ; else it is 'LET'
                                        
                                        
                                        ; 'LET' is followed by a list of items separated by commas.
                                        ; Each item consists of a variable, an equals sign, and an
                                        ; expression.  The interpreter evaluates the expression and sets
                                        ; the variable to that value.  The interpreter will also handle
                                        ; 'LET' commands without the word 'LET'.  This is done by 'DEFLT'.
                                        ;
   1186 0000C646                        LET
   1187 0000C646 33 40 02 AF                 call	SETVAL		; do the assignment
   1188 0000C64A 4F 40 0B AF             	call	TSTC		; check for more 'LET' items
   1189 0000C64E 2C 04                   	db	',',LT1-*+1
   1190 0000C650 FA BE                   	br	    LET
   1191 0000C652                        LT1
   1192 0000C652 16 BE                       br	    FINISH		; until we are finished.
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** LOAD *** & SAVE ***
                                        ;
                                        ; These two commands transfer a program to/from an auxiliary
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 21
noc_boot11.a
                                        ; device such as a cassette, another computer, etc.  The program
                                        ; is converted to an easily-stored format: each line starts with
                                        ; a colon, the line no. as 4 hex digits, and the rest of the line.
                                        ; At the end, a line starting with an '@' sign is sent.  This
                                        ; format can be read back with a minimum of processing time by
                                        ; the Butterfly.
                                        ;
   1207 0000C654                        LOAD
   1208 0000C654 0C 4C 02 F8             	lw		r8,TXTBGN	; set pointer to start of prog. area
   1209 0000C658 00 40 0D 11             	lw		r1,#CR		; For a CP/M host, tell it we're ready...
   1210 0000C65C D2 4F 0B AF             	call	GOAUXO		; by sending a CR to finish PIP command.
   1211 0000C660                        LOD1
   1212 0000C660 D2 4F 0B AF             	call	GOAUXI		; look for start of line
   1213 0000C664 FD BA                   	bmi		LOD1
   1214 0000C666 FC 4F 10 10             	cmp		r1,#'@'		; end of program?
   1215 0000C66A 1B A8                   	beq		LODEND
   1216 0000C66C FE 4F 16 10             	cmp     r1,#0x1A    ; or EOF marker
   1217 0000C670 18 A8                   	beq     LODEND
   1218 0000C672 FC 4F 16 10             	cmp		r1,#':'		; if not, is it start of line?
   1219 0000C676 F4 B9                   	bne		LOD1		; if not, wait for it
   1220 0000C678 18 AF                   	call	GCHAR		; get line number
   1221 0000C67A 80 C1                   	sb		r1,[r8]		; store it
   1222 0000C67C A1 31                   	shr		r1,#1
   1223 0000C67E A1 31                   	shr		r1,#1
   1224 0000C680 A1 31                   	shr		r1,#1
   1225 0000C682 A1 31                   	shr		r1,#1
   1226 0000C684 A1 31                   	shr		r1,#1
   1227 0000C686 A1 31                   	shr		r1,#1
   1228 0000C688 A1 31                   	shr		r1,#1
   1229 0000C68A A1 31                   	shr		r1,#1
   1230 0000C68C 81 C1                   	sb		r1,1[r8]
   1231 0000C68E 02 68                   	add		r8,r8,#2
   1232 0000C690                        LOD2
   1233 0000C690 D1 4F 03 AF             	call	GOAUXI		; get another text char.
   1234 0000C694 FD BA                   	bmi		LOD2
   1235 0000C696 80 C1                   	sb		r1,[r8]
   1236 0000C698 01 68                   	add		r8,r8,#1	; store it
   1237 0000C69A FF 4F 13 10             	cmp		r1,#CR		; is it the end of the line?
   1238 0000C69E F8 B9                   	bne		LOD2		; if not, go back for more
   1239 0000C6A0 DF BE                   	br		LOD1		; if so, start a new line
   1240 0000C6A2                        LODEND
   1241 0000C6A2 07 40 00 D8             	sw		r8,TXTUNF	; set end-of program pointer
   1242 0000C6A6 D4 4F 03 AE             	br		WSTART		; back to direct mode
                                        
                                        ; get character from input (16 bit value)
   1245 0000C6AA                        GCHAR
   1246 0000C6AA FA 6E                   	sub		sp,sp,#6
   1247 0000C6AC E0 DF                   	sw		lr,[sp]
   1248 0000C6AE E2 D5                   	sw		r5,2[sp]
   1249 0000C6B0 E4 D6                   	sw		r6,4[sp]
   1250 0000C6B2 04 16                   	lw      r6,#4       ; repeat four times
   1251 0000C6B4 00 15                   	lw		r5,#0
   1252 0000C6B6                        GCHAR1
   1253 0000C6B6 D0 4F 00 AF             	call	GOAUXI		; get a char
   1254 0000C6BA FD BA                   	bmi		GCHAR1
   1255 0000C6BC 0D AF                   	call	asciiToHex
   1256 0000C6BE 81 35                   	shl		r5,#1
   1257 0000C6C0 81 35                   	shl		r5,#1
   1258 0000C6C2 81 35                   	shl		r5,#1
   1259 0000C6C4 81 35                   	shl		r5,#1
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 22
noc_boot11.a
   1260 0000C6C6 16 25                   	or		r5,r1
   1261 0000C6C8 FF 66                   	sub		r6,r6,#1
   1262 0000C6CA F5 B9                   	bne     GCHAR1
   1263 0000C6CC 50 11                   	lw		r1,r5
   1264 0000C6CE E0 FF                   	lw		lr,[sp]
   1265 0000C6D0 E2 F5                   	lw		r5,2[sp]
   1266 0000C6D2 E4 F6                   	lw		r6,4[sp]
   1267 0000C6D4 06 6E                   	add     sp,sp,#6
   1268 0000C6D6 F0 80                   	ret
                                        
                                        ; convert an ascii char to hex code
                                        ; input
                                        ;	r2 = char to convert
                                        
   1274 0000C6D8                        asciiToHex
   1275 0000C6D8 FC 4F 17 10             	cmp		r1,#'9'
   1276 0000C6DC 01 A2                   	ble		a2h1		; less than '9'
   1277 0000C6DE F9 61                   	sub		r1,r1,#7	; shift 'A' to '9'+1
   1278 0000C6E0                        a2h1
   1279 0000C6E0 D0 61                   	sub		r1,r1,#'0'	;
   1280 0000C6E2 00 40 5F 31             	and		r1,#15		; make sure a nybble
   1281 0000C6E6 F0 80                   	ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; SAVE
                                        ; SAVE ON <node number> - copies the code to the specified node
                                        ;----------------------------------------------------------------------------
                                        
   1288 0000C6E8                        SAVE
   1289 0000C6E8 53 40 03 AF             	call	IGNBLK		; ignore blanks
   1290 0000C6EC 80 E1                   	lb		r1,[r8]
   1291 0000C6EE FB 4F 11 10             	cmp		r1,#'O'
   1292 0000C6F2 04 A9                   	bne		SAVE3
   1293 0000C6F4 81 E1                   	lb		r1,1[r8]
   1294 0000C6F6 FB 4F 12 10             	cmp		r1,#'N'
   1295 0000C6FA 2D A8                   	beq		SAVEON1
   1296 0000C6FC                        SAVE3:
   1297 0000C6FC 0C 4C 02 F8             	lw		r8,TXTBGN	;set pointer to start of prog. area
   1298 0000C700 07 40 00 F9             	lw		r9,TXTUNF	;set pointer to end of prog. area
   1299 0000C704                        SAVE1
   1300 0000C704 4C AF                   	call    AUXOCRLF    ; send out a CR & LF (CP/M likes this)
   1301 0000C706 9D 28                   	cmp		r8,r9		; are we finished?
   1302 0000C708 1B A5                   	bgeu	SAVEND
   1303 0000C70A                        SAVE4:
   1304 0000C70A 03 40 0A 11             	lw		r1,#':'		; if not, start a line
   1305 0000C70E CD 4F 02 AF             	call	GOAUXO
   1306 0000C712 80 E1                   	lb		r1,[r8]		; get line number
   1307 0000C714 0E 21                   	zxb		r1
   1308 0000C716 81 E2                   	lb		r2,1[r8]
   1309 0000C718 0E 22                   	zxb		r2
   1310 0000C71A 81 32                   	shl		r2,#1
   1311 0000C71C 81 32                   	shl		r2,#1
   1312 0000C71E 81 32                   	shl		r2,#1
   1313 0000C720 81 32                   	shl		r2,#1
   1314 0000C722 81 32                   	shl		r2,#1
   1315 0000C724 81 32                   	shl		r2,#1
   1316 0000C726 81 32                   	shl		r2,#1
   1317 0000C728 81 32                   	shl		r2,#1
   1318 0000C72A 26 21                   	or		r1,r2
   1319 0000C72C 02 68                   	add		r8,r8,#2
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 23
noc_boot11.a
   1320 0000C72E 43 AF                   	call	PWORD       ; output line number as 4-digit hex
   1321 0000C730                        SAVE2
   1322 0000C730 80 E1                   	lb		r1,[r8]		; get a text char.
   1323 0000C732 01 68                   	add		r8,r8,#1
   1324 0000C734 FF 4F 13 10             	cmp		r1,#CR		; is it the end of the line?
   1325 0000C738 E5 B8                   	beq		SAVE1		; if so, send CR & LF and start new line
   1326 0000C73A CB 4F 0C AF             	call	GOAUXO		; send it out
   1327 0000C73E F8 BE                   	br		SAVE2		; go back for more text
   1328 0000C740                        SAVEND
   1329 0000C740 04 40 00 11             	lw		r1,#'@'		; send end-of-program indicator
   1330 0000C744 CB 4F 07 AF             	call	GOAUXO
   1331 0000C748 2A AF                   	call    AUXOCRLF    ; followed by a CR & LF
   1332 0000C74A 01 40 0A 11             	lw		r1,#0x1A	; and a control-Z to end the CP/M file
   1333 0000C74E CB 4F 02 AF             	call	GOAUXO
   1334 0000C752 CE 4F 0D AE             	br		WSTART		; then go do a warm start
                                        
                                        ; Copy program to specified node. Transfers six bytes at a time per
                                        ; network message.
                                        
   1339 0000C756                        SAVEON1
   1340 0000C756 02 68                   	add		r8,r8,#2
   1341 0000C758 7D AF                   	call	OREXPR		; get core #
   1342 0000C75A 03 40 06 C1             	sb		r1,tgtNode
   1343 0000C75E 58 40 0A AF             	call	TriggerTgtLoad
   1344 0000C762 0C 4C 02 F8             	lw		r8,TXTBGN	;set pointer to start of prog. area
   1345 0000C766 07 40 00 F9             	lw		r9,TXTUNF	;set pointer to end of prog. area
   1346 0000C76A                        SAVEON3:
   1347 0000C76A 9D 28                   	cmp		r8,r9
   1348 0000C76C 16 A5                   	bgeu	SAVEON2
   1349 0000C76E 80 F1                   	lw		r1,[r8]
   1350 0000C770 04 40 00 D1             	sw		r1,txBuf
   1351 0000C774 82 F1                   	lw		r1,2[r8]
   1352 0000C776 04 40 02 D1             	sw		r1,txBuf+2
   1353 0000C77A 84 F1                   	lw		r1,4[r8]
   1354 0000C77C 04 40 04 D1             	sw		r1,txBuf+4
   1355 0000C780 E4 31                   	tsr		r1,ID
   1356 0000C782 04 40 0E C1             	sb		r1,txBuf+MSG_SRC
   1357 0000C786 03 40 06 E1             	lb		r1,tgtNode
   1358 0000C78A 04 40 0F C1             	sb		r1,txBuf+MSG_DST
                                        	lb		r1,#MT_LOAD_BASIC_CHAR
   1360 0000C78E 04 40 08 C1             	sb		r1,txBuf+MSG_TYPE
   1361 0000C792 C6 4F 00 AF             	call	Xmit
   1362 0000C796 06 68                   	add		r8,r8,#6
   1363 0000C798 E8 BE                   	br		SAVEON3
   1364 0000C79A                        SAVEON2:
   1365 0000C79A CC 4F 09 AE             	br		WSTART
                                        
                                        ; output a CR LF sequence to auxillary output
                                        ; Registers Affected
                                        ;   r3 = LF
   1370 0000C79E                        AUXOCRLF
   1371 0000C79E FE 6E                       sub     sp,sp,#2
   1372 0000C7A0 E0 DF                       sw      lr,[sp]
   1373 0000C7A2 00 40 0D 11                 lw      r1,#CR
   1374 0000C7A6 C8 4F 06 AF                 call    GOAUXO
   1375 0000C7AA 0A 11                       lw      r1,#LF
   1376 0000C7AC C8 4F 03 AF                 call    GOAUXO
   1377 0000C7B0 E0 FF                       lw      lr,[sp]
   1378 0000C7B2 02 6E                   	add		sp,sp,#2
   1379 0000C7B4 F0 80                       ret
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 24
noc_boot11.a
                                        
                                        
                                        ; output a word in hex format
                                        ; tricky because of the need to reverse the order of the chars
   1384 0000C7B6                        PWORD
   1385 0000C7B6 FC 6E                   	sub		sp,sp,#4
   1386 0000C7B8 E0 DF                   	sw		lr,[sp]
   1387 0000C7BA E2 D5                   	sw		r5,2[sp]
   1388 0000C7BC 07 40 0F 15             	lea     r5,NUMWKA+3
   1389 0000C7C0 10 14                   	lw		r4,r1		; r4 = value
   1390 0000C7C2                        pword1
   1391 0000C7C2 40 11                       lw      r1,r4       ; r1 = value
   1392 0000C7C4 A1 34                       shr     r4,#1       ; shift over to next nybble
   1393 0000C7C6 A1 34                       shr     r4,#1
   1394 0000C7C8 A1 34                       shr     r4,#1
   1395 0000C7CA A1 34                       shr     r4,#1
   1396 0000C7CC 10 AF                       call    toAsciiHex  ; convert LS nybble to ascii hex
   1397 0000C7CE 50 C1                       sb      r1,[r5]     ; save in work area
   1398 0000C7D0 FF 65                       sub     r5,r5,#1
   1399 0000C7D2 F8 4F 54 10                 cmp     r5,#NUMWKA
   1400 0000C7D6 F5 B5                       bgeu    pword1
   1401 0000C7D8                        pword2
   1402 0000C7D8 01 65                       add     r5,r5,#1
   1403 0000C7DA 50 E1                       lb      r1,[r5]     ; get char to output
   1404 0000C7DC C6 4F 0B AF             	call	GOAUXO		; send it
   1405 0000C7E0 F8 4F 51 10             	cmp     r5,#NUMWKA+3
   1406 0000C7E4 F9 B4                   	bltu    pword2
                                        
   1408 0000C7E6 E2 F5                   	lw		r5,2[sp]
   1409 0000C7E8 E0 FF                   	lw		lr,[sp]
   1410 0000C7EA 04 6E                   	add		sp,sp,#4
   1411 0000C7EC F0 80                   	ret
                                        
                                        
                                        ; convert nybble in r2 to ascii hex char2
                                        ; r2 = character to convert
                                        
   1417 0000C7EE                        toAsciiHex
   1418 0000C7EE 00 40 5F 31             	and		r1,#15		; make sure it's a nybble
   1419 0000C7F2 FF 4F 16 10             	cmp		r1,#10		; > 10 ?
   1420 0000C7F6 01 A0                   	blt		tah1
   1421 0000C7F8 07 61                   	add		r1,r1,#7	; bump it up to the letter 'A'
   1422 0000C7FA                        tah1
   1423 0000C7FA 30 61                   	add		r1,r1,#'0'	; bump up to ascii '0'
   1424 0000C7FC F0 80                   	ret
                                        
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** POKE *** & SYSX ***
                                        ;
                                        ; 'POKE expr1,expr2' stores the byte from 'expr2' into the memory
                                        ; address specified by 'expr1'.
                                        ;
                                        ; 'SYSX expr' jumps to the machine language subroutine whose
                                        ; starting address is specified by 'expr'.  The subroutine can use
                                        ; all registers but must leave the stack the way it found it.
                                        ; The subroutine returns to the interpreter by executing an RET.
                                        ;
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 25
noc_boot11.a
   1440 0000C7FE                        POKE
   1441 0000C7FE FE 6E                   	sub		sp,sp,#2
   1442 0000C800 29 AF                   	call	OREXPR		; get the memory address
   1443 0000C802 41 40 0F AF             	call	TSTC		; it must be followed by a comma
   1444 0000C806 2C 10                   	db	',',PKER-*+1
   1445 0000C808 E0 D1                   	sw		r1,[sp]	    ; save the address
   1446 0000C80A 24 AF                   	call	OREXPR		; get the byte to be POKE'd
   1447 0000C80C E0 F2                   	lw		r2,[sp]	    ; get the address back
   1448 0000C80E 20 C1                   	sb		r1,[r2]		; store the byte in memory
   1449 0000C810 02 6E                   	add		sp,sp,#2
   1450 0000C812 E3 4F 05 AE             	br		FINISH
   1451 0000C816                        PKER
   1452 0000C816 3A 4D 08 11             	lea		r1,msgComma
   1453 0000C81A 28 40 06 AE             	br		ERROR		; if no comma, say "What?"
                                        
                                        
   1456 0000C81E                        POKEW
   1457 0000C81E FE 6E                   	sub		sp,sp,#2
   1458 0000C820 19 AF                   	call	OREXPR		; get the memory address
   1459 0000C822 40 40 0F AF             	call	TSTC		; it must be followed by a comma
   1460 0000C826 2C F0                   	db	',',PKER-*+1
   1461 0000C828 E0 D1                   	sw		r1,[sp]	    ; save the address
   1462 0000C82A 14 AF                   	call	OREXPR		; get the byte to be POKE'd
   1463 0000C82C E0 F2                   	lw		r2,[sp]	    ; get the address back
   1464 0000C82E 20 D1                   	sw		r1,[r2]		; store the word in memory
   1465 0000C830 02 6E                   	add		sp,sp,#2
   1466 0000C832 E2 4F 05 AE             	jmp		FINISH
                                        
                                        
   1469 0000C836                        SYSX
   1470 0000C836 FE 6E                   	sub		sp,sp,#2
   1471 0000C838 0D AF                   	call	OREXPR		; get the subroutine's address
   1472 0000C83A 16 20                   	or		r0,r1		; make sure we got a valid address
   1473 0000C83C 04 A9                   	bne		sysx1
   1474 0000C83E 3F 4D 0D 11             	lea		r1,msgSYSBad
   1475 0000C842 27 40 02 AE             	br		ERROR
   1476 0000C846                        sysx1
   1477 0000C846 E0 D8                   	sw		r8,[sp]	    ; save the text pointer
   1478 0000C848 BD 49 0A AF             	call	[r1]		; jump to the subroutine
   1479 0000C84C E0 F8                   	lw		r8,[sp]	    ; restore the text pointer
   1480 0000C84E 02 6E                   	add		sp,sp,#2
   1481 0000C850 E1 4F 06 AE             	br		FINISH
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** EXPR ***
                                        ;
                                        ; 'EXPR' evaluates arithmetical or logical expressions.
                                        ; <OREXPR>::= <ANDEXPR> OR <ANDEXPR> ...
                                        ; <ANDEXPR>::=<EXPR> AND <EXPR> ...
                                        ; <EXPR>::=<EXPR2>
                                        ;	   <EXPR2><rel.op.><EXPR2>
                                        ; where <rel.op.> is one of the operators in TAB8 and the result
                                        ; of these operations is 1 if true and 0 if false.
                                        ; <EXPR2>::=(+ or -)<EXPR3>(+ or -)<EXPR3>(...
                                        ; where () are optional and (... are optional repeats.
                                        ; <EXPR3>::=<EXPR4>( <* or /><EXPR4> )(...
                                        ; <EXPR4>::=<variable>
                                        ;	    <function>
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 26
noc_boot11.a
                                        ;	    (<EXPR>)
                                        ; <EXPR> is recursive so that the variable '@' can have an <EXPR>
                                        ; as an index, functions can have an <EXPR> as arguments, and
                                        ; <EXPR4> can be an <EXPR> in parenthesis.
                                        ;
                                        
                                        
                                        ; <OREXPR>::=<ANDEXPR> OR <ANDEXPR> ...
                                        ;
   1509 0000C854                        OREXPR
   1510 0000C854 FC 6E                   	sub		sp,sp,#4
   1511 0000C856 E0 DF                   	sw		lr,[sp]
   1512 0000C858 0F AF                   	call	ANDEXPR		; get first <ANDEXPR>
   1513 0000C85A                        XP_OR1
   1514 0000C85A E2 D1                   	sw		r1,2[sp]	; save <ANDEXPR> value
   1515 0000C85C 27 4C 0C 19             	lea		r9,TAB10		; look up a logical operator
   1516 0000C860 2D 4C 08 1A             	lea		r10,TAB10_1
   1517 0000C864 D3 4F 0E AE             	jmp		EXEC		; go do it
                                        
   1519 0000C868                        XP_OR
   1520 0000C868 07 AF                       call    ANDEXPR
   1521 0000C86A E2 F2                       lw      r2,2[sp]
   1522 0000C86C 26 21                       or      r1,r2
   1523 0000C86E F5 BE                       br      XP_OR1
                                        
   1525 0000C870                        XP_ORX
   1526 0000C870 E2 F1                   	lw		r1,2[sp]
   1527 0000C872 E0 FF                       lw      lr,[sp]
   1528 0000C874 04 6E                       add     sp,sp,#4
   1529 0000C876 F0 80                       ret
                                        
                                        
                                        ; <ANDEXPR>::=<EXPR> AND <EXPR> ...
                                        ;
   1534 0000C878                        ANDEXPR
   1535 0000C878 FC 6E                   	sub		sp,sp,#4
   1536 0000C87A E0 DF                   	sw		lr,[sp]
   1537 0000C87C 37 AF                   	call	EXPR		; get first <EXPR>
   1538 0000C87E                        XP_AND1
   1539 0000C87E E2 D1                   	sw		r1,2[sp]	; save <EXPR> value
   1540 0000C880 27 4C 08 19             	lea		r9,TAB9		; look up a logical operator
   1541 0000C884 2D 4C 04 1A             	lea		r10,TAB9_1
   1542 0000C888 D2 4F 0C AE             	jmp		EXEC		; go do it
                                        
   1544 0000C88C                        XP_AND
   1545 0000C88C 2F AF                       call    EXPR
   1546 0000C88E E2 F2                       lw      r2,2[sp]
   1547 0000C890 25 21                       and     r1,r2
   1548 0000C892 F5 BE                       br      XP_AND1
                                        
   1550 0000C894                        XP_ANDX
   1551 0000C894 E2 F1                   	lw		r1,2[sp]
   1552 0000C896 E0 FF                       lw      lr,[sp]
   1553 0000C898 04 6E                       add     sp,sp,#4
   1554 0000C89A F0 80                       ret
                                        
                                        
                                        ; Determine if the character is a digit
                                        ;   Parameters
                                        ;       r2 = char to test
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 27
noc_boot11.a
                                        ;   Returns
                                        ;       r1 = 1 if digit, otherwise 0
                                        ;
   1563 0000C89C                        isDigit
   1564 0000C89C FD 4F 10 10                 cmp     r1,#'0'
   1565 0000C8A0 05 A0                       blt     isDigitFalse
   1566 0000C8A2 FC 4F 17 10                 cmp     r1,#'9'
   1567 0000C8A6 02 A3                       bgt     isDigitFalse
   1568 0000C8A8 01 11                       lw      r1,#1
   1569 0000C8AA F0 80                       ret
   1570 0000C8AC                        isDigitFalse
   1571 0000C8AC 00 11                       lw      r1,#0
   1572 0000C8AE F0 80                       ret
                                        
                                        
                                        ; Determine if the character is a alphabetic
                                        ;   Parameters
                                        ;       r2 = char to test
                                        ;   Returns
                                        ;       r1 = 1 if alpha, otherwise 0
                                        ;
   1581 0000C8B0                        isAlpha
   1582 0000C8B0 FB 4F 1F 10                 cmp     r1,#'A'
   1583 0000C8B4 0B A0                       blt     isAlphaFalse
   1584 0000C8B6 FA 4F 16 10                 cmp     r1,#'Z'
   1585 0000C8BA 06 A2                       ble     isAlphaTrue
   1586 0000C8BC F9 4F 1F 10                 cmp     r1,#'a'
   1587 0000C8C0 05 A0                       blt     isAlphaFalse
   1588 0000C8C2 F8 4F 16 10                 cmp     r1,#'z'
   1589 0000C8C6 02 A3                       bgt     isAlphaFalse
   1590 0000C8C8                        isAlphaTrue
   1591 0000C8C8 01 11                       lw      r1,#1
   1592 0000C8CA F0 80                       ret
   1593 0000C8CC                        isAlphaFalse
   1594 0000C8CC 00 11                       lw      r1,#0
   1595 0000C8CE F0 80                       ret
                                        
                                        
                                        ; Determine if the character is a alphanumeric
                                        ;   Parameters
                                        ;       r1 = char to test
                                        ;   Returns
                                        ;       r1 = 1 if alpha, otherwise 0
                                        ;
   1604 0000C8D0                        isAlnum
   1605 0000C8D0 FE 6E                       sub     sp,sp,#2
   1606 0000C8D2 E0 DF                       sw      lr,[sp]
   1607 0000C8D4 10 12                       lw      r2,r1		; save test char
   1608 0000C8D6 E2 BF                       call    isDigit
   1609 0000C8D8 06 A9                       bne		isDigitx	; if it is a digit
   1610 0000C8DA 20 11                       lw      r1,r2		; get back test char
   1611 0000C8DC E9 BF                       call    isAlpha
   1612 0000C8DE E0 FF                       lw      lr,[sp]
   1613 0000C8E0 02 6E                       add		sp,sp,#2
   1614 0000C8E2 16 21                       or      r1,r1
   1615 0000C8E4 F0 80                       ret
   1616 0000C8E6                        isDigitx
   1617 0000C8E6 E0 FF                       lw      lr,[sp]
   1618 0000C8E8 02 6E                       add     sp,sp,#2	; return Z=0
   1619 0000C8EA F0 80                       ret
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 28
noc_boot11.a
                                        
                                        
   1622 0000C8EC                        EXPR
   1623 0000C8EC FC 6E                   	sub		sp,sp,#4
   1624 0000C8EE E0 DF                   	sw		lr,[sp]
   1625 0000C8F0 39 AF                   	call	EXPR2
   1626 0000C8F2 E2 D1                   	sw		r1,2[sp]	; save <EXPR2> value
   1627 0000C8F4 26 4C 0E 19             	lea		r9,TAB8		; look up a relational operator
   1628 0000C8F8 2C 4C 06 1A             	lea		r10,TAB8_1
   1629 0000C8FC CF 4F 02 AE             	jmp		EXEC		; go do it
                                        
   1631 0000C900                        XP11
   1632 0000C900 E2 F1                   	lw		r1,2[sp]
   1633 0000C902 28 AF                   	call	XP18	; is it ">="?
   1634 0000C904 1D 22                   	cmp		r2,r1
   1635 0000C906 1E A1                   	bge		XPRT1	; no, return r2=1
   1636 0000C908 19 AE                   	br		XPRT0	; else return r2=0
                                        
   1638 0000C90A                        XP12
   1639 0000C90A E2 F1                   	lw		r1,2[sp]
   1640 0000C90C 23 AF                   	call	XP18	; is it "<>"?
   1641 0000C90E 1D 22                   	cmp		r2,r1
   1642 0000C910 19 A9                   	bne		XPRT1	; no, return r2=1
   1643 0000C912 14 AE                   	br		XPRT0	; else return r2=0
                                        
   1645 0000C914                        XP13
   1646 0000C914 E2 F1                   	lw		r1,2[sp]
   1647 0000C916 1E AF                   	call	XP18	; is it ">"?
   1648 0000C918 1D 22                   	cmp		r2,r1
   1649 0000C91A 14 A3                   	bgt		XPRT1	; no, return r2=1
   1650 0000C91C 0F AE                   	br		XPRT0	; else return r2=0
                                        
   1652 0000C91E                        XP14
   1653 0000C91E E2 F1                   	lw		r1,2[sp]
   1654 0000C920 19 AF                   	call	XP18	; is it "<="?
   1655 0000C922 1D 22                   	cmp		r2,r1
   1656 0000C924 0F A2                   	ble		XPRT1	; no, return r2=1
   1657 0000C926 0A AE                   	br		XPRT0	; else return r2=0
                                        
   1659 0000C928                        XP15
   1660 0000C928 E2 F1                   	lw		r1,2[sp]
   1661 0000C92A 14 AF                   	call	XP18	; is it "="?
   1662 0000C92C 1D 22                   	cmp		r2,r1
   1663 0000C92E 0A A8                   	beq		XPRT1	; if not, return r2=1
   1664 0000C930 05 AE                   	br		XPRT0	; else return r2=0
                                        
                                        
   1667 0000C932                        XP16
   1668 0000C932 E2 F1                   	lw		r1,2[sp]
   1669 0000C934 0F AF                   	call	XP18	; is it "<"?
   1670 0000C936 1D 22                   	cmp		r2,r1
   1671 0000C938 05 A0                   	blt		XPRT1	; if not, return r2=1
   1672 0000C93A 00 AE                   	br		XPRT0	; else return r2=0
                                        
   1674 0000C93C                        XPRT0
   1675 0000C93C E0 FF                   	lw		lr,[sp]
   1676 0000C93E 04 6E                   	add		sp,sp,#4
   1677 0000C940 00 11                   	lw		r1,#0   ; return r1=0 (false)
   1678 0000C942 F0 80                   	ret
                                        
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 29
noc_boot11.a
   1680 0000C944                        XPRT1
   1681 0000C944 E0 FF                   	lw		lr,[sp]
   1682 0000C946 04 6E                   	add		sp,sp,#4
   1683 0000C948 01 11                   	lw		r1,#1	; return r1=1 (true)
   1684 0000C94A F0 80                   	ret
                                        
   1686 0000C94C                        XP17				; it's not a rel. operator
   1687 0000C94C E2 F1                   	lw		r1,2[sp]	; return r2=<EXPR2>
   1688 0000C94E E0 FF                   	lw		lr,[sp]
   1689 0000C950 04 6E                   	add		sp,sp,#4
   1690 0000C952 F0 80                   	ret
                                        
   1692 0000C954                        XP18
   1693 0000C954 FC 6E                   	sub		sp,sp,#4
   1694 0000C956 E0 DF                   	sw		lr,[sp]
   1695 0000C958 E2 D1                   	sw		r1,2[sp]
   1696 0000C95A 04 AF                   	call	EXPR2		; do a second <EXPR2>
   1697 0000C95C E2 F2                   	lw		r2,2[sp]
   1698 0000C95E E0 FF                   	lw		lr,[sp]
   1699 0000C960 04 6E                   	add		sp,sp,#4
   1700 0000C962 F0 80                   	ret
                                        
                                        ; <EXPR2>::=(+ or -)<EXPR3>(+ or -)<EXPR3>(...
                                        
   1704 0000C964                        EXPR2
   1705 0000C964 FC 6E                   	sub		sp,sp,#4
   1706 0000C966 E0 DF                   	sw		lr,[sp]
   1707 0000C968 36 40 0C AF             	call	TSTC		; negative sign?
   1708 0000C96C 2D 08                   	db	'-',XP21-*+1
   1709 0000C96E 00 11                   	lw		r1,#0		; yes, fake '0-'
   1710 0000C970 E2 D1                   	sw		r1,2[sp]
   1711 0000C972 0F AE                   	br		XP26
   1712 0000C974                        XP21
   1713 0000C974 36 40 06 AF             	call	TSTC		; positive sign? ignore it
   1714 0000C978 2B 02                   	db	'+',XP22-*+1
   1715 0000C97A                        XP22
   1716 0000C97A 12 AF                   	call	EXPR3		; first <EXPR3>
   1717 0000C97C                        XP23
   1718 0000C97C E2 D1                   	sw		r1,2[sp]	; yes, save the value
   1719 0000C97E 36 40 01 AF             	call	TSTC		; add?
   1720 0000C982 2B 0A                   	db	'+',XP25-*+1
   1721 0000C984 0D AF                   	call	EXPR3		; get the second <EXPR3>
   1722 0000C986                        XP24
   1723 0000C986 E2 F2                   	lw		r2,2[sp]
   1724 0000C988 20 21                   	add		r1,r2		; add it to the first <EXPR3>
                                        ;	BVS.L	QHOW		brnch if there's an overflow
   1726 0000C98A F8 BE                   	br		XP23		; else go back for more operations
   1727 0000C98C                        XP25
   1728 0000C98C 35 40 0A AF             	call	TSTC		; subtract?
   1729 0000C990 2D 08                   	db	'-',XP45-*+1
   1730 0000C992                        XP26
   1731 0000C992 06 AF                   	call	EXPR3		; get second <EXPR3>
   1732 0000C994 20 31                   	neg		r1			; change its sign
   1733 0000C996 F7 BE                   	br		XP24		; and do an addition
                                        
   1735 0000C998                        XP45
   1736 0000C998 E2 F1                   	lw		r1,2[sp]
   1737 0000C99A E0 FF                   	lw		lr,[sp]
   1738 0000C99C 04 6E                   	add		sp,sp,#4
   1739 0000C99E F0 80                   	ret
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 30
noc_boot11.a
                                        
                                        
                                        ; <EXPR3>::=<EXPR4>( <* or /><EXPR4> )(...
                                        
   1744 0000C9A0                        EXPR3
   1745 0000C9A0 FC 6E                   	sub		sp,sp,#4
   1746 0000C9A2 E0 DF                   	sw		lr,[sp]
   1747 0000C9A4 14 AF                   	call	EXPR4		; get first <EXPR4>
   1748 0000C9A6                        XP31
   1749 0000C9A6 E2 D1                   	sw		r1,2[sp]	; yes, save that first result
   1750 0000C9A8 34 40 0C AF             	call	TSTC		; multiply?
   1751 0000C9AC 2A 0A                   	db	'*',XP34-*+1
   1752 0000C9AE 0F AF                   	call	EXPR4		; get second <EXPR4>
   1753 0000C9B0 E2 F2                   	lw		r2,2[sp]
   1754 0000C9B2 D2 AF                   	call	MULT32		; multiply the two
   1755 0000C9B4 F8 BE                   	br		XP31		 ; then look for more terms
   1756 0000C9B6                        XP34
   1757 0000C9B6 34 40 05 AF             	call	TSTC		; divide?
   1758 0000C9BA 2F 0C                   	db	'/',XP47-*+1
   1759 0000C9BC 08 AF                   	call	EXPR4		; get second <EXPR4>
   1760 0000C9BE 10 12                   	lw      r2,r1
   1761 0000C9C0 E2 F1                   	lw		r1,2[sp]
   1762 0000C9C2 E7 AF                   	call	DIV32		; do the division
   1763 0000C9C4 F0 BE                   	br		XP31		; go back for any more terms
                                        
   1765 0000C9C6                        XP47
   1766 0000C9C6 E2 F1                   	lw		r1,2[sp]
   1767 0000C9C8 E0 FF                   	lw		lr,[sp]
   1768 0000C9CA 04 6E                   	add		sp,sp,#4
   1769 0000C9CC F0 80                   	ret
                                        
                                        
                                        ; Functions are called through EXPR4
                                        ; <EXPR4>::=<variable>
                                        ;	    <function>
                                        ;	    (<EXPR>)
                                        
   1777 0000C9CE                        EXPR4
   1778 0000C9CE FA 6E                       sub     sp,sp,#6
   1779 0000C9D0 E0 DF                       sw      lr,[sp]
   1780 0000C9D2 24 4C 08 19             	lea		r9,TAB4		; find possible function
   1781 0000C9D6 2A 4C 0E 1A             	lea		r10,TAB4_1
   1782 0000C9DA C8 4F 03 AE             	jmp		EXEC        ; branch to function which does subsequent
                                        	                    ; ret for EXPR4
                                        
   1785 0000C9DE                        XP40                    ; we get here if it wasn't a function
   1786 0000C9DE 00 11                   	lw		r1,#0
   1787 0000C9E0 1D AF                   	call	TSTV		
   1788 0000C9E2 04 A8                   	beq     XP41        ; nor a variable
   1789 0000C9E4 10 F1                   	lw		r1,[r1]		; if a variable, return its value in r1
   1790 0000C9E6 E0 FF                   	lw      lr,[sp]
   1791 0000C9E8 06 6E                   	add     sp,sp,#6
   1792 0000C9EA F0 80                   	ret
   1793 0000C9EC                        XP41
   1794 0000C9EC 33 40 0F AF             	call	TSTNUM		; or is it a number?
   1795 0000C9F0 36 23                   	or		r3,r3		; (if not, # of digits will be zero)
   1796 0000C9F2 01 A9                   	bne		XP46		; if so, return it in r1
   1797 0000C9F4 03 AF                   	call    PARN        ; check for (EXPR)
   1798 0000C9F6                        XP46
   1799 0000C9F6 E0 FF                   	lw      lr,[sp]
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 31
noc_boot11.a
   1800 0000C9F8 06 6E                   	add     sp,sp,#6
   1801 0000C9FA F0 80                   	ret
                                        
                                        
                                        ; Check for a parenthesized expression
   1805 0000C9FC                        PARN
   1806 0000C9FC FE 6E                   	sub		sp,sp,#2
   1807 0000C9FE E0 DF                   	sw		lr,[sp]
   1808 0000CA00 32 40 00 AF             	call	TSTC		; else look for ( OREXPR )
   1809 0000CA04 28 10                   	db	'(',XP43-*+1
   1810 0000CA06 26 BF                   	call	OREXPR
   1811 0000CA08 31 40 0C AF             	call	TSTC
   1812 0000CA0C 29 08                   	db	')',XP43-*+1
   1813 0000CA0E                        XP42
   1814 0000CA0E E0 FF                   	lw		lr,[sp]
   1815 0000CA10 02 6E                   	add		sp,sp,#2
   1816 0000CA12 F0 80                   	ret
   1817 0000CA14                        XP43
   1818 0000CA14 32 4D 05 11             	lea		r1,msgWhat
   1819 0000CA18 18 40 07 AE             	br		ERROR
                                        
                                        
                                        ; ===== Test for a valid variable name.  Returns Z=1 if not
                                        ;	found, else returns Z=0 and the address of the
                                        ;	variable in r1.
                                        ; Parameters
                                        ;	r1 = 1 = allocate if not found
                                        ; Returns
                                        ;	r1 = address of variable, zero if not found
                                        
   1830 0000CA1C                        TSTV
   1831 0000CA1C FA 6E                   	sub		sp,sp,#6
   1832 0000CA1E E0 DF                   	sw		lr,[sp]
   1833 0000CA20 E2 D5                   	sw		r5,2[sp]
   1834 0000CA22 10 15                   	lw		r5,r1		; allocate flag
   1835 0000CA24 39 40 05 AF             	call	IGNBLK
   1836 0000CA28 80 E1                   	lb		r1,[r8]		; look at the program text
   1837 0000CA2A FC 4F 10 10             	cmp     r1,#'@'
   1838 0000CA2E 1C A0                   	blt     tstv_notfound   ; C=1: not a variable
   1839 0000CA30 12 A9                   	bne		TV1			; brnch if not "@" array
   1840 0000CA32 01 68                   	add		r8,r8,#1	; If it is, it should be
   1841 0000CA34 E3 BF                   	call	PARN		; followed by (EXPR) as its index.
   1842 0000CA36 81 31                   	shl     r1,#1
   1843 0000CA38 81 31                   	shl     r1,#1
                                        ;	BCS.L	QHOW		say "How?" if index is too big
   1845 0000CA3A E4 D1                       sw      r1,4[sp]    ; save the index
   1846 0000CA3C F4 6E                       sub		sp,sp,#12
   1847 0000CA3E E0 DF                       sw		lr,[sp]
   1848 0000CA40 12 40 09 AF             	call	SIZEX		; get amount of free memory
   1849 0000CA44 E4 F2                   	lw      r2,4[sp]    ; get back the index
   1850 0000CA46 1D 22                   	cmp     r2,r1       ; see if there's enough memory
   1851 0000CA48 02 A4                   	bltu	TV2
   1852 0000CA4A 16 40 09 AE             	jmp    	QSORRY		; if not, say "Sorry"
   1853 0000CA4E                        TV2
   1854 0000CA4E 07 40 02 F1             	lw      r1,VARBGN   ; put address of array element...
   1855 0000CA52 22 21                   	sub     r1,r2       ; into r1 (neg. offset is used)
   1856 0000CA54 05 AE                   	br      TSTVRT
   1857 0000CA56                        TV1	
   1858 0000CA56 0D AF                       call    getVarName      ; get variable name
   1859 0000CA58 07 A8                       beq     tstv_notfound   ; if not, set Z=1 and return
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 32
noc_boot11.a
   1860 0000CA5A 50 12                       lw		r2,r5
   1861 0000CA5C 58 AF                       call    findVar     ; find or allocate
   1862 0000CA5E 04 A8                       beq		tstv_notfound
   1863 0000CA60                        TSTVRT
   1864 0000CA60 E2 F5                   	lw		r5,2[sp]
   1865 0000CA62 E0 FF                   	lw		lr,[sp]
   1866 0000CA64 06 6E                   	add		sp,sp,#6    ; Z=0 (found)
   1867 0000CA66 F0 80                   	ret
   1868 0000CA68                        tstv_notfound
   1869 0000CA68 E2 F5                   	lw		r5,2[sp]
   1870 0000CA6A E0 FF                       lw      lr,[sp]
   1871 0000CA6C 06 6E                       add     sp,sp,#6
   1872 0000CA6E 00 11                       lw      r1,#0       ; Z=1 if not found
   1873 0000CA70 F0 80                       ret
                                        
                                        
                                        ; Returns
                                        ;   r3,r1 = 3 character variable name + type
                                        ;
   1879 0000CA72                        getVarName
   1880 0000CA72 F8 6E                       sub     sp,sp,#8
   1881 0000CA74 E0 DF                       sw      lr,[sp]
   1882 0000CA76 E6 D5                       sw		r5,6[sp]
                                        
   1884 0000CA78 80 E1                       lb      r1,[r8]     ; get first character
   1885 0000CA7A E2 D1                       sw		r1,2[sp]	; save off current name
   1886 0000CA7C E4 D3                   	sw		r3,4[sp]
   1887 0000CA7E 18 BF                       call    isAlpha
   1888 0000CA80 41 A8                       beq     gvn1
   1889 0000CA82 02 15                       lw      r5,#2       ; loop twice more
                                        
                                        	; check for second/third character
   1892 0000CA84                        gvn4
   1893 0000CA84 01 68                   	add     r8,r8,#1
   1894 0000CA86 80 E1                   	lb      r1,[r8]     ; do we have another char ?
   1895 0000CA88 23 BF                   	call    isAlnum
   1896 0000CA8A 1B A8                   	beq     gvn2        ; nope
   1897 0000CA8C E2 F1                   	lw      r1,2[sp]    ; get varname
   1898 0000CA8E 81 31                   	shl     r1,#1       ; shift left by eight
   1899 0000CA90 91 33                   	rol		r3,#1
   1900 0000CA92 81 31                   	shl     r1,#1       ; shift left by eight
   1901 0000CA94 91 33                   	rol		r3,#1
   1902 0000CA96 81 31                   	shl     r1,#1       ; shift left by eight
   1903 0000CA98 91 33                   	rol		r3,#1
   1904 0000CA9A 81 31                   	shl     r1,#1       ; shift left by eight
   1905 0000CA9C 91 33                   	rol		r3,#1
   1906 0000CA9E 81 31                   	shl     r1,#1       ; shift left by eight
   1907 0000CAA0 91 33                   	rol		r3,#1
   1908 0000CAA2 81 31                   	shl     r1,#1       ; shift left by eight
   1909 0000CAA4 91 33                   	rol		r3,#1
   1910 0000CAA6 81 31                   	shl     r1,#1       ; shift left by eight
   1911 0000CAA8 91 33                   	rol		r3,#1
   1912 0000CAAA 81 31                   	shl     r1,#1       ; shift left by eight
   1913 0000CAAC 91 33                   	rol		r3,#1
   1914 0000CAAE 80 E2                   	lb      r2,[r8]
   1915 0000CAB0 26 21                   	or      r1,r2       ; add in new char
   1916 0000CAB2 E2 D1                       sw      r1,2[sp]   ; save off name again
   1917 0000CAB4 E4 D3                   	sw		r3,4[sp]
   1918 0000CAB6 FF 65                       sub		r5,r5,#1
   1919 0000CAB8 E5 B9                       bne     gvn4
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 33
noc_boot11.a
                                        
                                            ; now ignore extra variable name characters
   1922 0000CABA                        gvn6
   1923 0000CABA 01 68                       add     r8,r8,#1
   1924 0000CABC 80 E1                       lb      r1,[r8]
   1925 0000CABE 08 BF                       call    isAlnum
   1926 0000CAC0 FC B9                       bne     gvn6        ; keep looping as long as we have identifier chars
                                            
   1928 0000CAC2                        gvn2
   1929 0000CAC2 80 E1                   	lb		r1,[r8]
   1930 0000CAC4 FD 4F 1B 10                 cmp     r1,#'%'
   1931 0000CAC8 05 A8                       beq     gvn3
   1932 0000CACA FD 4F 1C 10                 cmp     r1,#'$'
   1933 0000CACE 02 A8                       beq     gvn3
   1934 0000CAD0 00 11                       lw      r1,#0
   1935 0000CAD2 FF 68                       sub     r8,r8,#1
                                        
                                            ; insert variable type indicator and return
   1938 0000CAD4                        gvn3
   1939 0000CAD4 01 68                       add     r8,r8,#1
   1940 0000CAD6 E2 F2                       lw      r2,2[sp]
   1941 0000CAD8 E4 F3                   	lw		r3,4[sp]
   1942 0000CADA 81 32                       shl     r2,#1
   1943 0000CADC 91 33                   	rol		r3,#1
   1944 0000CADE 81 32                       shl     r2,#1
   1945 0000CAE0 91 33                   	rol		r3,#1
   1946 0000CAE2 81 32                       shl     r2,#1
   1947 0000CAE4 91 33                   	rol		r3,#1
   1948 0000CAE6 81 32                       shl     r2,#1
   1949 0000CAE8 91 33                   	rol		r3,#1
   1950 0000CAEA 81 32                       shl     r2,#1
   1951 0000CAEC 91 33                   	rol		r3,#1
   1952 0000CAEE 81 32                       shl     r2,#1
   1953 0000CAF0 91 33                   	rol		r3,#1
   1954 0000CAF2 81 32                       shl     r2,#1
   1955 0000CAF4 91 33                   	rol		r3,#1
   1956 0000CAF6 81 32                       shl     r2,#1
   1957 0000CAF8 91 33                   	rol		r3,#1
   1958 0000CAFA 26 21                       or      r1,r2       ; add in variable type
   1959 0000CAFC E0 FF                       lw      lr,[sp]
   1960 0000CAFE E4 F5                       lw		r5,4[sp]
   1961 0000CB00 06 6E                       add     sp,sp,#6   ; return Z = 0, r3,r1 = varname
   1962 0000CB02 F0 80                       ret
                                        
                                            ; not a variable name
   1965 0000CB04                        gvn1
   1966 0000CB04 E0 FF                       lw      lr,[sp]
   1967 0000CB06 E6 F5                       lw		r5,6[sp]
   1968 0000CB08 08 6E                       add     sp,sp,#8
   1969 0000CB0A 00 11                       lw      r1,#0       ; return Z = 1 if not a varname
   1970 0000CB0C F0 80                       ret
                                        
                                        
                                        ; Find variable
                                        ;   r3,r1 = varname
                                        ;	r2 = allocate flag
                                        ; Returns
                                        ;   r1 = variable address, Z =0 if found / allocated, Z=1 if not found
                                        
   1979 0000CB0E                        findVar
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 34
noc_boot11.a
   1980 0000CB0E FA 6E                       sub     sp,sp,#6
   1981 0000CB10 E0 DF                       sw      lr,[sp]
   1982 0000CB12 E2 D7                       sw      r7,2[sp]
   1983 0000CB14 E4 DC                   	sw		r12,4[sp]
   1984 0000CB16 07 40 02 FC                 lw      r12,VARBGN
   1985 0000CB1A                        fv4
   1986 0000CB1A C0 F7                       lw      r7,[r12]     ; get varname / type
   1987 0000CB1C 0D A8                       beq     fv3         ; no more vars ?
   1988 0000CB1E 7D 23                       cmp     r3,r7       ; match ?
   1989 0000CB20 03 A9                   	bne		fv5
   1990 0000CB22 C2 F7                   	lw		r7,2[r12]
   1991 0000CB24 7D 21                   	cmp		r1,r7
   1992 0000CB26 0C A8                       beq     fv1
   1993 0000CB28                        fv5
   1994 0000CB28 08 6C                       add     r12,r12,#8    ; move to next var
   1995 0000CB2A 07 40 0A F7                 lw      r7,STKBOT
   1996 0000CB2E 7D 2C                       cmp     r12,r7
   1997 0000CB30 F4 B0                       blt     fv4         ; loop back to look at next var
                                        
                                            ; variable not found
                                            ; no more memory
   2001 0000CB32 37 4D 08 11                 lea     r1,msgVarSpace
   2002 0000CB36 F9 AE                       br      ERROR
                                        ;    lw      lr,[sp]
                                        ;    lw      r7,2[sp]
                                        ;    add     sp,sp,#4
                                        ;    lw      r1,#0
                                        ;    ret
                                        
                                            ; variable not found
                                            ; allocate new ?
   2011 0000CB38                        fv3
   2012 0000CB38 26 22                   	or		r2,r2
   2013 0000CB3A 08 A8                   	beq		fv2
   2014 0000CB3C C0 D3                       sw      r3,[r12]     ; save varname / type
   2015 0000CB3E C2 D1                   	sw		r1,2[r12]
                                            ; found variable
                                            ; return address
   2018 0000CB40                        fv1
   2019 0000CB40 C4 11                       add     r1,r12,#4
   2020 0000CB42 E0 FF                       lw      lr,[sp]
   2021 0000CB44 E2 F7                       lw      r7,2[sp]
   2022 0000CB46 E4 FC                   	lw		r12,4[sp]
   2023 0000CB48 06 6E                       add     sp,sp,#6    ; Z = 0, r1 = address
   2024 0000CB4A F0 80                       ret
                                        
                                            ; didn't find var and not allocating
   2027 0000CB4C                        fv2
   2028 0000CB4C E0 FF                       lw      lr,[sp]
   2029 0000CB4E E2 F7                       lw      r7,2[sp]
   2030 0000CB50 E4 FC                   	lw		r12,4[sp]
   2031 0000CB52 06 6E                       add     sp,sp,#6    ; Z = 0, r1 = address
   2032 0000CB54 00 11                   	lw		r1,#0		; Z = 1, r1 = 0
   2033 0000CB56 F0 80                       ret
                                        
                                        
                                        ; ===== Multiplies the 32 bit values in r1 and r2, returning
                                        ;	the 32 bit result in r1.
                                        ;
                                        
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 35
noc_boot11.a
   2040 0000CB58                        MULT32
   2041 0000CB58 FA 6E                   	sub		sp,sp,#6
   2042 0000CB5A E0 D5                   	sw		r5,[sp]		; w
   2043 0000CB5C E2 D6                   	sw		r6,2[sp]	; s
   2044 0000CB5E E4 D7                   	sw		r7,4[sp]
                                        
   2046 0000CB60 00 15                   	lw		r5,#0		; w = 0;
   2047 0000CB62 10 16                   	lw		r6,r1
   2048 0000CB64 24 26                   	xor		r6,r2		; s = a ^ b
   2049 0000CB66 16 21                   	or		r1,r1
   2050 0000CB68 01 AB                   	bpl		mult1
   2051 0000CB6A 20 31                   	neg		r1
   2052 0000CB6C                        mult1
   2053 0000CB6C 26 22                   	or		r2,r2
   2054 0000CB6E 01 AB                   	bpl		mult2
   2055 0000CB70 20 32                   	neg		r2
   2056 0000CB72                        mult2
   2057 0000CB72 10 17                   	lw		r7,r1
   2058 0000CB74 51 37                   	and		r7,#1
   2059 0000CB76 01 A8                   	beq		mult3
   2060 0000CB78 20 25                   	add		r5,r2		; w += b
   2061 0000CB7A                        mult3
   2062 0000CB7A 81 32                   	shl		r2,#1		; b <<= 1
   2063 0000CB7C A1 31                   	shr		r1,#1		; a >>= 1
   2064 0000CB7E F9 B9                   	bne		mult2       ; a = 0 ?
   2065 0000CB80                        mult4
   2066 0000CB80 66 26                       or      r6,r6
   2067 0000CB82 01 AB                   	bpl		mult5
   2068 0000CB84 20 35                   	neg		r5
   2069 0000CB86                        mult5
   2070 0000CB86 50 11                   	lw		r1,r5
   2071 0000CB88 E4 F7                   	lw		r7,4[sp]
   2072 0000CB8A E2 F6                   	lw		r6,2[sp]
   2073 0000CB8C E0 F5                   	lw		r5,[sp]
   2074 0000CB8E 06 6E                   	add		sp,sp,#6
   2075 0000CB90 F0 80                   	ret
                                        
                                        
                                        ; ===== Divide the 32 bit value in r2 by the 32 bit value in r3.
                                        ;	Returns the 32 bit quotient in r1, remainder in r2
                                        ;
                                        ; r2 = a
                                        ; r3 = b
                                        ; r6 = remainder
                                        ; r7 = iteration count
                                        ; r8 = sign
                                        ;
                                        
                                        ; q = a / b
                                        ; a = r1
                                        ; b = r2
                                        ; q = r2
                                        
   2093 0000CB92                        DIV32
   2094 0000CB92 26 22                       or      r2,r2       ; check for divide-by-zero
   2095 0000CB94 03 A9                       bne		div6
   2096 0000CB96 36 4D 05 11                 lea		r1,msgDivZero
   2097 0000CB9A C7 AE                       br		ERROR		; divide by zero error
   2098 0000CB9C                        div6
   2099 0000CB9C F8 6E                   	sub		sp,sp,#8
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 36
noc_boot11.a
   2100 0000CB9E E0 D6                   	sw		r6,[sp]
   2101 0000CBA0 E2 D7                   	sw		r7,2[sp]
   2102 0000CBA2 E4 D8                   	sw		r8,4[sp]
   2103 0000CBA4 E6 D9                   	sw		r9,6[sp]
                                        
   2105 0000CBA6 01 40 00 18                 lw      r8,#16      ; iteration count for 16 bits
   2106 0000CBAA 00 19                   	lw		r9,#0		; q = 0
   2107 0000CBAC 00 16                   	lw		r6,#0		; r = 0
   2108 0000CBAE 20 17                       lw      r7,r2       ; r7 = sign of result
   2109 0000CBB0 14 27                       xor     r7,r1
   2110 0000CBB2 16 21                   	or	    r1,r1	    ; take absolute value of r1 (a)
   2111 0000CBB4 01 AB                   	bpl     div1
   2112 0000CBB6 20 31                   	neg     r1
   2113 0000CBB8                        div1
   2114 0000CBB8 26 22                       or      r2,r2	    ; take absolute value of r2 (b)
   2115 0000CBBA 01 AB                   	bpl	    div2
   2116 0000CBBC 20 32                   	neg     r2
   2117 0000CBBE                        div2
   2118 0000CBBE 81 39                   	shl		r9,#1		; q <<= 1
   2119 0000CBC0 81 31                   	shl		r1,#1		; a <<= 1
   2120 0000CBC2 61 26                   	adc		r6,r6		; r <<= 1
   2121 0000CBC4 6D 22                   	cmp		r2,r6		; b < r ?
   2122 0000CBC6 02 A7                   	bgtu	div4
   2123 0000CBC8 22 26                   	sub		r6,r2		; r -= b
   2124 0000CBCA 61 39                   	or      r9,#1       ; q |= 1
   2125 0000CBCC                        div4
   2126 0000CBCC FF 68                   	sub		r8,r8,#1
   2127 0000CBCE F7 B9                       bne     div2        ; n--
   2128 0000CBD0 76 27                   	or      r7,r7
   2129 0000CBD2 01 AB                   	bpl     div5
   2130 0000CBD4 20 31                   	neg     r1
   2131 0000CBD6                        div5
   2132 0000CBD6 60 12                   	mov		r2,r6		; r2 = r
   2133 0000CBD8 90 11                   	mov		r1,r9
   2134 0000CBDA E0 F6                   	lw		r6,[sp]
   2135 0000CBDC E2 F7                   	lw		r7,2[sp]
   2136 0000CBDE E4 F8                   	lw		r8,4[sp]
   2137 0000CBE0 E6 F9                   	lw		r9,6[sp]
   2138 0000CBE2 08 6E                   	add		sp,sp,#8
   2139 0000CBE4 F0 80                   	ret
                                        
                                        ; ===== The PEEK function returns the byte stored at the address
                                        ;	contained in the following expression.
                                        ;
   2144 0000CBE6                        PEEK
   2145 0000CBE6 0A BF                   	call	PARN		; get the memory address
   2146 0000CBE8 10 E1                   	lb		r1,[r1]		; get the addressed byte
   2147 0000CBEA 0E 21                   	zxb		r1			; upper 3 bytes will be zero
   2148 0000CBEC E0 FF                   	lw		lr,[sp]	; and return it
   2149 0000CBEE 06 6E                   	add		sp,sp,#6
   2150 0000CBF0 F0 80                   	ret
                                        
                                        
                                        ; ===== The PEEK function returns the byte stored at the address
                                        ;	contained in the following expression.
                                        ;
   2156 0000CBF2                        PEEKW
   2157 0000CBF2 04 BF                   	call	PARN		; get the memory address
   2158 0000CBF4 5C 31                   	and		r1,#-4		; align to word address
   2159 0000CBF6 10 F1                   	lw		r1,[r1]		; get the addressed word
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 37
noc_boot11.a
   2160 0000CBF8 E0 FF                   	lw		lr,[sp]	; and return it
   2161 0000CBFA 06 6E                   	add		sp,sp,#6
   2162 0000CBFC F0 80                   	ret
                                        
                                        
                                        ; user function call
                                        ; call the user function with argument in r1
   2167 0000CBFE                        USRX
   2168 0000CBFE EF 4F 0D AF             	call	PARN		; get expression value
   2169 0000CC02 E2 D8                   	sw		r8,2[sp]	; save the text pointer
   2170 0000CC04 02 40 04 F2             	lw      r2,usrJmp   ; get usr vector
   2171 0000CC08 9F 49 0A AF             	call	[r2]		; jump to the subroutine
   2172 0000CC0C E2 F8                   	lw		r8,2[sp]	; restore the text pointer
   2173 0000CC0E E0 FF                   	lw		lr,[sp]
   2174 0000CC10 06 6E                   	add		sp,sp,#6
   2175 0000CC12 F0 80                   	ret
                                        
                                        
                                        ; ===== The RND function returns a random number from 1 to
                                        ;	the value of the following expression in D0.
                                        ;
   2181 0000CC14                        RND
   2182 0000CC14 EF 4F 02 AF             	call	PARN		; get the upper limit
   2183 0000CC18 16 21                   	or		r1,r1		; it must be positive and non-zero
   2184 0000CC1A 0E A8                   	beq		rnd2
   2185 0000CC1C 0A AA                   	bmi		rnd1
   2186 0000CC1E 10 12                   	lw		r2,r1
   2187 0000CC20 CA 4D 04 D0             	sw		r0,RAND+4	; read command
   2188 0000CC24 CA 4D 00 F1             	lw		r1,RAND		; get a number
   2189 0000CC28 0E AF                   	call	modu4		; RND(n)=MOD(number,n)+1
   2190 0000CC2A 01 61                   	add		r1,r1,#1
   2191 0000CC2C E0 FF                   	lw		lr,[sp]
   2192 0000CC2E 06 6E                   	add		sp,sp,#6
   2193 0000CC30 F0 80                   	ret
   2194 0000CC32                        rnd1
   2195 0000CC32 3E 4D 09 11             	lea		r1,msgRNDBad
   2196 0000CC36 79 AE                   	br		ERROR
   2197 0000CC38                        rnd2
   2198 0000CC38 CA 4D 04 D0             	sw		r0,RAND+4
   2199 0000CC3C CA 4D 00 F1             	lw		r1,RAND
   2200 0000CC40 E0 FF                   	lw		lr,[sp]
   2201 0000CC42 06 6E                   	add		sp,sp,#6
   2202 0000CC44 F0 80                   	ret
                                        
                                        
                                        ; r = a mod b
                                        ; a = r2
                                        ; b = r3
                                        ; r = r1
   2209 0000CC46                        modu4
   2210 0000CC46 FA 6E                   	sub		sp,sp,#6
   2211 0000CC48 E0 D5                   	sw		r5,[sp]
   2212 0000CC4A E2 D6                   	sw		r6,2[sp]
   2213 0000CC4C E4 D7                   	sw		r7,4[sp]
   2214 0000CC4E 01 40 00 17             	lw      r7,#16		; n = 32
   2215 0000CC52 00 15                   	lw		r5,#0		; w = 0
   2216 0000CC54 00 16                   	lw		r6,#0		; r = 0
   2217 0000CC56                        mod2
   2218 0000CC56 81 31                   	shl		r1,#1		; a <<= 1
   2219 0000CC58 61 26                   	adc		r6,r6		; r <<= 1
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 38
noc_boot11.a
   2220 0000CC5A 6D 22                   	cmp		r2,r6		; b < r ?
   2221 0000CC5C 01 A7                   	bgtu	mod1
   2222 0000CC5E 22 26                   	sub		r6,r2		; r -= b
   2223 0000CC60                        mod1
   2224 0000CC60 FF 67                   	sub		r7,r7,#1
   2225 0000CC62 F9 B9                       bne     mod2        ; n--
   2226 0000CC64 60 11                   	lw		r1,r6
   2227 0000CC66 E0 F5                   	lw		r5,[sp]
   2228 0000CC68 E2 F6                   	lw		r6,2[sp]
   2229 0000CC6A E4 F7                   	lw		r7,4[sp]
   2230 0000CC6C 06 6E                   	add		sp,sp,#6
   2231 0000CC6E F0 80                   	ret
                                        
                                        
                                        
                                        ; ===== The ABS function returns an absolute value in r2.
                                        ;
   2237 0000CC70                        ABS
   2238 0000CC70 EC 4F 04 AF             	call	PARN		; get the following expr.'s value
   2239 0000CC74 16 21                   	or		r1,r1
   2240 0000CC76 01 AB                   	bpl		abs1
   2241 0000CC78 20 31                   	neg		r1			; if negative, complement it
                                        ;	bmi		QHOW		; if still negative, it was too big
   2243 0000CC7A                        abs1
   2244 0000CC7A E0 FF                   	lw		lr,[sp]
   2245 0000CC7C 06 6E                   	add		sp,sp,#6
   2246 0000CC7E F0 80                   	ret
                                        
                                        
                                        ; ===== The SGN function returns the sign in r1. +1,0, or -1
                                        ;
   2251 0000CC80                        SGN
   2252 0000CC80 EB 4F 0C AF             	call	PARN		; get the following expr.'s value
   2253 0000CC84 16 21                   	or		r1,r1
   2254 0000CC86 04 A8                   	beq		sgn1
   2255 0000CC88 02 AB                   	bpl		sgn2
   2256 0000CC8A 0F 11                   	lw		r1,#-1
   2257 0000CC8C 01 AE                   	br		sgn1
   2258 0000CC8E                        sgn2
   2259 0000CC8E 01 11                   	lw		r1,#1
   2260 0000CC90                        sgn1
   2261 0000CC90 E0 FF                   	lw		lr,[sp]
   2262 0000CC92 06 6E                   	add		sp,sp,#6
   2263 0000CC94 F0 80                   	ret
                                        
                                        
                                        ; ===== The SIZE function returns the size of free memory in r1.
                                        ;
   2268 0000CC96                        SIZEX
   2269 0000CC96 07 40 02 F1             	lw		r1,VARBGN	; get the number of free bytes...
   2270 0000CC9A 07 40 00 F2             	lw		r2,TXTUNF	; between 'TXTUNF' and 'VARBGN'
   2271 0000CC9E 22 21                   	sub		r1,r2
   2272 0000CCA0 E0 FF                   	lw		lr,[sp]
   2273 0000CCA2 06 6E                   	add		sp,sp,#6
   2274 0000CCA4 F0 80                   	ret					; return the number in r2
                                        
                                        ; ==== Return the node number that the code is running on
                                        ;
   2278 0000CCA6                        NODENUM
   2279 0000CCA6 E4 31                   	tsr		r1,ID
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 39
noc_boot11.a
   2280 0000CCA8 E0 FF                   	lw		lr,[sp]
   2281 0000CCAA 06 6E                   	add		sp,sp,#6
   2282 0000CCAC F0 80                   	ret
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** SETVAL *** FIN *** ENDCHK *** ERROR (& friends) ***
                                        ;
                                        ; 'SETVAL' expects a variable, followed by an equal sign and then
                                        ; an expression.  It evaluates the expression and sets the variable
                                        ; to that value.
                                        ;
                                        ; 'FIN' checks the end of a command.  If it ended with ":",
                                        ; execution continues.	If it ended with a CR, it finds the
                                        ; the next line and continues from there.
                                        ;
                                        ; 'ENDCHK' checks if a command is ended with a CR. This is
                                        ; required in certain commands, such as GOTO, RETURN, STOP, etc.
                                        ;
                                        ; 'ERROR' prints the string pointed to by A0. It then prints the
                                        ; line pointed to by CURRNT with a "?" inserted at where the
                                        ; old text pointer (should be on top of the stack) points to.
                                        ; Execution of Tiny BASIC is stopped and a warm start is done.
                                        ; If CURRNT is zero (indicating a direct command), the direct
                                        ; command is not printed. If CURRNT is -1 (indicating
                                        ; 'INPUT' command in progress), the input line is not printed
                                        ; and execution is not terminated but continues at 'INPERR'.
                                        ;
                                        ; Related to 'ERROR' are the following:
                                        ; 'QWHAT' saves text pointer on stack and gets "What?" message.
                                        ; 'AWHAT' just gets the "What?" message and jumps to 'ERROR'.
                                        ; 'QSORRY' and 'ASORRY' do the same kind of thing.
                                        ; 'QHOW' and 'AHOW' also do this for "How?".
                                        ;
                                        
                                        ; returns
                                        ; r2 = variable's address
                                        ;
   2318 0000CCAE                        SETVAL
   2319 0000CCAE FC 6E                       sub     sp,sp,#4
   2320 0000CCB0 E0 DF                       sw      lr,[sp]
   2321 0000CCB2 01 11                       lw		r1,#1		; allocate var
   2322 0000CCB4 EB 4F 02 AF                 call	TSTV		; variable name?
   2323 0000CCB8 03 A9                       bne		sv2
   2324 0000CCBA 3D 4D 02 11                	lea		r1,msgVar
   2325 0000CCBE 35 AE                      	br		ERROR 
   2326 0000CCC0                        sv2
   2327 0000CCC0 E2 D1                   	sw      r1,2[sp]    ; save the variable's address
   2328 0000CCC2 1B 40 0F AF             	call	TSTC		; get past the "=" sign
   2329 0000CCC6 3D 12                   	db	'=',SV1-*+1
   2330 0000CCC8 DC 4F 04 AF             	call	OREXPR		; evaluate the expression
   2331 0000CCCC E2 F2                   	lw      r2,2[sp]    ; get back the variable's address
   2332 0000CCCE 20 D1                   	sw      r1,[r2]     ; and save value in the variable
   2333 0000CCD0 20 11                   	lw		r1,r2		; return r1 = variable address
   2334 0000CCD2 E0 FF                   	lw      lr,[sp]
   2335 0000CCD4 04 6E                   	add     sp,sp,#4
   2336 0000CCD6 F0 80                   	ret
   2337 0000CCD8                        SV1
   2338 0000CCD8 26 AE                       br	    QWHAT		; if no "=" sign
                                        
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 40
noc_boot11.a
                                        
   2341 0000CCDA                        FIN
   2342 0000CCDA FE 6E                   	sub		sp,sp,#2
   2343 0000CCDC E0 DF                   	sw		lr,[sp]
   2344 0000CCDE 1B 40 01 AF             	call	TSTC		; *** FIN ***
   2345 0000CCE2 3A 08                   	db	':',FI1-*+1
   2346 0000CCE4 02 6E                   	add		sp,sp,#2	; if ":", discard return address
   2347 0000CCE6 B5 4F 0D AE             	br		RUNSML		; continue on the same line
   2348 0000CCEA                        FI1
   2349 0000CCEA 1A 40 0B AF             	call	TSTC		; not ":", is it a CR?
   2350 0000CCEE 0D 0A                   	db	CR,FI2-*+1
   2351 0000CCF0 E0 FF                   	lw		lr,[sp]	; else return to the caller
   2352 0000CCF2 02 6E                   	add		sp,sp,#2	; yes, purge return address
   2353 0000CCF4 B4 4F 09 AE             	br		RUNNXL		; execute the next line
   2354 0000CCF8                        FI2
   2355 0000CCF8 E0 FF                   	lw		lr,[sp]	; else return to the caller
   2356 0000CCFA 02 6E                   	add		sp,sp,#2
   2357 0000CCFC F0 80                   	ret
                                        
                                        
                                        ; Check that there is nothing else on the line
                                        ; Registers Affected
                                        ;   r1
                                        ;
   2364 0000CCFE                        ENDCHK
   2365 0000CCFE FE 6E                   	sub		sp,sp,#2
   2366 0000CD00 E0 DF                   	sw		lr,[sp]
   2367 0000CD02 22 40 06 AF             	call	IGNBLK
   2368 0000CD06 80 E1                   	lb		r1,[r8]
   2369 0000CD08 FF 4F 13 10             	cmp		r1,#CR		; does it end with a CR?
   2370 0000CD0C 03 A8                   	beq		ec1
   2371 0000CD0E 4A 4D 0C 11             	lea		r1,msgExtraChars
   2372 0000CD12 0B AE                   	jmp		ERROR
   2373 0000CD14                        ec1
   2374 0000CD14 E0 FF                   	lw		lr,[sp]
   2375 0000CD16 02 6E                   	add		sp,sp,#2
   2376 0000CD18 F0 80                   	ret
                                        
                                        
   2379 0000CD1A                        TOOBIG
   2380 0000CD1A 49 4D 07 11             	lea		r1,msgTooBig
   2381 0000CD1E 05 AE                   	br		ERROR
   2382 0000CD20                        QSORRY
   2383 0000CD20 32 4D 0D 11                 lea     r1,SRYMSG
   2384 0000CD24 02 AE                   	br	    ERROR
   2385 0000CD26                        QWHAT
   2386 0000CD26 32 4D 05 11             	lea		r1,msgWhat
   2387 0000CD2A                        ERROR
   2388 0000CD2A 25 40 0A AF             	call	PRMESG		; display the error message
   2389 0000CD2E 06 40 00 F1             	lw		r1,CURRNT	; get the current line number
   2390 0000CD32 9F 4F 0D A8             	beq		WSTART		; if zero, do a warm start
   2391 0000CD36 11 10                   	cmp		r1,#-1		; is the line no. pointer = -1?
   2392 0000CD38 C3 4F 0F A8             	beq		INPERR		; if so, redo input
   2393 0000CD3C 80 E5                   	lb		r5,[r8]		; save the char. pointed to
   2394 0000CD3E 80 C0                   	sb		r0,[r8]		; put a zero where the error is
   2395 0000CD40 06 40 00 F1             	lw		r1,CURRNT	; point to start of current line
   2396 0000CD44 16 40 00 AF             	call	PRTLN		; display the line in error up to the 0
   2397 0000CD48 10 16                   	lw      r6,r1       ; save off end pointer
   2398 0000CD4A 80 C5                   	sb		r5,[r8]		; restore the character
   2399 0000CD4C 03 40 0F 11             	lw		r1,#'?'		; display a "?"
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 41
noc_boot11.a
   2400 0000CD50 9A 4F 0D AF             	call	GOOUT
   2401 0000CD54 00 12                   	lw      r2,#0       ; stop char = 0
   2402 0000CD56 6F 11                   	sub		r1,r6,#1	; point back to the error char.
   2403 0000CD58 9F AF                   	call	PRTSTG		; display the rest of the line
   2404 0000CD5A 9E 4F 09 AE             	jmp	    WSTART		; and do a warm start
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** GETLN *** FNDLN (& friends) ***
                                        ;
                                        ; 'GETLN' reads in input line into 'BUFFER'. It first prompts with
                                        ; the character in r3 (given by the caller), then it fills the
                                        ; buffer and echos. It ignores LF's but still echos
                                        ; them back. Control-H is used to delete the last character
                                        ; entered (if there is one), and control-X is used to delete the
                                        ; whole line and start over again. CR signals the end of a line,
                                        ; and causes 'GETLN' to return.
                                        ;
                                        ;
   2420 0000CD5E                        GETLN
   2421 0000CD5E FC 6E                   	sub		sp,sp,#4
   2422 0000CD60 E0 DF                   	sw		lr,[sp]
   2423 0000CD62 E2 D5                   	sw		r5,2[sp]
   2424 0000CD64 9A 4F 03 AF             	call	GOOUT		; display the prompt
   2425 0000CD68 01 11                   	lw		r1,#1		; turn on cursor flash
   2426 0000CD6A 03 40 0C C1             	sb		r1,cursFlash
   2427 0000CD6E 02 40 00 11             	lw		r1,#' '		; and a space
   2428 0000CD72 99 4F 0C AF             	call	GOOUT
   2429 0000CD76 0A 40 0E 18             	lea		r8,BUFFER	; r8 is the buffer pointer
   2430 0000CD7A                        GL1
   2431 0000CD7A 22 40 00 AF             	call	CHKIO		; check keyboard
   2432 0000CD7E FD B8                   	beq		GL1			; wait for a char. to come in
   2433 0000CD80 FF 4F 13 10             	cmp		r1,#CR		; accept a CR
   2434 0000CD84 03 A8                   	beq		GL2
   2435 0000CD86 99 4F 02 AF             	call	GOOUT
   2436 0000CD8A F7 BE                   	br		GL1
   2437 0000CD8C                        GL2:
   2438 0000CD8C 98 4F 0F AF             	call	GOOUT		; spit out CR
   2439 0000CD90 00 11                   	lw		r1,#0		; turn off cursor flash
   2440 0000CD92 03 40 0C C1             	sb		r1,cursFlash
   2441 0000CD96 03 40 03 E3             	lb		r3,cursy
   2442 0000CD9A 03 40 02 E5             	lb		r5,cursx
   2443 0000CD9E 0A 11                   	lw		r1,#LF		; echo a LF for the CR
   2444 0000CDA0 98 4F 05 AF             	call	GOOUT
   2445 0000CDA4 81 33                   	shl		r3,#1
   2446 0000CDA6 D6 4D 3E F3             	lw		r3,lineTbl[r3]
   2447 0000CDAA 00 12                   	lw		r2,#0
   2448 0000CDAC 00 14                   	lw		r4,#0
   2449 0000CDAE                        GL3:
   2450 0000CDAE 00 42 30 E1             	lb		r1,TXTSCR[r3]
   2451 0000CDB2 6C 40 09 AF             	call	ScreenToAscii
   2452 0000CDB6 0A 40 4E C1             	sb		r1,BUFFER[r4]
   2453 0000CDBA 02 63                   	add		r3,r3,#2
   2454 0000CDBC 01 64                   	add		r4,r4,#1
   2455 0000CDBE FC 4F 4C 10             	cmp		r4,#52
   2456 0000CDC2 F5 B0                   	blt		GL3
   2457 0000CDC4 00 40 0D 11             	lw		r1,#CR
   2458 0000CDC8 0A 40 5E C1             	sb		r1,BUFFER[r5]
   2459 0000CDCC 0A 40 5F C0             	sb		r0,BUFFER+1[r5]
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 42
noc_boot11.a
   2460 0000CDD0 E0 FF                   	lw		lr,[sp]
   2461 0000CDD2 E2 F5                   	lw		r5,2[sp]
   2462 0000CDD4 04 6E                   	add		sp,sp,#4
   2463 0000CDD6 F0 80                   	ret
                                        
                                        
                                        ; 'FNDLN' finds a line with a given line no. (in r1) in the
                                        ; text save area.  r9 is used as the text pointer. If the line
                                        ; is found, r9 will point to the beginning of that line
                                        ; (i.e. the high byte of the line no.), and flags are Z.
                                        ; If that line is not there and a line with a higher line no.
                                        ; is found, r9 points there and flags are NC & NZ. If we reached
                                        ; the end of the text save area and cannot find the line, flags
                                        ; are C & NZ.
                                        ; Z=1 if line found
                                        ; N=1 if end of text save area
                                        ; Z=0 & N=0 if higher line found
                                        ;
                                        ; 'FNDLN' will initialize r9 to the beginning of the text save
                                        ; area to start the search. Some other entries of this routine
                                        ; will not initialize r9 and do the search.
                                        ; 'FNDLNP' will start with r9 and search for the line no.
                                        ; 'FNDNXT' will bump r9 by 2, find a CR and then start search.
                                        ; 'FNDSKP' uses r9 to find a CR, and then starts the search.
                                        ; return Z=1 if line is found, r9 = pointer to line
                                        ;
                                        ; Parameters
                                        ;	r1 = line number to find
                                        ;
   2489 0000CDD8                        FNDLN
   2490 0000CDD8 00 40 11 10             	cmp		r1,#0xFFFF	; line no. must be < 65535
   2491 0000CDDC 03 A6                   	bleu	fl1
   2492 0000CDDE 3B 4D 0C 11             	lea		r1,msgLineRange
   2493 0000CDE2 A3 BE                   	br		ERROR
   2494 0000CDE4                        fl1
   2495 0000CDE4 0C 4C 02 F9             	lw		r9,TXTBGN	; init. the text save pointer
                                        
   2497 0000CDE8                        FNDLNP
   2498 0000CDE8 07 40 00 FA             	lw		r10,TXTUNF	; check if we passed the end
   2499 0000CDEC FF 6A                   	sub		r10,r10,#1
   2500 0000CDEE AD 29                   	cmp		r9,r10
   2501 0000CDF0 0F A7                   	bgtu	FNDRET		; if so, return with Z=0 & C=1
   2502 0000CDF2 90 E3                   	lb		r3,[r9]		; get low order byte of line number
   2503 0000CDF4 0E 23                   	zxb		r3
   2504 0000CDF6 91 E2                   	lb		r2,1[r9]	; get high order byte
   2505 0000CDF8 0E 22                   	zxb		r2
   2506 0000CDFA 81 32                   	shl		r2,#1
   2507 0000CDFC 81 32                   	shl		r2,#1
   2508 0000CDFE 81 32                   	shl		r2,#1
   2509 0000CE00 81 32                   	shl		r2,#1
   2510 0000CE02 81 32                   	shl		r2,#1
   2511 0000CE04 81 32                   	shl		r2,#1
   2512 0000CE06 81 32                   	shl		r2,#1
   2513 0000CE08 81 32                   	shl		r2,#1
   2514 0000CE0A 36 22                   	or		r2,r3		; build whole line number
   2515 0000CE0C 2D 21                   	cmp		r1,r2		; is this the line we want?
   2516 0000CE0E 01 A7                   	bgtu	FNDNXT		; no, not there yet
   2517 0000CE10                        FNDRET
   2518 0000CE10 F0 80                   	ret			; return the cond. codes
                                        
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 43
noc_boot11.a
   2520 0000CE12                        FNDNXT
   2521 0000CE12 02 69                   	add		r9,r9,#2	; find the next line
                                        
   2523 0000CE14                        FNDSKP
   2524 0000CE14 90 E2                   	lb		r2,[r9]
   2525 0000CE16 01 69                   	add		r9,r9,#1
   2526 0000CE18 FF 4F 23 10             	cmp		r2,#CR		; try to find a CR
   2527 0000CE1C FB B9                   	bne		FNDSKP		; keep looking
   2528 0000CE1E E4 BE                   	br		FNDLNP		; check if end of text
                                        
                                        
                                        ;******************************************************************
                                        ; 'MVUP' moves a block up from where r1 points to where r2 points
                                        ; until r1=r3
                                        ;
   2535 0000CE20                        MVUP1
   2536 0000CE20 10 E4                   	lb		r4,[r1]
   2537 0000CE22 20 C4                   	sb		r4,[r2]
   2538 0000CE24 01 61                   	add		r1,r1,#1
   2539 0000CE26 01 62                   	add		r2,r2,#1
   2540 0000CE28                        MVUP
   2541 0000CE28 3D 21                   	cmp		r1,r3
   2542 0000CE2A FA B9                   	bne		MVUP1
   2543 0000CE2C                        MVRET
   2544 0000CE2C F0 80                   	ret
                                        
                                        
                                        ; 'MVDOWN' moves a block down from where r1 points to where r2
                                        ; points until r1=r3
                                        ;
   2550 0000CE2E                        MVDOWN1
   2551 0000CE2E FF 61                   	sub		r1,r1,#1
   2552 0000CE30 FF 62                   	sub		r2,r2,#1
   2553 0000CE32 10 E4                   	lb		r4,[r1]
   2554 0000CE34 20 C4                   	sb		r4,[r2]
   2555 0000CE36                        MVDOWN
   2556 0000CE36 3D 21                   	cmp		r1,r3
   2557 0000CE38 FA B9                   	bne		MVDOWN1
   2558 0000CE3A F0 80                   	ret
                                        
                                        
                                        ; 'POPA' restores the 'FOR' loop variable save area from the stack
                                        ;
                                        ; 'PUSHA' stacks for 'FOR' loop variable save area onto the stack
                                        ;
                                        ; Note: a single zero word is stored on the stack in the
                                        ; case that no FOR loops need to be saved. This needs to be
                                        ; done because PUSHA / POPA is called all the time.
                                        
   2569 0000CE3C                        POPA
   2570 0000CE3C E0 F1                   	lw		r1,[sp]		; restore LOPVAR, but zero means no more
   2571 0000CE3E 06 40 06 D1             	sw		r1,LOPVAR
   2572 0000CE42 0E A8                   	beq		PP1
   2573 0000CE44 E8 F1                   	lw		r1,8[sp]	; if not zero, restore the rest
   2574 0000CE46 06 40 0E D1             	sw		r1,LOPPT
   2575 0000CE4A E6 F1                   	lw		r1,6[sp]
   2576 0000CE4C 06 40 0C D1             	sw		r1,LOPLN
   2577 0000CE50 E4 F1                   	lw		r1,4[sp]
   2578 0000CE52 06 40 0A D1             	sw		r1,LOPLMT
   2579 0000CE56 E2 F1                   	lw		r1,2[sp]
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 44
noc_boot11.a
   2580 0000CE58 06 40 08 D1             	sw		r1,LOPINC
   2581 0000CE5C 0A 6E                   	add		sp,sp,#10
   2582 0000CE5E F0 80                   	ret
   2583 0000CE60                        PP1
   2584 0000CE60 02 6E                   	add		sp,sp,#2
   2585 0000CE62 F0 80                   	ret
                                        
                                        
   2588 0000CE64                        PUSHA
   2589 0000CE64 07 40 0A F1             	lw		r1,STKBOT	; Are we running out of stack room?
   2590 0000CE68 0A 61                   	add		r1,r1,#10	; we might need this many bytes
   2591 0000CE6A 1D 2E                   	cmp		sp,r1
   2592 0000CE6C 59 B4                   	bltu	QSORRY		; out of stack space
   2593 0000CE6E 06 40 06 F1             	lw		r1,LOPVAR	; save loop variables
   2594 0000CE72 0F A8                   	beq		PU1			; if LOPVAR is zero, that's all
   2595 0000CE74 F6 6E                   	sub		sp,sp,#10
   2596 0000CE76 E0 D1                   	sw		r1,[sp]
   2597 0000CE78 06 40 0E F1             	lw		r1,LOPPT
   2598 0000CE7C E8 D1                   	sw		r1,8[sp]	; else save all the others
   2599 0000CE7E 06 40 0C F1             	lw		r1,LOPLN
   2600 0000CE82 E6 D1                   	sw		r1,6[sp]
   2601 0000CE84 06 40 0A F1             	lw		r1,LOPLMT
   2602 0000CE88 E4 D1                   	sw		r1,4[sp]
   2603 0000CE8A 06 40 08 F1             	lw		r1,LOPINC
   2604 0000CE8E E2 D1                   	sw		r1,2[sp]
   2605 0000CE90 F0 80                   	ret
   2606 0000CE92                        PU1
   2607 0000CE92 FE 6E                   	sub		sp,sp,#2
   2608 0000CE94 E0 D1                   	sw		r1,[sp]
   2609 0000CE96 F0 80                   	ret
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** PRTSTG *** QTSTG *** PRTNUM *** PRTLN ***
                                        ;
                                        ; 'PRTSTG' prints a string pointed to by r3. It stops printing
                                        ; and returns to the caller when either a CR is printed or when
                                        ; the next byte is the same as what was passed in r4 by the
                                        ; caller.
                                        ;
                                        ; 'QTSTG' looks for an underline (back-arrow on some systems),
                                        ; single-quote, or double-quote.  If none of these are found, returns
                                        ; to the caller.  If underline, outputs a CR without a LF.  If single
                                        ; or double quote, prints the quoted string and demands a matching
                                        ; end quote.  After the printing, the next 2 bytes of the caller are
                                        ; skipped over (usually a short brnch instruction).
                                        ;
                                        ; 'PRTNUM' prints the 32 bit number in r3, leading blanks are added if
                                        ; needed to pad the number of spaces to the number in r4.
                                        ; However, if the number of digits is larger than the no. in
                                        ; r4, all digits are printed anyway. Negative sign is also
                                        ; printed and counted in, positive sign is not.
                                        ;
                                        ; 'PRTLN' prints the saved text line pointed to by r3
                                        ; with line no. and all.
                                        ;
                                        
                                        ; r1 = pointer to string
                                        ; r2 = stop character
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 45
noc_boot11.a
                                        ; return r1 = pointer to end of line + 1
                                        
   2642 0000CE98                        PRTSTG
   2643 0000CE98 F8 6E                       sub     sp,sp,#8
   2644 0000CE9A E0 DF                       sw      lr,[sp]
   2645 0000CE9C E2 D5                       sw      r5,2[sp]
   2646 0000CE9E E4 D6                       sw      r6,4[sp]
   2647 0000CEA0 E6 D7                       sw      r7,6[sp]
   2648 0000CEA2 10 15                       lw      r5,r1       ; r5 = pointer
   2649 0000CEA4 20 16                       lw      r6,r2       ; r6 = stop char
   2650 0000CEA6                        PS1
   2651 0000CEA6 50 E7                       lb      r7,[r5]     ; get a text character
   2652 0000CEA8 01 65                       add     r5,r5,#1
   2653 0000CEAA 6D 27                   	cmp     r7,r6		; same as stop character?
   2654 0000CEAC 09 A8                   	beq	    PRTRET		; if so, return
   2655 0000CEAE 70 11                   	lw      r1,r7
   2656 0000CEB0 8F 4F 0D AF             	call	GOOUT		; display the char.
   2657 0000CEB4 FF 4F 73 10             	cmp     r7,#CR      ; is it a C.R.?
   2658 0000CEB8 F6 B9                   	bne	    PS1		    ; no, go back for more
   2659 0000CEBA 0A 11                   	lw      r1,#LF      ; yes, add a L.F.
   2660 0000CEBC 8F 4F 07 AF             	call	GOOUT
   2661 0000CEC0                        PRTRET
   2662 0000CEC0 70 12                       lw      r2,r7       ; return r2 = stop char
   2663 0000CEC2 50 11                   	lw		r1,r5		; return r1 = line pointer
   2664 0000CEC4 E2 F5                       lw      r5,2[sp]
   2665 0000CEC6 E4 F6                       lw      r6,4[sp]
   2666 0000CEC8 E6 F7                       lw      r7,6[sp]
   2667 0000CECA E0 FF                       lw      lr,[sp]
   2668 0000CECC 08 6E                       add     sp,sp,#8
   2669 0000CECE F0 80                       ret			        ; then return
                                        
                                        
   2672 0000CED0                        QTSTG
   2673 0000CED0 FE 6E                   	sub		sp,sp,#2
   2674 0000CED2 E0 DF                   	sw		lr,[sp]
   2675 0000CED4 B7 AF                   	call	TSTC		; *** QTSTG ***
   2676 0000CED6 22 18                   	db	'"',QT3-*+1
   2677 0000CED8 02 40 02 12             	lw		r2,#'"'		; it is a "
   2678 0000CEDC                        QT1
   2679 0000CEDC 80 11                   	lw		r1,r8
   2680 0000CEDE DC BF                   	call	PRTSTG		; print until another
   2681 0000CEE0 10 18                   	lw		r8,r1
   2682 0000CEE2 FF 4F 26 10             	cmp		r2,#LF		; was last one a CR?
   2683 0000CEE6 0E A9                   	bne		QT2
   2684 0000CEE8 02 6E                   	add		sp,sp,#2
   2685 0000CEEA A4 4F 0E AE             	br		RUNNXL		; if so, run next line
   2686 0000CEEE                        QT3
   2687 0000CEEE AA AF                   	call	TSTC		; is it a single quote?
   2688 0000CEF0 27 08                   	db	"'",QT4-*+1
   2689 0000CEF2 02 40 07 12             	lw		r2,#''''	; if so, do same as above
   2690 0000CEF6 F2 BE                   	br		QT1
   2691 0000CEF8                        QT4
   2692 0000CEF8 A5 AF                   	call	TSTC		; is it an underline?
   2693 0000CEFA 5F 10                   	db	'_',QT5-*+1
   2694 0000CEFC 00 40 0D 11             	lw		r1,#CR		; if so, output a CR without LF
   2695 0000CF00 8D 4F 05 AF             	call	GOOUT
   2696 0000CF04                        QT2
   2697 0000CF04 E0 FF                   	lw		lr,[sp]
   2698 0000CF06 02 6E                   	add		sp,sp,#2
   2699 0000CF08 F2 80                   	jmp		2[lr]		; skip over 2 bytes when returning
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 46
noc_boot11.a
   2700 0000CF0A                        QT5						; not " ' or _
   2701 0000CF0A E0 FF                   	lw		lr,[sp]
   2702 0000CF0C 02 6E                   	add		sp,sp,#2
   2703 0000CF0E F0 80                   	ret
                                        
                                        
                                        ; Output a CR LF sequence
                                        ;
   2708 0000CF10                        prCRLF
   2709 0000CF10 FE 6E                   	sub		sp,sp,#2
   2710 0000CF12 E0 DF                   	sw		lr,[sp]
   2711 0000CF14 00 40 0D 11             	lw		r1,#CR
   2712 0000CF18 8C 4F 09 AF             	call	GOOUT
   2713 0000CF1C 0A 11                   	lw		r1,#LF
   2714 0000CF1E 8C 4F 06 AF             	call	GOOUT
   2715 0000CF22 E0 FF                   	lw		lr,[sp]
   2716 0000CF24 02 6E                   	add		sp,sp,#2
   2717 0000CF26 F0 80                   	ret
                                        
                                        
                                        ; r1 = number to print
                                        ; r2 = number of digits
                                        ; Register Usage
                                        ;	r5 = number of padding spaces
   2724 0000CF28                        PRTNUM
   2725 0000CF28 F8 6E                   	sub		sp,sp,#8
   2726 0000CF2A E0 DF                   	sw		lr,[sp]
   2727 0000CF2C E2 D5                   	sw		r5,2[sp]
   2728 0000CF2E E4 D6                   	sw		r6,4[sp]
   2729 0000CF30 E6 D7                   	sw		r7,6[sp]
                                        
   2731 0000CF32 07 40 0C 17             	lea		r7,NUMWKA	; r7 = pointer to numeric work area
   2732 0000CF36 10 16                   	lw		r6,r1		; save number for later
   2733 0000CF38 20 15                   	lw		r5,r2		; r5 = min number of chars
   2734 0000CF3A 16 21                   	
   2735 0000CF3C 02 AB                   	bpl		PN1			; if not
   2736 0000CF3E 20 31                   	neg		r1			; else make it positive
   2737 0000CF40 FF 65                   	sub		r5,r5,#1	; one less for width count
   2738 0000CF42                        PN1
   2739 0000CF42 0A 12                   	lw		r2,#10		; divide by 10
   2740 0000CF44 E2 4F 05 AF             	call	DIV32
   2741 0000CF48 30 62                   	add		r2,r2,#'0'	; convert remainder to ascii
   2742 0000CF4A 70 C2                   	sb		r2,[r7]		; and store in buffer
   2743 0000CF4C 01 67                   	add		r7,r7,#1
   2744 0000CF4E FF 65                   	sub		r5,r5,#1	; decrement width
   2745 0000CF50 10 10                   	cmp		r1,#0
   2746 0000CF52 F7 B9                   	bne		PN1
   2747 0000CF54                        PN6
   2748 0000CF54 56 25                   	or		r5,r5		; test pad count
   2749 0000CF56 06 A2                   	ble		PN4			; skip padding if not needed
   2750 0000CF58                        PN3
   2751 0000CF58 02 40 00 11             	lw		r1,#' '		; display the required leading spaces
   2752 0000CF5C 8A 4F 07 AF             	call	GOOUT
   2753 0000CF60 FF 65                   	sub		r5,r5,#1
   2754 0000CF62 FA B9                   	bne		PN3
   2755 0000CF64                        PN4
   2756 0000CF64 66 26                   	or		r6,r6		; is number negative?
   2757 0000CF66 04 AB                   	bpl		PN5
   2758 0000CF68 02 40 0D 11             	lw		r1,#'-'		; if so, display the sign
   2759 0000CF6C 89 4F 0F AF             	call	GOOUT
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 47
noc_boot11.a
   2760 0000CF70                        PN5
   2761 0000CF70 FF 67                   	sub		r7,r7,#1
   2762 0000CF72 70 E1                   	lb		r1,[r7]		; now unstack the digits and display
   2763 0000CF74 89 4F 0B AF             	call	GOOUT
   2764 0000CF78 F8 4F 74 10             	cmp		r7,#NUMWKA
   2765 0000CF7C F9 B7                   	bgtu	PN5
   2766 0000CF7E                        PNRET
   2767 0000CF7E E0 FF                   	lw		lr,[sp]
   2768 0000CF80 E2 F5                   	lw		r5,2[sp]
   2769 0000CF82 E4 F6                   	lw		r6,4[sp]
   2770 0000CF84 E6 F7                   	lw		r7,6[sp]
   2771 0000CF86 08 6E                   	add		sp,sp,#8
   2772 0000CF88 F0 80                   	ret
                                        
                                        
                                        ; r1 = number to print
                                        ; r2 = number of digits
   2777 0000CF8A                        PRTHEXNUM
   2778 0000CF8A F6 6E                   	sub		sp,sp,#10
   2779 0000CF8C E0 DF                   	sw		lr,[sp]
   2780 0000CF8E E2 D5                   	sw		r5,2[sp]
   2781 0000CF90 E4 D6                   	sw		r6,4[sp]
   2782 0000CF92 E6 D7                   	sw		r7,6[sp]
   2783 0000CF94 E8 D8                   	sw		r8,8[sp]
                                        
   2785 0000CF96 07 40 0C 17             	lea		r7,NUMWKA	; r7 = pointer to numeric work area
   2786 0000CF9A 10 16                   	lw		r6,r1		; save number for later
   2787 0000CF9C 0A 15                   	lw		r5,#10		; r5 = min number of chars
   2788 0000CF9E 10 14                   	lw		r4,r1
   2789 0000CFA0 46 24                   	
   2790 0000CFA2 03 AB                   	bpl		PHN1		; if not
   2791 0000CFA4 20 34                   	neg		r4			; else make it positive
   2792 0000CFA6 FF 65                   	sub		r5,r5,#1	; one less for width count
   2793 0000CFA8 0A 18                   	lw		r8,#10		; maximum of 10 digits
   2794 0000CFAA                        PHN1
   2795 0000CFAA 40 11                   	lw		r1,r4
   2796 0000CFAC 00 40 5F 31             	and		r1,#15
   2797 0000CFB0 FF 4F 16 10             	cmp		r1,#10
   2798 0000CFB4 02 A0                   	blt		PHN7
   2799 0000CFB6 37 61                   	add		r1,r1,#'A'-10
   2800 0000CFB8 01 AE                   	br		PHN8
   2801 0000CFBA                        PHN7
   2802 0000CFBA 30 61                   	add		r1,r1,#'0'		; convert remainder to ascii
   2803 0000CFBC                        PHN8
   2804 0000CFBC 70 C1                   	sb		r1,[r7]		; and store in buffer
   2805 0000CFBE 01 67                   	add		r7,r7,#1
   2806 0000CFC0 FF 65                   	sub		r5,r5,#1	; decrement width
   2807 0000CFC2 A1 34                   	shr		r4,#1
   2808 0000CFC4 A1 34                   	shr		r4,#1
   2809 0000CFC6 A1 34                   	shr		r4,#1
   2810 0000CFC8 A1 34                   	shr		r4,#1
   2811 0000CFCA 02 A8                   	beq		PHN6			; is it zero yet ?
   2812 0000CFCC FF 68                   	sub		r8,r8,#1	; safety
   2813 0000CFCE ED B9                   	bne		PHN1
   2814 0000CFD0                        PHN6
   2815 0000CFD0 56 25                   	or		r5,r5		; test pad count
   2816 0000CFD2 06 A2                   	ble		PHN4			; skip padding if not needed
   2817 0000CFD4                        PHN3
   2818 0000CFD4 02 40 00 11             	lw		r1,#' '		; display the required leading spaces
   2819 0000CFD8 86 4F 09 AF             	call	GOOUT
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 48
noc_boot11.a
   2820 0000CFDC FF 65                   	sub		r5,r5,#1
   2821 0000CFDE FA B9                   	bne		PHN3
   2822 0000CFE0                        PHN4
   2823 0000CFE0 66 26                   	or		r6,r6		; is number negative?
   2824 0000CFE2 04 AB                   	bpl		PHN5
   2825 0000CFE4 02 40 0D 11             	lw		r1,#'-'		; if so, display the sign
   2826 0000CFE8 86 4F 01 AF             	call	GOOUT
   2827 0000CFEC                        PHN5
   2828 0000CFEC FF 67                   	sub		r7,r7,#1
   2829 0000CFEE 70 E1                   	lb		r1,[r7]		; now unstack the digits and display
   2830 0000CFF0 85 4F 0D AF             	call	GOOUT
   2831 0000CFF4 F8 4F 74 10             	cmp		r7,#NUMWKA
   2832 0000CFF8 F9 B7                   	bgtu	PHN5
   2833 0000CFFA                        PHNRET
   2834 0000CFFA E0 FF                   	lw		lr,[sp]
   2835 0000CFFC E2 F5                   	lw		r5,2[sp]
   2836 0000CFFE E4 F6                   	lw		r6,4[sp]
   2837 0000D000 E6 F7                   	lw		r7,6[sp]
   2838 0000D002 E8 F8                   	lw		r8,8[sp]
   2839 0000D004 0A 6E                   	add		sp,sp,#10
   2840 0000D006 F0 80                   	ret
                                        
                                        
                                        ; r1 = pointer to line
                                        ; returns r1 = pointer to end of line + 1
   2845 0000D008                        PRTLN
   2846 0000D008 FC 6E                       sub     sp,sp,#4
   2847 0000D00A E0 DF                       sw      lr,[sp]
   2848 0000D00C E2 D5                       sw      r5,2[sp]
   2849 0000D00E 12 15                       add     r5,r1,#2
   2850 0000D010 5E E1                       lb		r1,-2[r5]	; get the binary line number
   2851 0000D012 0E 21                       zxb		r1
   2852 0000D014 5F E2                       lb		r2,-1[r5]
   2853 0000D016 0E 22                       zxb		r2
   2854 0000D018 81 32                       shl		r2,#1
   2855 0000D01A 81 32                       shl		r2,#1
   2856 0000D01C 81 32                       shl		r2,#1
   2857 0000D01E 81 32                       shl		r2,#1
   2858 0000D020 81 32                       shl		r2,#1
   2859 0000D022 81 32                       shl		r2,#1
   2860 0000D024 81 32                       shl		r2,#1
   2861 0000D026 81 32                       shl		r2,#1
   2862 0000D028 26 21                       or		r1,r2
   2863 0000D02A 00 12                       lw      r2,#0       ; display a 0 or more digit line no.
   2864 0000D02C 7D BF                   	call	PRTNUM
   2865 0000D02E 02 40 00 11             	lw      r1,#' '     ; followed by a blank
   2866 0000D032 83 4F 0C AF             	call	GOOUT
   2867 0000D036 00 12                   	lw      r2,#0       ; stop char. is a zero
   2868 0000D038 50 11                   	lw      r1,r5
   2869 0000D03A 2E BF                   	call    PRTSTG		; display the rest of the line
   2870 0000D03C E2 F5                   	lw      r5,2[sp]
   2871 0000D03E E0 FF                   	lw      lr,[sp]
   2872 0000D040 04 6E                   	add     sp,sp,#4
   2873 0000D042 F0 80                   	ret
                                        
                                        
                                        ; ===== Test text byte following the call to this subroutine. If it
                                        ;	equals the byte pointed to by r8, return to the code following
                                        ;	the call. If they are not equal, brnch to the point
                                        ;	indicated by the offset byte following the text byte.
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 49
noc_boot11.a
                                        ;
                                        ; Registers Affected
                                        ;   r8
                                        ; Returns
                                        ;	r8 = updated text pointer
                                        ;
   2886 0000D044                        TSTC
   2887 0000D044 FA 6E                   	sub		sp,sp,#6
   2888 0000D046 E0 DF                   	sw		lr,[sp]
   2889 0000D048 E2 D1                   	sw		r1,2[sp]
   2890 0000D04A E4 D3                   	sw		r3,4[sp]
   2891 0000D04C 82 AF                   	call	IGNBLK		; ignore leading blanks
   2892 0000D04E E0 FF                   	lw		lr,[sp]	; get the return address
   2893 0000D050 F0 E3                   	lb		r3,[lr]	; get the byte to compare
   2894 0000D052 80 E1                   	lb		r1,[r8]
   2895 0000D054 1D 23                   	cmp		r3,r1		; is it = to what r8 points to?
   2896 0000D056 06 A8                   	beq		TSTC1			; if so
                                        						; If not, add the second
   2898 0000D058 F1 E3                   	lb		r3,1[lr]	; byte following the call to
   2899 0000D05A 30 2F                   	add		lr,r3		; the return address.
   2900 0000D05C E2 F1                   	lw		r1,2[sp]
   2901 0000D05E E4 F3                   	lw		r3,4[sp]
   2902 0000D060 06 6E                   	add		sp,sp,#6
   2903 0000D062 F0 80                   	ret					; jump to the routine
   2904 0000D064                        TSTC1
   2905 0000D064 01 68                   	add		r8,r8,#1	; if equal, bump text pointer
   2906 0000D066 E2 F1                   	lw		r1,2[sp]
   2907 0000D068 E4 F3                   	lw		r3,4[sp]
   2908 0000D06A 06 6E                   	add     sp,sp,#6
   2909 0000D06C F2 80                   	jmp		2[lr]		; Skip the 2 bytes following
                                        						; the call and continue.
                                        
                                        
                                        ; ===== See if the text pointed to by r8 is a number. If so,
                                        ;	return the number in r2 and the number of digits in r3,
                                        ;	else return zero in r2 and r3.
                                        ; Registers Affected
                                        ;   r1,r2,r3,r4
                                        ; Returns
                                        ; 	r1 = number
                                        ;	r2 = number high order
                                        ;	r3 = number of digits in number
                                        ;	r8 = updated text pointer
                                        ;
   2924 0000D06E                        TSTNUM
   2925 0000D06E FA 6E                   	sub		sp,sp,#6
   2926 0000D070 E0 DF                   	sw		lr,[sp]
   2927 0000D072 E2 D5                   	sw		r5,2[sp]
   2928 0000D074 E4 D6                   	sw		r6,4[sp]
                                        	;call	GetHexNumber
                                        	;cmp		r3,#0
                                        	;bgtu	TSNMRET
   2932 0000D076 6D AF                   	call	IGNBLK		; skip over blanks
   2933 0000D078 00 11                   	lw		r1,#0		; initialize return parameters
   2934 0000D07A 00 12                   	lw		r2,#0
   2935 0000D07C 00 13                   	lw		r3,#0
   2936 0000D07E                        TN1
   2937 0000D07E 80 E5                   	lb		r5,[r8]
   2938 0000D080 FD 4F 50 10             	cmp		r5,#'0'		; is it less than zero?
   2939 0000D084 1A A4                   	bltu	TSNMRET 	; if so, that's all
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 50
noc_boot11.a
   2940 0000D086 FC 4F 57 10             	cmp		r5,#'9'		; is it greater than nine?
   2941 0000D08A 17 A7                   	bgtu	TSNMRET 	; if so, return
   2942 0000D08C 33 4F 24 10             	cmp		r2,#$CCC
   2943 0000D090 04 A6                   	bleu	TN2
                                        ;	cmp		r1,#214748364	; see if there's room for new digit
   2945 0000D092 35 4D 01 11             	lea		r1,msgNumTooBig
   2946 0000D096 E4 4F 08 AE             	br		ERROR		; if not, we've overflowd
   2947 0000D09A                        TN2
   2948 0000D09A 10 14                   	lw		r4,r1		; quickly multiply result by 10
   2949 0000D09C 20 16                   	lw		r6,r2
   2950 0000D09E 81 31                   	shl		r1,#1		; * 2
   2951 0000D0A0 21 22                   	adc		r2,r2
   2952 0000D0A2 81 31                   	shl		r1,#1		; * 4
   2953 0000D0A4 21 22                   	adc		r2,r2
   2954 0000D0A6 40 21                   	add		r1,r4		; * 5
   2955 0000D0A8 61 22                   	adc		r2,r6
   2956 0000D0AA 81 31                   	shl		r1,#1		; * 10
   2957 0000D0AC 21 22                   	adc		r2,r2
   2958 0000D0AE 01 68                   	add		r8,r8,#1	; adjust text pointer
   2959 0000D0B0 00 40 5F 35             	and		r5,#0xF		; add in the new digit
   2960 0000D0B4 50 21                   	add		r1,r5
   2961 0000D0B6 01 63                   	add		r3,r3,#1	; increment the no. of digits
   2962 0000D0B8 E2 BE                   	br		TN1
   2963 0000D0BA                        TSNMRET
   2964 0000D0BA E0 FF                   	lw		lr,[sp]
   2965 0000D0BC E2 F5                   	lw		r5,2[sp]
   2966 0000D0BE E4 F6                   	lw		r6,4[sp]
   2967 0000D0C0 06 6E                   	add		sp,sp,#6
   2968 0000D0C2 F0 80                   	ret
                                        
   2970 0000D0C4                        ConvHexDigit:
   2971 0000D0C4 FD 4F 10 10             	cmp		r1,#'0'
   2972 0000D0C8 17 A0                   	blt		ConvHexDigit1
   2973 0000D0CA FC 4F 17 10             	cmp		r1,#'9'
   2974 0000D0CE 02 A3                   	bgt		ConvHexDigit3
   2975 0000D0D0 D0 61                   	sub		r1,r1,#'0'
   2976 0000D0D2 F0 80                   	ret
   2977 0000D0D4                        ConvHexDigit3:
   2978 0000D0D4 F9 4F 1F 10             	cmp		r1,#'a'
   2979 0000D0D8 0F A0                   	blt		ConvHexDigit1
   2980 0000D0DA F9 4F 1A 10             	cmp		r1,#'f'
   2981 0000D0DE 03 A3                   	bgt		ConvHexDigit2
   2982 0000D0E0 9F 61                   	sub		r1,r1,#'a'
   2983 0000D0E2 0A 61                   	add		r1,r1,#10
   2984 0000D0E4 F0 80                   	ret
   2985 0000D0E6                        ConvHexDigit2:
   2986 0000D0E6 FB 4F 1F 10             	cmp		r1,#'A'
   2987 0000D0EA 06 A0                   	blt		ConvHexDigit1
   2988 0000D0EC FB 4F 1A 10             	cmp		r1,#'F'
   2989 0000D0F0 03 A3                   	bgt		ConvHexDigit1
   2990 0000D0F2 BF 61                   	sub		r1,r1,#'A'
   2991 0000D0F4 0A 61                   	add		r1,r1,#10
   2992 0000D0F6 F0 80                   	ret
   2993 0000D0F8                        ConvHexDigit1:
   2994 0000D0F8 0F 11                   	lw		r1,#-1
   2995 0000D0FA F0 80                   	ret
                                        
   2997 0000D0FC                        GetHexNumber:
   2998 0000D0FC FC 6E                   	sub		sp,sp,#4
   2999 0000D0FE E0 DF                   	sw		lr,[sp]
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 51
noc_boot11.a
   3000 0000D100 28 AF                   	call	IGNBLK		; skip over blanks
   3001 0000D102 00 11                   	lw		r1,#0		; initialize return parameters
   3002 0000D104 00 12                   	lw		r2,#0
   3003 0000D106 00 13                   	lw		r3,#0
   3004 0000D108 80 19                   	mov		r9,r8
   3005 0000D10A 80 E4                   	lb		r4,[r8]
   3006 0000D10C FD 4F 4C 10             	cmp		r4,#'$'
   3007 0000D110 18 A9                   	bne		GetHexNumberRet
   3008 0000D112 01 68                   	add		r8,r8,#1
   3009 0000D114                        GetHexNumber1
   3010 0000D114 E2 D1                   	sw		r1,2[sp]
   3011 0000D116 80 E1                   	lb		r1,[r8]
   3012 0000D118 D5 BF                   	call	ConvHexDigit
   3013 0000D11A 12 AA                   	bmi		GetHexNumber4
   3014 0000D11C 10 14                   	mov		r4,r1
   3015 0000D11E E2 F1                   	lw		r1,2[sp]
   3016 0000D120 00 4F 21 10             	cmp		r2,#$FFF
   3017 0000D124 12 A7                   	bgtu	GetHexNumberErr
   3018 0000D126                        GetHexNumber2
   3019 0000D126 81 31                   	shl		r1,#1
   3020 0000D128 21 22                   	adc		r2,r2
   3021 0000D12A 81 31                   	shl		r1,#1
   3022 0000D12C 21 22                   	adc		r2,r2
   3023 0000D12E 81 31                   	shl		r1,#1
   3024 0000D130 21 22                   	adc		r2,r2
   3025 0000D132 81 31                   	shl		r1,#1
   3026 0000D134 21 22                   	adc		r2,r2
   3027 0000D136 46 21                   	or		r1,r4
   3028 0000D138 80 19                   	mov		r9,r8
   3029 0000D13A 01 68                   	add		r8,r8,#1	; adjust text pointer
   3030 0000D13C 01 63                   	add		r3,r3,#1	; increment the no. of digits
   3031 0000D13E EA BE                   	br		GetHexNumber1
   3032 0000D140                        GetHexNumber4:
   3033 0000D140 E2 F1                   	lw		r1,2[sp]
   3034 0000D142                        GetHexNumberRet:
   3035 0000D142 90 18                   	mov		r8,r9
   3036 0000D144 E0 FF                   	lw		lr,[sp]
   3037 0000D146 04 6E                   	add		sp,sp,#4
   3038 0000D148 F0 80                   	ret
   3039 0000D14A                        GetHexNumberErr:
   3040 0000D14A 35 4D 01 11             	lea		r1,msgNumTooBig
   3041 0000D14E DE 4F 0C AE             	br		ERROR		; if not, we've overflowd
                                        
                                        ;===== Skip over blanks in the text pointed to by r8.
                                        ;
                                        ; Registers Affected:
                                        ;	r8
                                        ; Returns
                                        ;	r8 = pointer updateded past any spaces or tabs
                                        ;
   3050 0000D152                        IGNBLK
   3051 0000D152 FE 6E                   	sub		sp,sp,#2
   3052 0000D154 E0 D1                   	sw		r1,[sp]
   3053 0000D156                        IGB2
   3054 0000D156 80 E1                   	lb		r1,[r8]			; get char
   3055 0000D158 FE 4F 10 10             	cmp		r1,#' '			; see if it's a space
   3056 0000D15C 03 A8                   	beq		IGB1			; if so, swallow it
   3057 0000D15E FF 4F 17 10             	cmp		r1,#'\t'		; or a tab
   3058 0000D162 02 A9                   	bne		IGBRET
   3059 0000D164                        IGB1
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 52
noc_boot11.a
   3060 0000D164 01 68                   	add		r8,r8,#1		; increment the text pointer
   3061 0000D166 F7 BE                   	br		IGB2
   3062 0000D168                        IGBRET
   3063 0000D168 E0 F1                   	lw		r1,[sp]
   3064 0000D16A 02 6E                   	add		sp,sp,#2
   3065 0000D16C F0 80                   	ret
                                        
                                        
                                        ; ===== Convert the line of text in the input buffer to upper
                                        ;	case (except for stuff between quotes).
                                        ;
                                        ; Registers Affected
                                        ;   r1,r3
                                        ; Returns
                                        ;	r8 = pointing to end of text in buffer
                                        ;
   3076 0000D16E                        TOUPBUF
   3077 0000D16E FE 6E                   	sub		sp,sp,#2
   3078 0000D170 E0 DF                   	sw		lr,[sp]
   3079 0000D172 0A 40 0E 18             	lea		r8,BUFFER	; set up text pointer
   3080 0000D176 00 13                   	lw		r3,#0		; clear quote flag
   3081 0000D178                        TOUPB1
   3082 0000D178 80 E1                   	lb		r1,[r8]		; get the next text char.
   3083 0000D17A 01 68                   	add		r8,r8,#1
   3084 0000D17C FF 4F 13 10             	cmp		r1,#CR		; is it end of line?
   3085 0000D180 13 A8                   	beq		TOUPBRT 	; if so, return
   3086 0000D182 FD 4F 1E 10             	cmp		r1,#'"'		; a double quote?
   3087 0000D186 08 A8                   	beq		DOQUO
   3088 0000D188 FD 4F 19 10             	cmp		r1,#''''	; or a single quote?
   3089 0000D18C 05 A8                   	beq		DOQUO
   3090 0000D18E 30 10                   	cmp		r3,#0		; inside quotes?
   3091 0000D190 F3 B9                   	bne		TOUPB1		; if so, do the next one
   3092 0000D192 0D AF                   	call	toUpper 	; convert to upper case
   3093 0000D194 8F C1                   	sb		r1,-1[r8]	; store it
   3094 0000D196 F0 BE                   	br		TOUPB1		; and go back for more
   3095 0000D198                        DOQUO
   3096 0000D198 30 10                   	cmp		r3,#0		; are we inside quotes?
   3097 0000D19A 02 A9                   	bne		DOQUO1
   3098 0000D19C 10 13                   	lw		r3,r1		; if not, toggle inside-quotes flag
   3099 0000D19E EC BE                   	br		TOUPB1
   3100 0000D1A0                        DOQUO1
   3101 0000D1A0 1D 23                   	cmp		r3,r1		; make sure we're ending proper quote
   3102 0000D1A2 EA B9                   	bne		TOUPB1		; if not, ignore it
   3103 0000D1A4 00 13                   	lw		r3,#0		; else clear quote flag
   3104 0000D1A6 E8 BE                   	br		TOUPB1
   3105 0000D1A8                        TOUPBRT
   3106 0000D1A8 E0 FF                   	lw		lr,[sp]
   3107 0000D1AA 02 6E                   	add		sp,sp,#2
   3108 0000D1AC F0 80                   	ret
                                        
                                        
                                        ; ===== Convert the character in r1 to upper case
                                        ;
   3113 0000D1AE                        toUpper
   3114 0000D1AE F9 4F 1F 10             	cmp		r1,#'a'		; is it < 'a'?
   3115 0000D1B2 04 A0                   	blt	    TOUPRET
   3116 0000D1B4 F8 4F 16 10             	cmp		r1,#'z'		; or > 'z'?
   3117 0000D1B8 01 A3                   	bgt	    TOUPRET
   3118 0000D1BA E0 61                   	sub		r1,r1,#32	; if not, make it upper case
   3119 0000D1BC                        TOUPRET
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 53
noc_boot11.a
   3120 0000D1BC F0 80                   	ret
                                        
                                        
                                        ; 'CHKIO' checks the input. If there's no input, it will return
                                        ; to the caller with the Z flag set. If there is input, the Z
                                        ; flag is cleared and the input byte is in r2. However, if a
                                        ; control-C is read, 'CHKIO' will warm-start BASIC and will not
                                        ; return to the caller.
                                        ;
   3129 0000D1BE                        CHKIO
   3130 0000D1BE FE 6E                   	sub		sp,sp,#2	; save link reg
   3131 0000D1C0 E0 DF                   	sw		lr,[sp]
   3132 0000D1C2 77 4F 06 AF             	call	GOIN		; get input if possible
   3133 0000D1C6 07 A8                   	beq		CHKRET2		; if Zero, no input
   3134 0000D1C8 1D 10                   	cmp		r1,#CTRLC	; is it control-C?
   3135 0000D1CA 02 A9                   	bne		CHKRET		; if not
   3136 0000D1CC 7B 4F 00 AE             	jmp		WSTART		; if so, do a warm start
   3137 0000D1D0                        CHKRET
   3138 0000D1D0 E0 FF                   	lw		lr,[sp]
   3139 0000D1D2 02 6E                   	add		sp,sp,#2	; Z=0
   3140 0000D1D4 F0 80                   	ret
   3141 0000D1D6                        CHKRET2
   3142 0000D1D6 E0 FF                   	lw		lr,[sp]
   3143 0000D1D8 02 6E                   	add		sp,sp,#2
   3144 0000D1DA 00 11                   	lw		r1,#0		; Z=1
   3145 0000D1DC F0 80                   	ret
                                        
                                        
                                        ; ===== Display a CR-LF sequence
                                        ;
   3150 0000D1DE                        CRLF
   3151 0000D1DE 33 4D 03 11             	lea		r1,CLMSG
                                        
                                        
                                        ; ===== Display a zero-ended string pointed to by register r1
                                        ; Registers Affected
                                        ;   r1,r2,r4
                                        ;
   3158 0000D1E2                        PRMESG
   3159 0000D1E2 FC 6E                   	sub		sp,sp,#4
   3160 0000D1E4 E0 DF                   	sw		lr,[sp]
   3161 0000D1E6 E2 D5                   	sw		r5,2[sp]
   3162 0000D1E8 10 15                   	lw      r5,r1       ; r5 = pointer to message
   3163 0000D1EA                        PRMESG1
   3164 0000D1EA 01 65                   	add		r5,r5,#1
   3165 0000D1EC 5F E1                   	lb		r1,-1[r5]	; 	get the char.
   3166 0000D1EE 03 A8                   	beq		PRMRET
   3167 0000D1F0 75 4F 0D AF             	call	GOOUT		;else display it trashes r4
   3168 0000D1F4 FA BE                   	br		PRMESG1
   3169 0000D1F6                        PRMRET
   3170 0000D1F6 50 11                   	lw		r1,r5
   3171 0000D1F8 E2 F5                   	lw		r5,2[sp]
   3172 0000D1FA E0 FF                   	lw		lr,[sp]
   3173 0000D1FC 04 6E                   	add		sp,sp,#4
   3174 0000D1FE F0 80                   	ret
                                        
                                        
                                        ; ===== Display a zero-ended string pointed to by register r1
                                        ; Registers Affected
                                        ;   r1,r2,r3
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 54
noc_boot11.a
                                        ;
   3181 0000D200                        PRMESGAUX
   3182 0000D200 FC 6E                   	sub		sp,sp,#4
   3183 0000D202 E0 DF                   	sw		lr,[sp]
   3184 0000D204 E2 D5                   	sw		r5,2[sp]
   3185 0000D206 10 15                   	lw      r5,r1       ; r3 = pointer
   3186 0000D208                        PRMESGA1
   3187 0000D208 01 65                   	add		r5,r5,#1
   3188 0000D20A 5F E1                   	lb		r1,-1[r5]	; 	get the char.
   3189 0000D20C 03 A8                   	beq		PRMRETA
   3190 0000D20E 75 4F 02 AF             	call	GOAUXO		;else display it
   3191 0000D212 FA BE                   	br		PRMESGA1
   3192 0000D214                        PRMRETA
   3193 0000D214 50 11                   	lw		r1,r5
   3194 0000D216 E2 F5                   	lw		r5,2[sp]
   3195 0000D218 E0 FF                   	lw		lr,[sp]
   3196 0000D21A 04 6E                   	add		sp,sp,#4
   3197 0000D21C F0 80                   	ret
                                        
                                        ;*****************************************************
                                        ; The following routines are the only ones that need *
                                        ; to be changed for a different I/O environment.     *
                                        ;*****************************************************
                                        
                                        
                                        ; ===== Output character to the console (Port 1) from register D0
                                        ;	(Preserves all registers.)
                                        ;
   3208 0000D21E                        OUTC
   3209 0000D21E FC 6E                   	add		sp,sp,#-4
   3210 0000D220 E0 DF                   	sw		lr,[sp]
   3211 0000D222 E2 D1                   	sw		r1,2[sp]
   3212 0000D224 01 4B 00 E1             	lb		r1,ROUTER+RTR_RXSTAT
   3213 0000D228 03 40 5F 31             	and		r1,#63
   3214 0000D22C 04 A8                   	beq		OUTC1
   3215 0000D22E 72 4F 07 AF             	call	Recv
   3216 0000D232 37 40 09 AF             	call	RecvDispatch
   3217 0000D236                        OUTC1
   3218 0000D236 E2 F1                   	lw		r1,2[sp]
   3219 0000D238 4B 40 05 AF             	call	putcharScr
   3220 0000D23C E0 FF                   	lw		lr,[sp]
   3221 0000D23E 04 6E                   	add		sp,sp,#4
   3222 0000D240 F0 80                   	ret
                                        
                                        
                                        ; ===== Input a character from the console into register D0 (or
                                        ;	return Zero status if there's no character available).
                                        ;
                                        ; A bit of cooperative multi-tasking here. A check for network
                                        ; messages is made.
                                        ;
   3231 0000D242                        INC
   3232 0000D242 FE 6E                   	add		sp,sp,#-2
   3233 0000D244 E0 DF                   	sw		lr,[sp]
   3234 0000D246 05 42 06 F1             	lw		r1,TXTSCR+86
   3235 0000D24A 01 61                   	add		r1,r1,#1
   3236 0000D24C 05 42 06 D1             	sw		r1,TXTSCR+86
   3237 0000D250 01 4B 00 E1             	lb		r1,ROUTER+RTR_RXSTAT
   3238 0000D254 03 40 5F 31             	and		r1,#63
   3239 0000D258 04 A8                   	beq		INC1
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 55
noc_boot11.a
   3240 0000D25A 71 4F 01 AF             	call	Recv
   3241 0000D25E 36 40 03 AF             	call	RecvDispatch
   3242 0000D262                        INC1
   3243 0000D262 55 40 07 AF             	call	kbdGetChar
   3244 0000D266 03 A8                   	beq		INC2
   3245 0000D268 E0 FF                   	lw		lr,[sp]
   3246 0000D26A 02 6E                   	add		sp,sp,#2
   3247 0000D26C F0 80                   	ret
   3248 0000D26E                        INC2:
   3249 0000D26E E0 FF                   	lw		lr,[sp]
   3250 0000D270 02 6E                   	add		sp,sp,#2
   3251 0000D272 00 11                   	lw		r1,#0
   3252 0000D274 F0 80                   	ret
                                        
                                        
                                        ; Trigger a load operation on the target node.
                                        
   3257 0000D276                        TriggerTgtLoad:
   3258 0000D276 FC 6E                   	add		sp,sp,#-4
   3259 0000D278 E0 DF                   	sw		lr,[sp]
   3260 0000D27A E2 D2                   	sw		r2,2[sp]
   3261 0000D27C 6C 4F 00 AF             	call	zeroTxBuf
   3262 0000D280 03 40 06 E2             	lb		r2,tgtNode
   3263 0000D284 04 40 0F C2             	sb		r2,txBuf+MSG_DST
   3264 0000D288 0A 12                   	lw		r2,#MT_START_BASIC_LOAD	; trigger load on target node
   3265 0000D28A 04 40 08 C2             	sb		r2,txBuf+MSG_TYPE
   3266 0000D28E 6E 4F 02 AF             	call	Xmit
   3267 0000D292 E2 F2                   	lw		r2,2[sp]
   3268 0000D294 E0 FF                   	lw		lr,[sp]
   3269 0000D296 04 6E                   	add		sp,sp,#4
   3270 0000D298 F0 80                   	ret
                                        
                                        ; ===== Output character to the host (Port 2) from register r1
                                        ;	(Preserves all registers.)
                                        ;
   3275 0000D29A                        AUXOUT
   3276 0000D29A FE 6E                   	add		sp,sp,#-2
   3277 0000D29C E0 DF                   	sw		lr,[sp]
   3278 0000D29E 2B 49 04 AF             	call	putSerial	; call boot rom routine
   3279 0000D2A2 E0 FF                   	lw		lr,[sp]
   3280 0000D2A4 02 6E                   	add		sp,sp,#2
   3281 0000D2A6 F0 80                   	ret
                                        
                                        ;
                                        ; ===== Input a character from the host into register D0 (or
                                        ;	return negative status if there's no character available).
                                        ;
   3287 0000D2A8                        AUXIN
                                        ; get character from serial port
                                        ; return  N=1 if no character available
   3290 0000D2A8 2A 49 0D AE             	jmp		peekSerial
                                        
                                        
                                        ; flash the character at the screen position
                                        ;   r1: 1 = flash, 0 = no flash
   3295 0000D2AC                        _flashCursor
   3296 0000D2AC 00 42 00 12             	lw		r2,#VIDEORAM
   3297 0000D2B0 03 40 04 F3             	lh		r3,pos
   3298 0000D2B4 81 33                   	shl		r3,#1
   3299 0000D2B6 81 33                   	shl		r3,#1
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 56
noc_boot11.a
   3300 0000D2B8 20 23                   	add		r3,r2		; r3 = scr[pos]
                                        
   3302 0000D2BA 16 21                   	or		r1,r1
   3303 0000D2BC 04 A8                   	beq		fc1
   3304 0000D2BE 33 E2                   	lb		r2,3[r3]	; get background color
   3305 0000D2C0 08 40 60 32             	or		r2,#0x80	; set flash indicator
   3306 0000D2C4 03 AE                   	br		fcx
   3307 0000D2C6                        fc1
   3308 0000D2C6 33 E2                   	lb		r2,3[r3]	; get background color
   3309 0000D2C8 07 40 5F 32             	and		r2,#0x7f	; clear flash indicator
   3310 0000D2CC                        fcx:
   3311 0000D2CC 33 C2                   	sb		r2,3[r3]
   3312 0000D2CE F0 80                   	ret
                                        
                                        
   3315 0000D2D0                        _cls
   3316 0000D2D0 43 40 0F AF             	call	ClearScreen
   3317 0000D2D4 8D 4F 04 AE             	br		FINISH
                                        
                                        
                                        ; ===== Return to the resident monitor, operating system, etc.
                                        ;
   3322 0000D2D8                        BYEBYE
   3323 0000D2D8 05 40 0E FE             	lw		sp,OSSP
   3324 0000D2DC E0 FF                       lw      lr,[sp]
   3325 0000D2DE 02 6E                       add		sp,sp,#2
   3326 0000D2E0 F0 80                   	ret
                                        
                                        ;	MOVE.B	#228,D7 	return to Tutor
                                        ;	TRAP	#14
                                        
   3331 0000D2E2 0D 0A 42 75 74 74      msgInit db	CR,LF,"Butterfly Tiny BASIC v1.1",CR,LF,"(C) 2005-2017  Robert Finch",CR,LF,LF,0
   3331 0000D2E8 65 72 66 6C 79 20 54  
   3331 0000D2EF 69 6E 79 20 42 41 53  
   3331 0000D2F6 49 43 20 76 31 2E 31  
   3331 0000D2FD 0D 0A 28 43 29 20 32  
   3331 0000D304 30 30 35 2D 32 30 31  
   3331 0000D30B 37 20 20 52 6F 62 65  
   3331 0000D312 72 74 20 46 69 6E 63  
   3331 0000D319 68 0D 0A 0A 00        
   3332 0000D31E 0D 0A 4F 4B 0D 0A      OKMSG	db	CR,LF,"OK",CR,LF,0
   3332 0000D324 00                    
   3333 0000D325 57 68 61 74 3F 0D      msgWhat	db	"What?",CR,LF,0
   3333 0000D32B 0A 00                 
   3334 0000D32D 53 6F 72 72 79 2E      SRYMSG	db	"Sorry."
                                      
   3335 0000D333 0D 0A 00               CLMSG	db	CR,LF,0
   3336 0000D336 43 6F 6D 70 61 63      msgReadError	db	"Compact FLASH read error",CR,LF,0
   3336 0000D33C 74 20 46 4C 41 53 48  
   3336 0000D343 20 72 65 61 64 20 65  
   3336 0000D34A 72 72 6F 72 0D 0A 00  
                                      
   3337 0000D351 4E 75 6D 62 65 72      msgNumTooBig	db	"Number is too big",CR,LF,0
   3337 0000D357 20 69 73 20 74 6F 6F  
   3337 0000D35E 20 62 69 67 0D 0A 00  
                                      
   3338 0000D365 44 69 76 69 73 69      msgDivZero		db	"Division by zero",CR,LF,0
   3338 0000D36B 6F 6E 20 62 79 20 7A  
   3338 0000D372 65 72 6F 0D 0A 00     
   3339 0000D378 4F 75 74 20 6F 66      msgVarSpace     db  "Out of variable space",CR,LF,0
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 57
noc_boot11.a
   3339 0000D37E 20 76 61 72 69 61 62  
   3339 0000D385 6C 65 20 73 70 61 63  
   3339 0000D38C 65 0D 0A 00           
   3340 0000D390 20 62 79 74 65 73      msgBytesFree	db	" bytes free",CR,LF,0
   3340 0000D396 20 66 72 65 65 0D 0A  
   3340 0000D39D 00                    
   3341 0000D39E 0D 0A 52 65 61 64      msgReady		db	CR,LF,"Ready",CR,LF,0
   3341 0000D3A4 79 0D 0A 00           
   3342 0000D3A8 45 78 70 65 63 74      msgComma		db	"Expecting a comma",CR,LF,0
   3342 0000D3AE 69 6E 67 20 61 20 63  
   3342 0000D3B5 6F 6D 6D 61 0D 0A 00  
                                      
   3343 0000D3BC 4C 69 6E 65 20 6E      msgLineRange	db	"Line number too big",CR,LF,0
   3343 0000D3C2 75 6D 62 65 72 20 74  
   3343 0000D3C9 6F 6F 20 62 69 67 0D  
   3343 0000D3D0 0A 00                 
   3344 0000D3D2 45 78 70 65 63 74      msgVar			db	"Expecting a variable",CR,LF,0
   3344 0000D3D8 69 6E 67 20 61 20 76  
   3344 0000D3DF 61 72 69 61 62 6C 65  
   3344 0000D3E6 0D 0A 00              
   3345 0000D3E9 52 4E 44 20 62 61      msgRNDBad		db	"RND bad parameter",CR,LF,0
   3345 0000D3EF 64 20 70 61 72 61 6D  
   3345 0000D3F6 65 74 65 72 0D 0A 00  
                                      
   3346 0000D3FD 53 59 53 20 62 61      msgSYSBad		db	"SYS bad address",CR,LF,0
   3346 0000D403 64 20 61 64 64 72 65  
   3346 0000D40A 73 73 0D 0A 00        
   3347 0000D40F 49 4E 50 55 54 20      msgInputVar		db	"INPUT expecting a variable",CR,LF,0
   3347 0000D415 65 78 70 65 63 74 69  
   3347 0000D41C 6E 67 20 61 20 76 61  
   3347 0000D423 72 69 61 62 6C 65 0D  
   3347 0000D42A 0A 00                 
   3348 0000D42C 4E 45 58 54 20 77      msgNextFor		db	"NEXT without FOR",CR,LF,0
   3348 0000D432 69 74 68 6F 75 74 20  
   3348 0000D439 46 4F 52 0D 0A 00     
   3349 0000D43F 4E 45 58 54 20 65      msgNextVar		db	"NEXT expecting a defined variable",CR,LF,0
   3349 0000D445 78 70 65 63 74 69 6E  
   3349 0000D44C 67 20 61 20 64 65 66  
   3349 0000D453 69 6E 65 64 20 76 61  
   3349 0000D45A 72 69 61 62 6C 65 0D  
   3349 0000D461 0A 00                 
   3350 0000D463 47 4F 54 4F 2F 47      msgBadGotoGosub	db	"GOTO/GOSUB bad line number",CR,LF,0
   3350 0000D469 4F 53 55 42 20 62 61  
   3350 0000D470 64 20 6C 69 6E 65 20  
   3350 0000D477 6E 75 6D 62 65 72 0D  
   3350 0000D47E 0A 00                 
   3351 0000D480 52 45 54 55 52 4E      msgRetWoGosub   db	"RETURN without GOSUB",CR,LF,0
   3351 0000D486 20 77 69 74 68 6F 75  
   3351 0000D48D 74 20 47 4F 53 55 42  
   3351 0000D494 0D 0A 00              
   3352 0000D497 50 72 6F 67 72 61      msgTooBig		db	"Program is too big",CR,LF,0
   3352 0000D49D 6D 20 69 73 20 74 6F  
   3352 0000D4A4 6F 20 62 69 67 0D 0A  
   3352 0000D4AB 00                    
   3353 0000D4AC 45 78 74 72 61 20      msgExtraChars	db	"Extra characters on line ignored",CR,LF,0
   3353 0000D4B2 63 68 61 72 61 63 74  
   3353 0000D4B9 65 72 73 20 6F 6E 20  
   3353 0000D4C0 6C 69 6E 65 20 69 67  
   3353 0000D4C7 6E 6F 72 65 64 0D 0A  
   3353 0000D4CE 00                    
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 58
noc_boot11.a
                                        
   3355 0000D4CF FF                      	.align	4
   3422 = 0000D4D0                      LSTROM	equ	*		; end of possible ROM area
                                        ;
                                        ; Internal variables follow:
                                        ;
                                        		bss
                                        		org		0x0030
   3362 00000030                        txtWidth	db	0		; BIOS var =60
   3363 00000031                        txtHeight	db	0		; BIOS var =27
   3364 00000032                        cursx	db		0		; cursor x position
   3365 00000033                        cursy	db		0		; cursor y position
   3366 00000034                        pos		dw		0		; text screen position
   3367 00000036                        tgtNode	db		0
   3368 00000037                        srcNode	db		0
                                        		org		0x0038
   3370 00000038                        charToPrint		dw		0
   3371 0000003A                        fgColor			db		0
   3372 0000003B                        bkColor			db		0
   3373 0000003C                        cursFlash		db		0	; flash the cursor ?
   3374 0000003D                         				db		0
   3375 0000003E                        NormAttr		dw		0
                                        
   3377 00000040                        lineLinkTbl		fill.b	25,0	; screen line link table
   3378 00000059                         	align 4
                                        
                                        		;org		0x0080
   3381 0000005C                        typef   db      0   ; variable / expression type
   3382 0000005D                                 align   2
   3383 0000005E                        OSSP	dw	1	; OS value of sp
   3384 00000060                        CURRNT	dw	1	;	Current line pointer
   3385 00000062                        STKGOS	dw	1	;	Saves stack pointer in 'GOSUB'
   3386 00000064                        STKINP	dw	1	;	Saves stack pointer during 'INPUT'
   3387 00000066                        LOPVAR	dw	1	;	'FOR' loop save area
   3388 00000068                        LOPINC	dw	1	;	increment
   3389 0000006A                        LOPLMT	dw	1	;	limit
   3390 0000006C                        LOPLN	dw	1	;	line number
   3391 0000006E                        LOPPT	dw	1	;	text pointer
   3392 00000070                        TXTUNF	dw	1	;	points to unfilled text area
   3393 00000072                        VARBGN	dw	1	;	points to variable area
   3394 00000074                        IVARBGN dw  1   ;   points to integer variable area
   3395 00000076                        SVARBGN dw  1   ;   points to string variable area
   3396 00000078                        FVARBGN dw  1   ;   points to float variable area
   3397 0000007A                        STKBOT	dw	1	;	holds lower limit for stack growth
   3398 0000007C                        NUMWKA	fill.b	50,0			; numeric work area
   3399 000000AE                        BUFFER	fill.b	BUFLEN,0x00		;		Keyboard input buffer
                                        
                                                bss
                                                org     0x2000
   3403 00002000                        textScr1
                                                org     0x2000
                                        ;	END
                                        		.code
   3407 0000D4D0 FF FF FF FF FF FF FF    		.org	$D800
   3407 0000D4D7 FF FF FF FF FF FF FF  
   3407 0000D4DE FF FF FF FF FF FF FF  
   3407 0000D4E5 FF FF FF FF FF FF FF  
   3407 0000D4EC FF FF FF FF FF FF FF  
   3407 0000D4F3 FF FF FF FF FF FF FF  
   3407 0000D4FA FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 59
noc_boot11.a
   3407 0000D501 FF FF FF FF FF FF FF  
   3407 0000D508 FF FF FF FF FF FF FF  
   3407 0000D50F FF FF FF FF FF FF FF  
   3407 0000D516 FF FF FF FF FF FF FF  
   3407 0000D51D FF FF FF FF FF FF FF  
   3407 0000D524 FF FF FF FF FF FF FF  
   3407 0000D52B FF FF FF FF FF FF FF  
   3407 0000D532 FF FF FF FF FF FF FF  
   3407 0000D539 FF FF FF FF FF FF FF  
   3407 0000D540 FF FF FF FF FF FF FF  
   3407 0000D547 FF FF FF FF FF FF FF  
   3407 0000D54E FF FF FF FF FF FF FF  
   3407 0000D555 FF FF FF FF FF FF FF  
   3407 0000D55C FF FF FF FF FF FF FF  
   3407 0000D563 FF FF FF FF FF FF FF  
   3407 0000D56A FF FF FF FF FF FF FF  
   3407 0000D571 FF FF FF FF FF FF FF  
   3407 0000D578 FF FF FF FF FF FF FF  
   3407 0000D57F FF FF FF FF FF FF FF  
   3407 0000D586 FF FF FF FF FF FF FF  
   3407 0000D58D FF FF FF FF FF FF FF  
   3407 0000D594 FF FF FF FF FF FF FF  
   3407 0000D59B FF FF FF FF FF FF FF  
   3407 0000D5A2 FF FF FF FF FF FF FF  
   3407 0000D5A9 FF FF FF FF FF FF FF  
   3407 0000D5B0 FF FF FF FF FF FF FF  
   3407 0000D5B7 FF FF FF FF FF FF FF  
   3407 0000D5BE FF FF FF FF FF FF FF  
   3407 0000D5C5 FF FF FF FF FF FF FF  
   3407 0000D5CC FF FF FF FF FF FF FF  
   3407 0000D5D3 FF FF FF FF FF FF FF  
   3407 0000D5DA FF FF FF FF FF FF FF  
   3407 0000D5E1 FF FF FF FF FF FF FF  
   3407 0000D5E8 FF FF FF FF FF FF FF  
   3407 0000D5EF FF FF FF FF FF FF FF  
   3407 0000D5F6 FF FF FF FF FF FF FF  
   3407 0000D5FD FF FF FF FF FF FF FF  
   3407 0000D604 FF FF FF FF FF FF FF  
   3407 0000D60B FF FF FF FF FF FF FF  
   3407 0000D612 FF FF FF FF FF FF FF  
   3407 0000D619 FF FF FF FF FF FF FF  
   3407 0000D620 FF FF FF FF FF FF FF  
   3407 0000D627 FF FF FF FF FF FF FF  
   3407 0000D62E FF FF FF FF FF FF FF  
   3407 0000D635 FF FF FF FF FF FF FF  
   3407 0000D63C FF FF FF FF FF FF FF  
   3407 0000D643 FF FF FF FF FF FF FF  
   3407 0000D64A FF FF FF FF FF FF FF  
   3407 0000D651 FF FF FF FF FF FF FF  
   3407 0000D658 FF FF FF FF FF FF FF  
   3407 0000D65F FF FF FF FF FF FF FF  
   3407 0000D666 FF FF FF FF FF FF FF  
   3407 0000D66D FF FF FF FF FF FF FF  
   3407 0000D674 FF FF FF FF FF FF FF  
   3407 0000D67B FF FF FF FF FF FF FF  
   3407 0000D682 FF FF FF FF FF FF FF  
   3407 0000D689 FF FF FF FF FF FF FF  
   3407 0000D690 FF FF FF FF FF FF FF  
   3407 0000D697 FF FF FF FF FF FF FF  
   3407 0000D69E FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 60
noc_boot11.a
   3407 0000D6A5 FF FF FF FF FF FF FF  
   3407 0000D6AC FF FF FF FF FF FF FF  
   3407 0000D6B3 FF FF FF FF FF FF FF  
   3407 0000D6BA FF FF FF FF FF FF FF  
   3407 0000D6C1 FF FF FF FF FF FF FF  
   3407 0000D6C8 FF FF FF FF FF FF FF  
   3407 0000D6CF FF FF FF FF FF FF FF  
   3407 0000D6D6 FF FF FF FF FF FF FF  
   3407 0000D6DD FF FF FF FF FF FF FF  
   3407 0000D6E4 FF FF FF FF FF FF FF  
   3407 0000D6EB FF FF FF FF FF FF FF  
   3407 0000D6F2 FF FF FF FF FF FF FF  
   3407 0000D6F9 FF FF FF FF FF FF FF  
   3407 0000D700 FF FF FF FF FF FF FF  
   3407 0000D707 FF FF FF FF FF FF FF  
   3407 0000D70E FF FF FF FF FF FF FF  
   3407 0000D715 FF FF FF FF FF FF FF  
   3407 0000D71C FF FF FF FF FF FF FF  
   3407 0000D723 FF FF FF FF FF FF FF  
   3407 0000D72A FF FF FF FF FF FF FF  
   3407 0000D731 FF FF FF FF FF FF FF  
   3407 0000D738 FF FF FF FF FF FF FF  
   3407 0000D73F FF FF FF FF FF FF FF  
   3407 0000D746 FF FF FF FF FF FF FF  
   3407 0000D74D FF FF FF FF FF FF FF  
   3407 0000D754 FF FF FF FF FF FF FF  
   3407 0000D75B FF FF FF FF FF FF FF  
   3407 0000D762 FF FF FF FF FF FF FF  
   3407 0000D769 FF FF FF FF FF FF FF  
   3407 0000D770 FF FF FF FF FF FF FF  
   3407 0000D777 FF FF FF FF FF FF FF  
   3407 0000D77E FF FF FF FF FF FF FF  
   3407 0000D785 FF FF FF FF FF FF FF  
   3407 0000D78C FF FF FF FF FF FF FF  
   3407 0000D793 FF FF FF FF FF FF FF  
   3407 0000D79A FF FF FF FF FF FF FF  
   3407 0000D7A1 FF FF FF FF FF FF FF  
   3407 0000D7A8 FF FF FF FF FF FF FF  
   3407 0000D7AF FF FF FF FF FF FF FF  
   3407 0000D7B6 FF FF FF FF FF FF FF  
   3407 0000D7BD FF FF FF FF FF FF FF  
   3407 0000D7C4 FF FF FF FF FF FF FF  
   3407 0000D7CB FF FF FF FF FF FF FF  
   3407 0000D7D2 FF FF FF FF FF FF FF  
   3407 0000D7D9 FF FF FF FF FF FF FF  
   3407 0000D7E0 FF FF FF FF FF FF FF  
   3407 0000D7E7 FF FF FF FF FF FF FF  
   3407 0000D7EE FF FF FF FF FF FF FF  
   3407 0000D7F5 FF FF FF FF FF FF FF  
   3407 0000D7FC FF FF FF FF           
   3408 0000D800                        start:
   3409 0000D800 E4 31                   		tsr		r1,ID		; id register
   3410 0000D802 20 4B 00 C1             		sb		r1,LEDS
   3411 0000D806 FF 41 0E 1E             		lw		sp,#$1FFE
                                        ;		br		start2
   3413 0000D80A 0A 40 00 C0             		sb		r0,kbdhead
   3414 0000D80E 0A 40 01 C0             		sb		r0,kbdtail
   3415 0000D812 0A 40 02 C0             		sb		r0,kbdcnt
   3416 0000D816 0A 40 02 D0             		sw		r0,pingcnt
   3417 0000D81A C3 42 00 12             		lw		r2,#TXTSCR+3120
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 61
noc_boot11.a
   3418 0000D81E 0E 40 08 D2             		sw		r2,packetPtr
   3419 0000D822 10 40 08 AF             		call	InitTxtCtrl
   3420 0000D826 04 11                   		lw		r1,#4
   3421 0000D828 20 4B 00 C1             		sb		r1,LEDS
   3422 0000D82C 01 40 0F 11             		lw		r1,#31
   3423 0000D830 03 40 01 C1             		sb		r1,txtHeight
   3424 0000D834 03 40 04 11             		lw		r1,#52
   3425 0000D838 03 40 00 C1             		sb		r1,txtWidth
   3426 0000D83C F0 4B 00 11             		lw		r1,#$BF00
   3427 0000D840 03 40 0E D1             		sw		r1,NormAttr
   3428 0000D844 18 40 05 AF             		call	ClearScreen
   3429 0000D848 19 40 07 AF             		call	HomeCursor
   3430 0000D84C D3 4D 0C 11             		lw		r1,#msgStarting
   3431 0000D850 19 40 0B AF             		call	putmsgScr
                                        ;		lw		r1,#$80					; set router in snoop mode
                                        ;		sb		r1,ROUTER+RTR_RXSTAT
                                        		;call	broadcastReset
   3435 0000D854                        start2:
   3436 0000D854 08 40 00 11             		lw		r1,#$80					; set router in non-snoop mode
   3437 0000D858 01 4B 00 C1             		sb		r1,ROUTER+RTR_RXSTAT
   3438 0000D85C E4 31                   		tsr		r1,ID
   3439 0000D85E FE 4F 1F 10             		cmp		r1,#$11
   3440 0000D862 06 A9                   		bne		RecvLoop
   3441 0000D864 1F AF                   		call	ping44
   3442 0000D866 05 11                   		lw		r1,#5
   3443 0000D868 20 4B 00 C1             		sb		r1,LEDS
   3444 0000D86C 42 4F 0B AE             		jmp		CSTART
   3445 0000D870                        RecvLoop:
   3446 0000D870                        noMsg1:
   3447 0000D870 01 4B 00 E1             		lb		r1,ROUTER+RTR_RXSTAT
   3448 0000D874 03 40 5F 31             		and		r1,#63
   3449 0000D878 FB B8                   		beq		noMsg1
   3450 0000D87A 40 4F 01 AF             		call	Recv
   3451 0000D87E 54 AF                   		call	RecvDispatch
   3452 0000D880 F7 BE                   		bra		RecvLoop
   3453 0000D882                        lockup:
   3454 0000D882 FF BE                   		bra		lockup
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Broadcast a reset message on the network.
                                        ;----------------------------------------------------------------------------
                                        
   3460 0000D884                        broadcastReset:
   3461 0000D884 FE 6E                   		add		sp,sp,#-2
   3462 0000D886 E0 DF                   		sw		lr,[sp]
   3463 0000D888 3B 4F 0A AF             		call	zeroTxBuf
   3464 0000D88C 0F 40 0F 11             		lw		r1,#$FF		; global broadcast address
   3465 0000D890 04 40 0F C1             		sb		r1,txBuf+MSG_DST
   3466 0000D894 01 11                   		lw		r1,#MT_RST
   3467 0000D896 04 40 08 C1             		sb		r1,txBuf+MSG_TYPE	; reset message
   3468 0000D89A 3D 4F 0C AF             		call	Xmit
   3469 0000D89E E0 FF                   		lw		lr,[sp]
   3470 0000D8A0 02 6E                   		add		sp,sp,#2
   3471 0000D8A2 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Ping all the nodes to ensure everything is okay.
                                        ;----------------------------------------------------------------------------
                                        
   3477 0000D8A4                        ping44:
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 62
noc_boot11.a
   3478 0000D8A4 FC 6E                   		add		sp,sp,#-4
   3479 0000D8A6 E0 DF                   		sw		lr,[sp]
   3480 0000D8A8 00 12                   		lw		r2,#0
   3481 0000D8AA                        ping441:
   3482 0000D8AA E2 D2                   		sw		r2,2[sp]
   3483 0000D8AC 3A 4F 08 AF             		call	zeroTxBuf
   3484 0000D8B0 8E 4D 28 E1             		lb		r1,NodeNumTbl[r2]
   3485 0000D8B4 04 40 0F C1             		sb		r1,txBuf+MSG_DST
                                        		lb		r1,#$11
   3487 0000D8B8 8F 4D 08 C1             		sb		r1,txBuf+MSG_GDS
   3488 0000D8BC 09 11                   		lw		r1,#MT_PING
   3489 0000D8BE 04 40 08 C1             		sb		r1,txBuf+MSG_TYPE
   3490 0000D8C2 3C 4F 08 AF             		call	Xmit
   3491 0000D8C6 01 4B 00 E1             		lb		r1,ROUTER+RTR_RXSTAT
   3492 0000D8CA 03 40 57 31             		and		r1,#55
   3493 0000D8CE 04 A8                   		beq		ping442
   3494 0000D8D0 3D 4F 06 AF             		call	Recv
   3495 0000D8D4 C0 AF                   		call	RecvDump
   3496 0000D8D6 28 AF                   		call	RecvDispatch
   3497 0000D8D8                        ping442:
   3498 0000D8D8 E2 F2                   		lw		r2,2[sp]
   3499 0000D8DA 01 62                   		add		r2,r2,#1
   3500 0000D8DC FC 4F 20 10             		cmp		r2,#64
   3501 0000D8E0 E4 B4                   		bltu	ping441
   3502 0000D8E2 E0 FF                   		lw		lr,[sp]
   3503 0000D8E4 04 6E                   		add		sp,sp,#4
   3504 0000D8E6 F0 80                   		ret
                                        
   3506 0000D8E8                        NodeNumTbl:
   3507 0000D8E8 11 12 13 14 15 16 17    	db	$11,$12,$13,$14,$15,$16,$17,$18	
   3507 0000D8EF 18                    
   3508 0000D8F0 21 22 23 24 25 26 27    	db	$21,$22,$23,$24,$25,$26,$27,$28	
   3508 0000D8F7 28                    
   3509 0000D8F8 31 32 33 34 35 36 37    	db	$31,$32,$33,$34,$35,$36,$37,$38	
   3509 0000D8FF 38                    
   3510 0000D900 41 42 43 44 45 46 47    	db	$41,$42,$43,$44,$45,$46,$47,$48	
   3510 0000D907 48                    
   3511 0000D908 51 52 53 54 55 56 57    	db	$51,$52,$53,$54,$55,$56,$57,$58	
   3511 0000D90F 58                    
   3512 0000D910 61 62 63 64 65 66 67    	db	$61,$62,$63,$64,$65,$66,$67,$68	
   3512 0000D917 68                    
   3513 0000D918 71 72 73 74 75 76 77    	db	$71,$72,$73,$74,$75,$76,$77,$78	
   3513 0000D91F 78                    
   3514 0000D920 81 82 83 84 85 86 87    	db	$81,$82,$83,$84,$85,$86,$87,$88	
   3514 0000D927 88                    
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Dispatch routine for recieved messages.
                                        ;----------------------------------------------------------------------------
                                        
   3520 0000D928                        RecvDispatch:
   3521 0000D928 F8 6E                   		add		sp,sp,#-8
   3522 0000D92A E0 DF                   		sw		lr,[sp]
   3523 0000D92C 94 AF                   		call	RecvDump
   3524 0000D92E E2 D1                   		sw		r1,2[sp]
   3525 0000D930 E4 D2                   		sw		r2,4[sp]
   3526 0000D932 E6 D3                   		sw		r3,6[sp]
   3527 0000D934 05 40 0F E1             		lb		r1,rxBuf+MSG_DST
   3528 0000D938 81 31                   		shl		r1,#1
   3529 0000D93A 81 31                   		shl		r1,#1
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 63
noc_boot11.a
   3530 0000D93C 81 31                   		shl		r1,#1
   3531 0000D93E 81 31                   		shl		r1,#1
   3532 0000D940 61 31                   		or		r1,#1
   3533 0000D942 E4 32                   		tsr		r2,ID
   3534 0000D944 1D 22                   		cmp		r2,r1
   3535 0000D946 45 A9                   		bne		RecvDispatchXit
   3536 0000D948 0A 40 02 F1             		lw		r1,pingcnt
   3537 0000D94C 01 61                   		add		r1,r1,#1
   3538 0000D94E 0A 40 02 D1             		sw		r1,pingcnt
   3539 0000D952 F3 4F 18 10             		cmp		r1,#200
   3540 0000D956 03 A9                   		bne		RecvDispatchNoPing
   3541 0000D958 0A 40 02 D0             		sw		r0,pingcnt
   3542 0000D95C A3 BF                   		call	ping44
   3543 0000D95E                        RecvDispatchNoPing
   3544 0000D95E 05 40 08 E1             		lb		r1,rxBuf+MSG_TYPE
   3545 0000D962 1E 10                   		cmp		r1,#MT_RST_ACK	; status display ?
   3546 0000D964 17 A9                   		bne		RecvDispatch2
   3547 0000D966                        RecvPingAck:
   3548 0000D966 05 40 0E E1             		lb		r1,rxBuf+MSG_SRC; message source
   3549 0000D96A 10 12                   		mov		r2,r1
   3550 0000D96C 57 32                   		and		r2,#$7			; get Y coord
   3551 0000D96E 81 32                   		shl		r2,#1			; shift left once
   3552 0000D970 D6 4D 2E F2             		lw		r2,lineTbl[r2]
   3553 0000D974 58 62                   		add		r2,r2,#88		; position table along right edge of screen
   3554 0000D976 10 13                   		mov		r3,r1			; r3 = ID
   3555 0000D978 A1 33                   		shr		r3,#1
   3556 0000D97A A1 33                   		shr		r3,#1
   3557 0000D97C A1 33                   		shr		r3,#1
   3558 0000D97E A1 33                   		shr		r3,#1
   3559 0000D980 81 33                   		shl		r3,#1			; character screen pos = *2
   3560 0000D982 00 40 5E 33             		and		r3,#$0E
   3561 0000D986 20 23                   		add		r3,r2
                                        		;lw		r1,#'*'
                                        		;call	AsciiToScreen
                                        		;lw		r2,NormAttr
                                        		;or		r1,r2
   3566 0000D988 00 42 30 F1             		lw		r1,TXTSCR[r3]
   3567 0000D98C 01 61                   		add		r1,r1,#1
   3568 0000D98E 00 42 30 D1             		sw		r1,TXTSCR[r3]
   3569 0000D992 1F AE                   		bra		RecvDispatchXit
   3570 0000D994                        RecvDispatch2:
   3571 0000D994 FE 4F 1E 10             		cmp		r1,#MT_PING_ACK
   3572 0000D998 E6 B8                   		beq		RecvPingAck
   3573 0000D99A 1C 10                   		cmp		r1,#MT_KEYSTROKE
   3574 0000D99C 20 A8                   		beq		RecvKeystroke
   3575 0000D99E FE 4F 1D 10             		cmp		r1,#MT_ETH_PACKET
   3576 0000D9A2 3B A8                   		beq		RecvEthPacket
   3577 0000D9A4 FF 4F 11 10             		cmp		r1,#MT_REQ_OUT_FOCUS
   3578 0000D9A8 14 A9                   		bne		RecvDispatch3
   3579 0000D9AA 05 40 0E E1             		lb		r1,rxBuf+MSG_SRC
   3580 0000D9AE 10 12                   		mov		r2,r1
   3581 0000D9B0 FF 61                   		sub		r1,r1,#1
   3582 0000D9B2 57 31                   		and		r1,#$7
   3583 0000D9B4 F0 62                   		sub		r2,r2,#$10
   3584 0000D9B6 07 40 50 32             		and		r2,#$70
   3585 0000D9BA A1 32                   		shr		r2,#1
   3586 0000D9BC 26 21                   		or		r1,r2
   3587 0000D9BE 01 12                   		lw		r2,#1
   3588 0000D9C0 0A 40 17 C2             		sb		r2,FocusTbl[r1]
   3589 0000D9C4 0E 40 07 E1             		lb		r1,HTOutFocus
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 64
noc_boot11.a
   3590 0000D9C8 04 A9                   		bne		RecvDispatch3
   3591 0000D9CA 05 40 0E E1             		lb		r1,rxBuf+MSG_SRC
   3592 0000D9CE 0E 40 07 C1             		sb		r1,HTOutFocus
   3593 0000D9D2                        RecvDispatch3:
   3594 0000D9D2                        RecvDispatchXit:
   3595 0000D9D2 E0 FF                   		lw		lr,[sp]
   3596 0000D9D4 E2 F1                   		lw		r1,2[sp]
   3597 0000D9D6 E4 F2                   		lw		r2,4[sp]
   3598 0000D9D8 E6 F3                   		lw		r3,6[sp]
   3599 0000D9DA 08 6E                   		add		sp,sp,#8
   3600 0000D9DC F0 80                   		ret
                                        		; Process a keystroke message from node $21
   3602 0000D9DE                        RecvKeystroke:
   3603 0000D9DE 08 11                   		lw		r1,#8
   3604 0000D9E0 20 4B 00 C1             		sb		r1,LEDS
   3605 0000D9E4 0A 40 02 E1             		lb		r1,kbdcnt
   3606 0000D9E8 FF 4F 11 10             		cmp		r1,#15
   3607 0000D9EC 15 A1                   		bge		kbdfull
   3608 0000D9EE 09 11                   		lw		r1,#9
   3609 0000D9F0 20 4B 00 C1             		sb		r1,LEDS
   3610 0000D9F4 01 61                   		add		r1,r1,#1
   3611 0000D9F6 0A 40 02 C1             		sb		r1,kbdcnt
   3612 0000D9FA 0A 40 00 E2             		lb		r2,kbdhead
   3613 0000D9FE 05 40 02 E1             		lb		r1,rxBuf+2
   3614 0000DA02 06 40 20 C1             		sb		r1,kbdbuf[r2]
   3615 0000DA06 05 40 01 E1             		lb		r1,rxBuf+1
   3616 0000DA0A 06 40 21 C1             		sb		r1,kbdbuf+1[r2]
   3617 0000DA0E 02 62                   		add		r2,r2,#2
   3618 0000DA10 01 40 5E 32             		and		r2,#30
   3619 0000DA14 0A 40 00 C2             		sb		r2,kbdhead
   3620 0000DA18                        kbdfull:
   3621 0000DA18 DC BE                   		br		RecvDispatchXit
   3622 0000DA1A                        RecvEthPacket:
   3623 0000DA1A 05 40 02 F1             		lw		r1,rxBuf+2
   3624 0000DA1E 0E 40 08 F2             		lw		r2,packetPtr
   3625 0000DA22 20 D1                   		sw		r1,[r2]
   3626 0000DA24 02 62                   		add		r2,r2,#2
   3627 0000DA26 36 4D 28 10             		cmp		r2,#TXTSCR+3224
   3628 0000DA2A 02 A4                   		bltu	RecvEthPacket1
   3629 0000DA2C C3 42 00 12             		lw		r2,#TXTSCR+3120
   3630 0000DA30                        RecvEthPacket1:
   3631 0000DA30 0E 40 08 D2             		sw		r2,packetPtr
   3632 0000DA34 CE BE                   		br		RecvDispatchXit
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Initialize the text controller.
                                        ;----------------------------------------------------------------------------
                                        
   3638 0000DA36                        InitTxtCtrl:
   3639 0000DA36 02 11                   		lw		r1,#2
   3640 0000DA38 20 4B 00 C1             		sb		r1,LEDS
   3641 0000DA3C 00 12                   		lw		r2,#0
   3642 0000DA3E                        itc1:
   3643 0000DA3E D5 4D 2D E1             		lb		r1,txtctrl_dat[r2]
   3644 0000DA42 10 4B 20 C1             		sb		r1,TXTCTRL[r2]
   3645 0000DA46 01 62                   		add		r2,r2,#1
   3646 0000DA48 FF 4F 21 10             		cmp		r2,#15
   3647 0000DA4C F8 B2                   		ble		itc1
   3648 0000DA4E 03 11                   		lw		r1,#3
   3649 0000DA50 20 4B 00 C1             		sb		r1,LEDS
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 65
noc_boot11.a
   3650 0000DA54 F0 80                   		ret
                                        
                                        ;------------------------------------------------------------------------------
                                        ; Dump recieved message to screen.
                                        ;
                                        ; Parameters:
                                        ;	<none> data in receive buffer
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	<none>
                                        ;------------------------------------------------------------------------------
                                        
   3663 0000DA56                        RecvDump:
   3664 0000DA56 FC 6E                   		sub		sp,sp,#4
   3665 0000DA58 E0 DF                   		sw		lr,[sp]
   3666 0000DA5A E2 D1                   		sw		r1,2[sp]
   3667 0000DA5C 20 AF                   		call	DispCRLF
   3668 0000DA5E 05 40 0F E1             		lb		r1,rxBuf+MSG_DST
   3669 0000DA62 41 AF                   		call	DispByte
   3670 0000DA64 26 AF                   		call	DispSpace
   3671 0000DA66 05 40 0E E1             		lb		r1,rxBuf+MSG_SRC
   3672 0000DA6A 3D AF                   		call	DispByte
   3673 0000DA6C 22 AF                   		call	DispSpace
   3674 0000DA6E 05 40 09 E1             		lb		r1,rxBuf+MSG_TTL
   3675 0000DA72 39 AF                   		call	DispByte
   3676 0000DA74 1E AF                   		call	DispSpace
   3677 0000DA76 05 40 08 E1             		lb		r1,rxBuf+MSG_TYPE
   3678 0000DA7A 35 AF                   		call	DispByte
   3679 0000DA7C 1A AF                   		call	DispSpace
   3680 0000DA7E 05 40 06 F1             		lw		r1,rxBuf+6
   3681 0000DA82 1F AF                   		call	DispWord
   3682 0000DA84 05 40 04 F1             		lw		r1,rxBuf+4
   3683 0000DA88 1C AF                   		call	DispWord
   3684 0000DA8A 05 40 02 F1             		lw		r1,rxBuf+2
   3685 0000DA8E 19 AF                   		call	DispWord
   3686 0000DA90 05 40 00 F1             		lw		r1,rxBuf+0
   3687 0000DA94 16 AF                   		call	DispWord
   3688 0000DA96 E0 FF                   		lw		lr,[sp]
   3689 0000DA98 E2 F1                   		lw		r1,2[sp]
   3690 0000DA9A 04 6E                   		add		sp,sp,#4
   3691 0000DA9C F0 80                   		ret
                                        
                                        ;------------------------------------------------------------------------------
                                        ;------------------------------------------------------------------------------
                                        
   3696 0000DA9E                        DispCRLF:
   3697 0000DA9E FE 6E                   		sub		sp,sp,#2
   3698 0000DAA0 E0 DF                   		sw		lr,[sp]
   3699 0000DAA2 00 40 0D 11             		lw		r1,#13
   3700 0000DAA6 7F AF                   		call	putcharScr
   3701 0000DAA8 0A 11                   		lw		r1,#10
   3702 0000DAAA 7D AF                   		call	putcharScr
   3703 0000DAAC E0 FF                   		lw		lr,[sp]
   3704 0000DAAE 02 6E                   		add		sp,sp,#2
   3705 0000DAB0 F0 80                   		ret
                                        
   3707 0000DAB2                        DispSpace:
   3708 0000DAB2 FE 6E                   		sub		sp,sp,#2
   3709 0000DAB4 E0 DF                   		sw		lr,[sp]
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 66
noc_boot11.a
   3710 0000DAB6 02 40 00 11             		lw		r1,#' '
   3711 0000DABA 75 AF                   		call	putcharScr
   3712 0000DABC E0 FF                   		lw		lr,[sp]
   3713 0000DABE 02 6E                   		add		sp,sp,#2
   3714 0000DAC0 F0 80                   		ret
                                        
   3716 0000DAC2                        DispWord:
   3717 0000DAC2 FC 6E                   		add		sp,sp,#-4
   3718 0000DAC4 E0 DF                   		sw		lr,[sp]
   3719 0000DAC6 E2 D1                   		sw		r1,2[sp]
   3720 0000DAC8 A1 31                   		shr		r1,#1
   3721 0000DACA A1 31                   		shr		r1,#1
   3722 0000DACC A1 31                   		shr		r1,#1
   3723 0000DACE A1 31                   		shr		r1,#1
   3724 0000DAD0 A1 31                   		shr		r1,#1
   3725 0000DAD2 A1 31                   		shr		r1,#1
   3726 0000DAD4 A1 31                   		shr		r1,#1
   3727 0000DAD6 A1 31                   		shr		r1,#1
   3728 0000DAD8 06 AF                   		call	DispByte
   3729 0000DADA E2 F1                   		lw		r1,2[sp]
   3730 0000DADC 04 AF                   		call	DispByte
   3731 0000DADE E2 F1                   		lw		r1,2[sp]
   3732 0000DAE0 E0 FF                   		lw		lr,[sp]
   3733 0000DAE2 04 6E                   		add		sp,sp,#4
   3734 0000DAE4 F0 80                   		ret
                                        
   3736 0000DAE6                        DispByte:
   3737 0000DAE6 FC 6E                   		add		sp,sp,#-4
   3738 0000DAE8 E0 DF                   		sw		lr,[sp]
   3739 0000DAEA E2 D1                   		sw		r1,2[sp]
   3740 0000DAEC A1 31                   		shr		r1,#1
   3741 0000DAEE A1 31                   		shr		r1,#1
   3742 0000DAF0 A1 31                   		shr		r1,#1
   3743 0000DAF2 A1 31                   		shr		r1,#1
   3744 0000DAF4 06 AF                   		call	DispNybble
   3745 0000DAF6 E2 F1                   		lw		r1,2[sp]
   3746 0000DAF8 04 AF                   		call	DispNybble
   3747 0000DAFA E2 F1                   		lw		r1,2[sp]
   3748 0000DAFC E0 FF                   		lw		lr,[sp]
   3749 0000DAFE 04 6E                   		add		sp,sp,#4
   3750 0000DB00 F0 80                   		ret
                                        
   3752 0000DB02                        DispNybble:
   3753 0000DB02 FC 6E                   		add		sp,sp,#-4
   3754 0000DB04 E0 DF                   		sw		lr,[sp]
   3755 0000DB06 E2 D1                   		sw		r1,2[sp]
   3756 0000DB08 00 40 5F 31             		and		r1,#$0F
   3757 0000DB0C FF 4F 16 10             		cmp		r1,#10
   3758 0000DB10 04 A1                   		bge		DispNybble1
   3759 0000DB12 03 40 60 31             		or		r1,#$30
   3760 0000DB16 47 AF                   		call	putcharScr
   3761 0000DB18 02 AE                   		br		DispNybble2
   3762 0000DB1A                        DispNybble1:
   3763 0000DB1A 37 61                   		add		r1,#'A'-10
   3764 0000DB1C 44 AF                   		call	putcharScr
   3765 0000DB1E                        DispNybble2:
   3766 0000DB1E E2 F1                   		lw		r1,2[sp]
   3767 0000DB20 E0 FF                   		lw		lr,[sp]
   3768 0000DB22 04 6E                   		add		sp,sp,#4
   3769 0000DB24 F0 80                   		ret
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 67
noc_boot11.a
                                        				
                                        ; Convert Ascii character to screen character.
                                        ;
                                        ; Parameters:
                                        ;	r1 = character to convert
                                        ; Returns:
                                        ;	r1 = converted character
                                        ;
                                        ;------------------------------------------------------------------------------
                                        
   3780 0000DB26                        AsciiToScreen:
   3781 0000DB26 FE 6E                   		add		sp,sp,#-2
   3782 0000DB28 E0 D2                   		sw		r2,[sp]
   3783 0000DB2A 0F 40 5F 31             		and		r1,#$FF
   3784 0000DB2E 10 12                   		mov		r2,r1
   3785 0000DB30 02 40 50 32             		and		r2,#%00100000	; if bit 5 isn't set
   3786 0000DB34 06 A8                   		beq		ats1
   3787 0000DB36 10 12                   		mov		r2,r1
   3788 0000DB38 04 40 50 32             		and		r2,#%01000000	; or bit 6 isn't set
   3789 0000DB3C 02 A8                   		beq		ats1
   3790 0000DB3E 09 40 5F 31             		and		r1,#%10011111
   3791 0000DB42                        ats1:
   3792 0000DB42 E0 F2                   		lw		r2,[sp]
   3793 0000DB44 02 6E                   		add		sp,sp,#2
   3794 0000DB46 F0 80                   		ret
                                        
                                        ;------------------------------------------------------------------------------
                                        ; Convert screen character to Ascii character.
                                        ;
                                        ; Parameters:
                                        ;	r1 = character to convert
                                        ; Returns:
                                        ;	r1 = converted character
                                        ;
                                        ;------------------------------------------------------------------------------
                                        
   3806 0000DB48                        ScreenToAscii:
   3807 0000DB48 FE 4F 15 10             	cmp		r1,#26+1
   3808 0000DB4C 01 A5                   	bgeu	ScreenToAscii1
   3809 0000DB4E 60 61                   	add		r1,#$60
   3810 0000DB50                        ScreenToAscii1:
   3811 0000DB50 F0 80                   	ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Clear the screen.
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	r1,r2,r3
                                        ;----------------------------------------------------------------------------
                                        
   3824 0000DB52                        ClearScreen:
   3825 0000DB52 FE 6E                   		add		sp,sp,#-2
   3826 0000DB54 E0 DF                   		sw		lr,[sp]
   3827 0000DB56 02 40 00 11             		lw		r1,#' '
   3828 0000DB5A E5 BF                   		call	AsciiToScreen
   3829 0000DB5C 03 40 0E F2             		lw		r2,NormAttr
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 68
noc_boot11.a
   3830 0000DB60 26 21                   		or		r1,r2
   3831 0000DB62 10 13                   		mov		r3,r1
   3832 0000DB64 64 40 0C 11             		lw		r1,#1612	; 52x31
   3833 0000DB68 00 42 00 12             		lw		r2,#TXTSCR
   3834 0000DB6C                        cs1:
   3835 0000DB6C 20 D3                   		sw		r3,[r2]
   3836 0000DB6E 02 62                   		add		r2,r2,#2
   3837 0000DB70 FF 61                   		add		r1,r1,#-1
   3838 0000DB72 FC BB                   		bpl		cs1
   3839 0000DB74 E0 FF                   		lw		lr,[sp]
   3840 0000DB76 02 6E                   		add		sp,sp,#2
   3841 0000DB78 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Home the cursor
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	<none>
                                        ;----------------------------------------------------------------------------
                                        
   3854 0000DB7A                        HomeCursor:
   3855 0000DB7A 03 40 03 C0             		sb		r0,cursy
   3856 0000DB7E 03 40 02 C0             		sb		r0,cursx
   3857 0000DB82 03 40 04 D0             		sw		r0,pos
   3858 0000DB86 F0 80                   		ret
                                        
                                        ; flash the character at the screen position
                                        ;   r1: 1 = flash, 0 = no flash
   3862 0000DB88                        flashCursor:
   3863 0000DB88 F0 80                   		ret
                                        
                                        ;-----------------------------------------------------------------
                                        ; Display a message on the screen
                                        ;
                                        ; Parameters:
                                        ;	r1 = message address
                                        ;	screen pos controls where message is displayed
                                        ; Returns:
                                        ; 	r1 = points to null character
                                        ;-----------------------------------------------------------------
                                        
   3875 0000DB8A                        putmsgScr:
   3876 0000DB8A FC 6E                   	sub		sp,sp,#4	; allocate stack frame
   3877 0000DB8C E0 DF                   	sw		lr,[sp]	; save off link reg
   3878 0000DB8E E2 D3                   	sw		r3,2[sp]
   3879 0000DB90 10 13                   	mov		r3,r1		; r3 = msg address
   3880 0000DB92                        putmsg3:
   3881 0000DB92 30 E1                   	lb		r1,[r3]		; get char to display
   3882 0000DB94 03 A8                   	beq		putmsg4
   3883 0000DB96 07 AF                   	call	putcharScr	; store to screen
   3884 0000DB98 01 63                   	add		r3,r3,#1	; inc msg pointer
   3885 0000DB9A FB BE                   	br		putmsg3
   3886 0000DB9C                        putmsg4:
   3887 0000DB9C 30 11                   	mov		r1,r3
   3888 0000DB9E E2 F3                   	lw		r3,2[sp]
   3889 0000DBA0 E0 FF                   	lw		lr,[sp]
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 69
noc_boot11.a
   3890 0000DBA2 04 6E                   	add		sp,sp,#4
   3891 0000DBA4 F0 80                   	ret
                                        
                                        
                                        ;-----------------------------------------------------------------
                                        ; Put a character to the screen
                                        ;
                                        ; Parameters:
                                        ;	r1.b = character to put
                                        ;-----------------------------------------------------------------
                                        
   3901 0000DBA6                        putcharScr
   3902 0000DBA6 F6 6E                   	sub		sp,sp,#10
   3903 0000DBA8 E0 DF                   	sw		lr,[sp]
   3904 0000DBAA E2 D1                   	sw		r1,2[sp]
   3905 0000DBAC E4 D4                   	sw		r4,4[sp]
   3906 0000DBAE E6 D5                   	sw		r5,6[sp]
   3907 0000DBB0 E8 D6                   	sw		r6,8[sp]
                                        
   3909 0000DBB2 0E 21                   	zxb		r1			; mask
                                        
                                        	; first turn off any flashing cursor - it may be moved
   3912 0000DBB4 10 14                   	lw		r4,r1
   3913 0000DBB6 00 11                   	lw		r1,#0
   3914 0000DBB8 E7 BF                   	call	flashCursor
   3915 0000DBBA 40 11                   	lw		r1,r4
                                        
                                        	; process carriage return
   3918 0000DBBC FF 4F 13 10             	cmp		r1,#CR		; carriage return ?
   3919 0000DBC0 0A A9                   	bne		pc1
   3920 0000DBC2 03 40 04 F1             	lw		r1,pos		; subtract X from position
   3921 0000DBC6 03 40 02 E4             	lb		r4,cursx
   3922 0000DBCA 42 21                   	sub		r1,r4
   3923 0000DBCC 03 40 04 D1             	sw		r1,pos
   3924 0000DBD0 03 40 02 C0             	sb		r0,cursx	; and set X to zero
   3925 0000DBD4 70 AE                   	jmp		pc7
                                        
                                        	; process line feed
   3928 0000DBD6                        pc1
   3929 0000DBD6 FF 4F 16 10             	cmp		r1,#LF		; line feed ?
   3930 0000DBDA 14 A9                   	bne		pc2
   3931 0000DBDC 03 40 03 E1             	lb		r1,cursy	; past line 31 ?
   3932 0000DBE0 03 40 01 E4             	lb		r4,txtHeight
   3933 0000DBE4 FE 64                   	sub		r4,r4,#2
   3934 0000DBE6 4D 21                   	cmp		r1,r4
   3935 0000DBE8 02 A4                   	bltu	pc3			; if we are, then just scroll the screen
   3936 0000DBEA 73 AF                   	call	scrollScreenUp
   3937 0000DBEC 64 AE                   	jmp		pc7
   3938 0000DBEE                        pc3
   3939 0000DBEE 01 61                   	add		r1,r1,#1	; increment Y
   3940 0000DBF0 03 40 03 C1             	sb		r1,cursy
   3941 0000DBF4 03 40 04 F1             	lw		r1,pos		; and the cursor position
   3942 0000DBF8 03 40 00 E4             	lb		r4,txtWidth
   3943 0000DBFC 40 21                   	add		r1,r4
   3944 0000DBFE 03 40 04 D1             	sw		r1,pos
   3945 0000DC02 59 AE                   	jmp		pc7
                                        
                                        	; backspace
   3948 0000DC04                        pc2
   3949 0000DC04 FF 4F 18 10             	cmp		r1,#CTRLH	; backspace ?
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 70
noc_boot11.a
   3950 0000DC08 21 A9                   	bne		pc4
   3951 0000DC0A 03 40 02 E1             	lb		r1,cursx	; is cursor.x already zero ?
   3952 0000DC0E 01 A9                   	bne		pc5			
   3953 0000DC10 52 AE                   	jmp		pc7			; can't backspace
   3954 0000DC12                        pc5
   3955 0000DC12 FF 61                   	sub		r1,r1,#1
   3956 0000DC14 03 40 02 C1             	sb		r1,cursx
   3957 0000DC18 03 40 04 F4             	lw		r4,pos
   3958 0000DC1C FF 64                   	sub		r4,r4,#1
   3959 0000DC1E 03 40 04 D4             	sw		r4,pos
                                        	; shift remaining characters on line over
   3961 0000DC22 81 34                   	shl		r4,#1		; r4 = n
   3962 0000DC24 00 42 00 16             	lw		r6,#TXTSCR
   3963 0000DC28 40 26                   	add		r6,r4		; r6 = target pos
   3964 0000DC2A 03 40 00 E4             	lb		r4,txtWidth
   3965 0000DC2E FE 64                   	sub		r4,r4,#2
   3966 0000DC30                        pc6
   3967 0000DC30 62 F5                   	lw		r5,2[r6]	; shift next char
   3968 0000DC32 60 D5                   	sw		r5,[r6]		; over to this one
   3969 0000DC34 02 66                   	add		r6,r6,#2
   3970 0000DC36 01 61                   	add		r1,r1,#1	; until X = 39
   3971 0000DC38 4D 21                   	cmp		r1,r4
   3972 0000DC3A FA B4                   	bltu	pc6
                                        	; blank trailing character
   3974 0000DC3C 02 40 00 11             	lw		r1,#' '
   3975 0000DC40 72 BF                   	call	AsciiToScreen
   3976 0000DC42 03 40 0E F5             	lw		r5,NormAttr
   3977 0000DC46 56 21                   	or		r1,r5
   3978 0000DC48 60 D1                   	sw		r1,[r6]
   3979 0000DC4A 35 AE                   	jmp		pc7
                                        
                                        	; control character (non-printable)
   3982 0000DC4C                        pc4
   3983 0000DC4C FE 4F 10 10             	cmp		r1,#' '
   3984 0000DC50 01 A5                   	bgeu	pc11
   3985 0000DC52 31 AE                   	jmp		pc7
                                        
                                        
                                        	; some other character
                                        	; put the character to the screen, then advance cursor
   3990 0000DC54                        pc11
   3991 0000DC54 68 BF                   	call	AsciiToScreen
   3992 0000DC56 03 40 0E F4             	lw		r4,NormAttr
   3993 0000DC5A 46 21                   	or		r1,r4
   3994 0000DC5C 00 42 00 14             	lw		r4,#TXTSCR
   3995 0000DC60 03 40 04 F5             	lw		r5,pos
   3996 0000DC64 81 35                   	shl		r5,#1		; pos * 2
   3997 0000DC66 50 24                   	add		r4,r5		; scr[pos]
   3998 0000DC68 40 D1                   	sw		r1,[r4]		; = char
                                        	; advance cursor
   4000 0000DC6A 03 40 04 F5             	lw		r5,pos
   4001 0000DC6E 03 40 00 E1             	lb		r1,txtWidth
   4002 0000DC72 FE 61                   	sub		r1,r1,#2
   4003 0000DC74 03 40 02 E4             	lb		r4,cursx
   4004 0000DC78 1D 24                   	cmp		r4,r1		; would we be at end of line ?
   4005 0000DC7A 17 A6                   	bleu	pc8
   4006 0000DC7C 42 25                   	sub		r5,r4		; pos -= cursx
   4007 0000DC7E 03 40 04 D5             	sw		r5,pos
   4008 0000DC82 03 40 02 C0             	sb		r0,cursx	; cursor.x = 0
   4009 0000DC86 03 40 03 E4             	lb		r4,cursy
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 71
noc_boot11.a
   4010 0000DC8A 03 40 01 E1             	lb		r1,txtHeight
   4011 0000DC8E FE 61                   	sub		r1,r1,#2
   4012 0000DC90 1D 24                   	cmp		r4,r1		; at last line of screen ?
   4013 0000DC92 02 A6                   	bleu	pc9
   4014 0000DC94 1E AF                   	call	scrollScreenUp	; yes, scroll
   4015 0000DC96 0F AE                   	br		pc7
   4016 0000DC98                        pc9
   4017 0000DC98 01 64                   	add		r4,r4,#1	; cursor.y++
   4018 0000DC9A 03 40 03 C4             	sb		r4,cursy
   4019 0000DC9E 03 40 00 E1             	lb		r1,txtWidth
   4020 0000DCA2 10 25                   	add		r5,r1		; pos += txtWidth
   4021 0000DCA4 03 40 04 D5             	sw		r5,pos
   4022 0000DCA8 06 AE                   	br		pc7
   4023 0000DCAA                        pc8						; not at EOL
   4024 0000DCAA 01 64                   	add		r4,r4,#1	; cursor.x++
   4025 0000DCAC 03 40 02 C4             	sb		r4,cursx
   4026 0000DCB0 01 65                   	add		r5,r5,#1	; pos++
   4027 0000DCB2 03 40 04 D5             	sw		r5,pos
                                        
   4029 0000DCB6                        pc7
   4030 0000DCB6 03 40 0C E1             	lb		r1,cursFlash	; flash or don't flash the cursor
   4031 0000DCBA 66 BF                   	call	flashCursor
   4032 0000DCBC 03 40 04 F5             	lw		r5,pos
   4033 0000DCC0 10 4B 0E D5             	sw		r5,TXTCTRL+14
   4034 0000DCC4 E0 FF                   	lw		lr,[sp]
   4035 0000DCC6 E2 F1                   	lw		r1,2[sp]
   4036 0000DCC8 E4 F4                   	lw		r4,4[sp]
   4037 0000DCCA E6 F5                   	lw		r5,6[sp]
   4038 0000DCCC E8 F6                   	lw		r6,8[sp]
   4039 0000DCCE 0A 6E                   	add		sp,sp,#10
   4040 0000DCD0 F0 80                   	ret
                                        
   4042 0000DCD2                        scrollScreenUp:
   4043 0000DCD2 FC 6E                   	sub		sp,sp,#4
   4044 0000DCD4 E0 DF                   	sw		lr,[sp]
   4045 0000DCD6 E2 D5                   	sw		r5,2[sp]
   4046 0000DCD8 61 40 07 13             	lw		r3,#1559	; number of chars to move - 1
   4047 0000DCDC 00 42 00 12             	lw		r2,#TXTSCR
   4048 0000DCE0 03 40 00 E1             	lb		r1,txtWidth
   4049 0000DCE4 81 31                   	shl		r1,#1
   4050 0000DCE6                        scrollScreenUp1:
   4051 0000DCE6 20 15                   	mov		r5,r2
   4052 0000DCE8 10 25                   	add		r5,r1
   4053 0000DCEA 50 F4                   	lw		r4,[r5]		; char at next line
   4054 0000DCEC 20 D4                   	sw		r4,[r2]		; goes to this line
   4055 0000DCEE 02 62                   	add		r2,r2,#2
   4056 0000DCF0 FF 63                   	sub		r3,r3,#1
   4057 0000DCF2 F9 B9                   	bne     scrollScreenUp1
                                        	; blank out last line
   4059 0000DCF4 02 40 00 11             	lw		r1,#' '
   4060 0000DCF8 16 BF                   	call	AsciiToScreen
   4061 0000DCFA 03 40 0E F3             	lw		r3,NormAttr
   4062 0000DCFE 36 21                   	or		r1,r3
   4063 0000DD00 03 40 00 E3             	lb		r3,txtWidth
   4064 0000DD04                        scrollScreenUp2:
   4065 0000DD04 20 D1                   	sw		r1,[r2]
   4066 0000DD06 02 62                   	add		r2,r2,#2
   4067 0000DD08 FF 63                   	sub		r3,r3,#1
   4068 0000DD0A FC B9                   	bne     scrollScreenUp2
   4069 0000DD0C E0 FF                   	lw		lr,[sp]
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 72
noc_boot11.a
   4070 0000DD0E E2 F5                   	lw		r5,2[sp]
   4071 0000DD10 04 6E                   	add		sp,sp,#4
   4072 0000DD12 F0 80                   	ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Get character from keyboard buffer. Characters are placed in the buffer
                                        ; when a keystroke message is sent by node $21.
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	r1 = ascii character, 0 if no char available.
                                        ;	.ZF = 1 if no char available, otherwise .ZF = 0
                                        ;----------------------------------------------------------------------------
                                        
   4085 0000DD14                        kbdGetChar:
   4086 0000DD14 0A 40 02 E1             	lb		r1,kbdcnt
   4087 0000DD18 10 A8                   	beq		kbdGetCharXitZero
   4088 0000DD1A FE 6E                   	add		sp,sp,#-2
   4089 0000DD1C E0 D2                   	sw		r2,[sp]
   4090 0000DD1E FF 61                   	sub		r1,r1,#1
   4091 0000DD20 0A 40 02 C1             	sb		r1,kbdcnt
   4092 0000DD24 0A 40 01 E2             	lb		r2,kbdtail
   4093 0000DD28 06 40 20 E1             	lb		r1,kbdbuf[r2]
   4094 0000DD2C 02 62                   	add		r2,r2,#2
   4095 0000DD2E 01 40 5E 32             	and		r2,#30
   4096 0000DD32 0A 40 01 C2             	sb		r2,kbdtail
   4097 0000DD36 E0 F2                   	lw		r2,[sp]
   4098 0000DD38 02 6E                   	add		sp,sp,#2			; this should leave the ZF clear
   4099 0000DD3A                        kbdGetCharXitZero:
   4100 0000DD3A F0 80                   	ret
                                        
   4102 0000DD3C                        		
   4103 0000DD3C 42 75 74 74 65 72 66    	db	"Butterfly Grid Computer Starting",0
   4103 0000DD43 6C 79 20 47 72 69 64  
   4103 0000DD4A 20 43 6F 6D 70 75 74  
   4103 0000DD51 65 72 20 53 74 61 72  
   4103 0000DD58 74 69 6E 67 00        
                                        
   4105 0000DD5D                        txtctrl_dat:
   4106 0000DD5D 34 1F 34 00 10 00 07    	db	52,31,52,0,16,0,7,$22,$1F,$E0,31,0,0,0,3,0
   4106 0000DD64 22 1F E0 1F 00 00 00  
   4106 0000DD6B 03 00                 
                                        
                                        	; Table of offsets of start of video line in video
                                        	; memory assuming 52 chars per line.
   4110 0000DD6D FF                      	.align	2
   4111 0000DD6E                        lineTbl:
   4112 0000DD6E 00 00 68 00 D0 00 38    	dw	0,104,208,312,416,520,624,728
   4112 0000DD75 01 A0 01 08 02 70 02  
   4112 0000DD7C D8 02                 
   4113 0000DD7E 40 03 A8 03 10 04 78    	dw	832,936,1040,1144,1248,1352,1456,1560,
   4113 0000DD85 04 E0 04 48 05 B0 05  
   4113 0000DD8C 18 06                 
   4114 0000DD8E 80 06 E8 06 50 07 B8    	dw	1664,1768,1872,1976,2080,2184,2288,2392,
   4114 0000DD95 07 20 08 88 08 F0 08  
   4114 0000DD9C 58 09                 
   4115 0000DD9E C0 09 28 0A 90 0A F8    	dw	2496,2600,2704,2808,2912,3016,3120,3224
   4115 0000DDA5 0A 60 0B C8 0B 30 0C  
   4115 0000DDAC 98 0C                 
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 73
noc_boot11.a
                                        ; 56 columns display table
                                        ;	dw	0,112,224,336,448,560,672,784
                                        ;	dw	896,1008,1120,1232,1344,1456,1568,1680
                                        ;	dw	1792,1804,1916,2028,2140,2252,2364,2476
                                        ;	dw	2588,2700,2812,2924,3036,3148,3260,3372
                                        
   4122 0000DDAE FF FF FF FF FF FF FF    		org		0xFFFE
   4122 0000DDB5 FF FF FF FF FF FF FF  
   4122 0000DDBC FF FF FF FF FF FF FF  
   4122 0000DDC3 FF FF FF FF FF FF FF  
   4122 0000DDCA FF FF FF FF FF FF FF  
   4122 0000DDD1 FF FF FF FF FF FF FF  
   4122 0000DDD8 FF FF FF FF FF FF FF  
   4122 0000DDDF FF FF FF FF FF FF FF  
   4122 0000DDE6 FF FF FF FF FF FF FF  
   4122 0000DDED FF FF FF FF FF FF FF  
   4122 0000DDF4 FF FF FF FF FF FF FF  
   4122 0000DDFB FF FF FF FF FF FF FF  
   4122 0000DE02 FF FF FF FF FF FF FF  
   4122 0000DE09 FF FF FF FF FF FF FF  
   4122 0000DE10 FF FF FF FF FF FF FF  
   4122 0000DE17 FF FF FF FF FF FF FF  
   4122 0000DE1E FF FF FF FF FF FF FF  
   4122 0000DE25 FF FF FF FF FF FF FF  
   4122 0000DE2C FF FF FF FF FF FF FF  
   4122 0000DE33 FF FF FF FF FF FF FF  
   4122 0000DE3A FF FF FF FF FF FF FF  
   4122 0000DE41 FF FF FF FF FF FF FF  
   4122 0000DE48 FF FF FF FF FF FF FF  
   4122 0000DE4F FF FF FF FF FF FF FF  
   4122 0000DE56 FF FF FF FF FF FF FF  
   4122 0000DE5D FF FF FF FF FF FF FF  
   4122 0000DE64 FF FF FF FF FF FF FF  
   4122 0000DE6B FF FF FF FF FF FF FF  
   4122 0000DE72 FF FF FF FF FF FF FF  
   4122 0000DE79 FF FF FF FF FF FF FF  
   4122 0000DE80 FF FF FF FF FF FF FF  
   4122 0000DE87 FF FF FF FF FF FF FF  
   4122 0000DE8E FF FF FF FF FF FF FF  
   4122 0000DE95 FF FF FF FF FF FF FF  
   4122 0000DE9C FF FF FF FF FF FF FF  
   4122 0000DEA3 FF FF FF FF FF FF FF  
   4122 0000DEAA FF FF FF FF FF FF FF  
   4122 0000DEB1 FF FF FF FF FF FF FF  
   4122 0000DEB8 FF FF FF FF FF FF FF  
   4122 0000DEBF FF FF FF FF FF FF FF  
   4122 0000DEC6 FF FF FF FF FF FF FF  
   4122 0000DECD FF FF FF FF FF FF FF  
   4122 0000DED4 FF FF FF FF FF FF FF  
   4122 0000DEDB FF FF FF FF FF FF FF  
   4122 0000DEE2 FF FF FF FF FF FF FF  
   4122 0000DEE9 FF FF FF FF FF FF FF  
   4122 0000DEF0 FF FF FF FF FF FF FF  
   4122 0000DEF7 FF FF FF FF FF FF FF  
   4122 0000DEFE FF FF FF FF FF FF FF  
   4122 0000DF05 FF FF FF FF FF FF FF  
   4122 0000DF0C FF FF FF FF FF FF FF  
   4122 0000DF13 FF FF FF FF FF FF FF  
   4122 0000DF1A FF FF FF FF FF FF FF  
   4122 0000DF21 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 74
noc_boot11.a
   4122 0000DF28 FF FF FF FF FF FF FF  
   4122 0000DF2F FF FF FF FF FF FF FF  
   4122 0000DF36 FF FF FF FF FF FF FF  
   4122 0000DF3D FF FF FF FF FF FF FF  
   4122 0000DF44 FF FF FF FF FF FF FF  
   4122 0000DF4B FF FF FF FF FF FF FF  
   4122 0000DF52 FF FF FF FF FF FF FF  
   4122 0000DF59 FF FF FF FF FF FF FF  
   4122 0000DF60 FF FF FF FF FF FF FF  
   4122 0000DF67 FF FF FF FF FF FF FF  
   4122 0000DF6E FF FF FF FF FF FF FF  
   4122 0000DF75 FF FF FF FF FF FF FF  
   4122 0000DF7C FF FF FF FF FF FF FF  
   4122 0000DF83 FF FF FF FF FF FF FF  
   4122 0000DF8A FF FF FF FF FF FF FF  
   4122 0000DF91 FF FF FF FF FF FF FF  
   4122 0000DF98 FF FF FF FF FF FF FF  
   4122 0000DF9F FF FF FF FF FF FF FF  
   4122 0000DFA6 FF FF FF FF FF FF FF  
   4122 0000DFAD FF FF FF FF FF FF FF  
   4122 0000DFB4 FF FF FF FF FF FF FF  
   4122 0000DFBB FF FF FF FF FF FF FF  
   4122 0000DFC2 FF FF FF FF FF FF FF  
   4122 0000DFC9 FF FF FF FF FF FF FF  
   4122 0000DFD0 FF FF FF FF FF FF FF  
   4122 0000DFD7 FF FF FF FF FF FF FF  
   4122 0000DFDE FF FF FF FF FF FF FF  
   4122 0000DFE5 FF FF FF FF FF FF FF  
   4122 0000DFEC FF FF FF FF FF FF FF  
   4122 0000DFF3 FF FF FF FF FF FF FF  
   4122 0000DFFA FF FF FF FF FF FF FF  
   4122 0000E001 FF FF FF FF FF FF FF  
   4122 0000E008 FF FF FF FF FF FF FF  
   4122 0000E00F FF FF FF FF FF FF FF  
   4122 0000E016 FF FF FF FF FF FF FF  
   4122 0000E01D FF FF FF FF FF FF FF  
   4122 0000E024 FF FF FF FF FF FF FF  
   4122 0000E02B FF FF FF FF FF FF FF  
   4122 0000E032 FF FF FF FF FF FF FF  
   4122 0000E039 FF FF FF FF FF FF FF  
   4122 0000E040 FF FF FF FF FF FF FF  
   4122 0000E047 FF FF FF FF FF FF FF  
   4122 0000E04E FF FF FF FF FF FF FF  
   4122 0000E055 FF FF FF FF FF FF FF  
   4122 0000E05C FF FF FF FF FF FF FF  
   4122 0000E063 FF FF FF FF FF FF FF  
   4122 0000E06A FF FF FF FF FF FF FF  
   4122 0000E071 FF FF FF FF FF FF FF  
   4122 0000E078 FF FF FF FF FF FF FF  
   4122 0000E07F FF FF FF FF FF FF FF  
   4122 0000E086 FF FF FF FF FF FF FF  
   4122 0000E08D FF FF FF FF FF FF FF  
   4122 0000E094 FF FF FF FF FF FF FF  
   4122 0000E09B FF FF FF FF FF FF FF  
   4122 0000E0A2 FF FF FF FF FF FF FF  
   4122 0000E0A9 FF FF FF FF FF FF FF  
   4122 0000E0B0 FF FF FF FF FF FF FF  
   4122 0000E0B7 FF FF FF FF FF FF FF  
   4122 0000E0BE FF FF FF FF FF FF FF  
   4122 0000E0C5 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 75
noc_boot11.a
   4122 0000E0CC FF FF FF FF FF FF FF  
   4122 0000E0D3 FF FF FF FF FF FF FF  
   4122 0000E0DA FF FF FF FF FF FF FF  
   4122 0000E0E1 FF FF FF FF FF FF FF  
   4122 0000E0E8 FF FF FF FF FF FF FF  
   4122 0000E0EF FF FF FF FF FF FF FF  
   4122 0000E0F6 FF FF FF FF FF FF FF  
   4122 0000E0FD FF FF FF FF FF FF FF  
   4122 0000E104 FF FF FF FF FF FF FF  
   4122 0000E10B FF FF FF FF FF FF FF  
   4122 0000E112 FF FF FF FF FF FF FF  
   4122 0000E119 FF FF FF FF FF FF FF  
   4122 0000E120 FF FF FF FF FF FF FF  
   4122 0000E127 FF FF FF FF FF FF FF  
   4122 0000E12E FF FF FF FF FF FF FF  
   4122 0000E135 FF FF FF FF FF FF FF  
   4122 0000E13C FF FF FF FF FF FF FF  
   4122 0000E143 FF FF FF FF FF FF FF  
   4122 0000E14A FF FF FF FF FF FF FF  
   4122 0000E151 FF FF FF FF FF FF FF  
   4122 0000E158 FF FF FF FF FF FF FF  
   4122 0000E15F FF FF FF FF FF FF FF  
   4122 0000E166 FF FF FF FF FF FF FF  
   4122 0000E16D FF FF FF FF FF FF FF  
   4122 0000E174 FF FF FF FF FF FF FF  
   4122 0000E17B FF FF FF FF FF FF FF  
   4122 0000E182 FF FF FF FF FF FF FF  
   4122 0000E189 FF FF FF FF FF FF FF  
   4122 0000E190 FF FF FF FF FF FF FF  
   4122 0000E197 FF FF FF FF FF FF FF  
   4122 0000E19E FF FF FF FF FF FF FF  
   4122 0000E1A5 FF FF FF FF FF FF FF  
   4122 0000E1AC FF FF FF FF FF FF FF  
   4122 0000E1B3 FF FF FF FF FF FF FF  
   4122 0000E1BA FF FF FF FF FF FF FF  
   4122 0000E1C1 FF FF FF FF FF FF FF  
   4122 0000E1C8 FF FF FF FF FF FF FF  
   4122 0000E1CF FF FF FF FF FF FF FF  
   4122 0000E1D6 FF FF FF FF FF FF FF  
   4122 0000E1DD FF FF FF FF FF FF FF  
   4122 0000E1E4 FF FF FF FF FF FF FF  
   4122 0000E1EB FF FF FF FF FF FF FF  
   4122 0000E1F2 FF FF FF FF FF FF FF  
   4122 0000E1F9 FF FF FF FF FF FF FF  
   4122 0000E200 FF FF FF FF FF FF FF  
   4122 0000E207 FF FF FF FF FF FF FF  
   4122 0000E20E FF FF FF FF FF FF FF  
   4122 0000E215 FF FF FF FF FF FF FF  
   4122 0000E21C FF FF FF FF FF FF FF  
   4122 0000E223 FF FF FF FF FF FF FF  
   4122 0000E22A FF FF FF FF FF FF FF  
   4122 0000E231 FF FF FF FF FF FF FF  
   4122 0000E238 FF FF FF FF FF FF FF  
   4122 0000E23F FF FF FF FF FF FF FF  
   4122 0000E246 FF FF FF FF FF FF FF  
   4122 0000E24D FF FF FF FF FF FF FF  
   4122 0000E254 FF FF FF FF FF FF FF  
   4122 0000E25B FF FF FF FF FF FF FF  
   4122 0000E262 FF FF FF FF FF FF FF  
   4122 0000E269 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 76
noc_boot11.a
   4122 0000E270 FF FF FF FF FF FF FF  
   4122 0000E277 FF FF FF FF FF FF FF  
   4122 0000E27E FF FF FF FF FF FF FF  
   4122 0000E285 FF FF FF FF FF FF FF  
   4122 0000E28C FF FF FF FF FF FF FF  
   4122 0000E293 FF FF FF FF FF FF FF  
   4122 0000E29A FF FF FF FF FF FF FF  
   4122 0000E2A1 FF FF FF FF FF FF FF  
   4122 0000E2A8 FF FF FF FF FF FF FF  
   4122 0000E2AF FF FF FF FF FF FF FF  
   4122 0000E2B6 FF FF FF FF FF FF FF  
   4122 0000E2BD FF FF FF FF FF FF FF  
   4122 0000E2C4 FF FF FF FF FF FF FF  
   4122 0000E2CB FF FF FF FF FF FF FF  
   4122 0000E2D2 FF FF FF FF FF FF FF  
   4122 0000E2D9 FF FF FF FF FF FF FF  
   4122 0000E2E0 FF FF FF FF FF FF FF  
   4122 0000E2E7 FF FF FF FF FF FF FF  
   4122 0000E2EE FF FF FF FF FF FF FF  
   4122 0000E2F5 FF FF FF FF FF FF FF  
   4122 0000E2FC FF FF FF FF FF FF FF  
   4122 0000E303 FF FF FF FF FF FF FF  
   4122 0000E30A FF FF FF FF FF FF FF  
   4122 0000E311 FF FF FF FF FF FF FF  
   4122 0000E318 FF FF FF FF FF FF FF  
   4122 0000E31F FF FF FF FF FF FF FF  
   4122 0000E326 FF FF FF FF FF FF FF  
   4122 0000E32D FF FF FF FF FF FF FF  
   4122 0000E334 FF FF FF FF FF FF FF  
   4122 0000E33B FF FF FF FF FF FF FF  
   4122 0000E342 FF FF FF FF FF FF FF  
   4122 0000E349 FF FF FF FF FF FF FF  
   4122 0000E350 FF FF FF FF FF FF FF  
   4122 0000E357 FF FF FF FF FF FF FF  
   4122 0000E35E FF FF FF FF FF FF FF  
   4122 0000E365 FF FF FF FF FF FF FF  
   4122 0000E36C FF FF FF FF FF FF FF  
   4122 0000E373 FF FF FF FF FF FF FF  
   4122 0000E37A FF FF FF FF FF FF FF  
   4122 0000E381 FF FF FF FF FF FF FF  
   4122 0000E388 FF FF FF FF FF FF FF  
   4122 0000E38F FF FF FF FF FF FF FF  
   4122 0000E396 FF FF FF FF FF FF FF  
   4122 0000E39D FF FF FF FF FF FF FF  
   4122 0000E3A4 FF FF FF FF FF FF FF  
   4122 0000E3AB FF FF FF FF FF FF FF  
   4122 0000E3B2 FF FF FF FF FF FF FF  
   4122 0000E3B9 FF FF FF FF FF FF FF  
   4122 0000E3C0 FF FF FF FF FF FF FF  
   4122 0000E3C7 FF FF FF FF FF FF FF  
   4122 0000E3CE FF FF FF FF FF FF FF  
   4122 0000E3D5 FF FF FF FF FF FF FF  
   4122 0000E3DC FF FF FF FF FF FF FF  
   4122 0000E3E3 FF FF FF FF FF FF FF  
   4122 0000E3EA FF FF FF FF FF FF FF  
   4122 0000E3F1 FF FF FF FF FF FF FF  
   4122 0000E3F8 FF FF FF FF FF FF FF  
   4122 0000E3FF FF FF FF FF FF FF FF  
   4122 0000E406 FF FF FF FF FF FF FF  
   4122 0000E40D FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 77
noc_boot11.a
   4122 0000E414 FF FF FF FF FF FF FF  
   4122 0000E41B FF FF FF FF FF FF FF  
   4122 0000E422 FF FF FF FF FF FF FF  
   4122 0000E429 FF FF FF FF FF FF FF  
   4122 0000E430 FF FF FF FF FF FF FF  
   4122 0000E437 FF FF FF FF FF FF FF  
   4122 0000E43E FF FF FF FF FF FF FF  
   4122 0000E445 FF FF FF FF FF FF FF  
   4122 0000E44C FF FF FF FF FF FF FF  
   4122 0000E453 FF FF FF FF FF FF FF  
   4122 0000E45A FF FF FF FF FF FF FF  
   4122 0000E461 FF FF FF FF FF FF FF  
   4122 0000E468 FF FF FF FF FF FF FF  
   4122 0000E46F FF FF FF FF FF FF FF  
   4122 0000E476 FF FF FF FF FF FF FF  
   4122 0000E47D FF FF FF FF FF FF FF  
   4122 0000E484 FF FF FF FF FF FF FF  
   4122 0000E48B FF FF FF FF FF FF FF  
   4122 0000E492 FF FF FF FF FF FF FF  
   4122 0000E499 FF FF FF FF FF FF FF  
   4122 0000E4A0 FF FF FF FF FF FF FF  
   4122 0000E4A7 FF FF FF FF FF FF FF  
   4122 0000E4AE FF FF FF FF FF FF FF  
   4122 0000E4B5 FF FF FF FF FF FF FF  
   4122 0000E4BC FF FF FF FF FF FF FF  
   4122 0000E4C3 FF FF FF FF FF FF FF  
   4122 0000E4CA FF FF FF FF FF FF FF  
   4122 0000E4D1 FF FF FF FF FF FF FF  
   4122 0000E4D8 FF FF FF FF FF FF FF  
   4122 0000E4DF FF FF FF FF FF FF FF  
   4122 0000E4E6 FF FF FF FF FF FF FF  
   4122 0000E4ED FF FF FF FF FF FF FF  
   4122 0000E4F4 FF FF FF FF FF FF FF  
   4122 0000E4FB FF FF FF FF FF FF FF  
   4122 0000E502 FF FF FF FF FF FF FF  
   4122 0000E509 FF FF FF FF FF FF FF  
   4122 0000E510 FF FF FF FF FF FF FF  
   4122 0000E517 FF FF FF FF FF FF FF  
   4122 0000E51E FF FF FF FF FF FF FF  
   4122 0000E525 FF FF FF FF FF FF FF  
   4122 0000E52C FF FF FF FF FF FF FF  
   4122 0000E533 FF FF FF FF FF FF FF  
   4122 0000E53A FF FF FF FF FF FF FF  
   4122 0000E541 FF FF FF FF FF FF FF  
   4122 0000E548 FF FF FF FF FF FF FF  
   4122 0000E54F FF FF FF FF FF FF FF  
   4122 0000E556 FF FF FF FF FF FF FF  
   4122 0000E55D FF FF FF FF FF FF FF  
   4122 0000E564 FF FF FF FF FF FF FF  
   4122 0000E56B FF FF FF FF FF FF FF  
   4122 0000E572 FF FF FF FF FF FF FF  
   4122 0000E579 FF FF FF FF FF FF FF  
   4122 0000E580 FF FF FF FF FF FF FF  
   4122 0000E587 FF FF FF FF FF FF FF  
   4122 0000E58E FF FF FF FF FF FF FF  
   4122 0000E595 FF FF FF FF FF FF FF  
   4122 0000E59C FF FF FF FF FF FF FF  
   4122 0000E5A3 FF FF FF FF FF FF FF  
   4122 0000E5AA FF FF FF FF FF FF FF  
   4122 0000E5B1 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 78
noc_boot11.a
   4122 0000E5B8 FF FF FF FF FF FF FF  
   4122 0000E5BF FF FF FF FF FF FF FF  
   4122 0000E5C6 FF FF FF FF FF FF FF  
   4122 0000E5CD FF FF FF FF FF FF FF  
   4122 0000E5D4 FF FF FF FF FF FF FF  
   4122 0000E5DB FF FF FF FF FF FF FF  
   4122 0000E5E2 FF FF FF FF FF FF FF  
   4122 0000E5E9 FF FF FF FF FF FF FF  
   4122 0000E5F0 FF FF FF FF FF FF FF  
   4122 0000E5F7 FF FF FF FF FF FF FF  
   4122 0000E5FE FF FF FF FF FF FF FF  
   4122 0000E605 FF FF FF FF FF FF FF  
   4122 0000E60C FF FF FF FF FF FF FF  
   4122 0000E613 FF FF FF FF FF FF FF  
   4122 0000E61A FF FF FF FF FF FF FF  
   4122 0000E621 FF FF FF FF FF FF FF  
   4122 0000E628 FF FF FF FF FF FF FF  
   4122 0000E62F FF FF FF FF FF FF FF  
   4122 0000E636 FF FF FF FF FF FF FF  
   4122 0000E63D FF FF FF FF FF FF FF  
   4122 0000E644 FF FF FF FF FF FF FF  
   4122 0000E64B FF FF FF FF FF FF FF  
   4122 0000E652 FF FF FF FF FF FF FF  
   4122 0000E659 FF FF FF FF FF FF FF  
   4122 0000E660 FF FF FF FF FF FF FF  
   4122 0000E667 FF FF FF FF FF FF FF  
   4122 0000E66E FF FF FF FF FF FF FF  
   4122 0000E675 FF FF FF FF FF FF FF  
   4122 0000E67C FF FF FF FF FF FF FF  
   4122 0000E683 FF FF FF FF FF FF FF  
   4122 0000E68A FF FF FF FF FF FF FF  
   4122 0000E691 FF FF FF FF FF FF FF  
   4122 0000E698 FF FF FF FF FF FF FF  
   4122 0000E69F FF FF FF FF FF FF FF  
   4122 0000E6A6 FF FF FF FF FF FF FF  
   4122 0000E6AD FF FF FF FF FF FF FF  
   4122 0000E6B4 FF FF FF FF FF FF FF  
   4122 0000E6BB FF FF FF FF FF FF FF  
   4122 0000E6C2 FF FF FF FF FF FF FF  
   4122 0000E6C9 FF FF FF FF FF FF FF  
   4122 0000E6D0 FF FF FF FF FF FF FF  
   4122 0000E6D7 FF FF FF FF FF FF FF  
   4122 0000E6DE FF FF FF FF FF FF FF  
   4122 0000E6E5 FF FF FF FF FF FF FF  
   4122 0000E6EC FF FF FF FF FF FF FF  
   4122 0000E6F3 FF FF FF FF FF FF FF  
   4122 0000E6FA FF FF FF FF FF FF FF  
   4122 0000E701 FF FF FF FF FF FF FF  
   4122 0000E708 FF FF FF FF FF FF FF  
   4122 0000E70F FF FF FF FF FF FF FF  
   4122 0000E716 FF FF FF FF FF FF FF  
   4122 0000E71D FF FF FF FF FF FF FF  
   4122 0000E724 FF FF FF FF FF FF FF  
   4122 0000E72B FF FF FF FF FF FF FF  
   4122 0000E732 FF FF FF FF FF FF FF  
   4122 0000E739 FF FF FF FF FF FF FF  
   4122 0000E740 FF FF FF FF FF FF FF  
   4122 0000E747 FF FF FF FF FF FF FF  
   4122 0000E74E FF FF FF FF FF FF FF  
   4122 0000E755 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 79
noc_boot11.a
   4122 0000E75C FF FF FF FF FF FF FF  
   4122 0000E763 FF FF FF FF FF FF FF  
   4122 0000E76A FF FF FF FF FF FF FF  
   4122 0000E771 FF FF FF FF FF FF FF  
   4122 0000E778 FF FF FF FF FF FF FF  
   4122 0000E77F FF FF FF FF FF FF FF  
   4122 0000E786 FF FF FF FF FF FF FF  
   4122 0000E78D FF FF FF FF FF FF FF  
   4122 0000E794 FF FF FF FF FF FF FF  
   4122 0000E79B FF FF FF FF FF FF FF  
   4122 0000E7A2 FF FF FF FF FF FF FF  
   4122 0000E7A9 FF FF FF FF FF FF FF  
   4122 0000E7B0 FF FF FF FF FF FF FF  
   4122 0000E7B7 FF FF FF FF FF FF FF  
   4122 0000E7BE FF FF FF FF FF FF FF  
   4122 0000E7C5 FF FF FF FF FF FF FF  
   4122 0000E7CC FF FF FF FF FF FF FF  
   4122 0000E7D3 FF FF FF FF FF FF FF  
   4122 0000E7DA FF FF FF FF FF FF FF  
   4122 0000E7E1 FF FF FF FF FF FF FF  
   4122 0000E7E8 FF FF FF FF FF FF FF  
   4122 0000E7EF FF FF FF FF FF FF FF  
   4122 0000E7F6 FF FF FF FF FF FF FF  
   4122 0000E7FD FF FF FF FF FF FF FF  
   4122 0000E804 FF FF FF FF FF FF FF  
   4122 0000E80B FF FF FF FF FF FF FF  
   4122 0000E812 FF FF FF FF FF FF FF  
   4122 0000E819 FF FF FF FF FF FF FF  
   4122 0000E820 FF FF FF FF FF FF FF  
   4122 0000E827 FF FF FF FF FF FF FF  
   4122 0000E82E FF FF FF FF FF FF FF  
   4122 0000E835 FF FF FF FF FF FF FF  
   4122 0000E83C FF FF FF FF FF FF FF  
   4122 0000E843 FF FF FF FF FF FF FF  
   4122 0000E84A FF FF FF FF FF FF FF  
   4122 0000E851 FF FF FF FF FF FF FF  
   4122 0000E858 FF FF FF FF FF FF FF  
   4122 0000E85F FF FF FF FF FF FF FF  
   4122 0000E866 FF FF FF FF FF FF FF  
   4122 0000E86D FF FF FF FF FF FF FF  
   4122 0000E874 FF FF FF FF FF FF FF  
   4122 0000E87B FF FF FF FF FF FF FF  
   4122 0000E882 FF FF FF FF FF FF FF  
   4122 0000E889 FF FF FF FF FF FF FF  
   4122 0000E890 FF FF FF FF FF FF FF  
   4122 0000E897 FF FF FF FF FF FF FF  
   4122 0000E89E FF FF FF FF FF FF FF  
   4122 0000E8A5 FF FF FF FF FF FF FF  
   4122 0000E8AC FF FF FF FF FF FF FF  
   4122 0000E8B3 FF FF FF FF FF FF FF  
   4122 0000E8BA FF FF FF FF FF FF FF  
   4122 0000E8C1 FF FF FF FF FF FF FF  
   4122 0000E8C8 FF FF FF FF FF FF FF  
   4122 0000E8CF FF FF FF FF FF FF FF  
   4122 0000E8D6 FF FF FF FF FF FF FF  
   4122 0000E8DD FF FF FF FF FF FF FF  
   4122 0000E8E4 FF FF FF FF FF FF FF  
   4122 0000E8EB FF FF FF FF FF FF FF  
   4122 0000E8F2 FF FF FF FF FF FF FF  
   4122 0000E8F9 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 80
noc_boot11.a
   4122 0000E900 FF FF FF FF FF FF FF  
   4122 0000E907 FF FF FF FF FF FF FF  
   4122 0000E90E FF FF FF FF FF FF FF  
   4122 0000E915 FF FF FF FF FF FF FF  
   4122 0000E91C FF FF FF FF FF FF FF  
   4122 0000E923 FF FF FF FF FF FF FF  
   4122 0000E92A FF FF FF FF FF FF FF  
   4122 0000E931 FF FF FF FF FF FF FF  
   4122 0000E938 FF FF FF FF FF FF FF  
   4122 0000E93F FF FF FF FF FF FF FF  
   4122 0000E946 FF FF FF FF FF FF FF  
   4122 0000E94D FF FF FF FF FF FF FF  
   4122 0000E954 FF FF FF FF FF FF FF  
   4122 0000E95B FF FF FF FF FF FF FF  
   4122 0000E962 FF FF FF FF FF FF FF  
   4122 0000E969 FF FF FF FF FF FF FF  
   4122 0000E970 FF FF FF FF FF FF FF  
   4122 0000E977 FF FF FF FF FF FF FF  
   4122 0000E97E FF FF FF FF FF FF FF  
   4122 0000E985 FF FF FF FF FF FF FF  
   4122 0000E98C FF FF FF FF FF FF FF  
   4122 0000E993 FF FF FF FF FF FF FF  
   4122 0000E99A FF FF FF FF FF FF FF  
   4122 0000E9A1 FF FF FF FF FF FF FF  
   4122 0000E9A8 FF FF FF FF FF FF FF  
   4122 0000E9AF FF FF FF FF FF FF FF  
   4122 0000E9B6 FF FF FF FF FF FF FF  
   4122 0000E9BD FF FF FF FF FF FF FF  
   4122 0000E9C4 FF FF FF FF FF FF FF  
   4122 0000E9CB FF FF FF FF FF FF FF  
   4122 0000E9D2 FF FF FF FF FF FF FF  
   4122 0000E9D9 FF FF FF FF FF FF FF  
   4122 0000E9E0 FF FF FF FF FF FF FF  
   4122 0000E9E7 FF FF FF FF FF FF FF  
   4122 0000E9EE FF FF FF FF FF FF FF  
   4122 0000E9F5 FF FF FF FF FF FF FF  
   4122 0000E9FC FF FF FF FF FF FF FF  
   4122 0000EA03 FF FF FF FF FF FF FF  
   4122 0000EA0A FF FF FF FF FF FF FF  
   4122 0000EA11 FF FF FF FF FF FF FF  
   4122 0000EA18 FF FF FF FF FF FF FF  
   4122 0000EA1F FF FF FF FF FF FF FF  
   4122 0000EA26 FF FF FF FF FF FF FF  
   4122 0000EA2D FF FF FF FF FF FF FF  
   4122 0000EA34 FF FF FF FF FF FF FF  
   4122 0000EA3B FF FF FF FF FF FF FF  
   4122 0000EA42 FF FF FF FF FF FF FF  
   4122 0000EA49 FF FF FF FF FF FF FF  
   4122 0000EA50 FF FF FF FF FF FF FF  
   4122 0000EA57 FF FF FF FF FF FF FF  
   4122 0000EA5E FF FF FF FF FF FF FF  
   4122 0000EA65 FF FF FF FF FF FF FF  
   4122 0000EA6C FF FF FF FF FF FF FF  
   4122 0000EA73 FF FF FF FF FF FF FF  
   4122 0000EA7A FF FF FF FF FF FF FF  
   4122 0000EA81 FF FF FF FF FF FF FF  
   4122 0000EA88 FF FF FF FF FF FF FF  
   4122 0000EA8F FF FF FF FF FF FF FF  
   4122 0000EA96 FF FF FF FF FF FF FF  
   4122 0000EA9D FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 81
noc_boot11.a
   4122 0000EAA4 FF FF FF FF FF FF FF  
   4122 0000EAAB FF FF FF FF FF FF FF  
   4122 0000EAB2 FF FF FF FF FF FF FF  
   4122 0000EAB9 FF FF FF FF FF FF FF  
   4122 0000EAC0 FF FF FF FF FF FF FF  
   4122 0000EAC7 FF FF FF FF FF FF FF  
   4122 0000EACE FF FF FF FF FF FF FF  
   4122 0000EAD5 FF FF FF FF FF FF FF  
   4122 0000EADC FF FF FF FF FF FF FF  
   4122 0000EAE3 FF FF FF FF FF FF FF  
   4122 0000EAEA FF FF FF FF FF FF FF  
   4122 0000EAF1 FF FF FF FF FF FF FF  
   4122 0000EAF8 FF FF FF FF FF FF FF  
   4122 0000EAFF FF FF FF FF FF FF FF  
   4122 0000EB06 FF FF FF FF FF FF FF  
   4122 0000EB0D FF FF FF FF FF FF FF  
   4122 0000EB14 FF FF FF FF FF FF FF  
   4122 0000EB1B FF FF FF FF FF FF FF  
   4122 0000EB22 FF FF FF FF FF FF FF  
   4122 0000EB29 FF FF FF FF FF FF FF  
   4122 0000EB30 FF FF FF FF FF FF FF  
   4122 0000EB37 FF FF FF FF FF FF FF  
   4122 0000EB3E FF FF FF FF FF FF FF  
   4122 0000EB45 FF FF FF FF FF FF FF  
   4122 0000EB4C FF FF FF FF FF FF FF  
   4122 0000EB53 FF FF FF FF FF FF FF  
   4122 0000EB5A FF FF FF FF FF FF FF  
   4122 0000EB61 FF FF FF FF FF FF FF  
   4122 0000EB68 FF FF FF FF FF FF FF  
   4122 0000EB6F FF FF FF FF FF FF FF  
   4122 0000EB76 FF FF FF FF FF FF FF  
   4122 0000EB7D FF FF FF FF FF FF FF  
   4122 0000EB84 FF FF FF FF FF FF FF  
   4122 0000EB8B FF FF FF FF FF FF FF  
   4122 0000EB92 FF FF FF FF FF FF FF  
   4122 0000EB99 FF FF FF FF FF FF FF  
   4122 0000EBA0 FF FF FF FF FF FF FF  
   4122 0000EBA7 FF FF FF FF FF FF FF  
   4122 0000EBAE FF FF FF FF FF FF FF  
   4122 0000EBB5 FF FF FF FF FF FF FF  
   4122 0000EBBC FF FF FF FF FF FF FF  
   4122 0000EBC3 FF FF FF FF FF FF FF  
   4122 0000EBCA FF FF FF FF FF FF FF  
   4122 0000EBD1 FF FF FF FF FF FF FF  
   4122 0000EBD8 FF FF FF FF FF FF FF  
   4122 0000EBDF FF FF FF FF FF FF FF  
   4122 0000EBE6 FF FF FF FF FF FF FF  
   4122 0000EBED FF FF FF FF FF FF FF  
   4122 0000EBF4 FF FF FF FF FF FF FF  
   4122 0000EBFB FF FF FF FF FF FF FF  
   4122 0000EC02 FF FF FF FF FF FF FF  
   4122 0000EC09 FF FF FF FF FF FF FF  
   4122 0000EC10 FF FF FF FF FF FF FF  
   4122 0000EC17 FF FF FF FF FF FF FF  
   4122 0000EC1E FF FF FF FF FF FF FF  
   4122 0000EC25 FF FF FF FF FF FF FF  
   4122 0000EC2C FF FF FF FF FF FF FF  
   4122 0000EC33 FF FF FF FF FF FF FF  
   4122 0000EC3A FF FF FF FF FF FF FF  
   4122 0000EC41 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 82
noc_boot11.a
   4122 0000EC48 FF FF FF FF FF FF FF  
   4122 0000EC4F FF FF FF FF FF FF FF  
   4122 0000EC56 FF FF FF FF FF FF FF  
   4122 0000EC5D FF FF FF FF FF FF FF  
   4122 0000EC64 FF FF FF FF FF FF FF  
   4122 0000EC6B FF FF FF FF FF FF FF  
   4122 0000EC72 FF FF FF FF FF FF FF  
   4122 0000EC79 FF FF FF FF FF FF FF  
   4122 0000EC80 FF FF FF FF FF FF FF  
   4122 0000EC87 FF FF FF FF FF FF FF  
   4122 0000EC8E FF FF FF FF FF FF FF  
   4122 0000EC95 FF FF FF FF FF FF FF  
   4122 0000EC9C FF FF FF FF FF FF FF  
   4122 0000ECA3 FF FF FF FF FF FF FF  
   4122 0000ECAA FF FF FF FF FF FF FF  
   4122 0000ECB1 FF FF FF FF FF FF FF  
   4122 0000ECB8 FF FF FF FF FF FF FF  
   4122 0000ECBF FF FF FF FF FF FF FF  
   4122 0000ECC6 FF FF FF FF FF FF FF  
   4122 0000ECCD FF FF FF FF FF FF FF  
   4122 0000ECD4 FF FF FF FF FF FF FF  
   4122 0000ECDB FF FF FF FF FF FF FF  
   4122 0000ECE2 FF FF FF FF FF FF FF  
   4122 0000ECE9 FF FF FF FF FF FF FF  
   4122 0000ECF0 FF FF FF FF FF FF FF  
   4122 0000ECF7 FF FF FF FF FF FF FF  
   4122 0000ECFE FF FF FF FF FF FF FF  
   4122 0000ED05 FF FF FF FF FF FF FF  
   4122 0000ED0C FF FF FF FF FF FF FF  
   4122 0000ED13 FF FF FF FF FF FF FF  
   4122 0000ED1A FF FF FF FF FF FF FF  
   4122 0000ED21 FF FF FF FF FF FF FF  
   4122 0000ED28 FF FF FF FF FF FF FF  
   4122 0000ED2F FF FF FF FF FF FF FF  
   4122 0000ED36 FF FF FF FF FF FF FF  
   4122 0000ED3D FF FF FF FF FF FF FF  
   4122 0000ED44 FF FF FF FF FF FF FF  
   4122 0000ED4B FF FF FF FF FF FF FF  
   4122 0000ED52 FF FF FF FF FF FF FF  
   4122 0000ED59 FF FF FF FF FF FF FF  
   4122 0000ED60 FF FF FF FF FF FF FF  
   4122 0000ED67 FF FF FF FF FF FF FF  
   4122 0000ED6E FF FF FF FF FF FF FF  
   4122 0000ED75 FF FF FF FF FF FF FF  
   4122 0000ED7C FF FF FF FF FF FF FF  
   4122 0000ED83 FF FF FF FF FF FF FF  
   4122 0000ED8A FF FF FF FF FF FF FF  
   4122 0000ED91 FF FF FF FF FF FF FF  
   4122 0000ED98 FF FF FF FF FF FF FF  
   4122 0000ED9F FF FF FF FF FF FF FF  
   4122 0000EDA6 FF FF FF FF FF FF FF  
   4122 0000EDAD FF FF FF FF FF FF FF  
   4122 0000EDB4 FF FF FF FF FF FF FF  
   4122 0000EDBB FF FF FF FF FF FF FF  
   4122 0000EDC2 FF FF FF FF FF FF FF  
   4122 0000EDC9 FF FF FF FF FF FF FF  
   4122 0000EDD0 FF FF FF FF FF FF FF  
   4122 0000EDD7 FF FF FF FF FF FF FF  
   4122 0000EDDE FF FF FF FF FF FF FF  
   4122 0000EDE5 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 83
noc_boot11.a
   4122 0000EDEC FF FF FF FF FF FF FF  
   4122 0000EDF3 FF FF FF FF FF FF FF  
   4122 0000EDFA FF FF FF FF FF FF FF  
   4122 0000EE01 FF FF FF FF FF FF FF  
   4122 0000EE08 FF FF FF FF FF FF FF  
   4122 0000EE0F FF FF FF FF FF FF FF  
   4122 0000EE16 FF FF FF FF FF FF FF  
   4122 0000EE1D FF FF FF FF FF FF FF  
   4122 0000EE24 FF FF FF FF FF FF FF  
   4122 0000EE2B FF FF FF FF FF FF FF  
   4122 0000EE32 FF FF FF FF FF FF FF  
   4122 0000EE39 FF FF FF FF FF FF FF  
   4122 0000EE40 FF FF FF FF FF FF FF  
   4122 0000EE47 FF FF FF FF FF FF FF  
   4122 0000EE4E FF FF FF FF FF FF FF  
   4122 0000EE55 FF FF FF FF FF FF FF  
   4122 0000EE5C FF FF FF FF FF FF FF  
   4122 0000EE63 FF FF FF FF FF FF FF  
   4122 0000EE6A FF FF FF FF FF FF FF  
   4122 0000EE71 FF FF FF FF FF FF FF  
   4122 0000EE78 FF FF FF FF FF FF FF  
   4122 0000EE7F FF FF FF FF FF FF FF  
   4122 0000EE86 FF FF FF FF FF FF FF  
   4122 0000EE8D FF FF FF FF FF FF FF  
   4122 0000EE94 FF FF FF FF FF FF FF  
   4122 0000EE9B FF FF FF FF FF FF FF  
   4122 0000EEA2 FF FF FF FF FF FF FF  
   4122 0000EEA9 FF FF FF FF FF FF FF  
   4122 0000EEB0 FF FF FF FF FF FF FF  
   4122 0000EEB7 FF FF FF FF FF FF FF  
   4122 0000EEBE FF FF FF FF FF FF FF  
   4122 0000EEC5 FF FF FF FF FF FF FF  
   4122 0000EECC FF FF FF FF FF FF FF  
   4122 0000EED3 FF FF FF FF FF FF FF  
   4122 0000EEDA FF FF FF FF FF FF FF  
   4122 0000EEE1 FF FF FF FF FF FF FF  
   4122 0000EEE8 FF FF FF FF FF FF FF  
   4122 0000EEEF FF FF FF FF FF FF FF  
   4122 0000EEF6 FF FF FF FF FF FF FF  
   4122 0000EEFD FF FF FF FF FF FF FF  
   4122 0000EF04 FF FF FF FF FF FF FF  
   4122 0000EF0B FF FF FF FF FF FF FF  
   4122 0000EF12 FF FF FF FF FF FF FF  
   4122 0000EF19 FF FF FF FF FF FF FF  
   4122 0000EF20 FF FF FF FF FF FF FF  
   4122 0000EF27 FF FF FF FF FF FF FF  
   4122 0000EF2E FF FF FF FF FF FF FF  
   4122 0000EF35 FF FF FF FF FF FF FF  
   4122 0000EF3C FF FF FF FF FF FF FF  
   4122 0000EF43 FF FF FF FF FF FF FF  
   4122 0000EF4A FF FF FF FF FF FF FF  
   4122 0000EF51 FF FF FF FF FF FF FF  
   4122 0000EF58 FF FF FF FF FF FF FF  
   4122 0000EF5F FF FF FF FF FF FF FF  
   4122 0000EF66 FF FF FF FF FF FF FF  
   4122 0000EF6D FF FF FF FF FF FF FF  
   4122 0000EF74 FF FF FF FF FF FF FF  
   4122 0000EF7B FF FF FF FF FF FF FF  
   4122 0000EF82 FF FF FF FF FF FF FF  
   4122 0000EF89 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 84
noc_boot11.a
   4122 0000EF90 FF FF FF FF FF FF FF  
   4122 0000EF97 FF FF FF FF FF FF FF  
   4122 0000EF9E FF FF FF FF FF FF FF  
   4122 0000EFA5 FF FF FF FF FF FF FF  
   4122 0000EFAC FF FF FF FF FF FF FF  
   4122 0000EFB3 FF FF FF FF FF FF FF  
   4122 0000EFBA FF FF FF FF FF FF FF  
   4122 0000EFC1 FF FF FF FF FF FF FF  
   4122 0000EFC8 FF FF FF FF FF FF FF  
   4122 0000EFCF FF FF FF FF FF FF FF  
   4122 0000EFD6 FF FF FF FF FF FF FF  
   4122 0000EFDD FF FF FF FF FF FF FF  
   4122 0000EFE4 FF FF FF FF FF FF FF  
   4122 0000EFEB FF FF FF FF FF FF FF  
   4122 0000EFF2 FF FF FF FF FF FF FF  
   4122 0000EFF9 FF FF FF FF FF FF FF  
   4122 0000F000 FF FF FF FF FF FF FF  
   4122 0000F007 FF FF FF FF FF FF FF  
   4122 0000F00E FF FF FF FF FF FF FF  
   4122 0000F015 FF FF FF FF FF FF FF  
   4122 0000F01C FF FF FF FF FF FF FF  
   4122 0000F023 FF FF FF FF FF FF FF  
   4122 0000F02A FF FF FF FF FF FF FF  
   4122 0000F031 FF FF FF FF FF FF FF  
   4122 0000F038 FF FF FF FF FF FF FF  
   4122 0000F03F FF FF FF FF FF FF FF  
   4122 0000F046 FF FF FF FF FF FF FF  
   4122 0000F04D FF FF FF FF FF FF FF  
   4122 0000F054 FF FF FF FF FF FF FF  
   4122 0000F05B FF FF FF FF FF FF FF  
   4122 0000F062 FF FF FF FF FF FF FF  
   4122 0000F069 FF FF FF FF FF FF FF  
   4122 0000F070 FF FF FF FF FF FF FF  
   4122 0000F077 FF FF FF FF FF FF FF  
   4122 0000F07E FF FF FF FF FF FF FF  
   4122 0000F085 FF FF FF FF FF FF FF  
   4122 0000F08C FF FF FF FF FF FF FF  
   4122 0000F093 FF FF FF FF FF FF FF  
   4122 0000F09A FF FF FF FF FF FF FF  
   4122 0000F0A1 FF FF FF FF FF FF FF  
   4122 0000F0A8 FF FF FF FF FF FF FF  
   4122 0000F0AF FF FF FF FF FF FF FF  
   4122 0000F0B6 FF FF FF FF FF FF FF  
   4122 0000F0BD FF FF FF FF FF FF FF  
   4122 0000F0C4 FF FF FF FF FF FF FF  
   4122 0000F0CB FF FF FF FF FF FF FF  
   4122 0000F0D2 FF FF FF FF FF FF FF  
   4122 0000F0D9 FF FF FF FF FF FF FF  
   4122 0000F0E0 FF FF FF FF FF FF FF  
   4122 0000F0E7 FF FF FF FF FF FF FF  
   4122 0000F0EE FF FF FF FF FF FF FF  
   4122 0000F0F5 FF FF FF FF FF FF FF  
   4122 0000F0FC FF FF FF FF FF FF FF  
   4122 0000F103 FF FF FF FF FF FF FF  
   4122 0000F10A FF FF FF FF FF FF FF  
   4122 0000F111 FF FF FF FF FF FF FF  
   4122 0000F118 FF FF FF FF FF FF FF  
   4122 0000F11F FF FF FF FF FF FF FF  
   4122 0000F126 FF FF FF FF FF FF FF  
   4122 0000F12D FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 85
noc_boot11.a
   4122 0000F134 FF FF FF FF FF FF FF  
   4122 0000F13B FF FF FF FF FF FF FF  
   4122 0000F142 FF FF FF FF FF FF FF  
   4122 0000F149 FF FF FF FF FF FF FF  
   4122 0000F150 FF FF FF FF FF FF FF  
   4122 0000F157 FF FF FF FF FF FF FF  
   4122 0000F15E FF FF FF FF FF FF FF  
   4122 0000F165 FF FF FF FF FF FF FF  
   4122 0000F16C FF FF FF FF FF FF FF  
   4122 0000F173 FF FF FF FF FF FF FF  
   4122 0000F17A FF FF FF FF FF FF FF  
   4122 0000F181 FF FF FF FF FF FF FF  
   4122 0000F188 FF FF FF FF FF FF FF  
   4122 0000F18F FF FF FF FF FF FF FF  
   4122 0000F196 FF FF FF FF FF FF FF  
   4122 0000F19D FF FF FF FF FF FF FF  
   4122 0000F1A4 FF FF FF FF FF FF FF  
   4122 0000F1AB FF FF FF FF FF FF FF  
   4122 0000F1B2 FF FF FF FF FF FF FF  
   4122 0000F1B9 FF FF FF FF FF FF FF  
   4122 0000F1C0 FF FF FF FF FF FF FF  
   4122 0000F1C7 FF FF FF FF FF FF FF  
   4122 0000F1CE FF FF FF FF FF FF FF  
   4122 0000F1D5 FF FF FF FF FF FF FF  
   4122 0000F1DC FF FF FF FF FF FF FF  
   4122 0000F1E3 FF FF FF FF FF FF FF  
   4122 0000F1EA FF FF FF FF FF FF FF  
   4122 0000F1F1 FF FF FF FF FF FF FF  
   4122 0000F1F8 FF FF FF FF FF FF FF  
   4122 0000F1FF FF FF FF FF FF FF FF  
   4122 0000F206 FF FF FF FF FF FF FF  
   4122 0000F20D FF FF FF FF FF FF FF  
   4122 0000F214 FF FF FF FF FF FF FF  
   4122 0000F21B FF FF FF FF FF FF FF  
   4122 0000F222 FF FF FF FF FF FF FF  
   4122 0000F229 FF FF FF FF FF FF FF  
   4122 0000F230 FF FF FF FF FF FF FF  
   4122 0000F237 FF FF FF FF FF FF FF  
   4122 0000F23E FF FF FF FF FF FF FF  
   4122 0000F245 FF FF FF FF FF FF FF  
   4122 0000F24C FF FF FF FF FF FF FF  
   4122 0000F253 FF FF FF FF FF FF FF  
   4122 0000F25A FF FF FF FF FF FF FF  
   4122 0000F261 FF FF FF FF FF FF FF  
   4122 0000F268 FF FF FF FF FF FF FF  
   4122 0000F26F FF FF FF FF FF FF FF  
   4122 0000F276 FF FF FF FF FF FF FF  
   4122 0000F27D FF FF FF FF FF FF FF  
   4122 0000F284 FF FF FF FF FF FF FF  
   4122 0000F28B FF FF FF FF FF FF FF  
   4122 0000F292 FF FF FF FF FF FF FF  
   4122 0000F299 FF FF FF FF FF FF FF  
   4122 0000F2A0 FF FF FF FF FF FF FF  
   4122 0000F2A7 FF FF FF FF FF FF FF  
   4122 0000F2AE FF FF FF FF FF FF FF  
   4122 0000F2B5 FF FF FF FF FF FF FF  
   4122 0000F2BC FF FF FF FF FF FF FF  
   4122 0000F2C3 FF FF FF FF FF FF FF  
   4122 0000F2CA FF FF FF FF FF FF FF  
   4122 0000F2D1 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 86
noc_boot11.a
   4122 0000F2D8 FF FF FF FF FF FF FF  
   4122 0000F2DF FF FF FF FF FF FF FF  
   4122 0000F2E6 FF FF FF FF FF FF FF  
   4122 0000F2ED FF FF FF FF FF FF FF  
   4122 0000F2F4 FF FF FF FF FF FF FF  
   4122 0000F2FB FF FF FF FF FF FF FF  
   4122 0000F302 FF FF FF FF FF FF FF  
   4122 0000F309 FF FF FF FF FF FF FF  
   4122 0000F310 FF FF FF FF FF FF FF  
   4122 0000F317 FF FF FF FF FF FF FF  
   4122 0000F31E FF FF FF FF FF FF FF  
   4122 0000F325 FF FF FF FF FF FF FF  
   4122 0000F32C FF FF FF FF FF FF FF  
   4122 0000F333 FF FF FF FF FF FF FF  
   4122 0000F33A FF FF FF FF FF FF FF  
   4122 0000F341 FF FF FF FF FF FF FF  
   4122 0000F348 FF FF FF FF FF FF FF  
   4122 0000F34F FF FF FF FF FF FF FF  
   4122 0000F356 FF FF FF FF FF FF FF  
   4122 0000F35D FF FF FF FF FF FF FF  
   4122 0000F364 FF FF FF FF FF FF FF  
   4122 0000F36B FF FF FF FF FF FF FF  
   4122 0000F372 FF FF FF FF FF FF FF  
   4122 0000F379 FF FF FF FF FF FF FF  
   4122 0000F380 FF FF FF FF FF FF FF  
   4122 0000F387 FF FF FF FF FF FF FF  
   4122 0000F38E FF FF FF FF FF FF FF  
   4122 0000F395 FF FF FF FF FF FF FF  
   4122 0000F39C FF FF FF FF FF FF FF  
   4122 0000F3A3 FF FF FF FF FF FF FF  
   4122 0000F3AA FF FF FF FF FF FF FF  
   4122 0000F3B1 FF FF FF FF FF FF FF  
   4122 0000F3B8 FF FF FF FF FF FF FF  
   4122 0000F3BF FF FF FF FF FF FF FF  
   4122 0000F3C6 FF FF FF FF FF FF FF  
   4122 0000F3CD FF FF FF FF FF FF FF  
   4122 0000F3D4 FF FF FF FF FF FF FF  
   4122 0000F3DB FF FF FF FF FF FF FF  
   4122 0000F3E2 FF FF FF FF FF FF FF  
   4122 0000F3E9 FF FF FF FF FF FF FF  
   4122 0000F3F0 FF FF FF FF FF FF FF  
   4122 0000F3F7 FF FF FF FF FF FF FF  
   4122 0000F3FE FF FF FF FF FF FF FF  
   4122 0000F405 FF FF FF FF FF FF FF  
   4122 0000F40C FF FF FF FF FF FF FF  
   4122 0000F413 FF FF FF FF FF FF FF  
   4122 0000F41A FF FF FF FF FF FF FF  
   4122 0000F421 FF FF FF FF FF FF FF  
   4122 0000F428 FF FF FF FF FF FF FF  
   4122 0000F42F FF FF FF FF FF FF FF  
   4122 0000F436 FF FF FF FF FF FF FF  
   4122 0000F43D FF FF FF FF FF FF FF  
   4122 0000F444 FF FF FF FF FF FF FF  
   4122 0000F44B FF FF FF FF FF FF FF  
   4122 0000F452 FF FF FF FF FF FF FF  
   4122 0000F459 FF FF FF FF FF FF FF  
   4122 0000F460 FF FF FF FF FF FF FF  
   4122 0000F467 FF FF FF FF FF FF FF  
   4122 0000F46E FF FF FF FF FF FF FF  
   4122 0000F475 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 87
noc_boot11.a
   4122 0000F47C FF FF FF FF FF FF FF  
   4122 0000F483 FF FF FF FF FF FF FF  
   4122 0000F48A FF FF FF FF FF FF FF  
   4122 0000F491 FF FF FF FF FF FF FF  
   4122 0000F498 FF FF FF FF FF FF FF  
   4122 0000F49F FF FF FF FF FF FF FF  
   4122 0000F4A6 FF FF FF FF FF FF FF  
   4122 0000F4AD FF FF FF FF FF FF FF  
   4122 0000F4B4 FF FF FF FF FF FF FF  
   4122 0000F4BB FF FF FF FF FF FF FF  
   4122 0000F4C2 FF FF FF FF FF FF FF  
   4122 0000F4C9 FF FF FF FF FF FF FF  
   4122 0000F4D0 FF FF FF FF FF FF FF  
   4122 0000F4D7 FF FF FF FF FF FF FF  
   4122 0000F4DE FF FF FF FF FF FF FF  
   4122 0000F4E5 FF FF FF FF FF FF FF  
   4122 0000F4EC FF FF FF FF FF FF FF  
   4122 0000F4F3 FF FF FF FF FF FF FF  
   4122 0000F4FA FF FF FF FF FF FF FF  
   4122 0000F501 FF FF FF FF FF FF FF  
   4122 0000F508 FF FF FF FF FF FF FF  
   4122 0000F50F FF FF FF FF FF FF FF  
   4122 0000F516 FF FF FF FF FF FF FF  
   4122 0000F51D FF FF FF FF FF FF FF  
   4122 0000F524 FF FF FF FF FF FF FF  
   4122 0000F52B FF FF FF FF FF FF FF  
   4122 0000F532 FF FF FF FF FF FF FF  
   4122 0000F539 FF FF FF FF FF FF FF  
   4122 0000F540 FF FF FF FF FF FF FF  
   4122 0000F547 FF FF FF FF FF FF FF  
   4122 0000F54E FF FF FF FF FF FF FF  
   4122 0000F555 FF FF FF FF FF FF FF  
   4122 0000F55C FF FF FF FF FF FF FF  
   4122 0000F563 FF FF FF FF FF FF FF  
   4122 0000F56A FF FF FF FF FF FF FF  
   4122 0000F571 FF FF FF FF FF FF FF  
   4122 0000F578 FF FF FF FF FF FF FF  
   4122 0000F57F FF FF FF FF FF FF FF  
   4122 0000F586 FF FF FF FF FF FF FF  
   4122 0000F58D FF FF FF FF FF FF FF  
   4122 0000F594 FF FF FF FF FF FF FF  
   4122 0000F59B FF FF FF FF FF FF FF  
   4122 0000F5A2 FF FF FF FF FF FF FF  
   4122 0000F5A9 FF FF FF FF FF FF FF  
   4122 0000F5B0 FF FF FF FF FF FF FF  
   4122 0000F5B7 FF FF FF FF FF FF FF  
   4122 0000F5BE FF FF FF FF FF FF FF  
   4122 0000F5C5 FF FF FF FF FF FF FF  
   4122 0000F5CC FF FF FF FF FF FF FF  
   4122 0000F5D3 FF FF FF FF FF FF FF  
   4122 0000F5DA FF FF FF FF FF FF FF  
   4122 0000F5E1 FF FF FF FF FF FF FF  
   4122 0000F5E8 FF FF FF FF FF FF FF  
   4122 0000F5EF FF FF FF FF FF FF FF  
   4122 0000F5F6 FF FF FF FF FF FF FF  
   4122 0000F5FD FF FF FF FF FF FF FF  
   4122 0000F604 FF FF FF FF FF FF FF  
   4122 0000F60B FF FF FF FF FF FF FF  
   4122 0000F612 FF FF FF FF FF FF FF  
   4122 0000F619 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 88
noc_boot11.a
   4122 0000F620 FF FF FF FF FF FF FF  
   4122 0000F627 FF FF FF FF FF FF FF  
   4122 0000F62E FF FF FF FF FF FF FF  
   4122 0000F635 FF FF FF FF FF FF FF  
   4122 0000F63C FF FF FF FF FF FF FF  
   4122 0000F643 FF FF FF FF FF FF FF  
   4122 0000F64A FF FF FF FF FF FF FF  
   4122 0000F651 FF FF FF FF FF FF FF  
   4122 0000F658 FF FF FF FF FF FF FF  
   4122 0000F65F FF FF FF FF FF FF FF  
   4122 0000F666 FF FF FF FF FF FF FF  
   4122 0000F66D FF FF FF FF FF FF FF  
   4122 0000F674 FF FF FF FF FF FF FF  
   4122 0000F67B FF FF FF FF FF FF FF  
   4122 0000F682 FF FF FF FF FF FF FF  
   4122 0000F689 FF FF FF FF FF FF FF  
   4122 0000F690 FF FF FF FF FF FF FF  
   4122 0000F697 FF FF FF FF FF FF FF  
   4122 0000F69E FF FF FF FF FF FF FF  
   4122 0000F6A5 FF FF FF FF FF FF FF  
   4122 0000F6AC FF FF FF FF FF FF FF  
   4122 0000F6B3 FF FF FF FF FF FF FF  
   4122 0000F6BA FF FF FF FF FF FF FF  
   4122 0000F6C1 FF FF FF FF FF FF FF  
   4122 0000F6C8 FF FF FF FF FF FF FF  
   4122 0000F6CF FF FF FF FF FF FF FF  
   4122 0000F6D6 FF FF FF FF FF FF FF  
   4122 0000F6DD FF FF FF FF FF FF FF  
   4122 0000F6E4 FF FF FF FF FF FF FF  
   4122 0000F6EB FF FF FF FF FF FF FF  
   4122 0000F6F2 FF FF FF FF FF FF FF  
   4122 0000F6F9 FF FF FF FF FF FF FF  
   4122 0000F700 FF FF FF FF FF FF FF  
   4122 0000F707 FF FF FF FF FF FF FF  
   4122 0000F70E FF FF FF FF FF FF FF  
   4122 0000F715 FF FF FF FF FF FF FF  
   4122 0000F71C FF FF FF FF FF FF FF  
   4122 0000F723 FF FF FF FF FF FF FF  
   4122 0000F72A FF FF FF FF FF FF FF  
   4122 0000F731 FF FF FF FF FF FF FF  
   4122 0000F738 FF FF FF FF FF FF FF  
   4122 0000F73F FF FF FF FF FF FF FF  
   4122 0000F746 FF FF FF FF FF FF FF  
   4122 0000F74D FF FF FF FF FF FF FF  
   4122 0000F754 FF FF FF FF FF FF FF  
   4122 0000F75B FF FF FF FF FF FF FF  
   4122 0000F762 FF FF FF FF FF FF FF  
   4122 0000F769 FF FF FF FF FF FF FF  
   4122 0000F770 FF FF FF FF FF FF FF  
   4122 0000F777 FF FF FF FF FF FF FF  
   4122 0000F77E FF FF FF FF FF FF FF  
   4122 0000F785 FF FF FF FF FF FF FF  
   4122 0000F78C FF FF FF FF FF FF FF  
   4122 0000F793 FF FF FF FF FF FF FF  
   4122 0000F79A FF FF FF FF FF FF FF  
   4122 0000F7A1 FF FF FF FF FF FF FF  
   4122 0000F7A8 FF FF FF FF FF FF FF  
   4122 0000F7AF FF FF FF FF FF FF FF  
   4122 0000F7B6 FF FF FF FF FF FF FF  
   4122 0000F7BD FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 89
noc_boot11.a
   4122 0000F7C4 FF FF FF FF FF FF FF  
   4122 0000F7CB FF FF FF FF FF FF FF  
   4122 0000F7D2 FF FF FF FF FF FF FF  
   4122 0000F7D9 FF FF FF FF FF FF FF  
   4122 0000F7E0 FF FF FF FF FF FF FF  
   4122 0000F7E7 FF FF FF FF FF FF FF  
   4122 0000F7EE FF FF FF FF FF FF FF  
   4122 0000F7F5 FF FF FF FF FF FF FF  
   4122 0000F7FC FF FF FF FF FF FF FF  
   4122 0000F803 FF FF FF FF FF FF FF  
   4122 0000F80A FF FF FF FF FF FF FF  
   4122 0000F811 FF FF FF FF FF FF FF  
   4122 0000F818 FF FF FF FF FF FF FF  
   4122 0000F81F FF FF FF FF FF FF FF  
   4122 0000F826 FF FF FF FF FF FF FF  
   4122 0000F82D FF FF FF FF FF FF FF  
   4122 0000F834 FF FF FF FF FF FF FF  
   4122 0000F83B FF FF FF FF FF FF FF  
   4122 0000F842 FF FF FF FF FF FF FF  
   4122 0000F849 FF FF FF FF FF FF FF  
   4122 0000F850 FF FF FF FF FF FF FF  
   4122 0000F857 FF FF FF FF FF FF FF  
   4122 0000F85E FF FF FF FF FF FF FF  
   4122 0000F865 FF FF FF FF FF FF FF  
   4122 0000F86C FF FF FF FF FF FF FF  
   4122 0000F873 FF FF FF FF FF FF FF  
   4122 0000F87A FF FF FF FF FF FF FF  
   4122 0000F881 FF FF FF FF FF FF FF  
   4122 0000F888 FF FF FF FF FF FF FF  
   4122 0000F88F FF FF FF FF FF FF FF  
   4122 0000F896 FF FF FF FF FF FF FF  
   4122 0000F89D FF FF FF FF FF FF FF  
   4122 0000F8A4 FF FF FF FF FF FF FF  
   4122 0000F8AB FF FF FF FF FF FF FF  
   4122 0000F8B2 FF FF FF FF FF FF FF  
   4122 0000F8B9 FF FF FF FF FF FF FF  
   4122 0000F8C0 FF FF FF FF FF FF FF  
   4122 0000F8C7 FF FF FF FF FF FF FF  
   4122 0000F8CE FF FF FF FF FF FF FF  
   4122 0000F8D5 FF FF FF FF FF FF FF  
   4122 0000F8DC FF FF FF FF FF FF FF  
   4122 0000F8E3 FF FF FF FF FF FF FF  
   4122 0000F8EA FF FF FF FF FF FF FF  
   4122 0000F8F1 FF FF FF FF FF FF FF  
   4122 0000F8F8 FF FF FF FF FF FF FF  
   4122 0000F8FF FF FF FF FF FF FF FF  
   4122 0000F906 FF FF FF FF FF FF FF  
   4122 0000F90D FF FF FF FF FF FF FF  
   4122 0000F914 FF FF FF FF FF FF FF  
   4122 0000F91B FF FF FF FF FF FF FF  
   4122 0000F922 FF FF FF FF FF FF FF  
   4122 0000F929 FF FF FF FF FF FF FF  
   4122 0000F930 FF FF FF FF FF FF FF  
   4122 0000F937 FF FF FF FF FF FF FF  
   4122 0000F93E FF FF FF FF FF FF FF  
   4122 0000F945 FF FF FF FF FF FF FF  
   4122 0000F94C FF FF FF FF FF FF FF  
   4122 0000F953 FF FF FF FF FF FF FF  
   4122 0000F95A FF FF FF FF FF FF FF  
   4122 0000F961 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 90
noc_boot11.a
   4122 0000F968 FF FF FF FF FF FF FF  
   4122 0000F96F FF FF FF FF FF FF FF  
   4122 0000F976 FF FF FF FF FF FF FF  
   4122 0000F97D FF FF FF FF FF FF FF  
   4122 0000F984 FF FF FF FF FF FF FF  
   4122 0000F98B FF FF FF FF FF FF FF  
   4122 0000F992 FF FF FF FF FF FF FF  
   4122 0000F999 FF FF FF FF FF FF FF  
   4122 0000F9A0 FF FF FF FF FF FF FF  
   4122 0000F9A7 FF FF FF FF FF FF FF  
   4122 0000F9AE FF FF FF FF FF FF FF  
   4122 0000F9B5 FF FF FF FF FF FF FF  
   4122 0000F9BC FF FF FF FF FF FF FF  
   4122 0000F9C3 FF FF FF FF FF FF FF  
   4122 0000F9CA FF FF FF FF FF FF FF  
   4122 0000F9D1 FF FF FF FF FF FF FF  
   4122 0000F9D8 FF FF FF FF FF FF FF  
   4122 0000F9DF FF FF FF FF FF FF FF  
   4122 0000F9E6 FF FF FF FF FF FF FF  
   4122 0000F9ED FF FF FF FF FF FF FF  
   4122 0000F9F4 FF FF FF FF FF FF FF  
   4122 0000F9FB FF FF FF FF FF FF FF  
   4122 0000FA02 FF FF FF FF FF FF FF  
   4122 0000FA09 FF FF FF FF FF FF FF  
   4122 0000FA10 FF FF FF FF FF FF FF  
   4122 0000FA17 FF FF FF FF FF FF FF  
   4122 0000FA1E FF FF FF FF FF FF FF  
   4122 0000FA25 FF FF FF FF FF FF FF  
   4122 0000FA2C FF FF FF FF FF FF FF  
   4122 0000FA33 FF FF FF FF FF FF FF  
   4122 0000FA3A FF FF FF FF FF FF FF  
   4122 0000FA41 FF FF FF FF FF FF FF  
   4122 0000FA48 FF FF FF FF FF FF FF  
   4122 0000FA4F FF FF FF FF FF FF FF  
   4122 0000FA56 FF FF FF FF FF FF FF  
   4122 0000FA5D FF FF FF FF FF FF FF  
   4122 0000FA64 FF FF FF FF FF FF FF  
   4122 0000FA6B FF FF FF FF FF FF FF  
   4122 0000FA72 FF FF FF FF FF FF FF  
   4122 0000FA79 FF FF FF FF FF FF FF  
   4122 0000FA80 FF FF FF FF FF FF FF  
   4122 0000FA87 FF FF FF FF FF FF FF  
   4122 0000FA8E FF FF FF FF FF FF FF  
   4122 0000FA95 FF FF FF FF FF FF FF  
   4122 0000FA9C FF FF FF FF FF FF FF  
   4122 0000FAA3 FF FF FF FF FF FF FF  
   4122 0000FAAA FF FF FF FF FF FF FF  
   4122 0000FAB1 FF FF FF FF FF FF FF  
   4122 0000FAB8 FF FF FF FF FF FF FF  
   4122 0000FABF FF FF FF FF FF FF FF  
   4122 0000FAC6 FF FF FF FF FF FF FF  
   4122 0000FACD FF FF FF FF FF FF FF  
   4122 0000FAD4 FF FF FF FF FF FF FF  
   4122 0000FADB FF FF FF FF FF FF FF  
   4122 0000FAE2 FF FF FF FF FF FF FF  
   4122 0000FAE9 FF FF FF FF FF FF FF  
   4122 0000FAF0 FF FF FF FF FF FF FF  
   4122 0000FAF7 FF FF FF FF FF FF FF  
   4122 0000FAFE FF FF FF FF FF FF FF  
   4122 0000FB05 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 91
noc_boot11.a
   4122 0000FB0C FF FF FF FF FF FF FF  
   4122 0000FB13 FF FF FF FF FF FF FF  
   4122 0000FB1A FF FF FF FF FF FF FF  
   4122 0000FB21 FF FF FF FF FF FF FF  
   4122 0000FB28 FF FF FF FF FF FF FF  
   4122 0000FB2F FF FF FF FF FF FF FF  
   4122 0000FB36 FF FF FF FF FF FF FF  
   4122 0000FB3D FF FF FF FF FF FF FF  
   4122 0000FB44 FF FF FF FF FF FF FF  
   4122 0000FB4B FF FF FF FF FF FF FF  
   4122 0000FB52 FF FF FF FF FF FF FF  
   4122 0000FB59 FF FF FF FF FF FF FF  
   4122 0000FB60 FF FF FF FF FF FF FF  
   4122 0000FB67 FF FF FF FF FF FF FF  
   4122 0000FB6E FF FF FF FF FF FF FF  
   4122 0000FB75 FF FF FF FF FF FF FF  
   4122 0000FB7C FF FF FF FF FF FF FF  
   4122 0000FB83 FF FF FF FF FF FF FF  
   4122 0000FB8A FF FF FF FF FF FF FF  
   4122 0000FB91 FF FF FF FF FF FF FF  
   4122 0000FB98 FF FF FF FF FF FF FF  
   4122 0000FB9F FF FF FF FF FF FF FF  
   4122 0000FBA6 FF FF FF FF FF FF FF  
   4122 0000FBAD FF FF FF FF FF FF FF  
   4122 0000FBB4 FF FF FF FF FF FF FF  
   4122 0000FBBB FF FF FF FF FF FF FF  
   4122 0000FBC2 FF FF FF FF FF FF FF  
   4122 0000FBC9 FF FF FF FF FF FF FF  
   4122 0000FBD0 FF FF FF FF FF FF FF  
   4122 0000FBD7 FF FF FF FF FF FF FF  
   4122 0000FBDE FF FF FF FF FF FF FF  
   4122 0000FBE5 FF FF FF FF FF FF FF  
   4122 0000FBEC FF FF FF FF FF FF FF  
   4122 0000FBF3 FF FF FF FF FF FF FF  
   4122 0000FBFA FF FF FF FF FF FF FF  
   4122 0000FC01 FF FF FF FF FF FF FF  
   4122 0000FC08 FF FF FF FF FF FF FF  
   4122 0000FC0F FF FF FF FF FF FF FF  
   4122 0000FC16 FF FF FF FF FF FF FF  
   4122 0000FC1D FF FF FF FF FF FF FF  
   4122 0000FC24 FF FF FF FF FF FF FF  
   4122 0000FC2B FF FF FF FF FF FF FF  
   4122 0000FC32 FF FF FF FF FF FF FF  
   4122 0000FC39 FF FF FF FF FF FF FF  
   4122 0000FC40 FF FF FF FF FF FF FF  
   4122 0000FC47 FF FF FF FF FF FF FF  
   4122 0000FC4E FF FF FF FF FF FF FF  
   4122 0000FC55 FF FF FF FF FF FF FF  
   4122 0000FC5C FF FF FF FF FF FF FF  
   4122 0000FC63 FF FF FF FF FF FF FF  
   4122 0000FC6A FF FF FF FF FF FF FF  
   4122 0000FC71 FF FF FF FF FF FF FF  
   4122 0000FC78 FF FF FF FF FF FF FF  
   4122 0000FC7F FF FF FF FF FF FF FF  
   4122 0000FC86 FF FF FF FF FF FF FF  
   4122 0000FC8D FF FF FF FF FF FF FF  
   4122 0000FC94 FF FF FF FF FF FF FF  
   4122 0000FC9B FF FF FF FF FF FF FF  
   4122 0000FCA2 FF FF FF FF FF FF FF  
   4122 0000FCA9 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 92
noc_boot11.a
   4122 0000FCB0 FF FF FF FF FF FF FF  
   4122 0000FCB7 FF FF FF FF FF FF FF  
   4122 0000FCBE FF FF FF FF FF FF FF  
   4122 0000FCC5 FF FF FF FF FF FF FF  
   4122 0000FCCC FF FF FF FF FF FF FF  
   4122 0000FCD3 FF FF FF FF FF FF FF  
   4122 0000FCDA FF FF FF FF FF FF FF  
   4122 0000FCE1 FF FF FF FF FF FF FF  
   4122 0000FCE8 FF FF FF FF FF FF FF  
   4122 0000FCEF FF FF FF FF FF FF FF  
   4122 0000FCF6 FF FF FF FF FF FF FF  
   4122 0000FCFD FF FF FF FF FF FF FF  
   4122 0000FD04 FF FF FF FF FF FF FF  
   4122 0000FD0B FF FF FF FF FF FF FF  
   4122 0000FD12 FF FF FF FF FF FF FF  
   4122 0000FD19 FF FF FF FF FF FF FF  
   4122 0000FD20 FF FF FF FF FF FF FF  
   4122 0000FD27 FF FF FF FF FF FF FF  
   4122 0000FD2E FF FF FF FF FF FF FF  
   4122 0000FD35 FF FF FF FF FF FF FF  
   4122 0000FD3C FF FF FF FF FF FF FF  
   4122 0000FD43 FF FF FF FF FF FF FF  
   4122 0000FD4A FF FF FF FF FF FF FF  
   4122 0000FD51 FF FF FF FF FF FF FF  
   4122 0000FD58 FF FF FF FF FF FF FF  
   4122 0000FD5F FF FF FF FF FF FF FF  
   4122 0000FD66 FF FF FF FF FF FF FF  
   4122 0000FD6D FF FF FF FF FF FF FF  
   4122 0000FD74 FF FF FF FF FF FF FF  
   4122 0000FD7B FF FF FF FF FF FF FF  
   4122 0000FD82 FF FF FF FF FF FF FF  
   4122 0000FD89 FF FF FF FF FF FF FF  
   4122 0000FD90 FF FF FF FF FF FF FF  
   4122 0000FD97 FF FF FF FF FF FF FF  
   4122 0000FD9E FF FF FF FF FF FF FF  
   4122 0000FDA5 FF FF FF FF FF FF FF  
   4122 0000FDAC FF FF FF FF FF FF FF  
   4122 0000FDB3 FF FF FF FF FF FF FF  
   4122 0000FDBA FF FF FF FF FF FF FF  
   4122 0000FDC1 FF FF FF FF FF FF FF  
   4122 0000FDC8 FF FF FF FF FF FF FF  
   4122 0000FDCF FF FF FF FF FF FF FF  
   4122 0000FDD6 FF FF FF FF FF FF FF  
   4122 0000FDDD FF FF FF FF FF FF FF  
   4122 0000FDE4 FF FF FF FF FF FF FF  
   4122 0000FDEB FF FF FF FF FF FF FF  
   4122 0000FDF2 FF FF FF FF FF FF FF  
   4122 0000FDF9 FF FF FF FF FF FF FF  
   4122 0000FE00 FF FF FF FF FF FF FF  
   4122 0000FE07 FF FF FF FF FF FF FF  
   4122 0000FE0E FF FF FF FF FF FF FF  
   4122 0000FE15 FF FF FF FF FF FF FF  
   4122 0000FE1C FF FF FF FF FF FF FF  
   4122 0000FE23 FF FF FF FF FF FF FF  
   4122 0000FE2A FF FF FF FF FF FF FF  
   4122 0000FE31 FF FF FF FF FF FF FF  
   4122 0000FE38 FF FF FF FF FF FF FF  
   4122 0000FE3F FF FF FF FF FF FF FF  
   4122 0000FE46 FF FF FF FF FF FF FF  
   4122 0000FE4D FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 93
noc_boot11.a
   4122 0000FE54 FF FF FF FF FF FF FF  
   4122 0000FE5B FF FF FF FF FF FF FF  
   4122 0000FE62 FF FF FF FF FF FF FF  
   4122 0000FE69 FF FF FF FF FF FF FF  
   4122 0000FE70 FF FF FF FF FF FF FF  
   4122 0000FE77 FF FF FF FF FF FF FF  
   4122 0000FE7E FF FF FF FF FF FF FF  
   4122 0000FE85 FF FF FF FF FF FF FF  
   4122 0000FE8C FF FF FF FF FF FF FF  
   4122 0000FE93 FF FF FF FF FF FF FF  
   4122 0000FE9A FF FF FF FF FF FF FF  
   4122 0000FEA1 FF FF FF FF FF FF FF  
   4122 0000FEA8 FF FF FF FF FF FF FF  
   4122 0000FEAF FF FF FF FF FF FF FF  
   4122 0000FEB6 FF FF FF FF FF FF FF  
   4122 0000FEBD FF FF FF FF FF FF FF  
   4122 0000FEC4 FF FF FF FF FF FF FF  
   4122 0000FECB FF FF FF FF FF FF FF  
   4122 0000FED2 FF FF FF FF FF FF FF  
   4122 0000FED9 FF FF FF FF FF FF FF  
   4122 0000FEE0 FF FF FF FF FF FF FF  
   4122 0000FEE7 FF FF FF FF FF FF FF  
   4122 0000FEEE FF FF FF FF FF FF FF  
   4122 0000FEF5 FF FF FF FF FF FF FF  
   4122 0000FEFC FF FF FF FF FF FF FF  
   4122 0000FF03 FF FF FF FF FF FF FF  
   4122 0000FF0A FF FF FF FF FF FF FF  
   4122 0000FF11 FF FF FF FF FF FF FF  
   4122 0000FF18 FF FF FF FF FF FF FF  
   4122 0000FF1F FF FF FF FF FF FF FF  
   4122 0000FF26 FF FF FF FF FF FF FF  
   4122 0000FF2D FF FF FF FF FF FF FF  
   4122 0000FF34 FF FF FF FF FF FF FF  
   4122 0000FF3B FF FF FF FF FF FF FF  
   4122 0000FF42 FF FF FF FF FF FF FF  
   4122 0000FF49 FF FF FF FF FF FF FF  
   4122 0000FF50 FF FF FF FF FF FF FF  
   4122 0000FF57 FF FF FF FF FF FF FF  
   4122 0000FF5E FF FF FF FF FF FF FF  
   4122 0000FF65 FF FF FF FF FF FF FF  
   4122 0000FF6C FF FF FF FF FF FF FF  
   4122 0000FF73 FF FF FF FF FF FF FF  
   4122 0000FF7A FF FF FF FF FF FF FF  
   4122 0000FF81 FF FF FF FF FF FF FF  
   4122 0000FF88 FF FF FF FF FF FF FF  
   4122 0000FF8F FF FF FF FF FF FF FF  
   4122 0000FF96 FF FF FF FF FF FF FF  
   4122 0000FF9D FF FF FF FF FF FF FF  
   4122 0000FFA4 FF FF FF FF FF FF FF  
   4122 0000FFAB FF FF FF FF FF FF FF  
   4122 0000FFB2 FF FF FF FF FF FF FF  
   4122 0000FFB9 FF FF FF FF FF FF FF  
   4122 0000FFC0 FF FF FF FF FF FF FF  
   4122 0000FFC7 FF FF FF FF FF FF FF  
   4122 0000FFCE FF FF FF FF FF FF FF  
   4122 0000FFD5 FF FF FF FF FF FF FF  
   4122 0000FFDC FF FF FF FF FF FF FF  
   4122 0000FFE3 FF FF FF FF FF FF FF  
   4122 0000FFEA FF FF FF FF FF FF FF  
   4122 0000FFF1 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Wed Jun 21 12:36:17 2017     Page 94
noc_boot11.a
   4122 0000FFF8 FF FF FF FF FF FF     
   4123 0000FFFE 00 D8                   		dw		start
