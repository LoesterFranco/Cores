;------------------------------------------------------------------------------
; Allocate a single page of memory. Available memory is indicated by a bitmmap
; called the PAM for page allocation map.
;
; Modifies:
;		t0,t1,t2
; Returns:
;		v0 = page allocated
;------------------------------------------------------------------------------
;
PAMMarkPage:
	stt		$ra,-4[$sp]
	sub		$sp,$sp,#4
	ldi   $a0,#64
.0001:
	call  PAMGetbit
	beqz  $v0,.gotFree
	add   $a0,$a0,#1
	slt   $t0,$a0,#512
	bnez  $t0,.0001
	ldi   $v0,#0
	bra   .xit
.gotFree:
  ldi   $a1,#1
  call  PAMSetbit
  mov   $v0,$a0
.xit:
	add		$sp,$sp,#4
	ldt		$ra,-4[$sp]
  ret

;------------------------------------------------------------------------------
; Parameters:
;		a0 = page number to free
; Modifies:
;		v0,v1,t0
;------------------------------------------------------------------------------

PAMUnmarkPage:
	ldi		$v0,#511						; last page is permanently allocated to system stack
	bgeu	$a0,$v0,PAMxit
	ldi		$v0,#64
	bltu	$a0,$v0,PAMxit			; first 64 pages (64kB) allocated permanently to system
	ldi   $a1,#0
; Tail recursion here

;------------------------------------------------------------------------------
; Parameters:
;		a0 = bit number to set
;   a1 = value to set (1 or 0)
; Modifies:
;		v0,v1,t0,t1
;------------------------------------------------------------------------------

PAMSetbit:
  srl   $v0,$a0,#5          ; v0 = word
  sll   $v0,$v0,#2          ; v0 = word index
  and   $v1,$a0,#31         ; v1 = bit no
  ldi   $t0,#1              ; make a bit mask
  sll   $t0,$t0,$v1
  xor   $t0,$t0,#-1         ; get inverted mask
  sll   $a1,$a1,$v1
	ldt		$t1,PAM[$v0]        ; get word
	and		$t0,$t1,$t0					; clear bit
	or    $t0,$t0,$a1         ; set new bit status
	stt		$t0,PAM[$v0]        ; store word
	srl   $a1,$a1,$v1         ; restore $a1
PAMxit:
	ret

;------------------------------------------------------------------------------
; Parameters:
;		a0 = bit number to get
; Modifies:
;		v1,t0,t1
; Returns:
;   v0 = value of bit (1 or 0)
;------------------------------------------------------------------------------

PAMGetbit:
  srl   $v0,$a0,#5          ; v0 = word
  sll   $v0,$v0,#2          ; v0 = word index
  and   $v1,$a0,#31         ; v1 = bit no
	ldt		$t0,PAM[$v0]        ; get word
	srl   $v0,$t0,$v1         ; extract bit
	and   $v0,$v0,#1          ; return 0 or 1
	ret

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

PAMInit:
  stt   $ra,-4[$sp]
  sub   $sp,$sp,#4
  ; First zero out the entire PAM using word stores
  ldi   $a0,#0
.0002:
  stt   $x0,PAM[$a0]
  add   $a0,$a0,#4
  slt   $t0,$a0,#512*4
  bnez  $t0,.0002

  ; Now set bits for preallocated memory pages
  ldi   $a0,#63         ; OS pages
  ldi   $a1,#1
.0001:
  call  PAMSetbit
  sub   $a0,$a0,#1
  bge   $a0,$x0,.0001
  ldi   $a0,#511        ; OS stack page
  call  PAMSetbit
  ldi   $a0,#510        ; OS stack page
  call  PAMSetbit
  ldi   $a0,#509        ; OS stack page
  call  PAMSetbit
  ldi   $a0,#508        ; OS stack page
  call  PAMSetbit
  add   $sp,$sp,#4
  ldt   $ra,-4[$sp]
  ret

GetPamBit:
  mov   $a0,$a1
  call  PAMGetbit
  mov   $v1,$v0
  ldi   $v0,#E_Ok
  jmp   ERETx
