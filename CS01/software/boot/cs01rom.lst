                        	.file "cs01rom.asm",1
                        	.file "cs01rom.asm",1
                        	.file "../fmtk/const.asm",1
                        	.file "../fmtk/const.asm",1
                        	; First 128 bytes are for integer register set
                        	; Second 128 bytes are for float register set
                        	; Leave some room for 64-bit regs
                        	TCBsegs			EQU		$200		; segment register storage
                        	TCBepc			EQU		$280
                        	TCBStatus		EQU		$288
                        	TCBPriority	EQU		$289
                        	TCBStackBot	EQU		$290
                        	TCBMsgD1		EQU		$298
                        	TCBMsgD2		EQU		$2A0
                        	TCBMsgD3		EQU		$2A8
                        	TCBStartTick	EQU	$2B0
                        	TCBEndTick	EQU		$2B8
                        	TCBTicks		EQU		$2C0
                        	TCBException	EQU	$2C8
                        	
                        	TS_NONE			EQU		0
                        	TS_READY		EQU		1
                        	TS_DEAD			EQU		2
                        	TS_MSGRDY		EQU		4
                        	TS_WAITMSG	EQU		8
                        	TS_RUNNING	EQU		128
                        	
                        	; error codes
                        	E_Ok		=		0x00
                        	E_Arg		=		0x01
                        	E_BadMbx	=		0x04
                        	E_QueFull	=		0x05
                        	E_NoThread	=		0x06
                        	E_NotAlloc	=		0x09
                        	E_NoMsg		=		0x0b
                        	E_Timeout	=		0x10
                        	E_BadAlarm	=		0x11
                        	E_NotOwner	=		0x12
                        	E_QueStrategy =		0x13
                        	E_BadDevNum	=		0x18
                        	E_DCBInUse	=		0x19
                        	; Device driver errors
                        	E_BadDevNum	=		0x20
                        	E_NoDev		=		0x21
                        	E_BadDevOp	=		0x22
                        	E_ReadError	=		0x23
                        	E_WriteError =		0x24
                        	E_BadBlockNum	=	0x25
                        	E_TooManyBlocks	=	0x26
                        	
                        	; resource errors
                        	E_NoMoreMbx	=		0x40
                        	E_NoMoreMsgBlks	=	0x41
                        	E_NoMoreAlarmBlks	=0x44
                        	E_NoMoreTCBs	=	0x45
                        	E_NoMem		= 12
                        	
                        	.file "cs01rom.asm",1
                        	.file "cs01rom.asm",1
                        	.file "../fmtk/config.asm",1
                        	.file "../fmtk/config.asm",1
                        	MAX_TID		EQU		15
                        	NR_TCB		EQU		16
                        	.file "cs01rom.asm",1
                        	.file "cs01rom.asm",1
                        	
                        	BS					equ		$08
                        	LF					equ		$0A
                        	CR					equ		$0D
                        	XON					equ		$11
                        	XOFF				equ		$13
                        	DEL					equ		$7F
                        	VIA					equ		$FFDC0600
                        	VIA_PA			equ		$04
                        	VIA_DDRA		equ		$0C
                        	VIA_T1CL		equ		$10
                        	VIA_T1CH		equ		$14
                        	VIA_ACR			equ		$2C
                        	VIA_PCR			equ		$30
                        	VIA_IFR			equ		$34
                        	VIA_PARAW		equ		$3C
                        	UART				equ		$FFDC0A00
                        	UART_TRB		equ		$00
                        	UART_STAT		equ		$04
                        	UART_CMD		equ		$08
                        			; First 16kB is for TCB's
                        	INBUF				equ		$4100
                        	switchflag	equ		$4200
                        	milliseconds	equ		$4208
                        	
                        	
                        	.file "cs01rom.asm",28
                        			code	18 bits
                        	;------------------------------------------------------------------------------
                        	; Exception vector table.
                        	;------------------------------------------------------------------------------
                        			org		$FFFC0000				; user mode exception
FFFC0000 7800006F			jmp		IRQRout
FFFC0004 00000000			org 	$FFFC00C0				; machine mode exception
FFFC0008 00000000
FFFC000C 00000000
FFFC0010 00000000
FFFC0014 00000000
FFFC0018 00000000
FFFC001C 00000000
FFFC0020 00000000
FFFC0024 00000000
FFFC0028 00000000
FFFC002C 00000000
FFFC0030 00000000
FFFC0034 00000000
FFFC0038 00000000
FFFC003C 00000000
FFFC0040 00000000
FFFC0044 00000000
FFFC0048 00000000
FFFC004C 00000000
FFFC0050 00000000
FFFC0054 00000000
FFFC0058 00000000
FFFC005C 00000000
FFFC0060 00000000
FFFC0064 00000000
FFFC0068 00000000
FFFC006C 00000000
FFFC0070 00000000
FFFC0074 00000000
FFFC0078 00000000
FFFC007C 00000000
FFFC0080 00000000
FFFC0084 00000000
FFFC0088 00000000
FFFC008C 00000000
FFFC0090 00000000
FFFC0094 00000000
FFFC0098 00000000
FFFC009C 00000000
FFFC00A0 00000000
FFFC00A4 00000000
FFFC00A8 00000000
FFFC00AC 00000000
FFFC00B0 00000000
FFFC00B4 00000000
FFFC00B8 00000000
FFFC00BC 00000000
FFFC00C0 6C00006F			jmp		IRQRout
FFFC00C4 00000000			org		$FFFC00FC				; non-maskable interrupt
FFFC00C8 00000000
FFFC00CC 00000000
FFFC00D0 00000000
FFFC00D4 00000000
FFFC00D8 00000000
FFFC00DC 00000000
FFFC00E0 00000000
FFFC00E4 00000000
FFFC00E8 00000000
FFFC00EC 00000000
FFFC00F0 00000000
FFFC00F4 00000000
FFFC00F8 00000000
FFFC00FC 0040006F			jmp		MachineStart
                        	
                        	;------------------------------------------------------------------------------
                        	; User mode code starts here
                        	;------------------------------------------------------------------------------
                        			org		$FFFC0100
                        	MachineStart:
FFFC0100 00080737			ldi		$sp,#$80000-4		; setup machine mode stack pointer
FFFC0104 FFC70713
FFFC0108 3E1000EF			call	MMUInit					; initialize MMU for address space zero.
FFFC010C 124010EF			call	FMTKInit
FFFC0110 FFFC0D37			ldi		$t0,#$FFFC0000
FFFC0114 000D0D13
FFFC0118 301D1073			csrrw $x0,#$301,$t0		; set tvec
FFFC011C FFFC0D37			ldi		$t0,#UserStart
FFFC0120 12CD0D13
FFFC0124 341D1073			csrrw	$x0,#$341,$t0		; set mepc
FFFC0128 10000073			eret									; switch to user mode
                        	UserStart:
FFFC012C 00080737			ldi		$sp,#$80000-1028		; setup user mode stack pointer
FFFC0130 BFC70713
FFFC0134 4FC000EF			call	VIAInit
FFFC0138 00806D13			ldi		$t0,#$08						; turn on the LED
FFFC013C FFDC0637			sw		$t0,VIA+VIA_PARAW
FFFC0140 63C60613
FFFC0144 00060633
FFFC0148 01A62023
FFFC014C 5F0000EF			call	SerialInit
FFFC0150 01006E13			ldi		$t2,#16							; send an XON just in case
FFFC0154 01106913			ldi		$a0,#XON
                        	.0004:
FFFC0158 574000EF			call	SerialPutChar
FFFC015C FFFE0E13			sub		$t2,$t2,#1
FFFC0160 FE0E1CE3			bne		$t2,$x0,.0004
                        	.0002:
FFFC0164 FFFC1937			ldi		$a0,#msgStart				; spit out a startup message
FFFC0168 82490913
FFFC016C 59C000EF			call	SerialPutString
FFFC0170 00106913			ldi		a0,#1
FFFC0174 000069B7			ldi		a1,#24000
FFFC0178 DC098993
FFFC017C FFFC0A37			ldi		a2,#Monitor
FFFC0180 1D8A0A13
FFFC0184 00000073			ecall
FFFC0188 04000463			bra		MonEntry
                        	
                        			; Now a loop to recieve and echo back characters
                        	.0003:
FFFC018C 50C000EF			call	SerialPeekChar
FFFC0190 FE084EE3			blt		$v0,$x0,.0003
FFFC0194 00086933			mov		$a0,$v0
FFFC0198 534000EF			call	SerialPutChar
FFFC019C FE0008E3			bra		.0003
                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	
                        	Getch:
FFFC01A0 FFC70713			sub		$sp,$sp,#4
FFFC01A4 00172023			sw		$ra,[$sp]
FFFC01A8 4F0000EF			call	SerialPeekChar
FFFC01AC 00072083			lw		$ra,[$sp]
FFFC01B0 00470713			add		$sp,$sp,#4
FFFC01B4 00008067			ret
                        	
                        	Putch:
FFFC01B8 FFC70713			sub		$sp,$sp,#4
FFFC01BC 00172023			sw		$ra,[$sp]
FFFC01C0 50C000EF			call	SerialPutChar
FFFC01C4 00072083			lw		$ra,[$sp]
FFFC01C8 00470713			add		$sp,$sp,#4
FFFC01CC 00008067			ret
                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	MonEntry:
                        	;		flw			$f2,fltTen
                        	;		fsw			$f2,f2Save
                        	;		flw			$f1,fltTen
                        	;		fsw			$f1,f1Save
                        	;		fadd		$f18,$f2,$f1
                        	;		fsw			$f18,f18Save
FFFC01D0 00A06913			ldi		$a0,#10
FFFC01D4 00606A13			ldi		$a2,#6
                        	;		call	fltToString
                        	;		ldi		$a0,#STRTMP
                        	;		call	SerialPutString
                        	
                        	Monitor:
FFFC01D8 00006213			ldi		$s1,#0					; s1 = input pointer
FFFC01DC 00D06913			ldi		$a0,#CR
FFFC01E0 FD9FF0EF			call	Putch
FFFC01E4 00006913			ldi		$a0,#LF
		call	Putch
FFFC01E8 FD1FF0EF
FFFC01EC 03E06913			ldi		$a0,#'>'
FFFC01F0 FC9FF0EF			call	Putch
                        	.0001:
FFFC01F4 FADFF0EF			call	Getch						; wait until character pressed
FFFC01F8 FE084EE3			blt		$v0,$x0,.0001
FFFC01FC 00084D13			xor		$t0,$v0,#LF			; ignore line feed
		beq		$t0,$x0,.procLine
FFFC0200 0E0D0C63
FFFC0204 00D84D13			xor		$t0,$v0,#CR
FFFC0208 0E0D0863			beq		$t0,$x0,.procLine
FFFC020C 00884D13			xor		$t0,$v0,#BS
FFFC0210 080D0263			beq		$t0,$x0,.doBackspace
FFFC0214 07F84D13			xor		$t0,$v0,#DEL
FFFC0218 020D0263			beq		$t0,$x0,.doDelete
FFFC021C 00004637			sb		$v0,INBUF[$s1]
FFFC0220 10060613
FFFC0224 00460633
FFFC0228 01060023
FFFC022C 00120213			add		$s1,$s1,#1
FFFC0230 00086933			mov		$a0,$v0
FFFC0234 F85FF0EF			call	Putch
FFFC0238 FA000EE3			bra		.0001
                        	.doDelete:
FFFC023C 000262B3			mov		$s2,$s1
FFFC0240 00128293			add		$s2,$s2,#1
                        	.0002:
FFFC0244 00004637			lb		$t0,INBUF[$s2]
FFFC0248 10060613
FFFC024C 00560633
FFFC0250 00060D03
FFFC0254 00004637			sb		$t0,INBUF-1[$s2]
FFFC0258 0FF60613
FFFC025C 00560633
FFFC0260 01A60023
FFFC0264 00128293			add		$s2,$s2,#1
FFFC0268 00004637			add		$t0,$s2,#INBUF
FFFC026C 10060613
FFFC0270 00560D33
FFFC0274 00004637			slt		$t0,$t0,#INBUF+$7F
FFFC0278 17F60613
FFFC027C FC0D14E3			bne		$t0,$x0,.0002
FFFC0280 00004637			sb		$x0,INBUF[$s2]
FFFC0284 10060613
FFFC0288 00560633
FFFC028C 00060023
FFFC0290 F60002E3			bra		.0001
                        	.doBackspace:
FFFC0294 F60200E3			beq		$s1,$x0,.0001		; can't backspace anymore
FFFC0298 00086933			mov		$a0,$v0					; show the backspace
FFFC029C F1DFF0EF			call	Putch
FFFC02A0 FFF20213			sub		$s1,$s1,#1
FFFC02A4 000262B3			mov		$s2,$s1
                        	.0003:
FFFC02A8 00004637			lb		$t0,INBUF+1[$s2]
FFFC02AC 10160613
FFFC02B0 00560633
FFFC02B4 00060D03
FFFC02B8 00004637			sb		$t0,INBUF[$s2]
FFFC02BC 10060613
FFFC02C0 00560633
FFFC02C4 01A60023
FFFC02C8 00128293			add		$s2,$s2,#1
FFFC02CC 00004637			add		$t0,$s2,#INBUF
FFFC02D0 10060613
FFFC02D4 00560D33
FFFC02D8 00004637			slt		$t0,$t0,#INBUF+$7F
FFFC02DC 17F60613
FFFC02E0 FC0D14E3			bne		$t0,$x0,.0003
FFFC02E4 00004637			sb		$x0,INBUF[$s2]
FFFC02E8 10060613
FFFC02EC 00560633
FFFC02F0 00060023
FFFC02F4 F00000E3			bra		.0001
                        	.procLine:
FFFC02F8 00004637			sb		$x0,INBUF[$s1]
FFFC02FC 10060613
FFFC0300 00460633
FFFC0304 00060023
FFFC0308 00006213			ldi		$s1,#0
                        	.skip:
FFFC030C 00004637			lb		$t0,INBUF[$s1]
FFFC0310 10060613
FFFC0314 00460633
FFFC0318 00060D03
FFFC031C 0C0D0C63			beq		$t0,$x0,.0005
FFFC0320 03ED4D93			xor		$t1,$t0,#'>'
FFFC0324 000D9663			bne		$t1,$x0,.0004
                        	.skip2:
FFFC0328 00120213			add		$s1,$s1,#1
FFFC032C FE0000E3			bra		.skip
                        	.0004:
FFFC0330 020D4D93			xor		$t1,$t0,#' '
FFFC0334 FE0D8AE3			beq		$t1,$x0,.skip2
FFFC0338 009D4D93			xor		$t1,$t0,#'\t'
FFFC033C FE0D86E3			beq		$t1,$x0,.skip2
FFFC0340 04DD4D93			xor		$t1,$t0,#'M'
FFFC0344 0A0D8A63			beq		$t1,$x0,doMem
FFFC0348 04206D93			ldi		$t1,#'B'
FFFC034C 05BD1663			bne		$t0,$t1,.0006
FFFC0350 00106913			ldi		$a0,#1					; Start task
FFFC0354 000089B7			ldi		$a1,#32000			; 32 kB
FFFC0358 D0098993
FFFC035C FFFC3A37			ldi		$a2,#CSTART			; start address
FFFC0360 030A0A13
FFFC0364 00000073			ecall
FFFC0368 0008E233			mov		$s1,$v1					; save v1
FFFC036C FFFC1937			ldi		$a0,#msgCRLF
FFFC0370 8EA90913
FFFC0374 394000EF			call	SerialPutString
FFFC0378 00026933			mov		$a0,$s1					; get back v1
FFFC037C 254000EF			call	PutHexByte
FFFC0380 FFFC1937			ldi		$a0,msgTaskStart
FFFC0384 8DC90913
FFFC0388 380000EF			call	SerialPutString
FFFC038C 00D06913			ldi		$a0,#13					; Reschedule task
FFFC0390 00000073			ecall
FFFC0394 E45FF06F			jmp		Monitor
                        	.0006:
FFFC0398 04406D93			ldi		$t1,#'D'
FFFC039C 01BD1863			bne		$t0,$t1,.0007
FFFC03A0 00E06913			ldi		$a0,#14
FFFC03A4 00000073			ecall
FFFC03A8 E31FF06F			jmp		Monitor
                        	.0007:
FFFC03AC 04506D93			ldi		$t1,#'E'
FFFC03B0 01BD1463			bne		$t0,$t1,.0008
FFFC03B4 0CC0006F			jmp		EditMem
                        	.0008:
FFFC03B8 04606D93			ldi		$t1,#'F'
FFFC03BC 01BD1463			bne		$t0,$t1,.0009
FFFC03C0 0D80006F			jmp		FillMem
                        	.0009:
FFFC03C4 05306D93			ldi		$t1,#'S'
FFFC03C8 01BD1863			bne		$t0,$t1,.0010
FFFC03CC 00D06913			ldi		$a0,#13
FFFC03D0 00000073			ecall
FFFC03D4 E05FF06F			jmp		Monitor
                        	.0010:
FFFC03D8 04B06D93			ldi		$t1,#'K'
FFFC03DC 01BD1C63			bne		$t0,$t1,.0011
FFFC03E0 110000EF			call	GetHexNum
FFFC03E4 00306913			ldi		$a0,#3					; kill task
FFFC03E8 000869B3			mov		$a1,$v0					; a0 = pid
FFFC03EC 00000073			ecall
FFFC03F0 DE9FF06F			jmp		Monitor
                        	.0011:
                        	.0005:
FFFC03F4 DE0002E3			bra		Monitor
                        	
                        	doMem:
FFFC03F8 FFC70713			sub		$sp,$sp,#4
FFFC03FC 00120213			add		$s1,$s1,#1
FFFC0400 00472023			sw		$s1,[$sp]
FFFC0404 00D06913			ldi		$a0,#CR
FFFC0408 DB1FF0EF			call	Putch
FFFC040C 00004937			ldi		$a0,INBUF
FFFC0410 10090913
FFFC0414 2F4000EF			call	SerialPutString
FFFC0418 00072203			lw		$s1,[$sp]
FFFC041C 00470713			add		$sp,$sp,#4
FFFC0420 0D0000EF			call	GetHexNum
FFFC0424 00086333			mov		$s3,$v0
FFFC0428 00120213			add		$s1,$s1,#1
FFFC042C 0C4000EF			call	GetHexNum
FFFC0430 006803B3			add		$s4,$v0,$s3
                        	.loop2:
FFFC0434 D6DFF0EF			call	Getch						; check for ctrl-c
FFFC0438 00384813			xor		$v0,$v0,#3
FFFC043C D8080EE3			beq		$v0,$x0,Monitor
FFFC0440 00D06913			ldi		$a0,#CR
FFFC0444 D75FF0EF			call	Putch
FFFC0448 00036933			mov		$a0,$s3
FFFC044C 144000EF			call	PutHexWord
FFFC0450 03A06913			ldi		$a0,#':'
FFFC0454 D65FF0EF			call	Putch
FFFC0458 00706293			ldi		$s2,#7
                        	.loop:
FFFC045C 02006913			ldi		$a0,#' '
FFFC0460 D59FF0EF			call	Putch
FFFC0464 00030903			lb		$a0,[$s3]
FFFC0468 168000EF			call	PutHexByte
FFFC046C 00130313			add		$s3,$s3,#1
FFFC0470 FFF28293			sub		$s2,$s2,#1
FFFC0474 FE02D4E3			bge		$s2,$x0,.loop
FFFC0478 FA736EE3			bltu	$s3,$s4,.loop2
FFFC047C D4000EE3			bra		Monitor		
                        	
                        	EditMem:
FFFC0480 070000EF			call	GetHexNum			; get address to edit
FFFC0484 00086333			mov		$s3,$v0
FFFC0488 00120213			add		$s1,$s1,#1
FFFC048C 064000EF			call	GetHexNum			; get value to set
FFFC0490 00680023			sb		$s3,[$v0]			; update mem
FFFC0494 D45FF06F			jmp		Monitor
                        	
                        	;------------------------------------------------------------------------------
                        	;	>F 1000 800 EE
                        	; Fills memory beginning at address $1000 for $800 bytes with the value $EE
                        	;------------------------------------------------------------------------------
                        	
                        	FillMem:
FFFC0498 058000EF			call	GetHexNum			; get address
FFFC049C 00086333			mov		$s3,$v0
FFFC04A0 00120213			add		$s1,$s1,#1
FFFC04A4 04C000EF			call	GetHexNum			; get length
FFFC04A8 000863B3			mov		$s4,$v0
FFFC04AC 00120213			add		$s1,$s1,#1
FFFC04B0 040000EF			call	GetHexNum			; get byte to use
                        	.0001:
FFFC04B4 01030023			sb		$v0,[$s3]
FFFC04B8 FFF38393			sub		$s4,$s4,#1
FFFC04BC FE704CE3			bgt		$s4,$x0,.0001
FFFC04C0 D19FF06F			jmp		Monitor
                        	
                        	;------------------------------------------------------------------------------
                        	; Skip over spaces and tabs in the input buffer.
                        	;------------------------------------------------------------------------------
                        	
                        	SkipSpaces:
                        	.skip2:
FFFC04C4 00004637			lb		$t0,INBUF[$s1]
FFFC04C8 10060613
FFFC04CC 00460633
FFFC04D0 00060D03
FFFC04D4 020D4D93			xor		$t1,$t0,#' '
FFFC04D8 000D8863			beq		$t1,$x0,.skip1
FFFC04DC 009D4D93			xor		$t1,$t0,#'\t'
FFFC04E0 000D8463			beq		$t1,$x0,.skip1
FFFC04E4 00008067			ret
                        	.skip1:
FFFC04E8 00120213			add		$s1,$s1,#1
FFFC04EC FC000CE3			bra		.skip2
                        	
                        	;------------------------------------------------------------------------------
                        	; Get a hex number from the input buffer.
                        	;------------------------------------------------------------------------------
                        	
                        	GetHexNum:
FFFC04F0 00006813			ldi		$v0,#0							; v0 = num
FFFC04F4 FFC70713			sub		$sp,$sp,#4
FFFC04F8 00172023			sw		$ra,[$sp]
FFFC04FC FC9FF0EF			call	SkipSpaces
                        	.next:
FFFC0500 00004637			lb		$t0,INBUF[$s1]
FFFC0504 10060613
FFFC0508 00460633
FFFC050C 00060D03
FFFC0510 03006E13			ldi		$t2,#'0'
FFFC0514 03CD4663			blt		$t0,$t2,.0001
FFFC0518 03A06E13			ldi		$t2,#'9'+1
FFFC051C 07CD4063			blt		$t0,$t2,.isDigit
FFFC0520 04106E13			ldi		$t2,#'A'
FFFC0524 01CD4E63			blt		$t0,$t2,.0001
FFFC0528 04706E13			ldi		$t2,#'F'+1
FFFC052C 03CD4063			blt		$t0,$t2,.isHexUpper
FFFC0530 06106E13			ldi		$t2,#'a'
FFFC0534 01CD4663			blt		$t0,$t2,.0001
FFFC0538 06706E13			ldi		$t2,#'f'+1
FFFC053C 03CD4463			blt		$t0,$t2,.isHexLower
                        	.0001:
FFFC0540 00072083			lw		$ra,[$sp]
FFFC0544 00470713			add		$sp,$sp,#4
FFFC0548 00008067			ret
                        	.isHexUpper:
FFFC054C 00481813			sll		$v0,$v0,#4
FFFC0550 FBFD0D13			sub		$t0,$t0,#'A'
FFFC0554 00AD0D13			add		$t0,$t0,#10
FFFC0558 01A86833			or		$v0,$v0,$t0
FFFC055C 00120213			add		$s1,$s1,#1
FFFC0560 FA0000E3			bra		.next
                        	.isHexLower:
FFFC0564 00481813			sll		$v0,$v0,#4
FFFC0568 F9FD0D13			sub		$t0,$t0,#'a'
FFFC056C 00AD0D13			add		$t0,$t0,#10
FFFC0570 01A86833			or		$v0,$v0,$t0
FFFC0574 00120213			add		$s1,$s1,#1
FFFC0578 F80004E3			bra		.next
                        	.isDigit:
FFFC057C 00481813			sll		$v0,$v0,#4
FFFC0580 FD0D0D13			sub		$t0,$t0,#'0'
FFFC0584 01A86833			or		$v0,$v0,$t0
FFFC0588 00120213			add		$s1,$s1,#1
FFFC058C F6000AE3			bra		.next
                        	
                        	;------------------------------------------------------------------------------
                        	; Output a word as a hex string.
                        	;------------------------------------------------------------------------------
                        	
                        	PutHexWord:
FFFC0590 FF870713			sub		$sp,$sp,#8
FFFC0594 00172023			sw		$ra,[$sp]
FFFC0598 01272223			sw		$a0,4[$sp]
FFFC059C 01095913			srl		$a0,$a0,#16
FFFC05A0 010000EF			call	PutHexHalf
FFFC05A4 00072083			lw		$ra,[$sp]
FFFC05A8 00472903			lw		$a0,4[$sp]
FFFC05AC 00870713			add		$sp,$sp,#8	; fall through to PutHexHalf
                        	
                        	;------------------------------------------------------------------------------
                        	; Output a half-word (16 bits) as a hex string.
                        	;------------------------------------------------------------------------------
                        	
                        	PutHexHalf:
FFFC05B0 FF870713			sub		$sp,$sp,#8
FFFC05B4 00172023			sw		$ra,[$sp]
FFFC05B8 01272223			sw		$a0,4[$sp]
FFFC05BC 00895913			srl		$a0,$a0,#8
FFFC05C0 010000EF			call	PutHexByte
FFFC05C4 00072083			lw		$ra,[$sp]
FFFC05C8 00472903			lw		$a0,4[$sp]		
FFFC05CC 00870713			add		$sp,$sp,#8	; fall through to PutHexByte
                        	
                        	;------------------------------------------------------------------------------
                        	; Output a byte as a hex string.
                        	;------------------------------------------------------------------------------
                        	
                        	PutHexByte:
FFFC05D0 FF870713			sub		$sp,$sp,#8
FFFC05D4 00172023			sw		$ra,[$sp]
FFFC05D8 01272223			sw		$a0,4[$sp]
FFFC05DC 00495913			srl		$a0,$a0,#4		; put the high order nybble first
FFFC05E0 010000EF			call	PutHexNybble
FFFC05E4 00072083			lw		$ra,[$sp]
FFFC05E8 00472903			lw		$a0,4[$sp]
FFFC05EC 00870713			add		$sp,$sp,#8		; fall through to PutHexNybble
                        	
                        	;------------------------------------------------------------------------------
                        	; Output a nybble as a hex string.
                        	;------------------------------------------------------------------------------
                        	
                        	PutHexNybble:
FFFC05F0 FF870713			sub		$sp,$sp,#8
FFFC05F4 00172023			sw		$ra,[$sp]
FFFC05F8 01272223			sw		$a0,4[$sp]
FFFC05FC 00F97913			and		$a0,$a0,#15		; strip off high order bits
FFFC0600 00A06D13			ldi		$t0,#10
FFFC0604 01A94A63			blt		$a0,$t0,.lt10
FFFC0608 FF690913			sub		$a0,$a0,#10
FFFC060C 04190913			add		$a0,$a0,#'A'
FFFC0610 BA9FF0EF			call	Putch
FFFC0614 00000663			bra		.0001
                        	.lt10:
FFFC0618 03090913			add		$a0,$a0,#'0'
FFFC061C B9DFF0EF			call	Putch
                        	.0001:
FFFC0620 00072083			lw		$ra,[$sp]
FFFC0624 00472903			lw		$a0,4[$sp]
FFFC0628 00870713			add		$sp,$sp,#8
FFFC062C 00008067			ret
                        	
                        	;------------------------------------------------------------------------------
                        	; VIAInit
                        	;
                        	; Initialize the versatile interface adapter.
                        	;------------------------------------------------------------------------------
                        	
                        	VIAInit:
                        			; Initialize port A low order eight bits as output, the remaining bits as
                        			; input.
FFFC0630 0FF06D13			ldi		$t0,#$000000FF
FFFC0634 FFDC0637			sw		$t0,VIA+VIA_DDRA
FFFC0638 60C60613
FFFC063C 00060633
FFFC0640 01A62023
FFFC0644 00106D13			ldi		$t0,#1							; select timer 3 access
FFFC0648 FFDC0637			sb		$t0,VIA+VIA_PCR+1
FFFC064C 63160613
FFFC0650 00060633
FFFC0654 01A60023
FFFC0658 01F06D13			ldi		$t0,#$1F
FFFC065C FFDC0637			sb		$t0,VIA+VIA_ACR+1		; set timer 3 mode, timer 1/2 = 64 bit
FFFC0660 62D60613
FFFC0664 00060633
FFFC0668 01A60023
FFFC066C 00197D37			ldi		$t0,#$00196E6B			;	divider value for 30Hz
FFFC0670 E6BD0D13
FFFC0674 FFDC0637			sw		$t0,VIA+VIA_T1CL
FFFC0678 61060613
FFFC067C 00060633
FFFC0680 01A62023
FFFC0684 FFDC0637			sw		$x0,VIA+VIA_T1CH		; trigger transfer to count registers
FFFC0688 61460613
FFFC068C 00060633
FFFC0690 00062023
FFFC0694 00008067			ret
                        	
                        	;------------------------------------------------------------------------------
                        	; SerialPeekChar
                        	;
                        	; Check the serial port status to see if there's a char available. If there's
                        	; a char available then return it.
                        	;
                        	; Modifies:
                        	;		none
                        	; Returns:
                        	;		$v0 = character or -1
                        	;------------------------------------------------------------------------------
                        	
                        	SerialPeekChar:
FFFC0698 FFDC1637			lb		$v0,UART+UART_STAT
FFFC069C A0460613
FFFC06A0 00060633
FFFC06A4 00060803
FFFC06A8 00887813			and		$v0,$v0,#8					; look for Rx not empty
FFFC06AC 00080C63			beq		$v0,$x0,.0001
FFFC06B0 FFDC1637			lb		$v0,UART+UART_TRB
FFFC06B4 A0060613
FFFC06B8 00060633
FFFC06BC 00060803
FFFC06C0 00008067			ret
                        	.0001:
FFFC06C4 FFF06813			ldi		$v0,#-1
FFFC06C8 00008067			ret
                        	
                        	;------------------------------------------------------------------------------
                        	; SerialPutChar
                        	;    Put a character to the serial transmitter. This routine blocks until the
                        	; transmitter is empty.
                        	;
                        	; Parameters:
                        	;		$a0 = character to put
                        	; Modifies:
                        	;		none
                        	;------------------------------------------------------------------------------
                        	
                        	SerialPutChar:
FFFC06CC FFC70713			sub		$sp,$sp,#4
FFFC06D0 01072023			sw		$v0,[$sp]
                        	.0001:
FFFC06D4 FFDC1637			lb		$v0,UART+UART_STAT	; wait until the uart indicates tx empty
FFFC06D8 A0460613
FFFC06DC 00060633
FFFC06E0 00060803
FFFC06E4 01087813			and		$v0,$v0,#16					; bit #4 of the status reg
FFFC06E8 FE0806E3			beq		$v0,$x0,.0001				; branch if transmitter is not empty
FFFC06EC FFDC1637			sb		$a0,UART+UART_TRB		; send the byte
FFFC06F0 A0060613
FFFC06F4 00060633
FFFC06F8 01260023
FFFC06FC 00072803			lw		$v0,[$sp]
FFFC0700 00470713			add		$sp,$sp,#4
FFFC0704 00008067			ret
                        	
                        	;------------------------------------------------------------------------------
                        	; SerialPutString
                        	;    Put a string of characters to the serial transmitter. Calls the 
                        	; SerialPutChar routine, so this routine also blocks if the transmitter is not
                        	; empty.
                        	;
                        	; Parameters:
                        	;		$a0 = pointer to null terminated string to put
                        	; Modifies:
                        	;		$t0 and $t1
                        	; Stack Space:
                        	;		2 words
                        	;------------------------------------------------------------------------------
                        	
                        	SerialPutString:
FFFC0708 FF870713			sub		$sp,$sp,#8				; save link register
FFFC070C 00172023			sw		$ra,[$sp]
FFFC0710 01272223			sw		$a0,4[$sp]				; and argument
FFFC0714 00096DB3			mov		$t1,$a0						; t1 = pointer to string
                        	.0001:
FFFC0718 000D8903			lb		$a0,[$t1]
FFFC071C 001D8D93			add		$t1,$t1,#1				; advance pointer to next byte
FFFC0720 00090663			beq		$a0,$x0,.done			; branch if done
FFFC0724 FA9FF0EF			call	SerialPutChar			; output character
FFFC0728 FE0008E3			bra		.0001
                        	.done:
FFFC072C 00072083			lw		$ra,[$sp]					; restore return address
FFFC0730 00472903			lw		$a0,4[$sp]				; and argument
FFFC0734 00870713			add		$sp,$sp,#8
FFFC0738 00008067			ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Initialize serial port.
                        	;
                        	; Modifies:
                        	;		$t0
                        	;------------------------------------------------------------------------------
                        	
                        	SerialInit:
FFFC073C 00B06D13			ldi		$t0,#$0B						; dtr,rts active, rxint disabled, no parity
FFFC0740 FFDC1637			sw		$t0,UART+8
FFFC0744 A0860613
FFFC0748 00060633
FFFC074C 01A62023
FFFC0750 00060D37			ldi		$t0,#$0006001E			; reset the fifo's
FFFC0754 01ED0D13
FFFC0758 FFDC1637			sw		$t0,UART+12
FFFC075C A0C60613
FFFC0760 00060633
FFFC0764 01A62023
FFFC0768 01E06D13			ldi		$t0,#$0000001E			; baud 9600, 1 stop bit, 8 bit, internal baud gen
FFFC076C FFDC1637			sw		$t0,UART+12
FFFC0770 A0C60613
FFFC0774 00060633
FFFC0778 01A62023
FFFC077C 00008067			ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Exception processing code starts here.
                        	;------------------------------------------------------------------------------
                        	.file "cs01rom.asm",541
                        			code
                        			align	4                        	
                        	IRQRout:
FFFC0780 00080737			ldi		$sp,#$80000-4		; setup machine mode stack pointer
FFFC0784 FFC70713
FFFC0788 34201D73			csrrw	$t0,#$342,$x0			; get cause code
FFFC078C 000D4663			blt		$t0,$x0,.isIRQ		; irq or ecall?
FFFC0790 2400106F			jmp		OSCALL					; 
FFFC0794 10000073			eret										
                        	.isIRQ:
                        	 		; Was it the VIA that caused the interrupt?
FFFC0798 FFDC0637			lb		$t0,VIA+VIA_IFR
FFFC079C 63460613
FFFC07A0 00060633
FFFC07A4 00060D03
FFFC07A8 040D5663			bge		$t0,$x0,.0001			; no
FFFC07AC FFDC0637			lw		$t0,VIA+VIA_T1CL	; yes, clear interrupt
FFFC07B0 61060613
FFFC07B4 00060633
FFFC07B8 00062D03
FFFC07BC 00004637			lw		$t0,milliseconds
FFFC07C0 20860613
FFFC07C4 00060633
FFFC07C8 00062D03
FFFC07CC 01ED0D13			add		$t0,$t0,#30
FFFC07D0 00004637			sw		$t0,milliseconds
FFFC07D4 20860613
FFFC07D8 00060633
FFFC07DC 01A62023
FFFC07E0 00004637			sw		$t0,switchflag
FFFC07E4 20060613
FFFC07E8 00060633
FFFC07EC 01A62023
FFFC07F0 10000073			eret
                        			; Was it the uart that caused the interrupt?
                        	.0001:
FFFC07F4 FFDC1637			lb		$t0,UART+UART_STAT
FFFC07F8 A0460613
FFFC07FC 00060633
FFFC0800 00060D03
FFFC0804 000D4463			blt		$t0,$x0,.0002			; uart cause interrupt?
                        			; Some other interrupt
FFFC0808 10000073			eret
                        	.0002:
FFFC080C 00B06D13			ldi		$t0,#$0B						; dtr,rts active, rxint disabled, no parity
FFFC0810 FFDC1637			sw		$t0,UART+UART_CMD
FFFC0814 A0860613
FFFC0818 00060633
FFFC081C 01A62023
FFFC0820 10000073			eret
                        	
                        	;------------------------------------------------------------------------------
                        	; Message strings
                        	;------------------------------------------------------------------------------
                        	
                        	msgStart:
FFFC0824 31305343			db		"CS01 System Starting.",13
FFFC0828 73795320
FFFC082C 206D6574
FFFC0830 72617453
FFFC0834 676E6974
FFFC0838 6F4D0D2E
                        	msgMonHelp:
FFFC083A 696E6F4D			db		"Monitor Commands",13
FFFC083E 20726F74
FFFC0842 6D6D6F43
FFFC0846 73646E61
FFFC084A 2D20420D
FFFC084B 202D2042			db		"B - start tiny basic",13
FFFC084F 72617473
FFFC0853 69742074
FFFC0857 6220796E
FFFC085B 63697361
FFFC085F 2D20440D
FFFC0860 202D2044			db		"D - dump ready que",13
FFFC0864 706D7564
FFFC0868 61657220
FFFC086C 71207964
FFFC0870 450D6575
FFFC0873 202D2045			db		"E - edit memory",13
FFFC0877 74696465
FFFC087B 6D656D20
FFFC087F 0D79726F
FFFC0883 202D2046			db		"F - fill memory",13
FFFC0887 6C6C6966
FFFC088B 6D656D20
FFFC088F 0D79726F
FFFC0893 743C204B			db		"K <tid> - kill task", 13
FFFC0897 203E6469
FFFC089B 696B202D
FFFC089F 74206C6C
FFFC08A3 0D6B7361
FFFC08A7 733C204D			db		"M <start> <length>	- dump memory",13
FFFC08AB 74726174
FFFC08AF 6C3C203E
FFFC08B3 74676E65
FFFC08B7 2D093E68
FFFC08BB 6D756420
FFFC08BF 656D2070
FFFC08C3 79726F6D
FFFC08C7 2D20530D
FFFC08C8 202D2053			db		"S - switch task",13
FFFC08CC 74697773
FFFC08D0 74206863
FFFC08D4 0D6B7361
FFFC08D8 00000000			db		0
FFFC08D9 20000000			align 
                        	
                        	msgTaskStart:
FFFC08DC 73617420			db		" task started."
FFFC08E0 7473206B
FFFC08E4 65747261
FFFC08E8 0A0D2E64
                        	msgCRLF:
FFFC08EA 00000A0D			db		13,10,0
                        	flt50:
FFFC08ED 00000000		dw	0x00000000,0x00000000,0x00000000,0x40049000
FFFC08F1 00000000
FFFC08F5 00000000
FFFC08F9 40049000
                        	flt20:
FFFC08FD 00000000		dw	0x00000000,0x00000000,0x00000000,0x40034000
FFFC0901 00000000
FFFC0905 00000000
FFFC0909 40034000
                        	flt10:
FFFC090D 00000000		dw	0x00000000,0x00000000,0x00000000,0x40024000
FFFC0911 00000000
FFFC0915 00000000
FFFC0919 40024000
                        	
                        	.file "fltToString.asm",1
                        	.file "fltToString.asm",1
                        	STRTMP		equ		$0200
                        	
                        	; -----------------------------------------------------------------------------
                        	;		$fa0 = number to convert (f18)
                        	;		$a1	= width
                        	;		$a2 = precision
                        	;		$a3 = E
                        	;		$t2 = ndx
                        	;		$s9 = exp
                        	; -----------------------------------------------------------------------------
                        	
                        	fltToString:
FFFC091D 006E1300			ldi		$t2,#0				; $t2 = 0
FFFC0921 09095300
FFFC0922 E0090953			fmv		$a0,$f18
FFFC0926 7F800637			and		$t0,$a0,#$7F800000
FFFC092A 00060613
FFFC092E 01267D33
FFFC0932 7F800DB7			ldi		$t1,#$7F800000
FFFC0936 000D8D93
FFFC093A 05BD1263			bne		$t0,$t1,.0001
FFFC093E 00800637			and		$t0,$a0,#$007FFFFF
FFFC0942 FFF60613
FFFC0946 01267D33
FFFC094A 000D0E63			beq		$t0,$x0,.inf
FFFC094E FFFC1637			ldt		$t0,msgNan
FFFC0952 CD860613
FFFC0956 00060633
FFFC095A 00062D03
FFFC095E 21A02023			stt		$t0,STRTMP
FFFC0962 2E000E63			bra		.prt
                        	.inf:
FFFC0966 FFFC1637			ldt		$t0,msgInf
FFFC096A CD460613
FFFC096E 00060633
FFFC0972 00062D03
FFFC0976 21A02023			stt		$t0,STRTMP
FFFC097A 2E000263			bra		.prt
                        	.0001:
FFFC097E 80000637			and		$t0,$a0,#$80000000
FFFC0982 00060613
FFFC0986 01267D33
FFFC098A 000D0E63			beq		$t0,$x0,.pos
FFFC098E 02D06D13			ldi		$t0,#'-'
FFFC0992 21AE0023			stb		$t0,STRTMP[$t2]
FFFC0996 001E0E13			add		$t2,$t2,#1
FFFC099A 80000637			and		$a0,$a0,#$7FFFFFFF
FFFC099E FFF60613
FFFC09A2 01267933
                        	.pos:
FFFC09A6 00091A63			bne		$a0,$x0,.notZero
FFFC09AA 03006D13			ldi		$t0,#'0'
FFFC09AE 21AE0023			stb		$t0,STRTMP[$t2]
FFFC09B2 200E00A3			stb		$x0,STRTMP+1[$t2]
FFFC09B6 2A000463			bra		.prt		
                        	.notZero:
FFFC09BA 00006633			mov		$s9,$x0			; exp = 0.0
                        	;	// Make a small number > 0 so we can get at the digits.
                        	;	if (dbl < 1.0) {
                        	;		while (dbl < 1.0) {
                        	;			dbl *= 1000000.0;
                        	;			exp -= 6;  
                        	;		}
                        	;	}
FFFC09BE FFFC1637			flw		$f3,fltOne
FFFC09C2 CDC60613
FFFC09C6 00060633
FFFC09CA 00062187
FFFC09CE F0090053			fmv		$f0,$a0
FFFC09D2 A0391D53			flt		$t0,$f18,$f3
FFFC09D6 020D0463			beq		$t0,$x0,.0002
FFFC09DA FFFC1637			flw		$f4,fltMillion
FFFC09DE CE460613
FFFC09E2 00060633
FFFC09E6 00062207
                        	.0003:
FFFC09EA A0391D53			flt		$t0,$f18,$f3
FFFC09EE 000D0863			beq		$t0,$x0,.0002
FFFC09F2 10490953			fmul	$f18,$f18,$f4
FFFC09F6 FFA60613			sub		$s9,$s9,#6
FFFC09FA FE0008E3			bra		.0003
                        	.0002:
                        	;	// The following is similar to using log10() and pow() functions.
                        	;	// Now dbl is >= 1.0
                        	;	// Create a number dbl2 on the same order of magnitude as dbl, but
                        	;	// less than dbl.
                        	;	dbl2 = 1.0;
                        	;	dbla = dbl2;
                        	;	if (dbl > dbl2) {	// dbl > 1.0 ?
                        	;		while (dbl2 <= dbl) {
                        	;			dbla = dbl2;
                        	;			dbl2 *= 10.0;	// increase power of 10
                        	;			exp++;
                        	;		}
                        	;		// The above loop goes one too far, we want the last value less
                        	;		// than dbl.
                        	;		dbl2 = dbla;
                        	;		exp--;
                        	;	}
FFFC09FE FFFC1637			flw		$f1,fltOne				; $f1 = dbl2 = 1.0
FFFC0A02 CDC60613
FFFC0A06 00060633
FFFC0A0A 00062087
FFFC0A0E 38008153			fmov	$f2,$f1						; $f2 = dbla = dbl2
FFFC0A12 A1209D53			flt		$t0,$f1,$f18				; if (dbl2 < dbl)
FFFC0A16 020D0A63			beq		$t0,$x0,.0004
FFFC0A1A FFFC1637			flw		$f5,fltTen				; $f5 = 10.0
FFFC0A1E CE060613
FFFC0A22 00060633
FFFC0A26 00062287
                        	.0006:
FFFC0A2A A1208D53			fle		$t0,$f1,$f18				; while ($f1 <= $f18)
FFFC0A2E 000D0A63			beq		$t0,$x0,.0005
FFFC0A32 38008153			fmov	$f2,$f1						; dbla = dbl2
FFFC0A36 105080D3			fmul	$f1,$f1,$f5				; dbl2 *= 10.0
FFFC0A3A 00160613			add		$s9,$s9,#1				; exp++;
FFFC0A3E FE0006E3			bra		.0006
                        	.0005:
FFFC0A42 380100D3			fmov	$f1,$f2						; dbl2 = dbla
FFFC0A46 FFF60613			sub		$s9,$s9,#1				; exp--;
                        	.0004:
                        	;	// For small constants < 1000000 try and spit out a whole number
                        	;    if (exp >= 0 && exp < 6) {
                        	;        digits_before_decpt = exp+1;
                        	;		exp = 0;
                        	;	}
                        	;	else if (exp >= -6)
                        	;		digits_before_decpt = 1;
                        	;	else
                        	;		digits_before_decpt = -1;
FFFC0A4A 00064E63			blt		$s9,$x0,.0007
FFFC0A4E 00606413			ldi		$s5,#6
FFFC0A52 00865A63			bge		$s9,$s5,.0007
FFFC0A56 FFFFE233			mov		$s1,#s0						; s1 = digits before decpt
FFFC0A5A 00120213			add		$s1,$s1,#1
FFFC0A5E 00006613			ldi		$s9,#0						; exp = 0
FFFC0A62 00000C63			bra		.0008
                        	.0007:
FFFC0A66 FF906413			ldi		$s5,#-7
FFFC0A6A 00864663			blt		$s9,$s5,.0009
FFFC0A6E 00106213			ldi		$s1,#1
FFFC0A72 00000463			bra		.0008
                        	.0009:
FFFC0A76 FFF06213			ldi		$s1,#-1
                        	.0008:
                        	;	// Spit out a leading zero before the decimal point for a small number.
                        	;    if (exp < -6) {
                        	;		buf[ndx] = '0';
                        	;		ndx++;
                        	;        buf[ndx] = '.';
                        	;        ndx++;
                        	;    }
FFFC0A7A FFA06413			ldi		$s5,#-6
FFFC0A7E 00865E63			bge		$s9,$s5,.0010
FFFC0A82 03006D13			ldi		$t0,#'0'
FFFC0A86 21AE0023			stb		$t0,STRTMP[$t2]
FFFC0A8A 001E0E13			add		$t2,$t2,#1
FFFC0A8E 02E06D13			ldi		$t0,#'.'
FFFC0A92 21AE0023			stb		$t0,STRTMP[$t2]
FFFC0A96 001E0E13			add		$t2,$t2,#1
                        	.0010:
                        	;	// Now loop processing one digit at a time.
                        	;    for (nn = 0; nn < 30 && precision > 0; nn++) {
                        	;        digit = 0;
                        	;		dbla = dbl;
                        	;		// dbl is on the same order of magnitude as dbl2 so
                        	;		// a repeated subtract can be used to find the digit.
                        	;        while (dbl >= dbl2) {
                        	;            dbl -= dbl2;
                        	;            digit++;
                        	;        }
                        	;        buf[ndx] = digit + '0';
                        	;		// Now go back and perform just a single subtract and
                        	;		// a multiply to find out how much to reduce dbl by.
                        	;		// This should improve the accuracy
                        	;		if (digit > 2)
                        	;			dbl = dbla - dbl2 * digit;
                        	;        ndx++;
                        	;        digits_before_decpt--;
                        	;        if (digits_before_decpt==0) {
                        	;           buf[ndx] = '.';
                        	;           ndx++;
                        	;        }
                        	;        else if (digits_before_decpt < 0)
                        	;            precision--;
                        	;		// Shift the next digit to be tested into position.
                        	;        dbl *= 10.0;
                        	;    }
FFFC0A9A 00006313			ldi		$s3,#0						; s3 = nn = 0
FFFC0A9E 01E06413			ldi		$s5,#30
FFFC0AA2 FFFC1637			flw		$f7,fltTen				; f7 = 10.0
FFFC0AA6 CE060613
FFFC0AAA 00060633
FFFC0AAE 00062387
                        	.0016:
FFFC0AB2 00832D33			slt		$t0,$s3,$s5
FFFC0AB6 060D0863			beq		$t0,$x0,.0011
FFFC0ABA 00006413			ldi		$s5,#0
FFFC0ABE 07445463			bge		$s5,$a2,.0011			; (0 < precision)
FFFC0AC2 00006393			ldi		$s4,#0						; s4 = digit = 0
FFFC0AC6 38090153			fmov	$f2,$f18						; dbla = dbl
                        	.0013:
FFFC0ACA A1208D53			fle		$t0,$f1,$f18						; while (dbl2 <= dbl)
FFFC0ACE 000D0863			beq		$t0,$x0,.0012
FFFC0AD2 08190953			fsub	$f18,$f18,$f1						; dbl -= dbl2
FFFC0AD6 00138393			add		$s4,$s4,#1						; digit++
FFFC0ADA FE0008E3			bra		.0013
                        	.0012:
FFFC0ADE 03038413			add		$s5,$s4,#'0'			; buf[ndx] = digit + '0'
FFFC0AE2 208E0023			stb		$s5,STRTMP[$t2]
FFFC0AE6 00206413			ldi		$s5,#2						; if (2 < digit)
FFFC0AEA 00745863			bge		$s5,$s4,.0014
FFFC0AEE D00382D3			fcvt.s.w	$f5,$s4				; f5 = digit as float
FFFC0AF2 10508353			fmul	$f6,$f1,$f5				; f6 = dbl2 * digit
FFFC0AF6 08610953			fsub	$f18,$f2,$f6				; dbl = dbla - dbl2 * digit
                        	.0014:
FFFC0AFA 001E0E13			add		$t2,$t2,#1				; ndx++
FFFC0AFE FFF20213			sub		$s1,$s1,#1				; digits_before_decpt--;
FFFC0B02 00021A63			bne		$s1,$x0,.0015			; if (digits_before_decpt==0)
FFFC0B06 02E06D13			ldi		$t0,#'.'
FFFC0B0A 21AE0023			stb		$t0,STRTMP[$t2]		; buf[ndx] = '.'
FFFC0B0E 001E0E13			add		$t2,$t2,#1				; ndx++
FFFC0B12 00000663			bra		.0017
                        	.0015:
FFFC0B16 00025463			bge		$s1,$x0,.0017			; else if (digits_before_decpt < 0)
FFFC0B1A FFFA0A13			sub		$a2,$a2,#1				; 	precision--
                        	.0017:
FFFC0B1E 10790953			fmul	$f18,$f18,$f7				; dbl *= 10.0
FFFC0B22 F80008E3			bra		.0016
                        	.0011:
                        	;	// Trim trailing zeros from the number
                        	;    do {
                        	;        ndx--;
                        	;    } while(buf[ndx]=='0');
                        	;    ndx++;
                        	.0018:
FFFC0B26 FFFE0E13			sub		$t2,$t2,#1				; ndx--
FFFC0B2A 200E0D03			ldb		$t0,STRTMP[$t2]
FFFC0B2E 030D4D13			xor		$t0,$t0,#'0'
FFFC0B32 FE0D0AE3			beq		$t0,$x0,.0018
FFFC0B36 001E0E13			add		$t2,$t2,#1				; ndx++
                        	;	// Make sure we have at least one digit after the decimal point.
                        	;	if (buf[ndx]=='.') {
                        	;		ndx++;
                        	;		buf[ndx]='0';
                        	;		ndx++;
                        	;        buf[ndx]='\0';
                        	;	}
FFFC0B3A 200E0D03			ldb		$t0,STRTMP[$t2]
FFFC0B3E 02ED4D13			xor		$t0,$t0,#'.'
FFFC0B42 000D1C63			bne		$t0,$x0,.0019
FFFC0B46 001E0E13			add		$t2,$t2,#1
FFFC0B4A 03006D13			ldi		$t0,#'0'
FFFC0B4E 21AE0023			stb		$t0,STRTMP[$t2]
FFFC0B52 001E0E13			add		$t2,$t2,#1
FFFC0B56 200E0023			stb		$x0,STRTMP[$t2]
                        	.0019:
                        	;	// If the number is times 10^0 don't output the exponent
                        	;   if (exp==0) {
                        	;        buf[ndx]='\0';
                        	;        goto prt;
                        	;    }
FFFC0B5A 00061663			bne		$s9,$x0,.0020
FFFC0B5E 200E0023			stb		$x0,STRTMP[$t2]
FFFC0B62 0E000E63			bra		.prt
                        	.0020:
                        	;	// Spit out +/-E
                        	;    buf[ndx] = E;
                        	;    ndx++;
                        	;    if (exp < 0) {
                        	;        buf[ndx]='-';
                        	;        ndx++;
                        	;        exp = -exp;
                        	;    }
                        	;    else {
                        	;         buf[ndx]='+';
                        	;         ndx++;
                        	;    }
FFFC0B66 04506D13			ldi		$t0,#'E'
FFFC0B6A 21AE0023			stb		$t0,STRTMP[$t2]
FFFC0B6E 001E0E13			add		$t2,$t2,#1
FFFC0B72 00065C63			bge		$s9,$x0,.0021
FFFC0B76 02D06D13			ldi		$t0,#'-'
FFFC0B7A 21AE0023			stb		$t0,STRTMP[$t2]
FFFC0B7E 001E0E13			add		$t2,$t2,#1
FFFC0B82 40C00633			sub		$s9,$x0,$s9			; exp = -exp
FFFC0B86 00000863			bra		.0022
                        	.0021:
FFFC0B8A 02B06D13			ldi		$t0,#'+'
FFFC0B8E 21AE0023			stb		$t0,STRTMP[$t2]
FFFC0B92 001E0E13			add		$t2,$t2,#1
                        	.0022:
                        	;	// now process the exponent
                        	;    digit = 0;
                        	;    while (exp >= 1000) {
                        	;        exp -= 1000;
                        	;        digit++;
                        	;    }
FFFC0B96 00006393			ldi		$s4,#0
FFFC0B9A 3E806D13			ldi		$t0,#1000
                        	.0025:
FFFC0B9E 01A65463			bge		$s9,$t0,.0023
FFFC0BA2 00000863			bra		.0024
                        	.0023:
FFFC0BA6 41A60633			sub		$s9,$s9,$t0
FFFC0BAA 00138393			add		$s4,$s4,#1
FFFC0BAE FE0008E3			bra		.0025
                        	.0024:
                        	;	d1 = digit;
                        	;	if (digit) {
                        	;		buf[ndx] = digit + '0';
                        	;		ndx++;
                        	;	}
FFFC0BB2 0003E4B3			mov		$s6,$s4					; s6 = d1 = s4 = digit
FFFC0BB6 00039863			bne		$s4,$x0,.0026
FFFC0BBA 03038D13			add		$t0,$s4,#'0'
FFFC0BBE 21AE0023			stb		$t0,STRTMP[$t2]
FFFC0BC2 001E0E13			add		$t2,$t2,#1
                        	.0026:
                        	;	digit = 0;
                        	;    while (exp >= 100) {
                        	;        exp -= 100;
                        	;        digit++;
                        	;    }
FFFC0BC6 00006393			ldi		$s4,#0
FFFC0BCA 06406D13			ldi		$t0,#100
                        	.0027:
FFFC0BCE 01A65463			bge		$s9,$t0,.0028
FFFC0BD2 00000863			bra		.0029
                        	.0028:
FFFC0BD6 41A60633			sub		$s9,$s9,$t0
FFFC0BDA 00138393			add		$s4,$s4,#1
FFFC0BDE FE0008E3			bra		.0027
                        	.0029:	
                        	;	d2 = digit;
                        	;	if (digit==0 && d1==0)
                        	;		;
                        	;	else {
                        	;		buf[ndx] = digit + '0';
                        	;		ndx++;
                        	;	}
FFFC0BE2 0003E533			mov		$s7,$s4				; $s7 = d2
FFFC0BE6 00049463			bne		$s6,$x0,.0030
FFFC0BEA 00038863			beq		$s4,$x0,.0031
                        	.0030:
FFFC0BEE 03038D13			add		$t0,$s4,#'0'
FFFC0BF2 21AE0023			stb		$t0,STRTMP[$t2]
FFFC0BF6 001E0E13			add		$t2,$t2,#1
                        	.0031:
                        	;	digit = 0;
                        	;    while (exp >= 10) {
                        	;        exp -= 10;
                        	;        digit++;
                        	;    }
FFFC0BFA 00006393			ldi		$s4,#0
FFFC0BFE 00A06D13			ldi		$t0,#10
                        	.0032:
FFFC0C02 01A65463			bge		$s9,$t0,.0034
FFFC0C06 00000863			bra		.0035
                        	.0034:
FFFC0C0A 41A60633			sub		$s9,$s9,$t0
FFFC0C0E 00138393			add		$s4,$s4,#1
FFFC0C12 FE0008E3			bra		.0032
                        	.0035:	
                        	;	d3 = digit;
                        	;	if (digit==0 && d1==0 && d2==0)
                        	;		;
                        	;	else {
                        	;		buf[ndx] = digit + '0';
                        	;		ndx++;
                        	;	}
FFFC0C16 0003E5B3			mov		$s8,$s4
FFFC0C1A 00039663			bne		$s4,$x0,.0036
FFFC0C1E 00049463			bne		$s6,$x0,.0036
FFFC0C22 00050863			beq		$s7,$x0,.0037
                        	.0036:
FFFC0C26 03038D13			add		$t0,$s4,#'0'
FFFC0C2A 21AE0023			stb		$t0,STRTMP[$t2]
FFFC0C2E 001E0E13			add		$t2,$t2,#1
                        	.0037:
                        	;	digit = 0;
                        	;    while (exp >= 1) {
                        	;        exp -= 1;
                        	;        digit++;
                        	;    }
FFFC0C32 00006393			ldi		$s4,#0
FFFC0C36 00106D13			ldi		$t0,#1
                        	.0038:
FFFC0C3A 01A65463			bge		$s9,$t0,.0040
FFFC0C3E 00000863			bra		.0039
                        	.0040:
FFFC0C42 41A60633			sub		$s9,$s9,$t0
FFFC0C46 00138393			add		$s4,$s4,#1
FFFC0C4A FE0008E3			bra		.0038
                        	.0039:	
                        	;    buf[ndx] = digit + '0';
                        	;    ndx++;
                        	;    buf[ndx] = '\0';
FFFC0C4E 03038D13			add		$t0,$s4,#'0'
FFFC0C52 21AE0023			sb		$t0,STRTMP[$t2]
FFFC0C56 001E0E13			add		$t2,$t2,#1
FFFC0C5A 200E0023			sb		$x0,STRTMP[$t2]
                        	;	// Now pad the number on the left or right as requested.
                        	.prt:
                        	;    // pad left
                        	;    if (width > 0) {
                        	;        if (ndx < width) {
                        	;            for (nn = 39; nn >= width-ndx; nn--)
                        	;                buf[nn] = buf[nn-(width-ndx)];
                        	;            for (; nn >= 0; nn--)
                        	;                buf[nn] = ' ';
                        	;        }
                        	;    }
FFFC0C5E 0409C663			blt		$a1,$x0,.0041
FFFC0C62 04098463			beq		$a1,$x0,.0041
FFFC0C66 013E4463			blt		$t2,$a1,.0042
FFFC0C6A 04000063			bra		.0041
                        	.0042:
FFFC0C6E 02706313			ldi		$s3,#39					; s3 = nn
FFFC0C72 41C98D33			sub		$t0,$a1,$t2			; width-ndx
                        	.0045:
FFFC0C76 01A35463			bge		$s3,$t0,.0043
FFFC0C7A 00000C63			bra		.0044
                        	.0043:
FFFC0C7E 41A304B3			sub		$s6,$s3,$t0			; nn-(width-ndx)
FFFC0C82 20030D83			ldb		$t1,STRTMP[$s3]
FFFC0C86 21B48023			stb		$t1,STRTMP[$s6]
FFFC0C8A FFF30313			sub		$s3,$s3,#1
FFFC0C8E FE0004E3			bra		.0045
                        	.0044:
FFFC0C92 02006D13			ldi		$t0,#' '
                        	.0048:
FFFC0C96 00035463			bge		$s3,$x0,.0046
FFFC0C9A 00000863			bra		.0047
                        	.0046:
FFFC0C9E 21A30023			stb		$t0,STRTMP[$s3]
FFFC0CA2 FFF30313			sub		$s3,$s3,#1
FFFC0CA6 FE0008E3			bra		.0048
                        	.0047:
                        	.0041:
                        	;    // pad right
                        	;    if (width < 0) {
                        	;        width = -width;
                        	;        while (ndx < width) {
                        	;            buf[ndx]=' ';
                        	;            ndx++;
                        	;        }
                        	;        buf[ndx]='\0';
                        	;    }
                        	;    return (ndx);
FFFC0CAA 0209D063			bge		$a1,$x0,.0050
FFFC0CAE 413009B3			sub		$a1,$x0,$a1
FFFC0CB2 02006D13			ldi		$t0,#' '
                        	.0052:
FFFC0CB6 013E5863			bge		$t2,$a1,.0051
FFFC0CBA 21AE0023			stb		$t0,STRTMP[$t2]
FFFC0CBE 001E0E13			add		$t2,$t2,#1
FFFC0CC2 FE000AE3			bra		.0052
                        	.0051:
FFFC0CC6 200E0023			stb		$x0,STRTMP[$t2]
                        	.0050:
FFFC0CCA 000E6833			mov		$v0,$t2
FFFC0CCE 00008067			ret
                        	
FFFC0CD2 6E490000			align	
                        	
                        	msgInf:
FFFC0CD4 00666E49			db	"Inf",0
                        	msgNan:
FFFC0CD8 006E614E			db	"Nan",0
                        	fltOne:
FFFC0CDC 3F800000			dw		$3F800000					; 1.0
                        	fltTen:
FFFC0CE0 41200000			dw		$41200000					; 10.0
                        	fltMillion:
FFFC0CE4 49742400			dw		$49742400					; 1,000,000
                        	
                        	.file "cs01rom.asm",1
                        	.file "cs01rom.asm",1
                        	.file "cs01Mem.asm",1
                        	.file "cs01Mem.asm",1
                        	NPAGES	equ		$4300
                        	PAM			equ		$4800
                        	
                        	.file "cs01Mem.asm",5
                        			code	18 bits
                        			align	4                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	
                        	MMUInit:
FFFC0CE8 0F606D13			ldi		$t0,#246				; set number of available pages (10 pages already allocated)
FFFC0CEC 00004637			sw		$t0,NPAGES			
FFFC0CF0 30060613
FFFC0CF4 00060633
FFFC0CF8 01A62023
                        			; Setup PAM
FFFC0CFC 1FF06D13			ldi		$t0,#$1FF				; permanently allocate pages for OS data
FFFC0D00 00005637			sw		$t0,PAM
FFFC0D04 80060613
FFFC0D08 00060633
FFFC0D0C 01A62023
FFFC0D10 00005637			sw		$x0,PAM+4
FFFC0D14 80460613
FFFC0D18 00060633
FFFC0D1C 00062023
FFFC0D20 00005637			sw		$x0,PAM+8
FFFC0D24 80860613
FFFC0D28 00060633
FFFC0D2C 00062023
FFFC0D30 00005637			sw		$x0,PAM+12
FFFC0D34 80C60613
FFFC0D38 00060633
FFFC0D3C 00062023
FFFC0D40 00005637			sw		$x0,PAM+16
FFFC0D44 81060613
FFFC0D48 00060633
FFFC0D4C 00062023
FFFC0D50 00005637			sw		$x0,PAM+20
FFFC0D54 81460613
FFFC0D58 00060633
FFFC0D5C 00062023
FFFC0D60 00005637			sw		$x0,PAM+24
FFFC0D64 81860613
FFFC0D68 00060633
FFFC0D6C 00062023
FFFC0D70 80000D37			ldi		$t0,#$80000000	; last page is system stack
FFFC0D74 000D0D13
FFFC0D78 00005637			sw		$t0,PAM+28
FFFC0D7C 81C60613
FFFC0D80 00060633
FFFC0D84 01A62023
FFFC0D88 00006D13			ldi		$t0,#$00
FFFC0D8C 00006D93			ldi		$t1,#$000				; regno
FFFC0D90 00001E37			ldi		$t2,#4096				; number of registers to update
FFFC0D94 000E0E13
FFFC0D98 00A06E93			ldi		$t3,#10					; number of pages pre-allocated
                        	.0001:
FFFC0D9C 03BD000D			mvmap	$x0,$t0,$t1
FFFC0DA0 001D0D13			add		$t0,$t0,#$01
FFFC0DA4 001D8D93			add		$t1,$t1,#$01		; increment page number
FFFC0DA8 01DDE463			bltu	$t1,$t3,.0003
FFFC0DAC 00006D33			mov		$t0,$x0					; mark pages after 9 unallocated
                        	.0003:
FFFC0DB0 FFFE0E13			sub		$t2,$t2,#1
FFFC0DB4 FE0E14E3			bne		$t2,$x0,.0001
FFFC0DB8 0FF06D93			ldi		$t1,#$0FF				; allocate last page for stack
FFFC0DBC 0FF06D13			ldi		$t0,#$FF
FFFC0DC0 03BD000D			mvmap	$x0,$t0,$t1
                        			; Now setup segment registers
FFFC0DC4 00006D13			ldi		$t0,#$0
FFFC0DC8 00706D93			ldi		$t1,#$07				; t1 = value to load RWX=111, base = 0
                        	.0002:
FFFC0DCC 01AD800D			mvseg	$x0,$t1,$t0			; move to the segment register identifed by t0
FFFC0DD0 001D0D13			add		$t0,$t0,#1			; pick next segment register
FFFC0DD4 010D2E13			slt		$t2,$t0,#16			; 16 segment regs
FFFC0DD8 FE0E1AE3			bne		$t2,$x0,.0002
FFFC0DDC 00008067			ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Allocate a single page of memory. Available memory is indicated by a bitmmap
                        	; called the PAM for page allocation map.
                        	; There's only eight words to check so an unrolled loop works here.
                        	;
                        	; Modifies:
                        	;		t0,t1,t2
                        	; Returns:
                        	;		v0 = page allocated
                        	;------------------------------------------------------------------------------
                        	;
                        	AllocPage:
FFFC0DE0 FFC70713		sub		$sp,$sp,#4
FFFC0DE4 00172023		sw		$ra,[$sp]
FFFC0DE8 00005637		lw		$t0,PAM
FFFC0DEC 80060613
FFFC0DF0 00060633
FFFC0DF4 00062D03
FFFC0DF8 00000DB7		ldi		$t1,#$FFFFFFFF
FFFC0DFC FFFD8D93
FFFC0E00 01BD0E63		beq		$t0,$t1,.chkPam4
FFFC0E04 178000EF		call	BitIndex
FFFC0E08 00005637		sw		$t0,PAM
FFFC0E0C 80060613
FFFC0E10 00060633
FFFC0E14 01A62023
FFFC0E18 14000C63		bra		.0001
                        	.chkPam4:
FFFC0E1C 00005637		lw		$t0,PAM+4
FFFC0E20 80460613
FFFC0E24 00060633
FFFC0E28 00062D03
FFFC0E2C 03BD0063		beq		$t0,$t1,.chkPam8
FFFC0E30 14C000EF		call	BitIndex
FFFC0E34 00005637		sw		$t0,PAM+4
FFFC0E38 80460613
FFFC0E3C 00060633
FFFC0E40 01A62023
FFFC0E44 02080813		add		$v0,$v0,#32
FFFC0E48 12000463		bra		.0001
                        	.chkPam8:
FFFC0E4C 00005637		lw		$t0,PAM+8
FFFC0E50 80860613
FFFC0E54 00060633
FFFC0E58 00062D03
FFFC0E5C 03BD0063		beq		$t0,$t1,.chkPam12
FFFC0E60 11C000EF		call	BitIndex
FFFC0E64 00005637		sw		$t0,PAM+8
FFFC0E68 80860613
FFFC0E6C 00060633
FFFC0E70 01A62023
FFFC0E74 04080813		add		$v0,$v0,#64
FFFC0E78 0E000C63		bra		.0001
                        	.chkPam12:
FFFC0E7C 00005637		lw		$t0,PAM+12
FFFC0E80 80C60613
FFFC0E84 00060633
FFFC0E88 00062D03
FFFC0E8C 03BD0063		beq		$t0,$t1,.chkPam16
FFFC0E90 0EC000EF		call	BitIndex
FFFC0E94 00005637		sw		$t0,PAM+12
FFFC0E98 80C60613
FFFC0E9C 00060633
FFFC0EA0 01A62023
FFFC0EA4 06080813		add		$v0,$v0,#96
FFFC0EA8 0C000463		bra		.0001
                        	.chkPam16:
FFFC0EAC 00005637		lw		$t0,PAM+16
FFFC0EB0 81060613
FFFC0EB4 00060633
FFFC0EB8 00062D03
FFFC0EBC 03BD0063		beq		$t0,$t1,.chkPam20
FFFC0EC0 0BC000EF		call	BitIndex
FFFC0EC4 00005637		sw		$t0,PAM+16
FFFC0EC8 81060613
FFFC0ECC 00060633
FFFC0ED0 01A62023
FFFC0ED4 08080813		add		$v0,$v0,#128
FFFC0ED8 08000C63		bra		.0001
                        	.chkPam20:
FFFC0EDC 00005637		lw		$t0,PAM+20
FFFC0EE0 81460613
FFFC0EE4 00060633
FFFC0EE8 00062D03
FFFC0EEC 03BD0063		beq		$t0,$t1,.chkPam24
FFFC0EF0 08C000EF		call	BitIndex
FFFC0EF4 00005637		sw		$t0,PAM+20
FFFC0EF8 81460613
FFFC0EFC 00060633
FFFC0F00 01A62023
FFFC0F04 0A080813		add		$v0,$v0,#160
FFFC0F08 06000463		bra		.0001
                        	.chkPam24:
FFFC0F0C 00005637		lw		$t0,PAM+24
FFFC0F10 81860613
FFFC0F14 00060633
FFFC0F18 00062D03
FFFC0F1C 03BD0063		beq		$t0,$t1,.chkPam28
FFFC0F20 05C000EF		call	BitIndex
FFFC0F24 00005637		sw		$t0,PAM+24
FFFC0F28 81860613
FFFC0F2C 00060633
FFFC0F30 01A62023
FFFC0F34 0C080813		add		$v0,$v0,#192
FFFC0F38 02000C63		bra		.0001
                        	.chkPam28:
FFFC0F3C 00005637		lw		$t0,PAM+28
FFFC0F40 81C60613
FFFC0F44 00060633
FFFC0F48 00062D03
FFFC0F4C 03BD0063		beq		$t0,$t1,.chkPamDone
FFFC0F50 02C000EF		call	BitIndex
FFFC0F54 00005637		sw		$t0,PAM+28
FFFC0F58 81C60613
FFFC0F5C 00060633
FFFC0F60 01A62023
FFFC0F64 0E080813		add		$v0,$v0,#224
FFFC0F68 00000463		bra		.0001
                        	.chkPamDone:
FFFC0F6C 00006813		ldi		$v0,#0						; no memory available
                        	.0001:
FFFC0F70 00072083		lw		$ra,[$sp]
FFFC0F74 00470713		add		$sp,$sp,#4
FFFC0F78 00008067		ret
                        	
                        	; Returns:
                        	;		v0 = bit index of allocated page
                        	;
                        	BitIndex:
FFFC0F7C 00006813		ldi		$v0,#0
                        	.0001:
FFFC0F80 001D7E13		and		$t2,$t0,#1
FFFC0F84 000E0E63		beq		$t2,$x0,.foundFree
FFFC0F88 001D5D13		srl		$t0,$t0,#1
FFFC0F8C 80000637		or		$t0,$t0,#$80000000	; do a rotate, we know bit = 1
FFFC0F90 00060613
FFFC0F94 01A66D33
FFFC0F98 00180813		add		$v0,$v0,#1
FFFC0F9C FE0002E3		bra		.0001
                        	.foundFree:
FFFC0FA0 001D6D13		or		$t0,$t0,#1					; mark page allocated
FFFC0FA4 00086DB3		mov		$t1,$v0
FFFC0FA8 000D8A63		beq		$t1,$x0,.0003
                        	.0004:
FFFC0FAC 001D1D13		sll		$t0,$t0,#1					; do a rotate
FFFC0FB0 001D6D13		or		$t0,$t0,#1					; we know bit = 1
FFFC0FB4 FFFD8D93		sub		$t1,$t1,#1
FFFC0FB8 FE0D9AE3		bne		$t1,$x0,.0004
                        	.0003:
FFFC0FBC 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Parameters:
                        	;		a0 = page number to free
                        	; Modifies:
                        	;		v0,v1,t0
                        	;------------------------------------------------------------------------------
                        	
                        	FreePage:
FFFC0FC0 0FF06813		ldi		$v0,#255						; last page is permanently allocated to system stack
FFFC0FC4 05097263		bgeu	$a0,$v0,.xit
FFFC0FC8 00906813		ldi		$v0,#9
FFFC0FCC 03096E63		bltu	$a0,$v0,.xit				; first 9 pages (18kB) allocated permanently to system
FFFC0FD0 00595813		srl		$v0,$a0,#5					; v0 = word
FFFC0FD4 01F97893		and		$v1,$a0,#31					; v1 = bit no
FFFC0FD8 00106D13		ldi		$t0,#1							; make a bitmask
FFFC0FDC 011D1D13		sll		$t0,$t0,$v1
FFFC0FE0 FFFD4D13		xor		$t0,$t0,#-1					; invert mask
FFFC0FE4 00005637		lw		$v1,PAM[$v0]
FFFC0FE8 80060613
FFFC0FEC 01060633
FFFC0FF0 00062883
FFFC0FF4 01A8F8B3		and		$v1,$v1,$t0					; clear bit
FFFC0FF8 00005637		sw		$v1,PAM[$v0]				; save PAM word back
FFFC0FFC 80060613
FFFC1000 01060633
FFFC1004 01162023
                        	.xit:
FFFC1008 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Find a run of buckets available for mapping virtual to physical addresses.
                        	;
                        	; Parameters:
                        	;		a0 = pid
                        	;		a1 = number of pages required.
                        	; Modifies:
                        	;		t1,t2,t3,t5
                        	; Returns:
                        	;		v0 = starting bucket number (includes ASID), -1 if no run found
                        	;------------------------------------------------------------------------------
                        	
                        	FindRun:
FFFC100C 00F97E93		and			$t3,$a0,#$0F			; t3 = pid
FFFC1010 008E9E93		sll			$t3,$t3,#8				; shift into usable position
FFFC1014 00006D93		ldi			$t1,#0						; t1 = count of consecutive empty buckets
FFFC1018 000EEE33		mov			$t2,$t3						; t2 = map entry number
FFFC101C 0FF06F93		ldi			$t5,#255					; max number of pages - 1
FFFC1020 01DFEFB3		or			$t5,$t5,$t3				; t5 = max in ASID
                        	.0001:
FFFC1024 03C0080D		mvmap		$v0,$x0,$t2				; get map entry into v0
FFFC1028 00080A63		beq			$v0,$x0,.empty0		; is it empty?
FFFC102C 001E0E13		add			$t2,$t2,#1
FFFC1030 FFFE6AE3		bltu		$t2,$t5,.0001
FFFC1034 FFF06813		ldi			$v0,#-1						; got here so no run was found
FFFC1038 00008067		ret
                        	.empty0:
FFFC103C 000E6EB3		mov			$t3,$t2						; save first empty bucket
                        	.empty1:
FFFC1040 001D8D93		add			$t1,$t1,#1
FFFC1044 013DFC63		bgeu		$t1,$a1,.foundEnough
FFFC1048 001E0E13		add			$t2,$t2,#1				; next bucket
FFFC104C 03C0080D		mvmap		$v0,$x0,$t2				; get map entry
FFFC1050 FE0808E3		beq			$v0,$x0,.empty1
FFFC1054 00006DB3		mov			$t1,$x0						; reset counter
FFFC1058 FC0006E3		bra			.0001							; go back and find another run
                        	.foundEnough:
FFFC105C 000EE833		mov			$v0,$t3						; v0 = start of run
FFFC1060 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Parameters:
                        	;		a0 = pid
                        	;		a1 = amount of memory to allocate
                        	; Modifies:
                        	;		t0
                        	; Returns:
                        	;		v1 = pointer to allocated memory in virtual address space.
                        	;		v0 = E_Ok for success, E_NotAlloc otherwise
                        	;------------------------------------------------------------------------------
                        	;
                        	Alloc:
FFFC1064 FF070713		sub			$sp,$sp,#16
FFFC1068 00172023		sw			$ra,[$sp]
FFFC106C 00472223		sw			$s1,4[$sp]				; these regs must be saved
FFFC1070 00572423		sw			$s2,8[$sp]
FFFC1074 00672623		sw			$s3,12[$sp]
                        		; First check if there are enough pages available in the system.
FFFC1078 7FF98813		add			$v0,$a1,#2047			; v0 = round memory request
FFFC107C 00B85813		srl			$v0,$v0,#11				; v0 = convert to pages required
FFFC1080 00004637		lw			$t0,NPAGES				; check number of pages available
FFFC1084 30060613
FFFC1088 00060633
FFFC108C 00062D03
FFFC1090 010D7663		bleu		$v0,$t0,.enough
                        	.noRun2:
FFFC1094 00006893		ldi			$v1,#0						; not enough, return null
FFFC1098 06000E63		bra			.noRun
                        	.enough:
FFFC109C 00096233		mov			$s1,$a0
FFFC10A0 04506913		ldi			$a0,#'E'
FFFC10A4 914FF0EF		call		Putch
FFFC10A8 00026933		mov			$a0,$s1
                        		; There are enough pages, but is there a run long enough in map space?
FFFC10AC 000862B3		mov			$s2,$v0				; save required # pages
FFFC10B0 000869B3		mov			$a1,$v0
FFFC10B4 F59FF0EF		call		FindRun						; find a run of available slots
FFFC10B8 FC084EE3		blt			$v0,$x0,.noRun2
                        		; Now there are enough pages, and a run available, so allocate
FFFC10BC 04606913		ldi			$a0,#'F'
FFFC10C0 8F8FF0EF		call		Putch
FFFC10C4 00086233		mov			$s1,$v0						; s1 = start of run
FFFC10C8 00004637		lw			$s3,NPAGES				; decrease number of pages available in system
FFFC10CC 30060613
FFFC10D0 00060633
FFFC10D4 00062303
FFFC10D8 40530333		sub			$s3,$s3,$s2
FFFC10DC 00004637		sw			$s3,NPAGES
FFFC10E0 30060613
FFFC10E4 00060633
FFFC10E8 00662023
FFFC10EC 00086333		mov			$s3,$v0						; s3 = start of run
                        	.0001:
FFFC10F0 0000180D		palloc	$v0								; allocate a page (cheat and use hardware)
                        		;call		AllocPage
FFFC10F4 02080063		beq			$v0,$x0,.noRun
FFFC10F8 0268000D		mvmap		$x0,$v0,$s3				; map the page
FFFC10FC 00130313		add			$s3,$s3,#1				; next bucket
FFFC1100 FFF28293		sub			$s2,$s2,#1
FFFC1104 FE0296E3		bne			$s2,$x0,.0001
FFFC1108 00B21893		sll			$v1,$s1,#11				; v0 = virtual address of allocated mem.
FFFC110C 00006813		ldi			$v0,#E_Ok
FFFC1110 00000463		bra			.xit
                        	.noRun:
FFFC1114 00906813		ldi			$v0,#E_NotAlloc
                        	.xit
FFFC1118 00072083		lw			$ra,[$sp]					; restore saved regs
FFFC111C 00472203		lw			s1,4[$sp]
FFFC1120 00872283		lw			s2,8[$sp]
FFFC1124 00C72303		lw			s3,12[$sp]
FFFC1128 01070713		add			$sp,$sp,#16
FFFC112C 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Allocate the stack page for a task. The stack is located at the highest
                        	; virtual address ($7F800).
                        	;
                        	; Parameters:
                        	;		a0 = pid to allocate for
                        	;	Returns:
                        	;		v0 = physical address, 0 if unsuccessful
                        	;		v1 = virtual address, not valid unless successful
                        	;------------------------------------------------------------------------------
                        	;
                        	AllocStack:
                        		; need save ra here if calling AllocPage
FFFC1130 00891893		sll			$v1,$a0,#8			; 
FFFC1134 0FF8E893		or			$v1,$v1,#255		; last page of memory is for stack
FFFC1138 0310080D		mvmap		$v0,$x0,$v1			; check if stack already allocated
FFFC113C 00081863		bne			$v0,$x0,.0001
FFFC1140 0000180D		palloc	$v0							; allocate a page
                        		;call		AllocPage
FFFC1144 00080A63		beq			$v0,$x0,.xit		; success?
FFFC1148 0318000D		mvmap		$x0,$v0,$v1
                        	.0001:
FFFC114C 0FF8F893		and			$v1,$v1,#255
FFFC1150 00B81813		sll			$v0,$v0,#11			; convert pages to addresses
FFFC1154 00B89893		sll			$v1,$v1,#11
                        	.xit:
FFFC1158 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; This routine will de-allocate all the pages associated with a task including
                        	; the stack.
                        	;
                        	; Parameters:
                        	;		a0 = pid to free memory for
                        	;	Modifies:
                        	;		a0,t0,t1,t3,t4
                        	; Returns:
                        	;		none
                        	;------------------------------------------------------------------------------
                        	
                        	FreeAll:
                        		; need save ra if calling FreePage
FFFC115C 00006E93		ldi			$t3,#0
FFFC1160 00891F13		sll			$t4,$a0,#8
                        	.nxt:
FFFC1164 100EAD93		slt			$t1,$t3,#256		; number of buckets to check
FFFC1168 040D8A63		beq			$t1,$x0,.0001
FFFC116C 00001637		and			$t4,$t4,#$F00
FFFC1170 F0060613
FFFC1174 01E67F33
FFFC1178 01DF6F33		or			$t4,$t4,$t3			; combine pid and bucket number
FFFC117C 00006D13		ldi			$t0,#0					; new page number to set (indicates free)
FFFC1180 03ED0D0D		mvmap		$t0,$t0,$t4			; get page mapping and set to zero
FFFC1184 001E8E93		add			$t3,$t3,#1			; advance to next bucket
FFFC1188 0FFD7D13		and			$t0,$t0,#255		; pages are 1-255
FFFC118C FC0D0CE3		beq			$t0,$x0,.nxt		; 0 = no map in this bucket
FFFC1190 020D100D		pfree		$t0							; free the page
                        		;mov			$a0,$t0
                        		;call		FreePage
FFFC1194 00004637		lw			$t0,NPAGES			; update the number of available pages
FFFC1198 30060613
FFFC119C 00060633
FFFC11A0 00062D03
FFFC11A4 001D0D13		add			$t0,$t0,#1
FFFC11A8 00004637		sw			$t0,NPAGES
FFFC11AC 30060613
FFFC11B0 00060633
FFFC11B4 01A62023
FFFC11B8 FA0006E3		bra			.nxt
                        	.0001:
FFFC11BC 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Convert a virtual address to a physical one
                        	;
                        	; Parameters:
                        	;		a0 = virtual address to convert
                        	; Modifies:
                        	;		t0
                        	; Returns:
                        	;		v0 = physcial address
                        	;------------------------------------------------------------------------------
                        	
                        	VirtToPhys:
FFFC11C0 30001873		csrrw	$v0,#$300,$x0				; get tid
FFFC11C4 01685813		srl		$v0,$v0,#22					; extract
FFFC11C8 00F87813		and		$v0,$v0,#15
FFFC11CC 00881813		sll		$v0,$v0,#8
FFFC11D0 00B95D13		srl		$t0,$a0,#11					; convert virt to page
FFFC11D4 0FFD7D13		and		$t0,$t0,#255
FFFC11D8 01A86833		or		$v0,$v0,$t0					; and in tid
FFFC11DC 0300080D		mvmap	$v0,$x0,$v0					; get the translation
FFFC11E0 00B81813		sll		$v0,$v0,#11					; convert page to address
FFFC11E4 7FF97D13		and		$t0,$a0,#$7FF				; insert LSB's
FFFC11E8 01A86833		or		$v0,$v0,$t0
FFFC11EC 00008067		ret
                        	
                        	.file "cs01rom.asm",1
                        	.file "cs01rom.asm",1
                        	.file "../fmtk/task.asm",1
                        	.file "../fmtk/task.asm",1
                        	
                        	QNDX		EQU		$4304
                        	HRDY0		EQU		$4308
                        	HRDY1		EQU		$4309
                        	HRDY2		EQU		$430A
                        	HRDY3		EQU		$430B
                        	TRDY0		EQU		$430C
                        	TRDY1		EQU		$430D
                        	TRDY2		EQU		$430E
                        	TRDY3		EQU		$430F
                        	PIDMAP	EQU		$4310
                        	missed_ticks	equ		$4320
                        	TimeoutList		equ		$4328
                        	Tick		EQU		$4330
                        	RDYQ0		EQU		$4400
                        	RDYQ1		EQU		$4500
                        	RDYQ2		EQU		$4600
                        	RDYQ3		EQU		$4700
                        	
                        		align	2                        	
                        	OSCallTbl:
FFFC11F0 1D0000FE		dh		FMTK_Initialize					; 0
FFFC11F2 1DBC1D00		dh		FMTK_StartTask					; 1
FFFC11F4 1DC81DBC		dh		FMTK_ExitTask
FFFC11F6 01021DC8		dh		FMTK_KillTask
FFFC11F8 20A40102		dh		FMTK_SetTaskPriority
FFFC11FA 010420A4		dh		FMTK_Sleep							; 5
FFFC11FC 01050104		dh		FMTK_AllocMbx
FFFC11FE 01060105		dh		FMTK_FreeMbx
FFFC1200 01070106		dh		FMTK_PostMsg
FFFC1202 01080107		dh		FMTK_SendMsg
FFFC1204 01090108		dh		FMTK_WaitMsg						; 10
FFFC1206 010A0109		dh		FMTK_PeekMsg
FFFC1208 1A3C010A		dh		FMTK_StartApp
FFFC120A 20D81A3C		dh		FMTK_Reschedule					; 13
FFFC120C 000020D8		dh		DumpReadyQueue
                        	
                        	qToChk:
FFFC120E 01000000		db	0,0,0,1,0,0,2,1
FFFC1212 01020000
FFFC1216 01030000		db	0,0,3,1,0,0,2,1
FFFC121A 01020000
FFFC121E 01000000		db	0,0,0,1,0,0,2,1
FFFC1222 01020000
FFFC1226 01030000		db	0,0,3,1,0,0,2,1
FFFC122A 01020000
                        	
FFFC122E 46370000		align	
                        	
                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	
                        	FMTKInit:
FFFC1230 00004637		sw		$x0,QNDX
FFFC1234 30460613
FFFC1238 00060633
FFFC123C 00062023
FFFC1240 00004637		sw		$x0,HRDY0				; reset head and tail indexes
FFFC1244 30860613
FFFC1248 00060633
FFFC124C 00062023
FFFC1250 00004637		sw		$x0,TRDY0
FFFC1254 30C60613
FFFC1258 00060633
FFFC125C 00062023
FFFC1260 00004637		sw		$x0,PIDMAP
FFFC1264 31060613
FFFC1268 00060633
FFFC126C 00062023
FFFC1270 00004637		sw		$x0,missed_ticks
FFFC1274 32060613
FFFC1278 00060633
FFFC127C 00062023
FFFC1280 FFF06D13		ldi		$t0,#-1
FFFC1284 00004637		sw		$t0,TimeoutList
FFFC1288 32860613
FFFC128C 00060633
FFFC1290 01A62023
FFFC1294 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Get the task id for the currently running task.
                        	;
                        	; Returns:
                        	;		v0 = task id
                        	;------------------------------------------------------------------------------
                        	
                        	GetCurrentTid:
FFFC1298 30001873		csrrw	$v0,#$300,$x0				; get current pid
FFFC129C 01685813		srl		$v0,$v0,#22					; extract field
FFFC12A0 00F87813		and		$v0,$v0,#15					; mask off extra bits
FFFC12A4 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Insert task into ready queue
                        	;
                        	; Parameters:
                        	;		a0 = tid to insert
                        	; Modifies:
                        	;		v1,t0,t1
                        	; Returns:
                        	;		v0 = 1 for success, 0 if failed
                        	;------------------------------------------------------------------------------
                        	
                        	InsertTask:
FFFC12A8 FFC70713		sub		$sp,$sp,#4
FFFC12AC 00172023		sw		$ra,[$sp]
FFFC12B0 00F06893		ldi		$v1,#MAX_TID
FFFC12B4 0728EE63		bgtu	$a0,$v1,.badTid
FFFC12B8 00A91D13		sll		$t0,$a0,#10					; compute TCB address
FFFC12BC 288D4883		lbu		$v1,TCBStatus[$t0]	; mark task as ready
FFFC12C0 0018E893		or		$v1,$v1,#TS_READY
FFFC12C4 291D0423		sb		$v1,TCBStatus[$t0]
FFFC12C8 289D4883		lbu		$v1,TCBPriority[$t0]
FFFC12CC 0038F893		and		$v1,$v1,#3
FFFC12D0 00004637		lbu		$t0,HRDY0[$v1]
FFFC12D4 30860613
FFFC12D8 01160633
FFFC12DC 00064D03
FFFC12E0 00004637		lbu		$t1,TRDY0[$v1]			; increment tail pointer
FFFC12E4 30C60613
FFFC12E8 01160633
FFFC12EC 00064D83
FFFC12F0 001D8D93		add		$t1,$t1,#1
FFFC12F4 05BD0263		beq		$t0,$t1,.qfull			; test queue full?
FFFC12F8 00004637		sb		$t1,TRDY0[$v1]			; store it back
FFFC12FC 30C60613
FFFC1300 01160633
FFFC1304 01B60023
FFFC1308 00889E93		sll		$t3,$v1,#8					; compute t3 = readyq index
FFFC130C 00004637		add		$t3,$t3,#RDYQ0
FFFC1310 40060613
FFFC1314 01D60EB3
FFFC1318 FFFD8D93		sub		$t1,$t1,#1					; back for store
FFFC131C 0FFDFD93		and		$t1,$t1,#255
FFFC1320 01DD8E33		add		$t2,$t1,$t3
FFFC1324 012E0023		sb		$a0,[$t2]						; store tid of task
FFFC1328 00006813		ldi		$v0,#E_Ok
FFFC132C 00000863		bra		.xit
                        	.badTid:
FFFC1330 00106813		ldi		$v0,#E_Arg
FFFC1334 00000463		bra		.xit
                        	.qfull:
FFFC1338 00506813		ldi		$v0,#E_QueFull
                        	.xit:
FFFC133C 00072083		lw		$ra,[$sp]
FFFC1340 00470713		add		$sp,$sp,#4
FFFC1344 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Select the next task to run. The ready queues are searched in a circular
                        	; fashion beginning with the queue identified indirectly by QNDX. There are
                        	; four ready queues to hold tasks of four different priorities. This routine
                        	; dequeues a task from the ready list, then adds it back if it is still ready.
                        	; This takes care of a lot of scenarios. Such as the task no longer being
                        	; ready, or the priority changing.
                        	;
                        	; Parameters:
                        	;		none
                        	; Modifies:
                        	;		v1, t0, t1, t2, t3, t4
                        	;	Returns:
                        	;		v0 = task id of task to run
                        	;------------------------------------------------------------------------------
                        	
                        	SelectTaskToRun:
FFFC1348 FFC70713		sub		$sp,$sp,#4					; stack return address
FFFC134C 00172023		sw		$ra,[$sp]
                        		; Pick the first queue to check, occasionally the queue
                        		; chosen isn't the highest priority one in order to 
                        		; prevent starvation of lower priority tasks.
FFFC1350 00004637		lbu		$v1,QNDX						; get index into que check table
FFFC1354 30460613
FFFC1358 00060633
FFFC135C 00064883
FFFC1360 00188893		add		$v1,$v1,#1					; increment it, and limit
FFFC1364 01F8F893		and		$v1,$v1,#31
FFFC1368 00004637		sb		$v1,QNDX						; store back
FFFC136C 30460613
FFFC1370 00060633
FFFC1374 01160023
FFFC1378 FFFC1637		lbu		$v1,qToChk[$v1]			; assume this will be valid
FFFC137C 20E60613
FFFC1380 01160633
FFFC1384 00064883
FFFC1388 00406E13		ldi		$t2,#4							; 4 queues to check
                        	.nxtQ:
FFFC138C 00004637		lbu		$t0,HRDY0[$v1]			; check queue to see if contains any
FFFC1390 30860613
FFFC1394 01160633
FFFC1398 00064D03
FFFC139C 00004637		lbu		$t1,TRDY0[$v1]			; ready tasks
FFFC13A0 30C60613
FFFC13A4 01160633
FFFC13A8 00064D83
FFFC13AC 01BD1E63		bne		$t0,$t1,.dq					; yes, go dequeue
FFFC13B0 00188893		add		$v1,$v1,#1					; no, advance to next queue
FFFC13B4 0038F893		and		$v1,$v1,#3					; 4 max
FFFC13B8 FFFE0E13		sub		$t2,$t2,#1					;
FFFC13BC FDC048E3		bgt		$t2,$x0,.nxtQ				; go back to check next queue
                        		; Here, nothing else is actually ready to run
                        		; just go back to what we were doing.
FFFC13C0 ED9FF0EF		call	GetCurrentTid				; tail recursion here
FFFC13C4 04000063		bra		.goodTid
                        	.dq:
FFFC13C8 00889E93		sll		$t3,$v1,#8					; compute t3 = readyq index
FFFC13CC 00004637		add		$t3,$t3,#RDYQ0
FFFC13D0 40060613
FFFC13D4 01D60EB3
FFFC13D8 01DD0F33		add		$t4,$t0,$t3
FFFC13DC 000F4803		lbu		$v0,[$t4]						; v0 = tid of ready task
FFFC13E0 00F06E93		ldi		$t3,#MAX_TID				; ensure we have a valid tid
FFFC13E4 030EF063		bleu	$v0,$t3,.goodTid
                        		; If the tid isn't valid, remove it from the queue and go back
                        		; and check the next queue entry
FFFC13E8 001D0D13		add		$t0,$t0,#1					; advance readyq head
FFFC13EC 0FFD7D13		and		$t0,$t0,#255
FFFC13F0 00004637		sb		$t0,HRDY0[$v1]			; save head pointer
FFFC13F4 30860613
FFFC13F8 01160633
FFFC13FC 01A60023
FFFC1400 F80006E3		bra		.nxtQ
                        	.goodTid:
FFFC1404 001D0D13		add		$t0,$t0,#1					; advance readyq head
FFFC1408 0FFD7D13		and		$t0,$t0,#255
FFFC140C 00004637		sb		$t0,HRDY0[$v1]			; save head pointer
FFFC1410 30860613
FFFC1414 01160633
FFFC1418 01A60023
                        		; Now filter out tasks (remove from ready list) that aren't ready to run
FFFC141C 00A81D13		sll		$t0,$v0,#10					; tid to pointer
FFFC1420 288D0D03		lb		$t0,TCBStatus[$t0]	; get status
FFFC1424 001D7D13		and		$t0,$t0,#TS_READY		; is it ready?
FFFC1428 F60D02E3		beq		$t0,$x0,.nxtQ
                        		; And re-insert task into queue for next time
FFFC142C 00086933		mov		$a0,$v0
FFFC1430 E79FF0EF		call	InsertTask					; could check if insert failed
FFFC1434 00096833		mov		$v0,$a0							; get back tid
FFFC1438 00072083		lw		$ra,[$sp]						; restore return address
FFFC143C 00470713		add		$sp,$sp,#4
FFFC1440 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Swap from outgoing context to incoming context.
                        	;
                        	; Parameters:
                        	;		a0 = pointer to TCB of outgoing context
                        	;		a1 = pointer to TCB of incoming context
                        	;------------------------------------------------------------------------------
                        	
                        	SwapContext:
                        		; Save outgoing register set in TCB
FFFC1444 0400810D		mfu		$x2,$x1
FFFC1448 00292223		sw		$x2,4[$a0]
FFFC144C 0401010D		mfu		$x2,$x2
FFFC1450 00292423		sw		$x2,8[$a0]
FFFC1454 0401810D		mfu		$x2,$x3
FFFC1458 00292623		sw		$x2,12[$a0]
FFFC145C 0402010D		mfu		$x2,$x4
FFFC1460 00292823		sw		$x2,16[$a0]
FFFC1464 0402810D		mfu		$x2,$x5
FFFC1468 00292A23		sw		$x2,20[$a0]
FFFC146C 0403010D		mfu		$x2,$x6
FFFC1470 00292C23		sw		$x2,24[$a0]
FFFC1474 0403810D		mfu		$x2,$x7
FFFC1478 00292E23		sw		$x2,28[$a0]
FFFC147C 0404010D		mfu		$x2,$x8
FFFC1480 02292023		sw		$x2,32[$a0]
FFFC1484 0404810D		mfu		$x2,$x9
FFFC1488 02292223		sw		$x2,36[$a0]
FFFC148C 0405010D		mfu		$x2,$x10
FFFC1490 02292423		sw		$x2,40[$a0]
FFFC1494 0405810D		mfu		$x2,$x11
FFFC1498 02292623		sw		$x2,44[$a0]
FFFC149C 0406010D		mfu		$x2,$x12
FFFC14A0 02292823		sw		$x2,48[$a0]
FFFC14A4 0406810D		mfu		$x2,$x13
FFFC14A8 02292A23		sw		$x2,52[$a0]
FFFC14AC 0407010D		mfu		$x2,$x14
FFFC14B0 02292C23		sw		$x2,56[$a0]
FFFC14B4 0407810D		mfu		$x2,$x15
FFFC14B8 02292E23		sw		$x2,60[$a0]
FFFC14BC 0408010D		mfu		$x2,$x16
FFFC14C0 04292023		sw		$x2,64[$a0]
FFFC14C4 0408810D		mfu		$x2,$x17
FFFC14C8 04292223		sw		$x2,68[$a0]
FFFC14CC 0409010D		mfu		$x2,$x18
FFFC14D0 04292423		sw		$x2,72[$a0]
FFFC14D4 0409810D		mfu		$x2,$x19
FFFC14D8 04292623		sw		$x2,76[$a0]
FFFC14DC 040A010D		mfu		$x2,$x20
FFFC14E0 04292823		sw		$x2,80[$a0]
FFFC14E4 040A810D		mfu		$x2,$x21
FFFC14E8 04292A23		sw		$x2,84[$a0]
FFFC14EC 040B010D		mfu		$x2,$x22
FFFC14F0 04292C23		sw		$x2,88[$a0]
FFFC14F4 040B810D		mfu		$x2,$x23
FFFC14F8 04292E23		sw		$x2,92[$a0]
FFFC14FC 040C010D		mfu		$x2,$x24
FFFC1500 06292023		sw		$x2,96[$a0]
FFFC1504 040C810D		mfu		$x2,$x25
FFFC1508 06292223		sw		$x2,100[$a0]
FFFC150C 040D010D		mfu		$x2,$x26
FFFC1510 06292423		sw		$x2,104[$a0]
FFFC1514 040D810D		mfu		$x2,$x27
FFFC1518 06292623		sw		$x2,108[$a0]
FFFC151C 040E010D		mfu		$x2,$x28
FFFC1520 06292823		sw		$x2,112[$a0]
FFFC1524 040E810D		mfu		$x2,$x29
FFFC1528 06292A23		sw		$x2,116[$a0]
FFFC152C 040F010D		mfu		$x2,$x30
FFFC1530 06292C23		sw		$x2,120[$a0]
FFFC1534 040F810D		mfu		$x2,$x31
FFFC1538 06292E23		sw		$x2,124[$a0]
FFFC153C 34101173		csrrw	$x2,#$341,$x0				; save off mepc
FFFC1540 28292023		sw		$x2,TCBepc[$a0]
                        		; Now save off segment registers
FFFC1544 00006D93		ldi		$t1,#0
                        	.svseg:
FFFC1548 01B00D0D		mvseg	$t0,$x0,$t1
FFFC154C 002D9113		sll		$x2,$t1,#2
FFFC1550 01210133		add		$x2,$x2,$a0
FFFC1554 21A12023		sw		$t0,TCBsegs[$x2]
FFFC1558 001D8D93		add		$t1,$t1,#1
FFFC155C 00FDFD93		and		$t1,$t1,#15
FFFC1560 FE0D94E3		bne		$t1,$x0,.svseg
                        	
                        		; Switch memory maps
FFFC1564 00A9D813		srl		$v0,$a1,#10					; convert pointer to tid
FFFC1568 00F87813		and		$v0,$v0,#$F					; mask to 16 task
FFFC156C 01681813		sll		$v0,$v0,#22					; shift into position
FFFC1570 300018F3		csrrw	$v1,#$300,$x0				; get status
FFFC1574 FC400637		and		$v1,$v1,#$FC3FFFFF	; mask off ASID/PID bits
FFFC1578 FFF60613
FFFC157C 011678B3
FFFC1580 0108E8B3		or		$v1,$v1,$v0					; set new ASID
FFFC1584 30089073		csrrw	$x0,#$300,$v1				; save status
                        		; User map has now been switched
                        	
                        		; Restore segment register set
FFFC1588 00006D93		ldi		$t1,#0
                        	.rsseg:
FFFC158C 002D9113		sll		$x2,$t1,#2
FFFC1590 01310133		add		$x2,$x2,$a1
FFFC1594 20012D03		lw		$t0,TCBsegs[$x2]
FFFC1598 01BD000D		mvseg	$x0,$t0,$t1
FFFC159C 001D8D93		add		$t1,$t1,#1
FFFC15A0 00FDFD93		and		$t1,$t1,#15
FFFC15A4 FE0D94E3		bne		$t1,$x0,.rsseg
                        	
FFFC15A8 2809A103		lw		$x2,TCBepc[$a1]			; restore epc
FFFC15AC 34111073		csrrw	$x0,#$341,$x2
                        		; Restore incoming registers
FFFC15B0 0049A103		lw		$x2,4[$a1]
FFFC15B4 0601008D		mtu		$x1,$x2
FFFC15B8 0089A103		lw		$x2,8[$a1]
FFFC15BC 0601010D		mtu		$x2,$x2
FFFC15C0 00C9A103		lw		$x2,12[$a1]
FFFC15C4 0601018D		mtu		$x3,$x2
FFFC15C8 0109A103		lw		$x2,16[$a1]
FFFC15CC 0601020D		mtu		$x4,$x2
FFFC15D0 0149A103		lw		$x2,20[$a1]
FFFC15D4 0601028D		mtu		$x5,$x2
FFFC15D8 0189A103		lw		$x2,24[$a1]
FFFC15DC 0601030D		mtu		$x6,$x2
FFFC15E0 01C9A103		lw		$x2,28[$a1]
FFFC15E4 0601038D		mtu		$x7,$x2
FFFC15E8 0209A103		lw		$x2,32[$a1]
FFFC15EC 0601040D		mtu		$x8,$x2
FFFC15F0 0249A103		lw		$x2,36[$a1]
FFFC15F4 0601048D		mtu		$x9,$x2
FFFC15F8 0289A103		lw		$x2,40[$a1]
FFFC15FC 0601050D		mtu		$x10,$x2
FFFC1600 02C9A103		lw		$x2,44[$a1]
FFFC1604 0601058D		mtu		$x11,$x2
FFFC1608 0309A103		lw		$x2,48[$a1]
FFFC160C 0601060D		mtu		$x12,$x2
FFFC1610 0349A103		lw		$x2,52[$a1]
FFFC1614 0601068D		mtu		$x13,$x2
FFFC1618 0389A103		lw		$x2,56[$a1]
FFFC161C 0601070D		mtu		$x14,$x2
FFFC1620 03C9A103		lw		$x2,60[$a1]
FFFC1624 0601078D		mtu		$x15,$x2
FFFC1628 0409A103		lw		$x2,64[$a1]
FFFC162C 0601080D		mtu		$x16,$x2
FFFC1630 0449A103		lw		$x2,68[$a1]
FFFC1634 0601088D		mtu		$x17,$x2
FFFC1638 0489A103		lw		$x2,72[$a1]
FFFC163C 0601090D		mtu		$x18,$x2
FFFC1640 04C9A103		lw		$x2,76[$a1]
FFFC1644 0601098D		mtu		$x19,$x2
FFFC1648 0509A103		lw		$x2,80[$a1]
FFFC164C 06010A0D		mtu		$x20,$x2
FFFC1650 0549A103		lw		$x2,84[$a1]
FFFC1654 06010A8D		mtu		$x21,$x2
FFFC1658 0589A103		lw		$x2,88[$a1]
FFFC165C 06010B0D		mtu		$x22,$x2
FFFC1660 05C9A103		lw		$x2,92[$a1]
FFFC1664 06010B8D		mtu		$x23,$x2
FFFC1668 0609A103		lw		$x2,96[$a1]
FFFC166C 06010C0D		mtu		$x24,$x2
FFFC1670 0649A103		lw		$x2,100[$a1]
FFFC1674 06010C8D		mtu		$x25,$x2
FFFC1678 0689A103		lw		$x2,104[$a1]
FFFC167C 06010D0D		mtu		$x26,$x2
FFFC1680 06C9A103		lw		$x2,108[$a1]
FFFC1684 06010D8D		mtu		$x27,$x2
FFFC1688 0709A103		lw		$x2,112[$a1]
FFFC168C 06010E0D		mtu		$x28,$x2
FFFC1690 0749A103		lw		$x2,116[$a1]
FFFC1694 06010E8D		mtu		$x29,$x2
FFFC1698 0789A103		lw		$x2,120[$a1]
FFFC169C 06010F0D		mtu		$x30,$x2
FFFC16A0 07C9A103		lw		$x2,124[$a1]
FFFC16A4 06010F8D		mtu		$x31,$x2
FFFC16A8 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Switch tasks
                        	;
                        	; Parameters:
                        	;		none
                        	; Modifies:
                        	;		v0, v1, t0, t1, x1, x2, a0, s1
                        	; Returns:
                        	;		none
                        	;------------------------------------------------------------------------------
                        	;
                        	FMTK_SwitchTask:
                        		; Save register set in TCB
FFFC16AC 300010F3		csrrw	$x1,#$300,$x0			; get process id
FFFC16B0 0160D093		srl		$x1,$x1,#22
FFFC16B4 00F0F093		and		$x1,$x1,#15
FFFC16B8 00A09093		sll		$x1,$x1,#10				; compute TCB address
FFFC16BC 0400810D		mfu		$x2,$x1
FFFC16C0 0020A223		sw		$x2,4[$x1]
FFFC16C4 0401010D		mfu		$x2,$x2
FFFC16C8 0020A423		sw		$x2,8[$x1]				; save regs in TCB
FFFC16CC 0401810D		mfu		$x2,$x3
FFFC16D0 0020A623		sw		$x2,12[$x1]
FFFC16D4 0402010D		mfu		$x2,$x4
FFFC16D8 0020A823		sw		$x2,16[$x1]
FFFC16DC 0402810D		mfu		$x2,$x5
FFFC16E0 0020AA23		sw		$x2,20[$x1]
FFFC16E4 0403010D		mfu		$x2,$x6
FFFC16E8 0020AC23		sw		$x2,24[$x1]
FFFC16EC 0403810D		mfu		$x2,$x7
FFFC16F0 0020AE23		sw		$x2,28[$x1]
FFFC16F4 0404010D		mfu		$x2,$x8
FFFC16F8 0220A023		sw		$x2,32[$x1]
FFFC16FC 0404810D		mfu		$x2,$x9
FFFC1700 0220A223		sw		$x2,36[$x1]
FFFC1704 0405010D		mfu		$x2,$x10
FFFC1708 0220A423		sw		$x2,40[$x1]
FFFC170C 0405810D		mfu		$x2,$x11
FFFC1710 0220A623		sw		$x2,44[$x1]
FFFC1714 0406010D		mfu		$x2,$x12
FFFC1718 0220A823		sw		$x2,48[$x1]
FFFC171C 0406810D		mfu		$x2,$x13
FFFC1720 0220AA23		sw		$x2,52[$x1]
FFFC1724 0407010D		mfu		$x2,$x14
FFFC1728 0220AC23		sw		$x2,56[$x1]
FFFC172C 0407810D		mfu		$x2,$x15
FFFC1730 0220AE23		sw		$x2,60[$x1]
FFFC1734 0408010D		mfu		$x2,$x16
FFFC1738 0420A023		sw		$x2,64[$x1]
FFFC173C 0408810D		mfu		$x2,$x17
FFFC1740 0420A223		sw		$x2,68[$x1]
FFFC1744 0409010D		mfu		$x2,$x18
FFFC1748 0420A423		sw		$x2,72[$x1]
FFFC174C 0409810D		mfu		$x2,$x19
FFFC1750 0420A623		sw		$x2,76[$x1]
FFFC1754 040A010D		mfu		$x2,$x20
FFFC1758 0420A823		sw		$x2,80[$x1]
FFFC175C 040A810D		mfu		$x2,$x21
FFFC1760 0420AA23		sw		$x2,84[$x1]
FFFC1764 040B010D		mfu		$x2,$x22
FFFC1768 0420AC23		sw		$x2,88[$x1]
FFFC176C 040B810D		mfu		$x2,$x23
FFFC1770 0420AE23		sw		$x2,92[$x1]
FFFC1774 040C010D		mfu		$x2,$x24
FFFC1778 0620A023		sw		$x2,96[$x1]
FFFC177C 040C810D		mfu		$x2,$x25
FFFC1780 0620A223		sw		$x2,100[$x1]
FFFC1784 040D010D		mfu		$x2,$x26
FFFC1788 0620A423		sw		$x2,104[$x1]
FFFC178C 040D810D		mfu		$x2,$x27
FFFC1790 0620A623		sw		$x2,108[$x1]
FFFC1794 040E010D		mfu		$x2,$x28
FFFC1798 0620A823		sw		$x2,112[$x1]
FFFC179C 040E810D		mfu		$x2,$x29
FFFC17A0 0620AA23		sw		$x2,116[$x1]
FFFC17A4 040F010D		mfu		$x2,$x30
FFFC17A8 0620AC23		sw		$x2,120[$x1]
FFFC17AC 040F810D		mfu		$x2,$x31
FFFC17B0 0620AE23		sw		$x2,124[$x1]
FFFC17B4 34101173		csrrw	$x2,#$341,$x0				; save off mepc
FFFC17B8 2820A023		sw		$x2,TCBepc[$x1]
FFFC17BC 00006D93		ldi		$t1,#0
                        	.svseg:
FFFC17C0 01B00D0D		mvseg	$t0,$x0,$t1
FFFC17C4 002D9113		sll		$x2,$t1,#2
FFFC17C8 00110133		add		$x2,$x2,$x1
FFFC17CC 21A12023		sw		$t0,TCBsegs[$x2]
FFFC17D0 001D8D93		add		$t1,$t1,#1
FFFC17D4 00FDFD93		and		$t1,$t1,#15
FFFC17D8 FE0D94E3		bne		$t1,$x0,.svseg
                        	
                        	.dead:
FFFC17DC B6DFF0EF		call	SelectTaskToRun			; v0 = pid
                        	
                        		; Switch memory maps
FFFC17E0 00F87813		and		$v0,$v0,#$F					; mask to 16 task
FFFC17E4 01681813		sll		$v0,$v0,#22					; shift into position
FFFC17E8 300018F3		csrrw	$v1,#$300,$x0				; get status
FFFC17EC FC400637		and		$v1,$v1,#$FC3FFFFF	; mask off ASID/PID bits
FFFC17F0 FFF60613
FFFC17F4 011678B3
FFFC17F8 0108E8B3		or		$v1,$v1,$v0					; set new ASID
FFFC17FC 30089073		csrrw	$x0,#$300,$v1				; save status
                        		; User map has now been switched
FFFC1800 00C85093		srl		$x1,$v0,#12					; compute incoming TCB address
                        	.0001:
FFFC1804 28808883		lb		$v1,TCBStatus[$x1]
                        	
                        		; If a message is ready, update status to ready and put
                        		; message in target memory. The task will be returning
                        		; from a WaitMsg so a return status of E_Ok is also set.
FFFC1808 0048F113		and		$x2,$v1,#TS_MSGRDY
FFFC180C 08010063		beq		$x2,$x0,.noMsg
FFFC1810 00086EB3		mov		$t3,$v0							; save off v0 (tid)
FFFC1814 00106113		ldi		$x2,#TS_READY
FFFC1818 00000637		sb		$x2,TCB_Status[$x1]
FFFC181C 11F60613
FFFC1820 00160633
FFFC1824 00260023
FFFC1828 0500A903		lw		$a0,80[$x1]					; user a2 (x20)
FFFC182C 995FF0EF		call	VirtToPhys
FFFC1830 00000637		lw		$x2,TCB_MsgD1[$x1]
FFFC1834 12060613
FFFC1838 00160633
FFFC183C 00062103
FFFC1840 00282023		sw		$x2,[$v0]
FFFC1844 0540A903		lw		$a0,84[$x1]
FFFC1848 979FF0EF		call	VirtToPhys
FFFC184C 00000637		lw		$x2,TCB_MsgD2[$x1]
FFFC1850 12160613
FFFC1854 00160633
FFFC1858 00062103
FFFC185C 00282023		sw		$x2,[$v0]
FFFC1860 0580A903		lw		$a0,88[$x1]
FFFC1864 95DFF0EF		call	VirtToPhys
FFFC1868 00000637		lw		$x2,TCB_MsgD3[$x1]
FFFC186C 12260613
FFFC1870 00160633
FFFC1874 00062103
FFFC1878 00282023		sw		$x2,[$v0]
FFFC187C 00006113		ldi		$x2,#E_Ok						; setup to return E_Ok
FFFC1880 0420A023		sw		$x2,64[$x1]					; in v0
FFFC1884 000EE833		mov		$v0,$t3
FFFC1888 00000A63		bra		.ready
                        	.noMsg:
FFFC188C 0018F113		and		$x2,$v1,#TS_READY
FFFC1890 00011663		bne		$x2,$x0,.ready
FFFC1894 0028F113		and		$x2,$v1,#TS_DEAD
FFFC1898 F40112E3		bne		$x2,$x0,.dead
                        	
                        	.ready:
                        		; Add task back into ready queue
FFFC189C 0000E233		mov		$s1,$x1							; save off x1 (normally return address)
FFFC18A0 01685913		srl		$a0,$v0,#22					; compute ASID/PID
FFFC18A4 A05FF0EF		call	InsertTask
FFFC18A8 000260B3		mov		$x1,$s1							; get back x1
                        	
                        		; Restore register set
FFFC18AC 00006D93		ldi		$t1,#0
                        	.rsseg:
FFFC18B0 002D9113		sll		$x2,$t1,#2
FFFC18B4 00110133		add		$x2,$x2,$x1
FFFC18B8 20012D03		lw		$t0,TCBsegs[$x2]
FFFC18BC 01BD000D		mvseg	$x0,$t0,$t1
FFFC18C0 001D8D93		add		$t1,$t1,#1
FFFC18C4 00FDFD93		and		$t1,$t1,#15
FFFC18C8 FE0D94E3		bne		$t1,$x0,.rsseg
                        	
FFFC18CC 2800A103		lw		$x2,TCBepc[$x1]			; restore epc
FFFC18D0 34111073		csrrw	$x0,#$341,$x2
FFFC18D4 0040A103		lw		$x2,4[$x1]
FFFC18D8 0601008D		mtu		$x1,$x2
FFFC18DC 0080A103		lw		$x2,8[$x1]
FFFC18E0 0601010D		mtu		$x2,$x2
FFFC18E4 00C0A103		lw		$x2,12[$x1]
FFFC18E8 0601018D		mtu		$x3,$x2
FFFC18EC 0100A103		lw		$x2,16[$x1]
FFFC18F0 0601020D		mtu		$x4,$x2
FFFC18F4 0140A103		lw		$x2,20[$x1]
FFFC18F8 0601028D		mtu		$x5,$x2
FFFC18FC 0180A103		lw		$x2,24[$x1]
FFFC1900 0601030D		mtu		$x6,$x2
FFFC1904 01C0A103		lw		$x2,28[$x1]
FFFC1908 0601038D		mtu		$x7,$x2
FFFC190C 0200A103		lw		$x2,32[$x1]
FFFC1910 0601040D		mtu		$x8,$x2
FFFC1914 0240A103		lw		$x2,36[$x1]
FFFC1918 0601048D		mtu		$x9,$x2
FFFC191C 0280A103		lw		$x2,40[$x1]
FFFC1920 0601050D		mtu		$x10,$x2
FFFC1924 02C0A103		lw		$x2,44[$x1]
FFFC1928 0601058D		mtu		$x11,$x2
FFFC192C 0300A103		lw		$x2,48[$x1]
FFFC1930 0601060D		mtu		$x12,$x2
FFFC1934 0340A103		lw		$x2,52[$x1]
FFFC1938 0601068D		mtu		$x13,$x2
FFFC193C 0380A103		lw		$x2,56[$x1]
FFFC1940 0601070D		mtu		$x14,$x2
FFFC1944 03C0A103		lw		$x2,60[$x1]
FFFC1948 0601078D		mtu		$x15,$x2
FFFC194C 0400A103		lw		$x2,64[$x1]
FFFC1950 0601080D		mtu		$x16,$x2
FFFC1954 0440A103		lw		$x2,68[$x1]
FFFC1958 0601088D		mtu		$x17,$x2
FFFC195C 0480A103		lw		$x2,72[$x1]
FFFC1960 0601090D		mtu		$x18,$x2
FFFC1964 04C0A103		lw		$x2,76[$x1]
FFFC1968 0601098D		mtu		$x19,$x2
FFFC196C 0500A103		lw		$x2,80[$x1]
FFFC1970 06010A0D		mtu		$x20,$x2
FFFC1974 0540A103		lw		$x2,84[$x1]
FFFC1978 06010A8D		mtu		$x21,$x2
FFFC197C 0580A103		lw		$x2,88[$x1]
FFFC1980 06010B0D		mtu		$x22,$x2
FFFC1984 05C0A103		lw		$x2,92[$x1]
FFFC1988 06010B8D		mtu		$x23,$x2
FFFC198C 0600A103		lw		$x2,96[$x1]
FFFC1990 06010C0D		mtu		$x24,$x2
FFFC1994 0640A103		lw		$x2,100[$x1]
FFFC1998 06010C8D		mtu		$x25,$x2
FFFC199C 0680A103		lw		$x2,104[$x1]
FFFC19A0 06010D0D		mtu		$x26,$x2
FFFC19A4 06C0A103		lw		$x2,108[$x1]
FFFC19A8 06010D8D		mtu		$x27,$x2
FFFC19AC 0700A103		lw		$x2,112[$x1]
FFFC19B0 06010E0D		mtu		$x28,$x2
FFFC19B4 0740A103		lw		$x2,116[$x1]
FFFC19B8 06010E8D		mtu		$x29,$x2
FFFC19BC 0780A103		lw		$x2,120[$x1]
FFFC19C0 06010F0D		mtu		$x30,$x2
FFFC19C4 07C0A103		lw		$x2,124[$x1]
FFFC19C8 06010F8D		mtu		$x31,$x2
FFFC19CC 10000073		eret
                        	
                        	;------------------------------------------------------------------------------
                        	; Operating system call dispatcher.
                        	;------------------------------------------------------------------------------
                        	
                        	OSCALL:
FFFC19D0 0409090D		mfu		$a0,$a0
FFFC19D4 0409898D		mfu		$a1,$a1
FFFC19D8 040A0A0D		mfu		$a2,$a2
FFFC19DC 040A8A8D		mfu		$a3,$a3
FFFC19E0 040B0B0D		mfu		$a4,$a4
FFFC19E4 040B8B8D		mfu		$a5,$a5
FFFC19E8 00F97913		and		$a0,$a0,#15
FFFC19EC 00191913		sll		$a0,$a0,#1
FFFC19F0 FFFC1637		lhu		$t0,OSCallTbl[$a0]
FFFC19F4 1F060613
FFFC19F8 01260633
FFFC19FC 00065D03
FFFC1A00 FFFC0637		or		$t0,$t0,#$FFFC0000
FFFC1A04 00060613
FFFC1A08 01A66D33
FFFC1A0C 000D0067		jmp		[$t0]
                        	
                        	;------------------------------------------------------------------------------
                        	; Time accounting.
                        	; Update the length of time the task has been running.
                        	;
                        	; Parameters:
                        	;		s1 = pointer to TCB
                        	; Modifies:
                        	;		t2,t3,t4,t5
                        	;------------------------------------------------------------------------------
                        	
                        	AccountTime:
                        	.again:
                        	;	csrrw	$t3,#$741,$x0					; get high time
                        	;	csrrw	$t2,#$701,$x0					; get low time
                        	;	csrrw	$t4,#$741,$x0
                        	;	bne		$t3,$t4,.again
FFFC1A10 00004637		lw		$t2,Tick
FFFC1A14 33060613
FFFC1A18 00060633
FFFC1A1C 00062E03
FFFC1A20 2BC22C23		sw		$t2,TCBEndTick[$s1]
FFFC1A24 2B022E83		lw		$t3,TCBStartTick[$s1]
FFFC1A28 41DE0F33		sub		$t4,$t2,$t3						; end - start
FFFC1A2C 2C022F83		lw		$t5,TCBTicks[$s1]
FFFC1A30 01EF8FB3		add		$t5,$t5,$t4						; ticks + (end - start)
FFFC1A34 2DF22023		sw		$t5,TCBTicks[$s1]
FFFC1A38 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Reschedule tasks.
                        	;------------------------------------------------------------------------------
                        	
                        	FMTK_Reschedule:
FFFC1A3C 85DFF0EF		call	GetCurrentTid
FFFC1A40 00A81213		sll		$s1,$v0,#10						; compute pointer to TCB
FFFC1A44 28824803		lbu		$v0,TCBStatus[$s1]		; flag task as no longer running
FFFC1A48 F7F87813		and		$v0,$v0,#~TS_RUNNING
FFFC1A4C 29020423		sb		$v0,TCBStatus[$s1]
                        	
FFFC1A50 FC1FF0EF		call	AccountTime						; uses s1
FFFC1A54 8F5FF0EF		call	SelectTaskToRun
                        	
FFFC1A58 00A85293		srl		$s2,$v0,#10						; s2 = pointer to incoming TCB
FFFC1A5C 2882C103		lbu		$x2,TCBStatus[$s2]		; x2 = incoming status
FFFC1A60 08116E13		or		$t2,$x2,#TS_RUNNING|TS_READY	; set status = running
FFFC1A64 2C82A103		lw		$x2,TCBException[$s2]	;
FFFC1A68 00010A63		beq		$x2,$x0,.noException
                        		; set link register to catch handler address
                        		;{
                        		;	t->regs[29] = t->regs[28];   // set link register to catch handler
                        		;	t->epc = t->regs[28];        // and the PC register
                        		;	t->regs[1] = t->exception;    // r1 = exception value
                        		;	t->exception = 0;
                        		;	t->regs[2] = 45;              // r2 = exception type
                        		;}
FFFC1A6C 0022A223		sw		$x2,4[$s2]						; r1 = exception
FFFC1A70 2C02A423		sw		$x0,TCBException[$s2]	; tcb->exception = 0
FFFC1A74 02D06113		ldi		$x2,#45
FFFC1A78 0022A423		sw		$x2,8[$s2]						; r2 = 45
                        	.noException:
                        	
                        		; If a message is ready, update status to ready and put
                        		; message in target memory. The task will be returning
                        		; from a WaitMsg so a return status of E_Ok is also set.
FFFC1A7C 004E7113		and		$x2,$t2,#TS_MSGRDY
FFFC1A80 06010063		beq		$x2,$x0,.noMsg
FFFC1A84 0502A903		lw		$a0,80[$s2]					; user a2 (x20)
FFFC1A88 F38FF0EF		call	VirtToPhys
FFFC1A8C 00000637		lw		$x2,TCB_MsgD1[$s2]
FFFC1A90 12060613
FFFC1A94 00560633
FFFC1A98 00062103
FFFC1A9C 00282023		sw		$x2,[$v0]
FFFC1AA0 0542A903		lw		$a0,84[$s2]
FFFC1AA4 F1CFF0EF		call	VirtToPhys
FFFC1AA8 00000637		lw		$x2,TCB_MsgD2[$s2]
FFFC1AAC 12160613
FFFC1AB0 00560633
FFFC1AB4 00062103
FFFC1AB8 00282023		sw		$x2,[$v0]
FFFC1ABC 0582A903		lw		$a0,88[$s2]
FFFC1AC0 F00FF0EF		call	VirtToPhys
FFFC1AC4 00000637		lw		$x2,TCB_MsgD3[$s2]
FFFC1AC8 12260613
FFFC1ACC 00560633
FFFC1AD0 00062103
FFFC1AD4 00282023		sw		$x2,[$v0]
FFFC1AD8 00006113		ldi		$x2,#E_Ok						; setup to return E_Ok
FFFC1ADC 0422A023		sw		$x2,64[$s2]					; in v0
                        	
                        	.noMsg:
FFFC1AE0 FFBE7E13		and		$t2,$t2,#~TS_MSGRDY		; mask out message ready status
FFFC1AE4 29C28423		sb		$t2,TCBStatus[$s2]
FFFC1AE8 00520863		beq		$s1,$s2,.noCtxSwitch	; incoming and outgoing contexts the same?
FFFC1AEC 00026933		mov		$a0,$s1
FFFC1AF0 0002E9B3		mov		$a1,$s2
FFFC1AF4 951FF0EF		call	SwapContext
                        	.noCtxSwitch:
FFFC1AF8 00004637		lw		$t2,Tick						; get tick
FFFC1AFC 33060613
FFFC1B00 00060633
FFFC1B04 00062E03
FFFC1B08 2BC22823		sw		$t2,TCBStartTick[$s1]
FFFC1B0C 10000073		eret
                        	
                        	;------------------------------------------------------------------------------
                        	; SchedulerIRQ meant to be called from the timer ISR.
                        	;------------------------------------------------------------------------------
                        	
                        	FMTK_SchedulerIRQ:
FFFC1B10 FFC70713		sub		$sp,$sp,#4
FFFC1B14 00172023		sw		$ra,[$sp]
FFFC1B18 00004637		lw		$t5,Tick							; update tick count
FFFC1B1C 33060613
FFFC1B20 00060633
FFFC1B24 00062F83
FFFC1B28 001F8F93		add		$t5,$t5,#1
FFFC1B2C 00004637		sw		$t5,Tick
FFFC1B30 33060613
FFFC1B34 00060633
FFFC1B38 01F62023
FFFC1B3C F5CFF0EF		call	GetCurrentTid
FFFC1B40 00A81213		sll		$s1,$v0,#10						; compute pointer to TCB
FFFC1B44 ECDFF0EF		call	AccountTime
FFFC1B48 28824F83		lbu		$t5,TCBStatus[$s1]
FFFC1B4C 12BFEF93		or		$t5,$t5,#TS_PREMPT
FFFC1B50 F7FFFF93		and		$t5,$t5,#~TS_RUNNING	; no longer running, but may still be ready
FFFC1B54 29F20423		sb		$t5,TCBStatus[$s1]
                        		; Keep popping the timeout list as long as there are tasks on it with
                        		; expired timeouts.
                        	.0001:
FFFC1B58 00004637		lhu		$t5,TimeoutList
FFFC1B5C 32860613
FFFC1B60 00060633
FFFC1B64 00065F83
FFFC1B68 060FC663		blt		$t5,$x0,.noTimeouts
FFFC1B6C 01006F13		ldi		$t4,#NR_TCB
FFFC1B70 07EFD263		bge		$t5,$t4,.noTimeouts
FFFC1B74 00AF9F13		sll		$t4,$t5,#10					; index to pointer
FFFC1B78 00000637		lw		$t3,TCBTimeout[$t4]
FFFC1B7C 12E60613
FFFC1B80 01E60633
FFFC1B84 00062E83
FFFC1B88 01D04A63		bgt		$t3,$x0,.timeoutNotDone
FFFC1B8C 4A8000EF		call	PopTimeoutList
FFFC1B90 00086933		mov		$a0,$v0
FFFC1B94 F14FF0EF		call	InsertTask
FFFC1B98 FC0000E3		bra		.0001
                        	.timeoutNotDone:
FFFC1B9C FFFE8E93		sub		$t3,$t3,#1
FFFC1BA0 00004637		lw		$t2,missed_ticks
FFFC1BA4 32060613
FFFC1BA8 00060633
FFFC1BAC 00062E03
FFFC1BB0 41CE8EB3		sub		$t3,$t3,$t2
FFFC1BB4 00000637		sw		$t3,TCBTimeout[$t4]
FFFC1BB8 12E60613
FFFC1BBC 01E60633
FFFC1BC0 01D62023
FFFC1BC4 00004637		sw		$x0,missed_ticks
FFFC1BC8 32060613
FFFC1BCC 00060633
FFFC1BD0 00062023
                        	.noTimeouts:
                        		; The ready queue was just updated, there could be new tasks
                        		; ready to run.
FFFC1BD4 F74FF0EF		call	SelectTaskToRun
                        	
FFFC1BD8 01685293		srl		$s2,$v0,#22					; s2 = pointer to incoming TCB
FFFC1BDC 2882C103		lbu		$x2,TCBStatus[$s2]	; x2 = incoming status
FFFC1BE0 08116E13		or		$t2,$x2,#TS_RUNNING|TS_READY	; status = running
FFFC1BE4 2C82A103		lw		$x2,TCBException[$s2]	;
FFFC1BE8 00010263		beq		$x2,$x0,.noException
                        		; set link register to catch handler address
                        		;{
                        		;	t->regs[29] = t->regs[28];   // set link register to catch handler
                        		;	t->epc = t->regs[28];        // and the PC register
                        		;	t->regs[1] = t->exception;    // r1 = exception value
                        		;	t->exception = 0;
                        		;	t->regs[2] = 45;              // r2 = exception type
                        		;}
                        	.noException:
                        	
                        		; If a message is ready, update status to ready and put
                        		; message in target memory. The task will be returning
                        		; from a WaitMsg so a return status of E_Ok is also set.
FFFC1BEC 004E7113		and		$x2,$t2,#TS_MSGRDY
FFFC1BF0 06010063		beq		$x2,$x0,.noMsg
FFFC1BF4 0502A903		lw		$a0,80[$s2]					; user a2 (x20)
FFFC1BF8 DC8FF0EF		call	VirtToPhys
FFFC1BFC 00000637		lw		$x2,TCB_MsgD1[$s2]
FFFC1C00 12060613
FFFC1C04 00560633
FFFC1C08 00062103
FFFC1C0C 00282023		sw		$x2,[$v0]
FFFC1C10 0542A903		lw		$a0,84[$s2]
FFFC1C14 DACFF0EF		call	VirtToPhys
FFFC1C18 00000637		lw		$x2,TCB_MsgD2[$s2]
FFFC1C1C 12160613
FFFC1C20 00560633
FFFC1C24 00062103
FFFC1C28 00282023		sw		$x2,[$v0]
FFFC1C2C 0582A903		lw		$a0,88[$s2]
FFFC1C30 D90FF0EF		call	VirtToPhys
FFFC1C34 00000637		lw		$x2,TCB_MsgD3[$s2]
FFFC1C38 12260613
FFFC1C3C 00560633
FFFC1C40 00062103
FFFC1C44 00282023		sw		$x2,[$v0]
FFFC1C48 00006113		ldi		$x2,#E_Ok						; setup to return E_Ok
FFFC1C4C 0422A023		sw		$x2,64[$s2]					; in v0
                        	
                        	.noMsg:
FFFC1C50 FFBE7E13		and		$t2,$t2,#~TS_MSGRDY		; mask out message ready status
FFFC1C54 29C28423		sb		$t2,TCBStatus[$s2]
FFFC1C58 00520863		beq		$s1,$s2,.noCtxSwitch
FFFC1C5C 00026933		mov		$a0,$s1
FFFC1C60 0002E9B3		mov		$a1,$s2
FFFC1C64 FE0FF0EF		call	SwapContext
                        	.noCtxSwitch:
FFFC1C68 00072083		lw		$ra,[$sp]
FFFC1C6C 00470713		add		$sp,$sp,#4
FFFC1C70 00004637		lw		$t2,Tick					; get tick
FFFC1C74 33060613
FFFC1C78 00060633
FFFC1C7C 00062E03
FFFC1C80 2BC22823		sw		$t2,TCBStartTick[$s1]
FFFC1C84 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Returns:
                        	;		v1 = process id
                        	;------------------------------------------------------------------------------
                        	
                        	AllocTCB:
FFFC1C88 00006D93		ldi		$t1,#0
FFFC1C8C 00004637		lhu		$v1,PIDMAP
FFFC1C90 31060613
FFFC1C94 00060633
FFFC1C98 00065883
                        	.0001:
FFFC1C9C 0018FD13		and		$t0,$v1,#1
FFFC1CA0 020D0463		beq		$t0,$x0,.allocTid
FFFC1CA4 0018D893		srl		$v1,$v1,#1
FFFC1CA8 00008637		or		$v1,$v1,#$8000
FFFC1CAC 00060613
FFFC1CB0 011668B3
FFFC1CB4 001D8D93		add		$t1,$t1,#1
FFFC1CB8 00FDFD93		and		$t1,$t1,#15
FFFC1CBC FE0D90E3		bne		$t1,$x0,.0001
                        	; here no tcbs available
FFFC1CC0 04506813		ldi		$v0,#E_NoMoreTCBs
FFFC1CC4 00008067		ret
                        	.allocTid:
FFFC1CC8 000DE833		mov		$v0,$t1
FFFC1CCC 0018E893		or		$v1,$v1,#1
FFFC1CD0 000D8A63		beq		$t1,$x0,.0003
                        	.0002:
FFFC1CD4 00189893		sll		$v1,$v1,#1
FFFC1CD8 0018E893		or		$v1,$v1,#1
FFFC1CDC FFFD8D93		sub		$t1,$t1,#1
FFFC1CE0 FE0D9AE3		bne		$t1,$x0,.0002
                        	.0003:
FFFC1CE4 00004637		sh		$v1,PIDMAP
FFFC1CE8 31060613
FFFC1CEC 00060633
FFFC1CF0 01161023
FFFC1CF4 000868B3		mov		$v1,$v0
FFFC1CF8 00006813		ldi		$v0,#E_Ok
FFFC1CFC 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Start a task.
                        	;	Task status is set to ready, priority normal, and the task is inserted into
                        	; the ready queue. Segment registers are setup for a flat memory model.
                        	; 
                        	;	Parameters:
                        	;		a1 = memory required
                        	;		a2 = start pc (usually $100)
                        	;	Modifies:
                        	;		a0 = tid
                        	;	Returns:
                        	;		v0 = E_Ok if successful
                        	;		v1 = tid of started task if successful
                        	;------------------------------------------------------------------------------
                        	;
                        	FMTK_StartTask:
FFFC1D00 FFC70713		sub		$sp,$sp,#4
FFFC1D04 00172023		sw		$ra,[$sp]
FFFC1D08 F81FF0EF		call	AllocTCB
FFFC1D0C 0A081063		bne		$v0,$x0,.err
FFFC1D10 0008E933		mov		$a0,$v1
FFFC1D14 00A89213		sll		$s1,$v1,#10			; compute TCB address
FFFC1D18 C18FF0EF		call	AllocStack
FFFC1D1C 00080D37		ldi		$t0,#$7F800			; set stack pointer
FFFC1D20 800D0D13
FFFC1D24 03A22C23		sw		$t0,56[$s1]
FFFC1D28 29422023		sw		$a2,TCBepc[$s1]	; address task will begin at
FFFC1D2C B38FF0EF		call	Alloc
FFFC1D30 06081E63		bne		$v0,$x0,.err
FFFC1D34 00106D13		ldi		$t0,#TS_READY
FFFC1D38 29A20423		sb		$t0,TCBStatus[$s1]
FFFC1D3C 00206D13		ldi		$t0,#2					; normal execution priority
FFFC1D40 29A204A3		sb		$t0,TCBPriority[$s1]
                        		; leave segment base at $0, flat memory model
FFFC1D44 00606D13		ldi		$t0,#6							; read,write
FFFC1D48 21A22023		sw		$t0,TCBsegs[$s1]			; segs 0 to 11
FFFC1D4C 21A22223		sw		$t0,TCBsegs+4[$s1]
FFFC1D50 21A22423		sw		$t0,TCBsegs+8[$s1]
FFFC1D54 21A22623		sw		$t0,TCBsegs+12[$s1]
FFFC1D58 21A22823		sw		$t0,TCBsegs+16[$s1]
FFFC1D5C 21A22A23		sw		$t0,TCBsegs+20[$s1]
FFFC1D60 21A22C23		sw		$t0,TCBsegs+24[$s1]
FFFC1D64 21A22E23		sw		$t0,TCBsegs+28[$s1]
FFFC1D68 23A22023		sw		$t0,TCBsegs+32[$s1]
FFFC1D6C 23A22223		sw		$t0,TCBsegs+36[$s1]
FFFC1D70 23A22423		sw		$t0,TCBsegs+40[$s1]
FFFC1D74 23A22623		sw		$t0,TCBsegs+44[$s1]
FFFC1D78 00506D13		ldi		$t0,#5							; read,execute
FFFC1D7C 23A22823		sw		$t0,TCBsegs+48[$s1]	; segs 12 to 15
FFFC1D80 23A22A23		sw		$t0,TCBsegs+52[$s1]
FFFC1D84 23A22C23		sw		$t0,TCBsegs+56[$s1]
FFFC1D88 23A22E23		sw		$t0,TCBsegs+60[$s1]
FFFC1D8C 00A25913		srl		$a0,$s1,#10					; need the tid again
FFFC1D90 D18FF0EF		call	InsertTask
FFFC1D94 000968B3		mov		v1,a0
FFFC1D98 00072083		lw		$ra,[$sp]
FFFC1D9C 00470713		add		$sp,$sp,#4
FFFC1DA0 0608080D		mtu		$v0,$v0
FFFC1DA4 0608888D		mtu		$v1,$v1
FFFC1DA8 10000073		eret
                        	.err:
                        	;	mov		$a0,$v0
                        	;	call	PutHexByte
FFFC1DAC 00072083		lw		$ra,[$sp]
FFFC1DB0 00470713		add		$sp,$sp,#4
FFFC1DB4 0608080D		mtu		$v0,$v0
FFFC1DB8 10000073		eret
                        	
                        	;------------------------------------------------------------------------------
                        	; Exit the current task.
                        	;
                        	; Parameters:
                        	;		none
                        	; Modifies:
                        	;		a1 = task id
                        	;------------------------------------------------------------------------------
                        	
                        	FMTK_ExitTask:
FFFC1DBC 300019F3		csrrw	$a1,#$300,$x0				; get tid
FFFC1DC0 0169D993		srl		$a1,$a1,#22
FFFC1DC4 00F9F993		and		$a1,$a1,#15
                        		; fall through to KillTask
                        	
                        	;------------------------------------------------------------------------------
                        	; Parameters:
                        	;		a1 = tid of task to kill
                        	;------------------------------------------------------------------------------
                        	
                        	FMTK_KillTask:
FFFC1DC8 04098663		beq		$a1,$x0,.immortal		; tid #0 is immortal (the system)
FFFC1DCC 00206D13		ldi		$t0,#TS_DEAD				; flag task as dead (prevents it from being re-queued)
FFFC1DD0 00F9FD93		and		$t1,$a1,#15					; limit pid
FFFC1DD4 00AD9D93		sll		$t1,$t1,#10					; convert to TCB address
FFFC1DD8 29AD8423		sb		$t0,TCBStatus[$t1]
FFFC1DDC 0009E933		mov		a0,a1								; a0 = pid
FFFC1DE0 B7CFF0EF		call	FreeAll							; free all the memory associated with the task
                        		; Now make process ID available for reuse
FFFC1DE4 00004637		lhu		$t1,PIDMAP
FFFC1DE8 31060613
FFFC1DEC 00060633
FFFC1DF0 00065D83
FFFC1DF4 00106D13		ldi		$t0,#1							; generate bit "off" mask
FFFC1DF8 013D1D13		sll		$t0,$t0,$a1
FFFC1DFC FFFD4D13		xor		$t0,$t0,#-1					; complment for inverted mask
FFFC1E00 01ADFDB3		and		$t1,$t1,$t0
FFFC1E04 00004637		sh		$t1,PIDMAP
FFFC1E08 31060613
FFFC1E0C 00060633
FFFC1E10 01B61023
                        	.immortal:
FFFC1E14 10000073		eret
                        	
                        	;------------------------------------------------------------------------------
                        	; Parameters:
                        	;		a0 = task id to insert
                        	;		a1 = timeout value
                        	;------------------------------------------------------------------------------
                        	
                        	InsertIntoTimeoutList:
FFFC1E18 00A91213		sll		$s1,$a0,#10				; tid to pointer
FFFC1E1C 00004637		lw		$t0,TimeoutList
FFFC1E20 32860613
FFFC1E24 00060633
FFFC1E28 00062D03
FFFC1E2C 040D5863		bge		$t0,$x0,.0001
FFFC1E30 00000637		sw		$a1,TCBTimeout[$s1]
FFFC1E34 12E60613
FFFC1E38 00460633
FFFC1E3C 01362023
FFFC1E40 00004637		sh		$a0,TimeoutList
FFFC1E44 32860613
FFFC1E48 00060633
FFFC1E4C 01261023
FFFC1E50 FFF06D13		ldi		$t0,#-1
FFFC1E54 00000637		sh		$t0,TCBNext[$s1]
FFFC1E58 13D60613
FFFC1E5C 00460633
FFFC1E60 01A61023
FFFC1E64 00000637		sh		$t0,TCBPrev[$s1]
FFFC1E68 13E60613
FFFC1E6C 00460633
FFFC1E70 01A61023
FFFC1E74 00006813		ldi		$v0,#E_Ok
FFFC1E78 00008067		ret
                        	.0001:
FFFC1E7C 00006DB3		mov		$t1,$x0
FFFC1E80 00004637		lhu		$t2,TimeoutList
FFFC1E84 32860613
FFFC1E88 00060633
FFFC1E8C 00065E03
FFFC1E90 00AE1E93		sll		$t3,$t2,#10
                        	.beginWhile:
FFFC1E94 00000637		lw		$t4,TCBTimeout[$t3]
FFFC1E98 12E60613
FFFC1E9C 01D60633
FFFC1EA0 00062F03
FFFC1EA4 033F5263		ble		$a1,$t4,.endWhile
FFFC1EA8 41E989B3		sub		$a1,$a1,$t4
FFFC1EAC 000EEDB3		mov		$t1,$t3
FFFC1EB0 00000637		lhu		$t3,TCBNext[$t3]
FFFC1EB4 13D60613
FFFC1EB8 01D60633
FFFC1EBC 00065E83
FFFC1EC0 00AE9E93		sll		$t3,$t3,#10
FFFC1EC4 FC0008E3		bra		.beginWhile
                        	.endWhile
FFFC1EC8 00AEDE13		srl		$t2,$t3,#10
FFFC1ECC 00000637		sh		$t2,TCBNext[$s1]
FFFC1ED0 13D60613
FFFC1ED4 00460633
FFFC1ED8 01C61023
FFFC1EDC 00ADDE13		srl		$t2,$t1,#10
FFFC1EE0 00000637		sh		$t2,TCBPrev[$s1]
FFFC1EE4 13E60613
FFFC1EE8 00460633
FFFC1EEC 01C61023
FFFC1EF0 00000637		lw		$t2,TCBTimeout[$t3]
FFFC1EF4 12E60613
FFFC1EF8 01D60633
FFFC1EFC 00062E03
FFFC1F00 413E0E33		sub		$t2,$t2,$a1
FFFC1F04 00000637		sw		$t2,TCBTimeout[$t3]
FFFC1F08 12E60613
FFFC1F0C 01D60633
FFFC1F10 01C62023
FFFC1F14 00000637		sh		$a0,TCBPrev[$t3]
FFFC1F18 13E60613
FFFC1F1C 01D60633
FFFC1F20 01261023
FFFC1F24 000D8C63		beq		$t1,$x0,.0002
FFFC1F28 00000637		sh		$a0,TCBNext[$t1]
FFFC1F2C 13D60613
FFFC1F30 01B60633
FFFC1F34 01261023
FFFC1F38 00000A63		bra		.0003
                        	.0002:
FFFC1F3C 00004637		sh		$a0,TimeoutList
FFFC1F40 32860613
FFFC1F44 00060633
FFFC1F48 01261023
                        	.0003:
FFFC1F4C 28824E03		lbu		$t2,TCBStatus[$s1]
FFFC1F50 143E6E13		or		$t2,$t2,#TS_TIMEOUT
FFFC1F54 29C20423		sb		$t2,TCBStatus[$s1]
FFFC1F58 00006813		ldi		$v0,#E_Ok
FFFC1F5C 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	
                        	RemoveFromTimeoutList:
FFFC1F60 00A91213		sll		$s1,$a0,#10					; tid to pointer
FFFC1F64 00000637		lhu		$t0,TCBNext[$s1]
FFFC1F68 13D60613
FFFC1F6C 00460633
FFFC1F70 00065D03
FFFC1F74 040D4E63		blt		$t0,$x0,.0001
FFFC1F78 00AD1293		sll		$s2,$t0,#10
FFFC1F7C 00000637		lhu		$t1,TCBPrev[$s1]
FFFC1F80 13E60613
FFFC1F84 00460633
FFFC1F88 00065D83
FFFC1F8C 00000637		sh		$t1,TCBPrev[$s2]
FFFC1F90 13E60613
FFFC1F94 00560633
FFFC1F98 01B61023
FFFC1F9C 00000637		lw		$t1,TCBTimeout[$s2]
FFFC1FA0 12E60613
FFFC1FA4 00560633
FFFC1FA8 00062D83
FFFC1FAC 00000637		lw		$t2,TCBTimeout[$s1]
FFFC1FB0 12E60613
FFFC1FB4 00460633
FFFC1FB8 00062E03
FFFC1FBC 01CD8DB3		add		$t1,$t1,$t2
FFFC1FC0 00000637		sw		$t1,TCBTimeout[$s2]
FFFC1FC4 12E60613
FFFC1FC8 00560633
FFFC1FCC 01B62023
                        	.0001:
FFFC1FD0 00000637		lhu		$t0,TCBPrev[$s1]
FFFC1FD4 13E60613
FFFC1FD8 00460633
FFFC1FDC 00065D03
FFFC1FE0 020D4463		blt		$t0,$x0,.0002
FFFC1FE4 00AD1293		sll		$s2,$t0,#10
FFFC1FE8 00000637		lhu		$t0,TCBNext[$s1]
FFFC1FEC 13D60613
FFFC1FF0 00460633
FFFC1FF4 00065D03
FFFC1FF8 00000637		sh		$t0,TCBNext[$s2]
FFFC1FFC 13D60613
FFFC2000 00560633
FFFC2004 01A61023
                        	.0002:
FFFC2008 28020423		sb		$x0,TCBStatus[$s1]	; status = TS_NONE
FFFC200C FFF06D13		ldi		$t0,#-1
FFFC2010 00000637		sh		$t0,TCBNext[$s1]
FFFC2014 13D60613
FFFC2018 00460633
FFFC201C 01A61023
FFFC2020 00000637		sh		$t0,TCBPrev[$s1]
FFFC2024 13E60613
FFFC2028 00460633
FFFC202C 01A61023
FFFC2030 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Pop an entry off the timeout list.
                        	;
                        	; Modifies:
                        	;		v1,t0
                        	;	Returns:
                        			v0 = timeout list entry tid
                        	;------------------------------------------------------------------------------
                        	
                        	PopTimeoutList:
FFFC2034 00004637		lhu		$v0,TimeoutList
FFFC2038 32860613
FFFC203C 00060633
FFFC2040 00065803
FFFC2044 04084E63		blt		$v0,$x0,.done
FFFC2048 01006893		ldi		$v1,#NR_TCB
FFFC204C 05187A63		bgeu	$v0,$v1,.done
FFFC2050 00A81D13		sll		$t0,$v0,#10						; tid to pointer
FFFC2054 288D4883		lbu		$v1,TCBStatus[$t0]		; no longer a waiting status
FFFC2058 EB48F893		and		$v1,$v1,#~(TS_WAITMSG|TS_TIMEOUT)
	sb		$v1,TCBStatus[$t0]
FFFC205C 291D0423
FFFC2060 00000637		lhu		$v1,TCBNext[$t0]
FFFC2064 13D60613
FFFC2068 01A60633
FFFC206C 00065883
FFFC2070 00004637		sh		$v1,TimeoutList
FFFC2074 32860613
FFFC2078 00060633
FFFC207C 01161023
FFFC2080 02084063		blt		$v0,$x0,.done
FFFC2084 01006893		ldi		$v1,#NR_TCB
FFFC2088 01187C63		bgeu	$v0,$v1,.done
FFFC208C FFF06893		ldi		$v1,#-1
FFFC2090 00000637		sh		$v1,TCBPrev[$t0]
FFFC2094 13E60613
FFFC2098 01A60633
FFFC209C 01161023
                        	.done:	
FFFC20A0 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Sleep for a length of time. Time determined by the resolution of wall clock 
                        	; time. Passing a time of zero causes the function to return right away with
                        	; and E_Ok status.
                        	;
                        	; Parameters:
                        	;		a1 = length of time to sleep
                        	; Returns:
                        	;		v0 = E_Ok if successful
                        	;------------------------------------------------------------------------------
                        	
                        	FMTK_Sleep:
FFFC20A4 03305463		ble		$a1,$x0,.xit
FFFC20A8 70101D73		csrrw	$t0,#$701,$x0
FFFC20AC 9ECFF0EF		call	GetCurrentTid
FFFC20B0 00A81213		sll		$s1,$v0,#10
FFFC20B4 28824D83		lbu		$t1,TCBStatus[$s1]		; changing status will remove from ready queue
FFFC20B8 FFEDFD93		and		$t1,$t1,#~TS_READY		; on next dequeue
FFFC20BC 29B20423		sb		$t1,TCBStatus[$s1]
FFFC20C0 00086933		mov		$a0,$v0								; a0 = current tid
FFFC20C4 D55FF0EF		call	InsertIntoTimeoutList	; a1 = timeout
FFFC20C8 975FF06F		jmp		FMTK_Reschedule
                        	.xit:
FFFC20CC 00006813		ldi		$v0,#E_Ok
FFFC20D0 0608080D		mtu		$v0,$v0
FFFC20D4 10000073		eret
                        	
                        	;------------------------------------------------------------------------------
                        	; Diagnostics
                        	;------------------------------------------------------------------------------
                        	
                        	DumpReadyQueue:
FFFC20D8 FE470713		sub		$sp,$sp,#28
FFFC20DC 00172023		sw		$ra,[$sp]
FFFC20E0 01272223		sw		$a0,4[$sp]
FFFC20E4 01472423		sw		$a2,8[$sp]
FFFC20E8 01572623		sw		$a3,12[$sp]
FFFC20EC 01B72823		sw		$t1,16[$sp]
FFFC20F0 01C72A23		sw		$t2,20[$sp]
FFFC20F4 01D72C23		sw		$t3,24[$sp]
FFFC20F8 00006D93		ldi		$t1,#0
                        	.0002:
FFFC20FC 00D06913		ldi		$a0,#CR
FFFC2100 8B8FE0EF		call	Putch
FFFC2104 05106913		ldi		$a0,#'Q'
FFFC2108 8B0FE0EF		call	Putch
FFFC210C 000DE933		mov		$a0,$t1
FFFC2110 CE0FE0EF		call	PutHexNybble
FFFC2114 03A06913		ldi		$a0,#':'
FFFC2118 8A0FE0EF		call	Putch
FFFC211C 00004637		lbu		$a2,HRDY0[$t1]
FFFC2120 30860613
FFFC2124 01B60633
FFFC2128 00064A03
FFFC212C 00004637		lbu		$a3,TRDY0[$t1]
FFFC2130 30C60613
FFFC2134 01B60633
FFFC2138 00064A83
FFFC213C 035A0863		beq		$a2,$a3,.nxt
FFFC2140 008D9E13		sll		$t2,$t1,#8
FFFC2144 00004637		add		$t2,$t2,#RDYQ0
FFFC2148 40060613
FFFC214C 01C60E33
                        	.0001:
FFFC2150 014E0EB3		add		$t3,$t2,$a2
FFFC2154 000EC903		lbu		$a0,[$t3]
FFFC2158 C78FE0EF		call	PutHexByte
FFFC215C 02006913		ldi		$a0,#' '
FFFC2160 858FE0EF		call	Putch
FFFC2164 001A0A13		add		$a2,$a2,#1
FFFC2168 FF5A14E3		bne		$a2,$a3,.0001
                        	.nxt:
FFFC216C 001D8D93		add		$t1,$t1,#1
FFFC2170 004DAE13		slt		$t2,$t1,#4
FFFC2174 F80E14E3		bne		$t2,$x0,.0002
FFFC2178 00072083		lw		$ra,[$sp]
FFFC217C 00472903		lw		$a0,4[$sp]
FFFC2180 00872A03		lw		$a2,8[$sp]
FFFC2184 00C72A83		lw		$a3,12[$sp]
FFFC2188 01072D83		lw		$t1,16[$sp]
FFFC218C 01472E03		lw		$t2,20[$sp]
FFFC2190 01872E83		lw		$t3,24[$sp]
FFFC2194 01C70713		add		$sp,$sp,#28
FFFC2198 10000073		eret
                        	
                        	.file "cs01rom.asm",1
                        	.file "cs01rom.asm",1
                        	.file "TinyBasic.asm",1
                        	.file "TinyBasic.asm",1
                        	;****************************************************************;
                        	;                                                                ;
                        	;		Tiny BASIC for the CS01                                      ;
                        	;                                                                ;
                        	; Derived from a 68000 derivative of Palo Alto Tiny BASIC as     ;
                        	; published in the May 1976 issue of Dr. Dobb's Journal.         ;
                        	; Adapted to the 68000 by:                                       ;
                        	;	Gordon brndly						                         ;
                        	;	12147 - 51 Street					                         ;
                        	;	Edmonton AB  T5W 3G8					                     ;
                        	;	Canada							                             ;
                        	;	(updated mailing address for 1996)			                 ;
                        	;                                                                ;
                        	; Adapted to the CS01 by:                                        ;
                        	;    Robert Finch                                                ;
                        	;    Ontario, Canada                                             ;
                        	;	 robfinch<remove>@finitron.ca    	                             ;  
                        	;****************************************************************;
                        	;  Copyright (C) 2016-2020 by Robert Finch. This program may be	 ;
                        	;    freely distributed for personal use only. All commercial	 ;
                        	;		       rights are reserved.			                     ;
                        	;****************************************************************;
                        	;
                        	; Register Usage
                        	; $t2 = text pointer (global usage)
                        	; r3,r4 = inputs parameters to subroutines
                        	; a1 = return value
                        	;
                        	;* Vers. 1.0  1984/7/17	- Original version by Gordon brndly
                        	;*	1.1  1984/12/9	- Addition of '0x' print term by Marvin Lipford
                        	;*	1.2  1985/4/9	- Bug fix in multiply routine by Rick Murray
                        	
                        	CR		EQU	0x0D		;ASCII equates
                        	LINEFD	EQU	0x0A		; Don't use LF (same as load float instruction)
                        	TAB		EQU	0x09
                        	CTRLC	EQU	0x03
                        	CTRLH	EQU	0x08
                        	CTRLI	EQU	0x09
                        	CTRLJ	EQU	0x0A
                        	CTRLK	EQU	0x0B
                        	CTRLM   EQU 0x0D
                        	CTRLS	EQU	0x13
                        	CTRLX	EQU	0x18
                        	XON		EQU	0x11
                        	XOFF	EQU	0x13
                        	
                        	FILENAME	EQU		0x6C0
                        	FILEBUF		EQU		0x07F600
                        	OSSP		EQU		0x700
                        	TXTUNF		EQU		OSSP+4
                        	VARBGN		EQU		TXTUNF+4
                        	VAREND		EQU		VARBGN+4
                        	LOPVAR		EQU		VAREND+4
                        	STKGOS		EQU		LOPVAR+4
                        	CURRNT		EQU		STKGOS+4
                        	BUFFER		EQU		CURRNT+4
                        	BUFLEN		EQU		84
                        	LOPPT		EQU		BUFFER+84
                        	LOPLN		EQU		LOPPT+4
                        	LOPINC		EQU		LOPLN+4
                        	LOPLMT		EQU		LOPINC+4
                        	NUMWKA		EQU		LOPLMT+24
                        	STKINP		EQU		NUMWKA+4
                        	STKBOT		EQU		STKINP+4
                        	usrJmp		EQU		STKBOT+4
                        	IRQROUT		EQU		usrJmp+4
                        	
                        	OUTPTR		EQU		IRQROUT+4
                        	INPPTR		EQU		OUTPTR+4
                        	CursorFlash	EQU		INPPTR+4
                        	IRQFlag		EQU		CursorFlash+4
                        	
                        	;
                        	; Modifiable system constants:
                        	;
                        	;THRD_AREA	dw	0x04000000	; threading switch area 0x04000000-0x40FFFFF
                        	;bitmap dw	0x00100000	; bitmap graphics memory 0x04100000-0x417FFFF
                        	TXTBGN		EQU		0x001800	;TXT ;beginning of program memory
                        	ENDMEM		EQU		0x008000	; end of available memory
                        	STACKOFFS	EQU		0x07FFFC	; stack offset
                        	
                        	
                        	.file "TinyBasic.asm",84
                        			code
FFFC219C 00000000			align	409
FFFC21A0 00000000
FFFC21A4 00000000
FFFC21A8 00000000
FFFC21AC 00000000
FFFC21B0 00000000
FFFC21B4 00000000
FFFC21B8 00000000
FFFC21BC 00000000
FFFC21C0 00000000
FFFC21C4 00000000
FFFC21C8 00000000
FFFC21CC 00000000
FFFC21D0 00000000
FFFC21D4 00000000
FFFC21D8 00000000
FFFC21DC 00000000
FFFC21E0 00000000
FFFC21E4 00000000
FFFC21E8 00000000
FFFC21EC 00000000
FFFC21F0 00000000
FFFC21F4 00000000
FFFC21F8 00000000
FFFC21FC 00000000
FFFC2200 00000000
FFFC2204 00000000
FFFC2208 00000000
FFFC220C 00000000
FFFC2210 00000000
FFFC2214 00000000
FFFC2218 00000000
FFFC221C 00000000
FFFC2220 00000000
FFFC2224 00000000
FFFC2228 00000000
FFFC222C 00000000
FFFC2230 00000000
FFFC2234 00000000
FFFC2238 00000000
FFFC223C 00000000
FFFC2240 00000000
FFFC2244 00000000
FFFC2248 00000000
FFFC224C 00000000
FFFC2250 00000000
FFFC2254 00000000
FFFC2258 00000000
FFFC225C 00000000
FFFC2260 00000000
FFFC2264 00000000
FFFC2268 00000000
FFFC226C 00000000
FFFC2270 00000000
FFFC2274 00000000
FFFC2278 00000000
FFFC227C 00000000
FFFC2280 00000000
FFFC2284 00000000
FFFC2288 00000000
FFFC228C 00000000
FFFC2290 00000000
FFFC2294 00000000
FFFC2298 00000000
FFFC229C 00000000
FFFC22A0 00000000
FFFC22A4 00000000
FFFC22A8 00000000
FFFC22AC 00000000
FFFC22B0 00000000
FFFC22B4 00000000
FFFC22B8 00000000
FFFC22BC 00000000
FFFC22C0 00000000
FFFC22C4 00000000
FFFC22C8 00000000
FFFC22CC 00000000
FFFC22D0 00000000
FFFC22D4 00000000
FFFC22D8 00000000
FFFC22DC 00000000
FFFC22E0 00000000
FFFC22E4 00000000
FFFC22E8 00000000
FFFC22EC 00000000
FFFC22F0 00000000
FFFC22F4 00000000
FFFC22F8 00000000
FFFC22FC 00000000
FFFC2300 00000000
FFFC2304 00000000
FFFC2308 00000000
FFFC230C 00000000
FFFC2310 00000000
FFFC2314 00000000
FFFC2318 00000000
FFFC231C 00000000
FFFC2320 00000000
FFFC2324 00000000
FFFC2328 00000000
FFFC232C 00000000
FFFC2330 00000000
FFFC2334 00000000
FFFC2338 00000000
FFFC233C 00000000
FFFC2340 00000000
FFFC2344 00000000
FFFC2348 00000000
FFFC234C 00000000
FFFC2350 00000000
FFFC2354 00000000
FFFC2358 00000000
FFFC235C 00000000
FFFC2360 00000000
FFFC2364 00000000
FFFC2368 00000000
FFFC236C 00000000
FFFC2370 00000000
FFFC2374 00000000
FFFC2378 00000000
FFFC237C 00000000
FFFC2380 00000000
FFFC2384 00000000
FFFC2388 00000000
FFFC238C 00000000
FFFC2390 00000000
FFFC2394 00000000
FFFC2398 00000000
FFFC239C 00000000
FFFC23A0 00000000
FFFC23A4 00000000
FFFC23A8 00000000
FFFC23AC 00000000
FFFC23B0 00000000
FFFC23B4 00000000
FFFC23B8 00000000
FFFC23BC 00000000
FFFC23C0 00000000
FFFC23C4 00000000
FFFC23C8 00000000
FFFC23CC 00000000
FFFC23D0 00000000
FFFC23D4 00000000
FFFC23D8 00000000
FFFC23DC 00000000
FFFC23E0 00000000
FFFC23E4 00000000
FFFC23E8 00000000
FFFC23EC 00000000
FFFC23F0 00000000
FFFC23F4 00000000
FFFC23F8 00000000
FFFC23FC 00000000
FFFC2400 00000000
FFFC2404 00000000
FFFC2408 00000000
FFFC240C 00000000
FFFC2410 00000000
FFFC2414 00000000
FFFC2418 00000000
FFFC241C 00000000
FFFC2420 00000000
FFFC2424 00000000
FFFC2428 00000000
FFFC242C 00000000
FFFC2430 00000000
FFFC2434 00000000
FFFC2438 00000000
FFFC243C 00000000
FFFC2440 00000000
FFFC2444 00000000
FFFC2448 00000000
FFFC244C 00000000
FFFC2450 00000000
FFFC2454 00000000
FFFC2458 00000000
FFFC245C 00000000
FFFC2460 00000000
FFFC2464 00000000
FFFC2468 00000000
FFFC246C 00000000
FFFC2470 00000000
FFFC2474 00000000
FFFC2478 00000000
FFFC247C 00000000
FFFC2480 00000000
FFFC2484 00000000
FFFC2488 00000000
FFFC248C 00000000
FFFC2490 00000000
FFFC2494 00000000
FFFC2498 00000000
FFFC249C 00000000
FFFC24A0 00000000
FFFC24A4 00000000
FFFC24A8 00000000
FFFC24AC 00000000
FFFC24B0 00000000
FFFC24B4 00000000
FFFC24B8 00000000
FFFC24BC 00000000
FFFC24C0 00000000
FFFC24C4 00000000
FFFC24C8 00000000
FFFC24CC 00000000
FFFC24D0 00000000
FFFC24D4 00000000
FFFC24D8 00000000
FFFC24DC 00000000
FFFC24E0 00000000
FFFC24E4 00000000
FFFC24E8 00000000
FFFC24EC 00000000
FFFC24F0 00000000
FFFC24F4 00000000
FFFC24F8 00000000
FFFC24FC 00000000
FFFC2500 00000000
FFFC2504 00000000
FFFC2508 00000000
FFFC250C 00000000
FFFC2510 00000000
FFFC2514 00000000
FFFC2518 00000000
FFFC251C 00000000
FFFC2520 00000000
FFFC2524 00000000
FFFC2528 00000000
FFFC252C 00000000
FFFC2530 00000000
FFFC2534 00000000
FFFC2538 00000000
FFFC253C 00000000
FFFC2540 00000000
FFFC2544 00000000
FFFC2548 00000000
FFFC254C 00000000
FFFC2550 00000000
FFFC2554 00000000
FFFC2558 00000000
FFFC255C 00000000
FFFC2560 00000000
FFFC2564 00000000
FFFC2568 00000000
FFFC256C 00000000
FFFC2570 00000000
FFFC2574 00000000
FFFC2578 00000000
FFFC257C 00000000
FFFC2580 00000000
FFFC2584 00000000
FFFC2588 00000000
FFFC258C 00000000
FFFC2590 00000000
FFFC2594 00000000
FFFC2598 00000000
FFFC259C 00000000
FFFC25A0 00000000
FFFC25A4 00000000
FFFC25A8 00000000
FFFC25AC 00000000
FFFC25B0 00000000
FFFC25B4 00000000
FFFC25B8 00000000
FFFC25BC 00000000
FFFC25C0 00000000
FFFC25C4 00000000
FFFC25C8 00000000
FFFC25CC 00000000
FFFC25D0 00000000
FFFC25D4 00000000
FFFC25D8 00000000
FFFC25DC 00000000
FFFC25E0 00000000
FFFC25E4 00000000
FFFC25E8 00000000
FFFC25EC 00000000
FFFC25F0 00000000
FFFC25F4 00000000
FFFC25F8 00000000
FFFC25FC 00000000
FFFC2600 00000000
FFFC2604 00000000
FFFC2608 00000000
FFFC260C 00000000
FFFC2610 00000000
FFFC2614 00000000
FFFC2618 00000000
FFFC261C 00000000
FFFC2620 00000000
FFFC2624 00000000
FFFC2628 00000000
FFFC262C 00000000
FFFC2630 00000000
FFFC2634 00000000
FFFC2638 00000000
FFFC263C 00000000
FFFC2640 00000000
FFFC2644 00000000
FFFC2648 00000000
FFFC264C 00000000
FFFC2650 00000000
FFFC2654 00000000
FFFC2658 00000000
FFFC265C 00000000
FFFC2660 00000000
FFFC2664 00000000
FFFC2668 00000000
FFFC266C 00000000
FFFC2670 00000000
FFFC2674 00000000
FFFC2678 00000000
FFFC267C 00000000
FFFC2680 00000000
FFFC2684 00000000
FFFC2688 00000000
FFFC268C 00000000
FFFC2690 00000000
FFFC2694 00000000
FFFC2698 00000000
FFFC269C 00000000
FFFC26A0 00000000
FFFC26A4 00000000
FFFC26A8 00000000
FFFC26AC 00000000
FFFC26B0 00000000
FFFC26B4 00000000
FFFC26B8 00000000
FFFC26BC 00000000
FFFC26C0 00000000
FFFC26C4 00000000
FFFC26C8 00000000
FFFC26CC 00000000
FFFC26D0 00000000
FFFC26D4 00000000
FFFC26D8 00000000
FFFC26DC 00000000
FFFC26E0 00000000
FFFC26E4 00000000
FFFC26E8 00000000
FFFC26EC 00000000
FFFC26F0 00000000
FFFC26F4 00000000
FFFC26F8 00000000
FFFC26FC 00000000
FFFC2700 00000000
FFFC2704 00000000
FFFC2708 00000000
FFFC270C 00000000
FFFC2710 00000000
FFFC2714 00000000
FFFC2718 00000000
FFFC271C 00000000
FFFC2720 00000000
FFFC2724 00000000
FFFC2728 00000000
FFFC272C 00000000
FFFC2730 00000000
FFFC2734 00000000
FFFC2738 00000000
FFFC273C 00000000
FFFC2740 00000000
FFFC2744 00000000
FFFC2748 00000000
FFFC274C 00000000
FFFC2750 00000000
FFFC2754 00000000
FFFC2758 00000000
FFFC275C 00000000
FFFC2760 00000000
FFFC2764 00000000
FFFC2768 00000000
FFFC276C 00000000
FFFC2770 00000000
FFFC2774 00000000
FFFC2778 00000000
FFFC277C 00000000
FFFC2780 00000000
FFFC2784 00000000
FFFC2788 00000000
FFFC278C 00000000
FFFC2790 00000000
FFFC2794 00000000
FFFC2798 00000000
FFFC279C 00000000
FFFC27A0 00000000
FFFC27A4 00000000
FFFC27A8 00000000
FFFC27AC 00000000
FFFC27B0 00000000
FFFC27B4 00000000
FFFC27B8 00000000
FFFC27BC 00000000
FFFC27C0 00000000
FFFC27C4 00000000
FFFC27C8 00000000
FFFC27CC 00000000
FFFC27D0 00000000
FFFC27D4 00000000
FFFC27D8 00000000
FFFC27DC 00000000
FFFC27E0 00000000
FFFC27E4 00000000
FFFC27E8 00000000
FFFC27EC 00000000
FFFC27F0 00000000
FFFC27F4 00000000
FFFC27F8 00000000
FFFC27FC 00000000
FFFC2800 00000000
FFFC2804 00000000
FFFC2808 00000000
FFFC280C 00000000
FFFC2810 00000000
FFFC2814 00000000
FFFC2818 00000000
FFFC281C 00000000
FFFC2820 00000000
FFFC2824 00000000
FFFC2828 00000000
FFFC282C 00000000
FFFC2830 00000000
FFFC2834 00000000
FFFC2838 00000000
FFFC283C 00000000
FFFC2840 00000000
FFFC2844 00000000
FFFC2848 00000000
FFFC284C 00000000
FFFC2850 00000000
FFFC2854 00000000
FFFC2858 00000000
FFFC285C 00000000
FFFC2860 00000000
FFFC2864 00000000
FFFC2868 00000000
FFFC286C 00000000
FFFC2870 00000000
FFFC2874 00000000
FFFC2878 00000000
FFFC287C 00000000
FFFC2880 00000000
FFFC2884 00000000
FFFC2888 00000000
FFFC288C 00000000
FFFC2890 00000000
FFFC2894 00000000
FFFC2898 00000000
FFFC289C 00000000
FFFC28A0 00000000
FFFC28A4 00000000
FFFC28A8 00000000
FFFC28AC 00000000
FFFC28B0 00000000
FFFC28B4 00000000
FFFC28B8 00000000
FFFC28BC 00000000
FFFC28C0 00000000
FFFC28C4 00000000
FFFC28C8 00000000
FFFC28CC 00000000
FFFC28D0 00000000
FFFC28D4 00000000
FFFC28D8 00000000
FFFC28DC 00000000
FFFC28E0 00000000
FFFC28E4 00000000
FFFC28E8 00000000
FFFC28EC 00000000
FFFC28F0 00000000
FFFC28F4 00000000
FFFC28F8 00000000
FFFC28FC 00000000
FFFC2900 00000000
FFFC2904 00000000
FFFC2908 00000000
FFFC290C 00000000
FFFC2910 00000000
FFFC2914 00000000
FFFC2918 00000000
FFFC291C 00000000
FFFC2920 00000000
FFFC2924 00000000
FFFC2928 00000000
FFFC292C 00000000
FFFC2930 00000000
FFFC2934 00000000
FFFC2938 00000000
FFFC293C 00000000
FFFC2940 00000000
FFFC2944 00000000
FFFC2948 00000000
FFFC294C 00000000
FFFC2950 00000000
FFFC2954 00000000
FFFC2958 00000000
FFFC295C 00000000
FFFC2960 00000000
FFFC2964 00000000
FFFC2968 00000000
FFFC296C 00000000
FFFC2970 00000000
FFFC2974 00000000
FFFC2978 00000000
FFFC297C 00000000
FFFC2980 00000000
FFFC2984 00000000
FFFC2988 00000000
FFFC298C 00000000
FFFC2990 00000000
FFFC2994 00000000
FFFC2998 00000000
FFFC299C 00000000
FFFC29A0 00000000
FFFC29A4 00000000
FFFC29A8 00000000
FFFC29AC 00000000
FFFC29B0 00000000
FFFC29B4 00000000
FFFC29B8 00000000
FFFC29BC 00000000
FFFC29C0 00000000
FFFC29C4 00000000
FFFC29C8 00000000
FFFC29CC 00000000
FFFC29D0 00000000
FFFC29D4 00000000
FFFC29D8 00000000
FFFC29DC 00000000
FFFC29E0 00000000
FFFC29E4 00000000
FFFC29E8 00000000
FFFC29EC 00000000
FFFC29F0 00000000
FFFC29F4 00000000
FFFC29F8 00000000
FFFC29FC 00000000
FFFC2A00 00000000
FFFC2A04 00000000
FFFC2A08 00000000
FFFC2A0C 00000000
FFFC2A10 00000000
FFFC2A14 00000000
FFFC2A18 00000000
FFFC2A1C 00000000
FFFC2A20 00000000
FFFC2A24 00000000
FFFC2A28 00000000
FFFC2A2C 00000000
FFFC2A30 00000000
FFFC2A34 00000000
FFFC2A38 00000000
FFFC2A3C 00000000
FFFC2A40 00000000
FFFC2A44 00000000
FFFC2A48 00000000
FFFC2A4C 00000000
FFFC2A50 00000000
FFFC2A54 00000000
FFFC2A58 00000000
FFFC2A5C 00000000
FFFC2A60 00000000
FFFC2A64 00000000
FFFC2A68 00000000
FFFC2A6C 00000000
FFFC2A70 00000000
FFFC2A74 00000000
FFFC2A78 00000000
FFFC2A7C 00000000
FFFC2A80 00000000
FFFC2A84 00000000
FFFC2A88 00000000
FFFC2A8C 00000000
FFFC2A90 00000000
FFFC2A94 00000000
FFFC2A98 00000000
FFFC2A9C 00000000
FFFC2AA0 00000000
FFFC2AA4 00000000
FFFC2AA8 00000000
FFFC2AAC 00000000
FFFC2AB0 00000000
FFFC2AB4 00000000
FFFC2AB8 00000000
FFFC2ABC 00000000
FFFC2AC0 00000000
FFFC2AC4 00000000
FFFC2AC8 00000000
FFFC2ACC 00000000
FFFC2AD0 00000000
FFFC2AD4 00000000
FFFC2AD8 00000000
FFFC2ADC 00000000
FFFC2AE0 00000000
FFFC2AE4 00000000
FFFC2AE8 00000000
FFFC2AEC 00000000
FFFC2AF0 00000000
FFFC2AF4 00000000
FFFC2AF8 00000000
FFFC2AFC 00000000
FFFC2B00 00000000
FFFC2B04 00000000
FFFC2B08 00000000
FFFC2B0C 00000000
FFFC2B10 00000000
FFFC2B14 00000000
FFFC2B18 00000000
FFFC2B1C 00000000
FFFC2B20 00000000
FFFC2B24 00000000
FFFC2B28 00000000
FFFC2B2C 00000000
FFFC2B30 00000000
FFFC2B34 00000000
FFFC2B38 00000000
FFFC2B3C 00000000
FFFC2B40 00000000
FFFC2B44 00000000
FFFC2B48 00000000
FFFC2B4C 00000000
FFFC2B50 00000000
FFFC2B54 00000000
FFFC2B58 00000000
FFFC2B5C 00000000
FFFC2B60 00000000
FFFC2B64 00000000
FFFC2B68 00000000
FFFC2B6C 00000000
FFFC2B70 00000000
FFFC2B74 00000000
FFFC2B78 00000000
FFFC2B7C 00000000
FFFC2B80 00000000
FFFC2B84 00000000
FFFC2B88 00000000
FFFC2B8C 00000000
FFFC2B90 00000000
FFFC2B94 00000000
FFFC2B98 00000000
FFFC2B9C 00000000
FFFC2BA0 00000000
FFFC2BA4 00000000
FFFC2BA8 00000000
FFFC2BAC 00000000
FFFC2BB0 00000000
FFFC2BB4 00000000
FFFC2BB8 00000000
FFFC2BBC 00000000
FFFC2BC0 00000000
FFFC2BC4 00000000
FFFC2BC8 00000000
FFFC2BCC 00000000
FFFC2BD0 00000000
FFFC2BD4 00000000
FFFC2BD8 00000000
FFFC2BDC 00000000
FFFC2BE0 00000000
FFFC2BE4 00000000
FFFC2BE8 00000000
FFFC2BEC 00000000
FFFC2BF0 00000000
FFFC2BF4 00000000
FFFC2BF8 00000000
FFFC2BFC 00000000
FFFC2C00 00000000
FFFC2C04 00000000
FFFC2C08 00000000
FFFC2C0C 00000000
FFFC2C10 00000000
FFFC2C14 00000000
FFFC2C18 00000000
FFFC2C1C 00000000
FFFC2C20 00000000
FFFC2C24 00000000
FFFC2C28 00000000
FFFC2C2C 00000000
FFFC2C30 00000000
FFFC2C34 00000000
FFFC2C38 00000000
FFFC2C3C 00000000
FFFC2C40 00000000
FFFC2C44 00000000
FFFC2C48 00000000
FFFC2C4C 00000000
FFFC2C50 00000000
FFFC2C54 00000000
FFFC2C58 00000000
FFFC2C5C 00000000
FFFC2C60 00000000
FFFC2C64 00000000
FFFC2C68 00000000
FFFC2C6C 00000000
FFFC2C70 00000000
FFFC2C74 00000000
FFFC2C78 00000000
FFFC2C7C 00000000
FFFC2C80 00000000
FFFC2C84 00000000
FFFC2C88 00000000
FFFC2C8C 00000000
FFFC2C90 00000000
FFFC2C94 00000000
FFFC2C98 00000000
FFFC2C9C 00000000
FFFC2CA0 00000000
FFFC2CA4 00000000
FFFC2CA8 00000000
FFFC2CAC 00000000
FFFC2CB0 00000000
FFFC2CB4 00000000
FFFC2CB8 00000000
FFFC2CBC 00000000
FFFC2CC0 00000000
FFFC2CC4 00000000
FFFC2CC8 00000000
FFFC2CCC 00000000
FFFC2CD0 00000000
FFFC2CD4 00000000
FFFC2CD8 00000000
FFFC2CDC 00000000
FFFC2CE0 00000000
FFFC2CE4 00000000
FFFC2CE8 00000000
FFFC2CEC 00000000
FFFC2CF0 00000000
FFFC2CF4 00000000
FFFC2CF8 00000000
FFFC2CFC 00000000
FFFC2D00 00000000
FFFC2D04 00000000
FFFC2D08 00000000
FFFC2D0C 00000000
FFFC2D10 00000000
FFFC2D14 00000000
FFFC2D18 00000000
FFFC2D1C 00000000
FFFC2D20 00000000
FFFC2D24 00000000
FFFC2D28 00000000
FFFC2D2C 00000000
FFFC2D30 00000000
FFFC2D34 00000000
FFFC2D38 00000000
FFFC2D3C 00000000
FFFC2D40 00000000
FFFC2D44 00000000
FFFC2D48 00000000
FFFC2D4C 00000000
FFFC2D50 00000000
FFFC2D54 00000000
FFFC2D58 00000000
FFFC2D5C 00000000
FFFC2D60 00000000
FFFC2D64 00000000
FFFC2D68 00000000
FFFC2D6C 00000000
FFFC2D70 00000000
FFFC2D74 00000000
FFFC2D78 00000000
FFFC2D7C 00000000
FFFC2D80 00000000
FFFC2D84 00000000
FFFC2D88 00000000
FFFC2D8C 00000000
FFFC2D90 00000000
FFFC2D94 00000000
FFFC2D98 00000000
FFFC2D9C 00000000
FFFC2DA0 00000000
FFFC2DA4 00000000
FFFC2DA8 00000000
FFFC2DAC 00000000
FFFC2DB0 00000000
FFFC2DB4 00000000
FFFC2DB8 00000000
FFFC2DBC 00000000
FFFC2DC0 00000000
FFFC2DC4 00000000
FFFC2DC8 00000000
FFFC2DCC 00000000
FFFC2DD0 00000000
FFFC2DD4 00000000
FFFC2DD8 00000000
FFFC2DDC 00000000
FFFC2DE0 00000000
FFFC2DE4 00000000
FFFC2DE8 00000000
FFFC2DEC 00000000
FFFC2DF0 00000000
FFFC2DF4 00000000
FFFC2DF8 00000000
FFFC2DFC 00000000
FFFC2E00 00000000
FFFC2E04 00000000
FFFC2E08 00000000
FFFC2E0C 00000000
FFFC2E10 00000000
FFFC2E14 00000000
FFFC2E18 00000000
FFFC2E1C 00000000
FFFC2E20 00000000
FFFC2E24 00000000
FFFC2E28 00000000
FFFC2E2C 00000000
FFFC2E30 00000000
FFFC2E34 00000000
FFFC2E38 00000000
FFFC2E3C 00000000
FFFC2E40 00000000
FFFC2E44 00000000
FFFC2E48 00000000
FFFC2E4C 00000000
FFFC2E50 00000000
FFFC2E54 00000000
FFFC2E58 00000000
FFFC2E5C 00000000
FFFC2E60 00000000
FFFC2E64 00000000
FFFC2E68 00000000
FFFC2E6C 00000000
FFFC2E70 00000000
FFFC2E74 00000000
FFFC2E78 00000000
FFFC2E7C 00000000
FFFC2E80 00000000
FFFC2E84 00000000
FFFC2E88 00000000
FFFC2E8C 00000000
FFFC2E90 00000000
FFFC2E94 00000000
FFFC2E98 00000000
FFFC2E9C 00000000
FFFC2EA0 00000000
FFFC2EA4 00000000
FFFC2EA8 00000000
FFFC2EAC 00000000
FFFC2EB0 00000000
FFFC2EB4 00000000
FFFC2EB8 00000000
FFFC2EBC 00000000
FFFC2EC0 00000000
FFFC2EC4 00000000
FFFC2EC8 00000000
FFFC2ECC 00000000
FFFC2ED0 00000000
FFFC2ED4 00000000
FFFC2ED8 00000000
FFFC2EDC 00000000
FFFC2EE0 00000000
FFFC2EE4 00000000
FFFC2EE8 00000000
FFFC2EEC 00000000
FFFC2EF0 00000000
FFFC2EF4 00000000
FFFC2EF8 00000000
FFFC2EFC 00000000
FFFC2F00 00000000
FFFC2F04 00000000
FFFC2F08 00000000
FFFC2F0C 00000000
FFFC2F10 00000000
FFFC2F14 00000000
FFFC2F18 00000000
FFFC2F1C 00000000
FFFC2F20 00000000
FFFC2F24 00000000
FFFC2F28 00000000
FFFC2F2C 00000000
FFFC2F30 00000000
FFFC2F34 00000000
FFFC2F38 00000000
FFFC2F3C 00000000
FFFC2F40 00000000
FFFC2F44 00000000
FFFC2F48 00000000
FFFC2F4C 00000000
FFFC2F50 00000000
FFFC2F54 00000000
FFFC2F58 00000000
FFFC2F5C 00000000
FFFC2F60 00000000
FFFC2F64 00000000
FFFC2F68 00000000
FFFC2F6C 00000000
FFFC2F70 00000000
FFFC2F74 00000000
FFFC2F78 00000000
FFFC2F7C 00000000
FFFC2F80 00000000
FFFC2F84 00000000
FFFC2F88 00000000
FFFC2F8C 00000000
FFFC2F90 00000000
FFFC2F94 00000000
FFFC2F98 00000000
FFFC2F9C 00000000
FFFC2FA0 00000000
FFFC2FA4 00000000
FFFC2FA8 00000000
FFFC2FAC 00000000
FFFC2FB0 00000000
FFFC2FB4 00000000
FFFC2FB8 00000000
FFFC2FBC 00000000
FFFC2FC0 00000000
FFFC2FC4 00000000
FFFC2FC8 00000000
FFFC2FCC 00000000
FFFC2FD0 00000000
FFFC2FD4 00000000
FFFC2FD8 00000000
FFFC2FDC 00000000
FFFC2FE0 00000000
FFFC2FE4 00000000
FFFC2FE8 00000000
FFFC2FEC 00000000
FFFC2FF0 00000000
FFFC2FF4 00000000
FFFC2FF8 00000000
FFFC2FFC 00000000
                        	
                        	;
                        	; Standard jump table. You can change these addresses if you are
                        	; customizing this interpreter for a different environment.
                        	;
                        	TinyBasic:
                        	GOSTART:	
FFFC3000 0300006F			jmp	CSTART	;	Cold Start entry point
                        	GOWARM:	
FFFC3004 0A80006F			jmp	WSTART	;	Warm Start entry point
                        	GOOUT:	
FFFC3008 3350106F			jmp	OUTC	;	Jump to character-out routine
                        	GOIN:	
FFFC300C 3350106F			jmp	INCH	;Jump to character-in routine
                        	GOAUXO:	
FFFC3010 00000637			jmp	AUXOUT	;	Jump to auxiliary-out routine
FFFC3014 17E60067
                        	GOAUXI:	
FFFC3018 00000637			jmp	AUXIN	;	Jump to auxiliary-in routine
FFFC301C 18060067
                        	GOBYE:	
FFFC3020 3510106F			jmp	BYEBYE	;	Jump to monitor, DOS, etc.
                        	
FFFC3024 00000000		align	1
FFFC3028 00000000
FFFC302C 00000000
                        	
                        	//message "CSTART"
                        	public CSTART:
	; First save off the link register and OS sp value
FFFC3030 70E02023		sw		$sp,OSSP
FFFC3034 00080737		ldi		$sp,#STACKOFFS	; initialize stack pointer
FFFC3038 FFC70713
                        	//	call	_RequestIOFocus
                        	;	call	_DBGHomeCursor[pc]
FFFC303C 00006933		mov		a0,r0			; turn off keyboard echoing
                        	//	call	SetKeyboardEcho
                        	//	stz		CursorFlash
                        	//	ldx		#0x10000020	; black chars, yellow background
                        	;	stx		charToPrint
                        	;	call	_DBGClearScreen[pc]
FFFC3040 FFFC5937		ldi		a0,#msgInit	;	tell who we are
FFFC3044 B7890913
FFFC3048 2DD010EF		call	PRMESG
FFFC304C 00002937		ldi		a0,#TXTBGN	;	init. end-of-program pointer
FFFC3050 80090913
FFFC3054 71202223		sw		a0,TXTUNF
FFFC3058 00008937		ldi		a0,#ENDMEM	;	get address of end of memory
FFFC305C 00090913
FFFC3060 00080937		ldi		a0,#$7F800
FFFC3064 80090913
FFFC3068 79202E23		sw		a0,STKBOT
FFFC306C 00008937		ldi		a0,#ENDMEM
FFFC3070 00090913
FFFC3074 71202623		sw		a0,VAREND
FFFC3078 CE090913		sub		a0,a0,#800 	;   100 vars
FFFC307C 71202423		sw    a0,VARBGN
FFFC3080 450000EF		call  clearVars   ; clear the variable area
FFFC3084 7A002223		sw		r0,IRQROUT
FFFC3088 70802903		lw    a0,VARBGN   ; calculate number of bytes free
FFFC308C 70402983		lw		a1,TXTUNF
FFFC3090 41390933		sub   a0,a0,a1
FFFC3094 00606993		ldi		a1,#6		; max 6 digits
FFFC3098 00A06A13		ldi		a2,#10	; base 10
FFFC309C 7B8010EF		call  PRTNUM
FFFC30A0 FFFC5937		ldi		a0,#msgBytesFree
FFFC30A4 C1990913
FFFC30A8 27D010EF		call	PRMESG
                        	WSTART:
FFFC30AC 70002823		sw		x0,LOPVAR   ; initialize internal variables
FFFC30B0 70002A23		sw		x0,STKGOS
FFFC30B4 70002C23		sw		x0,CURRNT	;	current line number pointer = 0
FFFC30B8 00080737		ldi		$sp,#STACKOFFS	;	init S.P. again, just in case
FFFC30BC FFC70713
FFFC30C0 FFFC5937		ldi		a0,#msgReady	;	display "Ready"
FFFC30C4 C2690913
FFFC30C8 25D010EF		call	PRMESG
                        	BASPRMPT:
FFFC30CC 03E06913		ldi		a0,#'>'		; Prompt with a '>' and
FFFC30D0 468010EF		call	GETLN		; read a line.
FFFC30D4 1A1010EF		call	TOUPBUF 	; convert to upper case
FFFC30D8 000E64B3		mov		$s6,$t2		; save pointer to end of line
FFFC30DC 71C06E13		ldi		$t2,#BUFFER	; point to the beginning of line
FFFC30E0 0F1010EF		call	TSTNUM		; is there a number there?
FFFC30E4 161010EF		call	IGNBLK		; skip trailing blanks
FFFC30E8 000E4483		lbu		$s6,[$t2]
FFFC30EC 00D4C493		xor		$s6,$s6,#CR	; s6 = flag empty line
                        	; does line no. exist? (or nonzero?)
FFFC30F0 26088863		beq		v1,x0,DIRECT		; if not, it's a direct statement
FFFC30F4 00100DB7		ldi		$t1,#$FFFFF
FFFC30F8 FFFD8D93
FFFC30FC 010DD863		ble		v0,$t1,ST2	; see if line no. is <= 16 bits
FFFC3100 FFFC5937		ldi		a0,#msgLineRange	; if not, we've overflowed
FFFC3104 C4190913
FFFC3108 3EC0106F		jmp		ERROR
                        	ST2:
FFFC310C 00086933	  mov		$a0,$v0		; a0 = line number
FFFC3110 000E6433	  mov		$s5,$t2			; save line buffer pointer
FFFC3114 FFCE0E13		sub		$t2,$t2,#4
FFFC3118 012E2023	  sw		$a0,[$t2]		;	This will end up in buffer
FFFC311C 510010EF		call	FNDLN		; find this line in save area
FFFC3120 000EE533		mov		$s7,$t3		; save possible line pointer
FFFC3124 00080663		beq		$v0,$x0,INSLINE	; if not found, insert
FFFC3128 000EE933		mov		$a0,$t3
FFFC312C 044000EF		call	DeleteLine
                        	INSLINE:
FFFC3130 F8048EE3		beq		$s6,$x0,BASPRMPT	; line was empty
FFFC3134 00046933		mov		$a0,$s5			; a0 = buffer pointer	
                        		; GetBuflen just get the length of the text.
                        		; A line number is stuffed just before the text
                        		; so length needs to be adjusted by 4.
FFFC3138 0A0000EF		call	GetBuflen
FFFC313C 00480393		add		$s4,$v0,#4
FFFC3140 00056933		mov		$a0,$s7
FFFC3144 0003E9B3		mov		$a1,$s4
FFFC3148 0BC000EF		call	OpenSpace
FFFC314C 00081863		bne		$v0,$x0,.0001	; space available?
FFFC3150 FFFC5937		ldi		a0,#msgTooBig	; no space available
FFFC3154 D1390913
FFFC3158 39C0106F		jmp		ERROR
                        	.0001:
FFFC315C 00056933		mov		$a0,$s7			; target
FFFC3160 FFC40993		sub		$a1,$s5,#4	; source (incl lineno)
FFFC3164 0003EA33		mov		$a2,$s4			; length
FFFC3168 050000EF		call	InsertLine
FFFC316C F60000E3		bra		BASPRMPT
                        	
                        	;------------------------------------------------------------------------------
                        	; Parameters:
                        	;		a0 = pointer to line to delete
                        	; Modifies:
                        	;		t0,t1,t2,t3
                        	; Returns:
                        	;		none
                        	;------------------------------------------------------------------------------
                        	
                        	DeleteLine:
                        		; Find the end of the line to delete
FFFC3170 00490D13		add		$t0,$a0,#4		; t0 = pointer to line past line number
FFFC3174 00D06E13		ldi		$t2,#CR
FFFC3178 70402E83		lw		$t3,TXTUNF		; last text address
                        	.0002:
FFFC317C 000D4D83		lbu		$t1,[$t0]
FFFC3180 000D8A63		beq		$t1,$x0,.0003	; might be null
FFFC3184 01CD8663		beq		$t1,$t2,.0001	; lines end with CR
FFFC3188 001D0D13		add		$t0,$t0,#1
FFFC318C FFDD68E3		bltu	$t0,$t3,.0002	; end of program?
                        	.0001:
FFFC3190 001D0D13		add		$t0,$t0,#1
                        	.0003:
                        		; pull text after eol overtop
FFFC3194 000D4F03		lbu		$t4,[$t0]			; copy from next line
FFFC3198 01E90023		sb		$t4,[$a0]			; overtop deleted line
FFFC319C 001D0D13		add		$t0,$t0,#1		; increment pointers
FFFC31A0 00190913		add		$a0,$a0,#1
FFFC31A4 FFAEF8E3		bleu	$t0,$t3,.0003	; to end of program
                        		; update end of text
FFFC31A8 412D0933		sub		$a0,$t0,$a0		; difference of pointers = length
FFFC31AC 412E8EB3		sub		$t3,$t3,$a0		
FFFC31B0 71D02223		sw		$t3,TXTUNF
FFFC31B4 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Parameters:
                        	; 	a0 = insertion point
                        	; 	a1 = source buffer
                        	; 	a2 = length
                        	; Modifies:
                        	;		a0,a1,a2,t1
                        	; Returns:
                        	;		none
                        	;------------------------------------------------------------------------------
                        	
                        	InsertLine:
FFFC31B8 000A0E63		beq		$a2,$x0,.done		; zero length? Probably a SW error
                        	.0001:
FFFC31BC 0009CD83		lbu		$t1,[$a1]				; get from source text
FFFC31C0 01B90023		sb		$t1,[$a0]				; store to insertion point
FFFC31C4 00198993		add		$a1,$a1,#1			; increment pointers
FFFC31C8 00190913		add		$a0,$a0,#1
FFFC31CC FFFA0A13		sub		$a2,$a2,#1			; decrement length
FFFC31D0 FF4066E3		bgtu	$a2,$x0,.0001
                        	.done:
FFFC31D4 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; GetBuflen - get the length of text in a buffer. The length is taken up to
                        	; the first null character or carriage return character encountered.
                        	;
                        	; Parameters:
                        	;		a0 = pointer to buffer
                        	; Modifies:
                        	;		t2,t3,t5
                        	; Returns:
                        	;		v0 = length of data in buffer
                        	;------------------------------------------------------------------------------
                        	
                        	GetBuflen:
FFFC31D8 00006813		ldi		$v0,#0
FFFC31DC 00D06E93		ldi		$t3,#CR
FFFC31E0 00096FB3		mov		$t5,$a0
                        	.0002:
FFFC31E4 000FCE03		lbu		$t2,[$t5]
FFFC31E8 001F8F93		add		$t5,$t5,#1
FFFC31EC 000E0A63		beq		$t2,$x0,.0001
FFFC31F0 01DE0663		beq		$t2,$t3,.0004
FFFC31F4 00180813		add		$v0,$v0,#1
FFFC31F8 FE0006E3		bra		.0002
                        	.0004:
FFFC31FC 00180813		add		$v0,$v0,#1
                        	.0001:
FFFC3200 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Parameters:
                        	; 	a0 = place to insert line
                        	; 	a1 = buffer length
                        	; Modifies:
                        	;		t1,t2,t3,t5
                        	; Returns:
                        	;		v0 = 1 if successful, 0 if not enough room available
                        	;------------------------------------------------------------------------------
                        	
                        	OpenSpace:
FFFC3204 70402E03		lw		$t2,TXTUNF
FFFC3208 000E6EB3		mov		$t3,$t2				; t3 = old end of text
FFFC320C 013E0E33		add		$t2,$t2,$a1		; increment end of text by buffer length
FFFC3210 70802D83		lw		$t1,VARBGN		; compare to start of variables
FFFC3214 03BE7263		bgeu	$t2,$t1,.noSpace	; enough room?
FFFC3218 71C02223		sw		$t2,TXTUNF		; yes, set new end of text
                        	.0003:
FFFC321C 000ECF83		lbu		$t5,[$t3]			; copy old text
FFFC3220 01FE0023		sb		$t5,[$t2]			; to new text loc
FFFC3224 FFFE8E93		sub		$t3,$t3,#1		; decrement pointers
FFFC3228 FFFE0E13		sub		$t2,$t2,#1
FFFC322C FF2EF8E3		bgeu	$t3,$a0,.0003	; until insert point reached
FFFC3230 00106813		ldi		$v0,#1				; return success
FFFC3234 00008067		ret
                        	.noSpace:
FFFC3238 00006813		ldi		$v0,#0
FFFC323C 00008067		ret	
                        	
                        	;******************************************************************
                        	;
                        	; *** Tables *** DIRECT *** EXEC ***
                        	;
                        	; This section of the code tests a string against a table. When
                        	; a match is found, control is transferred to the section of
                        	; code according to the table.
                        	;
                        	; At 'EXEC', r8 should point to the string, r9 should point to
                        	; the character table, and r10 should point to the execution
                        	; table. At 'DIRECT', r8 should point to the string, r9 and
                        	; r10 will be set up to point to TAB1 and TAB1_1, which are
                        	; the tables of all direct and statement commands.
                        	;
                        	; A '.' in the string will terminate the test and the partial
                        	; match will be considered as a match, e.g. 'P.', 'PR.','PRI.',
                        	; 'PRIN.', or 'PRINT' will all match 'PRINT'.
                        	;
                        	; There are two tables: the character table and the execution
                        	; table. The character table consists of any number of text items.
                        	; Each item is a string of characters with the last character's
                        	; high bit set to one. The execution table holds a 32-bit
                        	; execution addresses that correspond to each entry in the
                        	; character table.
                        	;
                        	; The end of the character table is a 0 byte which corresponds
                        	; to the default routine in the execution table, which is
                        	; executed if none of the other table items are matched.
                        	;
                        	; Character-matching tables:
                        	TAB1:
FFFC3240 D453494C		db	"LIS",'T'+0x80        ; Direct commands
FFFC3244 C4414F4C		db	"LOA",'D'+0x80
FFFC3248 52D7454E		db	"NE",'W'+0x80
FFFC324B 53CE5552		db	"RU",'N'+0x80
FFFC324E C5564153		db	"SAV",'E'+0x80
                        	TAB2:
FFFC3252 D458454E		db	"NEX",'T'+0x80         ; Direct / statement
FFFC3256 49D4454C		db	"LE",'T'+0x80
FFFC3259 4F47C649		db	"I",'F'+0x80
FFFC325B CF544F47		db	"GOT",'O'+0x80
FFFC325F 55534F47		db	"GOSU",'B'+0x80
FFFC3263 544552C2
FFFC3264 55544552		db	"RETUR",'N'+0x80
FFFC3268 4552CE52
FFFC326A 46CD4552		db	"RE",'M'+0x80
FFFC326D 49D24F46		db	"FO",'R'+0x80
FFFC3270 55504E49		db	"INPU",'T'+0x80
FFFC3274 495250D4
FFFC3275 4E495250		db	"PRIN",'T'+0x80
FFFC3279 4B4F50D4
FFFC327A C54B4F50		db	"POK",'E'+0x80
FFFC327E 454B4F50		db	"POKE",'W'+0x80
FFFC3282 4B4F50D7
FFFC3283 454B4F50		db	"POKE",'H'+0x80
FFFC3287 454959C8
FFFC3288 4C454959		db	"YIEL",'D'+0x80
FFFC328C 4F5453C4
FFFC328D D04F5453		db	"STO",'P'+0x80
FFFC3291 53C55942		db	"BY",'E'+0x80
FFFC3294 43D35953		db	"SY",'S'+0x80
FFFC3297 43D34C43		db	"CL",'S'+0x80
FFFC329A 52D24C43	    db  "CL",'R'+0x80
FFFC329D C6434452	    db	"RDC",'F'+0x80
FFFC32A1 52494E4F	    db	"ONIR",'Q'+0x80
FFFC32A5 494157D1
FFFC32A6 D4494157	    db	"WAI",'T'+0x80
FFFC32AA 45455000		db	0
                        	TAB4:
FFFC32AB CB454550		db	"PEE",'K'+0x80         ;Functions
FFFC32AF 4B454550		db	"PEEK",'W'+0x80
FFFC32B3 454550D7
FFFC32B4 4B454550		db	"PEEK",'H'+0x80
FFFC32B8 C44E52C8
FFFC32B9 41C44E52		db	"RN",'D'+0x80
FFFC32BC 53D34241		db	"AB",'S'+0x80
FFFC32BF 54CE4753		db  "SG",'N'+0x80
FFFC32C2 CB434954		db	"TIC",'K'+0x80
FFFC32C6 C55A4953		db	"SIZ",'E'+0x80
FFFC32CA 00D25355		db  "US",'R'+0x80
FFFC32CD 00CF5400		db	0
                        	TAB5:
FFFC32CE 5300CF54		db	"T",'O'+0x80           ;"TO" in "FOR"
FFFC32D0 45545300		db	0
                        	TAB6:
FFFC32D1 D0455453		db	"STE",'P'+0x80         ;"STEP" in "FOR"
FFFC32D5 3CBD3E00		db	0
                        	TAB8:
FFFC32D6 BE3CBD3E		db	'>','='+0x80           ;Relational operators
FFFC32D8 BDBEBE3C		db	'<','>'+0x80
FFFC32DA BD3CBDBE		db	'>'+0x80
FFFC32DB BCBD3CBD		db	'='+0x80
FFFC32DC 00BCBD3C		db	'<','='+0x80
FFFC32DE 4E4100BC		db	'<'+0x80
FFFC32DF C44E4100		db	0
                        	TAB9:
FFFC32E0 00C44E41	    db  "AN",'D'+0x80
FFFC32E3 00D24F00	    db  0
                        	TAB10:
FFFC32E4 0000D24F	    db  "O",'R'+0x80
FFFC32E6 35400000	    db  0
                        	
                        	;* Execution address tables:
                        	; We save some bytes by specifiying only the low order 16 bits of the address
                        	;
FFFC32E7 08354000		align	
                        	
                        	TAB1_1:
FFFC32E8 3A083540		dh	LISTX			;Direct commands
FFFC32EA 33E83A08		dh	LOAD3
FFFC32EC 341033E8		dh	NEW
FFFC32EE 3A703410		dh	RUN
FFFC32F0 373C3A70		dh	SAVE3
                        	TAB2_1:
FFFC32F2 38C0373C		dh	NEXT		;	Direct / statement
FFFC32F4 37B438C0		dh	LET
FFFC32F6 34A437B4		dh	IF0
FFFC32F8 362834A4		dh	GOTO
FFFC32FA 366C3628		dh	GOSUB
FFFC32FC 37C0366C		dh	RETURN
FFFC32FE 36B037C0		dh	IF2			; REM
FFFC3300 37F436B0		dh	FOR
FFFC3302 358837F4		dh	INPUT
FFFC3304 3BCC3588		dh	PRINT
FFFC3306 3BF83BCC		dh	POKE
FFFC3308 3C243BF8		dh	POKEW
FFFC330A 34043C24		dh	POKEH
FFFC330C 33FC3404		dh	YIELD0
FFFC330E 302033FC		dh	STOP
FFFC3310 3C5C3020		dh	GOBYE
FFFC3312 01C33C5C		dh	SYSX
FFFC3314 34C801C3		dh	_cls
FFFC3316 01C534C8		dh  _clr
FFFC3318 350801C5		dh	_rdcf
FFFC331A 35303508		dh  ONIRQ
FFFC331C 38B43530		dh	WAITIRQ
FFFC331E 428C38B4		dh	DEFLT
                        	TAB4_1:
FFFC3320 42A4428C		dh	PEEK			;Functions
FFFC3322 42BC42A4		dh	PEEKW
FFFC3324 431442BC		dh	PEEKH
FFFC3326 00004314		dh	RND
FFFC3328 43A80000		dh	ABS
FFFC332A 439443A8		dh  SGN
FFFC332C 43E44394		dh	TICKX
FFFC332E 42D443E4		dh	SIZEX
FFFC3330 405442D4		dh  USRX
FFFC3332 36D04054		dh	XP40
                        	TAB5_1
FFFC3334 44EC36D0		dh	FR1			;"TO" in "FOR"
FFFC3336 36EC44EC		dh	QWHAT
                        	TAB6_1
FFFC3338 36F436EC		dh	FR2			;"STEP" in "FOR"
FFFC333A 3E0C36F4		dh	FR3
                        	TAB8_1
FFFC333C 3E243E0C		dh	XP11	;>=		Relational operators
FFFC333E 3E3C3E24		dh	XP12	;<>
FFFC3340 3E6C3E3C		dh	XP13	;>
FFFC3342 3E543E6C		dh	XP15	;=
FFFC3344 3E843E54		dh	XP14	;<=
FFFC3346 3EC43E84		dh	XP16	;<
FFFC3348 3D1C3EC4		dh	XP17
                        	TAB9_1
FFFC334A 3D303D1C	    dh  XP_AND
FFFC334C 3CBC3D30	    dh  XP_ANDX
                        	TAB10_1
FFFC334E 3CD03CBC	    dh  XP_OR
FFFC3350 00003CD0	    dh  XP_ORX
                        	
                        	;*
                        	; r3 = match flag (trashed)
                        	; r9 = text table
                        	; r10 = exec table
                        	; r11 = trashed
FFFC3352 00000000		align	1
FFFC3356 00000000
FFFC335A 00000000
FFFC335E 3EB70000
                        	
                        	//message "DIRECT"
                        	DIRECT:
FFFC3360 FFFC3EB7		ldi		$t3,#TAB1
FFFC3364 240E8E93
FFFC3368 FFFC3F37		ldi		$t4,#TAB1_1
FFFC336C 2E8F0F13
                        	EXEC:
FFFC3370 6D4010EF		call	IGNBLK		; ignore leading blanks
FFFC3374 000E6FB3		mov		$t5,$t2		; save the pointer
FFFC3378 000061B3		mov		r3,r0		; clear match flag
                        	EXLP:
FFFC337C 000E4903		lbu		a0,[$t2]		; get the program character
FFFC3380 001E0E13		add		$t2,$t2,#1
FFFC3384 000EC983		lbu		a1,[$t3]		; get the table character
FFFC3388 00099663		bne		a1,x0,EXNGO		; If end of table,
FFFC338C 000FEE33		mov		$t2,$t5		;	restore the text pointer and...
FFFC3390 04000263		bra		EXGO		;   execute the default.
                        	EXNGO:
FFFC3394 04390063		beq		a0,r3,EXGO	; Else check for period... if so, execute
FFFC3398 07F9F993		and		a1,a1,#0x7f	; ignore the table's high bit
FFFC339C 03298263		beq		a1,a0,EXMAT	;		is there a match?
FFFC33A0 002F0F13		add		$t4,$t4,#2	;if not, try the next entry
FFFC33A4 000FEE33		mov		$t2,$t5		; reset the program pointer
FFFC33A8 000061B3		mov		r3,x0		; sorry, no match
                        	EX1:
FFFC33AC 000EC903		lbu		a0,[$t3]		; get to the end of the entry
FFFC33B0 001E8E93		add		$t3,$t3,#1
FFFC33B4 08097D93		and		$t1,$a0,#$80
FFFC33B8 FE0D8AE3		beq		$t1,$r0,EX1	; test for bit 7 set
FFFC33BC FC0000E3		bra		EXLP		; back for more matching
                        	EXMAT:
FFFC33C0 02E06193		ldi		r3,#'.'		; we've got a match so far
FFFC33C4 000EC903		lbu		a0,[$t3]		; end of table entry?
FFFC33C8 001E8E93		add		$t3,$t3,#1
FFFC33CC 08097D93		and		$t1,$a0,#$80
FFFC33D0 FA0D86E3		beq		$t1,$r0,EXLP		; test for bit 7 set, if not, go back for more
                        	EXGO:
                        		; execute the appropriate routine
FFFC33D4 000F5903		lhu		a0,[$t4]	; get the low mid order byte
FFFC33D8 FFFC0637		or		a0,a0,#$FFFC0000	; add in ROM base
FFFC33DC 00060613
FFFC33E0 01266933
FFFC33E4 00090067		jmp		[a0]
                        	
                        	    
                        	;******************************************************************
                        	;
                        	; What follows is the code to execute direct and statement
                        	; commands. Control is transferred to these points via the command
                        	; table lookup code of 'DIRECT' and 'EXEC' in the last section.
                        	; After the command is executed, control is transferred to other
                        	; sections as follows:
                        	;
                        	; For 'LISTX', 'NEW', and 'STOP': go back to the warm start point.
                        	; For 'RUN': go execute the first stored line if any; else go
                        	; back to the warm start point.
                        	; For 'GOTO' and 'GOSUB': go execute the target line.
                        	; For 'RETURN' and 'NEXT'; go back to saved return line.
                        	; For all others: if 'CURRNT' is 0, go to warm start; else go
                        	; execute next command. (This is done in 'FINISH'.)
                        	;
                        	;******************************************************************
                        	;
                        	; *** NEW *** STOP *** RUN (& friends) *** GOTO ***
                        	;
                        	; 'NEW<CR>' sets TXTUNF to point to TXTBGN
                        	;
                        	
                        	NEW:
FFFC33E8 0BC010EF		call	ENDCHK
FFFC33EC 00002837		ldi		v0,#TXTBGN
FFFC33F0 80080813
FFFC33F4 71002223		sw		v0,TXTUNF	;	set the end pointer
FFFC33F8 0D8000EF		call  clearVars
                        	
                        	; 'STOP<CR>' goes back to WSTART
                        	;
                        	STOP:
FFFC33FC 0A8010EF		call	ENDCHK
FFFC3400 CADFF06F		jmp		WSTART		; WSTART will reset the stack
                        	
                        	;------------------------------------------------------------------------------
                        	; YIELD suspends execution of TinyBasic by switching to the next ready task.
                        	;------------------------------------------------------------------------------
                        	
                        	YIELD0:
FFFC3404 00D06913		ldi		a0,#13
FFFC3408 00000073		ecall
FFFC340C 2140006F		jmp		FINISH
                        	
                        	;------------------------------------------------------------------------------
                        	; 'RUN<CR>' finds the first stored line, stores its address
                        	; in CURRNT, and starts executing it. Note that only those
                        	; commands in TAB2 are legal for a stored program.
                        	;
                        	; There are 3 more entries in 'RUN':
                        	; 'RUNNXL' finds next line, stores it's address and executes it.
                        	; 'RUNTSL' stores the address of this line and executes it.
                        	; 'RUNSML' continues the execution on same line.
                        	;
                        	RUN:
FFFC3410 094010EF		call	ENDCHK
FFFC3414 00002E37		ldi		$t2,#TXTBGN	;	set pointer to beginning
FFFC3418 800E0E13
FFFC341C 71C02C23		sw		$t2,CURRNT
FFFC3420 0B0000EF		call  clearVars
                        	
                        	RUNNXL:					; RUN <next line>
FFFC3424 71802E03		lw		$t2,CURRNT	; executing a program?
FFFC3428 5C0E14E3		bne		$t2,x0,.0001	; if not, we've finished a direct stat.
                        	RUN2:
FFFC342C C81FF06F		jmp		WSTART
                        	.0001:
FFFC3430 7A402903		lw		a0,IRQROUT		; are we handling IRQ's ?
FFFC3434 02090E63		beq		a0,x0,RUN1
FFFC3438 7B402D83		lw		$t1,IRQFlag		; was there an IRQ ?
FFFC343C 020D8A63		beq		$t1,x0,RUN1
FFFC3440 7A002A23		sw		x0,IRQFlag
FFFC3444 2D0010EF		call	PUSHA_		; the same code as a GOSUB
FFFC3448 FF470713		sub		$sp,$sp,#12
FFFC344C 71402903		lw		a0,STKGOS
FFFC3450 01272023		sw		a0,[$sp]
FFFC3454 71802903		lw		a0,CURRNT
FFFC3458 01272223		sw		a0,4[$sp]
FFFC345C 01C72423		sw		$t2,8[$sp]
FFFC3460 70002823		sw		x0,LOPVAR		; load new values
FFFC3464 70E02A23		sw		$sp,STKGOS
FFFC3468 7A402E83		lw		$t3,IRQROUT
FFFC346C 00000C63		bra		RUNTSL
                        	RUN1:
FFFC3470 00002E83		lw		$t3,$t2
FFFC3474 00006933		mov		a0,x0
FFFC3478 1D4010EF		call	FNDLNP		; else find the next line number
FFFC347C 70402D83		lw		$t1,TXTUNF	; if we've fallen off the end, stop
FFFC3480 FBBEF6E3		bgeu	$t3,$t1,RUN2
                        	
                        	RUNTSL					; RUN <this line>
FFFC3484 71D02C23		sw		$t3,CURRNT	; set CURRNT to point to the line no.
FFFC3488 004E8E13		add		$t2,$t3,#4	; set the text pointer to
                        	
                        	RUNSML                 ; RUN <same line>
FFFC348C 668010EF		call	CHKIO		; see if a control-C was pressed
FFFC3490 FFFC3EB7		ldi		$t3,#TAB2		; find command in TAB2
FFFC3494 252E8E93
FFFC3498 FFFC3F37		ldi		$t4,#TAB2_1
FFFC349C 2F2F0F13
FFFC34A0 ED1FF06F		jmp		EXEC		; and execute it
                        	
                        	
                        	;******************************************************************
                        	; 'GOTO expr<CR>' evaluates the expression, finds the target
                        	; line, and jumps to 'RUNTSL' to do it.
                        	;******************************************************************
                        	;
                        	GOTO:
FFFC34A4 7E4000EF		call	OREXPR		;evaluate the following expression
FFFC34A8 000862B3		mov   r5,v0
FFFC34AC 7F9000EF		call 	ENDCHK		;must find end of line
FFFC34B0 0002E933		mov   a0,r5
FFFC34B4 178010EF		call 	FNDLN		; find the target line
FFFC34B8 FC0816E3		bne		v0,x0,RUNTSL; go do it
FFFC34BC FFFC5937		ldi		a0,#msgBadGotoGosub
FFFC34C0 CE190913
FFFC34C4 0300106F		jmp		ERROR		; no such line no.
                        	
                        	_clr:
FFFC34C8 008000EF	    call    clearVars
FFFC34CC 1540006F	    jmp     FINISH
                        	
                        	; Clear the variable area of memory
                        	clearVars:
FFFC34D0 FF870713		sub		$sp,$sp,#8
FFFC34D4 00672023		sw		r6,[$sp]
FFFC34D8 00172223		sw		$ra,4[$sp]
FFFC34DC 06406313	  ldi   r6,#100    	; number of word pairs to clear
FFFC34E0 70802803	  lw    v0,VARBGN
                        	.cv1:
FFFC34E4 00082023	  sw		x0,[$v0]		; variable name
FFFC34E8 00082223	  sw		x0,4[$v0]		; and value
FFFC34EC 00880813	  add		v0,v0,#8
FFFC34F0 FFF30313	  sub		r6,r6,#1
FFFC34F4 FE6048E3		bgt		r6,x0,.cv1
FFFC34F8 00072303	  lw		r6,[$sp]
FFFC34FC 00472083	  lw		$ra,4[$sp]
FFFC3500 00870713	  add		$sp,$sp,#8
FFFC3504 00008067	  ret
                        	
                        	;******************************************************************
                        	; ONIRQ <line number>
                        	; ONIRQ sets up an interrupt handler which acts like a specialized
                        	; subroutine call. ONIRQ is coded like a GOTO that never executes.
                        	;******************************************************************
                        	;
                        	ONIRQ:
FFFC3508 780000EF		call	OREXPR		;evaluate the following expression
FFFC350C 000862B3		mov   r5,v0
FFFC3510 795000EF		call 	ENDCHK		;must find end of line
FFFC3514 0002E933		mov   a0,r5
FFFC3518 114010EF		call 	FNDLN		; find the target line
FFFC351C 00081663		bne		v0,r0,ONIRQ1
FFFC3520 7A002223		sw		x0,IRQROUT
FFFC3524 0FC0006F		jmp		FINISH
                        	ONIRQ1:
FFFC3528 7BD02223		sw		$t3,IRQROUT
FFFC352C 0F40006F		jmp		FINISH
                        	
                        	WAITIRQ:
FFFC3530 5C4010EF		call	CHKIO		; see if a control-C was pressed
FFFC3534 7B402D83		lw		$t1,IRQFlag
FFFC3538 FE0D8CE3		beq		$t1,x0,WAITIRQ
FFFC353C 0E40006F		jmp		FINISH
                        	
                        	
                        	;******************************************************************
                        	; LIST
                        	;
                        	; LISTX has two forms:
                        	; 'LIST<CR>' lists all saved lines
                        	; 'LIST #<CR>' starts listing at the line #
                        	; Control-S pauses the listing, control-C stops it.
                        	;******************************************************************
                        	;
                        	LISTX:
FFFC3540 490010EF		call		TSTNUM		; see if there's a line no.
FFFC3544 000862B3		mov      r5,v0
FFFC3548 75D000EF		call		ENDCHK		; if not, we get a zero
FFFC354C 0002E933		mov      a0,r5
FFFC3550 0DC010EF		call		FNDLN		; find this or next line
                        	LS1:
FFFC3554 00081663		bne		v0,r0,LS4
                        	LS5:
FFFC3558 70402D83		lw		$t1,TXTUNF
FFFC355C B5BEF8E3		bgeu	$t3,$t1,WSTART	; warm start if we passed the end
                        	LS4:
FFFC3560 000EE933		mov		a0,$t3
FFFC3564 3C4010EF		call	PRTLN		; print the line
FFFC3568 00086EB3		mov		$t3,$v0		; set pointer for next
FFFC356C 588010EF		call	CHKIO		; check for listing halt request
FFFC3570 00080A63		beq		v0,x0,LS3
FFFC3574 01306D93		ldi		$t1,#CTRLS
FFFC3578 01B81663		bne		v0,$t1,LS3; pause the listing?
                        	LS2:
FFFC357C 578010EF		call 	CHKIO		; if so, wait for another keypress
FFFC3580 FE080EE3		beq		v0,r0,LS2
                        	LS3:
                        	;	mov		$v0,$x0
FFFC3584 FC000AE3		bra		LS5
                        	;	mov		a0,r0
                        	;	call	FNDSKP	;FNDLNP		; find the next line
                        	;	bra		LS1
                        	
                        	
                        	;******************************************************************
                        	; PRINT command is 'PRINT ....:' or 'PRINT ....<CR>'
                        	; where '....' is a list of expressions, formats, back-arrows,
                        	; and strings.	These items a separated by commas.
                        	;
                        	; A format is a pound sign followed by a number.  It controls
                        	; the number of spaces the value of an expression is going to
                        	; be printed in.  It stays effective for the rest of the print
                        	; command unless changed by another format.  If no format is
                        	; specified, 11 positions will be used.
                        	;
                        	; A string is quoted in a pair of single- or double-quotes.
                        	;
                        	; An underline (back-arrow) means generate a <CR> without a <LF>
                        	;
                        	; A <CR LF> is generated after the entire list has been printed
                        	; or if the list is empty.  If the list ends with a semicolon,
                        	; however, no <CR LF> is generated.
                        	;******************************************************************
                        	;
                        	PRINT:
FFFC3588 00B06293		ldi		r5,#11		; D4 = number of print spaces
FFFC358C 3F8010EF		call	TSTC		; if null list and ":"
FFFC3590 0000003A		dw		':'
FFFC3594 00000663		bra		PR2
FFFC3598 584010EF		call	CRLF		; give CR-LF and continue
FFFC359C EF1FF06F		jmp		RUNSML		;		execution on the same line
                        	PR2:
FFFC35A0 3E4010EF		call	TSTC		;if null list and <CR>
FFFC35A4 0000000D		dw		CR
FFFC35A8 00000663		bra		PR0
FFFC35AC 570010EF		call	CRLF		;also give CR-LF and
FFFC35B0 E75FF06F		jmp		RUNNXL		;execute the next line
                        	PR0:
FFFC35B4 3D0010EF		call	TSTC		;else is it a format?
FFFC35B8 00000023		dw		'#'
FFFC35BC 00000863		bra		PR1
FFFC35C0 6C8000EF		call	OREXPR		; yes, evaluate expression
FFFC35C4 000862B3		mov		r5,v0	; and save it as print width
FFFC35C8 02000263		bra		PR3		; look for more to print
                        	PR1:
FFFC35CC 3B8010EF		call	TSTC	;	is character expression? (MRL)
FFFC35D0 00000024		dw		'$'
FFFC35D4 00000863		bra		PR4
FFFC35D8 6B0000EF		call	OREXPR	;	yep. Evaluate expression (MRL)
FFFC35DC A2DFF0EF		call	GOOUT	;	print low byte (MRL)
FFFC35E0 00000663		bra		PR3		;look for more. (MRL)
                        	PR4:
FFFC35E4 1DC010EF		call	QTSTG	;	is it a string?
                        		; the following branch must occupy only 1 word!
FFFC35E8 02000063		bra		PR8		;	if not, must be an expression
                        	PR3:
FFFC35EC 398010EF		call		TSTC	;	if ",", go find next
FFFC35F0 0000002C		dw		','
FFFC35F4 00000663		bra		PR6
FFFC35F8 671000EF		call		FIN		;in the list.
FFFC35FC FA000CE3		bra		PR0
                        	PR6:
FFFC3600 51C010EF		call		CRLF		;list ends here
FFFC3604 01C0006F		jmp		FINISH
                        	PR8:
FFFC3608 680000EF		call	OREXPR		; evaluate the expression
FFFC360C 00086933		mov		a0,v0
FFFC3610 00506993		ldi		a1,#5		; set the width
FFFC3614 00A06A13		ldi		a2,#10
FFFC3618 23C010EF		call	PRTNUM		; print its value
FFFC361C FC0008E3		bra		PR3			; more to print?
                        	
                        	
                        	FINISH:
FFFC3620 649000EF		call	FIN		; Check end of command
FFFC3624 6C90006F		jmp		QWHAT	; print "What?" if wrong
                        	
                        	
                        	;*******************************************************************
                        	;
                        	; *** GOSUB *** & RETURN ***
                        	;
                        	; 'GOSUB expr:' or 'GOSUB expr<CR>' is like the 'GOTO' command,
                        	; except that the current text pointer, stack pointer, etc. are
                        	; saved so that execution can be continued after the subroutine
                        	; 'RETURN's.  In order that 'GOSUB' can be nested (and even
                        	; recursive), the save area must be stacked.  The stack pointer
                        	; is saved in 'STKGOS'.  The old 'STKGOS' is saved on the stack.
                        	; If we are in the main routine, 'STKGOS' is zero (this was done
                        	; in the initialization section of the interpreter), but we still
                        	; save it as a flag for no further 'RETURN's.
                        	;******************************************************************
                        	;
                        	GOSUB:
FFFC3628 0EC010EF		call	PUSHA_		; save the current 'FOR' parameters
FFFC362C 65C000EF		call	OREXPR		; get line number
FFFC3630 00086933		mov		$a0,$v0
FFFC3634 7F9000EF		call	FNDLN		; find the target line
FFFC3638 00081863		bne		v0,r0,gosub1
FFFC363C FFFC5937		ldi		a0,#msgBadGotoGosub
FFFC3640 CE190913
FFFC3644 6B10006F		jmp		ERROR		; if not there, say "How?"
                        	gosub1:
FFFC3648 FF470713		sub		$sp,$sp,#12
FFFC364C 71402903		lw		a0,STKGOS	; 'STKGOS'
FFFC3650 01272023		sw		a0,[$sp]
FFFC3654 71802903		lw		a0,CURRNT	; found it, save old 'CURRNT'...
FFFC3658 01272223		sw		a0,4[$sp]
FFFC365C 01C72423		sw		$t2,8[$sp]
FFFC3660 70002823		sw		$x0,LOPVAR		; load new values
FFFC3664 70E02A23		sw		$sp,STKGOS
FFFC3668 E1DFF06F		jmp		RUNTSL
                        	
                        	
                        	;******************************************************************
                        	; 'RETURN<CR>' undoes everything that 'GOSUB' did, and thus
                        	; returns the execution to the command after the most recent
                        	; 'GOSUB'.  If 'STKGOS' is zero, it indicates that we never had
                        	; a 'GOSUB' and is thus an error.
                        	;******************************************************************
                        	;
                        	RETURN:
FFFC366C 639000EF		call	ENDCHK		; there should be just a <CR>
FFFC3670 71402983		lw		a1,STKGOS		; get old stack pointer
FFFC3674 00099863		bne		a1,x0,return1
FFFC3678 FFFC5937		ldi		a0,#msgRetWoGosub
FFFC367C CFD90913
FFFC3680 6750006F		jmp		ERROR		; if zero, it doesn't exist
                        	return1:
FFFC3684 0009E733		mov		$sp,a1		; else restore it
FFFC3688 00072903		lw		a0,[$sp]
FFFC368C 00470713		add		$sp,$sp,#4
FFFC3690 71202A23		sw		a0,STKGOS	; and the old 'STKGOS'
FFFC3694 00072903		lw		a0,[$sp]
FFFC3698 00470713		add		$sp,$sp,#4
FFFC369C 71202C23		sw		a0,CURRNT	; and the old 'CURRNT'
FFFC36A0 00072E03		lw		$t2,[$sp]	; and the old text pointer
FFFC36A4 00470713		add		$sp,$sp,#4
FFFC36A8 034010EF		call	POPA_		;and the old 'FOR' parameters
FFFC36AC F75FF06F		jmp		FINISH		;and we are back home
                        	
                        	;******************************************************************
                        	; *** FOR *** & NEXT ***
                        	;
                        	; 'FOR' has two forms:
                        	; 'FOR var=exp1 TO exp2 STEP exp1' and 'FOR var=exp1 TO exp2'
                        	; The second form means the same thing as the first form with a
                        	; STEP of positive 1.  The interpreter will find the variable 'var'
                        	; and set its value to the current value of 'exp1'.  It also
                        	; evaluates 'exp2' and 'exp1' and saves all these together with
                        	; the text pointer, etc. in the 'FOR' save area, which consists of
                        	; 'LOPVAR', 'LOPINC', 'LOPLMT', 'LOPLN', and 'LOPPT'.  If there is
                        	; already something in the save area (indicated by a non-zero
                        	; 'LOPVAR'), then the old save area is saved on the stack before
                        	; the new values are stored.  The interpreter will then dig in the
                        	; stack and find out if this same variable was used in another
                        	; currently active 'FOR' loop.  If that is the case, then the old
                        	; 'FOR' loop is deactivated. (i.e. purged from the stack)
                        	;******************************************************************
                        	;
                        	FOR:
FFFC36B0 064010EF		call	PUSHA_		; save the old 'FOR' save area
FFFC36B4 54D000EF		call	SETVAL		; set the control variable
FFFC36B8 71002823		sw		v0,LOPVAR		; save its address
FFFC36BC FFFC3EB7		ldi		$t3,#TAB5
FFFC36C0 2CEE8E93
FFFC36C4 FFFC3F37		ldi		$t4,#TAB5_1	; use 'EXEC' to test for 'TO'
FFFC36C8 334F0F13
FFFC36CC CA5FF06F		jmp		EXEC
                        	FR1:
FFFC36D0 5B8000EF		call	OREXPR		; evaluate the limit
FFFC36D4 77002E23		sw		v0,LOPLMT	; save that
FFFC36D8 FFFC3EB7		ldi		$t3,#TAB6
FFFC36DC 2D1E8E93
FFFC36E0 FFFC3F37		ldi		$t4,#TAB6_1	; use 'EXEC' to test for the word 'STEP
FFFC36E4 338F0F13
FFFC36E8 C89FF06F		jmp		EXEC
                        	FR2:
FFFC36EC 59C000EF		call	OREXPR		; found it, get the step value
FFFC36F0 00000463		bra		FR4
                        	FR3:
FFFC36F4 00106813		ldi		v0,#1		; not found, step defaults to 1
                        	FR4:
FFFC36F8 77002C23		sw		v0,LOPINC	; save that too
                        	FR5:
FFFC36FC 71802983		lw		a1,CURRNT
FFFC3700 77302A23		sw		a1,LOPLN	; save address of current line number
FFFC3704 77C02823		sw		$t2,LOPPT	; and text pointer
FFFC3708 000761B3		mov		r3,$sp		; dig into the stack to find 'LOPVAR'
FFFC370C 71002303		lw		r6,LOPVAR
FFFC3710 00000463		bra		FR7
                        	FR6:
FFFC3714 01418193		add		r3,r3,#20	; look at next stack frame
                        	FR7:
FFFC3718 0001A983		lw		a1,[r3]		; is it zero?
FFFC371C 00098E63		beq		a1,x0,FR8	; if so, we're done
FFFC3720 FE699AE3		bne		a1,r6,FR6	; same as current LOPVAR? nope, look some more
                        	
FFFC3724 0001E933	  mov		a0,r3	   ; Else remove 5 words from...
FFFC3728 000769B3		mov		a1,$sp
FFFC372C 01418A13		add		a2,r3,#20  ; inside the stack.
FFFC3730 7A5000EF		call	MVDOWN
FFFC3734 01470713		add		$sp,$sp,#20	; set the SP 5 long words up
                        	;	lw		a0,[$sp]		; ???
                        	;	add		$sp,$sp,#4
                        	FR8:
FFFC3738 EE9FF06F	  jmp	    FINISH		; and continue execution
                        	
                        	
                        	;******************************************************************
                        	; 'NEXT var' serves as the logical (not necessarily physical) end
                        	; of the 'FOR' loop.  The control variable 'var' is checked with
                        	; the 'LOPVAR'.  If they are not the same, the interpreter digs in
                        	; the stack to find the right one and purges all those that didn't
                        	; match.  Either way, it then adds the 'STEP' to that variable and
                        	; checks the result with against the limit value.  If it is within
                        	; the limit, control loops back to the command following the
                        	; 'FOR'.  If it's outside the limit, the save area is purged and
                        	; execution continues.
                        	;******************************************************************
                        	;
                        	NEXT:
FFFC373C 00006933		mov		a0,x0		; don't allocate it
FFFC3740 189000EF		call	TSTV		; get address of variable
FFFC3744 00081863		bne		v0,x0,NX4
FFFC3748 FFFC5937		ldi		a0,#msgNextVar
FFFC374C CBE90913
FFFC3750 5A0002E3		bra		ERROR		; if no variable, say "What?"
                        	NX4:
FFFC3754 00086EB3		mov		$t3,v0	; save variable's address
                        	NX0:
FFFC3758 71002903		lw		a0,LOPVAR	; If 'LOPVAR' is zero, we never...
FFFC375C 00091863		bne		a0,x0,NX5	; had a FOR loop
FFFC3760 FFFC5937		ldi		a0,#msgNextFor
FFFC3764 CAC90913
FFFC3768 580006E3		bra		ERROR
                        	NX5:
FFFC376C 01D90663		beq		a0,$t3,NX2	; else we check them OK, they agree
FFFC3770 76D000EF		call	POPA_		; nope, let's see the next frame
FFFC3774 FE0002E3		bra		NX0
                        	NX2:
FFFC3778 000EA903		lw		a0,[$t3]		; get control variable's value
FFFC377C 77802983		lw		a1,LOPINC
FFFC3780 01390933		add		a0,a0,a1	; add in loop increment
                        	;	BVS.L	QHOW		say "How?" for 32-bit overflow
FFFC3784 012EA023		sw		a0,[$t3]		; save control variable's new value
FFFC3788 77C02183		lw		r3,LOPLMT	; get loop's limit value
FFFC378C 0009D663		bge		a1,x0,NX1	; check loop increment, branch if loop increment is positive
FFFC3790 00394E63		blt		a0,r3,NXPurge	; test against limit
FFFC3794 00000463		bra     NX3
                        	NX1:
FFFC3798 0121CA63		bgt		a0,r3,NXPurge
                        	NX3:
FFFC379C 77402E03		lw		$t2,LOPLN	; Within limit, go back to the...
FFFC37A0 71C02C23		sw		$t2,CURRNT
FFFC37A4 77002E03		lw		$t2,LOPPT	; saved 'CURRNT' and text pointer.
FFFC37A8 E79FF06F		jmp		FINISH
                        	NXPurge:
FFFC37AC 731000EF	  call    POPA_        ; purge this loop
FFFC37B0 E71FF06F	  jmp     FINISH
                        	
                        	
                        	;******************************************************************
                        	; *** REM *** IF *** INPUT *** LET (& DEFLT) ***
                        	;
                        	; 'REM' can be followed by anything and is ignored by the
                        	; interpreter.
                        	;
                        	;REM
                        	;    br	    IF2		    ; skip the rest of the line
                        	; 'IF' is followed by an expression, as a condition and one or
                        	; more commands (including other 'IF's) separated by colons.
                        	; Note that the word 'THEN' is not used.  The interpreter evaluates
                        	; the expression.  If it is non-zero, execution continues.  If it
                        	; is zero, the commands that follow are ignored and execution
                        	; continues on the next line.
                        	;******************************************************************
                        	;
                        	IF0:
FFFC37B4 4D4000EF	  call	OREXPR		; evaluate the expression
                        	IF1:
FFFC37B8 00080463	  beq	  v0,x0,IF2	; is it zero? if not, continue
FFFC37BC CD1FF06F	  jmp		RUNSML
                        	IF2:
FFFC37C0 000E6EB3	  mov		$t3,$t2	; set lookup pointer
FFFC37C4 00006933		mov		a0,x0		; find line #0 (impossible)
FFFC37C8 6D1000EF		call	FNDSKP		; if so, skip the rest of the line
FFFC37CC 00081463		bne		v0,x0,IF3; if no next line, do a warm start
FFFC37D0 8DDFF06F		jmp		WSTART
                        	IF3:
FFFC37D4 CB1FF06F		jmp		RUNTSL		; run the next line
                        	
                        	
                        	;******************************************************************
                        	; INPUT is called first and establishes a stack frame
                        	INPERR:
FFFC37D8 79802703		lw		$sp,STKINP		; restore the old stack pointer
FFFC37DC 00072903		lw		a0,[$sp]
FFFC37E0 00470713		add		$sp,$sp,#4
FFFC37E4 71202C23		sw		a0,CURRNT		; and old 'CURRNT'
FFFC37E8 00072E03		lw		$t2,[$sp]		; and old text pointer
FFFC37EC 00470713		add		$sp,$sp,#4
FFFC37F0 01470713		add		$sp,$sp,#20	; fall through will subtract 20
                        	
                        	; 'INPUT' is like the 'PRINT' command, and is followed by a list
                        	; of items.  If the item is a string in single or double quotes,
                        	; or is an underline (back arrow), it has the same effect as in
                        	; 'PRINT'.  If an item is a variable, this variable name is
                        	; printed out followed by a colon, then the interpreter waits for
                        	; an expression to be typed in.  The variable is then set to the
                        	; value of this expression.  If the variable is preceeded by a
                        	; string (again in single or double quotes), the string will be
                        	; displayed followed by a colon.  The interpreter the waits for an
                        	; expression to be entered and sets the variable equal to the
                        	; expression's value.  If the input expression is invalid, the
                        	; interpreter will print "What?", "How?", or "Sorry" and reprint
                        	; the prompt and redo the input.  The execution will not terminate
                        	; unless you press control-C.  This is handled in 'INPERR'.
                        	;
                        	INPUT:
FFFC37F4 FEC70713		sub		$sp,$sp,#20	; allocate five words on stack
FFFC37F8 00572823		sw		r5,16[$sp]	; save off r5 into stack var
                        	IP6:
FFFC37FC 01C72023		sw		$t2,[$sp]	; save in case of error
FFFC3800 7C1000EF		call	QTSTG		; is next item a string?
FFFC3804 00000C63		bra		IP2			; nope - this branch must take only 1 word
FFFC3808 00106913		ldi		a0,#1		; allocate var
FFFC380C 0BD000EF		call	TSTV		; yes, but is it followed by a variable?
FFFC3810 08090463		beq    a0,r0,IP4   ; if not, brnch
FFFC3814 00096F33		mov		$t4,a0		; put away the variable's address
FFFC3818 04000063		bra		IP3			; if so, input to variable
                        	IP2:
FFFC381C 01C72223		sw		$t2,4[$sp]	; save off in stack var for 'PRTSTG'
FFFC3820 00106913		ldi		a0,#1
FFFC3824 0A5000EF		call	TSTV		; must be a variable now
FFFC3828 00091A63		bne		a0,r0,IP7
FFFC382C FFFC5937		ldi		a0,#msgInputVar
FFFC3830 C9090913
FFFC3834 01470713		add		$sp,$sp,#20	; cleanup stack
FFFC3838 4A000EE3		bra		ERROR		; "What?" it isn't?
                        	IP7:
FFFC383C 00096F33		mov		$t4,a0		; put away the variable's address
FFFC3840 000E4283		lbu		r5,[$t2]		; get ready for 'PRTSTG' by null terminating
FFFC3844 000E0023		sb		x0,[$t2]
FFFC3848 000069B3		mov		a1,x0
FFFC384C 00472903		lw		a0,4[$sp]	; get back text pointer
FFFC3850 709000EF		call	PRTSTG		; print string as prompt
FFFC3854 005E0023		sb		r5,[$t2]		; un-null terminate
                        	IP3
FFFC3858 01C72223		sw		$t2,4[$sp]	; save in case of error
FFFC385C 71802903		lw		a0,CURRNT
FFFC3860 01272423		sw		a0,8[$sp]	; also save 'CURRNT'
FFFC3864 FFF06913		ldi		a0,#-1
FFFC3868 71202C23		sw		a0,CURRNT	; flag that we are in INPUT
FFFC386C 78E02C23		sw		$sp,STKINP	; save the stack pointer too
FFFC3870 01E72623		sw		$t4,12[$sp]	; save the variable address
FFFC3874 03A06913		ldi		a0,#':'		; print a colon first
FFFC3878 4C1000EF		call	GETLN		; then get an input line
FFFC387C 71C06E13		ldi		$t2,#BUFFER	; point to the buffer
FFFC3880 408000EF		call	OREXPR		; evaluate the input
FFFC3884 00C72F03		lw		$t4,12[$sp]	; restore the variable address
FFFC3888 012F2023		sw		a0,[$t4]	; save value in variable
FFFC388C 00872903		lw		a0,8[$sp]	; restore old 'CURRNT'
FFFC3890 71202C23		sw		a0,CURRNT
FFFC3894 00472E03		lw		$t2,4[$sp]	; and the old text pointer
                        	IP4:
FFFC3898 0EC010EF		call	TSTC
FFFC389C 0000002C		dw		','
FFFC38A0 00000463		bra		IP5
FFFC38A4 F4000CE3		bra		IP6			; yes, more items
                        	IP5:
FFFC38A8 01072283		lw		r5,16[$sp]
FFFC38AC 01470713		add		$sp,$sp,#20	; cleanup stack
FFFC38B0 D71FF06F	 	jmp		FINISH
                        	
                        	
                        	DEFLT:
FFFC38B4 000E4903	  lbu    	a0,[$t2]
FFFC38B8 00D06D93	  ldi			$t1,#CR
FFFC38BC D7B902E3		beq	    a0,$t1,FINISH	    ; empty line is OK else it is 'LET'
                        	
                        	
                        	;******************************************************************
                        	; 'LET' is followed by a list of items separated by commas.
                        	; Each item consists of a variable, an equals sign, and an
                        	; expression.  The interpreter evaluates the expression and sets
                        	; the variable to that value.  The interpreter will also handle
                        	; 'LET' commands without the word 'LET'.  This is done by 'DEFLT'.
                        	;******************************************************************
                        	;
                        	LET:
FFFC38C0 341000EF	  call	SETVAL		; do the assignment
FFFC38C4 0C0010EF		call	TSTC		; check for more 'LET' items
FFFC38C8 0000002C		dw		','
FFFC38CC D55FF06F		jmp		FINISH
FFFC38D0 FE0008E3		bra	    LET
                        	LT1:
FFFC38D4 D4DFF06F	  jmp	    FINISH		; until we are finished.
                        	
                        	
                        	;******************************************************************
                        	; *** LOAD *** & SAVE ***
                        	;
                        	; These two commands transfer a program to/from an auxiliary
                        	; device such as a cassette, another computer, etc.  The program
                        	; is converted to an easily-stored format: each line starts with
                        	; a colon, the line no. as 4 hex digits, and the rest of the line.
                        	; At the end, a line starting with an '@' sign is sent.  This
                        	; format can be read back with a minimum of processing time by
                        	; the RTF65002
                        	;******************************************************************
                        	;
                        	LOAD
FFFC38D8 00002E37		ldi		$t2,#TXTBGN	; set pointer to start of prog. area
FFFC38DC 800E0E13
FFFC38E0 00D06913		ldi		a0,#CR		; For a CP/M host, tell it we're ready...
FFFC38E4 F2CFF0EF		call	GOAUXO		; by sending a CR to finish PIP command.
                        	LOD1:
FFFC38E8 F30FF0EF		call	GOAUXI		; look for start of line
FFFC38EC FF205EE3		ble		a0,r0,LOD1
FFFC38F0 04006D93		ldi		$t1,#'@'
FFFC38F4 03B90E63		beq		a0,$t1,LODEND	; end of program?
FFFC38F8 01A06D93		ldi		$t1,#$1A
FFFC38FC 03B90A63		beq		a0,$t1,LODEND	; or EOF marker
FFFC3900 03A06D93		ldi		$t1,#':'
FFFC3904 FFB912E3		bne		a0,$t1,LOD1	; if not, is it start of line? if not, wait for it
FFFC3908 030000EF		call	GCHAR		; get line number
FFFC390C 012E2023		sw		a0,[$t2]		; store it
FFFC3910 004E0E13		add		$t2,$t2,#4
                        	LOD2:
FFFC3914 F04FF0EF		call	GOAUXI		; get another text char.
FFFC3918 FF205EE3		ble		a0,r0,LOD2
FFFC391C 012E0023		sb		a0,[$t2]		; store it
FFFC3920 001E0E13		add		$t2,$t2,#1
FFFC3924 00D06D93		ldi		$t1,#CR
FFFC3928 FFB916E3		bne		a0,$t1,LOD2		; is it the end of the line? if not, go back for more
FFFC392C FA000EE3		bra		LOD1		; if so, start a new line
                        	LODEND:
FFFC3930 71C02223		sw		$t2,TXTUNF	; set end-of program pointer
FFFC3934 F78FF06F		jmp		WSTART		; back to direct mode
                        	
                        	
                        	; get character from input (32 bit value)
                        	GCHAR:
FFFC3938 FF470713		sub		$sp,$sp,#12
FFFC393C 00572023		sw		r5,[$sp]
FFFC3940 00672223		sw		r6,4[$sp]
FFFC3944 00172423		sw		$ra,8[$sp]
FFFC3948 00806313		ldi		r6,#8       ; repeat ten times
FFFC394C 00006293		ldi		r5,#0
                        	GCHAR1:
FFFC3950 EC8FF0EF		call	GOAUXI		; get a char
FFFC3954 FF205EE3		ble		a0,r0,GCHAR1
FFFC3958 02C000EF		call	asciiToHex
FFFC395C 00429293		sll		r5,r5,#4
FFFC3960 0122E2B3		or		r5,r5,a0
FFFC3964 FFF30313		sub		r6,r6,#1
FFFC3968 FE6064E3		bgtu	r6,r0,GCHAR1
FFFC396C 0002E933		mov		a0,r5
FFFC3970 00072283		lw		r5,[$sp]
FFFC3974 00472303		lw		r6,4[$sp]
FFFC3978 00872083		lw		$ra,8[$sp]
FFFC397C 00C70713		add		$sp,$sp,#12
FFFC3980 00008067		ret
                        	
                        	; convert an ascii char to hex code
                        	; input
                        	;	a0 = char to convert
                        	
                        	asciiToHex:
FFFC3984 03906D93		ldi		$t1,#'9'
FFFC3988 012DF463		bleu	a0,$t1,a2h1; less than '9'
FFFC398C FF990913		sub		a0,a0,#7	; shift 'A' to '9'+1
                        	a2h1:
FFFC3990 FD090913		sub		a0,a0,#'0'
FFFC3994 00F97913		and		a0,a0,#15	; make sure a nybble
FFFC3998 00008067		ret
                        	
                        	GetFilename:
FFFC399C FFC70713		sub		$sp,$sp,#4
FFFC39A0 00172023		sw		$ra,[$sp]
FFFC39A4 7E1000EF		call	TSTC
FFFC39A8 00000022		dw		'"'
FFFC39AC 04000C63		bra		gfn1
FFFC39B0 000061B3		mov		r3,r0
                        	gfn2:
FFFC39B4 000E4903		lbu		a0,[$t2]		; get text character
FFFC39B8 001E0E13		add		$t2,$t2,#1
FFFC39BC 02206D93		ldi		$t1,#'"'
FFFC39C0 03B90263		beq		a0,$t1,gfn3
FFFC39C4 02090063		beq		a0,r0,gfn3
FFFC39C8 6D218023		sb		a0,FILENAME[r3]
FFFC39CC 00118193		add		r3,r3,#1
FFFC39D0 04006D93		ldi		$t1,#64
FFFC39D4 FFB1E0E3		bltu	r3,$t1,gfn2
FFFC39D8 00072083		lw		$ra,[$sp]
FFFC39DC 00470713		add		$sp,$sp,#4
FFFC39E0 00008067		ret
                        	gfn3:
FFFC39E4 02006913		ldi		a0,#' '
FFFC39E8 6D218023		sb		a0,FILENAME[r3]
FFFC39EC 00118193		add		r3,r3,#1
FFFC39F0 04006D93		ldi		$t1,#64
FFFC39F4 FFB1E8E3		bltu	r3,$t1,gfn3
FFFC39F8 00072083		lw		$ra,[$sp]
FFFC39FC 00470713		add		$sp,$sp,#4
FFFC3A00 00008067		ret
                        	gfn1:
FFFC3A04 EA8FF06F		jmp		WSTART
                        	
                        	LOAD3:
FFFC3A08 F95FF0EF		call	GetFilename
FFFC3A0C 00000637		call	AUXIN_INIT
FFFC3A10 23C600E7
FFFC3A14 EC5FF06F		jmp		LOAD
                        	
                        	;	call		OREXPR		;evaluate the following expression
                        	;	ld		a0,#5000
FFFC3A18 000019B7		ld		a1,#$E00
FFFC3A1C E0098993
FFFC3A20 00000637		call	SDReadSector
FFFC3A24 23D600E7
FFFC3A28 00190913		add		a0,a0,#1
FFFC3A2C 000029B7		ldi		a1,#TXTBGN
FFFC3A30 80098993
                        	LOAD4:
FFFC3A34 FFC70713		sub		$sp,$sp,#4
FFFC3A38 01272023		sw		a0,[$sp]
FFFC3A3C 00000637		call	SDReadSector
FFFC3A40 23D600E7
FFFC3A44 20098993		add		a1,a1,#512
FFFC3A48 00072903		lw		a0,[$sp]
FFFC3A4C 00470713		add		$sp,$sp,#4
FFFC3A50 00190913		add		a0,a0,#1
FFFC3A54 00002237		ldi		r4,#TXTBGN
FFFC3A58 80020213
FFFC3A5C 00010637		add		r4,r4,#65536
FFFC3A60 00060613
FFFC3A64 00460233
FFFC3A68 FC49C6E3		blt		a1,r4,LOAD4
                        	LOAD5:
FFFC3A6C E4000063		bra		WSTART
                        	
                        	
                        	SAVE3:
FFFC3A70 F2DFF0EF		call	GetFilename
FFFC3A74 00000637		call	AUXOUT_INIT
FFFC3A78 240600E7
FFFC3A7C 0600006F		jmp		SAVE
                        	
FFFC3A80 208000EF		call	OREXPR		;evaluate the following expression
                        	;	lda		#5000		; starting sector
FFFC3A84 000019B7		ldi		a1,#$E00	; starting address to write
FFFC3A88 E0098993
FFFC3A8C 00000637		call	SDWriteSector
FFFC3A90 242600E7
FFFC3A94 00190913		add		a0,a0,#1
FFFC3A98 000029B7		ldi		a1,#TXTBGN
FFFC3A9C 80098993
                        	SAVE4:
FFFC3AA0 FFC70713		sub		$sp,$sp,#4
FFFC3AA4 01272023		sw		a0,[$sp]
FFFC3AA8 00000637		call	SDWriteSector
FFFC3AAC 242600E7
FFFC3AB0 20098993		add		a1,a1,#512
FFFC3AB4 00072903		lw		a0,[$sp]
FFFC3AB8 00470713		add		$sp,$sp,#4
FFFC3ABC 00190913		add		a0,a0,#1
FFFC3AC0 00002237		ldi		r4,#TXTBGN
FFFC3AC4 80020213
FFFC3AC8 00010637		add		r4,r4,#65536
FFFC3ACC 00060613
FFFC3AD0 00460233
FFFC3AD4 FC49C6E3		blt		a1,r4,SAVE4
FFFC3AD8 DC000A63		bra		WSTART
                        	
                        	SAVE:
FFFC3ADC 00002E37		ldi		$t2,#TXTBGN	;set pointer to start of prog. area
FFFC3AE0 800E0E13
FFFC3AE4 70402E83		lw		$t3,TXTUNF	;set pointer to end of prog. area
                        	SAVE1:
FFFC3AE8 054000EF		call	AUXOCRLF    ; send out a CR & LF (CP/M likes this)
FFFC3AEC 03CEC863		bgt		$t2,$t3,SAVEND; are we finished?
FFFC3AF0 03A06913		ldi		a0,#':'		; if not, start a line
FFFC3AF4 D1CFF0EF		call	GOAUXO
FFFC3AF8 000E2903		lw		a0,[$t2]		; get line number
FFFC3AFC 004E0E13		add		$t2,$t2,#4
FFFC3B00 060000EF		call	PWORD       ; output line number as 5-digit hex
                        	SAVE2:
FFFC3B04 000E4903		lbu		a0,[$t2]		; get a text char.
FFFC3B08 001E0E13		add		$t2,$t2,#1
FFFC3B0C 00D06D93		ldi		$t1,#CR
FFFC3B10 FDB90CE3		beq		a0,$t1,SAVE1	; is it the end of the line? if so, send CR & LF and start new line
FFFC3B14 CFCFF0EF		call	GOAUXO		; send it out
FFFC3B18 FE0006E3		bra		SAVE2		; go back for more text
                        	SAVEND:
FFFC3B1C 04006913		ldi		a0,#'@'		; send end-of-program indicator
FFFC3B20 CF0FF0EF		call	GOAUXO
FFFC3B24 018000EF		call	AUXOCRLF    ; followed by a CR & LF
FFFC3B28 01A06913		ldi		a0,#$1A		; and a control-Z to end the CP/M file
FFFC3B2C CE4FF0EF		call	GOAUXO
FFFC3B30 00000637		call	AUXOUT_FLUSH
FFFC3B34 249600E7
FFFC3B38 D6000A63		bra		WSTART		; then go do a warm start
                        	
                        	; output a CR LF sequence to auxillary output
                        	; Registers Affected
                        	;   r3 = LF
                        	AUXOCRLF:
FFFC3B3C FFC70713		sub		$sp,$sp,#4
FFFC3B40 00172023		sw		$ra,[$sp]
FFFC3B44 00D06913	  ldi		a0,#CR
FFFC3B48 CC8FF0EF	  call	GOAUXO
FFFC3B4C 00A06913	  ldi		a0,#LINEFD
FFFC3B50 CC0FF0EF	  call	GOAUXO
FFFC3B54 00072083	  lw		$ra,[$sp]
FFFC3B58 00470713	  add		$sp,$sp,#4
FFFC3B5C 00008067	  ret
                        	
                        	
                        	; output a word in hex format
                        	; tricky because of the need to reverse the order of the chars
                        	PWORD:
FFFC3B60 FF870713		sub		$sp,$sp,#8
FFFC3B64 00572023		sw		r5,[$sp]
FFFC3B68 00172223		sw		$ra,4[$sp]
FFFC3B6C 7A206293		ldi		r5,#NUMWKA+14
FFFC3B70 00096233		mov		r4,a0		; r4 = value
                        	pword1:
FFFC3B74 00026933	  mov   a0,r4	    ; a0 = value
FFFC3B78 00425213	  srl		r4,r4,#4	; shift over to next nybble
FFFC3B7C 038000EF	  call	toAsciiHex  ; convert LS nybble to ascii hex
FFFC3B80 01228023	  sb    a0,[r5]		; save in work area
FFFC3B84 FFF28293	  sub		r5,r5,#1
FFFC3B88 79406D93	  ldi		$t1,#NUMWKA
FFFC3B8C FFB2D4E3		bge		r5,$t1,pword1
                        	pword2:
FFFC3B90 00128293	  add		r5,r5,#1
FFFC3B94 0002C903	  lbu   a0,[r5]     ; get char to output
FFFC3B98 C78FF0EF		call	GOAUXO		; send it
FFFC3B9C 7A206D93		ldi		$t1,#NUMWKA+14
FFFC3BA0 FFB2C8E3		blt		r5,$t1,pword2
FFFC3BA4 00072283		lw		r5,[$sp]
FFFC3BA8 00472083		lw		$ra,4[$sp]
FFFC3BAC 00870713		add		$sp,$sp,#8
FFFC3BB0 00008067		ret
                        	
                        	; convert nybble in a1 to ascii hex chaa1
                        	; a1 = character to convert
                        	
                        	toAsciiHex:
FFFC3BB4 00F97913		and		a0,a0,#15	; make sure it's a nybble
FFFC3BB8 00A06D93		ldi		$t1,#10
FFFC3BBC 01B94463		blt		a0,$t1,tah1	; > 10 ?
FFFC3BC0 00790913		add		a0,a0,#7	; bump it up to the letter 'A'
                        	tah1:
FFFC3BC4 03090913		add		a0,a0,#'0'	; bump up to ascii '0'
FFFC3BC8 00008067		ret
                        	
                        	
                        	;******************************************************************
                        	; *** POKE ***
                        	;
                        	; 'POKE expr1,expa1' stores the byte from 'expa1' into the memory
                        	; address specified by 'expr1'.
                        	; 'POKEW expr1,expa1' stores the word from 'expa1' into the memory
                        	; address specified by 'expr1'.
                        	; 'POKEH expr1,expa1' stores the half-word from 'expa1' into the memory
                        	; address specified by 'expr1'.
                        	;******************************************************************
                        	;
                        	POKE:
FFFC3BCC 0BC000EF		call	OREXPR		; get the memory address
FFFC3BD0 5B5000EF		call	TSTC		; it must be followed by a comma
FFFC3BD4 0000002C		dw		','
FFFC3BD8 06000C63		bra		PKER
FFFC3BDC FFC70713		sub		$sp,$sp,#4
FFFC3BE0 01272023		sw		a0,[$sp]	; save the address
FFFC3BE4 0A4000EF		call	OREXPR		; get the byte to be POKE'd
FFFC3BE8 00072983		lw		a1,[$sp]	; get the address back
FFFC3BEC 00470713		add		$sp,$sp,#4
FFFC3BF0 01298023		sb		a0,[a1]		; store the byte in memory
FFFC3BF4 A2DFF06F		jmp		FINISH
                        	
                        	POKEW:
FFFC3BF8 090000EF		call	OREXPR		; get the memory address
FFFC3BFC 589000EF		call	TSTC		; it must be followed by a comma
FFFC3C00 0000002C		dw		','
FFFC3C04 04000663		bra		PKER
FFFC3C08 FFC70713		sub		$sp,$sp,#4
FFFC3C0C 01272023		sw		a0,[$sp]	; save the address
FFFC3C10 078000EF		call	OREXPR		; get the byte to be POKE'd
FFFC3C14 00072983		lw		a1,[$sp]	; get the address back
FFFC3C18 00470713		add		$sp,$sp,#4
FFFC3C1C 0129A023		sw		a0,[a1]		; store the byte in memory
FFFC3C20 A01FF06F		jmp		FINISH
                        	
                        	POKEH:
FFFC3C24 064000EF		call	OREXPR		; get the memory address
FFFC3C28 55D000EF		call	TSTC		; it must be followed by a comma
FFFC3C2C 0000002C		dw		','
FFFC3C30 02000063		bra		PKER
FFFC3C34 FFC70713		sub		$sp,$sp,#4
FFFC3C38 01272023		sw		a0,[$sp]	; save the address
FFFC3C3C 04C000EF		call	OREXPR		; get the byte to be POKE'd
FFFC3C40 00072983		lw		a1,[$sp]	; get the address back
FFFC3C44 00470713		add		$sp,$sp,#4
FFFC3C48 01299023		sh		a0,[a1]		; store the byte in memory
FFFC3C4C 9D5FF06F		jmp		FINISH
                        	
                        	PKER:
FFFC3C50 FFFC5937		ldi		a0,#msgComma
FFFC3C54 C2E90913
FFFC3C58 09D0006F		jmp		ERROR		; if no comma, say "What?"
                        	
                        	;******************************************************************
                        	; 'SYSX expr' jumps to the machine language subroutine whose
                        	; starting address is specified by 'expr'.  The subroutine can use
                        	; all registers but must leave the stack the way it found it.
                        	; The subroutine returns to the interpreter by executing an RTS.
                        	;******************************************************************
                        	
                        	SYSX:
FFFC3C5C 02C000EF		call	OREXPR		; get the subroutine's address
FFFC3C60 00081863		bne		v0,r0,sysx1; make sure we got a valid address
FFFC3C64 FFFC5937		ld		a0,#msgSYSBad
FFFC3C68 C7F90913
FFFC3C6C 0890006F		jmp		ERROR
                        	sysx1:
FFFC3C70 FFC70713		sub		$sp,$sp,#4
FFFC3C74 01C72023		sw		$t2,[$sp]	; save the text pointer
FFFC3C78 000800E7		call	[v0]			; jump to the subroutine
FFFC3C7C 00072E03		lw		$t2,[$sp]	; restore the text pointer
FFFC3C80 00470713		add		$sp,$sp,#4
FFFC3C84 99DFF06F		jmp		FINISH
                        	
                        	;******************************************************************
                        	; *** EXPR ***
                        	;
                        	; 'EXPR' evaluates arithmetical or logical expressions.
                        	; <OREXPR>::= <ANDEXPR> OR <ANDEXPR> ...
                        	; <ANDEXPR>::=<EXPR> AND <EXPR> ...
                        	; <EXPR>::=<ADDEXPR>
                        	;	   <ADDEXPR><rel.op.><ADDEXPR>
                        	; where <rel.op.> is one of the operators in TAB8 and the result
                        	; of these operations is 1 if true and 0 if false.
                        	; <ADDEXPR>::=(+ or -)<MULEXPR>(+ or -)<MULEXPR>(...
                        	; where () are optional and (... are optional repeats.
                        	; <MULEXPR>::=<FUNCEXPR>( <* or /><FUNCEXPR> )(...
                        	; <FUNCEXPR>::=<variable>
                        	;	    <function>
                        	;	    (<EXPR>)
                        	; <EXPR> is recursive so that the variable '@' can have an <EXPR>
                        	; as an index, functions can have an <EXPR> as arguments, and
                        	; <FUNCEXPR> can be an <EXPR> in parenthesis.
                        	;
                        	
                        	; <OREXPR>::=<ANDEXPR> OR <ANDEXPR> ...
                        	;
                        	OREXPR:
FFFC3C88 FF470713		sub		$sp,$sp,#12
FFFC3C8C 00172023		sw		$ra,[$sp]
FFFC3C90 00372223		sw		r3,4[$sp]
FFFC3C94 00472423		sw		r4,8[$sp]
FFFC3C98 058000EF		call	ANDEXPR		; get first <ANDEXPR>
                        	XP_OR1:
FFFC3C9C FF870713		sub		$sp,$sp,#8
FFFC3CA0 01072023		sw		$v0,[$sp]		; save <ANDEXPR> value
FFFC3CA4 01172223		sw		$v1,4[$sp]	; save type
FFFC3CA8 FFFC3EB7		ldi		$t3,#TAB10	; look up a logical operator
FFFC3CAC 2E4E8E93
FFFC3CB0 FFFC3F37		ldi		$t4,#TAB10_1
FFFC3CB4 34EF0F13
FFFC3CB8 EB8FF06F		jmp		EXEC		; go do it
                        	XP_OR:
FFFC3CBC 034000EF	  call	ANDEXPR
FFFC3CC0 00072903	  lw		$a0,[$sp]
FFFC3CC4 00870713	  add		$sp,$sp,#8
FFFC3CC8 01286833	  or    v0,v0,a0
FFFC3CCC FC0008E3	  bra   XP_OR1
                        	XP_ORX:
FFFC3CD0 00072803	  lw		$v0,[$sp]
FFFC3CD4 00472883	  lw		$v1,4[$sp]
FFFC3CD8 00870713	  add		$sp,$sp,#8
FFFC3CDC 00072083		lw		$ra,[$sp]
FFFC3CE0 00472183		lw		r3,4[$sp]
FFFC3CE4 00872203		lw		r4,8[$sp]
FFFC3CE8 00C70713		add		$sp,$sp,#12
FFFC3CEC 00008067	  ret
                        	
                        	
                        	; <ANDEXPR>::=<EXPR> AND <EXPR> ...
                        	;
                        	ANDEXPR:
FFFC3CF0 FFC70713		sub		$sp,$sp,#4
FFFC3CF4 00172023		sw		$ra,[$sp]
FFFC3CF8 0E8000EF		call	EXPR		; get first <EXPR>
                        	XP_AND1:
FFFC3CFC FF870713		sub		$sp,$sp,#8
FFFC3D00 01072023		sw		$v0,[$sp]		; save <EXPR> value
FFFC3D04 01172223		sw		$v1,4[$sp]	; save type
FFFC3D08 FFFC3EB7		ldi		$t3,#TAB9		; look up a logical operator
FFFC3D0C 2E0E8E93
FFFC3D10 FFFC3F37		ldi		$t4,#TAB9_1
FFFC3D14 34AF0F13
FFFC3D18 E58FF06F		jmp		EXEC		; go do it
                        	XP_AND:
FFFC3D1C 0C4000EF	  call	EXPR
FFFC3D20 00072903	  lw		$a0,[$sp]
FFFC3D24 00870713	  add		$sp,$sp,#8
FFFC3D28 01287833	  and   v0,v0,a0
FFFC3D2C FC0008E3	  bra   XP_AND1
                        	XP_ANDX:
FFFC3D30 00072803	  lw		$v0,[$sp]
FFFC3D34 00472883	  lw		$v1,4[$sp]
FFFC3D38 00870713	  add		$sp,$sp,#8
FFFC3D3C 00072083		lw		$ra,[$sp]
FFFC3D40 00470713		add		$sp,$sp,#4
FFFC3D44 00008067	  ret
                        	
                        	
                        	; Determine if the character is a digit
                        	;   Parameters
                        	;       a0 = char to test
                        	;   Returns
                        	;       a0 = 1 if digit, otherwise 0
                        	;
                        	isDigit:
FFFC3D48 03006D93		ldi		$t1,#'0'
FFFC3D4C 01B94A63		blt		a0,$t1,isDigitFalse
FFFC3D50 03906D93		ldi		$t1,#'9'
FFFC3D54 012DC663		bgt		a0,$t1,isDigitFalse
FFFC3D58 00106813		ldi		v0,#1
FFFC3D5C 00008067	  ret
                        	isDigitFalse:
FFFC3D60 00006833	  mov		v0,r0
FFFC3D64 00008067	  ret
                        	
                        	
                        	; Determine if the character is a alphabetic
                        	;   Parameters
                        	;       a0 = char to test
                        	;   Returns
                        	;       a0 = 1 if alpha, otherwise 0
                        	;
                        	isAlpha:
FFFC3D68 04106D93		ldi		$t1,#'A'
FFFC3D6C 03B94263		blt		a0,$t1,isAlphaFalse
FFFC3D70 05A06D93		ldi		$t1,#'Z'
FFFC3D74 012DDA63		ble		a0,$t1,isAlphaTrue
FFFC3D78 06106D93		ldi		$t1,#'a'
FFFC3D7C 01B94A63		blt		a0,$t1,isAlphaFalse
FFFC3D80 07A06D93		ldi		$t1,#'z'
FFFC3D84 012DC663		bgt		a0,$t1,isAlphaFalse
                        	isAlphaTrue:
FFFC3D88 00106813	  ldi		v0,#1
FFFC3D8C 00008067	  ret
                        	isAlphaFalse:
FFFC3D90 00006833	  mov		v0,r0
FFFC3D94 00008067	  ret
                        	
                        	
                        	; Determine if the character is a alphanumeric
                        	;   Parameters
                        	;       a0 = char to test
                        	;   Returns
                        	;       a0 = 1 if alpha, otherwise 0
                        	;
                        	isAlnum:
FFFC3D98 FFC70713		sub		$sp,$sp,#4
FFFC3D9C 00172023		sw		$ra,[$sp]
FFFC3DA0 FA9FF0EF	  call	isDigit
FFFC3DA4 00081463		bne		v0,r0,isDigitx	; if it is a digit
FFFC3DA8 FC1FF0EF	  call  isAlpha
                        	isDigitx:
FFFC3DAC 00072083		lw		$ra,[$sp]
FFFC3DB0 00470713		add		$sp,$sp,#4
FFFC3DB4 00008067	  ret
                        	
                        	FORCEFIT:
FFFC3DB8 03198263		beq		a1,v1,.0001				; types match
FFFC3DBC 00006D13		ldi		$t0,#0
FFFC3DC0 01A98663		beq		a1,$t0,.intAnd
                        	;	itof	$f1,$v0
FFFC3DC4 00106913		ldi		a0,#1
FFFC3DC8 00008067		ret
                        	.intAnd:
FFFC3DCC 00106D13		ldi		$t0,#1
FFFC3DD0 01A89663		bne		$v1,$t0,.0001
                        	;	itof	$f2,$a1
FFFC3DD4 00106993		ldi		$a1,#1
FFFC3DD8 00008067		ret
                        	.0001:
FFFC3DDC 00008067		ret
                        	
                        	EXPR:
FFFC3DE0 FFC70713		sub		$sp,$sp,#4
FFFC3DE4 00172023		sw		$ra,[$sp]
FFFC3DE8 11C000EF		call	ADDEXPR
FFFC3DEC FF870713		sub		$sp,$sp,#8				; save <ADDEXPR> value
FFFC3DF0 01072023		sw		v0,[$sp]
FFFC3DF4 01172223		sw		v1,4[$sp]					; save type
FFFC3DF8 FFFC3EB7		ldi		$t3,#TAB8		; look up a relational operator
FFFC3DFC 2D6E8E93
FFFC3E00 FFFC3F37		ldi		$t4,#TAB8_1
FFFC3E04 33CF0F13
FFFC3E08 D68FF06F		jmp		EXEC		; go do it
                        	XP11:
FFFC3E0C 00072903		lw		a0,[$sp]
FFFC3E10 00472983		lw		a1,4[$sp]
FFFC3E14 00870713		add		$sp,$sp,#8
FFFC3E18 0C4000EF		call	XP18	; is it ">="?
FFFC3E1C 09095A63		bge		a0,v0,XPRT1	; no, return v0=1
FFFC3E20 06000E63		bra		XPRT0	; else return v0=0
                        	XP12:
FFFC3E24 00072903		lw		a0,[$sp]
FFFC3E28 00472983		lw		a1,4[$sp]
FFFC3E2C 00870713		add		$sp,$sp,#8
FFFC3E30 0AC000EF		call	XP18	; is it "<>"?
FFFC3E34 07091E63		bne		a0,v0,XPRT1	; no, return a1=1
FFFC3E38 06000263		bra		XPRT0	; else return a1=0
                        	XP13:
FFFC3E3C 00072903		lw		a0,[$sp]
FFFC3E40 00472983		lw		a1,4[$sp]
FFFC3E44 00870713		add		$sp,$sp,#8
FFFC3E48 094000EF		call	XP18	; is it ">"?
FFFC3E4C 07284263		bgt		a0,v0,XPRT1	; no, return a1=1
FFFC3E50 04000663		bra		XPRT0	; else return a1=0
                        	XP14:
FFFC3E54 00072903		lw		a0,[$sp]
FFFC3E58 00472983		lw		a1,4[$sp]
FFFC3E5C 00870713		add		$sp,$sp,#8
FFFC3E60 07C000EF		call	XP18	; is it "<="?
FFFC3E64 05285663		ble		a0,v0,XPRT1	; no, return a1=1
FFFC3E68 02000A63		bra		XPRT0	; else return a1=0
                        	XP15:
FFFC3E6C 00072903		lw		a0,[$sp]
FFFC3E70 00472983		lw		a1,4[$sp]
FFFC3E74 00870713		add		$sp,$sp,#8
FFFC3E78 064000EF		call	XP18	; is it "="?
FFFC3E7C 03090A63		beq		a0,v0,XPRT1	; if not, return a1=1
FFFC3E80 00000E63		bra		XPRT0	; else return a1=0
                        	XP16:
FFFC3E84 00072903		lw		a0,[$sp]
FFFC3E88 00472983		lw		a1,4[$sp]
FFFC3E8C 00870713		add		$sp,$sp,#8
FFFC3E90 04C000EF		call	XP18	; is it "<"?
FFFC3E94 01094E63		blt		a0,v0,XPRT1	; if not, return a1=1
FFFC3E98 00000263		bra		XPRT0	; else return a1=0
                        	XPRT0:
FFFC3E9C 00006833		mov		v0,x0   ; return a0=0 (false)
FFFC3EA0 000068B3		mov		v1,x0		; type = int
FFFC3EA4 00072083		lw		$ra,[$sp]
FFFC3EA8 00470713		add		$sp,$sp,#4
FFFC3EAC 00008067		ret
                        	XPRT1:
FFFC3EB0 00106813		ldi		v0,#1	; return a0=1 (true)
FFFC3EB4 00006893		ldi		v1,#0	; type = int
FFFC3EB8 00072083		lw		$ra,[$sp]
FFFC3EBC 00470713		add		$sp,$sp,#4
FFFC3EC0 00008067		ret
                        	
                        	XP17:				; it's not a rel. operator
FFFC3EC4 00072803		lw		v0,[$sp]; return a1=<ADDEXPR>
FFFC3EC8 00472883		lw		v1,4[$sp]
FFFC3ECC 00870713		add		$sp,$sp,#8
FFFC3ED0 00072083		lw		$ra,[$sp]
FFFC3ED4 00470713		add		$sp,$sp,#4
FFFC3ED8 00008067		ret
                        	
                        	XP18:
FFFC3EDC FF470713		sub		$sp,$sp,#12
FFFC3EE0 00172023		sw		$ra,[$sp]
FFFC3EE4 01072223		sw		v0,4[$sp]
FFFC3EE8 01172423		sw		v1,8[$sp]
FFFC3EEC 018000EF		call	ADDEXPR		; do a second <ADDEXPR>
FFFC3EF0 00472903		lw		a0,4[$sp]
FFFC3EF4 00872983		lw		a1,8[$sp]
FFFC3EF8 00072083		lw		$ra,[$sp]
FFFC3EFC 00C70713		add		$sp,$sp,#12
FFFC3F00 00008067		ret
                        	
                        	; <ADDEXPR>::=(+ or -)<MULEXPR>(+ or -)<MULEXPR>(...
                        	//message "ADDEXPR"
                        	ADDEXPR:
FFFC3F04 FFC70713		sub		$sp,$sp,#4
FFFC3F08 00172023		sw		$ra,[$sp]
FFFC3F0C 279000EF		call	TSTC		; negative sign?
FFFC3F10 0000002D		dw		'-'
FFFC3F14 00000C63		bra		XP21
FFFC3F18 00006833		mov		v0,r0		; yes, fake '0-'
FFFC3F1C FF870713		sub		$sp,$sp,#8
FFFC3F20 01072023		sw		v0,[$sp]
FFFC3F24 01172223		sw		v1,4[$sp]
FFFC3F28 04000863		bra		XP26
                        	XP21:
FFFC3F2C 259000EF		call	TSTC		; positive sign? ignore it
FFFC3F30 0000002B		dw		'+'
FFFC3F34 00000263		bra		XP22
                        	XP22:
FFFC3F38 064000EF		call	MULEXPR		; first <MULEXPR>
                        	XP23:
FFFC3F3C FF870713		sub		$sp,$sp,#8; yes, save the value
FFFC3F40 01072023		sw		v0,[$sp]
FFFC3F44 01172223		sw		v1,4[$sp]	; and type
FFFC3F48 23D000EF		call	TSTC		; add?
FFFC3F4C 0000002B		dw		'+'
FFFC3F50 00000E63		bra		XP25
FFFC3F54 048000EF		call	MULEXPR		; get the second <MULEXPR>
                        	XP24:
FFFC3F58 00072903		lw		a0,[$sp]
FFFC3F5C 00472983		lw		a1,4[$sp]
FFFC3F60 00870713		add		$sp,$sp,#8
FFFC3F64 01280833		add		v0,v0,a0	; add it to the first <MULEXPR>
                        	;	BVS.L	QHOW		brnch if there's an overflow
FFFC3F68 FC000AE3		bra		XP23		; else go back for more operations
                        	XP25:
FFFC3F6C 219000EF		call	TSTC		; subtract?
FFFC3F70 0000002D		dw		'-'
FFFC3F74 00000863		bra		XP45
                        	XP26:
FFFC3F78 024000EF		call	MULEXPR		; get second <MULEXPR>
FFFC3F7C 41000833		sub		v0,r0,v0	; change its sign
FFFC3F80 FC000CE3		bra		XP24		; and do an addition
                        	XP45:
FFFC3F84 00072803		lw		v0,[$sp]
FFFC3F88 00472883		lw		v1,4[$sp]
FFFC3F8C 00870713		add		$sp,$sp,#8
FFFC3F90 00072083		lw		$ra,[$sp]
FFFC3F94 00470713		add		$sp,$sp,#4
FFFC3F98 00008067		ret
                        	
                        	
                        	; <MULEXPR>::=<FUNCEXPR>( <* or /><FUNCEXPR> )(...
                        	
                        	MULEXPR:
FFFC3F9C FFC70713		sub		$sp,$sp,#4
FFFC3FA0 00172023		sw		$ra,[$sp]
FFFC3FA4 094000EF		call	FUNCEXPR		; get first <FUNCEXPR>
                        	XP31:
FFFC3FA8 FF870713		sub		$sp,$sp,#8
FFFC3FAC 01072023		sw		v0,[$sp]; yes, save that first result
FFFC3FB0 01172223		sw		v1,4[$sp]
FFFC3FB4 1D1000EF		call	TSTC		; multiply?
FFFC3FB8 0000002A		dw		'*'
FFFC3FBC 00000E63		bra		XP34
FFFC3FC0 078000EF		call	FUNCEXPR		; get second <FUNCEXPR>
FFFC3FC4 00072903		lw		a0,[$sp]
FFFC3FC8 00472983		lw		a1,4[$sp]
FFFC3FCC 00870713		add		$sp,$sp,#8
FFFC3FD0 03280833		mul		v0,v0,a0	; multiply the two
FFFC3FD4 FC000AE3		bra		XP31        ; then look for more terms
                        	XP34:
FFFC3FD8 1AD000EF		call	TSTC		; divide?
FFFC3FDC 0000002F		dw		'/'
FFFC3FE0 00000E63		bra		XP35
FFFC3FE4 054000EF		call	FUNCEXPR		; get second <FUNCEXPR>
FFFC3FE8 00072903		lw		a0,[$sp]
FFFC3FEC 00472983		lw		a1,4[$sp]
FFFC3FF0 00870713		add		$sp,$sp,#8
FFFC3FF4 03284833		div		v0,v0,a0	; do the division
FFFC3FF8 FA0008E3		bra		XP31		; go back for any more terms
                        	XP35:
FFFC3FFC 189000EF		call	TSTC
FFFC4000 00000025		dw		'%'
FFFC4004 00000E63		bra		XP47
FFFC4008 030000EF		call	FUNCEXPR
FFFC400C 00072903		lw		a0,[$sp]
FFFC4010 00472983		lw		a1,4[$sp]
FFFC4014 00870713		add		$sp,$sp,#8
FFFC4018 03286833		rem		v0,v0,a0
FFFC401C F80006E3		bra		XP31
                        	XP47:
FFFC4020 00072803		lw		v0,[$sp]
FFFC4024 00472883		lw		v1,4[$sp]
FFFC4028 00870713		add		$sp,$sp,#8
FFFC402C 00072083		lw		$ra,[$sp]
FFFC4030 00470713		add		$sp,$sp,#4
FFFC4034 00008067		ret
                        	
                        	
                        	; Functions are called through FUNCEXPR
                        	; <FUNCEXPR>::=<variable>
                        	;	    <function>
                        	;	    (<EXPR>)
                        	
                        	FUNCEXPR:
FFFC4038 FFC70713		sub		$sp,$sp,#4
FFFC403C 00172023		sw		$ra,[$sp]
FFFC4040 FFFC3EB7	  ldi		$t3,#TAB4		; find possible function
FFFC4044 2ABE8E93
FFFC4048 FFFC3F37	  ldi		$t4,#TAB4_1
FFFC404C 320F0F13
FFFC4050 B20FF06F		jmp		EXEC        ; branch to function which does subsequent ret for FUNCEXPR
                        	XP40:                   ; we get here if it wasn't a function
FFFC4054 00006933		mov		a0,x0
FFFC4058 070000EF		call	TSTV
FFFC405C 00080A63		beq   v0,x0,XP41	; not a variable
FFFC4060 00082803		lw		$v0,[$v0]		; if a variable, return its value in v0
FFFC4064 00072083		lw		$ra,[$sp]
FFFC4068 00470713		add		$sp,$sp,#4
FFFC406C 00008067		ret
                        	XP41:
FFFC4070 161000EF		call	TSTNUM		; or is it a number?
FFFC4074 00089463		bne		v1,x0,XP46	; (if not, # of digits will be zero) if so, return it in v0
FFFC4078 010000EF		call	PARN        ; check for (EXPR)
                        	XP46:
FFFC407C 00072083		lw		$ra,[$sp]
FFFC4080 00470713		add		$sp,$sp,#4
FFFC4084 00008067		ret
                        	
                        	
                        	; Check for a parenthesized expression
                        	PARN:
FFFC4088 FFC70713		sub		$sp,$sp,#4
FFFC408C 00172023		sw		$ra,[$sp]	
FFFC4090 0F5000EF		call	TSTC		; else look for ( OREXPR )
FFFC4094 00000028		dw		'('
FFFC4098 02000063		bra		XP43
FFFC409C BEDFF0EF		call	OREXPR
FFFC40A0 0E5000EF		call	TSTC
FFFC40A4 00000029		dw		')'
FFFC40A8 00000863		bra		XP43
                        	XP42:
FFFC40AC 00072083		lw		$ra,[$sp]
FFFC40B0 00470713		add		$sp,$sp,#4
FFFC40B4 00008067		ret
                        	XP43:
FFFC40B8 00470713		add		$sp,$sp,#4		; get rid of return address
FFFC40BC FFFC5937		ldi		a0,#msgWhat
FFFC40C0 BB490913
FFFC40C4 4300006F		jmp		ERROR
                        	
                        	
                        	; ===== Test for a valid variable name.  Returns Z=1 if not
                        	;	found, else returns Z=0 and the address of the
                        	;	variable in a0.
                        	; Parameters
                        	;		a0 = 1 = allocate if not found
                        	; Returns
                        	;		v0 = address of variable, zero if not found
                        	
                        	TSTV:
FFFC40C8 FF870713		sub		$sp,$sp,#8
FFFC40CC 00572023		sw		r5,[$sp]
FFFC40D0 00172223		sw		$ra,4[$sp]
FFFC40D4 000962B3		mov		r5,a0		; r5=allocate flag
FFFC40D8 16D000EF		call	IGNBLK
FFFC40DC 000E4903		lbu		a0,[$t2]		; look at the program text
FFFC40E0 04006D93		ldi		$t1,#'@'
FFFC40E4 07B94263		blt		a0,$t1,tstv_notfound	; C=1: not a variable
FFFC40E8 03B91E63		bne		a0,$t1,TV1				; brnch if not "@" array
FFFC40EC 001E0E13		add		$t2,$t2,#1	; If it is, it should be
FFFC40F0 F99FF0EF		call	PARN		; followed by (EXPR) as its index.
                        	;	BCS.L	QHOW		say "How?" if index is too big
FFFC40F4 00000263		bra		TV3
                        	TV3:
FFFC40F8 FFC70713		sub		$sp,$sp,#4	; save the index
FFFC40FC 01072023		sw		v0,[$sp]
FFFC4100 2E4000EF		call	SIZEX		; get amount of free memory
FFFC4104 00072983		lw		a1,[$sp]
FFFC4108 00470713		add		$sp,$sp,#4	; get back the index
FFFC410C 0109C663		blt		a1,v0,TV2		; see if there's enough memory
FFFC4110 00870713		add		$sp,$sp,#8
FFFC4114 3CC0006F		jmp   QSORRY		; if not, say "Sorry"
                        	TV2:
FFFC4118 70802903		lw		a0,VARBGN	; put address of array element...
FFFC411C 41390833		sub   v0,a0,a1    ; into a0 (neg. offset is used)
FFFC4120 00000C63		bra   TSTVRT
                        	TV1:	
FFFC4124 038000EF	  call	getVarName      ; get variable name
FFFC4128 00080863	  beq   v0,x0,TSTVRT    ; if not, return v0=0
FFFC412C 00086933	  mov		a0,v0
FFFC4130 0002E9B3	  mov		a1,r5
FFFC4134 0E8000EF	  call	findVar     ; find or allocate
                        	TSTVRT:
FFFC4138 00072283		lw		r5,[$sp]
FFFC413C 00472083		lw		$ra,4[$sp]
FFFC4140 00870713		add		$sp,$sp,#8
FFFC4144 00008067		ret								; v0<>0 (if found)
                        	tstv_notfound:
FFFC4148 00072283		lw		r5,[$sp]
FFFC414C 00472083		lw		$ra,4[$sp]
FFFC4150 00870713		add		$sp,$sp,#8
FFFC4154 00006833		mov		v0,x0				; v0=0 if not found
FFFC4158 00008067	  ret
                        	
                        	; Get a variable name. Called after blanks have been ignored.
                        	;
                        	; Returns
                        	;   v0 = 3 character variable name + type
                        	;
                        	getVarName:
FFFC415C FF870713		sub		$sp,$sp,#8
FFFC4160 00572023		sw		r5,[$sp]
FFFC4164 00172223		sw		$ra,4[$sp]
FFFC4168 000E4903	  lbu   a0,[$t2]		; get first character
FFFC416C FFC70713	  sub		$sp,$sp,#4	; save off current name
FFFC4170 01272023	  sw		a0,[$sp]
FFFC4174 BF5FF0EF	  call	isAlpha
FFFC4178 08080663	  beq   v0,r0,gvn1
FFFC417C 00206293	  ldi	  r5,#2       ; loop two more times
                        	
                        		; check for second/third character
                        	gvn4:
FFFC4180 001E0E13		add		$t2,$t2,#1
FFFC4184 000E4903		lbu   a0,[$t2]		; do we have another char ?
FFFC4188 C11FF0EF		call	isAlnum
FFFC418C 02080C63		beq   v0,x0,gvn2	; nope
FFFC4190 00072903		lw		a0,[$sp]
FFFC4194 00470713		add		$sp,$sp,#4	; get varname
FFFC4198 00891913		sll		a0,a0,#8
FFFC419C 000E4983		lbu   a1,[$t2]
FFFC41A0 01396933		or    a0,a0,a1   ; add in new char
FFFC41A4 FFC70713	  sub		$sp,$sp,#4	; save off current name again
FFFC41A8 01272023	  sw		a0,[$sp]
FFFC41AC FFF28293	  sub		r5,r5,#1
FFFC41B0 FC5048E3	  bgt		r5,x0,gvn4
                        	
                        	 	; now ignore extra variable name characters
                        	gvn6:
FFFC41B4 001E0E13		add		$t2,$t2,#1
FFFC41B8 000E4903		lbu   a0,[$t2]		; do we have another char ?
FFFC41BC BDDFF0EF	  call  isAlnum
FFFC41C0 FE081AE3	  bne   v0,x0,gvn6	; keep looping as long as we have identifier chars
                        	
                        	  ; check for a variable type
                        	gvn2:
FFFC41C4 000E4983		lbu   a1,[$t2]
FFFC41C8 02506D93		ldi		$t1,#'%'
FFFC41CC 01B98A63		beq		a1,$t1,gvn3
FFFC41D0 02406D93		ldi		$t1,#'$'
FFFC41D4 01B98663		beq		a1,$t1,gvn3
FFFC41D8 FFFE0E13	  sub		$t2,$t2,#1
FFFC41DC 02E06993	  ldi		$a1,#'.'		; if no variable type assume float
                        	
                        	  ; insert variable type indicator and return
                        	gvn3:
FFFC41E0 001E0E13		add		$t2,$t2,#1
FFFC41E4 00072903		lw		a0,[$sp]
FFFC41E8 00470713		add		$sp,$sp,#4	; get varname
FFFC41EC 00891913		sll		a0,a0,#8
FFFC41F0 01396833	  or    v0,a0,a1    ; add in variable type
FFFC41F4 00072283	  lw		r5,[$sp]
FFFC41F8 00472083	  lw		$ra,4[$sp]
FFFC41FC 00870713	  add		$sp,$sp,#8
FFFC4200 00008067	  ret								; return a0 = varname
                        	
                        	  ; not a variable name
                        	gvn1:
FFFC4204 00470713		add		$sp,$sp,#4	; pop a0 (varname)
FFFC4208 00072283		lw		r5,[$sp]
FFFC420C 00472083	  lw		$ra,4[$sp]
FFFC4210 00870713		add		$sp,$sp,#8
FFFC4214 00006833	  mov		v0,x0       ; return v0 = 0 if not a varname
FFFC4218 00008067	  ret
                        	
                        	
                        	; Find variable
                        	;   a0 = varname
                        	;		a1 = allocate flag
                        	; Returns
                        	;   v0 = variable address, Z =0 if found / allocated, Z=1 if not found
                        	
                        	findVar:
FFFC421C FF870713		sub		$sp,$sp,#8
FFFC4220 00772023		sw		x7,[$sp]
FFFC4224 00372223		sw		x3,4[$sp]
FFFC4228 70802183	  lw    x3,VARBGN
                        	fv4:
FFFC422C 0001A383	  lw    x7,[x3]     ; get varname / type
FFFC4230 02038663	  beq   x7,x0,fv3		; no more vars ?
FFFC4234 02790863	  beq   a0,x7,fv1		; match ?
FFFC4238 00818193		add		x3,x3,#8		; move to next var
FFFC423C 70C02383	  lw    x7,VAREND		; 
FFFC4240 FE71C6E3	  blt   x3,x7,fv4		; loop back to look at next var
                        	
                        	  ; variable not found
                        	  ; no more memory
FFFC4244 00072383	  lw		x7,[$sp]
FFFC4248 00472183	  lw		x3,4[$sp]
FFFC424C 00870713	  add		$sp,$sp,#8
FFFC4250 FFFC5937	  ldi		a0,#msgVarSpace
FFFC4254 C0290913
FFFC4258 29C0006F	  jmp   ERROR
                        	
                        	  ; variable not found
                        	  ; allocate new ?
                        	fv3:
FFFC425C 00098E63		beq		a1,x0,fv2
FFFC4260 0121A023	  sw    a0,[x3]     ; save varname / type
                        	  ; found variable
                        	  ; return address
                        	fv1:
FFFC4264 00418813	  add		v0,x3,#4
FFFC4268 00072383	  lw		x7,[$sp]
FFFC426C 00472183	  lw		x3,4[$sp]
FFFC4270 00870713	  add		$sp,$sp,#8
FFFC4274 00008067	  ret			    			; v0 = address
                        	
                        	  ; didn't find var and not allocating
                        	fv2:
FFFC4278 00072383	  lw		x7,[$sp]
FFFC427C 00472183	  lw		x3,4[$sp]
FFFC4280 00870713	  add		$sp,$sp,#8
FFFC4284 00006833		mov		v0,x0				; v0 = nullptr
FFFC4288 00008067	  ret
                        	
                        	; The following functions are entered via a jump instruction with
                        	; the return address already saved.
                        	
                        	; ===== The PEEK function returns the byte stored at the address
                        	;	contained in the following expression.
                        	;
                        	PEEK:
FFFC428C DFDFF0EF		call	PARN		; get the memory address
FFFC4290 00080803		lb		v0,[v0]		; get the addressed byte
FFFC4294 000068B3		mov		v1,x0			; type = int
FFFC4298 00072083		lw		$ra,[$sp]
FFFC429C 00470713		add		$sp,$sp,#4
FFFC42A0 00008067		ret
                        	PEEKW:
FFFC42A4 DE5FF0EF		call	PARN		; get the memory address
FFFC42A8 00082803		lw		v0,[v0]		; get the addressed word
FFFC42AC 000068B3		mov		v1,x0			; type = int
FFFC42B0 00072083		lw		$ra,[$sp]
FFFC42B4 00470713		add		$sp,$sp,#4
FFFC42B8 00008067		ret
                        	PEEKH:
FFFC42BC DCDFF0EF		call	PARN		; get the memory address
FFFC42C0 00081803		lh		v0,[v0]		; get the addressed byte
FFFC42C4 000068B3		mov		v1,x0			; type = int
FFFC42C8 00072083		lw		$ra,[$sp]
FFFC42CC 00470713		add		$sp,$sp,#4
FFFC42D0 00008067		ret
                        	
                        	
                        	; user function call
                        	; call the user function with argument in a0, type in a1
                        	USRX:
FFFC42D4 FFC70713		sub		$sp,$sp,#4
FFFC42D8 01A72023		sw		$t0,[$sp]
FFFC42DC DADFF0EF		call	PARN		; get expression value
FFFC42E0 00086933		mov		a0,v0
FFFC42E4 0008E9B3		mov		a1,v1
FFFC42E8 FFC70713		sub		$sp,$sp,#4	; save the text pointer
FFFC42EC 01C72023		sw		$t2,[$sp]
FFFC42F0 7A002D03		lw		$t0,usrJmp
FFFC42F4 000D00E7		call	[$t0]			; get usr vector, jump to the subroutine
FFFC42F8 00072E03		lw		$t2,[$sp]	; restore the text pointer
FFFC42FC 00470713		add		$sp,$sp,#4
FFFC4300 00072D03		lw		$t0,[$sp]
FFFC4304 00470713		add		$sp,$sp,#4
FFFC4308 00072083		lw		$ra,[$sp]
FFFC430C 00470713		add		$sp,$sp,#4
FFFC4310 00008067		ret
                        	
                        	
                        	; ===== The RND function returns a random number from 1 to
                        	;	the value of the following expression in D0.
                        	;
                        	RND:
FFFC4314 D75FF0EF		call	PARN		; get the upper limit
FFFC4318 04080063		beq		v0,r0,rnd2	; it must be positive and non-zero
FFFC431C 02084663		blt		v0,r0,rnd1
FFFC4320 000869B3		mov		a1,v0
FFFC4324 000868B3		mov		v1,v0
FFFC4328 00000637		call	gen_rand	; generate a random number
FFFC432C 28B600E7
FFFC4330 03186833		rem		v0,v0,v1
FFFC4334 00180813		add		v0,v0,#1
FFFC4338 000068B3		mov		v1,x0
FFFC433C 00072083		lw		$ra,[$sp]
FFFC4340 00470713		add		$sp,$sp,#4
FFFC4344 00008067		ret
                        	rnd1:
FFFC4348 FFFC5937		ldi		a0,#msgRNDBad
FFFC434C C6C90913
FFFC4350 00470713		add		$sp,$sp,#4
FFFC4354 1A00006F		jmp		ERROR
                        	rnd2:
FFFC4358 00000637		call	gen_rand	; generate a random number
FFFC435C 28B600E7
FFFC4360 000068B3		mov		v1,x0
FFFC4364 00072083		lw		$ra,[$sp]
FFFC4368 00470713		add		$sp,$sp,#4
FFFC436C 00008067		ret
                        	
                        	; ===== The ABS function returns an absolute value in a1.
                        	;
                        	ABS:
FFFC4370 D19FF0EF		call	PARN		; get the following expr.'s value
FFFC4374 00084863		blt		v0,r0,ABS1
FFFC4378 00072083		lw		$ra,[$sp]
FFFC437C 00470713		add		$sp,$sp,#4
FFFC4380 00008067		ret
                        	ABS1:
FFFC4384 41000833		sub		v0,x0,v0
FFFC4388 00072083		lw		$ra,[$sp]
FFFC438C 00470713		add		$sp,$sp,#4
FFFC4390 00008067		ret
                        	
                        	
                        	;==== The TICK function returns the cpu tick value in a0.
                        	;
                        	TICKX:
FFFC4394 C0001873		csrrw	v0,#$C00,x0
FFFC4398 000068B3		mov		v1,x0
FFFC439C 00072083		lw		$ra,[$sp]
FFFC43A0 00470713		add		$sp,$sp,#4
FFFC43A4 00008067		ret
                        	
                        	; ===== The SGN function returns the sign in a0. +1,0, or -1
                        	;
                        	SGN:
FFFC43A8 CE1FF0EF		call	PARN		; get the following expr.'s value
FFFC43AC 000068B3		mov		v1,x0
FFFC43B0 02080463		beq		v0,r0,SGN1
FFFC43B4 00084A63		blt		v0,r0,SGN2
FFFC43B8 00106813		ldi		v0,#1
FFFC43BC 00072083		lw		$ra,[$sp]
FFFC43C0 00470713		add		$sp,$sp,#4
FFFC43C4 00008067		ret
                        	SGN2:
FFFC43C8 FFF06813		ldi		v0,#-1
FFFC43CC 00072083		lw		$ra,[$sp]
FFFC43D0 00470713		add		$sp,$sp,#4
FFFC43D4 00008067		ret
                        	SGN1:
FFFC43D8 00072083		lw		$ra,[$sp]
FFFC43DC 00470713		add		$sp,$sp,#4
FFFC43E0 00008067		ret	
                        	
                        	; ===== The SIZE function returns the size of free memory in v0.
                        	; does not consider memory used by @()
                        	;
                        	SIZEX:
FFFC43E4 70802803		lw		v0,VARBGN	; get the number of free bytes...
FFFC43E8 70402883		lw		v1,TXTUNF	; between 'TXTUNF' and 'VARBGN'
FFFC43EC 41180833		sub		v0,v0,v1
FFFC43F0 000068B3		mov		v1,x0			; type = int
FFFC43F4 00072083		lw		$ra,[$sp]
FFFC43F8 00470713		add		$sp,$sp,#4
FFFC43FC 00008067		ret					; return the number in v0
                        	
                        	
                        	;******************************************************************
                        	;
                        	; *** SETVAL *** FIN *** ENDCHK *** ERROR (& friends) ***
                        	;
                        	; 'SETVAL' expects a variable, followed by an equal sign and then
                        	; an expression.  It evaluates the expression and sets the variable
                        	; to that value.
                        	;
                        	; returns
                        	; a1 = variable's address
                        	;
                        	SETVAL:
FFFC4400 FFC70713		sub		$sp,$sp,#4
FFFC4404 00172023		sw		$ra,[$sp]
FFFC4408 00106913	  ldi		a0,#1		; allocate var
FFFC440C CBDFF0EF	  call	TSTV		; variable name?
FFFC4410 00081A63	  bne		v0,x0,.sv2
FFFC4414 FFFC5937	 	ldi		a0,#msgVar
FFFC4418 C5690913
FFFC441C 00470713		add		$sp,$sp,#4
FFFC4420 0D40006F	 	jmp		ERROR 
                        	.sv2:
FFFC4424 FFC70713		sub		$sp,$sp,#4
FFFC4428 01072023		sw		v0,[$sp]	; save the variable's address
FFFC442C 558000EF		call	TSTC			; get past the "=" sign
FFFC4430 0000003D		dw		'='
FFFC4434 02000663		bra		SV1
FFFC4438 851FF0EF		call	OREXPR		; evaluate the expression
FFFC443C 00072983		lw		a1,[$sp]	; get back the variable's address
FFFC4440 00470713		add		$sp,$sp,#4
FFFC4444 0109A023		sw    v0,[a1]   ; and save value in the variable
FFFC4448 0009E833		mov		v0,a1			; return v0 = variable address
FFFC444C FFC9A883		lw		v1,-4[a1]
FFFC4450 0FF8F893		and		v1,v1,#$FF
FFFC4454 00072083		lw		$ra,[$sp]
FFFC4458 00470713		add		$sp,$sp,#4
FFFC445C 00008067		ret
                        	SV1:
FFFC4460 00470713		add		$sp,$sp,#4
FFFC4464 0880006F	  jmp	  QWHAT		; if no "=" sign
                        	
                        	
                        	; 'FIN' checks the end of a command.  If it ended with ":",
                        	; execution continues.	If it ended with a CR, it finds the
                        	; the next line and continues from there.
                        	;
                        	FIN:
FFFC4468 FFC70713		sub		$sp,$sp,#4
FFFC446C 00172023		sw		$ra,[$sp]
FFFC4470 514000EF		call	TSTC		; *** FIN ***
FFFC4474 0000003A		dw		':'
FFFC4478 00000663		bra		FI1
FFFC447C 00470713		add		$sp,$sp,#4	; if ":", discard return address
FFFC4480 80CFF06F		jmp		RUNSML		; continue on the same line
                        	FI1:
FFFC4484 500000EF		call	TSTC		; not ":", is it a CR?
FFFC4488 0000000D		dw		CR
FFFC448C 00000663		bra		FI2
                        							; else return to the caller
FFFC4490 00470713		add		$sp,$sp,#4	; yes, purge return address
FFFC4494 F91FE06F		jmp		RUNNXL		; execute the next line
                        	FI2:
FFFC4498 00072083		lw		$ra,[$sp]
FFFC449C 00470713		add		$sp,$sp,#4
FFFC44A0 00008067		ret					; else return to the caller
                        	
                        	
                        	; 'ENDCHK' checks if a command is ended with a CR. This is
                        	; required in certain commands, such as GOTO, RETURN, STOP, etc.
                        	;
                        	; Check that there is nothing else on the line
                        	; Registers Affected
                        	;   a0
                        	;
                        	ENDCHK:
FFFC44A4 FFC70713		sub		$sp,$sp,#4
FFFC44A8 00172023		sw		$ra,[$sp]
FFFC44AC 598000EF		call	IGNBLK
FFFC44B0 000E4903		lbu		a0,[$t2]
FFFC44B4 00D06D93		ldi		$t1,#CR
FFFC44B8 01B90863		beq		a0,$t1,ec1	; does it end with a CR?
FFFC44BC FFFC5937		ldi		a0,#msgExtraChars
FFFC44C0 D2790913
FFFC44C4 0300006F		jmp		ERROR
                        	ec1:
FFFC44C8 00072083		lw		$ra,[$sp]
FFFC44CC 00470713		add		$sp,$sp,#4
FFFC44D0 00008067		ret
                        	
                        	; 'ERROR' prints the string pointed to by a0. It then prints the
                        	; line pointed to by CURRNT with a "?" inserted at where the
                        	; old text pointer (should be on top of the stack) points to.
                        	; Execution of Tiny BASIC is stopped and a warm start is done.
                        	; If CURRNT is zero (indicating a direct command), the direct
                        	; command is not printed. If CURRNT is -1 (indicating
                        	; 'INPUT' command in progress), the input line is not printed
                        	; and execution is not terminated but continues at 'INPERR'.
                        	;
                        	; Related to 'ERROR' are the following:
                        	; 'QWHAT' saves text pointer on stack and gets "What?" message.
                        	; 'AWHAT' just gets the "What?" message and jumps to 'ERROR'.
                        	; 'QSORRY' and 'ASORRY' do the same kind of thing.
                        	; 'QHOW' and 'AHOW' also do this for "How?".
                        	;
                        	TOOBIG:
FFFC44D4 FFFC5937		ldi		a0,#msgTooBig
FFFC44D8 D1390913
FFFC44DC 00000C63		bra		ERROR
                        	QSORRY:
FFFC44E0 FFFC5937	  ldi		a0,#SRYMSG
FFFC44E4 BBB90913
FFFC44E8 00000663		bra	    ERROR
                        	QWHAT:
FFFC44EC FFFC5937		ldi		a0,#msgWhat
FFFC44F0 BB490913
                        	ERROR:
FFFC44F4 630000EF		call	PRMESG		; display the error message
FFFC44F8 71802903		lw		a0,CURRNT	; get the current line pointer
FFFC44FC 02090C63		beq		a0,r0,ERROR1	; if zero, do a warm start
FFFC4500 FFF06D93		ldi		$t1,#-1
FFFC4504 ADB90A63		beq		a0,$t1,INPERR	; is the line no. pointer = -1? if so, redo input
FFFC4508 000E4283		lbu		r5,[$t2]		; save the char. pointed to
FFFC450C 000E0023		sb		x0,[$t2]		; put a zero where the error is
FFFC4510 71802903		lw		a0,CURRNT	; point to start of current line
FFFC4514 414000EF		call	PRTLN		; display the line in error up to the 0
FFFC4518 00096333		mov     r6,a0	    ; save off end pointer
FFFC451C 005E0023		sb		r5,[$t2]		; restore the character
FFFC4520 03F06913		ldi		a0,#'?'		; display a "?"
FFFC4524 AE5FE0EF		call	GOOUT
FFFC4528 000069B3		mov		a1,r0		; stop char = 0
FFFC452C FFF30913		sub		a0,r6,#1	; point back to the error char.
FFFC4530 228000EF		call	PRTSTG		; display the rest of the line
                        	ERROR1:
FFFC4534 B79FE06F		jmp	    WSTART		; and do a warm start
                        	
                        	;******************************************************************
                        	;
                        	; *** GETLN *** FNDLN (& friends) ***
                        	;
                        	; 'GETLN' reads in input line into 'BUFFER'. It first prompts with
                        	; the character in r3 (given by the caller), then it fills the
                        	; buffer and echos. It ignores LF's but still echos
                        	; them back. Control-H is used to delete the last character
                        	; entered (if there is one), and control-X is used to delete the
                        	; whole line and start over again. CR signals the end of a line,
                        	; and causes 'GETLN' to return.
                        	;
                        	;
                        	GETLN:
FFFC4538 FF870713		sub		$sp,$sp,#8
FFFC453C 00572023		sw		r5,[$sp]
FFFC4540 00172223		sw		$ra,4[$sp]
FFFC4544 AC5FE0EF		call	GOOUT		; display the prompt
FFFC4548 00106913		ldi		a0,#1
                        	;	sw		a0,CursorFlash	; turn on cursor flash
FFFC454C 02006913		ldi		a0,#' '		; and a space
FFFC4550 AB9FE0EF		call	GOOUT
FFFC4554 71C06E13		ldi		$t2,#BUFFER	; $t2 is the buffer pointer
                        	.GL1:
FFFC4558 59C000EF		call	CHKIO		; check keyboard
FFFC455C FE080EE3		beq		v0,x0,.GL1	; wait for a char. to come in
FFFC4560 00806D93		ldi		$t1,#CTRLH
FFFC4564 05B80663		beq		v0,$t1,.GL3	; delete last character? if so
FFFC4568 01806D93		ldi		$t1,#CTRLX
FFFC456C 07B80663		beq		v0,$t1,.GL4	; delete the whole line?
FFFC4570 00D06D93		ldi		$t1,#CR
FFFC4574 01B80663		beq		v0,$t1,.GL2		; accept a CR
FFFC4578 02006D93		ldi		$t1,#' '
FFFC457C FDB84EE3		blt		v0,$t1,.GL1	; if other control char., discard it
                        	.GL2:
FFFC4580 010E0023		sb		v0,[$t2]		; save the char.
FFFC4584 001E0E13		add		$t2,$t2,#1
FFFC4588 FFC70713		sub		$sp,$sp,#4
FFFC458C 01072023		sw		v0,[$sp]
FFFC4590 00086933		mov		$a0,$v0
FFFC4594 A75FE0EF		call	GOOUT		; echo the char back out
FFFC4598 00072803		lw		v0,[$sp]; get char back (GOOUT destroys a0)
FFFC459C 00470713		add		$sp,$sp,#4
FFFC45A0 00D06D93		ldi		$t1,#CR
FFFC45A4 07B80663		beq		v0,$t1,.GL7			; if it's a CR, end the line
FFFC45A8 76F06D93		ldi		$t1,#BUFFER+BUFLEN-1
FFFC45AC FBBE46E3		blt		$t2,$t1,.GL1		; any more room? ; yes: get some more, else delete last char.
                        	.GL3:
FFFC45B0 00806913		ldi		a0,#CTRLH	; delete a char. if possible
FFFC45B4 A55FE0EF		call	GOOUT
FFFC45B8 02006913		ldi		a0,#' '
FFFC45BC A4DFE0EF		call	GOOUT
FFFC45C0 71C06D93		ldi		$t1,#BUFFER
FFFC45C4 F9CDDAE3		ble		$t2,$t1,.GL1	; any char.'s left?	; if not
FFFC45C8 00806913		ldi		a0,#CTRLH		; if so, finish the BS-space-BS sequence
FFFC45CC A3DFE0EF		call	GOOUT
FFFC45D0 FFFE0E13		sub		$t2,$t2,#1	; decrement the text pointer
FFFC45D4 F80002E3		bra		.GL1		; back for more
                        	.GL4:
FFFC45D8 000E6933		mov		a0,$t2		; delete the whole line
FFFC45DC 8E490293		sub		r5,a0,#BUFFER   ; figure out how many backspaces we need
FFFC45E0 02028463		beq		r5,r0,.GL6		; if none needed, brnch
FFFC45E4 FFF28293		sub		r5,r5,#1		; loop count is one less
                        	.GL5:
FFFC45E8 00806913		ldi		a0,#CTRLH		; and display BS-space-BS sequences
FFFC45EC A1DFE0EF		call	GOOUT
FFFC45F0 02006913		ldi		a0,#' '
FFFC45F4 A15FE0EF		call	GOOUT
FFFC45F8 00806913		ldi		a0,#CTRLH
FFFC45FC A0DFE0EF		call	GOOUT
FFFC4600 FFF28293		sub		r5,r5,#1
FFFC4604 FE0292E3		bne		r5,r0,.GL5
                        	.GL6:
FFFC4608 71C06E13		ldi		$t2,#BUFFER	; reinitialize the text pointer
FFFC460C F40006E3		bra		.GL1		; and go back for more
                        	.GL7:
FFFC4610 000E0023		sb		x0,[$t2]		; null terminate line
                        	;	sw		x0,CursorFlash	; turn off cursor flash
FFFC4614 00A06913		ldi		a0,#LINEFD	; echo a LF for the CR
FFFC4618 9F1FE0EF		call	GOOUT
FFFC461C 00072283		lw		r5,[$sp]
FFFC4620 00472083		lw		$ra,4[$sp]
FFFC4624 00870713		add		$sp,$sp,#8
FFFC4628 00008067		ret
                        	
                        	
                        	; 'FNDLN' finds a line with a given line no. (in a0) in the
                        	; text save area.  $t3 is used as the text pointer. If the line
                        	; is found, $t3 will point to the beginning of that line
                        	; (i.e. the high byte of the line no.), and $v0 = 1.
                        	; If that line is not there and a line with a higher line no.
                        	; is found, $t3 points there and $v0 = 0. If we reached
                        	; the end of the text save area and cannot find the line, flags
                        	; $t3 = 0, $v0 = 0.
                        	; $v0=1 if line found
                        	; r0 = 1	<= line is found
                        	;	$t3 = pointer to line
                        	; r0 = 0    <= line is not found
                        	;	r9 = zero, if end of text area
                        	;	r9 = otherwise higher line number
                        	;
                        	; 'FNDLN' will initialize $t3 to the beginning of the text save
                        	; area to start the search. Some other entries of this routine
                        	; will not initialize $t3 and do the search.
                        	; 'FNDLNP' will start with $t3 and search for the line no.
                        	; 'FNDNXT' will bump $t3 by 4, find a CR and then start search.
                        	; 'FNDSKP' uses $t3 to find a CR, and then starts the search.
                        	; return Z=1 if line is found, r9 = pointer to line
                        	;
                        	; Parameters
                        	;	a0 = line number to find
                        	;
                        	FNDLN:
FFFC462C 00100DB7		ldi		$t1,#$FFFFF
FFFC4630 FFFD8D93
FFFC4634 01B94863		blt		a0,$t1,fl1	; line no. must be < 65535
FFFC4638 FFFC5937		ld		a0,#msgLineRange
FFFC463C C4190913
FFFC4640 EB5FF06F		jmp		ERROR
                        	fl1:
FFFC4644 00002EB7		ldi		$t3,#TXTBGN	; init. the text save pointer
FFFC4648 800E8E93
                        	
                        	FNDLNP:
FFFC464C 70402F03		lw		$t4,TXTUNF	; check if we passed the end
FFFC4650 03EEFA63		bgeu	$t3,$t4,FNDRET1; if so, return with r9=0,a0=0
FFFC4654 FF870713		sub		$sp,$sp,#8	; push a0
FFFC4658 01272023		sw		a0,[$sp]
FFFC465C 00172223		sw		ra,4[$sp]
FFFC4660 000EE933		mov		a0,t3
FFFC4664 298000EF		call	LoadWord		; get line number
FFFC4668 00072903		lw		a0,[$sp]		; pop a0
FFFC466C 00472083		lw		ra,4[$sp]
FFFC4670 00870713		add		$sp,$sp,#8
FFFC4674 01280C63		beq		v0,a0,FNDRET2
FFFC4678 01286E63		bltu	v0,a0,FNDNXT	; is this the line we want? no, not there yet
                        	FNDRET:
FFFC467C 00006833		mov		v0,x0	; line not found, but $t3=next line pointer
FFFC4680 00008067		ret
                        	FNDRET1:
                        	;	eor		r9,r9,r9	; no higher line
FFFC4684 00006833		mov		v0,x0	; line not found
FFFC4688 00008067		ret
                        	FNDRET2:
FFFC468C 00106813		ldi		v0,#1	; line found
FFFC4690 00008067		ret
                        	
                        	FNDNXT:
FFFC4694 004E8E93		add		$t3,$t3,#4	; find the next line
                        	
                        	FNDSKP:
FFFC4698 000EC883		lbu		v1,[$t3]
FFFC469C 001E8E93		add		$t3,$t3,#1
FFFC46A0 00D06D93		ldi		$t1,#CR
FFFC46A4 FFB89AE3		bne		v1,$t1,FNDSKP	; try to find a CR, keep looking
FFFC46A8 FA0002E3		bra		FNDLNP		; check if end of text
                        	
                        	
                        	;******************************************************************
                        	; 'MVUP' moves a block up from where a0 points to where a1 points
                        	; until a0=a2
                        	;
                        	MVUP1:
FFFC46AC 00090203		lb		r4,[a0]
FFFC46B0 00498023		sb		r4,[a1]
FFFC46B4 00190913		add		a0,a0,#1
FFFC46B8 00198993		add		a1,a1,#1
                        	MVUP:
FFFC46BC FF4918E3		bne		a0,a2,MVUP1
FFFC46C0 00008067		ret
                        	
                        	
                        	; 'MVDOWN' moves a block down from where a0 points to where a1
                        	; points until a0=a2
                        	;
                        	MVDOWN1:
FFFC46C4 FFF90913		sub		a0,a0,#1
FFFC46C8 FFF98993		sub		a1,a1,#1
FFFC46CC 00090203		lb		r4,[a0]
FFFC46D0 00498023		sb		r4,[a1]
                        	MVDOWN:
FFFC46D4 FF4918E3		bne		a0,a2,MVDOWN1
FFFC46D8 00008067		ret
                        	
                        	
                        	; 'POPA_' restores the 'FOR' loop variable save area from the stack
                        	;
                        	; 'PUSHA_' stacks for 'FOR' loop variable save area onto the stack
                        	;
                        	; Note: a single zero word is stored on the stack in the
                        	; case that no FOR loops need to be saved. This needs to be
                        	; done because PUSHA_ / POPA_ is called all the time.
                        	//message "POPA_"
                        	POPA_:
FFFC46DC 00072903		lw		a0,[$sp]
FFFC46E0 00470713		add		$sp,$sp,#4
FFFC46E4 71202823		sw		a0,LOPVAR	; restore LOPVAR, but zero means no more
FFFC46E8 02090463		beq		a0,x0,PP1
FFFC46EC 00072903		lw		a0,[$sp]
FFFC46F0 77202823		sw		a0,LOPPT
FFFC46F4 00472903		lw		a0,4[$sp]
FFFC46F8 77202A23		sw		a0,LOPLN
FFFC46FC 00872903		lw		a0,8[$sp]
FFFC4700 77202E23		sw		a0,LOPLMT
FFFC4704 00C72903		lw		a0,12[$sp]
FFFC4708 77202C23		sw		a0,LOPINC
FFFC470C 01070713		add		$sp,$sp,#16
                        	PP1:
FFFC4710 00008067		ret
                        	
                        	
                        	PUSHA_:
FFFC4714 79C02903		lw		a0,STKBOT	; Are we running out of stack room?
FFFC4718 01490913		add		a0,a0,#20	; we might need this many bytes
FFFC471C DD2742E3		blt		$sp,a0,QSORRY	; out of stack space
FFFC4720 71002983		lw		a1,LOPVAR		; save loop variables
FFFC4724 02098463		beq		a1,x0,PU1		; if LOPVAR is zero, that's all
FFFC4728 FF070713		sub		$sp,$sp,#16
FFFC472C 77002903		lw		a0,LOPPT
FFFC4730 01272023		sw		a0,[$sp]
FFFC4734 77402903		lw		a0,LOPLN
FFFC4738 01272223		sw		a0,4[$sp]
FFFC473C 77C02903		lw		a0,LOPLMT
FFFC4740 01272423		sw		a0,8[$sp]
FFFC4744 77802903		lw		a0,LOPINC
FFFC4748 01272623		sw		a0,12[$sp]
                        	PU1:
FFFC474C FFC70713		sub		$sp,$sp,#4
FFFC4750 01372023		sw		a1,[$sp]
FFFC4754 00008067		ret
                        	
                        	
                        	;******************************************************************
                        	;
                        	; 'PRTSTG' prints a string pointed to by a0. It stops printing
                        	; and returns to the caller when either a CR is printed or when
                        	; the next byte is the same as what was passed in a1 by the
                        	; caller.
                        	;
                        	; 'PRTLN' prints the saved text line pointed to by r3
                        	; with line no. and all.
                        	;
                        	
                        	; a0 = pointer to string
                        	; a1 = stop character
                        	; return v0 = pointer to end of line + 1
                        	
                        	PRTSTG:
FFFC4758 FEC70713		sub		$sp,$sp,#20
FFFC475C 00572023		sw		r5,[$sp]
FFFC4760 00672223		sw		r6,4[$sp]
FFFC4764 00772423		sw		r7,8[$sp]
FFFC4768 00172623		sw		$ra,12[$sp]
FFFC476C 01272823		sw		$a0,16[$sp]
FFFC4770 000962B3		mov   r5,a0	    ; r5 = pointer
FFFC4774 0009E333		mov   r6,a1	    ; r6 = stop char
                        	.PS1:
FFFC4778 0002C383	  lbu   r7,[r5]     ; get a text character
FFFC477C 00128293		add		r5,r5,#1
FFFC4780 00638E63		beq	  r7,r6,.PRTRET	; same as stop character? if so, return
FFFC4784 0003E933		mov   a0,r7
FFFC4788 881FE0EF		call	GOOUT		; display the char.
FFFC478C 00D06D93		ldi		$t1,#CR
FFFC4790 FFB394E3		bne   r7,$t1,.PS1	; is it a C.R.? no, go back for more
FFFC4794 00A06913		ldi		a0,#LINEFD  ; yes, add a L.F.
FFFC4798 871FE0EF		call	GOOUT
                        	.PRTRET:
FFFC479C 0003E8B3	  mov   v1,r7	    ; return a1 = stop char
FFFC47A0 0002E833		mov		v0,r5		; return a0 = line pointer
FFFC47A4 00072283		lw		$r5,[$sp]
FFFC47A8 00472303		lw		$r6,4[$sp]
FFFC47AC 00872383		lw		$r7,8[$sp]
FFFC47B0 00C72083		lw		$ra,12[$sp]
FFFC47B4 01072903		lw		$a0,16[$sp]
FFFC47B8 01470713		add		$sp,$sp,#20
FFFC47BC 00008067	  ret					; then return
                        	
                        	
                        	; 'QTSTG' looks for an underline (back-arrow on some systems),
                        	; single-quote, or double-quote.  If none of these are found, returns
                        	; to the caller.  If underline, outputs a CR without a LF.  If single
                        	; or double quote, prints the quoted string and demands a matching
                        	; end quote.  After the printing, the next i-word of the caller is
                        	; skipped over (usually a branch instruction).
                        	;
                        	QTSTG:
FFFC47C0 FFC70713		sub		$sp,$sp,#4
FFFC47C4 00172023		sw		$ra,[$sp]
FFFC47C8 1BC000EF		call	TSTC		; *** QTSTG ***
FFFC47CC 00000022		dw		'"'
FFFC47D0 02000063		bra		QT3
FFFC47D4 02206993		ldi		a1,#'"'		; it is a "
                        	QT1:
FFFC47D8 000E6933		mov		a0,$t2
FFFC47DC F7DFF0EF		call	PRTSTG		; print until another
FFFC47E0 00086E33		mov		$t2,v0
FFFC47E4 00D06D93		ldi		$t1,#CR
FFFC47E8 03B89863		bne		v1,$t1,QT2	; was last one a CR?
FFFC47EC C39FE06F		jmp		RUNNXL		; if so run next line
                        	QT3:
FFFC47F0 194000EF		call	TSTC		; is it a single quote?
FFFC47F4 0000005C		dw		'\''
FFFC47F8 00000663		bra		QT4
FFFC47FC 02706993		ldi		a1,#'\''	; if so, do same as above
FFFC4800 FC000CE3		bra		QT1
                        	QT4:
FFFC4804 180000EF		call	TSTC		; is it an underline?
FFFC4808 0000005F		dw		'_'
FFFC480C 00000C63		bra		QT5
FFFC4810 00D06913		ldi		a0,#CR		; if so, output a CR without LF
FFFC4814 FF4FE0EF		call	GOOUT
                        	QT2:
FFFC4818 00072083		lw		$ra,[$sp]		; get return address
FFFC481C 00470713		add		$sp,$sp,#4
FFFC4820 00408067		jmp		4[$ra]		; skip following branch
                        	QT5:					; not " ' or _
FFFC4824 00072083		lw		$ra,[$sp]		; get return address
FFFC4828 00470713		add		$sp,$sp,#4
FFFC482C 00008067		ret
                        	
                        	; Output a CR LF sequence
                        	;
                        	prCRLF:
FFFC4830 FFC70713		sub		$sp,$sp,#4
FFFC4834 00172023		sw		$ra,[$sp]
FFFC4838 00D06913		ldi		a0,#CR
FFFC483C FCCFE0EF		call	GOOUT
FFFC4840 00A06913		ldi		a0,#LINEFD
FFFC4844 FC4FE0EF		call	GOOUT
FFFC4848 00072083		lw		$ra,[$sp]
FFFC484C 00470713		add		$sp,$sp,#4
FFFC4850 00008067		ret
                        	
                        	;-------------------------------------------------------------------------------
                        	; 'PRTNUM' prints the 32 bit number in a0, leading blanks are added if
                        	; needed to pad the number of spaces to the number in a1.
                        	; However, if the number of digits is larger than the no. in
                        	; a1, all digits are printed anyway. Negative sign is also
                        	; printed and counted in, positive sign is not.
                        	;
                        	; Parameters
                        	; 	a0 = number to print
                        	; 	a1 = number of digits
                        	;		a2 = base (eg 10, 16)
                        	; Register Usage
                        	;		s2 = number of padding spaces
                        	; Modifies:
                        	;		a0,a1,t1
                        	; Returns:
                        	;		none
                        	;-------------------------------------------------------------------------------
                        	
FFFC4854 FEC70713	public PRTNUM:
	sub		$sp,$sp,#20
FFFC4858 00472023		sw		$s1,[$sp]
FFFC485C 00572223		sw		$s2,4[$sp]
FFFC4860 00672423		sw		$s3,8[$sp]
FFFC4864 00772623		sw		$s4,12[$sp]
FFFC4868 00172823		sw		$ra,16[$sp]
FFFC486C 79406393		ldi		s4,#NUMWKA	; r7 = pointer to numeric work area
FFFC4870 00096333		mov		s3,a0		; save number for later
FFFC4874 0009E2B3		mov		s2,a1		; s2 = min number of chars
FFFC4878 00095663		bge		a0,x0,.PN2	; is it negative? if not
FFFC487C 41200933		sub		a0,x0,a0	; else make it positive
FFFC4880 FFF28293		sub		s2,s2,#1	; one less for width count
                        	.PN2:
FFFC4884 00A06D93		ldi		$t1,#10
                        	.PN1:
FFFC4888 034969B3		rem		a1,a0,a2	; a1 = a0 mod 10
FFFC488C 03494933		div		a0,a0,a2	; a0 /= 10 divide by 10
FFFC4890 013A7463		bleu	a1,a2,.PN7
FFFC4894 00798993		add		a1,a1,#'A'-10-'0'
                        	.PN7:
FFFC4898 03098993		add		a1,a1,#'0'	; convert remainder to ascii
FFFC489C 01338023		sb		a1,[$s4]		; and store in buffer
FFFC48A0 00138393		add		s4,s4,#1
FFFC48A4 FFF28293		sub		s2,s2,#1	; decrement width
FFFC48A8 FE0910E3		bne		a0,x0,.PN1
FFFC48AC 00505A63		ble		$s2,$x0,.PN4	; test pad count, skip padding if not needed
                        	.PN3:
FFFC48B0 02006913		ldi		$a0,#' '		; display the required leading spaces
FFFC48B4 F54FE0EF		call	GOOUT
FFFC48B8 FFF28293		sub		$s2,$s2,#1
FFFC48BC FE504AE3		bgt		$s2,$x0,.PN3
                        	.PN4:
FFFC48C0 00035663		bge		$s3,$x0,.PN5	; is number negative?
FFFC48C4 02D06913		ldi		$a0,#'-'		; if so, display the sign
FFFC48C8 F40FE0EF		call	GOOUT
                        	.PN5:
FFFC48CC 79406D93		ldi		$t1,#NUMWKA
                        	.PN6:
FFFC48D0 FFF38393		sub		$s4,$s4,#1
FFFC48D4 0003C903		lbu		$a0,[$s4]		; now unstack the digits and display
FFFC48D8 F30FE0EF		call	GOOUT
FFFC48DC FE7DEAE3		bgtu	$s4,$t1,.PN6
                        	
FFFC48E0 00072203		lw		$s1,[$sp]
FFFC48E4 00472283		lw		$s2,4[$sp]
FFFC48E8 00872303		lw		$s3,8[$sp]
FFFC48EC 00C72383		lw		$s4,12[$sp]
FFFC48F0 01072083		lw		$ra,16[$sp]
FFFC48F4 01470713		add		$sp,$sp,#20
FFFC48F8 00008067		ret
                        	
                        	;-------------------------------------------------------------------------------
                        	; Load a word from memory using unaligned access.
                        	; Moves forwards through memory
                        	;
                        	; Parameters:
                        	;		a0 = pointer to word
                        	; Returns:
                        	;		v0 = word loaded
                        	;-------------------------------------------------------------------------------
                        	LoadWord:
FFFC48FC 00094803	  lbu		$v0,[$a0]	
FFFC4900 00194883	  lbu		$v1,1[$a0]
FFFC4904 00889893	  sll		$v1,$v1,#8
FFFC4908 01186833	  or		$v0,$v0,$v1
FFFC490C 00294883	  lbu		$v1,2[$a0]
FFFC4910 01089893	  sll		$v1,$v1,#16
FFFC4914 01186833	  or		$v0,$v0,$v1
FFFC4918 00394883	  lbu		$v1,3[$a0]
FFFC491C 01889893	  sll		$v1,$v1,#24
FFFC4920 01186833	  or		$v0,$v0,$v1
FFFC4924 00008067		ret
                        	
                        	;-------------------------------------------------------------------------------
                        	; Parameters:
                        	; 	a0 = pointer to line
                        	; Returns:
                        	;		v0 = pointer to end of line + 1
                        	;-------------------------------------------------------------------------------
                        	
                        	PRTLN:
FFFC4928 FF070713		sub		$sp,$sp,#16
FFFC492C 00572023		sw		$r5,[$sp]
FFFC4930 00172223		sw		$ra,4[$sp]
FFFC4934 01272423		sw		$a0,8[$sp]
FFFC4938 01372623		sw		$a1,12[$sp]
FFFC493C 000962B3	  mov		$r5,$a0		; r5 = pointer
                        	  ; get the line number stored as binary
                        	  ; assume unaligned loads not allowed
FFFC4940 FBDFF0EF	  call	LoadWord
FFFC4944 00086933	  mov		a0,v0
                        	
FFFC4948 00428293		add		r5,r5,#4
FFFC494C 00506993	  ldi		a1,#5       ; display a 0 or more digit line no.
FFFC4950 00A06A13	  ldi		a2,#10
FFFC4954 F01FF0EF		call	PRTNUM
FFFC4958 02006913		ldi		a0,#' '     ; followed by a blank
FFFC495C EACFE0EF		call	GOOUT
FFFC4960 000069B3		mov		a1,r0       ; stop char. is a zero
FFFC4964 0002E933		mov		a0,r5
FFFC4968 DF1FF0EF		call  PRTSTG		; display the rest of the line
FFFC496C 00072283		lw		$r5,[$sp]
FFFC4970 00472083		lw		$ra,4[$sp]
FFFC4974 00872903		lw		$a0,8[$sp]
FFFC4978 00C72983		lw		$a1,12[$sp]
FFFC497C 01070713		add		$sp,$sp,#16
FFFC4980 00008067		ret
                        	
                        	
                        	; ===== Test text byte following the call to this subroutine. If it
                        	;	equals the byte pointed to by t2, return to the code following
                        	;	the call. 
                        	;
                        	; Parameters:
                        	;		<static> word byte to look for
                        	;		<static> branch if not found
                        	; Registers Affected
                        	;   none
                        	; Returns
                        	;		t2 = updated text pointer
                        	;
                        	TSTC:
FFFC4984 FF470713		sub		$sp,$sp,#12
FFFC4988 01272023		sw		$a0,[$sp]
FFFC498C 00172223		sw		$ra,4[$sp]
FFFC4990 01372423		sw		$a1,8[$sp]
FFFC4994 0B0000EF		call	IGNBLK		; ignore leading blanks
FFFC4998 00472083		lw		$ra,4[$sp]	; get return address, it's needed for a reference
FFFC499C 000E4903		lbu		$a0,[$t2]
FFFC49A0 0000C983		lbu		$a1,[$ra]
FFFC49A4 01298A63		beq		$a1,$a0,TC1	; is it = to what t2 points to? if so
FFFC49A8 00072903		lw		$a0,[$sp]		; restore a0
FFFC49AC 00872983		lw		$a1,8[$sp]
FFFC49B0 00C70713		add		$sp,$sp,#12	;
FFFC49B4 00408067		jmp		4[$ra]			; jump to the routine skip param
                        	TC1:
FFFC49B8 001E0E13		add		$t2,$t2,#1	; if equal, bump text pointer
FFFC49BC 00072903		lw		$a0,[$sp]
FFFC49C0 00472083		lw		$ra,4[$sp]
FFFC49C4 00872983		lw		$a1,8[$sp]
FFFC49C8 00C70713		add		$sp,$sp,#12
FFFC49CC 00808067		jmp		8[$ra]			; jump back, skip parm and branch
                        	
                        	
                        	; ===== See if the text pointed to by $t2 is a number. If so,
                        	;	return the number in $v0 and the number of digits in $v1,
                        	;	else return zero in $v0 and $v1.
                        	; Registers Affected
                        	;   a0,a1,r3,r4
                        	; Returns
                        	; 	v0 = number
                        	;		v1 = number of digits in number
                        	;	t2 = updated text pointer
                        	;
                        	TSTNUM:
FFFC49D0 FF870713		sub		$sp,$sp,#8
FFFC49D4 00172223		sw		$ra,4[$sp]
FFFC49D8 00372023		sw		r3,[$sp]
FFFC49DC 068000EF		call	IGNBLK		; skip over blanks
FFFC49E0 00006833		mov		$v0,$x0		; initialize return parameters
FFFC49E4 000068B3		mov		$v1,$x0
                        	TN1:
FFFC49E8 000E4183		lbu		r3,[$t2]
FFFC49EC 03006D93		ldi		$t1,#'0'
FFFC49F0 05B1C263		blt		r3,$t1,TSNMRET; is it less than zero?
FFFC49F4 03906D93		ldi		$t1,#'9'
FFFC49F8 023DCE63		bgt		r3,$t1,TSNMRET; is it greater than nine?
FFFC49FC 00000DB7		ldi		$t1,#$7FFFFFFFFFFFFFF
FFFC4A00 FFFD8D93
FFFC4A04 010DF863		bleu	$v0,$t1,TN2; see if there's room for new digit
FFFC4A08 FFFC5937		ldi		$a0,#msgNumTooBig
FFFC4A0C BDD90913
FFFC4A10 AE5FF06F		jmp		ERROR		; if not, we've overflowd
                        	TN2:
FFFC4A14 001E0E13		add		$t2,$t2,#1	; adjust text pointer
FFFC4A18 00181E93		sll		$t3,$v0,#1	; quickly multiply result by 10
FFFC4A1C 00381813		sll		$v0,$v0,#3	; *8
FFFC4A20 01D80833		add		$v0,$v0,$t3	; *8 + *2
FFFC4A24 00F1F193		and		r3,r3,#$0F	; add in the new digit
FFFC4A28 00380833		add		$v0,$v0,r3
FFFC4A2C 00188893		add		$v1,$v1,#1	; increment the no. of digits
FFFC4A30 FA000CE3		bra		TN1
                        	TSNMRET:
FFFC4A34 00072183		lw		r3,[$sp]
FFFC4A38 00472083		lw		$ra,4[$sp]
FFFC4A3C 00870713		add		$sp,$sp,#8
FFFC4A40 00008067		ret
                        	
                        	
                        	;===== Skip over blanks in the text pointed to by $t2.
                        	;
                        	; Registers Affected:
                        	;	$t2
                        	; Returns
                        	;	$t2 = pointer updateded past any spaces or tabs
                        	;
                        	IGNBLK:
FFFC4A44 FFC70713		sub		$sp,$sp,#4
FFFC4A48 01272023		sw		$a0,[$sp]
                        	IGB2:
FFFC4A4C 000E4903		lbu		a0,[$t2]			; get char
FFFC4A50 02006D93		ldi		$t1,#' '
FFFC4A54 01B90663		beq		$a0,$t1,IGB1	; see if it's a space
FFFC4A58 00906D93		ldi		$t1,#'\t'
FFFC4A5C 01B91663		bne		a0,$t1,IGBRET	; or a tab
                        	IGB1:
FFFC4A60 001E0E13		add		$t2,$t2,#1		; increment the text pointer
FFFC4A64 FE0004E3		bra		IGB2
                        	IGBRET:
FFFC4A68 00072903		lw		$a0,[$sp]
FFFC4A6C 00470713		add		$sp,$sp,#4
FFFC4A70 00008067		ret
                        	
                        	; ===== Convert the line of text in the input buffer to upper
                        	;	case (except for stuff between quotes).
                        	;
                        	; Registers Affected
                        	;   a0,r3
                        	; Returns
                        	;	r8 = pointing to end of text in buffer
                        	;
                        	TOUPBUF:
FFFC4A74 FFC70713		sub		$sp,$sp,#4
FFFC4A78 00172023		sw		$ra,[$sp]
FFFC4A7C 71C06E13		ldi		$t2,#BUFFER	; set up text pointer
FFFC4A80 000061B3		mov		r3,x0		; clear quote flag
                        	TOUPB1:
FFFC4A84 000E4903		lbu		a0,[$t2]		; get the next text char.
FFFC4A88 001E0E13		add		$t2,$t2,#1
FFFC4A8C 00D06D93		ldi		$t1,#CR
FFFC4A90 03B90E63		beq		a0,$t1,TOUPBRT		; is it end of line?
FFFC4A94 02206D93		ldi		$t1,#'"'
FFFC4A98 01B90E63		beq		a0,$t1,DOQUO	; a double quote?
FFFC4A9C 02706D93		ldi		$t1,#'\''
FFFC4AA0 01B90A63		beq		a0,$t1,DOQUO	; or a single quote?
FFFC4AA4 FE0190E3		bne		r3,x0,TOUPB1	; inside quotes?
FFFC4AA8 030000EF		call	toUpper 	; convert to upper case
FFFC4AAC FF0E0FA3		sb		v0,-1[$t2]	; store it
FFFC4AB0 FC000AE3		bra		TOUPB1		; and go back for more
                        	DOQUO:
FFFC4AB4 00019663		bne		r3,x0,DOQUO1; are we inside quotes?
FFFC4AB8 000961B3		mov		r3,a0		; if not, toggle inside-quotes flag
FFFC4ABC FC0004E3		bra		TOUPB1
                        	DOQUO1:
FFFC4AC0 FD2192E3		bne		r3,a0,TOUPB1; make sure we're ending proper quote
FFFC4AC4 000061B3		mov		r3,r0		; else clear quote flag
FFFC4AC8 FA000EE3		bra		TOUPB1
                        	TOUPBRT:
FFFC4ACC 00072083		lw		$ra,[$sp]
FFFC4AD0 00470713		add		$sp,$sp,#4
FFFC4AD4 00008067		ret
                        	
                        	
                        	; ===== Convert the character in a0 to upper case
                        	;
                        	toUpper:
FFFC4AD8 00096833		mov		$v0,$a0
FFFC4ADC 06182D93		slt		$t1,$v0,#'a'
FFFC4AE0 000D9863		bne   $t1,$x0,TOUPRET	; is it < 'a'?
FFFC4AE4 07A06D93		ldi		$t1,#'z'
FFFC4AE8 010DC463		bgt		$v0,$t1,TOUPRET	; or > 'z'?
FFFC4AEC FE080813		sub		$v0,$v0,#32	  ; if not, make it upper case
                        	TOUPRET:
FFFC4AF0 00008067		ret
                        	
                        	; 'CHKIO' checks the input. If there's no input, it will return
                        	; to the caller with the a0=0. If there is input, the input byte is in a0.
                        	; However, if a control-C is read, 'CHKIO' will warm-start BASIC and will
                        	; not return to the caller.
                        	;
                        	//message "CHKIO"
                        	CHKIO:
FFFC4AF4 FFC70713		sub		$sp,$sp,#4
FFFC4AF8 00172023		sw		$ra,[$sp]
FFFC4AFC 044000EF		call	INCH		; get input if possible
FFFC4B00 00080863		beq		$v0,$x0,CHKRET	; if Zero, no input
FFFC4B04 00384893		xor		$v1,$v0,#CTRLC
FFFC4B08 00089463		bne		$v1,$x0,CHKRET; is it control-C?
FFFC4B0C DA0FE06F		jmp		WSTART		; if so, do a warm start
                        	CHKRET:
FFFC4B10 00072083		lw		$ra,[$sp]
FFFC4B14 00470713		add		$sp,$sp,#4
FFFC4B18 00008067		ret
                        	
                        	; ===== Display a CR-LF sequence
                        	;
                        	CRLF:
FFFC4B1C FFFC5937		ldi		a0,#CLMSG
FFFC4B20 BC190913
                        	
                        	; ===== Display a zero-ended string pointed to by register a0
                        	; Registers Affected
                        	;   a0,a1,r4
                        	;
                        	PRMESG:
FFFC4B24 FFC70713		sub		$sp,$sp,#4
FFFC4B28 00172023		sw		$ra,[$sp]
FFFC4B2C BDDFB0EF		call	SerialPutString
FFFC4B30 00072083		lw		$ra,[$sp]
FFFC4B34 00470713		add		$sp,$sp,#4
FFFC4B38 00008067		ret
                        	
                        	;*****************************************************
                        	; The following routines are the only ones that need *
                        	; to be changed for a different I/O environment.     *
                        	;*****************************************************
                        	
                        	; ===== Output character to the console (Port 1) from register a0
                        	;	(Preserves all registers.)
                        	;
                        	OUTC:
FFFC4B3C B91FB06F		jmp		SerialPutChar
                        	
                        	; ===== Input a character from the console into register v0 (or
                        	;	return Zero status if there's no character available).
                        	;
                        	INCH:
FFFC4B40 FFC70713		sub 	$sp,$sp,#4
FFFC4B44 00172023		sw		$ra,[$sp]
FFFC4B48 B51FB0EF		call	SerialPeekChar
FFFC4B4C 00180813		add		$v0,$v0,#1				; prepare test -1
FFFC4B50 00080A63		beq		$v0,$x0,INCH1			; was = -1
FFFC4B54 FFF80813		sub		$v0,$v0,#1				; get char back
FFFC4B58 00072083		lw		$ra,[$sp]
FFFC4B5C 00470713		add		$sp,$sp,#4
FFFC4B60 00008067		ret
                        	INCH1:
FFFC4B64 00072083		lw		$ra,[$sp]		; return a zero for no-char
FFFC4B68 00470713		add		$sp,$sp,#4
FFFC4B6C 00008067		ret
                        	
                        	; ===== Return to the resident monitor, operating system, etc.
                        	;
                        	//message "BYEBYE"
                        	BYEBYE:
                        	//	call	ReleaseIOFocus
FFFC4B70 70002703		lw		$sp,OSSP
FFFC4B74 E64FB06F		jmp		Monitor
                        	 
                        	
FFFC4B78 53430A0D	msgInit	db	CR,LINEFD,"CS01 Tiny BASIC v1.0",CR,LINEFD,"(C) 2017-2020  Robert Finch",CR,CR,0
FFFC4B7C 54203130
FFFC4B80 20796E69
FFFC4B84 49534142
FFFC4B88 31762043
FFFC4B8C 0A0D302E
FFFC4B90 20294328
FFFC4B94 37313032
FFFC4B98 3230322D
FFFC4B9C 52202030
FFFC4BA0 7265626F
FFFC4BA4 69462074
FFFC4BA8 0D68636E
FFFC4BAC 0A0D000D
FFFC4BAE 4B4F0A0D	OKMSG	db	CR,LINEFD,"OK",CR,0
FFFC4BB2 6857000D
FFFC4BB4 74616857	msgWhat	db	"What?",CR,0
FFFC4BB8 53000D3F
FFFC4BBB 72726F53	SRYMSG	db	"Sorry."
FFFC4BBF 000D2E79
FFFC4BC1 6F43000D	CLMSG	db	CR,0
FFFC4BC3 706D6F43	msgReadError	db	"Compact FLASH read error",CR,0
FFFC4BC7 20746361
FFFC4BCB 53414C46
FFFC4BCF 65722048
FFFC4BD3 65206461
FFFC4BD7 726F7272
FFFC4BDB 754E000D
FFFC4BDD 626D754E	msgNumTooBig	db	"Number is too big",CR,0
FFFC4BE1 69207265
FFFC4BE5 6F742073
FFFC4BE9 6962206F
FFFC4BED 44000D67
FFFC4BF0 69766944	msgDivZero		db	"Division by zero",CR,0
FFFC4BF4 6E6F6973
FFFC4BF8 20796220
FFFC4BFC 6F72657A
FFFC4C00 754F000D
FFFC4C02 2074754F	msgVarSpace     db  "Out of variable space",CR,0
FFFC4C06 7620666F
FFFC4C0A 61697261
FFFC4C0E 20656C62
FFFC4C12 63617073
FFFC4C16 20000D65
FFFC4C19 74796220	msgBytesFree	db	" bytes free",CR,0
FFFC4C1D 66207365
FFFC4C21 0D656572
FFFC4C25 65520D00
FFFC4C26 6165520D	msgReady		db	CR,"Ready",CR,0
FFFC4C2A 000D7964
FFFC4C2E 65707845	msgComma		db	"Expecting a comma",CR,0
FFFC4C32 6E697463
FFFC4C36 20612067
FFFC4C3A 6D6D6F63
FFFC4C3E 4C000D61
FFFC4C41 656E694C	msgLineRange	db	"Line number too big",CR,0
FFFC4C45 6D756E20
FFFC4C49 20726562
FFFC4C4D 206F6F74
FFFC4C51 0D676962
FFFC4C55 70784500
FFFC4C56 65707845	msgVar			db "Expecting a variable",CR,0
FFFC4C5A 6E697463
FFFC4C5E 20612067
FFFC4C62 69726176
FFFC4C66 656C6261
FFFC4C6A 4E52000D
FFFC4C6C 20444E52	msgRNDBad		db	"RND bad parameter",CR,0
FFFC4C70 20646162
FFFC4C74 61726170
FFFC4C78 6574656D
FFFC4C7C 53000D72
FFFC4C7F 20535953	msgSYSBad		db	"SYS bad address",CR,0
FFFC4C83 20646162
FFFC4C87 72646461
FFFC4C8B 0D737365
FFFC4C8F 504E4900
FFFC4C90 55504E49	msgInputVar		db	"INPUT expecting a variable",CR,0
FFFC4C94 78652054
FFFC4C98 74636570
FFFC4C9C 20676E69
FFFC4CA0 61762061
FFFC4CA4 62616972
FFFC4CA8 000D656C
FFFC4CAC 5458454E	msgNextFor		db	"NEXT without FOR",CR,0
FFFC4CB0 74697720
FFFC4CB4 74756F68
FFFC4CB8 524F4620
FFFC4CBC 454E000D
FFFC4CBE 5458454E	msgNextVar		db	"NEXT expecting a defined variable",CR,0
FFFC4CC2 70786520
FFFC4CC6 69746365
FFFC4CCA 6120676E
FFFC4CCE 66656420
FFFC4CD2 64656E69
FFFC4CD6 72617620
FFFC4CDA 6C626169
FFFC4CDE 47000D65
FFFC4CE1 4F544F47	msgBadGotoGosub	db	"GOTO/GOSUB bad line number",CR,0
FFFC4CE5 534F472F
FFFC4CE9 62204255
FFFC4CED 6C206461
FFFC4CF1 20656E69
FFFC4CF5 626D756E
FFFC4CF9 000D7265
FFFC4CFD 55544552	msgRetWoGosub   db	"RETURN without GOSUB",CR,0
FFFC4D01 77204E52
FFFC4D05 6F687469
FFFC4D09 47207475
FFFC4D0D 4255534F
FFFC4D11 7250000D
FFFC4D13 676F7250	msgTooBig		db	"Program is too big",CR,0
FFFC4D17 206D6172
FFFC4D1B 74207369
FFFC4D1F 62206F6F
FFFC4D23 000D6769
FFFC4D27 72747845	msgExtraChars	db	"Extra characters on line ignored",CR,0
FFFC4D2B 68632061
FFFC4D2F 63617261
FFFC4D33 73726574
FFFC4D37 206E6F20
FFFC4D3B 656E696C
FFFC4D3F 6E676920
FFFC4D43 6465726F
FFFC4D47 0000000D
                        	
                        	LSTROM	equ	*		; end of possible ROM area
;	END
                        	
                        	.file "cs01rom.asm",1
                        	.file "cs01rom.asm",1
                        	.file "cs01rom.asm",1
                        	.file "cs01rom.asm",1
                        	
                        		rodata
                        		align 8                        	
                        	begin_init_data:
                        	_begin_init_data:
                        	
                        		rodata
                        		align 8                        	
                        	end_init_data:
                        	_end_init_data:
724 symbols
  Symbol Name                              seg     address bits
  ABS                                        code  fffc4370 18
  ABS1                                       code  fffc4384 18
  ADDEXPR                                    code  fffc3f04 18
  ANDEXPR                                    code  fffc3cf0 18
  AUXIN                                      code  8000000000000180 32
  AUXIN_INIT                                 code  800000000000023c 32
  AUXOCRLF                                   code  fffc3b3c 18
  AUXOUT                                     code  800000000000017e 32
  AUXOUT_FLUSH                               code  8000000000000249 32
  AUXOUT_INIT                                code  8000000000000240 32
  AccountTime                                code  fffc1a10 18
  AccountTime.again                          code  fffc1a10 18
  Alloc                                      code  fffc1064 18
  Alloc.0001                                 code  fffc10f0 18
  Alloc.enough                               code  fffc109c 18
  Alloc.noRun                                code  fffc1114 18
  Alloc.noRun2                               code  fffc1094 18
  Alloc.xit                                  code  fffc1118 18
  AllocPage                                  code  fffc0de0 18
  AllocPage.0001                             code  fffc0f70 18
  AllocPage.chkPam12                         code  fffc0e7c 18
  AllocPage.chkPam16                         code  fffc0eac 18
  AllocPage.chkPam20                         code  fffc0edc 18
  AllocPage.chkPam24                         code  fffc0f0c 18
  AllocPage.chkPam28                         code  fffc0f3c 18
  AllocPage.chkPam4                          code  fffc0e1c 18
  AllocPage.chkPam8                          code  fffc0e4c 18
  AllocPage.chkPamDone                       code  fffc0f6c 18
  AllocStack                                 code  fffc1130 18
  AllocStack.0001                            code  fffc114c 18
  AllocStack.xit                             code  fffc1158 18
  AllocTCB                                   code  fffc1c88 18
  AllocTCB.0001                              code  fffc1c9c 18
  AllocTCB.0002                              code  fffc1cd4 18
  AllocTCB.0003                              code  fffc1ce4 18
  AllocTCB.allocTid                          code  fffc1cc8 18
  BASPRMPT                                   code  fffc30cc 18
  BS                                        const  000008 5
  BUFFER                                    const  00071c 12
  BUFLEN                                    const  000054 8
  BYEBYE                                     code  fffc4b70 18
  BitIndex                                   code  fffc0f7c 18
  BitIndex.0001                              code  fffc0f80 18
  BitIndex.0003                              code  fffc0fbc 18
  BitIndex.0004                              code  fffc0fac 18
  BitIndex.foundFree                         code  fffc0fa0 18
  CHKIO                                      code  fffc4af4 18
  CHKRET                                     code  fffc4b10 18
  CLMSG                                      code  fffc4bc1 18
  CR                                        const  00000d 5
  CRLF                                       code  fffc4b1c 18
  CSTART                                     code  fffc3030 32
  CTRLC                                     const  000003 3
  CTRLH                                     const  000008 5
  CTRLI                                     const  000009 5
  CTRLJ                                     const  00000a 5
  CTRLK                                     const  00000b 5
  CTRLM                                     const  00000d 5
  CTRLS                                     const  000013 6
  CTRLX                                     const  000018 6
  CURRNT                                    const  000718 12
  CursorFlash                               const  0007b0 12
  DEFLT                                      code  fffc38b4 18
  DEL                                       const  00007f 8
  DIRECT                                     code  fffc3360 18
  DOQUO                                      code  fffc4ab4 18
  DOQUO1                                     code  fffc4ac0 18
  DeleteLine                                 code  fffc3170 18
  DeleteLine.0001                            code  fffc3190 18
  DeleteLine.0002                            code  fffc317c 18
  DeleteLine.0003                            code  fffc3194 18
  DumpReadyQueue                             code  fffc20d8 18
  DumpReadyQueue.0001                        code  fffc2150 18
  DumpReadyQueue.0002                        code  fffc20fc 18
  DumpReadyQueue.nxt                         code  fffc216c 18
  ENDCHK                                     code  fffc44a4 18
  ENDMEM                                    const  008000 17
  ERROR                                      code  fffc44f4 18
  ERROR1                                     code  fffc4534 18
  EX1                                        code  fffc33ac 18
  EXEC                                       code  fffc3370 18
  EXGO                                       code  fffc33d4 18
  EXLP                                       code  fffc337c 18
  EXMAT                                      code  fffc33c0 18
  EXNGO                                      code  fffc3394 18
  EXPR                                       code  fffc3de0 18
  E_Arg                                     const  000001 2
  E_BadAlarm                                const  000011 6
  E_BadBlockNum                             const  000025 7
  E_BadDevNum                               const  000020 7
  E_BadDevOp                                const  000022 7
  E_BadMbx                                  const  000004 4
  E_DCBInUse                                const  000019 6
  E_NoDev                                   const  000021 7
  E_NoMem                                   const  00000c 5
  E_NoMoreAlarmBlks                         const  000044 8
  E_NoMoreMbx                               const  000040 8
  E_NoMoreMsgBlks                           const  000041 8
  E_NoMoreTCBs                              const  000045 8
  E_NoMsg                                   const  00000b 5
  E_NoThread                                const  000006 4
  E_NotAlloc                                const  000009 5
  E_NotOwner                                const  000012 6
  E_Ok                                      const  000000 1
  E_QueFull                                 const  000005 4
  E_QueStrategy                             const  000013 6
  E_ReadError                               const  000023 7
  E_Timeout                                 const  000010 6
  E_TooManyBlocks                           const  000026 7
  E_WriteError                              const  000024 7
  EditMem                                    code  fffc0480 18
  FI1                                        code  fffc4484 18
  FI2                                        code  fffc4498 18
  FILEBUF                                   const  07f600 20
  FILENAME                                  const  0006c0 12
  FIN                                        code  fffc4468 18
  FINISH                                     code  fffc3620 18
  FMTKInit                                   code  fffc1230 18
  FMTK_AllocMbx                              code  8000000000000104 32
  FMTK_ExitTask                              code  fffc1dbc 18
  FMTK_FreeMbx                               code  8000000000000105 32
  FMTK_Initialize                            code  80000000000000fe 32
  FMTK_KillTask                              code  fffc1dc8 18
  FMTK_KillTask.immortal                     code  fffc1e14 18
  FMTK_PeekMsg                               code  8000000000000109 32
  FMTK_PostMsg                               code  8000000000000106 32
  FMTK_Reschedule                            code  fffc1a3c 18
  FMTK_Reschedule.noCtxSwitch                code  fffc1af8 18
  FMTK_Reschedule.noException                code  fffc1a7c 18
  FMTK_Reschedule.noMsg                      code  fffc1ae0 18
  FMTK_SchedulerIRQ                          code  fffc1b10 18
  FMTK_SchedulerIRQ.0001                     code  fffc1b58 18
  FMTK_SchedulerIRQ.noCtxSwitch              code  fffc1c68 18
  FMTK_SchedulerIRQ.noException              code  fffc1bec 18
  FMTK_SchedulerIRQ.noMsg                    code  fffc1c50 18
  FMTK_SchedulerIRQ.noTimeouts               code  fffc1bd4 18
  FMTK_SchedulerIRQ.timeoutNotDone           code  fffc1b9c 18
  FMTK_SendMsg                               code  8000000000000107 32
  FMTK_SetTaskPriority                       code  8000000000000102 32
  FMTK_Sleep                                 code  fffc20a4 18
  FMTK_Sleep.xit                             code  fffc20cc 18
  FMTK_StartApp                              code  800000000000010a 32
  FMTK_StartTask                             code  fffc1d00 18
  FMTK_StartTask.err                         code  fffc1dac 18
  FMTK_SwitchTask                            code  fffc16ac 18
  FMTK_SwitchTask.0001                       code  fffc1804 18
  FMTK_SwitchTask.dead                       code  fffc17dc 18
  FMTK_SwitchTask.noMsg                      code  fffc188c 18
  FMTK_SwitchTask.ready                      code  fffc189c 18
  FMTK_SwitchTask.rsseg                      code  fffc18b0 18
  FMTK_SwitchTask.svseg                      code  fffc17c0 18
  FMTK_WaitMsg                               code  8000000000000108 32
  FNDLN                                      code  fffc462c 18
  FNDLNP                                     code  fffc464c 18
  FNDNXT                                     code  fffc4694 18
  FNDRET                                     code  fffc467c 18
  FNDRET1                                    code  fffc4684 18
  FNDRET2                                    code  fffc468c 18
  FNDSKP                                     code  fffc4698 18
  FOR                                        code  fffc36b0 18
  FORCEFIT                                   code  fffc3db8 18
  FORCEFIT.0001                              code  fffc3ddc 18
  FORCEFIT.intAnd                            code  fffc3dcc 18
  FR1                                        code  fffc36d0 18
  FR2                                        code  fffc36ec 18
  FR3                                        code  fffc36f4 18
  FR4                                        code  fffc36f8 18
  FR5                                        code  fffc36fc 18
  FR6                                        code  fffc3714 18
  FR7                                        code  fffc3718 18
  FR8                                        code  fffc3738 18
  FUNCEXPR                                   code  fffc4038 18
  FillMem                                    code  fffc0498 18
  FillMem.0001                               code  fffc04b4 18
  FindRun                                    code  fffc100c 18
  FindRun.0001                               code  fffc1024 18
  FindRun.empty0                             code  fffc103c 18
  FindRun.empty1                             code  fffc1040 18
  FindRun.foundEnough                        code  fffc105c 18
  FreeAll                                    code  fffc115c 18
  FreeAll.0001                               code  fffc11bc 18
  FreeAll.nxt                                code  fffc1164 18
  FreePage                                   code  fffc0fc0 18
  FreePage.xit                               code  fffc1008 18
  GCHAR                                      code  fffc3938 18
  GCHAR1                                     code  fffc3950 18
  GETLN                                      code  fffc4538 18
  GETLN.GL1                                  code  fffc4558 18
  GETLN.GL2                                  code  fffc4580 18
  GETLN.GL3                                  code  fffc45b0 18
  GETLN.GL4                                  code  fffc45d8 18
  GETLN.GL5                                  code  fffc45e8 18
  GETLN.GL6                                  code  fffc4608 18
  GETLN.GL7                                  code  fffc4610 18
  GOAUXI                                     code  fffc3018 18
  GOAUXO                                     code  fffc3010 18
  GOBYE                                      code  fffc3020 18
  GOIN                                       code  fffc300c 18
  GOOUT                                      code  fffc3008 18
  GOSTART                                    code  fffc3000 18
  GOSUB                                      code  fffc3628 18
  GOTO                                       code  fffc34a4 18
  GOWARM                                     code  fffc3004 18
  GetBuflen                                  code  fffc31d8 18
  GetBuflen.0001                             code  fffc3200 18
  GetBuflen.0002                             code  fffc31e4 18
  GetBuflen.0004                             code  fffc31fc 18
  GetCurrentTid                              code  fffc1298 18
  GetFilename                                code  fffc399c 18
  GetHexNum                                  code  fffc04f0 18
  GetHexNum.0001                             code  fffc0540 18
  GetHexNum.isDigit                          code  fffc057c 18
  GetHexNum.isHexLower                       code  fffc0564 18
  GetHexNum.isHexUpper                       code  fffc054c 18
  GetHexNum.next                             code  fffc0500 18
  Getch                                      code  fffc01a0 18
  HRDY0                                     const  004308 16
  HRDY1                                     const  004309 16
  HRDY2                                     const  00430a 16
  HRDY3                                     const  00430b 16
  IF0                                        code  fffc37b4 18
  IF1                                        code  fffc37b8 18
  IF2                                        code  fffc37c0 18
  IF3                                        code  fffc37d4 18
  IGB1                                       code  fffc4a60 18
  IGB2                                       code  fffc4a4c 18
  IGBRET                                     code  fffc4a68 18
  IGNBLK                                     code  fffc4a44 18
  INBUF                                     const  004100 16
  INCH                                       code  fffc4b40 18
  INCH1                                      code  fffc4b64 18
  INPERR                                     code  fffc37d8 18
  INPPTR                                    const  0007ac 12
  INPUT                                      code  fffc37f4 18
  INSLINE                                    code  fffc3130 18
  INSLINE.0001                               code  fffc315c 18
  IP2                                        code  fffc381c 18
  IP3                                        code  fffc3858 18
  IP4                                        code  fffc3898 18
  IP5                                        code  fffc38a8 18
  IP6                                        code  fffc37fc 18
  IP7                                        code  fffc383c 18
  IRQFlag                                   const  0007b4 12
  IRQROUT                                   const  0007a4 12
  IRQRout                                    code  fffc0780 18
  IRQRout.0001                               code  fffc07f4 18
  IRQRout.0002                               code  fffc080c 18
  IRQRout.isIRQ                              code  fffc0798 18
  InsertIntoTimeoutList                      code  fffc1e18 18
  InsertIntoTimeoutList.0001                 code  fffc1e7c 18
  InsertIntoTimeoutList.0002                 code  fffc1f3c 18
  InsertIntoTimeoutList.0003                 code  fffc1f4c 18
  InsertIntoTimeoutList.beginWhile           code  fffc1e94 18
  InsertIntoTimeoutList.endWhile             code  fffc1ec8 18
  InsertLine                                 code  fffc31b8 18
  InsertLine.0001                            code  fffc31bc 18
  InsertLine.done                            code  fffc31d4 18
  InsertTask                                 code  fffc12a8 18
  InsertTask.badTid                          code  fffc1330 18
  InsertTask.qfull                           code  fffc1338 18
  InsertTask.xit                             code  fffc133c 18
  LET                                        code  fffc38c0 18
  LINEFD                                    const  00000a 5
  LISTX                                      code  fffc3540 18
  LOAD                                       code  fffc38d8 18
  LOAD3                                      code  fffc3a08 18
  LOAD4                                      code  fffc3a34 18
  LOAD5                                      code  fffc3a6c 18
  LOD1                                       code  fffc38e8 18
  LOD2                                       code  fffc3914 18
  LODEND                                     code  fffc3930 18
  LOPINC                                    const  000778 12
  LOPLMT                                    const  00077c 12
  LOPLN                                     const  000774 12
  LOPPT                                     const  000770 12
  LOPVAR                                    const  000710 12
  LS1                                        code  fffc3554 18
  LS2                                        code  fffc357c 18
  LS3                                        code  fffc3584 18
  LS4                                        code  fffc3560 18
  LS5                                        code  fffc3558 18
  LSTROM                                    const  000000 1
  LT1                                        code  fffc38d4 18
  LoadWord                                   code  fffc48fc 18
  MAX_TID                                   const  00000f 5
  MMUInit                                    code  fffc0ce8 18
  MMUInit.0001                               code  fffc0d9c 18
  MMUInit.0002                               code  fffc0dcc 18
  MMUInit.0003                               code  fffc0db0 18
  MULEXPR                                    code  fffc3f9c 18
  MVDOWN                                     code  fffc46d4 18
  MVDOWN1                                    code  fffc46c4 18
  MVUP                                       code  fffc46bc 18
  MVUP1                                      code  fffc46ac 18
  MachineStart                               code  fffc0100 18
  MonEntry                                   code  fffc01d0 18
  Monitor                                    code  fffc01d8 18
  Monitor.0001                               code  fffc01f4 18
  Monitor.0002                               code  fffc0244 18
  Monitor.0003                               code  fffc02a8 18
  Monitor.0004                               code  fffc0330 18
  Monitor.0005                               code  fffc03f4 18
  Monitor.0006                               code  fffc0398 18
  Monitor.0007                               code  fffc03ac 18
  Monitor.0008                               code  fffc03b8 18
  Monitor.0009                               code  fffc03c4 18
  Monitor.0010                               code  fffc03d8 18
  Monitor.0011                               code  fffc03f4 18
  Monitor.doBackspace                        code  fffc0294 18
  Monitor.doDelete                           code  fffc023c 18
  Monitor.procLine                           code  fffc02f8 18
  Monitor.skip                               code  fffc030c 18
  Monitor.skip2                              code  fffc0328 18
  NEW                                        code  fffc33e8 18
  NEXT                                       code  fffc373c 18
  NPAGES                                    const  004300 16
  NR_TCB                                    const  000010 6
  NUMWKA                                    const  000794 12
  NX0                                        code  fffc3758 18
  NX1                                        code  fffc3798 18
  NX2                                        code  fffc3778 18
  NX3                                        code  fffc379c 18
  NX4                                        code  fffc3754 18
  NX5                                        code  fffc376c 18
  NXPurge                                    code  fffc37ac 18
  OKMSG                                      code  fffc4bae 18
  ONIRQ                                      code  fffc3508 18
  ONIRQ1                                     code  fffc3528 18
  OREXPR                                     code  fffc3c88 18
  OSCALL                                     code  fffc19d0 18
  OSCallTbl                                  code  fffc11f0 18
  OSSP                                      const  000700 12
  OUTC                                       code  fffc4b3c 18
  OUTPTR                                    const  0007a8 12
  OpenSpace                                  code  fffc3204 18
  OpenSpace.0003                             code  fffc321c 18
  OpenSpace.noSpace                          code  fffc3238 18
  PAM                                       const  004800 16
  PARN                                       code  fffc4088 18
  PEEK                                       code  fffc428c 18
  PEEKH                                      code  fffc42bc 18
  PEEKW                                      code  fffc42a4 18
  PIDMAP                                    const  004310 16
  PKER                                       code  fffc3c50 18
  POKE                                       code  fffc3bcc 18
  POKEH                                      code  fffc3c24 18
  POKEW                                      code  fffc3bf8 18
  POPA_                                      code  fffc46dc 18
  PP1                                        code  fffc4710 18
  PR0                                        code  fffc35b4 18
  PR1                                        code  fffc35cc 18
  PR2                                        code  fffc35a0 18
  PR3                                        code  fffc35ec 18
  PR4                                        code  fffc35e4 18
  PR6                                        code  fffc3600 18
  PR8                                        code  fffc3608 18
  PRINT                                      code  fffc3588 18
  PRMESG                                     code  fffc4b24 18
  PRTLN                                      code  fffc4928 18
  PRTNUM                                     code  fffc4854 32
  PRTNUM.PN1                                 code  fffc4888 18
  PRTNUM.PN2                                 code  fffc4884 18
  PRTNUM.PN3                                 code  fffc48b0 18
  PRTNUM.PN4                                 code  fffc48c0 18
  PRTNUM.PN5                                 code  fffc48cc 18
  PRTNUM.PN6                                 code  fffc48d0 18
  PRTNUM.PN7                                 code  fffc4898 18
  PRTSTG                                     code  fffc4758 18
  PRTSTG.PRTRET                              code  fffc479c 18
  PRTSTG.PS1                                 code  fffc4778 18
  PU1                                        code  fffc474c 18
  PUSHA_                                     code  fffc4714 18
  PWORD                                      code  fffc3b60 18
  PopTimeoutList                             code  fffc2034 18
  PopTimeoutList.done                        code  fffc20a0 18
  PutHexByte                                 code  fffc05d0 18
  PutHexHalf                                 code  fffc05b0 18
  PutHexNybble                               code  fffc05f0 18
  PutHexNybble.0001                          code  fffc0620 18
  PutHexNybble.lt10                          code  fffc0618 18
  PutHexWord                                 code  fffc0590 18
  Putch                                      code  fffc01b8 18
  QNDX                                      const  004304 16
  QSORRY                                     code  fffc44e0 18
  QT1                                        code  fffc47d8 18
  QT2                                        code  fffc4818 18
  QT3                                        code  fffc47f0 18
  QT4                                        code  fffc4804 18
  QT5                                        code  fffc4824 18
  QTSTG                                      code  fffc47c0 18
  QWHAT                                      code  fffc44ec 18
  RDYQ0                                     const  004400 16
  RDYQ1                                     const  004500 16
  RDYQ2                                     const  004600 16
  RDYQ3                                     const  004700 16
  RETURN                                     code  fffc366c 18
  RND                                        code  fffc4314 18
  RUN                                        code  fffc3410 18
  RUN1                                       code  fffc3470 18
  RUN2                                       code  fffc342c 18
  RUN2.0001                                  code  fffc3430 18
  RUNNXL                                     code  fffc3424 18
  RUNNXL.0001                                code  80000000000001f0 32
  RUNSML                                     code  fffc348c 18
  RUNTSL                                     code  fffc3484 18
  RemoveFromTimeoutList                      code  fffc1f60 18
  RemoveFromTimeoutList.0001                 code  fffc1fd0 18
  RemoveFromTimeoutList.0002                 code  fffc2008 18
  SAVE                                       code  fffc3adc 18
  SAVE1                                      code  fffc3ae8 18
  SAVE2                                      code  fffc3b04 18
  SAVE3                                      code  fffc3a70 18
  SAVE4                                      code  fffc3aa0 18
  SAVEND                                     code  fffc3b1c 18
  SDReadSector                               code  800000000000023d 32
  SDWriteSector                              code  8000000000000242 32
  SETVAL                                     code  fffc4400 18
  SETVAL.sv2                                 code  fffc4424 18
  SGN                                        code  fffc43a8 18
  SGN1                                       code  fffc43d8 18
  SGN2                                       code  fffc43c8 18
  SIZEX                                      code  fffc43e4 18
  SRYMSG                                     code  fffc4bbb 18
  ST2                                        code  fffc310c 18
  STACKOFFS                                 const  07fffc 20
  STKBOT                                    const  00079c 12
  STKGOS                                    const  000714 12
  STKINP                                    const  000798 12
  STOP                                       code  fffc33fc 18
  STRTMP                                    const  000200 11
  SV1                                        code  fffc4460 18
  SYSX                                       code  fffc3c5c 18
  SelectTaskToRun                            code  fffc1348 18
  SelectTaskToRun.dq                         code  fffc13c8 18
  SelectTaskToRun.goodTid                    code  fffc1404 18
  SelectTaskToRun.nxtQ                       code  fffc138c 18
  SerialInit                                 code  fffc073c 18
  SerialPeekChar                             code  fffc0698 18
  SerialPeekChar.0001                        code  fffc06c4 18
  SerialPutChar                              code  fffc06cc 18
  SerialPutChar.0001                         code  fffc06d4 18
  SerialPutString                            code  fffc0708 18
  SerialPutString.0001                       code  fffc0718 18
  SerialPutString.done                       code  fffc072c 18
  SkipSpaces                                 code  fffc04c4 18
  SkipSpaces.skip1                           code  fffc04e8 18
  SkipSpaces.skip2                           code  fffc04c4 18
  SwapContext                                code  fffc1444 18
  SwapContext.rsseg                          code  fffc158c 18
  SwapContext.svseg                          code  fffc1548 18
  TAB                                       const  000009 5
  TAB1                                       code  fffc3240 18
  TAB10                                      code  fffc32e4 18
  TAB10_1                                    code  fffc334e 18
  TAB1_1                                     code  fffc32e8 18
  TAB2                                       code  fffc3252 18
  TAB2_1                                     code  fffc32f2 18
  TAB4                                       code  fffc32ab 18
  TAB4_1                                     code  fffc3320 18
  TAB5                                       code  fffc32ce 18
  TAB5_1                                     code  fffc3334 18
  TAB6                                       code  fffc32d1 18
  TAB6_1                                     code  fffc3338 18
  TAB8                                       code  fffc32d6 18
  TAB8_1                                     code  fffc333c 18
  TAB9                                       code  fffc32e0 18
  TAB9_1                                     code  fffc334a 18
  TC1                                        code  fffc49b8 18
  TCBEndTick                                const  0002b8 11
  TCBException                              const  0002c8 11
  TCBMsgD1                                  const  000298 11
  TCBMsgD2                                  const  0002a0 11
  TCBMsgD3                                  const  0002a8 11
  TCBNext                                    code  800000000000013d 32
  TCBPrev                                    code  800000000000013e 32
  TCBPriority                               const  000289 11
  TCBStackBot                               const  000290 11
  TCBStartTick                              const  0002b0 11
  TCBStatus                                 const  000288 11
  TCBTicks                                  const  0002c0 11
  TCBTimeout                                 code  800000000000012e 32
  TCB_MsgD1                                  code  8000000000000120 32
  TCB_MsgD2                                  code  8000000000000121 32
  TCB_MsgD3                                  code  8000000000000122 32
  TCB_Status                                 code  800000000000011f 32
  TCBepc                                    const  000280 11
  TCBsegs                                   const  000200 11
  TICKX                                      code  fffc4394 18
  TN1                                        code  fffc49e8 18
  TN2                                        code  fffc4a14 18
  TOOBIG                                     code  fffc44d4 18
  TOUPB1                                     code  fffc4a84 18
  TOUPBRT                                    code  fffc4acc 18
  TOUPBUF                                    code  fffc4a74 18
  TOUPRET                                    code  fffc4af0 18
  TRDY0                                     const  00430c 16
  TRDY1                                     const  00430d 16
  TRDY2                                     const  00430e 16
  TRDY3                                     const  00430f 16
  TSNMRET                                    code  fffc4a34 18
  TSTC                                       code  fffc4984 18
  TSTNUM                                     code  fffc49d0 18
  TSTV                                       code  fffc40c8 18
  TSTVRT                                     code  fffc4138 18
  TS_DEAD                                   const  000002 3
  TS_MSGRDY                                 const  000004 4
  TS_NONE                                   const  000000 1
  TS_PREMPT                                  code  800000000000012b 32
  TS_READY                                  const  000001 2
  TS_RUNNING                                const  000080 9
  TS_TIMEOUT                                 code  8000000000000143 32
  TS_WAITMSG                                const  000008 5
  TV1                                        code  fffc4124 18
  TV2                                        code  fffc4118 18
  TV3                                        code  fffc40f8 18
  TXTBGN                                    const  001800 14
  TXTUNF                                    const  000704 12
  Tick                                      const  004330 16
  TimeoutList                               const  004328 16
  TinyBasic                                  code  fffc3000 18
  UART                                      const  ffdc0a00 33
  UART_CMD                                  const  000008 5
  UART_STAT                                 const  000004 4
  UART_TRB                                  const  000000 1
  USRX                                       code  fffc42d4 18
  UserStart                                  code  fffc012c 18
  UserStart.0002                             code  fffc0164 18
  UserStart.0003                             code  fffc018c 18
  UserStart.0004                             code  fffc0158 18
  VARBGN                                    const  000708 12
  VAREND                                    const  00070c 12
  VIA                                       const  ffdc0600 33
  VIAInit                                    code  fffc0630 18
  VIA_ACR                                   const  00002c 7
  VIA_DDRA                                  const  00000c 5
  VIA_IFR                                   const  000034 7
  VIA_PA                                    const  000004 4
  VIA_PARAW                                 const  00003c 7
  VIA_PCR                                   const  000030 7
  VIA_T1CH                                  const  000014 6
  VIA_T1CL                                  const  000010 6
  VirtToPhys                                 code  fffc11c0 18
  WAITIRQ                                    code  fffc3530 18
  WSTART                                     code  fffc30ac 18
  XOFF                                      const  000013 6
  XON                                       const  000011 6
  XP11                                       code  fffc3e0c 18
  XP12                                       code  fffc3e24 18
  XP13                                       code  fffc3e3c 18
  XP14                                       code  fffc3e54 18
  XP15                                       code  fffc3e6c 18
  XP16                                       code  fffc3e84 18
  XP17                                       code  fffc3ec4 18
  XP18                                       code  fffc3edc 18
  XP21                                       code  fffc3f2c 18
  XP22                                       code  fffc3f38 18
  XP23                                       code  fffc3f3c 18
  XP24                                       code  fffc3f58 18
  XP25                                       code  fffc3f6c 18
  XP26                                       code  fffc3f78 18
  XP31                                       code  fffc3fa8 18
  XP34                                       code  fffc3fd8 18
  XP35                                       code  fffc3ffc 18
  XP40                                       code  fffc4054 18
  XP41                                       code  fffc4070 18
  XP42                                       code  fffc40ac 18
  XP43                                       code  fffc40b8 18
  XP45                                       code  fffc3f84 18
  XP46                                       code  fffc407c 18
  XP47                                       code  fffc4020 18
  XPRT0                                      code  fffc3e9c 18
  XPRT1                                      code  fffc3eb0 18
  XP_AND                                     code  fffc3d1c 18
  XP_AND1                                    code  fffc3cfc 18
  XP_ANDX                                    code  fffc3d30 18
  XP_OR                                      code  fffc3cbc 18
  XP_OR1                                     code  fffc3c9c 18
  XP_ORX                                     code  fffc3cd0 18
  YIELD0                                     code  fffc3404 18
  _clr                                       code  fffc34c8 18
  _cls                                       code  80000000000001c3 32
  _end_init_data                           rodata  fffc5000 32
  _rdcf                                      code  80000000000001c5 32
  a2h1                                       code  fffc3990 18
  asciiToHex                                 code  fffc3984 18
  begin_init_data                          rodata  fffc5000 32
  clearVars                                  code  fffc34d0 18
  clearVars.cv1                              code  fffc34e4 18
  doMem                                      code  fffc03f8 18
  doMem.loop                                 code  fffc045c 18
  doMem.loop2                                code  fffc0434 18
  ec1                                        code  fffc44c8 18
  end_init_data                            rodata  fffc5000 32
  entry                                      code  fffc2034 18
  findVar                                    code  fffc421c 18
  fl1                                        code  fffc4644 18
  flt10                                      code  fffc090d 18
  flt20                                      code  fffc08fd 18
  flt50                                      code  fffc08ed 18
  fltMillion                                 code  fffc0ce4 18
  fltOne                                     code  fffc0cdc 18
  fltTen                                     code  fffc0ce0 18
  fltToString                                code  fffc091d 18
  fltToString.0001                           code  fffc097e 18
  fltToString.0002                           code  fffc09fe 18
  fltToString.0003                           code  fffc09ea 18
  fltToString.0004                           code  fffc0a4a 18
  fltToString.0005                           code  fffc0a42 18
  fltToString.0006                           code  fffc0a2a 18
  fltToString.0007                           code  fffc0a66 18
  fltToString.0008                           code  fffc0a7a 18
  fltToString.0009                           code  fffc0a76 18
  fltToString.0010                           code  fffc0a9a 18
  fltToString.0011                           code  fffc0b26 18
  fltToString.0012                           code  fffc0ade 18
  fltToString.0013                           code  fffc0aca 18
  fltToString.0014                           code  fffc0afa 18
  fltToString.0015                           code  fffc0b16 18
  fltToString.0016                           code  fffc0ab2 18
  fltToString.0017                           code  fffc0b1e 18
  fltToString.0018                           code  fffc0b26 18
  fltToString.0019                           code  fffc0b5a 18
  fltToString.0020                           code  fffc0b66 18
  fltToString.0021                           code  fffc0b8a 18
  fltToString.0022                           code  fffc0b96 18
  fltToString.0023                           code  fffc0ba6 18
  fltToString.0024                           code  fffc0bb2 18
  fltToString.0025                           code  fffc0b9e 18
  fltToString.0026                           code  fffc0bc6 18
  fltToString.0027                           code  fffc0bce 18
  fltToString.0028                           code  fffc0bd6 18
  fltToString.0029                           code  fffc0be2 18
  fltToString.0030                           code  fffc0bee 18
  fltToString.0031                           code  fffc0bfa 18
  fltToString.0032                           code  fffc0c02 18
  fltToString.0034                           code  fffc0c0a 18
  fltToString.0035                           code  fffc0c16 18
  fltToString.0036                           code  fffc0c26 18
  fltToString.0037                           code  fffc0c32 18
  fltToString.0038                           code  fffc0c3a 18
  fltToString.0039                           code  fffc0c4e 18
  fltToString.0040                           code  fffc0c42 18
  fltToString.0041                           code  fffc0caa 18
  fltToString.0042                           code  fffc0c6e 18
  fltToString.0043                           code  fffc0c7e 18
  fltToString.0044                           code  fffc0c92 18
  fltToString.0045                           code  fffc0c76 18
  fltToString.0046                           code  fffc0c9e 18
  fltToString.0047                           code  fffc0caa 18
  fltToString.0048                           code  fffc0c96 18
  fltToString.0050                           code  fffc0cca 18
  fltToString.0051                           code  fffc0cc6 18
  fltToString.0052                           code  fffc0cb6 18
  fltToString.inf                            code  fffc0966 18
  fltToString.notZero                        code  fffc09ba 18
  fltToString.pos                            code  fffc09a6 18
  fltToString.prt                            code  fffc0c5e 18
  fv1                                        code  fffc4264 18
  fv2                                        code  fffc4278 18
  fv3                                        code  fffc425c 18
  fv4                                        code  fffc422c 18
  gen_rand                                   code  800000000000028b 32
  getVarName                                 code  fffc415c 18
  gfn1                                       code  fffc3a04 18
  gfn2                                       code  fffc39b4 18
  gfn3                                       code  fffc39e4 18
  gosub1                                     code  fffc3648 18
  gvn1                                       code  fffc4204 18
  gvn2                                       code  fffc41c4 18
  gvn3                                       code  fffc41e0 18
  gvn4                                       code  fffc4180 18
  gvn6                                       code  fffc41b4 18
  isAlnum                                    code  fffc3d98 18
  isAlpha                                    code  fffc3d68 18
  isAlphaFalse                               code  fffc3d90 18
  isAlphaTrue                                code  fffc3d88 18
  isDigit                                    code  fffc3d48 18
  isDigitFalse                               code  fffc3d60 18
  isDigitx                                   code  fffc3dac 18
  milliseconds                              const  004208 16
  missed_ticks                              const  004320 16
  msgBadGotoGosub                            code  fffc4ce1 18
  msgBytesFree                               code  fffc4c19 18
  msgCRLF                                    code  fffc08ea 18
  msgComma                                   code  fffc4c2e 18
  msgDivZero                                 code  fffc4bf0 18
  msgExtraChars                              code  fffc4d27 18
  msgInf                                     code  fffc0cd4 18
  msgInit                                    code  fffc4b78 18
  msgInputVar                                code  fffc4c90 18
  msgLineRange                               code  fffc4c41 18
  msgMonHelp                                 code  fffc083a 18
  msgNan                                     code  fffc0cd8 18
  msgNextFor                                 code  fffc4cac 18
  msgNextVar                                 code  fffc4cbe 18
  msgNumTooBig                               code  fffc4bdd 18
  msgRNDBad                                  code  fffc4c6c 18
  msgReadError                               code  fffc4bc3 18
  msgReady                                   code  fffc4c26 18
  msgRetWoGosub                              code  fffc4cfd 18
  msgSYSBad                                  code  fffc4c7f 18
  msgStart                                   code  fffc0824 18
  msgTaskStart                               code  fffc08dc 18
  msgTooBig                                  code  fffc4d13 18
  msgVar                                     code  fffc4c56 18
  msgVarSpace                                code  fffc4c02 18
  msgWhat                                    code  fffc4bb4 18
  prCRLF                                     code  fffc4830 18
  pword1                                     code  fffc3b74 18
  pword2                                     code  fffc3b90 18
  qToChk                                     code  fffc120e 18
  return1                                    code  fffc3684 18
  rnd1                                       code  fffc4348 18
  rnd2                                       code  fffc4358 18
  switchflag                                const  004200 16
  sysx1                                      code  fffc3c70 18
  tah1                                       code  fffc3bc4 18
  tid                                        code  fffc2034 18
  timeout                                    code  8000000000000147 32
  toAsciiHex                                 code  fffc3bb4 18
  toUpper                                    code  fffc4ad8 18
  tstv_notfound                              code  fffc4148 18
  usrJmp                                    const  0007a0 12
  v0                                        const  8000000000000147 64

Undefined Symbols
  AUXIN                                      code  8000000000000180 32
  AUXIN_INIT                                 code  800000000000023c 32
  AUXOUT                                     code  800000000000017e 32
  AUXOUT_FLUSH                               code  8000000000000249 32
  AUXOUT_INIT                                code  8000000000000240 32
  FMTK_AllocMbx                              code  8000000000000104 32
  FMTK_FreeMbx                               code  8000000000000105 32
  FMTK_Initialize                            code  80000000000000fe 32
  FMTK_PeekMsg                               code  8000000000000109 32
  FMTK_PostMsg                               code  8000000000000106 32
  FMTK_SendMsg                               code  8000000000000107 32
  FMTK_SetTaskPriority                       code  8000000000000102 32
  FMTK_StartApp                              code  800000000000010a 32
  FMTK_WaitMsg                               code  8000000000000108 32
  RUNNXL.0001                                code  80000000000001f0 32
  SDReadSector                               code  800000000000023d 32
  SDWriteSector                              code  8000000000000242 32
  TCBNext                                    code  800000000000013d 32
  TCBPrev                                    code  800000000000013e 32
  TCBTimeout                                 code  800000000000012e 32
  TCB_MsgD1                                  code  8000000000000120 32
  TCB_MsgD2                                  code  8000000000000121 32
  TCB_MsgD3                                  code  8000000000000122 32
  TCB_Status                                 code  800000000000011f 32
  TS_PREMPT                                  code  800000000000012b 32
  TS_TIMEOUT                                 code  8000000000000143 32
  _cls                                       code  80000000000001c3 32
  _rdcf                                      code  80000000000001c5 32
  gen_rand                                   code  800000000000028b 32
  timeout                                    code  8000000000000147 32

  Macro Name
0 compressable instructions
The top 1024 are:
Comp  Opcode  Count
