.include "../fmtk/const.r5a"
.include "../fmtk/types.r5a"
.include "../fmtk/config.r5a"
.include "../fmtk/device.r5a"
.include "../fmtk/macro.r5a"
.include "../fmtk/globals.r5a"

CTRLC				equ		$03
BS					equ		$08
LF					equ		$0A
CR					equ		$0D
XON					equ		$11
XOFF				equ		$13
EOF         equ   $1A
DEL					equ		$7F
VIA					equ		$FFDC0600
VIA_PA			equ		$04
VIA_DDRA		equ		$0C
VIA_T1CL		equ		$10
VIA_T1CH		equ		$14
VIA_T2CL    equ   $20
VIA_T2CH    equ   $24
VIA_ACR			equ		$2C
VIA_PCR			equ		$30
VIA_IFR			equ		$34
VIA_IER			equ		$38
VIA_PARAW		equ		$3C
UART				equ		$FFDC0A00
UART_TRB		equ		$00
UART_STAT		equ		$04
UART_CMD		equ		$08

CSR_UIE     equ   $004

	code	18 bits
;------------------------------------------------------------------------------
; Exception vector table.
;------------------------------------------------------------------------------
	org		$FFFC0000				; user mode exception
	jmp		IRQRout
	org 	$FFFC00C0				; machine mode exception
	jmp		IRQRout
	org		$FFFC00FC				; non-maskable interrupt
	jmp		MachineStart

;------------------------------------------------------------------------------
; Reset starting address.
;------------------------------------------------------------------------------
	org		$FFFC0100
MachineStart:
	ldi		$sp,#$80000-4		; setup machine mode stack pointer
	call	MMUInit					; initialize MMU for address space zero.
	call	FMTKInit
	call	ViaSetup
	call	SerialInit
	ldi   $t0,#5          ; set current input and output to serial port
	stb   $t0,CURIN
	stb   $t0,CUROUT
	ldi		$t0,#0
	csrrw	$x0,#$181,$t0		; set ASID
	ldi		$t0,#$FFFC0000
	csrrw $x0,#$301,$t0		; set tvec
	ldi		$t0,#UserStart
	csrrw	$x0,#$341,$t0		; set mepc
	stt   $t0,MEPC1
;	jmp   ERETx2  				; switch to user mode
;------------------------------------------------------------------------------
; User mode code starts here
;------------------------------------------------------------------------------
UserStart:
	ldi		$a0,#1              ; Start idle task, task #0
	ldi   $a1,#0          ; app id
	ldi		$a2,#0
	ldi		$a3,#IdleTask
	ecall
  mEI
	ldi		$a0,#1              ; Start finalizer task, task #1
	ldi   $a1,#0          ; app id
	ldi		$a2,#0
	ldi		$a3,#Finalizer
	ecall
	ldi		$a0,#1              ; Start task for monitor
	ldi   $a1,#0          ; app id
	ldi		$a2,#0
	ldi		$a3,#UserStart2
	ecall
	ldi		$a0,#1					; start TinyBasic
	ldi   $a1,#0          ; app id
	ldi		$a2,#32000
	ldi		$a3,#CSTART
	ecall
;	csrrc $x0,#$300,#1    ; enable interrupts
;	wfi
	
UserStart2:
;	ldi		$a0,#14							; Get current tid
;	ecall
;	ldi		$a0,#24							; RequestIOFocus
;	ecall
;	ldi		$sp,#$70000		      ; setup temporary user mode stack pointer
;	mov   $a0,$a1             ; $a0 = tid
;	call  AllocStack
;	add   $sp,$v1,#1020       ; place stack pointer at top of allocated region
	ldi		$t0,#$08						; turn on the LED
	stt		$t0,VIA+VIA_PARAW
	ldi		$t2,#16							; send an XON just in case
	ldi		$a3,#XON
.0004:
	call	Putch ;SerialPutChar
	sub		$t2,$t2,#1
	bnez	$t2,.0004
.0002:
	ldi		$a0,#msgStart				; spit out a startup message
	call	PutString
;		ldi		a0,#1
;		ldi		a1,#24000
;		ldi		a2,#Monitor
;		ecall
	call	DumpReadyList
	jmp		MonEntry

		; Now a loop to recieve and echo back characters
.0003:
;	ldi		$a0,#26							; FMTK_IO
;	ldi   $a1,#5
;	ldi		$a2,#9							; peekchar function
;	ecall
;	mov   $v0,$v1
;	bltz	$v1,.0003
;	ldi		$a0,#26							; FMTK_IO
;	ldi   $a1,#5
;	ldi		$a2,#8							; getchar function
;	ecall
;	mov		$a3,$v1
;	mov   $a0,$a3
;	call  PutHexByte
;	bra		.0003

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

IdleTask:
	bra		IdleTask

;------------------------------------------------------------------------------
; Get a character from input device. Checks for a CTRL-T which indicates to
; switch the I/O focus.
;
; Parameters:
;		none
; Returns:
;		$a0 = character, -1 if none available
;------------------------------------------------------------------------------

Getch:
	gcsub	$sp,$sp,#12
	stt		$ra,[$sp]
	stt		$a1,8[$sp]
	ldi   $a1,#5  ;CURIN
	call  fgetc
	ldt		$ra,[$sp]
	ldt		$a1,8[$sp]
	add		$sp,$sp,#12
	ret

;------------------------------------------------------------------------------
; Parameters:
;   $a0 = character to put
;------------------------------------------------------------------------------

Putch:
	gcsub	$sp,$sp,#24
	stt		$ra,[$sp]
	stt		$a3,8[$sp]
	stt		$a1,16[$sp]
	mov		$a3,$a0
	ldi		$a1,#5  ;CUROUT    ; serial port
	call	fputc
	ldt		$ra,[$sp]
	ldt		$a3,8[$sp]
	ldt		$a1,16[$sp]
	add		$sp,$sp,#24
	ret

;------------------------------------------------------------------------------
; fputc - put a character to an I/O device. If the task doesn't have the I/O
; focus then it is rescheduled, allowing another task to run.
;
; Stack Space:
;		6 words
; Register Usage:
;		a0 = FMTK_IO specify
;		a2 = device putchar function
; Parameters:
;		a1 = I/O channel
;		a3 = character to put
; Modifies:
;		none
; Returns:
;   EOF if error occurred, otherwise character to put
;------------------------------------------------------------------------------

fputc:
	gcsub	$sp,$sp,#24
	stt		$ra,[$sp]
	stt		$a0,8[$sp]
	stt		$a1,16[$sp]
	stt		$a2,20[$sp]
	; If the device is a UI device there may be multiple owning jobs. It doesn't
	; do any good to check for ownership. Instead the I/O focus is checked to
	; see if it's present.
	call  GetUIFlag
	beqz  $a1,.checkOwner
  ldt   $a1,16[$sp]
	call  WaitForIOFocus
	bra   .0001
.checkOwner:
  call  CheckDevOwner
  bnez  $a0,.notOwner
.0001:
  ldt   $a1,16[$sp]
	ldi		$a0,#26							; FMTK_IO
	ldi		$a2,#13							; putchar function
	ecall
	mov   $a0,$a3
.xit:
	ldt		$ra,[$sp]
	ldt		$a0,8[$sp]
	ldt		$a1,16[$sp]
	ldt		$a2,20[$sp]
	add		$sp,$sp,#24
	ret
.notOwner:
  ldi   $a0,#EOF
  bra   .xit
 
;------------------------------------------------------------------------------
; fgetc - get a character from an I/O device. If the task doesn't have the I/O
; focus then it is rescheduled, allowing another task to run.
;
; Stack Space:
;		6 words
; Register Usage:
;		a0 = FMTK_IO specify
;		a2 = device getchar function
; Parameters:
;		a1 = I/O channel
; Modifies:
;		none
; Returns:
;		a0 character, -1 if none available
;------------------------------------------------------------------------------

fgetc:
	gcsub	$sp,$sp,#24
	stt		$ra,[$sp]
	stt		$a0,8[$sp]
	stt		$a1,16[$sp]
	stt		$a2,20[$sp]
	call  GetUIFlag
	beqz  $a1,.checkOwner
	ldt		$a1,16[$sp]
	call  WaitForIOFocus
	bra   .0001
.checkOwner:
	ldt		$a1,16[$sp]
  call  CheckDevOwner
  bnez  $a0,.notOwner
.0001:
	ldi		$a0,#26							; FMTK_IO
	ldt		$a1,16[$sp]
	ldi		$a2,#8							; getchar function
	ecall
	mov   $a0,$a1
.0002:
	ldt		$ra,[$sp]
	ldt		$a0,8[$sp]
	ldt		$a1,16[$sp]
	ldt		$a2,20[$sp]
	add		$sp,$sp,#24
	ret
.notOwner:
  ldi   $a0,#-1
  bra   .0002

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
MonEntry:
;		flw			$f2,fltTen
;		fsw			$f2,f2Save
;		flw			$f1,fltTen
;		fsw			$f1,f1Save
;		fadd		$f18,$f2,$f1
;		fsw			$f18,f18Save
		ldi		$a0,#10
		ldi		$a2,#6
;		call	fltToString
;		ldi		$a0,#STRTMP
;		call	PutString

Monitor:
	csrrc	$x0,#$300,#1
.getFocus:
;	ldi   $a0,#20       ; has IO focus
;	ecall
;	bnez  $v1,.hasFocus
;	ldi   $a0,#21       ; switch focus
;	ecall
;	bra   .getFocus
.hasFocus:
;		call	DumpReadyList
;		call	DumpTimeoutList
	mEI
	ldi		$s1,#0					; s1 = input pointer
	ldi		$a0,#CR
	call	Putch
	ldi		$a0,#LF
	call	Putch
	ldi		$a0,#'>'
	call	Putch
.0001:
	call	Getch						; wait until character pressed
	bltz	$a0,.0001
	xor		$t0,$a0,#LF			; ignore line feed
	beqz	$t0,.procLine
	xor		$t0,$a0,#CR
	beqz	$t0,.procLine
	xor		$t0,$a0,#BS
	beqz	$t0,.doBackspace
	xor		$t0,$a0,#DEL
	beqz	$t0,.doDelete
	stb		$a0,INBUF[$s1]
	add		$s1,$s1,#1
	call	Putch
	bra		.0001
.doDelete:
	mov		$s2,$s1
	add		$s2,$s2,#1
.0002:
	ldb		$t0,INBUF[$s2]
	stb		$t0,INBUF-1[$s2]
	add		$s2,$s2,#1
	add		$t0,$s2,#INBUF
	slt		$t0,$t0,#INBUF+$7F
	bne		$t0,$x0,.0002
	stb		$x0,INBUF[$s2]
	bra		.0001
.doBackspace:
	beq		$s1,$x0,.0001		; can't backspace anymore
	call	Putch           ; show the backspace
	sub		$s1,$s1,#1
	mov		$s2,$s1
.0003:
	ldb		$t0,INBUF+1[$s2]
	stb		$t0,INBUF[$s2]
	add		$s2,$s2,#1
	add		$t0,$s2,#INBUF
	slt		$t0,$t0,#INBUF+$7F
	bne		$t0,$x0,.0003
	stb		$x0,INBUF[$s2]
	bra		.0001
.procLine:
	stb		$x0,INBUF[$s1]
	ldi		$s1,#0
.skip:
	ldb		$t0,INBUF[$s1]
	beq		$t0,$x0,.0005
	xor		$t1,$t0,#'>'
	bne		$t1,$x0,.0004
.skip2:
	add		$s1,$s1,#1
	bra		.skip
.0004:
	xor		$t1,$t0,#' '
	beq		$t1,$x0,.skip2
	xor		$t1,$t0,#'\t'
	beq		$t1,$x0,.skip2
	xor   $t1,$t0,#'X'  ; exit from monitor
	bnez  $t1,.notX
	ldi   $a0,#E_Ok
	jmp   ERETx
.notX:
	xor		$t1,$t0,#'M'
	beqz	$t1,doMem
	xor   $t1,$t0,#'V'
	beqz  $t1,doVMem
	xor   $t1,$t0,#'P'
	beqz  $t1,doPStat
	ldi		$t1,#'B'
	bne		$t0,$t1,.0006
	call  GetDecNum
	bnez  $a0,.basSize
	ldi   $a0,#32000
.basSize:
	ldi		$a0,#12					; Start App
	ldi   $a1,#TBASR
	ecall
	mov		$s1,$a1					; save v1
	ldi		$a0,#msgCRLF
	call	PutString
	mov		$a0,$s1					; get back v1
	call	PutHexByte
	ldi		$a0,#msgTaskStart
	call	PutString
	call  DumpReadyList
	; The monitor is running in machine mode. A return instruction is used to
	; switch to user mode. The return address must be set to the desired user
	; code address.
	csrrc $x0,#$300,#1    ; disable interrupts
	ldi   $t0,#CSTART       ; pick start of Tiny Basic
	csrrw $x0,#$341,$t0     ; set as return address
	ldi   $t0,#$20          ; bits to select register set #1
	csrrw $x0,#$7C0,$t0     ; select register set #1 (will decrement to zero then on mret)
	mret                    ; will begin running Tiny Basic in user mode
	;ldi		$a0,#5					; Reschedule task
	;ldi		$a1,#1					; sleep(0)
	;ecall
	jmp		Monitor
.0006:
	ldi		$t1,#'D'
	bne		$t0,$t1,.0007
	lb		$t0,INBUF+1[$s1]
	ldi		$t1,#'T'
	bne		$t0,$t1,.noT
	call	DumpTimeoutList
	jmp		Monitor
.noT:
	call 	DumpReadyList
	;ldi		$a0,#15
	;ecall
	jmp		Monitor
.0007:
	ldi		$t1,#'E'
	bne		$t0,$t1,.0008
	jmp		EditMem
.0008:
	ldi		$t1,#'F'
	bne		$t0,$t1,.0009
	ldb   $t0,INBUF+1[$s1]
	ldi   $t1,#'I'
	bne   $t1,$t0,.notFind
	add   $s1,$s1,#1
	jmp   Find
.notFind:
	jmp		FillMem
.0009:
	ldi		$t1,#'S'
	bne		$t0,$t1,.0010
	ldi		$a0,#5					; sleep(0)
	ldi		$a1,#1
	ecall
	jmp		Monitor
.0010:
	ldi		$t1,#'K'
	bne		$t0,$t1,.0011
	call	GetHexNum
	mov		$a1,$a0					; a0 = pid
	ldi		$a0,#3					; kill task
	ecall
	jmp		Monitor
.0011:
	ldi		$t1,#'?'
	bne		$t0,$t1,.0012
	ldi		$a0,#msgMonHelp
	call	PutString
	jmp		Monitor
.0012:
.0005:
	bra		Monitor

doMem:
	gcsub	$sp,$sp,#4
	add		$s1,$s1,#1
	ldb		$t0,INBUF[$s1]
	xor   $t0,$t0,#'O'
	bnez  $t0,.0001
	add		$s1,$s1,#1
.0001:
	stt		$s1,[$sp]
	ldi		$a0,#CR
	call	Putch
	ldi		$a0,#INBUF
	call	PutString
	ldt		$s1,[$sp]
	add		$sp,$sp,#4
	call	GetHexNum
	mov		$s3,$a0
	add		$s1,$s1,#1
	call	GetHexNum
	add		$s4,$a0,$s3
.loop2:
	call	Getch						; check for ctrl-c
	xor		$a0,$a0,#3
	beq		$a0,$x0,Monitor
	ldi		$a0,#CR
	call	Putch
	mov		$a0,$s3
	call	PutHexWord
	ldi		$a0,#':'
	call	Putch
	ldi		$s2,#7
.loop:
	ldi		$a0,#' '
	call	Putch
	bnez  $t0,.userMem
	ldi   $a0,#33         ; Fetch memory word
	mov   $a1,$s3
	ecall
	mov   $a0,$a1
	bra   .0002
.userMem
	ldb		$a0,[$s3]
.0002:
	call	PutHexByte
	add		$s3,$s3,#1
	sub		$s2,$s2,#1
	bge		$s2,$x0,.loop
	bltu	$s3,$s4,.loop2
	jmp		Monitor		

EditMem:
	csrrs $x0,#CSR_UIE,#1        ; enable gc interrupt
	call	GetHexNum			; get address to edit
	mov		$s3,$a0
	add		$s1,$s1,#1
	call	GetHexNum			; get value to set
	stb		$s3,[$a0]			; update mem
	jmp		Monitor

;------------------------------------------------------------------------------
; >V 0
; Displays the virtual memory map for the specified app.
;------------------------------------------------------------------------------

doVMem:
  add   $s1,$s1,#1
  call  GetDecNum
  ldi   $t1,#0
  sll   $t0,$a0,#16
.0001:
  and   $a0,$t1,#3
  bnez  $a0,.notLF
  ldi   $a0,#CR
  call  Putch
  ldi   $a0,#LF
  call  Putch
.notLF:
  mov   $a0,$t0
  call  PutHexWord
  ldi   $a0,#':'
  call  Putch
  mvmap $a0,$x0,$t0
  call  PutHexHalf
  ldi   $a0,#' '
  call  Putch
  add   $t0,$t0,#1
  add   $t1,$t1,#1
  slt   $a0,$t1,#256
  bnez  $a0,.0001  
  jmp   Monitor

;------------------------------------------------------------------------------
; >P
; Display the PAM bits status.
;------------------------------------------------------------------------------

doPStat:
  ldi   $a0,#CR
  call  Putch
  ldi   $a0,#LF
  call  Putch
  ldi   $a1,#0        ; $a1 = bit number
.0001:
  ldi   $a0,#32       ; Get PAM bit
  ecall
  add   $a0,$a1,#'0'
  call  Putch
  add   $a1,$a1,#1
  slt   $a0,$a1,#512
  bnez  $a0,.0001
  jmp   Monitor
 
;------------------------------------------------------------------------------
;	>F 1000 800 EE
; Fills memory beginning at address $1000 for $800 bytes with the value $EE
;------------------------------------------------------------------------------

FillMem:
	call	GetHexNum			; get address
	mov		$s3,$a0
	add		$s1,$s1,#1
	call	GetHexNum			; get length
	mov		$s4,$a0
	add		$s1,$s1,#1
	call	GetHexNum			; get byte to use
.0001:
	stb		$a0,[$s3]
	sub		$s4,$s4,#1
	bgt		$s4,$x0,.0001
	jmp		Monitor

;------------------------------------------------------------------------------
; FI Hello
;------------------------------------------------------------------------------

Find:
  ldi   $a0,#CR
  call  Putch
  ldi   $a0,#LF
  call  Putch
  call  SkipSpaces
  mov   $s2,$s1
.fwe:
  ldbu  $t0,INBUF[$s2]
  beqz  $t0,.endOfWord
  ldi   $t1,#' '
  beq   $t0,$t1,.endOfWord
  ldi   $t1,#CR
  beq   $t0,$t1,.endOfWord
  add   $s2,$s2,#1
  bra   .fwe
.endOfWord:
  stb   $x0,INBUF[$s2]
  mov   $s2,$s1
  ldi   $a0,#0
  ldi   $a1,#0
.loop:
	call	Getch						; check for ctrl-c
	xor		$a0,$a0,#3
	bnez	$a0,.0001
	jmp   Monitor
.0001:
  ldbu  $t0,[$a0]
  ldbu  $t1,INBUF[$s2]
  beqz  $t1,.found
  bne   $t0,$t1,.next
  add   $a0,$a0,#1
  add   $s2,$s2,#1
  bra   .loop
.next:
  mov   $s2,$s1         ; start over again with $s2
  add   $a0,$a1,#1      ; start over again with $a0, but increment by one
  ldi   $t2,#$80000     ; 512k
  mov   $a1,$a0         ; remember new starting pos.
  slt   $t2,$a0,$t2
  bnez  $t2,.loop
  bra   .notFound
.found:
  call  PutHexWord
  ldi   $a0,#CR
  call  Putch
  ldi   $a0,#LF
  call  Putch
  bra   .next
.notFound:
  ldi   $a0,#CR
  call  Putch
  ldi   $a0,#LF
  call  Putch
  jmp   Monitor

;------------------------------------------------------------------------------
; Skip over spaces and tabs in the input buffer.
;------------------------------------------------------------------------------

SkipSpaces:
.skip2:
	ldb		$t0,INBUF[$s1]
	xor		$t1,$t0,#' '
	beqz	$t1,.skip1
	xor		$t1,$t0,#'\t'
	beqz	$t1,.skip1
	ret
.skip1:
	add		$s1,$s1,#1
	bra		.skip2

;------------------------------------------------------------------------------
; Get a hex number from the input buffer.
;------------------------------------------------------------------------------

GetHexNum:
	ldi		$a0,#0							; a0 = num
	gcsub	$sp,$sp,#4
	stt		$ra,[$sp]
	call	SkipSpaces
.next:
	ldb		$t0,INBUF[$s1]
	ldi		$t2,#'0'
	blt		$t0,$t2,.0001
	ldi		$t2,#'9'+1
	blt		$t0,$t2,.isDigit
	ldi		$t2,#'A'
	blt		$t0,$t2,.0001
	ldi		$t2,#'F'+1
	blt		$t0,$t2,.isHexUpper
	ldi		$t2,#'a'
	blt		$t0,$t2,.0001
	ldi		$t2,#'f'+1
	blt		$t0,$t2,.isHexLower
.0001:
	ldt		$ra,[$sp]
	add		$sp,$sp,#4
	ret
.isHexUpper:
	sll		$a0,$a0,#4
	sub		$t0,$t0,#'A'
	add		$t0,$t0,#10
	or		$a0,$a0,$t0
	add		$s1,$s1,#1
	bra		.next
.isHexLower:
	sll		$a0,$a0,#4
	sub		$t0,$t0,#'a'
	add		$t0,$t0,#10
	or		$a0,$a0,$t0
	add		$s1,$s1,#1
	bra		.next
.isDigit:
	sll		$a0,$a0,#4
	sub		$t0,$t0,#'0'
	or		$a0,$a0,$t0
	add		$s1,$s1,#1
	bra		.next

;------------------------------------------------------------------------------
; Get a decimal number from the input buffer.
;------------------------------------------------------------------------------

GetDecNum:
	ldi		$a0,#0							; a0 = num
	gcsub	$sp,$sp,#4
	stt		$ra,[$sp]
	call	SkipSpaces
.next:
	ldb		$t0,INBUF[$s1]
	ldi		$t2,#'0'
	blt		$t0,$t2,.0001
	ldi		$t2,#'9'+1
	blt		$t0,$t2,.isDigit
.0001:
	ldt		$ra,[$sp]
	add		$sp,$sp,#4
	ret
.isDigit:
	sll		$t2,$a0,#1    ; multiply by 10
	sll   $a0,$a0,#3    ; * 8
	add   $a0,$a0,$t2   ; + *2
	sub		$t0,$t0,#'0'
	add		$a0,$a0,$t0
	add		$s1,$s1,#1
	bra		.next

;------------------------------------------------------------------------------
; Output a word as a hex string.
;
; Parameters:
;   a0 = contains word to output
; Registers Affected:
;   none
; Returns:
;   none
;------------------------------------------------------------------------------

PutHexWord:
	gcsub	$sp,$sp,#8
	stt		$ra,[$sp]
	stt		$a0,4[$sp]
	srl		$a0,$a0,#16
	call	PutHexHalf
	ldt		$ra,[$sp]
	ldt		$a0,4[$sp]
	add		$sp,$sp,#8	; fall through to PutHexHalf

;------------------------------------------------------------------------------
; Output a half-word (16 bits) as a hex string.
;------------------------------------------------------------------------------

PutHexHalf:
	gcsub	$sp,$sp,#8
	stt		$ra,[$sp]
	stt		$a0,4[$sp]
	srl		$a0,$a0,#8
	call	PutHexByte
	ldt		$ra,[$sp]
	ldt		$a0,4[$sp]		
	add		$sp,$sp,#8	; fall through to PutHexByte

;------------------------------------------------------------------------------
; Output a byte as a hex string.
;------------------------------------------------------------------------------

PutHexByte:
	gcsub	$sp,$sp,#8
	stt		$ra,[$sp]
	stt		$a0,4[$sp]
	srl		$a0,$a0,#4		; put the high order nybble first
	call	PutHexNybble
	ldt		$ra,[$sp]
	ldt		$a0,4[$sp]
	add		$sp,$sp,#8		; fall through to PutHexNybble

;------------------------------------------------------------------------------
; Output a nybble as a hex string.
;
; Parameters:
;   a0 = contains nybble to output
; Registers Affected:
;   none
; Returns:
;   none
;------------------------------------------------------------------------------

PutHexNybble:
	gcsub	$sp,$sp,#12
	stt		$ra,[$sp]
	stt		$a0,4[$sp]
	stt   $t0,8[$sp]
	and		$a0,$a0,#15		; strip off high order bits
	ldi		$t0,#10
	blt		$a0,$t0,.lt10
	sub		$a0,$a0,#10
	add		$a0,$a0,#'A'
	call	Putch
	bra		.0001
.lt10:
	add		$a0,$a0,#'0'
	call	Putch
.0001:
	ldt		$ra,[$sp]
	ldt		$a0,4[$sp]
	ldt   $t0,8[$sp]
	add		$sp,$sp,#12
	ret

;------------------------------------------------------------------------------
; PutString
;    Put a string of characters to the serial transmitter. Calls the 
; Putch routine, so this routine also blocks if the transmitter is not
; empty.
;
; Parameters:
;		$a0 = pointer to null terminated string to put
; Modifies:
;		$t0 and $t1
; Stack Space:
;		2 words
;------------------------------------------------------------------------------

PutString:
	gcsub	$sp,$sp,#8				; save link register
	stt		$ra,[$sp]
	stt		$a0,4[$sp]				; and argument
	mov		$t1,$a0						; t1 = pointer to string
.0001:
	ldb		$a0,[$t1]
	add		$t1,$t1,#1				; advance pointer to next byte
	beqz	$a0,.done			    ; branch if done
	call	Putch							; output character
	bra		.0001
.done:
	ldt		$ra,[$sp]					; restore return address
	ldt		$a0,4[$sp]				; and argument
	add		$sp,$sp,#8
	ret

;------------------------------------------------------------------------------
; Exception processing code starts here.
; As per the RISCV privilege spec, the MSB indicates an external interrupt.
; The system uses cause codes 32 to 63 for external devices. This cause code
; range is reserved in the RISCV spec.
;
; On incoming the register file has been set to the interrupt register file
; or the machine mode register file.
;------------------------------------------------------------------------------
	code
	align	4
IRQRout:
  csrrw $t0,#$7C0,$x0   ; get register sets
  srl   $t0,$t0,#5      ; extract register set selection
  sll   $t0,$t0,#3
  csrrw $t1,#$341,$x0   ; get mepc
  stt   $t1,MEPC0[$t0]  ; save it
  sll   $t2,$t0,#8      ; $t2 = 1024 * register set #
	ldi		$sp,#$80000-4		; setup machine mode stack pointer
	sub   $sp,$sp,$t2
	csrrw	$t0,#$342,$x0			; get cause code
	bltz	$t0,.isIRQ		  ; irq or ecall?
	jmp		OSCALL					; goto operating system call dispatcher
.isIRQ:
  ldt   $t1,IRQFlag     ; update IRQ flag for Tiny Basic
  add   $t1,$t1,#1
  stt   $t1,IRQFlag
  and   $t0,$t0,#$FF
  stt   $t0,IRQCause    ; update cause code for Tiny Basic
  sub   $t1,$t0,#1
  beqz  $t1,.softwareIrq
  sub   $t1,$t1,#1
  beqz  $t1,.timerIrq
  sub   $t1,$t1,#1      ; garbage collect interrupt?
  beqz  $t1,.gcIrq
	and		$t0,$t0,#31			; interrupting device # is low order 5 bits of cause code
	sll		$t0,$t0,#7				; 128 bytes per device func table
	add		$t0,$t0,#DVF_Base+22*4	; load IRQ routine vector from device func table
	ldt		$t0,[$t0]
	beqz	$t0,.noIRQ	    ; make sure there's an address to go to
	jmp		[$t0]						; jump to the IRQ routine
.noIRQ:
.softwareIrq:
.timerIrq:
  bra   ERETx2
.gcIrq:
	ldi		$sp,#$7F800-4		; setup interrupt mode stack pointer
  call  gcIncrement
ERETx2:
  csrrc $x0,#$7C0,#31   ; select machine regs only
  csrrw $t0,#$7C0,$x0   ; get register sets
  srl   $t0,$t0,#5      ; extract register set selection
  sll   $t0,$t0,#3
  ldt   $t1,MEPC0[$t0]  ; get it
  csrrw $x0,#$341,$t1   ; set mepc
	mret

; Application startup record for Tiny Basic
TBASR:
  db    0     ; page size (can't change on this system)
  db    2     ; priority normal
  db    0     ; reserved
  db    0     ; processor affinity
  dw    0     ; reserved
  dw    0     ; code size (0 = in ROM, don't move)
  dw    0     ; reserved
  dw    0     ; data size (preinitialized data)
  dw    0     ; reserved
  dw    32768 ; uninitialized data size
  dw    0     ; reserved
  dw    0     ; Heap size
  dw    0     ; reserved
  dw    2048  ; stack size
  dw    0     ; reserved
  dw    CSTART  ; pointer to code
  dw    0       ; reserved
  dw    0     ; pointer to data
  dw    0     ; reserved
  dw    0     ; ui data
  dw    0     ; reserved
    
;------------------------------------------------------------------------------
; Message strings
;------------------------------------------------------------------------------

msgStart:
		db		"CS01 System Starting.",13
msgMonHelp:
		db		"Monitor Commands",13
		db		"B - start tiny basic",13
		db		"D - dump ready que",13
		db		"E - edit memory",13
		db		"F - fill memory",13
		db    "FI <string>- find string in memory",13
		db		"K <tid> - kill task", 13
		db		"M <start> <length>	- dump memory",13
		db    "P - display PAM",13
		db		"S - switch task",13
		db    "V <mid> dump virtual memory map",13
		db		0
		align 4
msgTaskStart:
		db		" task started."
msgCRLF:
		db		13,10,0
flt50:
	dw	0x00000000,0x00000000,0x00000000,0x40049000
flt20:
	dw	0x00000000,0x00000000,0x00000000,0x40034000
flt10:
	dw	0x00000000,0x00000000,0x00000000,0x40024000

.include "fltToString.r5a"
.include "cs01Mem.r5a"
.include "cs01PAM.r5a"
.include "../fmtk/serial.r5a"
.include "../fmtk/via.r5a"
.include "../fmtk/task.r5a"
.include "../fmtk/msg.r5a"
.include "../fmtk/app.r5a"
.include "../fmtk/tcb.r5a"
.include "../fmtk/iofocus.r5a"
.include "../fmtk/io.r5a"
.include "../fmtk/finalizer.r5a"
.include "../fmtk/gcIncremental.r5a"
.include "TinyBasic.r5a"
