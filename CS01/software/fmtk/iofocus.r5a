; ============================================================================
;        __
;   \\__/ o\    (C) 2020  Robert Finch, Stratford
;    \  __ /    All rights reserved.
;     \/_//     robfinch<remove>@finitron.ca
;       ||
;  
;
; This source file is free software: you can redistribute it and/or modify 
; it under the terms of the GNU Lesser General Public License as published 
; by the Free Software Foundation, either version 3 of the License, or     
; (at your option) any later version.                                      
;                                                                          
; This source file is distributed in the hope that it will be useful,      
; but WITHOUT ANY WARRANTY; without even the implied warranty of           
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
; GNU General Public License for more details.                             
;                                                                          
; You should have received a copy of the GNU General Public License        
; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
;
; ============================================================================

;-----------------------------------------------------------------------------
; IO Focus routines complicated by the fact that the base address of TCB
; zero is zero (looks like a null pointer but isn't). So the value -1 is 
; used to indicate no focus index.
;-----------------------------------------------------------------------------

	code
	align	4

;-----------------------------------------------------------------------------
; Determine if the currently running task has the I/O focus.
;
; Stack Space:
;		2 words
; Parameters:
;		none
; Modifies:
;		none
; Returns:
;		v0 = E_Ok
;		v1 = 1 if task has IO focus, 0 otherwise
;-----------------------------------------------------------------------------

FMTK_HasIOFocus:
	mGetCurrentTid
;	sll		$v0,$v0,#LOG_TCBSZ
	ldt		$v1,IOFocusNdx
	beq		$v0,$v1,.hasFocus
	ldi		$v1,#0
	bra		.xit
.hasFocus:
	ldi		$v1,#1
.xit:
	ldi		$v0,#E_Ok
	jmp		ERETx

;-----------------------------------------------------------------------------
; First check if it's even possible to switch the focus to another
; task. The I/O focus list could be empty or there may be only a
; single task in the list. In either case it's not possible to
; switch.
;
;	Parameters:
;		none
;	Modifies:
;		none
;	Returns:
;		v0 = E_Ok
;-----------------------------------------------------------------------------

SwitchIOFocusHelper:
	ldt		$t0,IOFocusNdx			; get focus pointer
	beqz	$t0,.noFocus		    ; is it nullptr?
	ldt		$t1,IOF_NEXT[$t0]
	beq		$t1,$t0,.sameFocus
	beqz	$t1,.noFocus
	; swap virtual screens
	; set vidmem pointer
	stt		$t1,IOFocusNdx
.sameFocus:
.noFocus:
	ldi		$v0,E_Ok
	ret

FMTK_SwitchIOFocus:
	call	SwitchIOFocusHelper
	jmp		ERETx

;-----------------------------------------------------------------------------
; The I/O focus list is an array indicating which jobs are requesting the
; I/O focus. The I/O focus is user controlled by pressing CNTRL-T on the
; keyboard.
;
; Parameters:
;		a1 = task id requesting focus for
;-----------------------------------------------------------------------------

FMTK_RequestIOFocus:
	ldi		$t0,#1
	ldb   $t1,TCBMap[$a1]
	sll		$t0,$t0,$t1
	ldt		$t1,IOFocusTbl			; Is the task already included in the IO focus?
	and		$t2,$t1,$t0					; test bit
	bnez	$t2,.ret				    ; If so, don't add again
	or		$t1,$t1,$t0					; set bit indicator
	stt		$t1,IOFocusTbl
	ldt		$t0,IOFocusNdx			; get current index
;	sll		$t1,$a1,#LOG_TCBSZ	; t1 = pointer to TCB
	bnez	$t0,.notEmpty		    ; is there one? (!= 0)
	stt		$a1,IOFocusNdx			; no current index, so set equal to requester
	stt		$a1,IOF_NEXT[$a1]		; and loop back to self
	stt		$a1,IOF_PREV[$a1]
	bra		.ret
.notEmpty:
	ldt		$t2,IOF_PREV[$t0]		; insert t1 into focus ring
	stt		$t2,IOF_PREV[$a1]
	stt		$t0,IOF_NEXT[$a1]
	ldt		$t2,IOF_PREV[$t0]
	stt		$a1,IOF_NEXT[$t2]
	stt		$a1,IOF_PREV[$t0]
.ret:
	ldi		$v0,#E_Ok
	jmp		ERETx

;-----------------------------------------------------------------------------
; ReleaseIOFocus called when the task no longer desires to be on the I/O
; focus list.
;-----------------------------------------------------------------------------

FMTK_ReleaseIOFocus:
	mGetCurrentTid
	mov		$a1,$v0
	; fall into ForceReleaseIOFocus

;-----------------------------------------------------------------------------
; Releasing the I/O focus causes the focus to switch if the running job
; had the I/O focus.
; ForceReleaseIOFocus forces the release of the IO focus for a job
; different than the one currently running.
; 
; Stack Space:
;		2 words
; Parameters:
;		a1 = task id to release
; Returns:
;		v0 = E_Ok
;-----------------------------------------------------------------------------

FMTK_ForceReleaseIOFocus:
	ldi		$t0,#1
;	sll		$t0,$t0,$a1
  ldb   $t1,TCBMap[$a1]
	sll		$t0,$t0,$t1
	ldt		$t1,IOFocusTbl
	and		$t2,$t1,$t0				; test bit for task
	beq		$t2,$x0,.noFocus	; does it even have the focus?
	xor		$t0,$t0,#-1				; get inverted mask
	and		$t1,$t1,$t0				; clear bit for task
	stt		$t1,IOFocusTbl
	ldt		$t1,IOFocusNdx		; check if the focus being released is the current
;	sll		$t0,$a1,#LOG_TCBSZ	; io focus. If so, switch focus
	bne		$a1,$t1,.notSame
	gcsub	$sp,$sp,#8
	stt		$t0,[$sp]
	stt		$t1,4[$sp]
	call	SwitchIOFocusHelper
	ldt		$t0,[$sp]
	ldt		$t1,4[$sp]
	add		$sp,$sp,#8
.notSame:
	ldt		$t2,IOF_NEXT[$a1]
	beqz	$t2,.done
	beq		$t2,$t0,.pjSame
	ldt		$t1,IOF_PREV[$a1]
	stt		$t1,IOF_PREV[$t2]
	stt		$t2,IOF_NEXT[$t1]
	bra		.0001
.pjSame:
	stt		$x0,IOFocusNdx
.0001:
	stt		$x0,IOF_NEXT[$a1]	
	stt		$x0,IOF_PREV[$a1]	
.done:
.noFocus:
	ldi		$v0,#E_Ok
	jmp		ERETx

;------------------------------------------------------------------------------
;     Wait for the IO Focus. Returns only when focus is present.
; Parameters:
;   a1 = device # to check, 5 = COM1 serial port, 1 = KBD keyboard
;------------------------------------------------------------------------------

_WaitForIOFocus:
WaitForIOFocus:
  gcsub $sp,$sp,#12
  stt   $a0,[$sp]
  stt   $a1,4[$sp]
  stt   $a2,8[$sp]
.WFF1:
	ldi		$a0,#20           ; FMTK Has Focus
	ecall
	ldt   $a1,4[$sp]        ; get back I/O channel
	bnez	$v1,.HasFocus
	ldi   $a0,#26           ; FMTK_IO
	ldi   $a1,#5
	ldi   $a2,#9            ; peekchar function
	ecall
	bltz  $v1,.0001
	stt   $v1,$4378
.0001:
	ldi		$a0,#$14					; CTRL-T
	bne		$v1,$a0,.WFF2
	; eat up the CTRL-T
	ldi		$a0,#26						; FMTK_IO
	ldi		$a2,#8						; getchar function
	ecall
	ldi		$a0,#21						; switch IO Focus
	ecall
	bra		.WFF1
.WFF2:
	ldi		$a0,#5            ; FMTK Sleep() function
	ldi		$a1,#1
	ecall
	bra		.WFF1
.HasFocus:
  ldt   $a0,[$sp]
  ldt   $a1,4[$sp]
  ldt   $a2,8[$sp]
  add   $sp,$sp,#12
  ret

;------------------------------------------------------------------------------

GetUIFlag:
  gcsub $sp,$sp,#12
  stt   $a0,[$sp]
  stt   $a2,4[$sp]
  stt   $a3,8[$sp]
  ldi   $a0,#27           ; Get DCB Field
  ldi   $a2,#DCB_fUI      ; Get UI Flag
  ldi   $a3,#1            ; 1 byte
  ecall
  ldt   $a0,[$sp]
  ldt   $a2,4[$sp]
  ldt   $a3,8[$sp]
  add   $sp,$sp,#12
  ret
