; ============================================================================
;        __
;   \\__/ o\    (C) 2020  Robert Finch, Stratford
;    \  __ /    All rights reserved.
;     \/_//     robfinch<remove>@finitron.ca
;       ||
;  
;
; This source file is free software: you can redistribute it and/or modify 
; it under the terms of the GNU Lesser General Public License as published 
; by the Free Software Foundation, either version 3 of the License, or     
; (at your option) any later version.                                      
;                                                                          
; This source file is distributed in the hope that it will be useful,      
; but WITHOUT ANY WARRANTY; without even the implied warranty of           
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
; GNU General Public License for more details.                             
;                                                                          
; You should have received a copy of the GNU General Public License        
; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
;
; ============================================================================

; macros have to be defined before they are encountered.

; unlock the a semaphore	
macro mUnlockSemaphore (adr)
	ldi		v0,#-1
	stt		v0,adr
endm

; Look at the asid register for task id
macro mGetCurrentTid
	csrrw	v0,#$181,x0
	and		v0,v0,#15
endm

macro	mHasFocus
	ldi		$a0,#20
	ecall
endm

macro mSleep(tm)
	ldi		$a0,#5            ; FMTK Sleep() function
	ldi		$a1,#tm
	ecall
endm

;------------------------------------------------------------------------------
; Parameters:
;   a1 = device # to check
;------------------------------------------------------------------------------

macro mWaitForFocus
.WFF1@:
	mHasFocus
	bnez	$v1,.HasFocus@
	ldi   $a0,#26             ; FMTK_IO
	ldi   $a2,#9              ; peekchar function
	ecall
	ldi		$a0,#$14						; CTRL-T
	bne		$v0,$a0,.WFF2@
	; eat up the CTRL-T
	ldi		$a0,#26							; FMTK_IO
	ldi		$a2,#8							; getchar function
	ecall
	ldi		$a0,#21							; switch IO Focus
	ecall
	bra		.WFF1@
.WFF2@:
	mSleep(1)
	bra		.WFF1@
.HasFocus@:
endm

;------------------------------------------------------------------------------
; Remove the task from the list of tasks waiting at the mailbox.
; This routine is only called from a couple of places and it is convenient
; not to stack the return address. So, it is implemented as a macro.
;
; Parameters:
;		a0 = task id
;------------------------------------------------------------------------------

macro mMbxRemoveTask
	sub		$sp,$sp,#16
	sw		$s1,[$sp]
	sw		$t0,4[$sp]
	sw		$t1,8[$sp]
	sw		$t2,12[$sp]
	sll		$s1,$a0,#LOG_TCBSZ		; tid to pointer
	lh		$t0,TCBWaitMbx[$s1]		; get mailbox handle
	blt		$t0,$x0,.xit@					; handle good?
	sll		$t0,$t0,#4						; convert to pointer
	add		$t0,$t0,#mbxs					; by adding base address
	lhu		$t1,MBX_WTIDS[$t0]		; get waiting task list
	ldi		$t2,#1								; create a mask for given task id
	sll		$t2,$t2,$a0
	xor		$t2,$t2,#-1
	and		$t1,$t1,$t2						; clear bit
	sh		$t1,MBX_WTIDS[$t0]		; update waiting task list
.xit@:
	lw		$s1,[$sp]
	lw		$t0,4[$sp]
	lw		$t1,8[$sp]
	lw		$t2,12[$sp]
	add		$sp,$sp,#16
endm

;------------------------------------------------------------------------------
; Pop an entry off the timeout list. It is assumed the entry is popped when
; its timeout reached zero. Hence there is no adjustment of the following
; timeout made. Routine used only in the schedulerIRQ, so written as a macro.
;
; Parameters:
;		v0 = top timeout list
; Modifies:
;		v1,t0,t1,t2,t3
;	Returns:
;		v0 = timeout list entry tid
;------------------------------------------------------------------------------

macro mPopTimeoutList
	sll		$t0,$v0,#LOG_TCBSZ		; tid to pointer
	lbu		$v1,TCBStatus[$t0]		; no longer a waiting status
	and		$t1,$v1,#TS_WAITMSG		; check if waiting for a message
	beqz	$t1,.noWait@
	mMbxRemoveTask							; remove task from mailbox list
.noWait@:
	and		$v1,$v1,#~(TS_WAITMSG|TS_TIMEOUT)
	stb		$v1,TCBStatus[$t0]
	ldw		$v1,TCBNext[$t0]			; get next task on timeout list
	stw		$v1,TimeoutList				; update list head
	ldi		$t1,#NR_TCB						; check valid handle
	bgeu	$v1,$t1,.done@
	ldi		$t1,#-1								;
	sll		$v1,$v1,#LOG_TCBSZ		; v1 = tid to pointer
	stw		$t1,TCBPrev[$v1]			; TimeoutList->prev = -1
.done@:
	ldi		$t1,#-1								; reset next and prev indexes
	stw		$t1,TCBNext[$t0]			; on popped task
	stw		$t1,TCBPrev[$t0]
endm


