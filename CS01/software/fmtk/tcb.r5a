; ============================================================================
;        __
;   \\__/ o\    (C) 2020  Robert Finch, Stratford
;    \  __ /    All rights reserved.
;     \/_//     robfinch<remove>@finitron.ca
;       ||
;  
;
; This source file is free software: you can redistribute it and/or modify 
; it under the terms of the GNU Lesser General Public License as published 
; by the Free Software Foundation, either version 3 of the License, or     
; (at your option) any later version.                                      
;                                                                          
; This source file is distributed in the hope that it will be useful,      
; but WITHOUT ANY WARRANTY; without even the implied warranty of           
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
; GNU General Public License for more details.                             
;                                                                          
; You should have received a copy of the GNU General Public License        
; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
;
; ============================================================================

	code
	align	4
;------------------------------------------------------------------------------
; Insert task into ready queue.
;
; Parameters:
;		$a0 = tid to insert
; Modifies:
;	  $t0,$t1
; Returns:
;		none
;------------------------------------------------------------------------------

InsertIntoReadyQueue:
	sll   $t0,$a0,#2
	ldt   $t0,TidTcbMap[$t0]
	and   $t1,$t0,#TCBPTR_MASK  ; valid pointer?
	bnez  $t1,.badPtr
	ldbu	$t1,TCBStatus[$t0]	; set status to ready
	or		$t1,$t1,#TS_READY
	stb		$t1,TCBStatus[$t0]
	ldb		$t1,TCBPriority[$t0]
	pushq	$a0,$t1
.badPtr:
	ret

;------------------------------------------------------------------------------
; Removal from the ready queue is easy. Just flag the task status as no longer
; ready or running. The next time it appears in a dequeue the code will ignore
; it and pop the next ready task.
;
; Parameters:
;		$a0 = tid to remove
; Modifies:
;		t0,t1
; Returns:
;		none
;------------------------------------------------------------------------------

RemoveFromReadyQueue:
  stt   $a0,$4000
  slt   $t0,$a0,#32
  beqz  $t0,.badTid
	sll   $t0,$a0,#2
	ldt   $t0,TidTcbMap[$t0]
	and   $t1,$t0,#TCBPTR_MASK  ; valid pointer?
	bnez  $t1,.badPtr
	ldb		$t1,TCBStatus[$t0]		; set status no longer ready or running
	and		$t1,$t1,#~(TS_READY|TS_RUNNING)
	stb		$t1,TCBStatus[$t0]
.badTid:
.badPtr:
	ret

;------------------------------------------------------------------------------
; Parameters:
;		$a0 = task id to insert
;		$a1 = timeout value
; Modifies:
;		t0,t1,t2,t3,t4,t5
;------------------------------------------------------------------------------

InsertIntoTimeoutList:
  slt   $t0,$a0,#32
  beqz  $t0,.badTid
	sll   $t5,$a0,#2
	ldt   $t5,TidTcbMap[$t5]
	and   $t1,$t5,#TCBPTR_MASK  ; valid pointer?
	bnez  $t1,.badPtr
	setto	$a0,$a1
	ldbu	$t2,TCBStatus[$t5]		; set status to timing out
	or		$t2,$t2,#TS_TIMEOUT
	stb		$t2,TCBStatus[$t5]
	ldi		$a0,#E_Ok
	ret
.badTid:
.badPtr:
	ldi   $a0,#E_Arg
	ret

;------------------------------------------------------------------------------
; Remove a task from the timeout list.
; Called when a mailbox is freed and a task is waiting at the
; mailbox.
;
; Parameters:
;		$a0 = task id to remove
; Modifies:
;		none
; Returns:
;		none
;------------------------------------------------------------------------------

RemoveFromTimeoutList:
	setto	$a0,$x0
	ret

;------------------------------------------------------------------------------
; Parameters:
;   none
; Returns:
;   $a0 = E_Ok, E_NoMoreTCBs if none available
;		$a1 = task id (pointer to task control block)
;------------------------------------------------------------------------------

AllocTID:
	ldi		$t1,#0
	ldt	  $a1,TID_POOL
.0001:
	and		$t0,$a1,#1
	beqz	$t0,.allocTid
	srl		$a1,$a1,#1
	or		$a1,$a1,#$80000000
	add		$t1,$t1,#1
	and		$t1,$t1,#31
	bnez	$t1,.0001
; here no tcbs available
	ldi		$a0,#E_NoMoreTCBs
	ret
.allocTid:
	mov		$a0,$t1
	or		$a1,$a1,#1
	beqz	$t1,.0003
.0002:
	sll		$a1,$a1,#1
	or		$a1,$a1,#1
	sub		$t1,$t1,#1
	bnez	$t1,.0002
.0003:
	stt		$a1,TID_POOL
	mov		$a1,$a0
	ldi		$a0,#E_Ok
	ret

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

FreeTID:
	ldi		$t0,#1
	sll		$t0,$t0,$a0
	xor		$t0,$t0,#-1
	ldt		$t1,TID_POOL
	and		$t1,$t1,$t0
	stt		$t1,TID_POOL
	ret

;------------------------------------------------------------------------------
; Diagnostics
;------------------------------------------------------------------------------

DumpReadyQueue:
	sub		$sp,$sp,#32
	stt		$ra,[$sp]
	stt		$a0,4[$sp]
	stt		$a2,8[$sp]
	stt		$a3,12[$sp]
	stt		$t1,16[$sp]
	stt		$t2,20[$sp]
	stt		$t3,24[$sp]
	stt		$s1,28[$sp]
  ldi   $a0,#CR
  call  Putch
  ldi   $a0,#LF
  call  Putch
  ; Display PAM
  ldi   $t1,#0        ; $a1 = bit number
.0006:
  ldi   $a0,#32       ; Get PAM bit pair
  mov   $a1,$t1
  ecall
  add   $a0,$a1,#'0'
  call  Putch
  add   $t1,$t1,#1
  slt   $a0,$t1,#MEMSZ
  bnez  $a0,.0006

	ldi		$a0,#msgReadyQueue
	call	PutString
	ldi		$t1,#0
	csrrc	$s1,#$300,#1
.0002:
;	call	SerialPeekCharDirect
;	xor		$v0,$v0,#CTRLC
;	beqz	$v0,.brk
	ldi		$a0,#CR
	call	Putch
	ldi		$a0,#'Q'
	call	Putch
	;srl		$a0,$t1,#1
	mov   $a0,$t1
	call	PutHexNybble
	ldi		$a0,#':'
	call	Putch
	popq  $a2,$t1         ; get number of queue entries
	srl   $t2,$a2,#8
	and   $t2,$t2,#63
	ldi		$a0,#'['
	call	Putch
	mov		$a0,$t2
	call	PutHexByte
	ldi		$a0,#']'
	call	Putch
	ldi		$a0,#' '
	call	Putch
	and   $a2,$a2,#$FF
	pushq $a2,$t1         ; put the entry back on the queue
.0003:
	popq  $a2,$t1
	and   $a3,$a2,#$4000  ; empty queue ?
	bnez  $a3,.nxt        ; if empty get next
	and   $a3,$a2,#$8000
	beqz  $a2,.0005       ; valid entry ? no: get next
	and   $a2,$a2,#$FF
	pushq $a2,$t1         ; put the entry back on the queue
	mov		$a0,$a2
	call	PutHexByte
	ldi		$a0,#' '
	call	Putch
.0005:
	sub   $t2,$t2,#1
	bgtz  $t2,.0003
	bra   .0001
;	sll		$a3,$a3,#LOG_TCBSZ
;	ldw		$a0,TCBNext[$a3]
;	call	PutHexHalf
;	ldi		$a0,#' '
;	call	Putch
;	ldw		$a0,TCBPrev[$a3]
;	call	PutHexHalf
.nxt:
	mov		$a0,$a2
	call	PutHexByte
	ldi		$a0,#' '
	call	Putch
	and   $a2,$a2,#$FF
	pushq $a2,$t1         ; put the entry back on the queue
.0001:
	ldi		$a0,#CR
	call	Putch
;	ldw		$a3,TCBNext[$a3]
;	bne		$a2,$a3,.0001
	add		$t1,$t1,#1
	slt		$t2,$t1,#8
	bnez	$t2,.0002
.brk:
	ldi		$a0,#msgTaskInfo
	call	PutString
  ldi   $t0,#0
.0004:
  ldi   $t2,#1
  sll   $t2,$t2,$t0
  ldt   $a0,TID_POOL
  and   $t2,$t2,$a0
  beqz  $t2,.nxtT
  sll   $t0,$t0,#2
  ldt   $a0,TidTcbMap[$t0]
  mov   $t2,$a0
  srl   $t0,$t0,#2
  call  PutHexWord
  ldi   $a0,' '
  call  Putch
  ldbu  $a0,TCBtid[$t2]
  call  PutHexByte
  ldi   $a0,' '
  call  Putch
  ldbu  $a0,TCBPriority[$t2]
  call  PutHexByte
  ldi   $a0,' '
  call  Putch
  ldbu  $a0,TCBStatus[$t2]
  call  PutHexByte
  ldi   $a0,' '
  call  Putch
  ldt   $a0,TCBTimeout[$t2]
  call  PutHexWord
  ldi   $a0,' '
  call  Putch
  ldt   $a0,TCBxSP[$t2]
  call  PutHexWord
	ldi		$a0,#CR
	call	Putch
.nxtT:
  add   $t0,$t0,#1
  slt   $t1,$t0,#32
  bnez  $t1,.0004
	csrrw	$x0,#$300,$s1
	ldt		$ra,[$sp]
	ldt		$a0,4[$sp]
	ldt		$a2,8[$sp]
	ldt		$a3,12[$sp]
	ldt		$t1,16[$sp]
	ldt		$t2,20[$sp]
	ldt		$t3,24[$sp]
	ldt		$s1,28[$sp]
	add		$sp,$sp,#32
	ret

DumpTimeoutList:
	sub		$sp,$sp,#32
	stt		$ra,[$sp]
	stt		$a0,4[$sp]
	stt		$a2,8[$sp]
	stt		$a3,12[$sp]
	stt		$t1,16[$sp]
	stt		$t2,20[$sp]
	stt		$t3,24[$sp]
	stt		$s1,28[$sp]
	ldi		$a0,#msgTimeoutList
	call	PutString
	ldi		$t1,#0
	csrrc	$s1,#$300,#1
	ldi		$a3,#0
.0002:
	call	SerialPeekCharDirect
	xor		$a0,$a0,#CTRLC
	beqz	$a0,.brk
	ldi		$a0,#CR
	call	Putch
;	ldw		$a2,TimeoutList
;	bltz	$a2,.brk
;	mov		$a3,$a2
;.0001:
	mov		$a0,$a3
	call	PutHexHalf
	ldi		$a0,#'-'
	call	Putch
	getto	$a0,$t1
;	sll		$a3,$a3,#LOG_TCBSZ
;	ldt		$a0,TCBTimeout[$a3]
	call	PutHexWord
;	ldi		$a0,#CR
;	call	Putch
	add		$a3,$a3,#1
	and		$a3,$a3,#15
	bgt		$a3,$x0,.0002
;	ldw		$a3,TCBNext[$a3]
;	bge		$a3,$x0,.0001
.brk:
	csrrw	$x0,#$300,$s1
	ldt		$ra,[$sp]
	ldt		$a0,4[$sp]
	ldt		$a2,8[$sp]
	ldt		$a3,12[$sp]
	ldt		$t1,16[$sp]
	ldt		$t2,20[$sp]
	ldt		$t3,24[$sp]
	ldt		$s1,28[$sp]
	add		$sp,$sp,#32
	ret

msgReadyQueue:
	db	CR,"Ready Queue",CR
	db	"Que: Tid List",CR
	db	"-------------",CR,0
msgTaskInfo:
  db  CR,"Task Info",CR
  db  "TCB Ptr  Tid Pr St Timeout    SP",CR
  db  0
msgTimeoutList:
	db	CR,"Timeout List",CR
	db	" Tid - Timeout",CR
	db	"--------------",CR,0

	align 4