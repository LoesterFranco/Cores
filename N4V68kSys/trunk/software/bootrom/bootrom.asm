; N4V68kSys bootrom - (C) 2017 Robert Finch, Waterloo
;
; This file is part of N4V68kSys
;
; how to build:
; 1. assemble using "asm68 bootrom.asm /G00 /olyebvm"
; 2. copy bootrom.vh to the correct directory if not already there
;
;------------------------------------------------------------------------------
;
; system memory map
;
;
; 00000000 +----------------+
;          | startup sp,pc  | 8 B
; 00000008 +----------------+
;          |                |
;          :  dram memory   : 512 MB
;          |                |
; 20000000 +----------------+
;          |                |
;          :     unused     :
;          |                |
; FF800000 +----------------+
;          |                |
;          : display buffer : 1.5 M
;          |                |
; FF980000 +----------------+
;          |                |
;          :     unused     :
;          |                |
; FFD00000 +----------------+
;          |                |
;          :    I/O area    : 1.0 M
;          |                |
; FFE00000 +----------------+
;          |   VDG regs     |
; FFE01000 +----------------+
;          |                |
;          :     unused     :
;          |                |
; FFFF0000 +----------------+
;          |                |
;          :    boot rom    :
;          |                |
; FFFFFFFF +----------------+
;
VDGBUF		EQU	0xFF800000
VDGREG		EQU	0xFFE00000
VirtScreen	EQU	0x1FFF0000
leds		EQU	0xFFDC0600
rand		EQU	0xFFDC0C00

	org		0xFFFF0000

;------------------------------------------------------------------------------

	dc.l	0x00010000	; initial SSP
	dc.l	Start		; initial PC
	
;------------------------------------------------------------------------------
fpga_version:
	dc.b	"AA000000"	; FPGA core version - 8 ASCII characters

;------------------------------------------------------------------------------
	Start:
;------------------------------------------------------------------------------
	move.w	#0xA1A1,leds		; diagnostics

	; SIM croaked because the upper half of D1 was undefined. This caused
	; problems with a dbra instruction. So the contents of all the registers
	; are defined at startup. This is only needed for SIM.
	moveq	#0,D0
	moveq	#0,D1				; for SIM
	moveq	#0,D2
	moveq	#0,D3
	moveq	#0,D4
	moveq	#0,D5
	moveq	#0,D6
	moveq	#0,D7
	clr.l	A0
	clr.l	A1
	clr.l	A2
	clr.l	A3
	clr.l	A4
	clr.l	A5
	clr.l	A6
	move.l	A7,usp

	lea	0xFFDC0000,A6	; I/O base

	; Initialize random number generator

	clr.w	0x0C06(a6)				; select stream #0
	move.l	#0x88888888,0x0C08(a6)	; set initial m_z
	move.l	#0x01234567,0x0C0C(a6)	; set initial m_w
	
	; clear screen	
	move.l	#VDGBUF,A0
	move.l	#0b011011111,D0		; light blue
	move.l	#640*512,D1
clrscr_loop1:
	move.l	0x0C00(a6),d0			; get a random number
	clr.w	0x0C04(a6)				; generate next number
	move.w	d0,(a0)+				; store it to the screen
	sub.l	#1,d1
	bne		clrscr_loop1

	move.w	#0xA2A2,leds		; diagnostics

	; copy font to VDG ram

	lea		font8,a0
	move.l	#8*512,d1			; 512 chars * 8 bytes per char
	move.l	#0xFF970000,a1		; font table address
	move.l	#VDGBUF,a2
	moveq	#0,d0
cpyfnt:
	move.b	(a0)+,d0			; get a byte
	move.w	d0,(a1)+			; store in font table
	dbra	d1,cpyfnt
	move.w	#0xA3A3,leds		; diagnostics

	; Write startup message to screen

	lea		msg_start,a0
	move.l	#VirtScreen,a2
	move.l	#VDGREG,a1
	moveq	#0,d1					; xpos
	moveq	#0,d2					; ypos
j3:									; wait for character que to empty
	move.w	0x42A(a1),d0			; read character queue index into d0
	cmp.w	#28,d0					; allow up 28 entries to be in progress
	bhs		j3						; branch if too many chars queued
	move.b	(a0)+,d0				; get character from string into d0
	beq		j4						; end of string ?
	ext.b	d0						; zero out high order bits
	move.b	d0,(a2)+				; copy to virtual screen
	move.w	d0,0x420(a1)			; set char code
	move.w	#0b111111111,0x422(a1)	; set fg color
	move.w	#0b000000011,0x424(a1)	; set bk color
	move.w	d1,0x426(a1)			; set x pos
	move.w	d2,0x428(a1)			; set y pos
	move.w	#0,0x42E(a1)			; pulse character queue write signal
	add.w	#8,d1					; increment xpos
	bra		j3
j4:
	move.w	#0xA4A4,leds		; diagnostics
	lea		j1,a3
	bra		ramtest
j1:	bra		j1

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
;
DisplayHexNumber:
		move.w	#0xA6A6,leds		; diagnostics
		move.l	#VDGREG,a6
		move.w	#7,d2		; number-1 of digits to display
disphnum1:
		move.b	d1,d0		; get digit into d0.b
		andi.w	#0x0f,d0
		cmpi.w	#0x09,d0
		bls.s	disphnum2
		addi.w	#0x7,d0
disphnum2:
		addi.w	#0x30,d0	; convert to display char
		move.w	d2,d3		; char count into d3
		asl.w	#3,d3		; scale * 8
disphnum3:
		move.w	0x42A(a6),d4			; read character queue index into d4
		cmp.w	#28,d4					; allow up 28 entries to be in progress
		bhs.s	disphnum3				; branch if too many chars queued
		ext.b	d0						; zero out high order bits
		move.w	d0,0x420(a6)			; set char code
		move.w	#0b111111111,0x422(a6)	; set fg color
		move.w	#0b000000011,0x424(a6)	; set bk color
		move.w	d3,0x426(a6)			; set x pos
		move.w	#8,0x428(a6)			; set y pos
		move.w	#0,0x42E(a6)			; pulse character queue write signal
		ror.l	#4,d1					; rot to next digit
		dbeq	d2,disphnum1
		jmp		(a5)

;===============================================================================
;    Perform ram test. (Uses checkerboard testing).
; 
;    Return address must be stored in a3 since the stack cannot be used (it
; would get overwritten in test). Note this routine uses no ram at all.
;===============================================================================
ramtest:
		move.w	#0xA5A5,leds		; diagnostics
        movea.l #8,a0
        move.l #0xaaaa5555,d0
;-----------------------------------------------------------
;   Write checkerboard pattern to ram then read it back to
; find the highest usable ram address (maybe). This address
; must be lower than the start of the rom (0xe00000).
;-----------------------------------------------------------
ramtest1:
        move.l 	d0,(a0)+
        move.l	a0,d1
        tst.w	d1
        bne.s	rmtst1
        lea		rmtst1,a5
        bra		DisplayHexNumber
rmtst1:
		move.w	#0xA9A9,leds		; diagnostics
        cmpa.l 	#0x1FFFFFFC,a0
        bne.s 	ramtest1
;------------------------------------------------------
;   Save maximum useable address for later comparison.
;------------------------------------------------------
ramtest6:
		move.w	#0xA7A7,leds		; diagnostics
        movea.l a0,a2
        movea.l #8,a0
;--------------------------------------------
;   Read back checkerboard pattern from ram.
;--------------------------------------------
ramtest2:
        move.l  (a0)+,d0
        cmpa.l	a0,a2
        beq.s	ramtest3
        move.l	a0,d1
        tst.w	d1
        bne.s	rmtst2
        lea		rmtst2,a5
        bra		DisplayHexNumber
rmtst2:
        cmpi.l 	#0xaaaa5555,d0
        beq.s 	ramtest2
        bne.s 	ramtest7
;---------------------------------------------------
;   The following section does the same test except
; with the checkerboard order switched around.
;---------------------------------------------------
ramtest3:                
		move.w	#0xA8A8,leds		; diagnostics
        movea.l #8,a0
        move.l 	#0x5555aaaa,d0
ramtest4:
        move.l 	d0,(a0)+
        move.l 	a0,d1
        tst.w	d1
        bne.s   rmtst3
        lea		rmtst3,a5
        bra		DisplayHexNumber
rmtst3:
        cmpa.l 	#0x1FFFFFFC,a0
        bne.s 	ramtest4
ramtest8:
        movea.l a0,a2
        movea.l #8,a0
ramtest5:
        move.l 	(a0)+,d0
        cmpa.l	a0,a2
        beq.s	rmtst5
        move.l 	a0,d1
        tst.w	d1
        bne.s	rmtst4
        lea		tmtst4,a5
        bra		DisplayHexNumber
rmtst4:
        cmpi.l 	#0x5555aaaa,d0
        beq.s 	ramtest5
        bne.s 	ramtest7
;---------------------------------------------------
;   Save last ram address in end of memory pointer.
;---------------------------------------------------
rmtst5:
        move.l a0,memend
;-----------------------------------
;   Create very first memory block.
;-----------------------------------
        suba.l 	#12,a0
        move.l 	a0,0x0404
        move.l 	#0x46524545,0x0400
        move.l 	#0x408,0x408			; point back-link to self
        jmp 	(a3)
;----------------------------------
; Error in ram - go no farther.
;----------------------------------
ramtest7:
		jmp 	(a3)
        bra.s 	ramtest7


msg_start:
	dc.b	"N4V 68k System Starting",0

;------------------------------------------------------------------------------
font8:
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 0x00
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 0x04
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 0x08
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 0x0C
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 0x10
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 0x14
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 0x18
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 0x1C
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; 
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	; SPACE
	dc.b	0x18,0x18,0x18,0x18,0x18,0x00,0x18,0x00	; !
	dc.b	0x6C,0x6C,0x00,0x00,0x00,0x00,0x00,0x00	; "
	dc.b	0x6C,0x6C,0xFE,0x6C,0xFE,0x6C,0x6C,0x00	; #
	dc.b	0x18,0x3E,0x60,0x3C,0x06,0x7C,0x18,0x00	; 0x
	dc.b	0x00,0x66,0xAC,0xD8,0x36,0x6A,0xCC,0x00	; %
	dc.b	0x38,0x6C,0x68,0x76,0xDC,0xCE,0x7B,0x00	; &
	dc.b	0x18,0x18,0x30,0x00,0x00,0x00,0x00,0x00	; '
	dc.b	0x0C,0x18,0x30,0x30,0x30,0x18,0x0C,0x00	; (
	dc.b	0x30,0x18,0x0C,0x0C,0x0C,0x18,0x30,0x00	; )
	dc.b	0x00,0x66,0x3C,0xFF,0x3C,0x66,0x00,0x00	; *
	dc.b	0x00,0x18,0x18,0x7E,0x18,0x18,0x00,0x00	; +
	dc.b	0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x30	; ,
	dc.b	0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00	; -
	dc.b	0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00	; .
	dc.b	0x03,0x06,0x0C,0x18,0x30,0x60,0xC0,0x00	; /
	dc.b	0x3C,0x66,0x6E,0x7E,0x76,0x66,0x3C,0x00	; 0
	dc.b	0x18,0x38,0x78,0x18,0x18,0x18,0x18,0x00	; 1
	dc.b	0x3C,0x66,0x06,0x0C,0x18,0x30,0x7E,0x00	; 2
	dc.b	0x3C,0x66,0x06,0x1C,0x06,0x66,0x3C,0x00	; 3
	dc.b	0x1C,0x3C,0x6C,0xCC,0xFE,0x0C,0x0C,0x00	; 4
	dc.b	0x7E,0x60,0x7C,0x06,0x06,0x66,0x3C,0x00	; 5
	dc.b	0x1C,0x30,0x60,0x7C,0x66,0x66,0x3C,0x00	; 6
	dc.b	0x7E,0x06,0x06,0x0C,0x18,0x18,0x18,0x00	; 7
	dc.b	0x3C,0x66,0x66,0x3C,0x66,0x66,0x3C,0x00	; 8
	dc.b	0x3C,0x66,0x66,0x3E,0x06,0x0C,0x38,0x00	; 9
	dc.b	0x00,0x18,0x18,0x00,0x00,0x18,0x18,0x00	; :
	dc.b	0x00,0x18,0x18,0x00,0x00,0x18,0x18,0x30	; ;
	dc.b	0x00,0x06,0x18,0x60,0x18,0x06,0x00,0x00	; <
	dc.b	0x00,0x00,0x7E,0x00,0x7E,0x00,0x00,0x00	; =
	dc.b	0x00,0x60,0x18,0x06,0x18,0x60,0x00,0x00	; >
	dc.b	0x3C,0x66,0x06,0x0C,0x18,0x00,0x18,0x00	; ?
	dc.b	0x7C,0xC6,0xDE,0xD6,0xDE,0xC0,0x78,0x00	; @
	dc.b	0x3C,0x66,0x66,0x7E,0x66,0x66,0x66,0x00	; A
	dc.b	0x7C,0x66,0x66,0x7C,0x66,0x66,0x7C,0x00	; B
	dc.b	0x1E,0x30,0x60,0x60,0x60,0x30,0x1E,0x00	; C
	dc.b	0x78,0x6C,0x66,0x66,0x66,0x6C,0x78,0x00	; D
	dc.b	0x7E,0x60,0x60,0x78,0x60,0x60,0x7E,0x00	; E
	dc.b	0x7E,0x60,0x60,0x78,0x60,0x60,0x60,0x00	; F
	dc.b	0x3C,0x66,0x60,0x6E,0x66,0x66,0x3E,0x00	; G
	dc.b	0x66,0x66,0x66,0x7E,0x66,0x66,0x66,0x00	; H
	dc.b	0x3C,0x18,0x18,0x18,0x18,0x18,0x3C,0x00	; I
	dc.b	0x06,0x06,0x06,0x06,0x06,0x66,0x3C,0x00	; J
	dc.b	0xC6,0xCC,0xD8,0xF0,0xD8,0xCC,0xC6,0x00	; K
	dc.b	0x60,0x60,0x60,0x60,0x60,0x60,0x7E,0x00	; L
	dc.b	0xC6,0xEE,0xFE,0xD6,0xC6,0xC6,0xC6,0x00	; M
	dc.b	0xC6,0xE6,0xF6,0xDE,0xCE,0xC6,0xC6,0x00	; N
	dc.b	0x3C,0x66,0x66,0x66,0x66,0x66,0x3C,0x00	; O
	dc.b	0x7C,0x66,0x66,0x7C,0x60,0x60,0x60,0x00	; P
	dc.b	0x78,0xCC,0xCC,0xCC,0xCC,0xDC,0x7E,0x00	; Q
	dc.b	0x7C,0x66,0x66,0x7C,0x6C,0x66,0x66,0x00	; R
	dc.b	0x3C,0x66,0x70,0x3C,0x0E,0x66,0x3C,0x00	; S
	dc.b	0x7E,0x18,0x18,0x18,0x18,0x18,0x18,0x00	; T
	dc.b	0x66,0x66,0x66,0x66,0x66,0x66,0x3C,0x00	; U
	dc.b	0x66,0x66,0x66,0x66,0x3C,0x3C,0x18,0x00	; V
	dc.b	0xC6,0xC6,0xC6,0xD6,0xFE,0xEE,0xC6,0x00	; W
	dc.b	0xC3,0x66,0x3C,0x18,0x3C,0x66,0xC3,0x00	; X
	dc.b	0xC3,0x66,0x3C,0x18,0x18,0x18,0x18,0x00	; Y
	dc.b	0xFE,0x0C,0x18,0x30,0x60,0xC0,0xFE,0x00	; Z
	dc.b	0x3C,0x30,0x30,0x30,0x30,0x30,0x3C,0x00	; [
	dc.b	0xC0,0x60,0x30,0x18,0x0C,0x06,0x03,0x00	; \
	dc.b	0x3C,0x0C,0x0C,0x0C,0x0C,0x0C,0x3C,0x00	; ]
	dc.b	0x10,0x38,0x6C,0xC6,0x00,0x00,0x00,0x00	; ^
	dc.b	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE	; _
	dc.b	0x18,0x18,0x0C,0x00,0x00,0x00,0x00,0x00	; `
	dc.b	0x00,0x00,0x3C,0x06,0x3E,0x66,0x3E,0x00	; a
	dc.b	0x60,0x60,0x7C,0x66,0x66,0x66,0x7C,0x00	; b
	dc.b	0x00,0x00,0x3C,0x60,0x60,0x60,0x3C,0x00	; c
	dc.b	0x06,0x06,0x3E,0x66,0x66,0x66,0x3E,0x00	; d
	dc.b	0x00,0x00,0x3C,0x66,0x7E,0x60,0x3C,0x00	; e
	dc.b	0x1C,0x30,0x7C,0x30,0x30,0x30,0x30,0x00	; f
	dc.b	0x00,0x00,0x3E,0x66,0x66,0x3E,0x06,0x3C	; g
	dc.b	0x60,0x60,0x7C,0x66,0x66,0x66,0x66,0x00	; h
	dc.b	0x18,0x00,0x18,0x18,0x18,0x18,0x0C,0x00	; i
	dc.b	0x0C,0x00,0x0C,0x0C,0x0C,0x0C,0x0C,0x78	; j
	dc.b	0x60,0x60,0x66,0x6C,0x78,0x6C,0x66,0x00	; k
	dc.b	0x18,0x18,0x18,0x18,0x18,0x18,0x0C,0x00	; l
	dc.b	0x00,0x00,0xEC,0xFE,0xD6,0xC6,0xC6,0x00	; m
	dc.b	0x00,0x00,0x7C,0x66,0x66,0x66,0x66,0x00	; n
	dc.b	0x00,0x00,0x3C,0x66,0x66,0x66,0x3C,0x00	; o
	dc.b	0x00,0x00,0x7C,0x66,0x66,0x7C,0x60,0x60	; p
	dc.b	0x00,0x00,0x3E,0x66,0x66,0x3E,0x06,0x06	; q
	dc.b	0x00,0x00,0x7C,0x66,0x60,0x60,0x60,0x00	; r
	dc.b	0x00,0x00,0x3C,0x60,0x3C,0x06,0x7C,0x00	; s
	dc.b	0x30,0x30,0x7C,0x30,0x30,0x30,0x1C,0x00	; t
	dc.b	0x00,0x00,0x66,0x66,0x66,0x66,0x3E,0x00	; u
	dc.b	0x00,0x00,0x66,0x66,0x66,0x3C,0x18,0x00	; v
	dc.b	0x00,0x00,0xC6,0xC6,0xD6,0xFE,0x6C,0x00	; w
	dc.b	0x00,0x00,0xC6,0x6C,0x38,0x6C,0xC6,0x00	; x
	dc.b	0x00,0x00,0x66,0x66,0x66,0x3C,0x18,0x30	; y
	dc.b	0x00,0x00,0x7E,0x0C,0x18,0x30,0x7E,0x00	; z
	dc.b	0x0E,0x18,0x18,0x70,0x18,0x18,0x0E,0x00	; {
	dc.b	0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00	; |
	dc.b	0x70,0x18,0x18,0x0E,0x18,0x18,0x70,0x00	; }
	dc.b	0x72,0x9C,0x00,0x00,0x00,0x00,0x00,0x00	; ~
	dc.b	0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0x00	; 
