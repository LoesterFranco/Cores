Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 1
bootrom.asm

                                             ; N4V68kSys bootrom - (C) 2017 Robert Finch, Waterloo
                                             ;
                                             ; This file is part of N4V68kSys
                                             ;
                                             ; how to build:
                                             ; 1. assemble using "asm68 bootrom.asm /G00 /olyebvm"
                                             ; 2. copy bootrom.vh to the correct directory if not already there
                                             ;
                                             ;------------------------------------------------------------------------------
                                             ;
                                             ; system memory map
                                             ;
                                             ;
                                             ; 00000000 +----------------+
                                             ;          | startup sp,pc  | 8 B
                                             ; 00000008 +----------------+
                                             ;          |                |
                                             ;          |                |
                                             ;          |                |
                                             ;          :  dram memory   : 512 MB
                                             ;          |                |
                                             ;          |                |
                                             ;          |                |
                                             ; 20000000 +----------------+
                                             ;          |                |
                                             ;          :     unused     :
                                             ;          |                |
                                             ; FF800000 +----------------+
                                             ;          |                |
                                             ;          : display buffer : 1.0 MB
                                             ;          |                |
                                             ; FF900000 +----------------+
                                             ;          |                |
                                             ;          :     unused     :
                                             ;          |                |
                                             ; FFD00000 +----------------+
                                             ;          |                |
                                             ;          :    I/O area    : 1.0 M
                                             ;          |                |
                                             ; FFE00000 +----------------+
                                             ;          |   VDG regs     |
                                             ; FFE01000 +----------------+
                                             ;          |                |
                                             ;          :     unused     :
                                             ;          |                |
                                             ; FFFC0000 +----------------+
                                             ;          |                |
                                             ;          :    boot rom    :
                                             ;          |                |
                                             ; FFFFFFFF +----------------+
                                             ;
                                             ;
                                             RGBMASK		EQU		%0111111111111111
                                             RED			EQU		%0111110000000000
                                             DARK_BLUE	EQU		%0000000000001111
                                             BLACK		EQU		%0000000000000000
                                             WHITE		EQU		%0111111111111111
                                             
                                             CTRLC	EQU		$03
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 2
bootrom.asm
                                             CTRLH	EQU		$08
                                             CTRLX	EQU		$18
                                             LF		EQU		$0A
                                             CR		EQU		$0D
                                             
                                             SC_F12  EQU    $07
                                             SC_C    EQU    $21
                                             SC_T    EQU    $2C
                                             SC_Z    EQU    $1A
                                             SC_KEYUP	EQU		$F0
                                             SC_EXTEND   EQU		$E0
                                             SC_CTRL		EQU		$14
                                             SC_RSHIFT	EQU		$59
                                             SC_NUMLOCK	EQU		$77
                                             SC_SCROLLLOCK	EQU	$7E
                                             SC_CAPSLOCK		EQU	$58
                                             SC_ALT		EQU		$11
                                             SC_LSHIFT	EQU		$12
                                             SC_DEL		EQU		$71		; extend
                                             SC_LCTRL	EQU		$58
                                             SC_TAB      EQU		$0D
                                             
                                             TEXTCOLS	EQU	50
                                             TEXTROWS	EQU	37
                                             BMP_WIDTH	EQU	400
                                             BMP_HEIGHT	EQU	300
                                             
                                             VDGBUF		EQU	$FF800000
                                             VDGREG		EQU	$FFE00000
                                             VDG_CURX	EQU	$0440
                                             VDG_CURY	EQU	$0442
                                             VDG_CURSZ	EQU	$0444
                                             VDG_CURFLSH	EQU	$0446
                                             VDG_CUR0X	EQU	$0204
                                             VDG_CUR0Y	EQU	$0206
                                             VDG_CURCLR0	EQU	$0448
                                             VDG_CURCLR1	EQU	$044A
                                             VDG_CURCLR2	EQU	$044C
                                             VDG_CURCLR3	EQU	$044E
                                             VDG_CURIMG	EQU	$0460
                                             I2C			EQU	$FFDC0E00
                                             I2C2		EQU	$FFDC0E10
                                             VirtScreen	EQU	$1FFF0000
                                             KEYBD		EQU	$FFDC0000
                                             leds		EQU	$FFDC0600
                                             rand		EQU	$FFDC0C00
                                             
                                             fgcolor		EQU	$10002
                                             bkcolor		EQU	$10004
                                             fntsz		EQU	$10006
                                             memend		EQU	$10008
                                             CursorRow	EQU	$10418
                                             CursorCol	EQU $10419
                                             TextRows	EQU	$1041A
                                             TextCols	EQU	$1041B
                                             TextCurpos	EQU	$1041C
                                             TextScr		EQU	$10420
                                             KeybdEcho		EQU	$10424
                                             KeybdWaitFlag	EQU	$10425
                                             _KeyState1		EQU	$10426
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 3
bootrom.asm
                                             _KeyState2		EQU	$10427
                                             KeybdLEDs		EQU	$10428
                                             gfx_control_reg_mem		EQU	$1042C
                                             milliseconds	EQU	$10430
                                             systick			EQU	$10434
                                             S19StartAddress	EQU	$10438
                                             
                                             ball_dx			EQU	$10500
                                             ball_dy			EQU	$10600
                                             
                                             GFX_CONTROL			EQU		$00
                                             GFX_STATUS			EQU		$04
                                             GFX_TARGET_BASE		EQU		$10
                                             GFX_TARGET_SIZE_X	EQU		$14
                                             GFX_TARGET_SIZE_Y	EQU		$18
                                             GFX_DEST_PIXEL_X	EQU		$38
                                             GFX_DEST_PIXEL_Y	EQU		$3C
                                             GFX_DEST_PIXEL_Z	EQU		$40
                                             GFX_COLOR0			EQU		$84
                                             
                                             GFX_ACTIVE_POINT0	EQU		0
                                             GFX_ACTIVE_POINT1	EQU		$10000
                                             GFX_LINE			EQU		$200
                                             
                                             reg_d0			EQU	$10500
                                             reg_d1			EQU	$10504
                                             reg_d2			EQU	$10508
                                             reg_d3			EQU	$1050C
                                             reg_d4			EQU $10510
                                             reg_d5			EQU $10514
                                             reg_d6			EQU	$10518
                                             reg_d7			EQU	$1051C
                                             reg_a0			EQU $10520
                                             reg_a1			EQU	$10524
                                             reg_a2			EQU	$10528
                                             reg_a3			EQU $1052C
                                             reg_a4			EQU $10530
                                             reg_a5			EQU $10534
                                             reg_a6			EQU $10538
                                             reg_ssp			EQU	$1053C
                                             reg_usp			EQU	$10540
                                             reg_pc			EQU $10544
                                             reg_sr			EQU	$10548
                                             
                                             RTCBuf			EQU	$10600
                                             RTFBufEnd		EQU	$10660
                                             CmdBuf			EQU	$10800
                                             CmdBufEnd		EQU	$10850
                                             
                                             
                                             	code
                                             	org		$FFFC0000
    172 FFFC0000 600E                        	bra.s	Start
    173 FFFC0002 FF FF                       	align	4
                                             
                                             ;------------------------------------------------------------------------------
                                             
                                             ;	dc.l	$FF401000	; initial SSP
    178 FFFC0004 FFFC0010                    	dc.l	Start		; initial PC
                                             	
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 4
bootrom.asm
                                             ;------------------------------------------------------------------------------
    181 FFFC0008                             fpga_version:
    182 FFFC0008 41 41 30 30 30 30 30 30     	dc.b	"AA000000"	; FPGA core version - 8 ASCII characters
                                             
                                             
                                             ;------------------------------------------------------------------------------
    186 FFFC0010                             	Start:
                                             ;------------------------------------------------------------------------------
    188 FFFC0010 33FC A1A1 FFDC 0600         		move.w	#$A1A1,leds		; diagnostics
    189 FFFC0018 2E7C FF40 1000              		move.l	#$FF401000,sp	; set stack pointer
    190 FFFC001E 003C 0080                   		ori.b	#$80,ccr		; select big endian mode for lword data access
                                             
                                             		; SIM croaked because the upper half of D1 was undefined. This caused
                                             		; problems with a dbra instruction. So the contents of all the registers
                                             		; are defined at startup. This is only needed for SIM.
    195 FFFC0022 7000                        		moveq	#0,D0
    196 FFFC0024 7200                        		moveq	#0,D1				; for SIM
    197 FFFC0026 7400                        		moveq	#0,D2
    198 FFFC0028 7600                        		moveq	#0,D3
    199 FFFC002A 7800                        		moveq	#0,D4
    200 FFFC002C 7A00                        		moveq	#0,D5
    201 FFFC002E 7C00                        		moveq	#0,D6
    202 FFFC0030 7E00                        		moveq	#0,D7
    203 FFFC0032 4288                        		clr.l	A0
    204 FFFC0034 4289                        		clr.l	A1
    205 FFFC0036 428A                        		clr.l	A2
    206 FFFC0038 428B                        		clr.l	A3
    207 FFFC003A 428C                        		clr.l	A4
    208 FFFC003C 428D                        		clr.l	A5
    209 FFFC003E 428E                        		clr.l	A6
                                             ;		move.l	A7,usp
                                             
                                             		; setup vector table
                                             		;
    214 FFFC0040 023C 007F                   		andi.b	#$7F,ccr
                                             ;		lea		BusError,a0
                                             ;		move.l	a0,0x008		; set bus error vector
    217 FFFC0044 41F9 FFFC 013C              		lea		IllegalInstruction,a0
    218 FFFC004A 21C8 0010                   		move.l	a0,0x010
    219 FFFC004E 41F9 FFFC 0122              		lea		Pulse1000,a0
    220 FFFC0054 21C8 0078                   		move.l	a0,0x078		; set autovector 6
                                             ;		lea		KeybdNMI,a0
                                             ;		move.l	a0,0x07C		; set autovector 7
    223 FFFC0058 41F9 FFFC 015E              		lea		TRAP15,a0
    224 FFFC005E 21C8 00BC                   		move.l	a0,188			; set trap 15 vector
    225 FFFC0062 003C 0080                   		ori.b	#$80,ccr
                                             
    227 FFFC0066 6100 0B8A                   		bsr		_KeybdInit
                                             ;		bsr		mmu_init
    229 FFFC006A 6100 1BF2                   		bsr		i2c_setup
                                             ;		bsr		rtc_read
    231 FFFC006E 33FC A2A2 FFDC 0600         		move.w	#$A2A2,leds		; diagnostics
                                             
    233 FFFC0076 4239 0001 0419              		clr.b	CursorCol
    234 FFFC007C 4239 0001 0418              		clr.b	CursorRow
    235 FFFC0082 4279 0001 041C              		clr.w	TextCurpos
    236 FFFC0088 23FC 0002 0000 0001 0420    		move.l	#$00020000,TextScr		; set virtual screen location
                                             
                                             
    239 FFFC0092 4DF9 FFDC 0000              		lea	$FFDC0000,A6	; I/O base
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 5
bootrom.asm
                                             
                                             		; Initialize random number generator
                                             
    243 FFFC0098 426E 0C06                   		clr.w	$0C06(a6)				; select stream #0
    244 FFFC009C 2D7C 8888 8888 0C08         		move.l	#$88888888,$0C08(a6)	; set initial m_z
    245 FFFC00A4 2D7C 0123 4567 0C0C         		move.l	#$01234567,$0C0C(a6)	; set initial m_w
                                             
    247 FFFC00AC 6100 0460                   		bsr		Set400x300
                                             ;		bsr		Set800x600
    249 FFFC00B0 6100 0598                   		bsr		ColorBandMemory
    250 FFFC00B4 6100 052C                   		bsr		BootSetZBuffer
    251 FFFC00B8 6100 0748                   		bsr		InitCursorColorPalette
                                             ;		bsr		SetCursorColor
                                             ;		bsr		SetCursorImage
    254 FFFC00BC 6100 077A                   		bsr		SetCursorImage64
    255 FFFC00C0 6100 06A4                   		bsr		EnableCursor
                                             
    257 FFFC00C4 6100 0546                   		bsr		BootClearScreen		
    258 FFFC00C8 33FC A2A2 FFDC 0600         		move.w	#$A2A2,leds			; diagnostics
                                             		
                                             		; turn on audio test mode
    261 FFFC00D0 4DF9 FFDC 0000              		lea		$FFDC0000,A6		; set I/O base
    262 FFFC00D6 3D7C FFFF 0700              		move.w	#$FFFF,$0700(a6)	; turn on audio clocks
    263 FFFC00DC 2A7C FFE0 0000              		movea.l	#VDGREG,a5
    264 FFFC00E2 3B7C 4000 0650              		move.w	#%0100000000000000,$650(a5)
                                             
                                             ;		bsr		DrawLines
                                             ;		bsr		TestBlitter
                                             
    269 FFFC00E8 6100 0598                   		bsr		BootCopyFont
    270 FFFC00EC 33FC A3A3 FFDC 0600         		move.w	#$A3A3,leds			; diagnostics
                                             
    272 FFFC00F4 33FC 7FFF 0001 0002         		move.w	#WHITE,fgcolor		; set text colors
    273 FFFC00FC 33FC 000F 0001 0004         		move.w	#DARK_BLUE,bkcolor
                                             
                                             		; Write startup message to screen
                                             
    277 FFFC0104 43F9 FFFC 21D2              		lea		msg_start,a1
    278 FFFC010A 6100 032E                   		bsr		DisplayString
    279 FFFC010E 33FC A4A4 FFDC 0600         		move.w	#$A4A4,leds			; diagnostics
                                             
    281 FFFC0116 47F9 FFFC 0120              		lea		j1,a3
    282 FFFC011C 6000 1192                   		bra		DisplayHelp
    283 FFFC0120                             j1:
    284 FFFC0120 60FE                        		bra		j1
                                             
                                             ;------------------------------------------------------------------------------
                                             ; 1000 Hz interrupt
                                             ;------------------------------------------------------------------------------
                                             ;
    290 FFFC0122                             Pulse1000:
    291 FFFC0122 52B9 0001 0430              		add.l	#1,milliseconds
    292 FFFC0128 5279 0001 0434              		add.w	#1,systick
    293 FFFC012E 0279 001F 0001 0434         		and.w	#$1F,systick
    294 FFFC0136 6702                        		beq.s	Pulse31
    295 FFFC0138 4E73                        		rte
    296 FFFC013A                             Pulse31:
    297 FFFC013A 4E73                        		rte
                                             
                                             ;------------------------------------------------------------------------------
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 6
bootrom.asm
                                             ;------------------------------------------------------------------------------
                                             
    302 FFFC013C                             IllegalInstruction:
    303 FFFC013C 43F9 FFFC 014A              		lea		MSG_ILLEGAL_INSN,a1
    304 FFFC0142 4EB9 FFFC 043A              		jsr		DisplayString
    305 FFFC0148 4E73                        		rte
                                             
    307 FFFC014A                             MSG_ILLEGAL_INSN:
    308 FFFC014A 49 6C 6C 65 67 61 6C 20     		dc.b	"Illegal instruction",0
    309 FFFC0152 69 6E 73 74 72 75 63 74     
    310 FFFC015A 69 6F 6E 00                 
                                             
                                             		align	2
                                             
                                             ;------------------------------------------------------------------------------
                                             ; TRAP #15 handler
                                             ;------------------------------------------------------------------------------
                                             ;
    318 FFFC015E                             TRAP15:
    319 FFFC015E 48E7 8080                   		movem.l	d0/a0,-(a7)
    320 FFFC0162 41F9 FFFC 0178              		lea		T15DispatchTable,a0
    321 FFFC0168 E580                        		asl.l	#2,d0
    322 FFFC016A 2070 0000                   		move.l	(a0,d0.w),a0
    323 FFFC016E 4E90                        		jsr		(a0)
    324 FFFC0170 4CDF 0101                   		movem.l	(a7)+,d0/a0
    325 FFFC0174 4E73                        		rte
                                             
    327 FFFC0176 FF FF                       		align	4
    328 FFFC0178                             T15DispatchTable:
    329 FFFC0178 FFFC0218                    dc.l	StubRout
    330 FFFC017C FFFC0218                    dc.l	StubRout
    331 FFFC0180 FFFC0218                    dc.l	StubRout
    332 FFFC0184 FFFC0218                    dc.l	StubRout
    333 FFFC0188 FFFC0218                    dc.l	StubRout
    334 FFFC018C FFFC0C78                    dc.l	GetKey
    335 FFFC0190 FFFC0268                    dc.l	DisplayChar
    336 FFFC0194 FFFC0C66                    dc.l	CheckForKey
    337 FFFC0198 FFFC0218                    dc.l	StubRout
    338 FFFC019C FFFC0218                    dc.l	StubRout
    339 FFFC01A0 FFFC0218                    dc.l	StubRout
    340 FFFC01A4 FFFC0484                    dc.l	Cursor1
    341 FFFC01A8 FFFC021A                    dc.l	SetKeyboardEcho
    342 FFFC01AC FFFC0454                    dc.l	DisplayStringCRLF
    343 FFFC01B0 FFFC043A                    dc.l	DisplayString
    344 FFFC01B4 FFFC0218                    dc.l	StubRout
    345 FFFC01B8 FFFC0218                    dc.l	StubRout
    346 FFFC01BC FFFC0218                    dc.l	StubRout
    347 FFFC01C0 FFFC0218                    dc.l	StubRout
    348 FFFC01C4 FFFC0218                    dc.l	StubRout
    349 FFFC01C8 FFFC0218                    dc.l	StubRout
    350 FFFC01CC FFFC0218                    dc.l	StubRout
    351 FFFC01D0 FFFC0218                    dc.l	StubRout
    352 FFFC01D4 FFFC0218                    dc.l	StubRout
    353 FFFC01D8 FFFC0218                    dc.l	StubRout
    354 FFFC01DC FFFC0218                    dc.l	StubRout
    355 FFFC01E0 FFFC0218                    dc.l	StubRout
    356 FFFC01E4 FFFC0218                    dc.l	StubRout
    357 FFFC01E8 FFFC0218                    dc.l	StubRout
    358 FFFC01EC FFFC0218                    dc.l	StubRout
    359 FFFC01F0 FFFC0218                    dc.l	StubRout
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 7
bootrom.asm
    360 FFFC01F4 FFFC0218                    dc.l	StubRout
    361 FFFC01F8 FFFC0218                    dc.l	StubRout
    362 FFFC01FC FFFC0218                    dc.l	StubRout
    363 FFFC0200 FFFC0218                    dc.l	StubRout
    364 FFFC0204 FFFC0218                    dc.l	StubRout
    365 FFFC0208 FFFC0218                    dc.l	StubRout
    366 FFFC020C FFFC0218                    dc.l	StubRout
    367 FFFC0210 FFFC0218                    dc.l	StubRout
    368 FFFC0214 FFFC0218                    dc.l	StubRout
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Stub routine for unimplemented functionality.
                                             ;------------------------------------------------------------------------------
                                             ;
    374 FFFC0218                             StubRout:
    375 FFFC0218 4E75                        	rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; d1.b 0=echo off, non-zero = echo on
                                             ;------------------------------------------------------------------------------
    380 FFFC021A                             SetKeyboardEcho:
    381 FFFC021A 13C1 0001 0424              	move.b	d1,KeybdEcho
    382 FFFC0220 4E75                        	rts
                                             
                                             
    385 FFFC0222                             CRLF:
    386 FFFC0222 2F01                        		move.l	d1,-(a7)
    387 FFFC0224 123C 000D                   		move.b	#'\r',d1
    388 FFFC0228 6100 003E                   		bsr		DisplayChar
    389 FFFC022C 123C 000A                   		move.b	#'\n',d1
    390 FFFC0230 6100 0036                   		bsr		DisplayChar
    391 FFFC0234 221F                        		move.l	(a7)+,d1
    392 FFFC0236 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Calculate screen memory location from CursorRow,CursorCol.
                                             ; Destroys d0,d2,a0
                                             ;------------------------------------------------------------------------------
                                             ;
    399 FFFC0238                             CalcScreenLoc:
    400 FFFC0238 1039 0001 0418              		move.b	CursorRow,d0		; compute screen location
    401 FFFC023E 0240 007F                   		andi.w	#0x7f,d0
    402 FFFC0242 1439 0001 041B              		move.b	TextCols,d2
    403 FFFC0248 4882                        		ext.w	d2
    404 FFFC024A C0C2                        		mulu.w	d2,d0
    405 FFFC024C 1439 0001 0419              		move.b	CursorCol,d2
    406 FFFC0252 0242 00FF                   		andi.w	#0xff,d2
    407 FFFC0256 D042                        		add.w	d2,d0
    408 FFFC0258 33C0 0001 041C              		move.w	d0,TextCurpos
    409 FFFC025E D0B9 0001 0420              		add.l	TextScr,d0
    410 FFFC0264 2040                        		move.l	d0,a0				; a0 = screen location
    411 FFFC0266 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display a character on the screen
                                             ; d1.b = char to display
                                             ;------------------------------------------------------------------------------
                                             ;
    418 FFFC0268                             DisplayChar:
    419 FFFC0268 48E7 3000                   		movem.l	d2/d3,-(a7)
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 8
bootrom.asm
    420 FFFC026C 0C01 000D                   		cmpi.b	#'\r',d1			; carriage return ?
    421 FFFC0270 660C                        		bne.s	dccr
    422 FFFC0272 4239 0001 0419              		clr.b	CursorCol			; just set cursor column to zero on a CR
    423 FFFC0278 4CDF 000C                   		movem.l	(a7)+,d2/d3
    424 FFFC027C 4E75                        		rts
    425 FFFC027E                             dccr:
    426 FFFC027E 0C01 0091                   		cmpi.b	#0x91,d1			; cursor right ?
    427 FFFC0282 6620                        		bne.s   dcx6
    428 FFFC0284 1439 0001 041B              		move.b	TextCols,d2
    429 FFFC028A 5302                        		sub.b	#1,d2
    430 FFFC028C 9439 0001 0419              		sub.b	CursorCol,d2
    431 FFFC0292 670A                        		beq.s	dcx7
    432 FFFC0294 5239 0001 0419              		addi.b	#1,CursorCol
    433 FFFC029A                             dcx14:
    434 FFFC029A 6100 0502                   		bsr		SyncCursor
    435 FFFC029E                             dcx7:
    436 FFFC029E 4CDF 000C                   		movem.l	(a7)+,d2/d3
    437 FFFC02A2 4E75                        		rts
    438 FFFC02A4                             dcx6:
    439 FFFC02A4 0C01 0090                   		cmpi.b	#0x90,d1			; cursor up ?
    440 FFFC02A8 6612                        		bne.s	dcx8
    441 FFFC02AA 0C39 0000 0001 0418         		cmpi.b	#0,CursorRow
    442 FFFC02B2 67EA                        		beq.s	dcx7
    443 FFFC02B4 5339 0001 0418              		subi.b	#1,CursorRow
    444 FFFC02BA 60DE                        		bra.s	dcx14
    445 FFFC02BC                             dcx8:
    446 FFFC02BC 0C01 0093                   		cmpi.b	#0x93,d1			; cursor left?
    447 FFFC02C0 6612                        		bne.s	dcx9
    448 FFFC02C2 0C39 0000 0001 0419         		cmpi.b	#0,CursorCol
    449 FFFC02CA 67D2                        		beq.s	dcx7
    450 FFFC02CC 5339 0001 0419              		subi.b	#1,CursorCol
    451 FFFC02D2 60C6                        		bra.s	dcx14
    452 FFFC02D4                             dcx9:
    453 FFFC02D4 0C01 0092                   		cmpi.b	#0x92,d1			; cursor down ?
    454 FFFC02D8 6618                        		bne.s	dcx10
    455 FFFC02DA 1439 0001 041A              		move.b	TextRows,d2
    456 FFFC02E0 5302                        		sub.b	#1,d2
    457 FFFC02E2 B439 0001 0418              		cmp.b	CursorRow,d2
    458 FFFC02E8 67B4                        		beq.s	dcx7
    459 FFFC02EA 5239 0001 0418              		addi.b	#1,CursorRow
    460 FFFC02F0 60A8                        		bra.s	dcx14
    461 FFFC02F2                             dcx10:
    462 FFFC02F2 0C01 0094                   		cmpi.b	#0x94,d1			; cursor home ?
    463 FFFC02F6 661A                        		bne.s	dcx11
    464 FFFC02F8 0C39 0000 0001 0419         		cmpi.b	#0,CursorCol
    465 FFFC0300 6708                        		beq.s	dcx12
    466 FFFC0302 4239 0001 0419              		clr.b	CursorCol
    467 FFFC0308 6090                        		bra.s	dcx14
    468 FFFC030A                             dcx12:
    469 FFFC030A 4239 0001 0418              		clr.b	CursorRow
    470 FFFC0310 6088                        		bra.s	dcx14
    471 FFFC0312                             dcx11:
    472 FFFC0312 48E7 E080                   		movem.l	d0/d1/d2/a0,-(a7)
    473 FFFC0316 0C01 0099                   		cmpi.b	#0x99,d1			; delete ?
    474 FFFC031A 6756                        		beq.s	doDelete
    475 FFFC031C 0C01 0008                   		cmpi.b	#CTRLH,d1			; backspace ?
    476 FFFC0320 6740                        		beq.s   doBackspace
    477 FFFC0322 0C01 0018                   		cmpi.b	#CTRLX,d1			; delete line ?
    478 FFFC0326 6700 0096                   		beq.s	doCtrlX
    479 FFFC032A 0C01 000A                   		cmpi.b	#'\n',d1		; linefeed ?
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 9
bootrom.asm
    480 FFFC032E 6720                        		beq.s	dclf
                                             
                                             		; regular char
    483 FFFC0330 6100 FF06                   		bsr		CalcScreenLoc	; a0 = screen location
    484 FFFC0334 1081                        		move.b	d1,(a0)
    485 FFFC0336 1001                        		move.b	d1,d0
    486 FFFC0338 4880                        		ext.w	d0
    487 FFFC033A 6100 03D0                   		bsr		DispChar
    488 FFFC033E 6100 00A4                   		bsr		IncCursorPos
    489 FFFC0342 6100 045A                   		bsr		SyncCursor
    490 FFFC0346 4CDF 0107                   		movem.l	(a7)+,d0/d1/d2/a0
    491 FFFC034A 4CDF 000C                   		movem.l	(a7)+,d2/d3
    492 FFFC034E 4E75                        		rts
    493 FFFC0350                             dclf:
    494 FFFC0350 6100 00B2                   		bsr		IncCursorRow
    495 FFFC0354                             dcx16:
    496 FFFC0354 6100 0448                   		bsr		SyncCursor
    497 FFFC0358                             dcx4:
    498 FFFC0358 4CDF 0107                   		movem.l	(a7)+,d0/d1/d2/a0		; get back a0
    499 FFFC035C 4CDF 000C                   		movem.l	(a7)+,d2/d3
    500 FFFC0360 4E75                        		rts
                                             
                                             		;---------------------------
                                             		; CTRL-H: backspace
                                             		;---------------------------
    505 FFFC0362                             doBackspace:
    506 FFFC0362 0C39 0000 0001 0419         		cmpi.b	#0,CursorCol		; if already at start of line
    507 FFFC036A 67EC                        		beq.s   dcx4				; nothing to do
    508 FFFC036C 5339 0001 0419              		subi.b	#1,CursorCol		; decrement column
                                             
                                             		;---------------------------
                                             		; Delete key
                                             		;---------------------------
    513 FFFC0372                             doDelete:
    514 FFFC0372 6100 FEC4                   		bsr		CalcScreenLoc		; a0 = screen location
    515 FFFC0376 2F08                        		move.l	a0,-(a7)			; save off screen location
    516 FFFC0378 1039 0001 0419              		move.b	CursorCol,d0
    517 FFFC037E                             .0001:
    518 FFFC037E 10E8 0001                   		move.b	1(a0),(a0)+			; pull remaining characters on line over 1
    519 FFFC0382 5200                        		addi.b	#1,d0
    520 FFFC0384 B039 0001 041B              		cmp.b	TextCols,d0
    521 FFFC038A 65F2                        		blo.s	.0001
    522 FFFC038C 103C 0020                   		move.b	#' ',d0				; terminate line with a space
    523 FFFC0390 1140 FFFF                   		move.b	d0,-1(a0)
                                             		; now re-render the chars to the display
    525 FFFC0394 205F                        		move.l	(a7)+,a0			; get back screen location
    526 FFFC0396 1439 0001 0419              		move.b	CursorCol,d2		; save off cursor column
    527 FFFC039C                             .0002:
    528 FFFC039C 1018                        		move.b	(a0)+,d0			; get a char
    529 FFFC039E 6100 036C                   		bsr		DispChar			; render to screen
    530 FFFC03A2 5239 0001 0419              		add.b	#1,CursorCol		; increment column
    531 FFFC03A8 1039 0001 0419              		move.b	CursorCol,d0		; check if end of line hit
    532 FFFC03AE 9039 0001 041B              		sub.b	TextCols,d0
    533 FFFC03B4 66E6                        		bne.s	.0002				; no, go back
    534 FFFC03B6 13C2 0001 0419              		move.b	d2,CursorCol		; restore cursor pos
    535 FFFC03BC 6096                        		bra.s	dcx16				; finished
                                             		;---------------------------
                                             		; CTRL-X: erase line
                                             		;---------------------------
    539 FFFC03BE                             doCtrlX:
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 10
bootrom.asm
    540 FFFC03BE 4239 0001 0419              		clr.b	CursorCol			; Reset cursor to start of line
    541 FFFC03C4 1039 0001 041B              		move.b	TextCols,d0			; and display TextCols number of spaces
    542 FFFC03CA 4880                        		ext.w	d0
    543 FFFC03CC 48C0                        		ext.l	d0
    544 FFFC03CE 123C 0020                   		move.b	#' ',d1				; d1 = space char
    545 FFFC03D2                             .0001:
                                             		; DisplayChar is called recursively here
                                             		; It's safe to do because we know it won't recurse again due to the
                                             		; fact we know the character being displayed is a space char
    549 FFFC03D2 6100 FE94                   		bsr		DisplayChar			
    550 FFFC03D6 5380                        		subq	#1,d0
    551 FFFC03D8 66F8                        		bne.s	.0001
    552 FFFC03DA 4239 0001 0419              		clr.b	CursorCol			; now really go back to start of line
    553 FFFC03E0 6000 FF72                   		bra.s	dcx16				; we're done
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Increment the cursor position, scroll the screen if needed.
                                             ;------------------------------------------------------------------------------
                                             ;
    559 FFFC03E4                             IncCursorPos:
    560 FFFC03E4 5279 0001 041C              		addi.w	#1,TextCurpos
    561 FFFC03EA 5239 0001 0419              		addi.b	#1,CursorCol
    562 FFFC03F0 1039 0001 041B              		move.b	TextCols,d0
    563 FFFC03F6 B039 0001 0419              		cmp.b	CursorCol,d0
    564 FFFC03FC 643A                        		bhs.s	icc1
    565 FFFC03FE 4239 0001 0419              		clr.b	CursorCol
    566 FFFC0404                             IncCursorRow:
    567 FFFC0404 5239 0001 0418              		addi.b	#1,CursorRow
    568 FFFC040A 1039 0001 041A              		move.b	TextRows,d0
    569 FFFC0410 B039 0001 0418              		cmp.b	CursorRow,d0
    570 FFFC0416 6220                        		bhi.s	icc1
    571 FFFC0418 1039 0001 041A              		move.b	TextRows,d0
    572 FFFC041E 13C0 0001 0418              		move.b	d0,CursorRow		; in case CursorRow is way over
    573 FFFC0424 5339 0001 0418              		subi.b	#1,CursorRow
    574 FFFC042A 4880                        		ext.w	d0
    575 FFFC042C E340                        		asl.w	#1,d0
    576 FFFC042E 9179 0001 041C              		sub.w	d0,TextCurpos
    577 FFFC0434 6100 11E2                   		bsr		ScrollUp
    578 FFFC0438                             icc1:
    579 FFFC0438 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display a string on the screen.
                                             ;------------------------------------------------------------------------------
                                             ;
    585 FFFC043A                             DisplayString:
    586 FFFC043A 48E7 C040                   		movem.l	d0/d1/a1,-(a7)
    587 FFFC043E                             dspj1:
    588 FFFC043E 4281                        		clr.l	d1				; clear upper bits of d1
    589 FFFC0440 1219                        		move.b	(a1)+,d1		; move string char into d1
    590 FFFC0442 0C01 0000                   		cmpi.b	#0,d1			; is it end of string ?
    591 FFFC0446 6706                        		beq.s	dsret			
    592 FFFC0448 6100 FE1E                   		bsr		DisplayChar		; display character
    593 FFFC044C 60F0                        		bra.s	dspj1			; go back for next character
    594 FFFC044E                             dsret:
    595 FFFC044E 4CDF 0203                   		movem.l	(a7)+,d0/d1/a1
    596 FFFC0452 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display a string on the screen followed by carriage return / linefeed.
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 11
bootrom.asm
                                             ;------------------------------------------------------------------------------
                                             ;
    602 FFFC0454                             DisplayStringCRLF:
    603 FFFC0454 6100 FFE4                   		bsr		DisplayString
    604 FFFC0458 6000 FDC8                   		bra		CRLF
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display a string on the screen. Stop at 255 chars, or NULL or D1.W
                                             ;------------------------------------------------------------------------------
                                             ;
    610 FFFC045C                             DisplayString1:
    611 FFFC045C 48E7 C040                   		movem.l	d0/d1/a1,-(a7)
    612 FFFC0460 0241 00FF                   		andi.w	#255,d1			; max 255 chars
    613 FFFC0464 2001                        		move.l	d1,d0
    614 FFFC0466                             dspj11:
    615 FFFC0466 1219                        		move.b	(a1)+,d1		; move string char into d1
    616 FFFC0468 0C01 0000                   		cmpi.b	#0,d1			; is it end of string ?
    617 FFFC046C 6708                        		beq		dsret1			
    618 FFFC046E 6100 FDF8                   		bsr		DisplayChar		; display character
    619 FFFC0472 57C8 FFF2                   		dbeq	d0,dspj11		; go back for next character
    620 FFFC0476                             dsret1:
    621 FFFC0476 4CDF 0203                   		movem.l	(a7)+,d0/d1/a1
    622 FFFC047A 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display a string on the screen. Stop at 255 chars, or NULL or D1.W
                                             ; end string with CR,LF
                                             ;------------------------------------------------------------------------------
                                             ;
    629 FFFC047C                             DisplayString0:
    630 FFFC047C 6100 FFDE                   		bsr		DisplayString1
    631 FFFC0480 6000 FDA0                   		bra		CRLF
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Dispatch cursor functions
                                             ;------------------------------------------------------------------------------
                                             ;
    637 FFFC0484                             Cursor1:
    638 FFFC0484 0C41 00FF                   		cmpi.w	#0x00ff,d1
    639 FFFC0488 670E                        		beq		GetCursorPos
    640 FFFC048A 0C41 FF00                   		cmpi.w	#0xFF00,d1
    641 FFFC048E 6718                        		beq		SetCursorPos
    642 FFFC0490 4EB9 FFFC 1586              		jsr		ClearScreen
    643 FFFC0496 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Get the cursor position.
                                             ; d1.b0 = row
                                             ; d1.b1 = col
                                             ;------------------------------------------------------------------------------
                                             ;
    651 FFFC0498                             GetCursorPos:
    652 FFFC0498 1239 0001 0419              		move.b	CursorCol,d1
    653 FFFC049E E141                        		asl.w	#8,d1
    654 FFFC04A0 1239 0001 0418              		move.b	CursorRow,d1
    655 FFFC04A6 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Set the position of the cursor, update the linear screen pointer.
                                             ; d1.b0 = row
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 12
bootrom.asm
                                             ; d1.b1 = col
                                             ;------------------------------------------------------------------------------
                                             ;
    663 FFFC04A8                             SetCursorPos:
    664 FFFC04A8 48E7 6000                   		movem.l	d1/d2,-(a7)
    665 FFFC04AC 13C1 0001 0418              		move.b	d1,CursorRow
    666 FFFC04B2 E049                        		lsr.w	#8,d1
    667 FFFC04B4 13C1 0001 0419              		move.b	d1,CursorCol
    668 FFFC04BA 1239 0001 0418              		move.b	CursorRow,d1
    669 FFFC04C0 4881                        		ext.w	d1
    670 FFFC04C2 1439 0001 041B              		move.b	TextCols,d2
    671 FFFC04C8 4882                        		ext.w	d2
    672 FFFC04CA C2C2                        		mulu.w	d2,d1
    673 FFFC04CC 1439 0001 0419              		move.b	CursorCol,d2
    674 FFFC04D2 D242                        		add.w	d2,d1
    675 FFFC04D4 33C1 0001 041C              		move.w	d1,TextCurpos
    676 FFFC04DA                             scp1:
    677 FFFC04DA 4CDF 0006                   		movem.l	(a7)+,d1/d2
    678 FFFC04DE 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ;------------------------------------------------------------------------------
                                             
    683 FFFC04E0                             Set320x192:
    684 FFFC04E0 4DF9 FFE0 0000              		lea		VDGREG,a6			; a6 = pointer to register set
    685 FFFC04E6 41F9 FFFC 05C0              		lea		tbl1280x768,a0
    686 FFFC04EC 43EE 07C0                   		lea		$7C0(a6),a1			; a1 points to timing registers
    687 FFFC04F0 3D7C A123 07F2              		move.w	#$A123,$7F2(a6)		; unlock timing regs
    688 FFFC04F6 700E                        		moveq	#14,d0
    689 FFFC04F8                             .0001:
    690 FFFC04F8 32D8                        		move.w	(a0)+,(a1)+
    691 FFFC04FA 51C8 FFFC                   		dbra	d0,.0001
    692 FFFC04FE 3D7C 0000 07F2              		move.w	#$0000,$7F2(a6)		; lock timing regs
    693 FFFC0504 4E75                        		rts
                                             
    695 FFFC0506                             Set320x240:
    696 FFFC0506 2C7C FFE0 0000              		movea.l	#VDGREG,a6			; a6 = pointer to register set
    697 FFFC050C 4E75                        		rts
                                             
    699 FFFC050E                             Set400x300:
    700 FFFC050E 2C7C FFE0 0000              		movea.l	#VDGREG,a6			; a6 = pointer to register set
    701 FFFC0514 3D7C 0001 07F0              		move.w	#1,$7F0(a6)			; 1 = divide by 2 mode
    702 FFFC051A 3D7C 0190 0406              		move.w	#400,$406(a6)		; bitmap width register
    703 FFFC0520 3D7C 012C 040A              		move.w	#300,$40A(a6)		; bitmap height
    704 FFFC0526 41F9 FFFC 059E              		lea		tbl800x600,a0
    705 FFFC052C 43EE 07C0                   		lea		$7C0(a6),a1			; a1 points to timing registers
    706 FFFC0530 3D7C A123 07F2              		move.w	#$A123,$7F2(a6)		; unlock timing regs
    707 FFFC0536 7010                        		moveq	#16,d0
    708 FFFC0538                             .0001:
    709 FFFC0538 32D8                        		move.w	(a0)+,(a1)+
    710 FFFC053A 51C8 FFFC                   		dbra	d0,.0001
    711 FFFC053E 3D7C 0000 07F2              		move.w	#$0000,$7F2(a6)		; lock timing regs
    712 FFFC0544 13FC 0032 0001 041B         		move.b	#50,TextCols
    713 FFFC054C 13FC 0025 0001 041A         		move.b	#37,TextRows
    714 FFFC0554 4E75                        		rts
                                             
    716 FFFC0556                             Set800x600:
    717 FFFC0556 2C7C FFE0 0000              		movea.l	#VDGREG,a6			; a6 = pointer to register set
    718 FFFC055C 3D7C 0000 07F0              		move.w	#0,$7F0(a6)			; 0 = no divide
    719 FFFC0562 3D7C 0320 0406              		move.w	#800,$406(a6)		; bitmap width register
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 13
bootrom.asm
    720 FFFC0568 3D7C 0258 040A              		move.w	#600,$40A(a6)		; bitmap height
    721 FFFC056E 41F9 FFFC 059E              		lea		tbl800x600,a0
    722 FFFC0574 43EE 07C0                   		lea		$7C0(a6),a1			; a1 points to timing registers
    723 FFFC0578 3D7C A123 07F2              		move.w	#$A123,$7F2(a6)		; unlock timing regs
    724 FFFC057E 7010                        		moveq	#16,d0
    725 FFFC0580                             .0001:
    726 FFFC0580 32D8                        		move.w	(a0)+,(a1)+
    727 FFFC0582 51C8 FFFC                   		dbra	d0,.0001
    728 FFFC0586 3D7C 0000 07F2              		move.w	#$0000,$7F2(a6)		; lock timing regs
    729 FFFC058C 13FC 0064 0001 041B         		move.b	#100,TextCols
    730 FFFC0594 13FC 004B 0001 041A         		move.b	#75,TextRows
    731 FFFC059C 4E75                        		rts
                                             
                                             	align	2
                                             ;tbl640x480:
                                             ;	dc.w	800,525
    736 FFFC059E                             tbl800x600:
    737 FFFC059E 0420 0274 0028 00A8         	dc.w	1056,628,40,168,1,5,1056,256,628,28,1055,257,628,28,$EFE,$FE5,0
    738 FFFC05A6 0001 0005 0420 0100         
    739 FFFC05AE 0274 001C 041F 0101         
    740 FFFC05B6 0274 001C 0EFE 0FE5         
    741 FFFC05BE 0000                        
    742 FFFC05C0                             tbl1280x768:
    743 FFFC05C0 0690 031B 0043 00C9         	dc.w	1680,795,67,201,2,5,1680,400,795,27,1680,400,795,27,$EFD,$FD7,0
    744 FFFC05C8 0002 0005 0690 0190         
    745 FFFC05D0 031B 001B 0690 0190         
    746 FFFC05D8 031B 001B 0EFD 0FD7         
    747 FFFC05E0 0000                        
                                             
                                             ;------------------------------------------------------------------------------
                                             ; The z buffer is setup so that display has the lowest priority. This allows
                                             ; sprites to appear in front of graphics. At power on the buffer likely
                                             ; contains all zeros making graphics the highest priority.
                                             ;------------------------------------------------------------------------------
                                             
    755 FFFC05E2                             BootSetZBuffer:
    756 FFFC05E2 2C7C FFE0 0000              		movea.l	#VDGREG,a6			; a6 = pointer to register set
    757 FFFC05E8 207C FF80 0000              		move.l	#VDGBUF,A0			; a0 = pointer to display buffer
    758 FFFC05EE 3D7C 0001 043E              		move.w	#$1,$43E(a6)		; switch to z buffer
    759 FFFC05F4 223C 0000 3A98              		move.l	#BMP_WIDTH*BMP_HEIGHT/8,D1		; number of words to update
    760 FFFC05FA                             .0001:
    761 FFFC05FA 20FC FFFF FFFF              		move.l	#$FFFFFFFF,(a0)+	; set z layer to 3
    762 FFFC0600 5381                        		sub.l	#1,d1
    763 FFFC0602 66F6                        		bne.s	.0001
    764 FFFC0604 3D7C 0000 043E              		move.w	#$0,$43E(a6)		; switch to regular buffer
    765 FFFC060A 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; clear screen	
                                             ;
                                             ; Trashes:
                                             ;	a0,d0,d1
                                             ;------------------------------------------------------------------------------
                                             
    774 FFFC060C                             BootClearScreen:
    775 FFFC060C 207C FF80 0000              		move.l	#VDGBUF,A0
    776 FFFC0612 700F                        		moveq	#DARK_BLUE,D0				; dark blue
    777 FFFC0614 223C 0001 D4C0              		move.l	#BMP_WIDTH*BMP_HEIGHT,D1	; number of pixels
    778 FFFC061A                             .loop1:
    779 FFFC061A 30C0                        		move.w	d0,(a0)+					; store it to the screen
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 14
bootrom.asm
    780 FFFC061C 5381                        		subq	#1,d1						; can't use dbra here
    781 FFFC061E 66FA                        		bne.s	.loop1
    782 FFFC0620 4DF9 FFE0 0000              		lea		VDGREG,a6
    783 FFFC0626 3D7C 0001 043E              		move.w	#1,$43E(a6)					; access z buffer
    784 FFFC062C 41F9 FF80 0000              		lea		VDGBUF,a0
    785 FFFC0632 70FF                        		move.l	#$FFFFFFFF,d0				; lowest priority
    786 FFFC0634 223C 0000 1D4C              		move.l	#BMP_WIDTH*BMP_HEIGHT/16,D1	; number of pixels
    787 FFFC063A                             .0002:
    788 FFFC063A 20C0                        		move.l	d0,(a0)+
    789 FFFC063C 5381                        		subq	#1,d1
    790 FFFC063E 66FA                        		bne.s	.0002
    791 FFFC0640 3D7C 0000 043E              		move.w	#0,$43E(a6)					; access normal buffer
    792 FFFC0646 6000 0FBC                   		bra		ClearVirtScreen				; clear the virtual screen too.
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Copy bands of color to the display controller's memory. These bands should
                                             ; show up if the bitmap address get toasted.
                                             ;------------------------------------------------------------------------------
                                             
    799 FFFC064A                             ColorBandMemory:
    800 FFFC064A 2C7C FFDC 0000              		move.l	#$FFDC0000,a6
    801 FFFC0650 207C FF80 0000              		move.l	#$FF800000,a0
    802 FFFC0656 227C FF90 0000              		move.l	#$FF900000,a1
    803 FFFC065C 7200                        		move.l	#0,d1
    804 FFFC065E 426E 0C04                   		clr.w	$0C04(a6)			; gen next number
    805 FFFC0662 262E 0C00                   		move.l	$0C00(a6),d3		; get random value
    806 FFFC0666                             .0002:
    807 FFFC0666 30C3                        		move.w	d3,(a0)+			; move to z buffer
    808 FFFC0668 2801                        		move.l	d1,d4
    809 FFFC066A 0284 0000 03FF              		and.l	#$03FF,d4
    810 FFFC0670 6608                        		bne.s	.0001
    811 FFFC0672 426E 0C04                   		clr.w	$0C04(a6)			; gen next number
    812 FFFC0676 262E 0C00                   		move.l	$0C00(a6),d3		; get random value
    813 FFFC067A                             .0001:
    814 FFFC067A 5281                        		addq	#1,d1
    815 FFFC067C B1C9                        		cmpa	a1,a0
    816 FFFC067E 65E6                        		blo.s	.0002	
    817 FFFC0680 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; copy font to VDG ram
                                             ;
                                             ; The font address is 1/2 of the memory address that the cpu sees because
                                             ; the AV controller only deals with word accesses.
                                             ;
                                             ; Trashes:
                                             ;	a0,a1,a6,d0,d1
                                             ;------------------------------------------------------------------------------
                                             
    829 FFFC0682                             BootCopyFont:
    830 FFFC0682 2C7C FFE0 0000              		movea.l	#VDGREG,a6
                                             		; Setup font table
    832 FFFC0688 2D7C 0005 C000 0410         		move.l	#$5C000,$410(a6)	; set font table address 1/2 B8000
    833 FFFC0690 203C 0005 C004              		move.l	#$5C004,d0			; set bitmap address (directly follows)
    834 FFFC0696 4840                        		swap	d0
    835 FFFC0698 0040 9CE0                   		or.w	#%1001110011100000,d0	; set font fixed, width, height
    836 FFFC069C 4840                        		swap	d0
    837 FFFC069E 23C0 FF8B 8000              		move.l	d0,$FF8B8000
    838 FFFC06A4 42B9 FF8B 8004              		clr.l	$FF8B8004			; clear glyph width table address (not used)
    839 FFFC06AA 227C FF8B 8008              		movea.l	#$FF8B8008,a1		; font table address
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 15
bootrom.asm
                                             
    841 FFFC06B0 41F9 FFFC 228C              		lea		font8,a0
    842 FFFC06B6 223C 0000 1000              		move.l	#8*512,d1			; 512 chars * 8 bytes per char
                                             
    844 FFFC06BC 3D7C 0000 0414              		move.w	#0,$414(a6)			; select font id (0)
                                             
    846 FFFC06C2 7000                        		moveq	#0,d0				; zero out high order bits
    847 FFFC06C4                             cpyfnt:
    848 FFFC06C4 1018                        		move.b	(a0)+,d0			; get a byte
    849 FFFC06C6 32C0                        		move.w	d0,(a1)+			; store in font table
    850 FFFC06C8 51C9 FFFA                   		dbra	d1,cpyfnt
    851 FFFC06CC 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Parameters:
                                             ;	d0.w		character to display
                                             ;	d1.w		x position
                                             ;	d2.w		y position
                                             ; Trashes:
                                             ;	a6
                                             ;------------------------------------------------------------------------------
                                             
    862 FFFC06CE                             DispCharAt:
    863 FFFC06CE 2C7C FFE0 0000              		move.l	#VDGREG,a6
    864 FFFC06D4 4840                        		swap	d0						; save off d0 low
    865 FFFC06D6                             .0001:									; wait for character que to empty
    866 FFFC06D6 302E 042C                   		move.w	$42C(a6),d0			; read character queue index into d0
    867 FFFC06DA B07C 001C                   		cmp.w	#28,d0					; allow up 28 entries to be in progress
    868 FFFC06DE 64F6                        		bhs.s	.0001					; branch if too many chars queued
    869 FFFC06E0 4840                        		swap	d0						; get back d0 low
    870 FFFC06E2 3D40 0420                   		move.w	d0,$420(a6)			; set char code
    871 FFFC06E6 3D79 0001 0002 0422         		move.w	fgcolor,$422(a6)		; set fg color
    872 FFFC06EE 3D79 0001 0004 0424         		move.w	bkcolor,$424(a6)		; set bk color
    873 FFFC06F6 3D41 0426                   		move.w	d1,$426(a6)			; set x pos
    874 FFFC06FA 3D42 0428                   		move.w	d2,$428(a6)			; set y pos
    875 FFFC06FE 3D7C 0707 042A              		move.w	#$0707,$42A(a6)		; set font x,y extent
    876 FFFC0704 3D7C 0000 042E              		move.w	#0,$42E(a6)			; pulse character queue write signal
    877 FFFC070A 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Parameters:
                                             ;	d0.w		character to display
                                             ;------------------------------------------------------------------------------
                                             
    884 FFFC070C                             DispChar:
    885 FFFC070C 48E7 4002                   		movem.l	d1/a6,-(a7)
    886 FFFC0710 2C7C FFE0 0000              		move.l	#VDGREG,a6
    887 FFFC0716 4840                        		swap	d0					; save off d0 low
    888 FFFC0718                             .0001:								; wait for character que to empty
    889 FFFC0718 302E 042C                   		move.w	$42C(a6),d0			; read character queue index into d0
    890 FFFC071C B07C 001C                   		cmp.w	#28,d0				; allow up 28 entries to be in progress
    891 FFFC0720 64F6                        		bhs.s	.0001				; branch if too many chars queued
    892 FFFC0722 4840                        		swap	d0					; get back d0 low
    893 FFFC0724 3D40 0420                   		move.w	d0,$420(a6)			; set char code
    894 FFFC0728 3D79 0001 0002 0422         		move.w	fgcolor,$422(a6)	; set fg color
    895 FFFC0730 3D79 0001 0004 0424         		move.w	bkcolor,$424(a6)	; set bk color
    896 FFFC0738 1239 0001 0419              		move.b	CursorCol,d1
    897 FFFC073E 4881                        		ext.w	d1
    898 FFFC0740 E741                        		asl.w	#3,d1
    899 FFFC0742 3D41 0426                   		move.w	d1,$426(a6)			; set x pos
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 16
bootrom.asm
    900 FFFC0746 1239 0001 0418              		move.b	CursorRow,d1
    901 FFFC074C 4881                        		ext.w	d1
    902 FFFC074E E741                        		asl.w	#3,d1
    903 FFFC0750 3D41 0428                   		move.w	d1,$428(a6)			; set y pos
    904 FFFC0754 3D7C 0707 042A              		move.w	#$0707,$42A(a6)		; set font x,y extent (defunct - in font table)
    905 FFFC075A 3D7C 0000 042E              		move.w	#0,$42E(a6)			; pulse character queue write signal
    906 FFFC0760 4CDF 4002                   		movem.l	(a7)+,d1/a6
    907 FFFC0764 4E75                        		rts
                                             
                                             ;==============================================================================
                                             ; Cursor Routines
                                             ;
                                             ; BIOS uses cursor #0. The BIOS cursor is 10 x 10
                                             ;==============================================================================
                                             
    915 FFFC0766                             EnableCursor:
    916 FFFC0766 48E7 8002                   		movem.l	d0/a6,-(a7)
    917 FFFC076A 4DF9 FFE0 0000              		lea		VDGREG,a6
    918 FFFC0770 202E 0108                   		move.l	$108(a6),d0
    919 FFFC0774 08C0 0000                   		bset	#0,d0
    920 FFFC0778 2D40 0108                   		move.l	d0,$108(a6)
    921 FFFC077C 4CDF 4001                   		movem.l	(a7)+,d0/a6
    922 FFFC0780 4E75                        		rts
                                             		
    924 FFFC0782                             DisableCursor:
    925 FFFC0782 48E7 8002                   		movem.l	d0/a6,-(a7)
    926 FFFC0786 4DF9 FFE0 0000              		lea		VDGREG,a6
    927 FFFC078C 202E 0108                   		move.l	$108(a6),d0
    928 FFFC0790 0880 0000                   		bclr	#0,d0
    929 FFFC0794 2D40 0108                   		move.l	d0,$108(a6)
    930 FFFC0798 4CDF 4001                   		movem.l	(a7)+,d0/a6
    931 FFFC079C 4E75                        		rts
                                             		
                                             ;------------------------------------------------------------------------------
                                             ; Sync the hardware cursor's position to the text cursor position.
                                             ;------------------------------------------------------------------------------
                                             
    937 FFFC079E                             SyncCursor:
    938 FFFC079E 48E7 4002                   		movem.l	d1/a6,-(a7)
    939 FFFC07A2 2C7C FFE0 0000              		move.l	#VDGREG,a6
                                             ;		move.w	#$0A0A,VDG_CURSZ(a6)	; defunct size set in SetCursorImage64
    941 FFFC07A8 1239 0001 0419              		move.b	CursorCol,d1
    942 FFFC07AE 4881                        		ext.w	d1
    943 FFFC07B0 E741                        		asl.w	#3,d1
    944 FFFC07B2 5341                        		sub.w	#1,d1
    945 FFFC07B4 3D41 0204                   		move.w	d1,VDG_CUR0X(a6)
    946 FFFC07B8 1239 0001 0418              		move.b	CursorRow,d1
    947 FFFC07BE 4881                        		ext.w	d1
    948 FFFC07C0 E741                        		asl.w	#3,d1
    949 FFFC07C2 5341                        		sub.w	#1,d1
    950 FFFC07C4 3D41 0206                   		move.w	d1,VDG_CUR0Y(a6)
    951 FFFC07C8 4CDF 4002                   		movem.l	(a7)+,d1/a6
    952 FFFC07CC 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Cursor Color
                                             ; - cursor color is a 32 bit vector
                                             ;
                                             ;	aaaaaaaa--ifffff-rrrrrgggggbbbbb
                                             ;	    |     |  |     |    |    |
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 17
bootrom.asm
                                             ;       |     |  |     |    |    +-- blue
                                             ;     	|     |  |     |    +------- green
                                             ;       |     |  |     +------------ red
                                             ;       |     |  +------------------ flashrate 0xxxx = no flash
                                             ;       |     +--------------------- invert video (rgb ignored)
                                             ;       +--------------------------- alpha 0 = cursor color, 255 = background
                                             ;
                                             ;   flash rate
                                             ;		 0xxxx = no flash
                                             ;        00001 = 1/8 vsync (7.5 Hz)
                                             ;	     00010 = 1/16 vsync (3.75 Hz)
                                             ;        00100 = 1/32 vsync (1.875 Hz)
                                             ;------------------------------------------------------------------------------
                                             
    974 FFFC07CE                             SetCursorColor:
    975 FFFC07CE 2F02                        		move.l  d2/a5/a6,-(a7)
    976 FFFC07D0 2A7C FFDC 0000              		move.l	#$FFDC0000,a5
    977 FFFC07D6 2C7C FFE0 0000              		move.l	#VDGREG,a6
    978 FFFC07DC 3D7C 0004 0446              		move.w	#%00100,VDG_CURFLSH(a6)
    979 FFFC07E2 3D7C 7FFF 0448              		move.w	#%0111111111111111,VDG_CURCLR0(a6)
    980 FFFC07E8 743F                        		moveq	#63,d2
    981 FFFC07EA                             .0001:
    982 FFFC07EA 426D 0C04                   		clr.w	$0C04(a5)			; gen next number
    983 FFFC07EE 262D 0C00                   		move.l	$0C00(a5),d3
    984 FFFC07F2 0283 0000 FFFF              		and.l	#$FFFF,d3
    985 FFFC07F8 2CC3                        		move.l	d3,(a6)+
    986 FFFC07FA 51CA FFEE                   		dbra	d2,.0001
    987 FFFC07FE 241F                        		move.l	(a7)+,d2/a5/a6
    988 FFFC0800 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Put some values in the cursors color palette so they will be visible.
                                             ; Otherwise they will all be black.
                                             ;------------------------------------------------------------------------------
                                             
    995 FFFC0802                             InitCursorColorPalette:
    996 FFFC0802 2F02                        		move.l  d2/d3/a5/a6,-(a7)
    997 FFFC0804 2A7C FFDC 0000              		move.l	#$FFDC0000,a5
    998 FFFC080A 2C7C FFE0 0000              		move.l	#VDGREG,a6
    999 FFFC0810 743F                        		moveq	#63,d2
   1000 FFFC0812                             .0001:
   1001 FFFC0812 426D 0C04                   		clr.w	$0C04(a5)			; gen next number
   1002 FFFC0816 262D 0C00                   		move.l	$0C00(a5),d3		; move random number
   1003 FFFC081A 0283 FF00 7FFF              		and.l	#$FF007FFF,d3		; mask off other attributes
                                             		;or.l	#$FF000000,d3		; alpha blend to background color
   1005 FFFC0820 2CC3                        		move.l	d3,(a6)+
   1006 FFFC0822 51CA FFEE                   		dbra	d2,.0001
   1007 FFFC0826 2C7C FFE0 0000              		move.l	#VDGREG,a6
   1008 FFFC082C 2D7C 0000 7C00 0004         		move.l	#RED,4(a6)			; force cursor red
   1009 FFFC0834 241F                        		move.l	(a7)+,d2/d3/a5/a6
   1010 FFFC0836 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Setup an image for the cursor.
                                             ; Cursor may be up to 32h x 512v pixels.
                                             ; The BIOS cursor is 10 x 10
                                             ;------------------------------------------------------------------------------
                                             
   1018 FFFC0838                             SetCursorImage64:
   1019 FFFC0838 48E7 70C2                   		movem.l	d1/d2/d3/a0/a1/a6,-(a7)
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 18
bootrom.asm
   1020 FFFC083C 41F9 FFFC 08AC              		lea		CursorImage64,a0
   1021 FFFC0842 7214                        		moveq	#20,d1					; set count number of long words to move
   1022 FFFC0844 227C FF8B 7E00              		move.l	#$FF8B7E00,a1
   1023 FFFC084A                             .0001:
   1024 FFFC084A 22D8                        		move.l	(a0)+,(a1)+
   1025 FFFC084C 51C9 FFFC                   		dbra	d1,.0001
   1026 FFFC0850 343C 0200                   		move.w	#$200,d2
   1027 FFFC0854 207C FFE0 0000              		move.l	#VDGREG,a0
   1028 FFFC085A 2C7C FFDC 0000              		move.l	#$FFDC0000,a6
   1029 FFFC0860                             .0002:
   1030 FFFC0860 21BC 0005 BF00 2000         		move.l	#$5BF00,(a0,d2.w)
   1031 FFFC0868 31BC 0249 2008              		move.w	#$0249,8(a0,d2.w)	; set cursor size 10x10
   1032 FFFC086E 31BC 0064 200C              		move.w	#100,12(a0,d2.w)	; set total pixel count (10*10)
   1033 FFFC0874 426E 0C04                   		clr.w	$0C04(a6)			; gen next number
   1034 FFFC0878 262E 0C00                   		move.l	$0C00(a6),d3
   1035 FFFC087C 0243 00FF                   		and.w	#$FF,d3
   1036 FFFC0880 3183 2004                   		move.w	d3,4(a0,d2.w)		; set h pos
   1037 FFFC0884 426E 0C04                   		clr.w	$0C04(a6)			; gen next number
   1038 FFFC0888 262E 0C00                   		move.l	$0C00(a6),d3
   1039 FFFC088C 0243 00FF                   		and.w	#$FF,d3
   1040 FFFC0890 3183 2006                   		move.w	d3,6(a0,d2.w)		; set v pos
   1041 FFFC0894 363C 0000                   		move.w	#$0,d3
   1042 FFFC0898 3183 200A                   		move.w	d3,10(a0,d2.w)		; set z pos
   1043 FFFC089C 0642 0010                   		add.w	#$10,d2
   1044 FFFC08A0 B47C 0400                   		cmp.w	#$400,d2
   1045 FFFC08A4 65BA                        		blo.s	.0002
   1046 FFFC08A6 4CDF 430E                   		movem.l	(a7)+,d1/d2/d3/a0/a1/a6
   1047 FFFC08AA 4E75                        		rts
                                             		
                                             	align	4
   1050 FFFC08AC                             CursorImage64:
   1051 FFFC08AC 55555000 00000000           	dc.l	%01010101010101010101000000000000,$00
   1052 FFFC08B4 40001000 00000000           	dc.l	%01000000000000000001000000000000,$00
   1053 FFFC08BC 40001000 00000000           	dc.l	%01000000000000000001000000000000,$00
   1054 FFFC08C4 40001000 00000000           	dc.l	%01000000000000000001000000000000,$00
   1055 FFFC08CC 40001000 00000000           	dc.l	%01000000000000000001000000000000,$00
   1056 FFFC08D4 40001000 00000000           	dc.l	%01000000000000000001000000000000,$00
   1057 FFFC08DC 40001000 00000000           	dc.l	%01000000000000000001000000000000,$00
   1058 FFFC08E4 40001000 00000000           	dc.l	%01000000000000000001000000000000,$00
   1059 FFFC08EC 40501000 00000000           	dc.l	%01000000010100000001000000000000,$00
   1060 FFFC08F4 55555000 00000000           	dc.l	%01010101010101010101000000000000,$00
   1061 FFFC08FC 00000000 00000000           	dc.l	$00,$00
   1062 FFFC0904 00000000 00000000           	dc.l	$00,$00
                                             
   1064 FFFC090C                             BouncingBalls:
   1065 FFFC090C 48E7 70C2                   		movem.l	d1/d2/d3/a0/a1/a6,-(a7)
                                             
                                             		; Setup background depth
   1068 FFFC0910 227C FFE0 0000              		move.l	#VDGREG,a1
   1069 FFFC0916 2C7C FFDC 0000              		move.l	#$FFDC0000,a6		; set I/O address
   1070 FFFC091C 207C FF80 0000              		movea.l	#$FF800000,a0		; address of z buffer ram
   1071 FFFC0922 243C 0000 1D4C              		move.l	#BMP_WIDTH*BMP_HEIGHT/16,d2
                                             ;		move.w	#1,$43E(a1)			; select z buffer
   1073 FFFC0928                             .0003:
                                             ;		clr.w	$0C04(a6)			; gen next number
                                             ;		move.l	$0C00(a6),d3		; get random value
                                             ;		move.l	d3,(a0)+			; move to z buffer
                                             ;		sub.l	#1,d2
                                             ;		bne.s	.0003
                                             ;		move.w	#0,$43E(a1)			; deselect z buffer
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 19
bootrom.asm
                                             		
                                             		; Setup sprite image
   1082 FFFC0928 41F9 FFFC 0A7C              		lea		BallImage,a0
   1083 FFFC092E 721A                        		moveq	#26,d1					; set count number of long words to move
   1084 FFFC0930 227C FF8B 7D00              		move.l	#$FF8B7D00,a1
   1085 FFFC0936 45F9 0001 0500              		lea		ball_dx,a2
   1086 FFFC093C 47F9 0001 0600              		lea		ball_dy,a3
   1087 FFFC0942                             .0001:
   1088 FFFC0942 22D8                        		move.l	(a0)+,(a1)+
   1089 FFFC0944 51C9 FFFC                   		dbra	d1,.0001
   1090 FFFC0948 41F9 FFFC 0AF4              		lea		XImage,a0
   1091 FFFC094E 721A                        		moveq	#26,d1					; set count number of long words to move
   1092 FFFC0950 227C FF8B 7C00              		move.l	#$FF8B7C00,a1
   1093 FFFC0956                             .0012:
   1094 FFFC0956 22D8                        		move.l	(a0)+,(a1)+
   1095 FFFC0958 51C9 FFFC                   		dbra	d1,.0012
   1096 FFFC095C 343C 0210                   		move.w	#$210,d2
   1097 FFFC0960 207C FFE0 0000              		move.l	#VDGREG,a0
   1098 FFFC0966 217C FFFF FFFF 0108         		move.l	#$FFFFFFFF,$108(a0)		; enable sprites
   1099 FFFC096E 2C7C FFDC 0000              		move.l	#$FFDC0000,a6
   1100 FFFC0974                             .0002:
   1101 FFFC0974 B47C 0300                   		cmp.w	#$300,d2
   1102 FFFC0978 6408                        		bhs.s	.0014
   1103 FFFC097A 21BC 0005 BE80 2000         		move.l	#$5BE80,(a0,d2.w)	; set image = 'O'
   1104 FFFC0982                             .0014:
   1105 FFFC0982 31BC 0350 2008              		move.w	#$0350,8(a0,d2.w)	; set cursor size 16hx13v
   1106 FFFC0988 31BC 00D0 200C              		move.w	#208,12(a0,d2.w)	; set total pixel count (16*13)
   1107 FFFC098E 426E 0C04                   		clr.w	$0C04(a6)			; gen next number
   1108 FFFC0992 262E 0C00                   		move.l	$0C00(a6),d3
   1109 FFFC0996 0243 00FF                   		and.w	#$FF,d3
   1110 FFFC099A 0643 0100                   		add.w	#256,d3
   1111 FFFC099E 3183 2004                   		move.w	d3,4(a0,d2.w)		; set h pos
   1112 FFFC09A2 426E 0C04                   		clr.w	$0C04(a6)			; gen next number
   1113 FFFC09A6 262E 0C00                   		move.l	$0C00(a6),d3
   1114 FFFC09AA 0243 00FF                   		and.w	#$FF,d3
   1115 FFFC09AE 0643 001C                   		add.w	#28,d3
   1116 FFFC09B2 3183 2006                   		move.w	d3,6(a0,d2.w)		; set v pos
   1117 FFFC09B6 426E 0C04                   		clr.w	$0C04(a6)			; gen next number
   1118 FFFC09BA 262E 0C00                   		move.l	$0C00(a6),d3
   1119 FFFC09BE 0243 0000                   		and.w	#$0,d3
   1120 FFFC09C2 3183 200A                   		move.w	d3,10(a0,d2.w)		; set z pos
   1121 FFFC09C6 426E 0C04                   		clr.w	$0C04(a6)			; gen next number
   1122 FFFC09CA 262E 0C00                   		move.l	$0C00(a6),d3
   1123 FFFC09CE EC43                        		asr.w	#6,d3				; get dx -8 to +7
   1124 FFFC09D0 EC43                        		asr.w	#6,d3				; get dx -8 to +7
   1125 FFFC09D2 3583 2000                   		move.w	d3,(a2,d2.w)		; set dx
   1126 FFFC09D6 426E 0C04                   		clr.w	$0C04(a6)			; gen next number
   1127 FFFC09DA 262E 0C00                   		move.l	$0C00(a6),d3
   1128 FFFC09DE EC43                        		asr.w	#6,d3				; get dx -8 to +7
   1129 FFFC09E0 EC43                        		asr.w	#6,d3				; get dx -8 to +7
   1130 FFFC09E2 3783 2000                   		move.w	d3,(a3,d2.w)		; set dy
   1131 FFFC09E6 0642 0010                   		add.w	#$10,d2
   1132 FFFC09EA B47C 0300                   		cmp.w	#$300,d2
   1133 FFFC09EE 6508                        		blo.s	.0011
   1134 FFFC09F0 21BC 0005 BE00 2000         		move.l	#$5BE00,(a0,d2.w)
   1135 FFFC09F8                             .0011:
   1136 FFFC09F8 B47C 0400                   		cmp.w	#$400,d2
   1137 FFFC09FC 6500 FF76                   		blo.s	.0002
                                             ;
                                             ; Move balls around	
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 20
bootrom.asm
                                             ; Moves sprites 1-31 around on the screen (sprite 0 is the BIOS cursor)
                                             ;
                                             ; a0 = pointer to AV controller's register set
                                             ; a2 = pointer to sprite movement dx table
                                             ; a3 = pointer to sprite movement dy table
                                             ;
   1146 FFFC0A00                             .0010:	
   1147 FFFC0A00 3428 0582                   		move.w	$582(a0),d2			; get irq status
   1148 FFFC0A04 0802 0000                   		btst	#0,d2				; check vertical blank
   1149 FFFC0A08 67F6                        		beq.s	.0010				; not blank yet
   1150 FFFC0A0A 317C 0001 0582              		move.w	#1,$582(a0)			; reset vert blank indicator
                                             
   1152 FFFC0A10 42A8 0400                   		clr.l	$400(a0)			; reset bitmap base and
   1153 FFFC0A14 317C 0190 0406              		move.w	#BMP_WIDTH,$406(a0)	; bitmap width register
                                             
   1155 FFFC0A1A 343C 0210                   		move.w	#$210,d2			; offset of sprite #1 regsiter
   1156 FFFC0A1E                             .0008:
   1157 FFFC0A1E 3632 2000                   		move.w	(a2,d2.w),d3		; get dx
   1158 FFFC0A22 D770 2004                   		add.w	d3,4(a0,d2.w)		; add to hpos
   1159 FFFC0A26 3633 2000                   		move.w	(a3,d2.w),d3		; get dy
   1160 FFFC0A2A D770 2006                   		add.w	d3,6(a0,d2.w)		; add to vpos
   1161 FFFC0A2E 0C70 0210 2004              		cmpi.w	#BMP_WIDTH+128,4(a0,d2.w)	; X hit limit ?
   1162 FFFC0A34 6504                        		blo.s	.0004
   1163 FFFC0A36 4472 2000                   		neg.w	(a2,d2.w)			; flip dx
   1164 FFFC0A3A                             .0004:
   1165 FFFC0A3A 0C70 0080 2004              		cmpi.w	#128,4(a0,d2.w)		; X hit limit ?
   1166 FFFC0A40 6404                        		bhs.s	.0005
   1167 FFFC0A42 4472 2000                   		neg.w	(a2,d2.w)			; flip dx
   1168 FFFC0A46                             .0005:
   1169 FFFC0A46 0C70 0148 2006              		cmpi.w	#BMP_HEIGHT+28,6(a0,d2.w)	; Y hit limit ?
   1170 FFFC0A4C 6504                        		blo.s	.0006
   1171 FFFC0A4E 4473 2000                   		neg.w	(a3,d2.w)			; flip dy
   1172 FFFC0A52                             .0006:
   1173 FFFC0A52 0C70 001C 2006              		cmpi.w	#28,6(a0,d2.w)		; Y hit limit ?
   1174 FFFC0A58 6404                        		bhs.s	.0007
   1175 FFFC0A5A 4473 2000                   		neg.w	(a3,d2.w)			; flip dy
   1176 FFFC0A5E                             .0007:
   1177 FFFC0A5E 0642 0010                   		addi.w	#$10,d2				; advance to next sprite register set
   1178 FFFC0A62 0C42 0400                   		cmpi.w	#$400,d2			; is end of register set hit ?
   1179 FFFC0A66 65B6                        		blo.s	.0008	
                                             		; delay a bit to allow display to persist
   1181 FFFC0A68 263C 0001 3880              		move.l	#80000,d3
   1182 FFFC0A6E                             .0009:
   1183 FFFC0A6E 5383                        		subi.l	#1,d3
   1184 FFFC0A70 66FC                        		bne.s	.0009
                                             ;		bsr		CheckForKey			; look for keypress to end. zf=0 if key
                                             ;		tst.b	d1
   1187 FFFC0A72 678C                        		beq.s	.0010
   1188 FFFC0A74 4CDF 430E                   		movem.l	(a7)+,d1/d2/d3/a0/a1/a6	; restore regs
   1189 FFFC0A78                             .0015:
   1190 FFFC0A78 4E75                        		rts
                                             
                                             
   1193 FFFC0A7A FF FF                       		align	4
   1194 FFFC0A7C                             BallImage:
   1195 FFFC0A7C 01555540 00000000           	dc.l	%00000001010101010101010101000000,%00000000000000000000000000000000
   1196 FFFC0A84 05555550 00000000           	dc.l	%00000101010101010101010101010000,%00000000000000000000000000000000
   1197 FFFC0A8C 15555554 00000000           	dc.l	%00010101010101010101010101010100,%00000000000000000000000000000000
   1198 FFFC0A94 55000055 00000000           	dc.l	%01010101000000000000000001010101,%00000000000000000000000000000000
   1199 FFFC0A9C 54000015 00000000           	dc.l	%01010100000000000000000000010101,%00000000000000000000000000000000
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 21
bootrom.asm
   1200 FFFC0AA4 54000015 00000000           	dc.l	%01010100000000000000000000010101,%00000000000000000000000000000000
   1201 FFFC0AAC 54000015 00000000           	dc.l	%01010100000000000000000000010101,%00000000000000000000000000000000
   1202 FFFC0AB4 54000015 00000000           	dc.l	%01010100000000000000000000010101,%00000000000000000000000000000000
   1203 FFFC0ABC 54000015 00000000           	dc.l	%01010100000000000000000000010101,%00000000000000000000000000000000
   1204 FFFC0AC4 15000054 00000000           	dc.l	%00010101000000000000000001010100,%00000000000000000000000000000000
   1205 FFFC0ACC 05555550 00000000           	dc.l	%00000101010101010101010101010000,%00000000000000000000000000000000
   1206 FFFC0AD4 01555540 00000000           	dc.l	%00000001010101010101010101000000,%00000000000000000000000000000000
   1207 FFFC0ADC 00555500 00000000           	dc.l	%00000000010101010101010100000000,%00000000000000000000000000000000
   1208 FFFC0AE4 00000000 00000000           	dc.l	$00,$00
   1209 FFFC0AEC 00000000 00000000           	dc.l	$00,$00
   1210 FFFC0AF4                             XImage:
   1211 FFFC0AF4 50000050 00000000           	dc.l	%01010000000000000000000001010000,%00000000000000000000000000000000
   1212 FFFC0AFC 14000140 00000000           	dc.l	%00010100000000000000000101000000,%00000000000000000000000000000000
   1213 FFFC0B04 05000500 00000000           	dc.l	%00000101000000000000010100000000,%00000000000000000000000000000000
   1214 FFFC0B0C 01401400 00000000           	dc.l	%00000001010000000001010000000000,%00000000000000000000000000000000
   1215 FFFC0B14 00505000 00000000           	dc.l	%00000000010100000101000000000000,%00000000000000000000000000000000
   1216 FFFC0B1C 00154000 00000000           	dc.l	%00000000000101010100000000000000,%00000000000000000000000000000000
   1217 FFFC0B24 00050000 00000000           	dc.l	%00000000000001010000000000000000,%00000000000000000000000000000000
   1218 FFFC0B2C 00154000 00000000           	dc.l	%00000000000101010100000000000000,%00000000000000000000000000000000
   1219 FFFC0B34 00505000 00000000           	dc.l	%00000000010100000101000000000000,%00000000000000000000000000000000
   1220 FFFC0B3C 01401400 00000000           	dc.l	%00000001010000000001010000000000,%00000000000000000000000000000000
   1221 FFFC0B44 05000500 00000000           	dc.l	%00000101000000000000010100000000,%00000000000000000000000000000000
   1222 FFFC0B4C 14000140 00000000           	dc.l	%00010100000000000000000101000000,%00000000000000000000000000000000
   1223 FFFC0B54 50000050 00000000           	dc.l	%01010000000000000000000001010000,%00000000000000000000000000000000
   1224 FFFC0B5C 00000000 00000000           	dc.l	$00,$00
   1225 FFFC0B64 00000000 00000000           	dc.l	$00,$00
                                             	
                                             ;------------------------------------------------------------------------------
                                             ; Parameters:
                                             ;	a0			pointer to string
                                             ;	d1.w		x position
                                             ;	d2.w		y position
                                             ; Returns:
                                             ;	a0			points to byte after NULL character
                                             ;	d1.w		updated x position
                                             ; Trashes:
                                             ;	d0,a6
                                             ;------------------------------------------------------------------------------
                                             
   1239 FFFC0B6C                             DispStringAt:
   1240 FFFC0B6C                             .0003:
   1241 FFFC0B6C 7000                        		moveq	#0,d0					; zero out high order bits
   1242 FFFC0B6E 1018                        		move.b	(a0)+,d0				; get character from string into d0
   1243 FFFC0B70 6708                        		beq.s	.0002					; end of string ?
   1244 FFFC0B72 6100 FB5A                   		bsr		DispCharAt
   1245 FFFC0B76 5041                        		add.w	#8,d1					; increment xpos
   1246 FFFC0B78 60F2                        		bra.s	.0003
   1247 FFFC0B7A                             .0002:
   1248 FFFC0B7A 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display nybble in D1.B
                                             ;------------------------------------------------------------------------------
                                             ;
   1254 FFFC0B7C                             DisplayNybble:
   1255 FFFC0B7C 3F01                        		move.w	d1,-(a7)
   1256 FFFC0B7E 0201 000F                   		andi.b	#0xF,d1
   1257 FFFC0B82 0601 0030                   		addi.b	#'0',d1
   1258 FFFC0B86 0C01 0039                   		cmpi.b	#'9',d1
   1259 FFFC0B8A 6302                        		bls.s	dispnyb1
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 22
bootrom.asm
   1260 FFFC0B8C 5E01                        		addi.b	#7,d1
   1261 FFFC0B8E                             dispnyb1:
   1262 FFFC0B8E 6100 F6D8                   		bsr		DisplayChar
   1263 FFFC0B92 321F                        		move.w	(a7)+,d1
   1264 FFFC0B94 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display the byte in D1.B
                                             ;------------------------------------------------------------------------------
                                             ;
   1270 FFFC0B96                             DisplayByte:
   1271 FFFC0B96 3F01                        		move.w	d1,-(a7)
   1272 FFFC0B98 E819                        		ror.b	#4,d1
   1273 FFFC0B9A 6100 FFE0                   		bsr		DisplayNybble
   1274 FFFC0B9E E919                        		rol.b	#4,d1
   1275 FFFC0BA0 6100 FFDA                   		bsr		DisplayNybble
   1276 FFFC0BA4 321F                        		move.w	(a7)+,d1
   1277 FFFC0BA6 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display the 32 bit word in D1.L
                                             ;------------------------------------------------------------------------------
                                             ;
   1283 FFFC0BA8                             DisplayWord:
   1284 FFFC0BA8 E199                        		rol.l	#8,d1
   1285 FFFC0BAA 6100 FFEA                   		bsr		DisplayByte
   1286 FFFC0BAE E199                        		rol.l	#8,d1
   1287 FFFC0BB0 6100 FFE4                   		bsr		DisplayByte
   1288 FFFC0BB4 E199                        		rol.l	#8,d1
   1289 FFFC0BB6 6100 FFDE                   		bsr		DisplayByte
   1290 FFFC0BBA E199                        		rol.l	#8,d1
   1291 FFFC0BBC 6100 FFD8                   		bsr		DisplayByte
   1292 FFFC0BC0 4E75                        		rts
                                             
   1294 FFFC0BC2                             DisplayMem:
   1295 FFFC0BC2 123C 003A                   		move.b	#':',d1
   1296 FFFC0BC6 4EB9 FFFC 0268              		jsr		DisplayChar
   1297 FFFC0BCC 2208                        		move.l	a0,d1
   1298 FFFC0BCE 4EB9 FFFC 0BA8              		jsr		DisplayWord
   1299 FFFC0BD4 7407                        		moveq	#7,d2
   1300 FFFC0BD6                             dspmem1:
   1301 FFFC0BD6 123C 0020                   		move.b	#' ',d1
   1302 FFFC0BDA 4EB9 FFFC 0268              		jsr		DisplayChar
   1303 FFFC0BE0 1218                        		move.b	(a0)+,d1
   1304 FFFC0BE2 4EB9 FFFC 0B96              		jsr		DisplayByte
   1305 FFFC0BE8 51CA FFEC                   		dbra	d2,dspmem1
   1306 FFFC0BEC 4EF9 FFFC 0222              		jmp		CRLF
                                             
                                             ;==============================================================================
                                             ; Keyboard stuff
                                             ;
                                             ; KeyState2_
                                             ; 876543210
                                             ; ||||||||+ = shift
                                             ; |||||||+- = alt
                                             ; ||||||+-- = control
                                             ; |||||+--- = numlock
                                             ; ||||+---- = capslock
                                             ; |||+----- = scrolllock
                                             ; ||+------ =
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 23
bootrom.asm
                                             ; |+------- = 
                                             ; +-------- = extended
                                             ;
                                             ;==============================================================================
                                             
   1325 FFFC0BF2                             _KeybdInit:
   1326 FFFC0BF2 4239 0001 0426              		clr.b	_KeyState1
   1327 FFFC0BF8 4239 0001 0427              		clr.b	_KeyState2
   1328 FFFC0BFE 4E75                        		rts
                                             
   1330 FFFC0C00                             _KeybdGetStatus:
   1331 FFFC0C00 1239 FFDC 0001              		move.b	KEYBD+1,d1
   1332 FFFC0C06 4E75                        		rts
                                             
                                             ; Get the scancode from the keyboard port
                                             ;
   1336 FFFC0C08                             _KeybdGetScancode:
   1337 FFFC0C08 7200                        		moveq	#0,d1
   1338 FFFC0C0A 1239 FFDC 0000              		move.b	KEYBD,d1				; get the scan code
   1339 FFFC0C10 13FC 0000 FFDC 0001         		move.b	#0,KEYBD+1				; clear receive register
   1340 FFFC0C18 4E75                        		rts
                                             
                                             ; Recieve a byte from the keyboard, used after a command is sent to the
                                             ; keyboard in order to wait for a response.
                                             ;
   1345 FFFC0C1A                             KeybdRecvByte:
   1346 FFFC0C1A 2F03                        		move.l	d3,-(a7)
   1347 FFFC0C1C 363C 0064                   		move.w	#100,d3		; wait up to 1s
   1348 FFFC0C20                             .0003:
   1349 FFFC0C20 6100 FFDE                   		bsr		_KeybdGetStatus	; wait for response from keyboard
   1350 FFFC0C24 4A01                        		tst.b	d1
   1351 FFFC0C26 6B0E                        		bmi		.0004		; is input buffer full ? yes, branch
   1352 FFFC0C28 6100 02C4                   		bsr		Wait10ms		; wait a bit
   1353 FFFC0C2C 51CB FFF2                   		dbra	d3,.0003	; go back and try again
   1354 FFFC0C30 261F                        		move.l	(a7)+,d3
   1355 FFFC0C32 72FF                        		moveq	#-1,d1			; return -1
   1356 FFFC0C34 4E75                        		rts
   1357 FFFC0C36                             .0004:
   1358 FFFC0C36 6100 FFD0                   		bsr		_KeybdGetScancode
   1359 FFFC0C3A 261F                        		move.l	(a7)+,d3
   1360 FFFC0C3C 4E75                        		rts
                                             
                                             
                                             ; Wait until the keyboard transmit is complete
                                             ; Returns .CF = 1 if successful, .CF=0 timeout
                                             ;
   1366 FFFC0C3E                             KeybdWaitTx:
   1367 FFFC0C3E 48E7 3000                   		movem.l	d2/d3,-(a7)
   1368 FFFC0C42 7664                        		moveq	#100,d3		; wait a max of 1s
   1369 FFFC0C44                             .0001:
   1370 FFFC0C44 6100 FFBA                   		bsr		_KeybdGetStatus
   1371 FFFC0C48 0801 0006                   		btst	#6,d1		; check for transmit complete bit
   1372 FFFC0C4C 6610                        		bne	    .0002		; branch if bit set
   1373 FFFC0C4E 6100 029E                   		bsr		Wait10ms		; delay a little bit
   1374 FFFC0C52 51CB FFF0                   		dbra	d3,.0001	; go back and try again
   1375 FFFC0C56 4CDF 000C                   		movem.l	(a7)+,d2/d3
   1376 FFFC0C5A 72FF                        		moveq	#-1,d1		; return -1
   1377 FFFC0C5C 4E75                        		rts
   1378 FFFC0C5E                             .0002:
   1379 FFFC0C5E 4CDF 000C                   		movem.l	(a7)+,d2/d3
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 24
bootrom.asm
   1380 FFFC0C62 7200                        		moveq	#0,d1		; return 0
   1381 FFFC0C64 4E75                        		rts
                                             
                                             
                                             ;------------------------------------------------------------------------------
                                             ; get key pending status into d1.b
                                             ;------------------------------------------------------------------------------
                                             ;
   1388 FFFC0C66                             CheckForKey:
   1389 FFFC0C66 1239 FFDC 0001              		move.b	KEYBD+1,d1
   1390 FFFC0C6C 6A06                        		bpl.s	cfk1
   1391 FFFC0C6E 123C 0001                   		move.b	#1,d1
   1392 FFFC0C72 4E75                        		rts
   1393 FFFC0C74                             cfk1:
   1394 FFFC0C74 4201                        		clr.b	d1
   1395 FFFC0C76 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ;------------------------------------------------------------------------------
                                             
   1400 FFFC0C78                             GetKey:
   1401 FFFC0C78 6100 0022                   		bsr		KeybdGetCharWait
   1402 FFFC0C7C 0C39 0000 0001 0424         		cmpi.b	#0,KeybdEcho	; is keyboard echo on ?
   1403 FFFC0C84 670C                        		beq.s	gk1
   1404 FFFC0C86 0C01 000D                   		cmpi.b	#'\r',d1		; convert CR keystroke into CRLF
   1405 FFFC0C8A 6700 F596                   		beq		CRLF
   1406 FFFC0C8E 6100 F5D8                   		bsr		DisplayChar
   1407 FFFC0C92                             gk1:
   1408 FFFC0C92 4E75                        		rts
                                             
                                             
                                             ;------------------------------------------------------------------------------
                                             ;------------------------------------------------------------------------------
                                             
   1414 FFFC0C94                             KeybdGetCharNoWait:
   1415 FFFC0C94 4239 0001 0425              		clr.b	KeybdWaitFlag
   1416 FFFC0C9A 6008                        		bra		KeybdGetChar
                                             
   1418 FFFC0C9C                             KeybdGetCharWait:
   1419 FFFC0C9C 13FC FFFF 0001 0425         		move.b	#-1,KeybdWaitFlag
                                             
   1421 FFFC0CA4                             KeybdGetChar:
   1422 FFFC0CA4 48E7 3080                   		movem.l	d2/d3/a0,-(a7)
   1423 FFFC0CA8                             .0003:
   1424 FFFC0CA8 6100 FF56                   		bsr		_KeybdGetStatus			; check keyboard status for key available
   1425 FFFC0CAC 6B10                        		bmi		.0006					; yes, go process
   1426 FFFC0CAE 4A39 0001 0425              		tst.b	KeybdWaitFlag			; are we willing to wait for a key ?
   1427 FFFC0CB4 6BF2                        		bmi		.0003					; yes, branch back
   1428 FFFC0CB6 4CDF 010C                   		movem.l	(a7)+,d2/d3/a0
   1429 FFFC0CBA 72FF                        		moveq	#-1,d1					; flag no char available
   1430 FFFC0CBC 4E75                        		rts
   1431 FFFC0CBE                             .0006:
   1432 FFFC0CBE 6100 FF48                   		bsr		_KeybdGetScancode
   1433 FFFC0CC2                             .0001:
   1434 FFFC0CC2 33FC 0001 FFDC 0600         		move.w	#1,leds
   1435 FFFC0CCA B23C 00F0                   		cmp.b	#SC_KEYUP,d1
   1436 FFFC0CCE 6700 00CA                   		beq		.doKeyup
   1437 FFFC0CD2 B23C 00E0                   		cmp.b	#SC_EXTEND,d1
   1438 FFFC0CD6 6700 00CE                   		beq		.doExtend
   1439 FFFC0CDA B23C 0014                   		cmp.b	#SC_CTRL,d1
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 25
bootrom.asm
   1440 FFFC0CDE 6700 00D2                   		beq		.doCtrl
   1441 FFFC0CE2 B23C 0012                   		cmp.b	#SC_LSHIFT,d1
   1442 FFFC0CE6 6700 0134                   		beq		.doShift
   1443 FFFC0CEA B23C 0059                   		cmp.b	#SC_RSHIFT,d1
   1444 FFFC0CEE 6700 012C                   		beq		.doShift
   1445 FFFC0CF2 B23C 0077                   		cmp.b	#SC_NUMLOCK,d1
   1446 FFFC0CF6 6700 014C                   		beq		.doNumLock
   1447 FFFC0CFA B23C 0058                   		cmp.b	#SC_CAPSLOCK,d1
   1448 FFFC0CFE 6700 0154                   		beq		.doCapsLock
   1449 FFFC0D02 B23C 007E                   		cmp.b	#SC_SCROLLLOCK,d1
   1450 FFFC0D06 6700 015C                   		beq		.doScrollLock
   1451 FFFC0D0A B23C 0011                   		cmp.b   #SC_ALT,d1
   1452 FFFC0D0E 6700 00CA                   		beq     .doAlt
   1453 FFFC0D12 1439 0001 0426              		move.b	_KeyState1,d2			; check key up/down
   1454 FFFC0D18 13FC 0000 0001 0426         		move.b	#0,_KeyState1			; clear keyup status
   1455 FFFC0D20 4A02                        		tst.b	d2
   1456 FFFC0D22 6684                        		bne	    .0003					; ignore key up
   1457 FFFC0D24 B23C 000D                   		cmp.b   #SC_TAB,d1
   1458 FFFC0D28 6700 00D8                   		beq     .doTab
   1459 FFFC0D2C                             .0013:
   1460 FFFC0D2C 1439 0001 0427              		move.b	_KeyState2,d2
   1461 FFFC0D32 6A1E                        		bpl		.0010					; is it extended code ?
   1462 FFFC0D34 0202 007F                   		and.b	#$7F,d2					; clear extended bit
   1463 FFFC0D38 13C2 0001 0427              		move.b	d2,_KeyState2
   1464 FFFC0D3E 13FC 0000 0001 0426         		move.b	#0,_KeyState1			; clear keyup
   1465 FFFC0D46 41F9 FFFC 117E              		lea		_keybdExtendedCodes,a0
   1466 FFFC0D4C 1230 1000                   		move.b	(a0,d1.w),d1
   1467 FFFC0D50 603A                        		bra		.0008
   1468 FFFC0D52                             .0010:
   1469 FFFC0D52 0802 0002                   		btst	#2,d2					; is it CTRL code ?
   1470 FFFC0D56 6710                        		beq		.0009
   1471 FFFC0D58 0241 007F                   		and.w	#$7F,d1
   1472 FFFC0D5C 41F9 FFFC 10FE              		lea		_keybdControlCodes,a0
   1473 FFFC0D62 1230 1000                   		move.b	(a0,d1.w),d1
   1474 FFFC0D66 6024                        		bra		.0008
   1475 FFFC0D68                             .0009:
   1476 FFFC0D68 0802 0000                   		btst	#0,d2					; is it shift down ?
   1477 FFFC0D6C 670C                        		beq  	.0007
   1478 FFFC0D6E 41F9 FFFC 0FFE              		lea		_shiftedScanCodes,a0
   1479 FFFC0D74 1230 1000                   		move.b	(a0,d1.w),d1
   1480 FFFC0D78 6012                        		bra		.0008
   1481 FFFC0D7A                             .0007:
   1482 FFFC0D7A 41F9 FFFC 0EFE              		lea		_unshiftedScanCodes,a0
   1483 FFFC0D80 1230 1000                   		move.b	(a0,d1.w),d1
   1484 FFFC0D84 33FC 0202 FFDC 0600         		move.w	#$0202,leds
   1485 FFFC0D8C                             .0008:
   1486 FFFC0D8C 33FC 0303 FFDC 0600         		move.w	#$0303,leds
   1487 FFFC0D94 4CDF 010C                   		movem.l	(a7)+,d2/d3/a0
   1488 FFFC0D98 4E75                        		rts
   1489 FFFC0D9A                             .doKeyup:
   1490 FFFC0D9A 13FC FFFF 0001 0426         		move.b	#-1,_KeyState1
   1491 FFFC0DA2 6000 FF04                   		bra		.0003
   1492 FFFC0DA6                             .doExtend:
   1493 FFFC0DA6 0039 0080 0001 0427         		or.b	#$80,_KeyState2
   1494 FFFC0DAE 6000 FEF8                   		bra		.0003
   1495 FFFC0DB2                             .doCtrl:
   1496 FFFC0DB2 1239 0001 0426              		move.b	_KeyState1,d1
   1497 FFFC0DB8 4239 0001 0426              		clr.b	_KeyState1
   1498 FFFC0DBE 4A01                        		tst.b	d1
   1499 FFFC0DC0 6A0C                        		bpl.s	.0004
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 26
bootrom.asm
   1500 FFFC0DC2 08B9 0002 0001 0427         		bclr	#2,_KeyState2
   1501 FFFC0DCA 6000 FEDC                   		bra		.0003
   1502 FFFC0DCE                             .0004:
   1503 FFFC0DCE 08F9 0002 0001 0427         		bset	#2,_KeyState2
   1504 FFFC0DD6 6000 FED0                   		bra		.0003
   1505 FFFC0DDA                             .doAlt:
   1506 FFFC0DDA 1239 0001 0426              		move.b	_KeyState1,d1
   1507 FFFC0DE0 4239 0001 0426              		clr.b	_KeyState1
   1508 FFFC0DE6 4A01                        		tst.b	d1
   1509 FFFC0DE8 6A0C                        		bpl		.0011
   1510 FFFC0DEA 08B9 0001 0001 0427         		bclr	#1,_KeyState2
   1511 FFFC0DF2 6000 FEB4                   		bra		.0003
   1512 FFFC0DF6                             .0011:
   1513 FFFC0DF6 08F9 0001 0001 0427         		bset	#1,_KeyState2
   1514 FFFC0DFE 6000 FEA8                   		bra		.0003
   1515 FFFC0E02                             .doTab:
   1516 FFFC0E02 2F01                        		move.l	d1,-(a7)
   1517 FFFC0E04 1239 0001 0427              	    move.b  _KeyState2,d1
   1518 FFFC0E0A 0801 0000                   	    btst	#0,d1                 ; is ALT down ?
   1519 FFFC0E0E 6706                        	    beq     .0012
                                             ;    	inc     _iof_switch
   1521 FFFC0E10 221F                        	    move.l	(a7)+,d1
   1522 FFFC0E12 6000 FE94                   	    bra     .0003
   1523 FFFC0E16                             .0012:
   1524 FFFC0E16 221F                        	    move.l	(a7)+,d1
   1525 FFFC0E18 6000 FF12                   	    bra     .0013
   1526 FFFC0E1C                             .doShift:
   1527 FFFC0E1C 1239 0001 0426              		move.b	_KeyState1,d1
   1528 FFFC0E22 4239 0001 0426              		clr.b	_KeyState1
   1529 FFFC0E28 4A01                        		tst.b	d1
   1530 FFFC0E2A 6A0C                        		bpl.s	.0005
   1531 FFFC0E2C 08B9 0000 0001 0427         		bclr	#0,_KeyState2
   1532 FFFC0E34 6000 FE72                   		bra		.0003
   1533 FFFC0E38                             .0005:
   1534 FFFC0E38 08F9 0000 0001 0427         		bset	#0,_KeyState2
   1535 FFFC0E40 6000 FE66                   		bra		.0003
   1536 FFFC0E44                             .doNumLock:
   1537 FFFC0E44 0879 0004 0001 0427         		bchg	#4,_KeyState2
   1538 FFFC0E4C 6100 0026                   		bsr		KeybdSetLEDStatus
   1539 FFFC0E50 6000 FE56                   		bra		.0003
   1540 FFFC0E54                             .doCapsLock:
   1541 FFFC0E54 0879 0005 0001 0427         		bchg	#5,_KeyState2
   1542 FFFC0E5C 6100 0016                   		bsr		KeybdSetLEDStatus
   1543 FFFC0E60 6000 FE46                   		bra		.0003
   1544 FFFC0E64                             .doScrollLock:
   1545 FFFC0E64 0879 0006 0001 0427         		bchg	#6,_KeyState2
   1546 FFFC0E6C 6100 0006                   		bsr		KeybdSetLEDStatus
   1547 FFFC0E70 6000 FE36                   		bra		.0003
                                             
   1549 FFFC0E74                             KeybdSetLEDStatus:
   1550 FFFC0E74 48E7 3000                   		movem.l	d2/d3,-(a7)
   1551 FFFC0E78 4239 0001 0428              		clr.b	KeybdLEDs
   1552 FFFC0E7E 0839 0004 0001 0427         		btst	#4,_KeyState2
   1553 FFFC0E86 6708                        		beq.s	.0002
   1554 FFFC0E88 13FC 0002 0001 0428         		move.b	#2,KeybdLEDs
   1555 FFFC0E90                             .0002:
   1556 FFFC0E90 0839 0005 0001 0427         		btst	#5,_KeyState2
   1557 FFFC0E98 6708                        		beq.s	.0003
   1558 FFFC0E9A 08F9 0002 0001 0428         		bset	#2,KeybdLEDs
   1559 FFFC0EA2                             .0003:
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 27
bootrom.asm
   1560 FFFC0EA2 0839 0006 0001 0427         		btst	#6,_KeyState2
   1561 FFFC0EAA 6708                        		beq.s	.0004
   1562 FFFC0EAC 08F9 0000 0001 0428         		bset	#0,KeybdLEDs
   1563 FFFC0EB4                             .0004:
   1564 FFFC0EB4 123C 00ED                   		move.b	#$ED,d1
   1565 FFFC0EB8 6100 002C                   		bsr		KeybdSendByte
   1566 FFFC0EBC 6100 FD80                   		bsr		KeybdWaitTx
   1567 FFFC0EC0 6100 FD58                   		bsr		KeybdRecvByte
   1568 FFFC0EC4 4A01                        		tst.b	d1
   1569 FFFC0EC6 6B18                        		bmi		.0001
   1570 FFFC0EC8 B2BC 0000 00FA              		cmp		#$FA,d1
   1571 FFFC0ECE 1239 0001 0428              		move.b	KeybdLEDs,d1
   1572 FFFC0ED4 6100 0010                   		bsr		KeybdSendByte
   1573 FFFC0ED8 6100 FD64                   		bsr		KeybdWaitTx
   1574 FFFC0EDC 6100 FD3C                   		bsr		KeybdRecvByte
   1575 FFFC0EE0                             .0001:
   1576 FFFC0EE0 4CDF 000C                   		movem.l	(a7)+,d2/d3
   1577 FFFC0EE4 4E75                        		rts
                                             
   1579 FFFC0EE6                             KeybdSendByte:
   1580 FFFC0EE6 13C1 FFDC 0000              		move.b	d1,KEYBD
   1581 FFFC0EEC 4E75                        		rts
                                             	
   1583 FFFC0EEE                             Wait10ms:
   1584 FFFC0EEE 2F03                        		move.l	d3,-(a7)
   1585 FFFC0EF0 263C 0000 03E8              		move.l	#1000,d3
   1586 FFFC0EF6                             .0001:
   1587 FFFC0EF6 51CB FFFE                   		dbra	d3,.0001
   1588 FFFC0EFA 261F                        		move.l	(a7)+,d3
   1589 FFFC0EFC 4E75                        		rts
                                             
                                             
                                             ;--------------------------------------------------------------------------
                                             ; PS2 scan codes to ascii conversion tables.
                                             ;--------------------------------------------------------------------------
                                             ;
   1596 FFFC0EFE                             _unshiftedScanCodes:
   1597 FFFC0EFE 2E A9 2E A5 A3 A1 A2 AC     	dc.b	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
                                             
   1599 FFFC0F06 2E AA A8 A6 A4 09 60 2E     	dc.b	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
                                             
   1601 FFFC0F0E 2E 2E 2E 2E 2E 71 31 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
                                             
   1603 FFFC0F16 2E 2E 7A 73 61 77 32 2E     	dc.b	$2e,$2e,$7a,$73,$61,$77,$32,$2e
                                             
   1605 FFFC0F1E 2E 63 78 64 65 34 33 2E     	dc.b	$2e,$63,$78,$64,$65,$34,$33,$2e
                                             
   1607 FFFC0F26 2E 20 76 66 74 72 35 2E     	dc.b	$2e,$20,$76,$66,$74,$72,$35,$2e
                                             
   1609 FFFC0F2E 2E 6E 62 68 67 79 36 2E     	dc.b	$2e,$6e,$62,$68,$67,$79,$36,$2e
                                             
   1611 FFFC0F36 2E 2E 6D 6A 75 37 38 2E     	dc.b	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
                                             
   1613 FFFC0F3E 2E 2C 6B 69 6F 30 39 2E     	dc.b	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
                                             
   1615 FFFC0F46 2E 2E 2F 6C 3B 70 2D 2E     	dc.b	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
                                             
   1617 FFFC0F4E 2E 2E 27 2E 5B 3D 2E 2E     	dc.b	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
                                             
   1619 FFFC0F56 AD 2E 0D 5D 2E 5C 2E 2E     	dc.b	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 28
bootrom.asm
                                             
   1621 FFFC0F5E 2E 2E 2E 2E 2E 2E 08 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                             
   1623 FFFC0F66 2E 95 2E 93 94 2E 2E 2E     	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
                                             
   1625 FFFC0F6E 98 7F 92 2E 91 90 1B AF     	dc.b	$98,$7f,$92,$2e,$91,$90,$1b,$af
                                             
   1627 FFFC0F76 AB 2E 97 2E 2E 96 AE 2E     	dc.b	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
                                             
                                             
   1630 FFFC0F7E 2E 2E 2E A7 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
                                             
   1632 FFFC0F86 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1634 FFFC0F8E 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1636 FFFC0F96 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1638 FFFC0F9E 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1640 FFFC0FA6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1642 FFFC0FAE 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1644 FFFC0FB6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1646 FFFC0FBE 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1648 FFFC0FC6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1650 FFFC0FCE 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1652 FFFC0FD6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1654 FFFC0FDE 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1656 FFFC0FE6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1658 FFFC0FEE 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1660 FFFC0FF6 2E 2E FA 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
                                             
                                             
   1663 FFFC0FFE                             _shiftedScanCodes:
   1664 FFFC0FFE 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1666 FFFC1006 2E 2E 2E 2E 2E 09 7E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
                                             
   1668 FFFC100E 2E 2E 2E 2E 2E 51 21 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
                                             
   1670 FFFC1016 2E 2E 5A 53 41 57 40 2E     	dc.b	$2e,$2e,$5a,$53,$41,$57,$40,$2e
                                             
   1672 FFFC101E 2E 43 58 44 45 24 23 2E     	dc.b	$2e,$43,$58,$44,$45,$24,$23,$2e
                                             
   1674 FFFC1026 2E 20 56 46 54 52 25 2E     	dc.b	$2e,$20,$56,$46,$54,$52,$25,$2e
                                             
   1676 FFFC102E 2E 4E 42 48 47 59 5E 2E     	dc.b	$2e,$4e,$42,$48,$47,$59,$5e,$2e
                                             
   1678 FFFC1036 2E 2E 4D 4A 55 26 2A 2E     	dc.b	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
                                             
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 29
bootrom.asm
   1680 FFFC103E 2E 3C 4B 49 4F 29 28 2E     	dc.b	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
                                             
   1682 FFFC1046 2E 3E 3F 4C 3A 50 5F 2E     	dc.b	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
                                             
   1684 FFFC104E 2E 2E 22 2E 7B 2B 2E 2E     	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
                                             
   1686 FFFC1056 2E 2E 0D 7D 2E 7C 2E 2E     	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
                                             
   1688 FFFC105E 2E 2E 2E 2E 2E 2E 08 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                             
   1690 FFFC1066 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1692 FFFC106E 2E 7F 2E 2E 2E 2E 1B 2E     	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
                                             
   1694 FFFC1076 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
                                             
   1697 FFFC107E 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1699 FFFC1086 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1701 FFFC108E 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1703 FFFC1096 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1705 FFFC109E 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1707 FFFC10A6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1709 FFFC10AE 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1711 FFFC10B6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1713 FFFC10BE 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1715 FFFC10C6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1717 FFFC10CE 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1719 FFFC10D6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1721 FFFC10DE 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1723 FFFC10E6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1725 FFFC10EE 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1727 FFFC10F6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
                                             
                                             ; control
   1731 FFFC10FE                             _keybdControlCodes:
   1732 FFFC10FE 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1734 FFFC1106 2E 2E 2E 2E 2E 09 7E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
                                             
   1736 FFFC110E 2E 2E 2E 2E 2E 11 21 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
                                             
   1738 FFFC1116 2E 2E 1A 13 01 17 40 2E     	dc.b	$2e,$2e,$1a,$13,$01,$17,$40,$2e
                                             
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 30
bootrom.asm
   1740 FFFC111E 2E 03 18 04 05 24 23 2E     	dc.b	$2e,$03,$18,$04,$05,$24,$23,$2e
                                             
   1742 FFFC1126 2E 20 16 06 14 12 25 2E     	dc.b	$2e,$20,$16,$06,$14,$12,$25,$2e
                                             
   1744 FFFC112E 2E 0E 02 08 07 19 5E 2E     	dc.b	$2e,$0e,$02,$08,$07,$19,$5e,$2e
                                             
   1746 FFFC1136 2E 2E 0D 0A 15 26 2A 2E     	dc.b	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
                                             
   1748 FFFC113E 2E 3C 0B 09 0F 29 28 2E     	dc.b	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
                                             
   1750 FFFC1146 2E 3E 3F 0C 3A 10 5F 2E     	dc.b	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
                                             
   1752 FFFC114E 2E 2E 22 2E 7B 2B 2E 2E     	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
                                             
   1754 FFFC1156 2E 2E 0D 7D 2E 7C 2E 2E     	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
                                             
   1756 FFFC115E 2E 2E 2E 2E 2E 2E 08 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                             
   1758 FFFC1166 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1760 FFFC116E 2E 7F 2E 2E 2E 2E 1B 2E     	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
                                             
   1762 FFFC1176 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
                                             
   1765 FFFC117E                             _keybdExtendedCodes:
   1766 FFFC117E 2E 2E 2E 2E A3 A1 A2 2E     	dc.b	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
                                             
   1768 FFFC1186 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1770 FFFC118E 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1772 FFFC1196 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1774 FFFC119E 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1776 FFFC11A6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1778 FFFC11AE 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1780 FFFC11B6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1782 FFFC11BE 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1784 FFFC11C6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1786 FFFC11CE 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1788 FFFC11D6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1790 FFFC11DE 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1792 FFFC11E6 2E 95 2E 93 94 2E 2E 2E     	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
                                             
   1794 FFFC11EE 98 99 92 2E 91 90 2E 2E     	dc.b	$98,$99,$92,$2e,$91,$90,$2e,$2e
                                             
   1796 FFFC11F6 2E 2E 97 2E 2E 96 2E 2E     	dc.b	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
                                             
                                             
                                             
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 31
bootrom.asm
                                             ;==============================================================================
                                             ;==============================================================================
                                             ; Monitor
                                             ;==============================================================================
                                             ;==============================================================================
                                             ;
   1806 FFFC11FE                             StartMon:
   1807 FFFC11FE                             Monitor:
                                             ;	lea		STACK,a7		; reset the stack pointer
   1809 FFFC11FE 4239 0001 0424              		clr.b	KeybdEcho		; turn off keyboard echo
   1810 FFFC1204                             PromptLn:
   1811 FFFC1204 6100 F01C                   		bsr		CRLF
   1812 FFFC1208 123C 0024                   		move.b	#'$',d1
   1813 FFFC120C 6100 F05A                   		bsr		DisplayChar
                                             
                                             ; Get characters until a CR is keyed
                                             ;
   1817 FFFC1210                             Prompt3:
   1818 FFFC1210 6100 FA66                   		bsr		GetKey
   1819 FFFC1214 0C01 000D                   		cmpi.b	#CR,d1
   1820 FFFC1218 6706                        		beq.s	Prompt1
   1821 FFFC121A 6100 F04C                   		bsr		DisplayChar
   1822 FFFC121E 60F0                        		bra.s	Prompt3
                                             
                                             ; Process the screen line that the CR was keyed on
                                             ;
   1826 FFFC1220                             Prompt1:
   1827 FFFC1220 4239 0001 0419              		clr.b	CursorCol		; go back to the start of the line
   1828 FFFC1226 6100 F010                   		bsr		CalcScreenLoc	; a0 = screen memory location
   1829 FFFC122A 1218                        		move.b	(a0)+,d1
   1830 FFFC122C 0C01 0024                   		cmpi.b	#'$',d1			; skip over '$' prompt character
   1831 FFFC1230 6602                        		bne.s	Prompt2
   1832 FFFC1232 1218                        		move.b	(a0)+,d1
                                             	
                                             ; Dispatch based on command character
                                             ;
   1836 FFFC1234                             Prompt2:
   1837 FFFC1234 0C01 0061                   		cmpi.b	#'a',d1
   1838 FFFC1238 6700 0A9C                   		beq		AudioInputTest
   1839 FFFC123C 0C01 0062                   		cmpi.b	#'b',d1
   1840 FFFC1240 6700 F6CA                   		beq		BouncingBalls
   1841 FFFC1244 0C01 0067                   		cmpi.b	#'g',d1
   1842 FFFC1248 6700 078E                   		beq		GraphicsDemo
   1843 FFFC124C 0C01 003A                   		cmpi.b	#':',d1			; $: - edit memory
   1844 FFFC1250 6700 0206                   		beq		EditMem
   1845 FFFC1254 0C01 0044                   		cmpi.b	#'D',d1			; $D - dump memory
   1846 FFFC1258 6700 026C                   		beq		DumpMem
   1847 FFFC125C 0C01 0046                   		cmpi.b	#'F',d1
   1848 FFFC1260 6700 019C                   		beq		FillMem
   1849 FFFC1264 0C01 0042                   		cmpi.b	#'B',d1			; $B - start tiny basic
   1850 FFFC1268 6606                        		bne.s	.0001
   1851 FFFC126A 4EF9 FFFC C000              		jmp		$FFFCC000
   1852 FFFC1270                             .0001:
   1853 FFFC1270 0C01 004A                   		cmpi.b	#'J',d1			; $J - execute code
   1854 FFFC1274 6700 0240                   		beq		ExecuteCode
   1855 FFFC1278 0C01 004C                   		cmpi.b	#'L',d1			; $L - load S19 file
   1856 FFFC127C 6700 0472                   		beq		LoadS19
   1857 FFFC1280 0C01 003F                   		cmpi.b	#'?',d1			; $? - display help
   1858 FFFC1284 672A                        		beq		DisplayHelp
   1859 FFFC1286 0C01 0043                   		cmpi.b	#'C',d1			; $C - clear screen
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 32
bootrom.asm
   1860 FFFC128A 6704                        		beq		TestCLS
   1861 FFFC128C 6000 FF70                   		bra		Monitor
                                             
   1863 FFFC1290                             TestCLS:
   1864 FFFC1290 1218                        		move.b	(a0)+,d1
   1865 FFFC1292 5282                        		addq	#1,d2
   1866 FFFC1294 0C01 004C                   		cmpi.b	#'L',d1
   1867 FFFC1298 6600 FF64                   		bne		Monitor
   1868 FFFC129C 1218                        		move.b	(a0)+,d1
   1869 FFFC129E 5282                        		addq	#1,d2
   1870 FFFC12A0 0C01 0053                   		cmpi.b	#'S',d1
   1871 FFFC12A4 6600 FF58                   		bne		Monitor
   1872 FFFC12A8 6100 02DC                   		bsr		ClearScreen
   1873 FFFC12AC 6000 FF50                   		bra		Monitor
                                             	
   1875 FFFC12B0                             DisplayHelp:
   1876 FFFC12B0 43F9 FFFC 12C0              		lea		HelpMsg,a1
   1877 FFFC12B6 4EB9 FFFC 043A              		jsr		DisplayString
   1878 FFFC12BC 6000 FF40                   		bra		Monitor
                                             
   1880 FFFC12C0                             HelpMsg:
   1881 FFFC12C0 3F 20 3D 20 44 69 73 70     		dc.b	"? = Display help",CR,LF
   1882 FFFC12C8 6C 61 79 20 68 65 6C 70     
   1883 FFFC12D0 0D 0A                       
   1884 FFFC12D2 43 4C 53 20 3D 20 63 6C     		dc.b	"CLS = clear screen",CR,LF
   1885 FFFC12DA 65 61 72 20 73 63 72 65     
   1886 FFFC12E2 65 6E 0D 0A                 
   1887 FFFC12E6 3A 20 3D 20 45 64 69 74     		dc.b	": = Edit memory bytes",CR,LF
   1888 FFFC12EE 20 6D 65 6D 6F 72 79 20     
   1889 FFFC12F6 62 79 74 65 73 0D 0A        
   1890 FFFC12FD 46 20 3D 20 46 69 6C 6C     		dc.b	"F = Fill memory",CR,LF
   1891 FFFC1305 20 6D 65 6D 6F 72 79 0D     
   1892 FFFC130D 0A                          
   1893 FFFC130E 4C 20 3D 20 4C 6F 61 64     		dc.b	"L = Load S19 file",CR,LF
   1894 FFFC1316 20 53 31 39 20 66 69 6C     
   1895 FFFC131E 65 0D 0A                    
   1896 FFFC1321 44 20 3D 20 44 75 6D 70     		dc.b	"D = Dump memory",CR,LF
   1897 FFFC1329 20 6D 65 6D 6F 72 79 0D     
   1898 FFFC1331 0A                          
   1899 FFFC1332 42 20 3D 20 73 74 61 72     		dc.b	"B = start tiny basic",CR,LF
   1900 FFFC133A 74 20 74 69 6E 79 20 62     
   1901 FFFC1342 61 73 69 63 0D 0A           
   1902 FFFC1348 4A 20 3D 20 4A 75 6D 70     		dc.b	"J = Jump to code",CR,LF,0
   1903 FFFC1350 20 74 6F 20 63 6F 64 65     
   1904 FFFC1358 0D 0A 00                    
   1905 FFFC135B FF                         		even
                                             
                                             ;------------------------------------------------------------------------------
                                             ; This routine borrowed from Gordo's Tiny Basic interpreter.
                                             ; Used to fetch a command line. (Not currently used).
                                             ;
                                             ; d0.b	- command prompt
                                             ;------------------------------------------------------------------------------
                                             
   1914 FFFC135C                             GetCmdLine:
   1915 FFFC135C 6100 EF0A                   		bsr		DisplayChar		; display prompt
   1916 FFFC1360 103C 0020                   		move.b	#' ',d0
   1917 FFFC1364 6100 EF02                   		bsr		DisplayChar
   1918 FFFC1368 41F9 0001 0800              		lea		CmdBuf,a0
   1919 FFFC136E                             .0001:
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 33
bootrom.asm
   1920 FFFC136E 6100 F908                   		bsr		GetKey
   1921 FFFC1372 B03C 0008                   		cmp.b	#CTRLH,d0
   1922 FFFC1376 6726                        		beq.s	.0003
   1923 FFFC1378 B03C 0018                   		cmp.b	#CTRLX,d0
   1924 FFFC137C 6744                        		beq.s	.0004
   1925 FFFC137E B03C 000D                   		cmp.b	#CR,d0
   1926 FFFC1382 6706                        		beq.s	.0002
   1927 FFFC1384 B03C 0020                   		cmp.b	#' ',d0
   1928 FFFC1388 65E4                        		bcs.s	.0001
   1929 FFFC138A                             .0002:
   1930 FFFC138A 10C0                        		move.b	d0,(a0)+
   1931 FFFC138C 6100 EEDA                   		bsr		DisplayChar
   1932 FFFC1390 B03C 000D                   		cmp.b	#CR,d0
   1933 FFFC1394 675E                        		beq		.0007
   1934 FFFC1396 B1FC 0001 084F              		cmp.l	#CmdBufEnd-1,a0
   1935 FFFC139C 65D0                        		bcs.s	.0001
   1936 FFFC139E                             .0003:
   1937 FFFC139E 103C 0008                   		move.b	#CTRLH,d0
   1938 FFFC13A2 6100 EEC4                   		bsr		DisplayChar
   1939 FFFC13A6 103C 0020                   		move.b	#' ',d0
   1940 FFFC13AA 6100 EEBC                   		bsr		DisplayChar
   1941 FFFC13AE B1FC 0001 0800              		cmp.l	#CmdBuf,a0
   1942 FFFC13B4 63B8                        		bls.s	.0001
   1943 FFFC13B6 103C 0008                   		move.b	#CTRLH,d0
   1944 FFFC13BA 6100 EEAC                   		bsr		DisplayChar
   1945 FFFC13BE 5388                        		subq.l	#1,a0
   1946 FFFC13C0 60AC                        		bra.s	.0001
   1947 FFFC13C2                             .0004:
   1948 FFFC13C2 2208                        		move.l	a0,d1
   1949 FFFC13C4 0481 0001 0800              		sub.l	#CmdBuf,d1
   1950 FFFC13CA 671E                        		beq.s	.0006
   1951 FFFC13CC 5381                        		subq	#1,d1
   1952 FFFC13CE                             .0005:
   1953 FFFC13CE 103C 0008                   		move.b	#CTRLH,d0
   1954 FFFC13D2 6100 EE94                   		bsr		DisplayChar
   1955 FFFC13D6 103C 0020                   		move.b	#' ',d0
   1956 FFFC13DA 6100 EE8C                   		bsr		DisplayChar
   1957 FFFC13DE 103C 0008                   		move.b	#CTRLH,d0
   1958 FFFC13E2 6100 EE84                   		bsr		DisplayChar
   1959 FFFC13E6 51C9 FFE6                   		dbra	d1,.0005
   1960 FFFC13EA                             .0006:
   1961 FFFC13EA 41F9 0001 0800              		lea		CmdBuf,a0
   1962 FFFC13F0 6000 FF7C                   		bra		.0001
   1963 FFFC13F4                             .0007:
   1964 FFFC13F4 103C 000A                   		move.b	#LF,d0
   1965 FFFC13F8 6100 EE6E                   		bsr		DisplayChar
   1966 FFFC13FC 4E75                        		rts
                                             
                                             		
                                             ;------------------------------------------------------------------------------
                                             ; Fill memory
                                             ; FB = fill bytes		FB 00000010 100 FF	; fill starting at 10 for 256 bytes
                                             ; FW = fill words
                                             ; FL = fill longs
                                             ; F = fill bytes
                                             ;------------------------------------------------------------------------------
                                             ;
   1977 FFFC13FE                             FillMem:
   1978 FFFC13FE 1218                        		move.b	(a0)+,d1
                                             		;bsr		ScreenToAscii
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 34
bootrom.asm
   1980 FFFC1400 1801                        		move.b	d1,d4			; d4 = fill size
   1981 FFFC1402 6100 0044                   		bsr		ignBlanks
   1982 FFFC1406 6100 00F8                   		bsr		GetHexNumber
   1983 FFFC140A 2241                        		move.l	d1,a1			; a1 = start
   1984 FFFC140C 6100 003A                   		bsr		ignBlanks
   1985 FFFC1410 6100 00EE                   		bsr		GetHexNumber
   1986 FFFC1414 2601                        		move.l	d1,d3			; d3 = count
   1987 FFFC1416 6100 0030                   		bsr		ignBlanks
   1988 FFFC141A 6100 00E4                   		bsr		GetHexNumber	; fill value
   1989 FFFC141E 0C04 004C                   		cmpi.b	#'L',d4
   1990 FFFC1422 660A                        		bne		fmem1
   1991 FFFC1424                             fmemL:
   1992 FFFC1424 22C1                        		move.l	d1,(a1)+
   1993 FFFC1426 5383                        		sub.l	#1,d3
   1994 FFFC1428 66FA                        		bne.s	fmemL
   1995 FFFC142A 6000 FDD2                   		bra		Monitor
   1996 FFFC142E                             fmem1
   1997 FFFC142E 0C04 0057                   		cmpi.b	#'W',d4
   1998 FFFC1432 660A                        		bne		fmemB
   1999 FFFC1434                             fmemW:
   2000 FFFC1434 32C1                        		move.w	d1,(a1)+
   2001 FFFC1436 5383                        		sub.l	#1,d3
   2002 FFFC1438 66FA                        		bne.s	fmemW
   2003 FFFC143A 6000 FDC2                   		bra		Monitor
   2004 FFFC143E                             fmemB:
   2005 FFFC143E 12C1                        		move.b	d1,(a1)+
   2006 FFFC1440 5383                        		sub.l	#1,d3
   2007 FFFC1442 66FA                        		bne.s	fmemB
   2008 FFFC1444 6000 FDB8                   		bra		Monitor
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Modifies:
                                             ;	a0	- text pointer
                                             ;------------------------------------------------------------------------------
                                             ;
   2015 FFFC1448                             ignBlanks:
   2016 FFFC1448 3F01                        		move.w	d1,-(a7)
   2017 FFFC144A 1218                        		move.b	(a0)+,d1
   2018 FFFC144C 0C01 0020                   		cmpi.b	#' ',d1
   2019 FFFC1450 67F6                        		beq.s	ignBlanks
   2020 FFFC1452 5388                        		subq	#1,a0
   2021 FFFC1454 321F                        		move.w	(a7)+,d1
   2022 FFFC1456 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Edit memory byte.
                                             ;------------------------------------------------------------------------------
                                             ;
   2028 FFFC1458                             EditMem:
   2029 FFFC1458 6100 FFEE                   		bsr		ignBlanks
   2030 FFFC145C 6100 00A2                   		bsr		GetHexNumber
   2031 FFFC1460 2241                        		move.l	d1,a1
   2032 FFFC1462                             edtmem1:
   2033 FFFC1462 6100 FFE4                   		bsr		ignBlanks
   2034 FFFC1466 6100 0098                   		bsr		GetHexNumber
   2035 FFFC146A 12C1                        		move.b	d1,(a1)+
   2036 FFFC146C 6100 FFDA                   		bsr		ignBlanks
   2037 FFFC1470 6100 008E                   		bsr		GetHexNumber
   2038 FFFC1474 12C1                        		move.b	d1,(a1)+
   2039 FFFC1476 6100 FFD0                   		bsr		ignBlanks
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 35
bootrom.asm
   2040 FFFC147A 6100 0084                   		bsr		GetHexNumber
   2041 FFFC147E 12C1                        		move.b	d1,(a1)+
   2042 FFFC1480 6100 FFC6                   		bsr		ignBlanks
   2043 FFFC1484 6100 007A                   		bsr		GetHexNumber
   2044 FFFC1488 12C1                        		move.b	d1,(a1)+
   2045 FFFC148A 6100 FFBC                   		bsr		ignBlanks
   2046 FFFC148E 6100 0070                   		bsr		GetHexNumber
   2047 FFFC1492 12C1                        		move.b	d1,(a1)+
   2048 FFFC1494 6100 FFB2                   		bsr		ignBlanks
   2049 FFFC1498 6100 0066                   		bsr		GetHexNumber
   2050 FFFC149C 12C1                        		move.b	d1,(a1)+
   2051 FFFC149E 6100 FFA8                   		bsr		ignBlanks
   2052 FFFC14A2 6100 005C                   		bsr		GetHexNumber
   2053 FFFC14A6 12C1                        		move.b	d1,(a1)+
   2054 FFFC14A8 6100 FF9E                   		bsr		ignBlanks
   2055 FFFC14AC 6100 0052                   		bsr		GetHexNumber
   2056 FFFC14B0 12C1                        		move.b	d1,(a1)+
   2057 FFFC14B2 6000 FD4A                   		bra		Monitor
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Execute code at the specified address.
                                             ;------------------------------------------------------------------------------
                                             ;
   2063 FFFC14B6                             ExecuteCode:
   2064 FFFC14B6 6100 FF90                   		bsr		ignBlanks
   2065 FFFC14BA 6100 0044                   		bsr		GetHexNumber
   2066 FFFC14BE 2041                        		move.l	d1,a0
   2067 FFFC14C0 4E90                        		jsr		(a0)
   2068 FFFC14C2 6000 FD3A                   		bra     Monitor
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Do a memory dump of the requested location.
                                             ;------------------------------------------------------------------------------
                                             ;
   2074 FFFC14C6                             DumpMem:
   2075 FFFC14C6 6100 FF80                   		bsr		ignBlanks
   2076 FFFC14CA 6100 0034                   		bsr		GetHexNumber
   2077 FFFC14CE 4A00                        		tst.b	d0				; was there a number ?
   2078 FFFC14D0 6700 FD2C                   		beq		Monitor			; no, other garbage, just ignore
   2079 FFFC14D4 2601                        		move.l	d1,d3			; save off start of range
   2080 FFFC14D6 6100 FF70                   		bsr		ignBlanks
   2081 FFFC14DA 6100 0024                   		bsr		GetHexNumber
   2082 FFFC14DE 4A00                        		tst.b	d0
   2083 FFFC14E0 6608                        		bne.s	DumpMem1
   2084 FFFC14E2 2203                        		move	d3,d1
   2085 FFFC14E4 0681 0000 0040              		addi.l	#64,d1			; no end specified, just dump 64 bytes
   2086 FFFC14EA                             DumpMem1:
   2087 FFFC14EA 2043                        		move.l	d3,a0
   2088 FFFC14EC 2241                        		move.l	d1,a1
   2089 FFFC14EE 4EB9 FFFC 0222              		jsr		CRLF
   2090 FFFC14F4                             .0001:
   2091 FFFC14F4 B3C8                        		cmpa.l	a0,a1
   2092 FFFC14F6 6200 FD06                   		bhi		Monitor
   2093 FFFC14FA 6100 F6C6                   		bsr		DisplayMem
   2094 FFFC14FE 60F4                        		bra.s	.0001
                                             
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Get a hexidecimal number. Maximum of eight digits.
                                             ;
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 36
bootrom.asm
                                             ; Returns:
                                             ;	d0 = number of digits
                                             ;	d1 = value of number
                                             ;------------------------------------------------------------------------------
                                             ;
   2105 FFFC1500                             GetHexNumber:
   2106 FFFC1500 2F02                        		move.l	d2,-(a7)
   2107 FFFC1502 4282                        		clr.l	d2
   2108 FFFC1504 7000                        		moveq	#0,d0
   2109 FFFC1506                             .0002:
   2110 FFFC1506 1218                        		move.b	(a0)+,d1
   2111 FFFC1508 6100 0020                   		bsr		AsciiToHexNybble
   2112 FFFC150C B23C 00FF                   		cmp.b	#0xff,d1
   2113 FFFC1510 6712                        		beq.s	.0001
   2114 FFFC1512 E98A                        		lsl.l	#4,d2
   2115 FFFC1514 0281 0000 000F              		andi.l	#0x0f,d1
   2116 FFFC151A 8481                        		or.l	d1,d2
   2117 FFFC151C 5280                        		addq	#1,d0
   2118 FFFC151E 0C00 0008                   		cmpi.b	#8,d0
   2119 FFFC1522 65E2                        		blo.s	.0002
   2120 FFFC1524                             .0001:
   2121 FFFC1524 2202                        		move.l	d2,d1
   2122 FFFC1526 241F                        		move.l	(a7)+,d2
   2123 FFFC1528 4E75                        		rts	
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Convert ASCII character in the range '0' to '9', 'a' tr 'f' or 'A' to 'F'
                                             ; to a hex nybble.
                                             ;------------------------------------------------------------------------------
                                             ;
   2130 FFFC152A                             AsciiToHexNybble:
   2131 FFFC152A 0C01 0030                   		cmpi.b	#'0',d1
   2132 FFFC152E 6538                        		blo.s	gthx3
   2133 FFFC1530 0C01 0039                   		cmpi.b	#'9',d1
   2134 FFFC1534 6206                        		bhi.s	gthx5
   2135 FFFC1536 0401 0030                   		subi.b	#'0',d1
   2136 FFFC153A 4E75                        		rts
   2137 FFFC153C                             gthx5:
   2138 FFFC153C 0C01 0041                   		cmpi.b	#'A',d1
   2139 FFFC1540 6526                        		blo.s	gthx3
   2140 FFFC1542 0C01 0046                   		cmpi.b	#'F',d1
   2141 FFFC1546 620A                        		bhi.s	gthx6
   2142 FFFC1548 0401 0041                   		subi.b	#'A',d1
   2143 FFFC154C 0601 000A                   		addi.b	#10,d1
   2144 FFFC1550 4E75                        		rts
   2145 FFFC1552                             gthx6:
   2146 FFFC1552 0C01 0061                   		cmpi.b	#'a',d1
   2147 FFFC1556 6510                        		blo.s	gthx3
   2148 FFFC1558 0C01 0066                   		cmpi.b	#'f',d1
   2149 FFFC155C 620A                        		bhi.s	gthx3
   2150 FFFC155E 0401 0061                   		subi.b	#'a',d1
   2151 FFFC1562 0601 000A                   		addi.b	#10,d1
   2152 FFFC1566 4E75                        		rts
   2153 FFFC1568                             gthx3:
   2154 FFFC1568 72FF                        		moveq	#-1,d1		; not a hex number
   2155 FFFC156A 4E75                        		rts
                                             
                                             ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                             ; The fast way to clear the screen. Uses the blitter.
                                             ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 37
bootrom.asm
                                             
   2161 FFFC156C                             WaitBlit:
   2162 FFFC156C 48E7 8004                   		movem.l	d0/a5,-(a7)
   2163 FFFC1570 4BF9 FFE0 0000              		lea		VDGREG,a5
   2164 FFFC1576                             .0003:
   2165 FFFC1576 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   2166 FFFC157A 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   2167 FFFC157E 67F6                        		beq.s	.0003				; branch if not done
   2168 FFFC1580 4CDF 2001                   		movem.l	(a7)+,d0/a5
   2169 FFFC1584 4E75                        		rts
                                             
   2171 FFFC1586                             ClearScreen:
   2172 FFFC1586 4BF9 FFE0 0000              		lea		VDGREG,a5
   2173 FFFC158C 6100 FFDE                   		bsr		WaitBlit
   2174 FFFC1590 2B7C 0001 D4C0 04BC         		move.l	#BMP_WIDTH*BMP_HEIGHT,$4BC(a5)		; set transfer count  pixels
   2175 FFFC1598 3B79 0001 0004 04A8         		move.w	bkcolor,$4A8(a5)	; set color dark blue
   2176 FFFC15A0 2B7C 0000 0000 0498         		move.l	#0,$498(a5)			; set destination address
   2177 FFFC15A8 2B7C 0000 0190 04A4         		move.l	#BMP_WIDTH,$4A4(a5)		; set destination width
   2178 FFFC15B0 2B7C 0000 0000 049C         		move.l	#0,$49C(a5)			; set dst modulo
   2179 FFFC15B8 3B7C 8080 04AC              		move.w	#%1000000010000000,$4AC(a5)		; enable channel D, start transfer
   2180 FFFC15BE 6100 FFAC                   		bsr		WaitBlit
   2181 FFFC15C2 3B7C 0001 043E              		move.w	#1,$43E(a5)			; access z buffer
   2182 FFFC15C8 2B7C 0000 1D4C 04BC         		move.l	#BMP_WIDTH*BMP_HEIGHT/16,$4BC(a5)		; set transfer count  pixels
   2183 FFFC15D0 3B7C FFFF 04A8              		move.w	#$FFFF,$4A8(a5)		; set lowest priority
   2184 FFFC15D6 3B7C FFFF 043C              		move.w	#$FFFF,$43C(a5)		; z layer = 3
   2185 FFFC15DC 2B7C 0000 0000 0498         		move.l	#0,$498(a5)			; set destination address
   2186 FFFC15E4 2B7C 0000 0190 04A4         		move.l	#BMP_WIDTH,$4A4(a5)		; set destination width
   2187 FFFC15EC 2B7C 0000 0000 049C         		move.l	#0,$49C(a5)			; set dst modulo
   2188 FFFC15F4 3B7C 8080 04AC              		move.w	#%1000000010000000,$4AC(a5)		; enable channel D, start transfer
   2189 FFFC15FA 6100 FF70                   		bsr		WaitBlit
   2190 FFFC15FE 3B7C 0000 043E              		move.w	#0,$43E(a5)			; access normal buffer again
                                             
                                             		; clear virtual screen too
   2193 FFFC1604                             ClearVirtScreen:
   2194 FFFC1604 7020                        		moveq	#$20,d0				; d0 = space character
   2195 FFFC1606 323C 073A                   		move.w	#50*37,d1
   2196 FFFC160A 4BF9 1FFF 0000              		lea		VirtScreen,a5
   2197 FFFC1610                             .0001:
   2198 FFFC1610 1AC0                        		move.b	d0,(a5)+
   2199 FFFC1612 51C9 FFFC                   		dbra	d1,.0001
   2200 FFFC1616 4E75                        		rts
                                             
   2202 FFFC1618                             ScrollUp:
   2203 FFFC1618 48E7 8084                   		movem.l	d0/a0/a5,-(a7)
   2204 FFFC161C 4BF9 FFE0 0000              		lea		VDGREG,a5
   2205 FFFC1622                             .0003:								
   2206 FFFC1622 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   2207 FFFC1626 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   2208 FFFC162A 67F6                        		beq.s	.0003				; branch if not done
                                             		; Channel A
   2210 FFFC162C 2B7C 0001 C840 04B0         		move.l	#BMP_WIDTH*(BMP_HEIGHT-8),$4B0(a5)	; set source transfer count pixels
   2211 FFFC1634 2B7C 0000 0C80 0480         		move.l	#BMP_WIDTH*8,$480(a5)		; set source bitmap address (address in graphics mem)
   2212 FFFC163C 2B7C 0000 0000 0484         		move.l	#0,$484(a5)			; set src modulo
                                             		; Channel D
   2214 FFFC1644 2B7C 0001 C840 04BC         		move.l	#BMP_WIDTH*(BMP_HEIGHT-8),$4BC(a5)	; set destination transfer count pixels
   2215 FFFC164C 2B7C 0000 0000 0498         		move.l	#0,$498(a5)			; set destination address
   2216 FFFC1654 2B7C 0000 0000 049C         		move.l	#0,$49C(a5)			; set dst modulo
                                             
   2218 FFFC165C 2B7C FFFF FFFF 04A0         		move.l	#-1,$4A0(a5)		; set source width
   2219 FFFC1664 2B7C FFFF FFFF 04A4         		move.l	#-1,$4A4(a5)		; set destination width
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 38
bootrom.asm
   2220 FFFC166C 3B7C 0011 04AE              		move.w	#$11,$4AE(a5)		; set op A ($11 = copy A)
   2221 FFFC1672 3B7C 8082 04AC              		move.w	#%1000000010000010,$4AC(a5)		; enable channel A,D, start transfer
                                             
                                             		; Scroll virtual screen
   2224 FFFC1678 4BF9 1FFF 0000              		lea		VirtScreen,a5
   2225 FFFC167E 204D                        		movea.l	a5,a0
   2226 FFFC1680 1039 0001 041B              		move.b	TextCols,d0
   2227 FFFC1686 4880                        		ext.w	d0
   2228 FFFC1688 D1C0                        		add.l	d0,a0
   2229 FFFC168A C0FC 0025                   		mulu	#37,d0
   2230 FFFC168E                             .0001:
   2231 FFFC168E 1AD8                        		move.b	(a0)+,(a5)+
   2232 FFFC1690 51C8 FFFC                   		dbra	d0,.0001
   2233 FFFC1694 4CDF 2101                   		movem.l	(a7)+,d0/a0/a5
                                             
   2235 FFFC1698                             BlankLastLine:
   2236 FFFC1698 48E7 8004                   		movem.l	d0/a5,-(a7)
                                             		; Channel D
   2238 FFFC169C 4BF9 FFE0 0000              		lea		VDGREG,a5
   2239 FFFC16A2                             .0003:								
   2240 FFFC16A2 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   2241 FFFC16A6 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   2242 FFFC16AA 67F6                        		beq.s	.0003				; branch if not done
   2243 FFFC16AC 2B7C 0000 0C80 04BC         		move.l	#BMP_WIDTH*8,$4BC(a5)		; set destination transfer count pixels
   2244 FFFC16B4 2B7C 0001 C840 0498         		move.l	#BMP_WIDTH*(BMP_HEIGHT-8),$498(a5)	; set destination address
   2245 FFFC16BC 2B7C 0000 0000 049C         		move.l	#0,$49C(a5)			; set dst modulo
   2246 FFFC16C4 2B7C FFFF FFFF 04A4         		move.l	#-1,$4A4(a5)		; set destination width
   2247 FFFC16CC 3B79 0001 0004 04A8         		move.w	bkcolor,$4A8(a5)	; set color dark blue
   2248 FFFC16D4 3B7C 8080 04AC              		move.w	#%1000000010000000,$4AC(a5)		; enable channel D, start transfer
   2249 FFFC16DA 4BF9 1FFF 073A              		lea		VirtScreen+50*37,a5
   2250 FFFC16E0 7028                        		moveq	#40,d0
   2251 FFFC16E2                             .0001:
   2252 FFFC16E2 1AFC 0020                   		move.b	#$20,(a5)+
   2253 FFFC16E6 51C8 FFFA                   		dbra	d0,.0001
   2254 FFFC16EA 4CDF 2001                   		movem.l	(a7)+,d0/a5
   2255 FFFC16EE 4E75                        		rts
                                             
                                             ;==============================================================================
                                             ; Load an S19 format file
                                             ;==============================================================================
                                             ;
   2261 FFFC16F0                             LoadS19:
   2262 FFFC16F0 600A                        	bra		ProcessRec
   2263 FFFC16F2                             NextRec:
   2264 FFFC16F2 6100 017A                   	bsr		sGetChar
   2265 FFFC16F6 0C00 000A                   	cmpi.b	#LF,d0
   2266 FFFC16FA 66F6                        	bne		NextRec
   2267 FFFC16FC                             ProcessRec
   2268 FFFC16FC 6100 0170                   	bsr		sGetChar
   2269 FFFC1700 1800                        	move.b	d0,d4
   2270 FFFC1702 0C04 001A                   	cmpi.b	#26,d4		; CTRL-Z ?
   2271 FFFC1706 6700 FAF6                   	beq		Monitor
   2272 FFFC170A 0C04 0053                   	cmpi.b	#'S',d4
   2273 FFFC170E 66E2                        	bne		NextRec
   2274 FFFC1710 6100 015C                   	bsr		sGetChar
   2275 FFFC1714 1800                        	move.b	d0,d4
   2276 FFFC1716 0C04 0030                   	cmpi.b	#'0',d4
   2277 FFFC171A 65D6                        	blo		NextRec
   2278 FFFC171C 0C04 0039                   	cmpi.b	#'9',d4		; d4 = record type
   2279 FFFC1720 62D0                        	bhi		NextRec
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 39
bootrom.asm
   2280 FFFC1722 6100 014A                   	bsr		sGetChar
   2281 FFFC1726 6100 FE02                   	bsr		AsciiToHexNybble
   2282 FFFC172A 1401                        	move.b	d1,d2
   2283 FFFC172C 6100 0140                   	bsr		sGetChar
   2284 FFFC1730 6100 FDF8                   	bsr		AsciiToHexNybble
   2285 FFFC1734 E90A                        	lsl.b	#4,d2
   2286 FFFC1736 8202                        	or.b	d2,d1		; d1 = byte count
   2287 FFFC1738 1601                        	move.b	d1,d3		; d3 = byte count
   2288 FFFC173A 0C04 0030                   	cmpi.b	#'0',d4		; manufacturer ID record, ignore
   2289 FFFC173E 67B2                        	beq		NextRec
   2290 FFFC1740 0C04 0031                   	cmpi.b	#'1',d4
   2291 FFFC1744 676A                        	beq		ProcessS1
   2292 FFFC1746 0C04 0032                   	cmpi.b	#'2',d4
   2293 FFFC174A 676A                        	beq		ProcessS2
   2294 FFFC174C 0C04 0033                   	cmpi.b	#'3',d4
   2295 FFFC1750 676A                        	beq		ProcessS3
   2296 FFFC1752 0C04 0035                   	cmpi.b	#'5',d4		; record count record, ignore
   2297 FFFC1756 679A                        	beq		NextRec
   2298 FFFC1758 0C04 0037                   	cmpi.b	#'7',d4
   2299 FFFC175C 6764                        	beq		ProcessS7
   2300 FFFC175E 0C04 0038                   	cmpi.b	#'8',d4
   2301 FFFC1762 676C                        	beq		ProcessS8
   2302 FFFC1764 0C04 0039                   	cmpi.b	#'9',d4
   2303 FFFC1768 6774                        	beq		ProcessS9
   2304 FFFC176A 6086                        	bra		NextRec
                                             
   2306 FFFC176C                             pcssxa
   2307 FFFC176C 0243 00FF                   	andi.w	#0xff,d3
   2308 FFFC1770 5343                        	subi.w	#1,d3			; one less for dbra
   2309 FFFC1772                             pcss1a
   2310 FFFC1772 4282                        	clr.l	d2
   2311 FFFC1774 6100 00F8                   	bsr		sGetChar
   2312 FFFC1778 6100 FDB0                   	bsr		AsciiToHexNybble
   2313 FFFC177C E98A                        	lsl.l	#4,d2
   2314 FFFC177E 8401                        	or.b	d1,d2
   2315 FFFC1780 6100 00EC                   	bsr		sGetChar
   2316 FFFC1784 6100 FDA4                   	bsr		AsciiToHexNybble
   2317 FFFC1788 E98A                        	lsl.l	#4,d2
   2318 FFFC178A 8401                        	or.b	d1,d2
   2319 FFFC178C 12C2                        	move.b	d2,(a1)+
   2320 FFFC178E 51CB FFE2                   	dbra	d3,pcss1a
                                             ; Get the checksum byte
   2322 FFFC1792 4282                        	clr.l	d2
   2323 FFFC1794 6100 00D8                   	bsr		sGetChar
   2324 FFFC1798 6100 FD90                   	bsr		AsciiToHexNybble
   2325 FFFC179C E98A                        	lsl.l	#4,d2
   2326 FFFC179E 8401                        	or.b	d1,d2
   2327 FFFC17A0 6100 00CC                   	bsr		sGetChar
   2328 FFFC17A4 6100 FD84                   	bsr		AsciiToHexNybble
   2329 FFFC17A8 E98A                        	lsl.l	#4,d2
   2330 FFFC17AA 8401                        	or.b	d1,d2
   2331 FFFC17AC 6000 FF44                   	bra		NextRec
                                             
   2333 FFFC17B0                             ProcessS1:
   2334 FFFC17B0 6100 003A                   	bsr		S19Get16BitAddress
   2335 FFFC17B4 60B6                        	bra		pcssxa
   2336 FFFC17B6                             ProcessS2:
   2337 FFFC17B6 6100 0042                   	bsr		S19Get24BitAddress
   2338 FFFC17BA 60B0                        	bra		pcssxa
   2339 FFFC17BC                             ProcessS3:
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 40
bootrom.asm
   2340 FFFC17BC 6100 004A                   	bsr		S19Get32BitAddress
   2341 FFFC17C0 60AA                        	bra		pcssxa
   2342 FFFC17C2                             ProcessS7:
   2343 FFFC17C2 6100 0044                   	bsr		S19Get32BitAddress
   2344 FFFC17C6 23C9 0001 0438              	move.l	a1,S19StartAddress
   2345 FFFC17CC 6000 FA30                   	bra		Monitor
   2346 FFFC17D0                             ProcessS8:
   2347 FFFC17D0 6100 0028                   	bsr		S19Get24BitAddress
   2348 FFFC17D4 23C9 0001 0438              	move.l	a1,S19StartAddress
   2349 FFFC17DA 6000 FA22                   	bra		Monitor
   2350 FFFC17DE                             ProcessS9:
   2351 FFFC17DE 6100 000C                   	bsr		S19Get16BitAddress
   2352 FFFC17E2 23C9 0001 0438              	move.l	a1,S19StartAddress
   2353 FFFC17E8 6000 FA14                   	bra		Monitor
                                             
   2355 FFFC17EC                             S19Get16BitAddress:
   2356 FFFC17EC 4282                        	clr.l	d2
   2357 FFFC17EE 6100 007E                   	bsr		sGetChar
   2358 FFFC17F2 6100 FD36                   	bsr		AsciiToHexNybble
   2359 FFFC17F6 1401                        	move.b	d1,d2
   2360 FFFC17F8 604A                        	bra		S1932b
                                             
   2362 FFFC17FA                             S19Get24BitAddress:
   2363 FFFC17FA 4282                        	clr.l	d2
   2364 FFFC17FC 6100 0070                   	bsr		sGetChar
   2365 FFFC1800 6100 FD28                   	bsr		AsciiToHexNybble
   2366 FFFC1804 1401                        	move.b	d1,d2
   2367 FFFC1806 6024                        	bra		S1932a
                                             
   2369 FFFC1808                             S19Get32BitAddress:
   2370 FFFC1808 4282                        	clr.l	d2
   2371 FFFC180A 6100 0062                   	bsr		sGetChar
   2372 FFFC180E 6100 FD1A                   	bsr		AsciiToHexNybble
   2373 FFFC1812 1401                        	move.b	d1,d2
   2374 FFFC1814 6100 0058                   	bsr		sGetChar
   2375 FFFC1818 6100 FD10                   	bsr		AsciiToHexNybble
   2376 FFFC181C E98A                        	lsl.l	#4,d2
   2377 FFFC181E 8401                        	or.b	d1,d2
   2378 FFFC1820 6100 004C                   	bsr		sGetChar
   2379 FFFC1824 6100 FD04                   	bsr		AsciiToHexNybble
   2380 FFFC1828 E98A                        	lsl.l	#4,d2
   2381 FFFC182A 8401                        	or.b	d1,d2
   2382 FFFC182C                             S1932a:
   2383 FFFC182C 6100 0040                   	bsr		sGetChar
   2384 FFFC1830 6100 FCF8                   	bsr		AsciiToHexNybble
   2385 FFFC1834 E98A                        	lsl.l	#4,d2
   2386 FFFC1836 8401                        	or.b	d1,d2
   2387 FFFC1838 6100 0034                   	bsr		sGetChar
   2388 FFFC183C 6100 FCEC                   	bsr		AsciiToHexNybble
   2389 FFFC1840 E98A                        	lsl.l	#4,d2
   2390 FFFC1842 8401                        	or.b	d1,d2
   2391 FFFC1844                             S1932b:
   2392 FFFC1844 6100 0028                   	bsr		sGetChar
   2393 FFFC1848 6100 FCE0                   	bsr		AsciiToHexNybble
   2394 FFFC184C E98A                        	lsl.l	#4,d2
   2395 FFFC184E 8401                        	or.b	d1,d2
   2396 FFFC1850 6100 001C                   	bsr		sGetChar
   2397 FFFC1854 6100 FCD4                   	bsr		AsciiToHexNybble
   2398 FFFC1858 E98A                        	lsl.l	#4,d2
   2399 FFFC185A 8401                        	or.b	d1,d2
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 41
bootrom.asm
   2400 FFFC185C 6100 0010                   	bsr		sGetChar
   2401 FFFC1860 6100 FCC8                   	bsr		AsciiToHexNybble
   2402 FFFC1864 E98A                        	lsl.l	#4,d2
   2403 FFFC1866 8401                        	or.b	d1,d2
   2404 FFFC1868 4284                        	clr.l	d4
   2405 FFFC186A 2242                        	move.l	d2,a1
   2406 FFFC186C 4E75                        	rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Get a character from auxillary input, checking the keyboard status for a
                                             ; CTRL-C
                                             ;------------------------------------------------------------------------------
                                             ;
   2413 FFFC186E                             sGetChar:
   2414 FFFC186E 6100 F3F6                   	bsr		CheckForKey
   2415 FFFC1872 670C                        	beq		sgc1
   2416 FFFC1874 6100 F402                   	bsr		GetKey
   2417 FFFC1878 0C01 0003                   	cmpi.b	#CTRLC,d1
   2418 FFFC187C 6700 F980                   	beq		Monitor
   2419 FFFC1880                             sgc1:
   2420 FFFC1880 6100 FFFF                   	bsr		AUXIN
   2421 FFFC1884 67E8                        	beq		sGetChar
   2422 FFFC1886 1200                        	move.b	d0,d1
   2423 FFFC1888 4E75                        	rts
                                             
                                             ;==============================================================================
                                             ;==============================================================================
                                             
                                             ;------------------------------------------------------------------------------
                                             ;------------------------------------------------------------------------------
                                             ;
   2431 FFFC188A                             DisplayHexNumber:
   2432 FFFC188A 33FC A6A6 FFDC 0600         		move.w	#$A6A6,leds		; diagnostics
   2433 FFFC1892 2C7C FFE0 0000              		move.l	#VDGREG,a6
   2434 FFFC1898 343C 0007                   		move.w	#7,d2		; number-1 of digits to display
   2435 FFFC189C                             disphnum1:
   2436 FFFC189C 1001                        		move.b	d1,d0		; get digit into d0.b
   2437 FFFC189E 0240 000F                   		andi.w	#$0f,d0
   2438 FFFC18A2 0C40 0009                   		cmpi.w	#$09,d0
   2439 FFFC18A6 6302                        		bls.s	disphnum2
   2440 FFFC18A8 5E40                        		addi.w	#7,d0
   2441 FFFC18AA                             disphnum2:
   2442 FFFC18AA 0640 0030                   		addi.w	#$30,d0	; convert to display char
   2443 FFFC18AE 3602                        		move.w	d2,d3		; char count into d3
   2444 FFFC18B0 E743                        		asl.w	#3,d3		; scale * 8
   2445 FFFC18B2                             disphnum3:
   2446 FFFC18B2 382E 042C                   		move.w	$42C(a6),d4			; read character queue index into d4
   2447 FFFC18B6 B87C 001C                   		cmp.w	#28,d4					; allow up 28 entries to be in progress
   2448 FFFC18BA 64F6                        		bhs.s	disphnum3				; branch if too many chars queued
   2449 FFFC18BC 4880                        		ext.w	d0						; zero out high order bits
   2450 FFFC18BE 3D40 0420                   		move.w	d0,$420(a6)			; set char code
   2451 FFFC18C2 3D7C 7FFF 0422              		move.w	#WHITE,$422(a6)		; set fg color
   2452 FFFC18C8 3D7C 000F 0424              		move.w	#DARK_BLUE,$424(a6)	; set bk color
   2453 FFFC18CE 3D43 0426                   		move.w	d3,$426(a6)			; set x pos
   2454 FFFC18D2 3D7C 0008 0428              		move.w	#8,$428(a6)			; set y pos
   2455 FFFC18D8 3D7C 0707 042A              		move.w	#$0707,$42A(a6)		; set font x,y extent
   2456 FFFC18DE 3D7C 0000 042E              		move.w	#0,$42E(a6)			; pulse character queue write signal
   2457 FFFC18E4 E899                        		ror.l	#4,d1					; rot to next digit
   2458 FFFC18E6 57CA FFB4                   		dbeq	d2,disphnum1
   2459 FFFC18EA 4ED5                        		jmp		(a5)
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 42
bootrom.asm
                                             
                                             ;===============================================================================
                                             ;    Perform ram test. (Uses checkerboard testing).
                                             ; 
                                             ;    Return address must be stored in a3 since the stack cannot be used (it
                                             ; would get overwritten in test). Note this routine uses no ram at all.
                                             ;===============================================================================
   2467 FFFC18EC                             ramtest:
   2468 FFFC18EC 33FC A5A5 FFDC 0600         		move.w	#$A5A5,leds		; diagnostics
   2469 FFFC18F4 207C 0003 0000                      movea.l #$30000,a0
   2470 FFFC18FA 203C AAAA 5555                      move.l #$aaaa5555,d0
                                             ;-----------------------------------------------------------
                                             ;   Write checkerboard pattern to ram then read it back to
                                             ; find the highest usable ram address (maybe). This address
                                             ; must be lower than the start of the rom (0xe00000).
                                             ;-----------------------------------------------------------
   2476 FFFC1900                             ramtest1:
   2477 FFFC1900 20C0                                move.l 	d0,(a0)+
   2478 FFFC1902 2208                                move.l	a0,d1
   2479 FFFC1904 4A41                                tst.w	d1
   2480 FFFC1906 660A                                bne.s	rmtst1
   2481 FFFC1908 4BF9 FFFC 1912                      lea		rmtst1,a5
   2482 FFFC190E 6000 FF7A                           bra		DisplayHexNumber
   2483 FFFC1912                             rmtst1:
   2484 FFFC1912 33FC A9A9 FFDC 0600         		move.w	#$A9A9,leds		; diagnostics
   2485 FFFC191A B1FC 0005 FFFC                      cmpa.l 	#$5FFFC,a0
   2486 FFFC1920 66DE                                bne.s 	ramtest1
   2487 FFFC1922 7200                                move.l	#0,d1
   2488 FFFC1924 6100 E912                           bsr		CalcScreenLoc
   2489 FFFC1928 6000 FBC0                           bra		DumpMem1
                                             
                                             ;------------------------------------------------------
                                             ;   Save maximum useable address for later comparison.
                                             ;------------------------------------------------------
   2494 FFFC192C                             ramtest6:
   2495 FFFC192C 33FC A7A7 FFDC 0600         		move.w	#$A7A7,leds		; diagnostics
   2496 FFFC1934 2448                                movea.l a0,a2
   2497 FFFC1936 207C 0003 0000                      movea.l #$30000,a0
                                             ;--------------------------------------------
                                             ;   Read back checkerboard pattern from ram.
                                             ;--------------------------------------------
   2501 FFFC193C                             ramtest2:
   2502 FFFC193C 2A18                                move.l  (a0)+,d5
   2503 FFFC193E B5C8                                cmpa.l	a0,a2
   2504 FFFC1940 671A                                beq.s	ramtest3
   2505 FFFC1942 2208                                move.l	a0,d1
   2506 FFFC1944 4A41                                tst.w	d1
   2507 FFFC1946 660A                                bne.s	rmtst2
   2508 FFFC1948 4BF9 FFFC 1952                      lea		rmtst2,a5
   2509 FFFC194E 6000 FF3A                           bra		DisplayHexNumber
   2510 FFFC1952                             rmtst2:
   2511 FFFC1952 0C85 AAAA 5555                      cmpi.l 	#$aaaa5555,d5
   2512 FFFC1958 67E2                                beq.s 	ramtest2
   2513 FFFC195A 6678                                bne.s 	ramtest7
                                             ;---------------------------------------------------
                                             ;   The following section does the same test except
                                             ; with the checkerboard order switched around.
                                             ;---------------------------------------------------
   2518 FFFC195C                             ramtest3:                
   2519 FFFC195C 33FC A8A8 FFDC 0600         		move.w	#$A8A8,leds		; diagnostics
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 43
bootrom.asm
   2520 FFFC1964 207C 0003 0000                      movea.l #$30000,a0
   2521 FFFC196A 203C 5555 AAAA                      move.l 	#$5555aaaa,d0
   2522 FFFC1970                             ramtest4:
   2523 FFFC1970 20C0                                move.l 	d0,(a0)+
   2524 FFFC1972 2208                                move.l 	a0,d1
   2525 FFFC1974 4A41                                tst.w	d1
   2526 FFFC1976 660A                                bne.s   rmtst3
   2527 FFFC1978 4BF9 FFFC 1982                      lea		rmtst3,a5
   2528 FFFC197E 6000 FF0A                           bra		DisplayHexNumber
   2529 FFFC1982                             rmtst3:
   2530 FFFC1982 B1FC 1FFF FFFC                      cmpa.l 	#$1FFFFFFC,a0
   2531 FFFC1988 66E6                                bne.s 	ramtest4
   2532 FFFC198A                             ramtest8:
   2533 FFFC198A 2448                                movea.l a0,a2
   2534 FFFC198C 207C 0003 0000                      movea.l #$30000,a0
   2535 FFFC1992                             ramtest5:
   2536 FFFC1992 2018                                move.l 	(a0)+,d0
   2537 FFFC1994 B5C8                                cmpa.l	a0,a2
   2538 FFFC1996 671A                                beq.s	rmtst5
   2539 FFFC1998 2208                                move.l 	a0,d1
   2540 FFFC199A 4A41                                tst.w	d1
   2541 FFFC199C 660A                                bne.s	rmtst4
   2542 FFFC199E 4BF9 FFFC 19A8                      lea		rmtst4,a5
   2543 FFFC19A4 6000 FEE4                           bra		DisplayHexNumber
   2544 FFFC19A8                             rmtst4:
   2545 FFFC19A8 0C80 5555 AAAA                      cmpi.l 	#$5555aaaa,d0
   2546 FFFC19AE 67E2                                beq.s 	ramtest5
   2547 FFFC19B0 6622                                bne.s 	ramtest7
                                             ;---------------------------------------------------
                                             ;   Save last ram address in end of memory pointer.
                                             ;---------------------------------------------------
   2551 FFFC19B2                             rmtst5:
   2552 FFFC19B2 23C8 0001 0008                      move.l a0,memend
                                             ;-----------------------------------
                                             ;   Create very first memory block.
                                             ;-----------------------------------
   2556 FFFC19B8 91FC 0000 000C                      suba.l 	#12,a0
   2557 FFFC19BE 21C8 0404                           move.l 	a0,$0404
   2558 FFFC19C2 21FC 4652 4545 0400                 move.l 	#$46524545,$0400
   2559 FFFC19CA 21FC 0000 0408 0408                 move.l 	#$408,$408			; point back-link to self
   2560 FFFC19D2 4ED3                                jmp 	(a3)
                                             ;----------------------------------
                                             ; Error in ram - go no farther.
                                             ;----------------------------------
   2564 FFFC19D4                             ramtest7:
   2565 FFFC19D4 4ED3                        		jmp 	(a3)
   2566 FFFC19D6 60FC                                bra.s 	ramtest7
                                             
                                             
                                             ;===============================================================================
                                             ;===============================================================================
                                             ;===============================================================================
                                             ;===============================================================================
                                             
   2574 FFFC19D8                             GraphicsDemo:
   2575 FFFC19D8 6100 008C                   		bsr		DrawLines
   2576 FFFC19DC 6100 0012                   		bsr		DrawRects
   2577 FFFC19E0 7606                        		moveq	#6,d3
   2578 FFFC19E2 6100 0122                   		bsr		DrawTrianglesOrCurves
   2579 FFFC19E6 7608                        		moveq	#8,d3
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 44
bootrom.asm
   2580 FFFC19E8 6100 011C                   		bsr		DrawTrianglesOrCurves
   2581 FFFC19EC 6000 F810                   		bra		Monitor
                                             
   2583 FFFC19F0                             DrawRects:
   2584 FFFC19F0 4DF9 FFDC 0000              		lea		$FFDC0000,A6	; I/O base
   2585 FFFC19F6 4BF9 FFE0 0000              		lea		VDGREG,a5
   2586 FFFC19FC 2C3C 0000 4E20              		move.l	#20000,d6		; repeat a few times
   2587 FFFC1A02                             .0001:
   2588 FFFC1A02 202E 0C00                   		move.l	$0C00(a6),d0	; get 32 bit number
   2589 FFFC1A06 3200                        		move.w	d0,d1			; use bits 0 to 8 for y0
   2590 FFFC1A08 4840                        		swap	d0				; and bits 16 to 24 for x0
   2591 FFFC1A0A 0240 00FF                   		and.w	#$FF,d0		; 0 to 511
   2592 FFFC1A0E 0241 00FF                   		and.w	#$FF,d1		; 0 to 511
   2593 FFFC1A12 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   2594 FFFC1A16 242E 0C00                   		move.l	$0C00(a6),d2
   2595 FFFC1A1A 3602                        		move.w	d2,d3
   2596 FFFC1A1C 4842                        		swap	d2
   2597 FFFC1A1E 0242 00FF                   		and.w	#$FF,d2		; 0 to 511
   2598 FFFC1A22 0243 00FF                   		and.w	#$FF,d3		; 0 to 511
   2599 FFFC1A26 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   2600 FFFC1A2A 282E 0C00                   		move.l	$0C00(a6),d4
   2601 FFFC1A2E 0244 7FFF                   		and.w	#RGBMASK,d4		; 9/15 bits color
   2602 FFFC1A32 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   2603 FFFC1A36                             .0002:
   2604 FFFC1A36 3E2D 042C                   		move.w	$42C(a5),d7		; check # queued
   2605 FFFC1A3A BE7C 001C                   		cmp.w	#28,d7			; more than 28 queued ?
   2606 FFFC1A3E 64F6                        		bhs.s	.0002			; too many, wait for queue to empty
   2607 FFFC1A40 3B7C 0001 0422              		move.w	#1,$422(a5)		; raster op = COPY
   2608 FFFC1A46 3B44 0424                   		move.w	d4,$424(a5)		; set color
   2609 FFFC1A4A 3B40 0426                   		move.w	d0,$426(a5)		; set x0
   2610 FFFC1A4E 3B41 0428                   		move.w	d1,$428(a5)		; set y0
   2611 FFFC1A52 3B42 0430                   		move.w	d2,$430(a5)		; set x1
   2612 FFFC1A56 3B43 0432                   		move.w	d3,$432(a5)		; set y1
   2613 FFFC1A5A 3B7C 0003 042E              		move.w	#3,$42E(a5)		; pulse command queue (3 = draw rect)
   2614 FFFC1A60 5386                        		sub.l	#1,d6
   2615 FFFC1A62 669E                        		bne		.0001			; go back and do more lines
   2616 FFFC1A64 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Draw lines randomly on the screen.
                                             ;===============================================================================
                                             
   2622 FFFC1A66                             DrawLines:
   2623 FFFC1A66 4DF9 FFDC 0000              		lea		$FFDC0000,A6	; I/O base
   2624 FFFC1A6C 4BF9 FFE0 0000              		lea		VDGREG,a5
   2625 FFFC1A72 2C3C 0003 0D40              		move.l	#200000,d6		; repeat a few times
   2626 FFFC1A78                             .0001:
                                             		; Wait for blitter to be done
   2628 FFFC1A78                             .0003:								
   2629 FFFC1A78 33FC 000A FFDC 0600         		move.w	#10,leds
   2630 FFFC1A80 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   2631 FFFC1A84 0800 000E                   		btst	#14,d0
   2632 FFFC1A88 6706                        		beq.s	.0004
   2633 FFFC1A8A 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   2634 FFFC1A8E 67E8                        		beq.s	.0003				; branch if not done
   2635 FFFC1A90                             .0004:
   2636 FFFC1A90 33FC 000B FFDC 0600         		move.w	#11,leds
   2637 FFFC1A98 202E 0C00                   		move.l	$0C00(a6),d0	; get 32 bit number
   2638 FFFC1A9C 3200                        		move.w	d0,d1			; use bits 0 to 8 for y0
   2639 FFFC1A9E 4840                        		swap	d0				; and bits 16 to 24 for x0
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 45
bootrom.asm
   2640 FFFC1AA0 0240 00FF                   		and.w	#$FF,d0		; 0 to 511
   2641 FFFC1AA4 0241 00FF                   		and.w	#$FF,d1		; 0 to 511
   2642 FFFC1AA8 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   2643 FFFC1AAC 242E 0C00                   		move.l	$0C00(a6),d2
   2644 FFFC1AB0 3602                        		move.w	d2,d3
   2645 FFFC1AB2 4842                        		swap	d2
   2646 FFFC1AB4 0242 00FF                   		and.w	#$FF,d2		; 0 to 511
   2647 FFFC1AB8 0243 00FF                   		and.w	#$FF,d3		; 0 to 511
   2648 FFFC1ABC 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   2649 FFFC1AC0 282E 0C00                   		move.l	$0C00(a6),d4
   2650 FFFC1AC4 0244 7FFF                   		and.w	#RGBMASK,d4		; 9/15 bits color
   2651 FFFC1AC8 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   2652 FFFC1ACC                             .0002:
   2653 FFFC1ACC 3E2D 042C                   		move.w	$42C(a5),d7		; check # queued
   2654 FFFC1AD0 BE7C 001C                   		cmp.w	#28,d7			; more than 28 queued ?
   2655 FFFC1AD4 64F6                        		bhs.s	.0002			; too many, wait for queue to empty
   2656 FFFC1AD6 33FC 000C FFDC 0600         		move.w	#12,leds
   2657 FFFC1ADE 3B7C 0001 0422              		move.w	#1,$422(a5)		; raster op = COPY
   2658 FFFC1AE4 3B44 0424                   		move.w	d4,$424(a5)		; set color
   2659 FFFC1AE8 3B40 0426                   		move.w	d0,$426(a5)		; set x0
   2660 FFFC1AEC 3B41 0428                   		move.w	d1,$428(a5)		; set y0
   2661 FFFC1AF0 3B42 0430                   		move.w	d2,$430(a5)		; set x1
   2662 FFFC1AF4 3B43 0432                   		move.w	d3,$432(a5)		; set y1
   2663 FFFC1AF8 3B7C 0002 042E              		move.w	#2,$42E(a5)		; pulse command queue (2 = draw line)
   2664 FFFC1AFE 5386                        		sub.l	#1,d6
   2665 FFFC1B00 6600 FF76                   		bne		.0001			; go back and do more lines
   2666 FFFC1B04 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Draw triangles or curves randomly on the screen.
                                             ;===============================================================================
                                             
   2672 FFFC1B06                             DrawTrianglesOrCurves:
   2673 FFFC1B06 4DF9 FFDC 0000              		lea		$FFDC0000,A6	; I/O base
   2674 FFFC1B0C 4BF9 FFE0 0000              		lea		VDGREG,a5
   2675 FFFC1B12 2C3C 0000 2710              		move.l	#10000,d6		; repeat a few times
   2676 FFFC1B18                             .0001:
                                             		; Wait for blitter to be done
   2678 FFFC1B18                             .0003:								
   2679 FFFC1B18 33FC 000A FFDC 0600         		move.w	#10,leds
   2680 FFFC1B20 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   2681 FFFC1B24 0800 000E                   		btst	#14,d0
   2682 FFFC1B28 6706                        		beq.s	.0004
   2683 FFFC1B2A 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   2684 FFFC1B2E 67E8                        		beq.s	.0003				; branch if not done
   2685 FFFC1B30                             .0004:
   2686 FFFC1B30 33FC 000B FFDC 0600         		move.w	#11,leds
   2687 FFFC1B38 202E 0C00                   		move.l	$0C00(a6),d0	; get 32 bit number
   2688 FFFC1B3C 0280 00FF 00FF              		and.l	#$FF00FF,d0		; 0 to 255
   2689 FFFC1B42 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   2690 FFFC1B46 222E 0C00                   		move.l	$0C00(a6),d1
   2691 FFFC1B4A 0281 00FF 00FF              		and.l	#$FF00FF,d1		; 0 to 255
   2692 FFFC1B50 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   2693 FFFC1B54 242E 0C00                   		move.l	$0C00(a6),d2
   2694 FFFC1B58 0282 00FF 00FF              		and.l	#$FF00FF,d2		; 0 to 255
   2695 FFFC1B5E 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   2696 FFFC1B62 282E 0C00                   		move.l	$0C00(a6),d4
   2697 FFFC1B66 0244 7FFF                   		and.w	#RGBMASK,d4		; 9/15 bits color
   2698 FFFC1B6A 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   2699 FFFC1B6E                             .0002:
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 46
bootrom.asm
   2700 FFFC1B6E 3E2D 042C                   		move.w	$42C(a5),d7		; check # queued
   2701 FFFC1B72 BE7C 001C                   		cmp.w	#28,d7			; more than 28 queued ?
   2702 FFFC1B76 64F6                        		bhs.s	.0002			; too many, wait for queue to empty
   2703 FFFC1B78 33FC 000C FFDC 0600         		move.w	#12,leds
   2704 FFFC1B80 3B44 0420                   		move.w	d4,$420(a5)		; fill curve
   2705 FFFC1B84 4844                        		swap	d4
   2706 FFFC1B86 3B7C 0001 0422              		move.w	#1,$422(a5)		; raster op = COPY
   2707 FFFC1B8C 3B44 0424                   		move.w	d4,$424(a5)		; set color
   2708 FFFC1B90 2B40 0426                   		move.l	d0,$426(a5)		; set x0,y0
   2709 FFFC1B94 2B41 0430                   		move.l	d1,$430(a5)		; set x1,y1
   2710 FFFC1B98 2B42 0434                   		move.l	d2,$434(a5)		; set x2,y2
   2711 FFFC1B9C 3B43 042E                   		move.w	d3,$42E(a5)		; pulse command queue (6 = fill triangle, 8 = curve)
   2712 FFFC1BA0 5386                        		sub.l	#1,d6
   2713 FFFC1BA2 6600 FF74                   		bne		.0001			; go back and do more triangles
   2714 FFFC1BA6 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Test Blitter
                                             ;===============================================================================
                                             
   2720 FFFC1BA8                             TestBlitter:
                                             		; puts a red rectangle on screen
   2722 FFFC1BA8 4BF9 FFE0 0000              		lea		VDGREG,a5
   2723 FFFC1BAE                             .0003:								
   2724 FFFC1BAE 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   2725 FFFC1BB2 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   2726 FFFC1BB6 67F6                        		beq.s	.0003				; branch if not done
   2727 FFFC1BB8 2B7C 0000 1F40 04BC         		move.l	#8000,$4BC(a5)		; set transfer count 8000 pixels
   2728 FFFC1BC0 3B7C 7C00 04A8              		move.w	#RED,$4A8(a5)		; set color red
   2729 FFFC1BC6 2B7C 0000 0168 0498         		move.l	#360,$498(a5)		; set destination address
   2730 FFFC1BCE 2B7C 0000 0028 04A4         		move.l	#40,$4A4(a5)		; set destination width
   2731 FFFC1BD6 2B7C 0000 0168 049C         		move.l	#360,$49C(a5)		; set dst modulo
   2732 FFFC1BDE 3B7C 8080 04AC              		move.w	#%1000000010000000,$4AC(a5)		; enable channel D, start transfer
                                             
                                             		; makes a copy of the upper left corner of the screen
   2735 FFFC1BE4                             .0001:								
   2736 FFFC1BE4 302D 04AC                   		move.w	$4AC(a5),d0			; get blit status
   2737 FFFC1BE8 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   2738 FFFC1BEC 67F6                        		beq.s	.0001				; branch if not done
                                             		; Channel A
   2740 FFFC1BEE 2B7C 0000 03E8 04B0         		move.l	#1000,$4B0(a5)		; set source transfer count 8000 pixels
   2741 FFFC1BF6 2B7C 0000 0000 0480         		move.l	#0,$480(a5)			; set source bitmap address (address in graphics mem)
   2742 FFFC1BFE 2B7C 0000 0168 0484         		move.l	#360,$484(a5)		; set src modulo
                                             		; Channel C
   2744 FFFC1C06 2B7C 0000 03E8 04B8         		move.l	#1000,$4B8(a5)		; set source transfer count 8000 pixels
   2745 FFFC1C0E 2B7C 0000 0000 0490         		move.l	#0,$490(a5)			; set source bitmap address (address in graphics mem)
   2746 FFFC1C16 2B7C 0000 0168 0494         		move.l	#360,$494(a5)		; set src modulo
                                             		; Channel D
   2748 FFFC1C1E 2B7C 0000 1F40 04BC         		move.l	#8000,$4BC(a5)		; set destination transfer count 8000 pixels
   2749 FFFC1C26 2B7C 0000 0140 0498         		move.l	#320,$498(a5)		; set destination address
   2750 FFFC1C2E 2B7C 0000 0168 049C         		move.l	#360,$49C(a5)		; set dst modulo
                                             		
   2752 FFFC1C36 2B7C 0000 0028 04A0         		move.l	#40,$4A0(a5)		; set source width
   2753 FFFC1C3E 2B7C 0000 0028 04A4         		move.l	#40,$4A4(a5)		; set destination width
   2754 FFFC1C46 3B7C 0091 04AE              		move.w	#$91,$4AE(a5)		; set op A|C	($11 = copy A)
   2755 FFFC1C4C 3B7C 80A2 04AC              		move.w	#%1000000010100010,$4AC(a5)		; enable channel A,C,D, start transfer
   2756 FFFC1C52                             .0002:								
   2757 FFFC1C52 302D 04AC                   		move.w	$4AC(a5),d0			; get blit status
   2758 FFFC1C56 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   2759 FFFC1C5A 67F6                        		beq.s	.0002				; branch if not done
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 47
bootrom.asm
   2760 FFFC1C5C 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Generic I2C routines
                                             ;===============================================================================
                                             
                                             I2C_PREL	EQU		$0
                                             I2C_PREH	EQU		$2
                                             I2C_CTRL	EQU		$4
                                             I2C_RXR		EQU		$6
                                             I2C_TXR		EQU		$6
                                             I2C_CMD		EQU		$8
                                             I2C_STAT	EQU		$A
                                             
                                             ; i2c
   2775 FFFC1C5E                             i2c_setup:
   2776 FFFC1C5E 4DF9 FFDC 0E00              		lea		I2C,a6				
   2777 FFFC1C64 3CBC 0013                   		move.w	#19,I2C_PREL(a6)	; setup prescale for 400kHz clock
   2778 FFFC1C68 3D7C 0000 0002              		move.w	#0,I2C_PREH(a6)
   2779 FFFC1C6E 4DF9 FFDC 0E10              		lea		I2C2,a6				
   2780 FFFC1C74 3CBC 0013                   		move.w	#19,I2C_PREL(a6)	; setup prescale for 400kHz clock
   2781 FFFC1C78 3D7C 0000 0002              		move.w	#0,I2C_PREH(a6)
   2782 FFFC1C7E 4E75                        		rts
                                             
                                             ; Wait for I2C transfer to complete
                                             ;
                                             ; Parameters
                                             ; 	a6 - I2C controller base address
                                             
   2789 FFFC1C80                             i2c_wait_tip:
   2790 FFFC1C80 3F00                        		move.w	d0,-(a7)
   2791 FFFC1C82                             .0001:					
   2792 FFFC1C82 302E 000A                   		move.w	I2C_STAT(a6),d0		; wait for tip to clear
   2793 FFFC1C86 0800 0001                   		btst	#1,d0
   2794 FFFC1C8A 66F6                        		bne.s	.0001
   2795 FFFC1C8C 301F                        		move.w	(a7)+,d0
   2796 FFFC1C8E 4E75                        		rts
                                             
                                             ; Parameters
                                             ;	d0.w - data to transmit
                                             ;	d1.w - command value
                                             ;	a6	 - I2C controller base address
                                             ;
   2803 FFFC1C90                             i2c_wr_cmd:
   2804 FFFC1C90 3D40 0006                   		move.w	d0,I2C_TXR(a6)
   2805 FFFC1C94 3D41 0008                   		move.w	d1,I2C_CMD(a6)
   2806 FFFC1C98 6100 FFE6                   		bsr		i2c_wait_tip
   2807 FFFC1C9C 302E 000A                   		move.w	I2C_STAT(a6),d0
   2808 FFFC1CA0 4E75                        		rts
                                             
   2810 FFFC1CA2                             i2c_xmit1:
   2811 FFFC1CA2 3F00                        		move.w	d0,-(a7)
   2812 FFFC1CA4 3D7C 0001 0004              		move.w	#1,I2C_CTRL(a6)		; enable the core
   2813 FFFC1CAA 7076                        		moveq	#$76,d0				; set slave address = %0111011
   2814 FFFC1CAC 323C 0090                   		move.w	#$90,d1				; set STA, WR
   2815 FFFC1CB0 6100 FFDE                   		bsr		i2c_wr_cmd
   2816 FFFC1CB4 6100 0010                   		bsr		i2c_wait_rx_nack
   2817 FFFC1CB8 301F                        		move.w	(a7)+,d0
   2818 FFFC1CBA 323C 0050                   		move.w	#$50,d1				; set STO, WR
   2819 FFFC1CBE 6100 FFD0                   		bsr		i2c_wr_cmd
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 48
bootrom.asm
   2820 FFFC1CC2 6100 0002                   		bsr		i2c_wait_rx_nack
                                             
   2822 FFFC1CC6                             i2c_wait_rx_nack:
   2823 FFFC1CC6 3F00                        		move.w	d0,-(a7)
   2824 FFFC1CC8                             .0001:							
   2825 FFFC1CC8 302E 000A                   		move.w	I2C_STAT(a6),d0		; wait for RXack = 0
   2826 FFFC1CCC 0800 0007                   		btst	#7,d0
   2827 FFFC1CD0 66F6                        		bne.s	.0001
   2828 FFFC1CD2 301F                        		move.w	(a7)+,d0
   2829 FFFC1CD4 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Audio
                                             ;===============================================================================
                                             
   2835 FFFC1CD6                             AudioInputTest:
   2836 FFFC1CD6 4BF9 FFE0 0000              		lea		VDGREG,a5
   2837 FFFC1CDC 2B7C 0005 8000 0640         		move.l	#$58000,$640(a5)	; set buffer address ($FF8B0000)
   2838 FFFC1CE4 3B7C 4000 0644              		move.w	#$4000,$644(a5)		; set buffer length
   2839 FFFC1CEA 3B7C 0716 0646              		move.w	#1814,$646(a5)		; set period = 22.05kHz
   2840 FFFC1CF0 3B7C 1090 0650              		move.w	#$1090,$650(a5)		; enable input channel, plot mode
   2841 FFFC1CF6 3B7C 0090 0650              		move.w	#$0090,$650(a5)		; turn off reset
                                             		; should have input now
                                             
                                             		; puts a dark blue rectangle on screen
   2845 FFFC1CFC                             .0003:								
   2846 FFFC1CFC 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   2847 FFFC1D00 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   2848 FFFC1D04 67F6                        		beq.s	.0003				; branch if not done
   2849 FFFC1D06 2B7C 0001 0000 04BC         		move.l	#256*256,$4BC(a5)		; set transfer count pixels
   2850 FFFC1D0E 3B7C 000F 04A8              		move.w	#DARK_BLUE,$4A8(a5)		; set color 
   2851 FFFC1D14 2B7C 0000 0000 0498         		move.l	#0,$498(a5)			; set destination address
   2852 FFFC1D1C 2B7C 0000 0100 04A4         		move.l	#256,$4A4(a5)		; set destination width
   2853 FFFC1D24 2B7C 0000 0090 049C         		move.l	#BMP_WIDTH-256,$49C(a5)		; set dst modulo
   2854 FFFC1D2C 3B7C 8080 04AC              		move.w	#%1000000010000000,$4AC(a5)		; enable channel D, start transfer
                                             
                                             		; delay a bit
   2857 FFFC1D32 203C 0003 D090              		move.l	#250000,d0
   2858 FFFC1D38                             .0004:
   2859 FFFC1D38 5380                        		sub.l	#1,d0
   2860 FFFC1D3A 66FC                        		bne.s	.0004
   2861 FFFC1D3C 60BE                        		bra.s	.0003
                                             		
                                             
   2864 FFFC1D3E                             audio_pll_config:
   2865 FFFC1D3E 7000                        		moveq	#0,d0
   2866 FFFC1D40 720E                        		moveq	#$0E,d1
   2867 FFFC1D42 6100 001C                   		bsr		audio_write_reg
   2868 FFFC1D46 7002                        		moveq	#2,d0
   2869 FFFC1D48 41F9 FFFC 1DBA              		lea		audio_tbl1,a0
   2870 FFFC1D4E 6100 0076                   		bsr		audio_write_reg6
   2871 FFFC1D52 4E75                        		rts
                                             
   2873 FFFC1D54                             audio_startup_config:
   2874 FFFC1D54 4E75                        		rts
                                             
   2876 FFFC1D56                             audio_init:
   2877 FFFC1D56 6100 FFE6                   		bsr		audio_pll_config
   2878 FFFC1D5A 6100 FFF8                   		bsr		audio_startup_config
   2879 FFFC1D5E 4E75                        		rts
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 49
bootrom.asm
                                             
                                             ; d0.w = register number
                                             ; d1.w = data to write
                                             		
   2884 FFFC1D60                             audio_write_reg:
   2885 FFFC1D60 4DF9 FFDC 0E00              		lea		I2C,a6				
   2886 FFFC1D66 3D7C 0001 0004              		move.w	#1,I2C_CTRL(a6)		; enable the core
   2887 FFFC1D6C 3D7C 0076 0006              		move.w	#$76,I2C_TXR(a6)	; set slave address = %0111011
   2888 FFFC1D72 3D7C 0090 0008              		move.w	#$90,I2C_CMD(a6)	; set STA, WR
   2889 FFFC1D78 6100 FF06                   		bsr		i2c_wait_tip	; wait for tip to clear
   2890 FFFC1D7C 6100 FF48                   		bsr		i2c_wait_rx_nack
   2891 FFFC1D80 3D7C 0040 0006              		move.w	#$40,I2C_TXR(a6)	; all regsister are $40xx
   2892 FFFC1D86 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2893 FFFC1D8C 6100 FEF2                   		bsr		i2c_wait_tip	; wait for tip to clear
   2894 FFFC1D90 6100 FF34                   		bsr		i2c_wait_rx_nack
   2895 FFFC1D94 3D40 0006                   		move.w	d0,I2C_TXR(a6)		; send register address
   2896 FFFC1D98 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2897 FFFC1D9E 6100 FEE0                   		bsr		i2c_wait_tip	; wait for tip to clear
   2898 FFFC1DA2 6100 FF22                   		bsr		i2c_wait_rx_nack
   2899 FFFC1DA6 3D41 0006                   		move.w	d1,I2C_TXR(a6)		; send data
   2900 FFFC1DAA 3D7C 0050 0008              		move.w	#$50,I2C_CMD(a6)	; set STO, WR
   2901 FFFC1DB0 6100 FECE                   		bsr		i2c_wait_tip	; wait for tip to clear
   2902 FFFC1DB4 6100 FF10                   		bsr		i2c_wait_rx_nack
   2903 FFFC1DB8 4E75                        		rts
                                             
   2905 FFFC1DBA                             audio_tbl1:
   2906 FFFC1DBA 0000 007D 0000 000C         		dc.w	$00,$7D,$00,$0C,$20,$01
   2907 FFFC1DC2 0020 0001                   
                                             ; a0
                                             ;
   2910 FFFC1DC6                             audio_write_reg6:
   2911 FFFC1DC6 41F9 FFFC 1DBA              		lea		audio_tbl1,a0
   2912 FFFC1DCC 4DF9 FFDC 0E00              		lea		I2C,a6				
   2913 FFFC1DD2 3D7C 0001 0004              		move.w	#1,I2C_CTRL(a6)		; enable the core
   2914 FFFC1DD8 3D7C 0076 0006              		move.w	#$76,I2C_TXR(a6)	; set slave address = %0111011
   2915 FFFC1DDE 3D7C 0090 0008              		move.w	#$90,I2C_CMD(a6)	; set STA, WR
   2916 FFFC1DE4 6100 FE9A                   		bsr		i2c_wait_tip	; wait for tip to clear
   2917 FFFC1DE8 6100 FEDC                   		bsr		i2c_wait_rx_nack
   2918 FFFC1DEC 3D7C 0040 0006              		move.w	#$40,I2C_TXR(a6)	; all regsister are $40xx
   2919 FFFC1DF2 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2920 FFFC1DF8 6100 FE86                   		bsr		i2c_wait_tip	; wait for tip to clear
   2921 FFFC1DFC 6100 FEC8                   		bsr		i2c_wait_rx_nack
                                             
   2923 FFFC1E00 3D40 0006                   		move.w	d0,I2C_TXR(a6)		; send register address
   2924 FFFC1E04 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2925 FFFC1E0A 6100 FE74                   		bsr		i2c_wait_tip	; wait for tip to clear
   2926 FFFC1E0E 6100 FEB6                   		bsr		i2c_wait_rx_nack
                                             		
   2928 FFFC1E12 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #0
   2929 FFFC1E16 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2930 FFFC1E1C 6100 FE62                   		bsr		i2c_wait_tip	; wait for tip to clear
   2931 FFFC1E20 6100 FEA4                   		bsr		i2c_wait_rx_nack
                                             
   2933 FFFC1E24 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #1
   2934 FFFC1E28 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2935 FFFC1E2E 6100 FE50                   		bsr		i2c_wait_tip	; wait for tip to clear
   2936 FFFC1E32 6100 FE92                   		bsr		i2c_wait_rx_nack
                                             
   2938 FFFC1E36 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #2
   2939 FFFC1E3A 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 50
bootrom.asm
   2940 FFFC1E40 6100 FE3E                   		bsr		i2c_wait_tip	; wait for tip to clear
   2941 FFFC1E44 6100 FE80                   		bsr		i2c_wait_rx_nack
                                             
   2943 FFFC1E48 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #3
   2944 FFFC1E4C 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2945 FFFC1E52 6100 FE2C                   		bsr		i2c_wait_tip	; wait for tip to clear
   2946 FFFC1E56 6100 FE6E                   		bsr		i2c_wait_rx_nack
                                             
   2948 FFFC1E5A 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #4
   2949 FFFC1E5E 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2950 FFFC1E64 6100 FE1A                   		bsr		i2c_wait_tip	; wait for tip to clear
   2951 FFFC1E68 6100 FE5C                   		bsr		i2c_wait_rx_nack
                                             
   2953 FFFC1E6C 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #5
   2954 FFFC1E70 3D7C 0050 0008              		move.w	#$50,I2C_CMD(a6)	; set WR, STO
   2955 FFFC1E76 6100 FE08                   		bsr		i2c_wait_tip		; wait for tip to clear
   2956 FFFC1E7A 6100 FE4A                   		bsr		i2c_wait_rx_nack
   2957 FFFC1E7E 4E75                        		rts
                                             
   2959 FFFC1E80                             set_hp_output:
   2960 FFFC1E80 7021                        		moveq	#$21,d0				;
   2961 FFFC1E82 7200                        		moveq	#0,d1
   2962 FFFC1E84 6100 FEDA                   		bsr		audio_write_reg
   2963 FFFC1E88 7020                        		moveq	#$20,d0				;
   2964 FFFC1E8A 6100 FED4                   		bsr		audio_write_reg
   2965 FFFC1E8E 7023                        		moveq	#$23,d0
   2966 FFFC1E90 323C 00E7                   		move.w	#$E7,d1		
   2967 FFFC1E94 6100 FECA                   		bsr		audio_write_reg
   2968 FFFC1E98 7024                        		moveq	#$24,d0
   2969 FFFC1E9A 323C 00E7                   		move.w	#$E7,d1		
   2970 FFFC1E9E 6100 FEC0                   		bsr		audio_write_reg
   2971 FFFC1EA2 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Realtime clock routines
                                             ;===============================================================================
                                             
   2977 FFFC1EA4                             rtc_read:
   2978 FFFC1EA4 2C7C FFDC 0E10              		movea.l	#I2C2,a6
   2979 FFFC1EAA 4BF9 0001 0600              		lea		RTCBuf,a5
   2980 FFFC1EB0 3D7C 0080 0004              		move.w	#$80,I2C_CTRL(a6)	; enable I2C
   2981 FFFC1EB6 303C 00DE                   		move.w	#$DE,d0				; read address, write op
   2982 FFFC1EBA 323C 0090                   		move.w	#$90,d1				; STA + wr bit
   2983 FFFC1EBE 6100 FDD0                   		bsr		i2c_wr_cmd
   2984 FFFC1EC2 4A00                        		tst.b	d0
   2985 FFFC1EC4 6B72                        		bmi		.rxerr
   2986 FFFC1EC6 303C 0000                   		move.w	#$00,d0				; address zero
   2987 FFFC1ECA 323C 0010                   		move.w	#$10,d1				; wr bit
   2988 FFFC1ECE 6100 FDC0                   		bsr		i2c_wr_cmd
   2989 FFFC1ED2 4A00                        		tst.b	d0
   2990 FFFC1ED4 6B62                        		bmi		.rxerr
   2991 FFFC1ED6 303C 00DF                   		move.w	#$DF,d0				; read address, read op
   2992 FFFC1EDA 323C 0090                   		move.w	#$90,d1				; STA + wr bit
   2993 FFFC1EDE 6100 FDB0                   		bsr		i2c_wr_cmd
   2994 FFFC1EE2 4A00                        		tst.b	d0
   2995 FFFC1EE4 6B52                        		bmi		.rxerr
                                             		
   2997 FFFC1EE6 343C 0020                   		move.w	#$20,d2
   2998 FFFC1EEA                             .0001:
   2999 FFFC1EEA 3D7C 0020 0008              		move.w	#$20,I2C_CMD(a6)	; rd bit
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 51
bootrom.asm
   3000 FFFC1EF0 6100 FD8E                   		bsr		i2c_wait_tip
   3001 FFFC1EF4 6100 FDD0                   		bsr		i2c_wait_rx_nack
   3002 FFFC1EF8 302E 000A                   		move.w	I2C_STAT(a6),d0
   3003 FFFC1EFC 4A00                        		tst.b	d0
   3004 FFFC1EFE 6B38                        		bmi		.rxerr
   3005 FFFC1F00 302E 0006                   		move.w	I2C_RXR(a6),d0
   3006 FFFC1F04 1B80 2000                   		move.b	d0,(a5,d2.w)
   3007 FFFC1F08 5242                        		add.w	#1,d2
   3008 FFFC1F0A B47C 005F                   		cmp.w	#$5F,d2
   3009 FFFC1F0E 66DA                        		bne		.0001
   3010 FFFC1F10 3D7C 0068 0008              		move.w	#$68,I2C_CMD(a6)	; STO, rd bit + nack
   3011 FFFC1F16 6100 FD68                   		bsr		i2c_wait_tip
   3012 FFFC1F1A 6100 FDAA                   		bsr		i2c_wait_rx_nack
   3013 FFFC1F1E 302E 000A                   		move.w	I2C_STAT(a6),d0
   3014 FFFC1F22 4A00                        		tst.b	d0
   3015 FFFC1F24 6B12                        		bmi		.rxerr
   3016 FFFC1F26 302E 0006                   		move.w	I2C_RXR(a6),d0
   3017 FFFC1F2A 1B80 2000                   		move.b	d0,(a5,d2.w)
   3018 FFFC1F2E 3D7C 0000 0004              		move.w	#0,I2C_CTRL(a6)		; disable I2C and return 0
   3019 FFFC1F34 7000                        		moveq	#0,d0
   3020 FFFC1F36 4E75                        		rts
   3021 FFFC1F38                             .rxerr:
   3022 FFFC1F38 3D7C 0000 0004              		move.w	#0,I2C_CTRL(a6)		; disable I2C and return status
   3023 FFFC1F3E 4E75                        		rts
                                             
   3025 FFFC1F40                             rtc_write:
   3026 FFFC1F40 2C7C FFDC 0E10              		movea.l	#I2C2,a6
   3027 FFFC1F46 4BF9 0001 0600              		lea		RTCBuf,a5
   3028 FFFC1F4C 3D7C 0080 0004              		move.w	#$80,I2C_CTRL(a6)	; enable I2C
   3029 FFFC1F52 303C 00DE                   		move.w	#$DE,d0				; read address, write op
   3030 FFFC1F56 323C 0090                   		move.w	#$90,d1				; STA + wr bit
   3031 FFFC1F5A 6100 FD34                   		bsr		i2c_wr_cmd
   3032 FFFC1F5E 4A00                        		tst.b	d0
   3033 FFFC1F60 6B46                        		bmi		.rxerr
   3034 FFFC1F62 303C 0000                   		move.w	#$00,d0				; address zero
   3035 FFFC1F66 323C 0010                   		move.w	#$10,d1				; wr bit
   3036 FFFC1F6A 6100 FD24                   		bsr		i2c_wr_cmd
   3037 FFFC1F6E 4A00                        		tst.b	d0
   3038 FFFC1F70 6B36                        		bmi		.rxerr
   3039 FFFC1F72 343C 0020                   		move.w	#$20,d2
   3040 FFFC1F76                             .0001:
   3041 FFFC1F76 1035 2000                   		move.b	(a5,d2.w),d0
   3042 FFFC1F7A 323C 0010                   		move.w	#$10,d1
   3043 FFFC1F7E 6100 FD10                   		bsr		i2c_wr_cmd
   3044 FFFC1F82 4A00                        		tst.b	d0
   3045 FFFC1F84 6B22                        		bmi		.rxerr
   3046 FFFC1F86 5242                        		add.w	#1,d2
   3047 FFFC1F88 B47C 005F                   		cmp.w	#$5F,d2
   3048 FFFC1F8C 66E8                        		bne.s	.0001
   3049 FFFC1F8E 1035 2000                   		move.b	(a5,d2.w),d0
   3050 FFFC1F92 323C 0050                   		move.w	#$50,d1				; STO, wr bit
   3051 FFFC1F96 6100 FCF8                   		bsr		i2c_wr_cmd
   3052 FFFC1F9A 4A00                        		tst.b	d0
   3053 FFFC1F9C 6B0A                        		bmi		.rxerr
   3054 FFFC1F9E 3D7C 0000 0004              		move.w	#0,I2C_CTRL(a6)		; disable I2C and return 0
   3055 FFFC1FA4 7000                        		moveq	#0,d0
   3056 FFFC1FA6 4E75                        		rts
   3057 FFFC1FA8                             .rxerr:
   3058 FFFC1FA8 3D7C 0000 0004              		move.w	#0,I2C_CTRL(a6)		; disable I2C and return status
   3059 FFFC1FAE 4E75                        		rts
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 52
bootrom.asm
                                             
   3061 FFFC1FB0                             msgRtcReadFail:
   3062 FFFC1FB0 52 54 43 20 72 65 61 64     		dc.b	"RTC read/write failed.",$0D,$0A,$00
   3063 FFFC1FB8 2F 77 72 69 74 65 20 66     
   3064 FFFC1FC0 61 69 6C 65 64 2E 0D 0A     
   3065 FFFC1FC8 00                          
                                             
                                             
                                             ;===============================================================================
                                             ; ORGFX routines
                                             ;===============================================================================
                                             
   3072 FFFC1FC9 FF                          		align	2
   3073 FFFC1FCA                             gfx_wait:
   3074 FFFC1FCA 48E7 8004                   		movem.l	d0/a5,-(a7)
   3075 FFFC1FCE 4BF9 FFE0 0000              		lea		VDGREG,a5
   3076 FFFC1FD4 2B7C 0000 0004 0700         		move.l	#GFX_STATUS,$700(a5)	; address status register
   3077 FFFC1FDC                             .0001:
   3078 FFFC1FDC 3B7C 00F3 0708              		move.w	#$F3,$708(a5)		; set control (generate bus access to gfx)
   3079 FFFC1FE2 202D 0704                   		move.l	$704(a5),d0			; get status value
   3080 FFFC1FE6 0800 0000                   		btst	#0,d0				; test bit 0
   3081 FFFC1FEA 66F0                        		bne.s	.0001
   3082 FFFC1FEC 4CDF 2001                   		movem.l	(a7)+,d0/a5
   3083 FFFC1FF0 4E75                        		rts
                                             
   3085 FFFC1FF2                             gfx_set_400x300:
   3086 FFFC1FF2 6100 FFD6                   		bsr		gfx_wait
   3087 FFFC1FF6 4BF9 FFE0 0000              		lea		VDGREG,a5
   3088 FFFC1FFC 2B7C 0000 0014 0700         		move.l	#GFX_TARGET_SIZE_X,$700(a5)	; address register
   3089 FFFC2004 2B7C 0000 0190 0704         		move.l	#400,$704(a5)				; set data
   3090 FFFC200C 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3091 FFFC2012 2B7C 0000 0018 0700         		move.l	#GFX_TARGET_SIZE_Y,$700(a5)	; address register
   3092 FFFC201A 2B7C 0000 012C 0704         		move.l	#300,$704(a5)				; set data
   3093 FFFC2022 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3094 FFFC2028 4E75                        		rts
                                             
   3096 FFFC202A                             gfx_init:
   3097 FFFC202A 6100 FF9E                   		bsr		gfx_wait
   3098 FFFC202E 4BF9 FFE0 0000              		lea		VDGREG,a5
   3099 FFFC2034 2B7C 0000 0000 0700         		move.l	#GFX_CONTROL,$700(a5)		; address register
   3100 FFFC203C 23FC 0000 0000 0001 042C    		move.l	#0,gfx_control_reg_mem
                                             
   3102 FFFC2046 2B7C 0000 0000 0704         		move.l	#0,$704(a5)
   3103 FFFC204E 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3104 FFFC2054 2B7C 0000 0010 0700         		move.l	#GFX_TARGET_BASE,$700(a5)	; address register
   3105 FFFC205C 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3106 FFFC2062 4E75                        		rts
                                             
   3108 FFFC2064                             gfx_set_color_depth:
   3109 FFFC2064 4BF9 FFE0 0000              		lea		VDGREG,a5
   3110 FFFC206A 02B9 FFFF FFFD 0001 042C    		and.l	#-3,gfx_control_reg_mem		; mask off 2 LSB (color depth field)
                                             
   3112 FFFC2074 00B9 0000 0001 0001 042C    		or.l	#1,gfx_control_reg_mem		; select 16 bpp
                                             
   3114 FFFC207E 6100 FF4A                   		bsr		gfx_wait
   3115 FFFC2082 2B7C 0000 0000 0700         		move.l	#GFX_CONTROL,$700(a5)		; address register
   3116 FFFC208A 2B79 0001 042C 0704         		move.l	gfx_control_reg_mem,$704(a5)
   3117 FFFC2092 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3118 FFFC2098 4E75                        		rts
                                             
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 53
bootrom.asm
   3120 FFFC209A                             gfx_set_color:
   3121 FFFC209A 6100 FF2E                   		bsr		gfx_wait
   3122 FFFC209E 4BF9 FFE0 0000              		lea		VDGREG,a5
   3123 FFFC20A4 2B7C 0000 0084 0700         		move.l	#GFX_COLOR0,$700(a5)
   3124 FFFC20AC 2B40 0704                   		move.l	d0,$704(a5)
   3125 FFFC20B0 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3126 FFFC20B6 4E75                        		rts
                                             
   3128 FFFC20B8                             gfx_line:
   3129 FFFC20B8 6100 FF10                   		bsr		gfx_wait
   3130 FFFC20BC 4BF9 FFE0 0000              		lea		VDGREG,a5
   3131 FFFC20C2 2B7C 0000 0038 0700         		move.l	#GFX_DEST_PIXEL_X,$700(a5)
   3132 FFFC20CA 2B40 0704                   		move.l	d0,$704(a5)
   3133 FFFC20CE 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3134 FFFC20D4 2B7C 0000 003C 0700         		move.l	#GFX_DEST_PIXEL_Y,$700(a5)
   3135 FFFC20DC 2B41 0704                   		move.l	d1,$704(a5)
   3136 FFFC20E0 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3137 FFFC20E6 2B7C 0000 0040 0700         		move.l	#GFX_DEST_PIXEL_Z,$700(a5)
   3138 FFFC20EE 2B7C 0000 0000 0704         		move.l	#0,$704(a5)
   3139 FFFC20F6 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3140 FFFC20FC 2C39 0001 042C              		move.l	gfx_control_reg_mem,d6
   3141 FFFC2102 0086 0000 0000              		or.l	#GFX_ACTIVE_POINT0,d6
   3142 FFFC2108 2A86                        		move.l	d6,GFX_CONTROL(a5)
   3143 FFFC210A 2B46 0704                   		move.l	d6,$704(a5)
   3144 FFFC210E 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3145 FFFC2114 2B7C 0000 0038 0700         		move.l	#GFX_DEST_PIXEL_X,$700(a5)
   3146 FFFC211C 2B42 0704                   		move.l	d2,$704(a5)
   3147 FFFC2120 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3148 FFFC2126 2B7C 0000 003C 0700         		move.l	#GFX_DEST_PIXEL_Y,$700(a5)
   3149 FFFC212E 2B43 0704                   		move.l	d3,$704(a5)
   3150 FFFC2132 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3151 FFFC2138 2B7C 0000 0040 0700         		move.l	#GFX_DEST_PIXEL_Z,$700(a5)
   3152 FFFC2140 2B7C 0000 0000 0704         		move.l	#0,$704(a5)
   3153 FFFC2148 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3154 FFFC214E 2C39 0001 042C              		move.l	gfx_control_reg_mem,d6
   3155 FFFC2154 0086 0001 0000              		or.l	#GFX_ACTIVE_POINT1,d6
   3156 FFFC215A 2A86                        		move.l	d6,GFX_CONTROL(a5)
   3157 FFFC215C 2B46 0704                   		move.l	d6,$704(a5)
   3158 FFFC2160 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3159 FFFC2166 2C39 0001 042C              		move.l	gfx_control_reg_mem,d6
   3160 FFFC216C 0086 0000 0200              		or.l	#GFX_LINE,d6
   3161 FFFC2172 2A86                        		move.l	d6,GFX_CONTROL(a5)
   3162 FFFC2174 2B46 0704                   		move.l	d6,$704(a5)
   3163 FFFC2178 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3164 FFFC217E 4E75                        		rts
                                             
   3166 FFFC2180                             gfx_demo:
   3167 FFFC2180 6100 FEA8                   		bsr		gfx_init
   3168 FFFC2184 6100 FE6C                   		bsr		gfx_set_400x300
   3169 FFFC2188                             .0001:
   3170 FFFC2188 4DF9 FFDC 0000              		lea		$FFDC0000,a6	; set I/O base
   3171 FFFC218E 202E 0C00                   		move.l	$0C00(a6),d0	; get 32 bit number
   3172 FFFC2192 3200                        		move.w	d0,d1			; use bits 0 to 8 for y0
   3173 FFFC2194 4840                        		swap	d0				; and bits 16 to 24 for x0
   3174 FFFC2196 0240 00FF                   		and.w	#$FF,d0		; 0 to 511
   3175 FFFC219A 0241 00FF                   		and.w	#$FF,d1		; 0 to 511
   3176 FFFC219E 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   3177 FFFC21A2 242E 0C00                   		move.l	$0C00(a6),d2
   3178 FFFC21A6 3602                        		move.w	d2,d3
   3179 FFFC21A8 4842                        		swap	d2
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 54
bootrom.asm
   3180 FFFC21AA 0242 00FF                   		and.w	#$FF,d2		; 0 to 511
   3181 FFFC21AE 0243 00FF                   		and.w	#$FF,d3		; 0 to 511
   3182 FFFC21B2 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   3183 FFFC21B6 282E 0C00                   		move.l	$0C00(a6),d4
   3184 FFFC21BA 0244 7FFF                   		and.w	#RGBMASK,d4		; 9/15 bits color
   3185 FFFC21BE 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   3186 FFFC21C2 2C00                        		move.l	d0,d6
   3187 FFFC21C4 2004                        		move.l	d4,d0
   3188 FFFC21C6 6100 FED2                   		bsr		gfx_set_color
   3189 FFFC21CA 2006                        		move.l	d6,d0
   3190 FFFC21CC 6100 FEEA                   		bsr		gfx_line
   3191 FFFC21D0 60B6                        		bra		.0001
                                             
                                             		
                                             ; Randomize the screen	
                                             ;		move.l	#VDGBUF,A0
                                             ;		move.l	#%011011111,D0		; light blue
                                             ;		move.l	#640*512,D1
                                             ;clrscr_loop1:
                                             ;		move.l	$0C00(a6),d0			; get a random number
                                             ;		clr.w	$0C04(a6)				; generate next number
                                             ;		move.w	d0,(a0)+				; store it to the screen
                                             ;		sub.l	#1,d1
                                             ;		bne		clrscr_loop1
                                             
   3205 FFFC21D2                             msg_start:
   3206 FFFC21D2 4E 34 56 20 36 38 6B 20     	dc.b	"N4V 68k System Starting",CR,LF,0
   3207 FFFC21DA 53 79 73 74 65 6D 20 53     
   3208 FFFC21E2 74 61 72 74 69 6E 67 0D     
   3209 FFFC21EA 0A 00                       
                                             
                                             ;===============================================================================
                                             ; MMU
                                             ;===============================================================================
                                             		align	2
   3215 FFFC21EC                             mmu_init:
   3216 FFFC21EC 33FC 1010 FFDC 0600         		move.w	#$1010,leds
   3217 FFFC21F4 223C 0002 0000              		move.l	#131072,d1					; count of addresses to set map
   3218 FFFC21FA 207C 1FF4 0000              		movea.l	#$1FF40000,a0				; base of page tables
   3219 FFFC2200 7007                        		moveq	#7,d0						; start at page zero, read,write,execute
   3220 FFFC2202                             .0001:
   3221 FFFC2202 20C0                        		move.l	d0,(a0)+					; update page table entry
   3222 FFFC2204 0680 0000 1000              		add.l	#$1000,d0
   3223 FFFC220A 5381                        		sub.l	#1,d1
   3224 FFFC220C 66F4                        		bne.s	.0001
                                             	
                                             		; Setup the page directory
                                             		; There are only 128 entries to be set, but all entries must be
                                             		; setup because there's no page faulting on not present. All the
                                             		; entries must point to present pages. So the part of the address
                                             		; space that isn't present is setup to point to a dummy page
                                             		; table.
                                             
   3233 FFFC220E 33FC 1111 FFDC 0600         		move.w	#$1111,leds
   3234 FFFC2216 323C 0400                   		move.w	#1024,d1			; 1024 entries to setup
   3235 FFFC221A 207C 1FFF E000              		move.l	#$1FFFE000,a0		; page table for not present entries
   3236 FFFC2220 203C 1FFF D006              		move.l	#$1FFFD006,d0		; point all entries for not present pages to $1FFFD000
   3237 FFFC2226                             .0003:
   3238 FFFC2226 20C0                        		move.l	d0,(a0)+
   3239 FFFC2228 51C9 FFFC                   		dbra	d1,.0003
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 55
bootrom.asm
                                             
   3241 FFFC222C 33FC 1212 FFDC 0600         		move.w	#$1212,leds
   3242 FFFC2234 747F                        		move.l	#127,d2
   3243 FFFC2236 207C 1FFF F000              		movea.l	#$1FFFF000,a0		; a0 = page directory address
   3244 FFFC223C 223C 1FFF E000              		move.l	#$1FFFE000,d1		; point to not present page table
   3245 FFFC2242 203C 1FF4 0007              		move.l	#$1FF40007,d0
   3246 FFFC2248                             .0002:
   3247 FFFC2248 2141 0200                   		move.l	d1,$0200(a0)		; 7/8 of memory isn't available
   3248 FFFC224C 2141 0400                   		move.l	d1,$0400(a0)
   3249 FFFC2250 2141 0600                   		move.l	d1,$0600(a0)
   3250 FFFC2254 2141 0800                   		move.l	d1,$0800(a0)
   3251 FFFC2258 2141 0A00                   		move.l	d1,$0A00(a0)
   3252 FFFC225C 2141 0C00                   		move.l	d1,$0C00(a0)
   3253 FFFC2260 2141 0E00                   		move.l	d1,$0E00(a0)
   3254 FFFC2264 20C0                        		move.l	d0,(a0)+
   3255 FFFC2266 0680 0000 1000              		add.l	#$1000,d0
   3256 FFFC226C 51CA FFDA                   		dbra	d2,.0002
   3257 FFFC2270 33FC 1919 FFDC 0600         		move.w	#$1919,leds
   3258 FFFC2278 33FC 0000 FFFF FFF6         		move.w	#$00,$FFFFFFF6				; set asid
   3259 FFFC2280 23F9 1FFF F000 FFFF FFF0    		move.l	$1FFFF000,$FFFFFFF0			; set page directory address, enable
                                             
   3261 FFFC228A 4E75                        		rts
                                             		
                                             ;===============================================================================
                                             ;===============================================================================
                                             ;===============================================================================
                                             ;===============================================================================
                                             
   3268 FFFC228C                             font8:
   3269 FFFC228C 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $00
                                             
   3271 FFFC2294 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3273 FFFC229C 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3275 FFFC22A4 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3277 FFFC22AC 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $04
                                             
   3279 FFFC22B4 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3281 FFFC22BC 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3283 FFFC22C4 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3285 FFFC22CC 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $08
                                             
   3287 FFFC22D4 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3289 FFFC22DC 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3291 FFFC22E4 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3293 FFFC22EC 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $0C
                                             
   3295 FFFC22F4 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3297 FFFC22FC 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3299 FFFC2304 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 56
bootrom.asm
                                             
   3301 FFFC230C 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $10
                                             
   3303 FFFC2314 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3305 FFFC231C 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3307 FFFC2324 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3309 FFFC232C 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $14
                                             
   3311 FFFC2334 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3313 FFFC233C 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3315 FFFC2344 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3317 FFFC234C 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $18
                                             
   3319 FFFC2354 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3321 FFFC235C 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3323 FFFC2364 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3325 FFFC236C 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $1C
                                             
   3327 FFFC2374 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3329 FFFC237C 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3331 FFFC2384 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3333 FFFC238C 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; SPACE
                                             
   3335 FFFC2394 18 18 18 18 18 00 18 00     	dc.b	$18,$18,$18,$18,$18,$00,$18,$00	; !
                                             
   3337 FFFC239C 6C 6C 00 00 00 00 00 00     	dc.b	$6C,$6C,$00,$00,$00,$00,$00,$00	; "
                                             
   3339 FFFC23A4 6C 6C FE 6C FE 6C 6C 00     	dc.b	$6C,$6C,$FE,$6C,$FE,$6C,$6C,$00	; #
                                             
   3341 FFFC23AC 18 3E 60 3C 06 7C 18 00     	dc.b	$18,$3E,$60,$3C,$06,$7C,$18,$00	; $
                                             
   3343 FFFC23B4 00 66 AC D8 36 6A CC 00     	dc.b	$00,$66,$AC,$D8,$36,$6A,$CC,$00	; %
                                             
   3345 FFFC23BC 38 6C 68 76 DC CE 7B 00     	dc.b	$38,$6C,$68,$76,$DC,$CE,$7B,$00	; &
                                             
   3347 FFFC23C4 18 18 30 00 00 00 00 00     	dc.b	$18,$18,$30,$00,$00,$00,$00,$00	; '
                                             
   3349 FFFC23CC 0C 18 30 30 30 18 0C 00     	dc.b	$0C,$18,$30,$30,$30,$18,$0C,$00	; (
                                             
   3351 FFFC23D4 30 18 0C 0C 0C 18 30 00     	dc.b	$30,$18,$0C,$0C,$0C,$18,$30,$00	; )
                                             
   3353 FFFC23DC 00 66 3C FF 3C 66 00 00     	dc.b	$00,$66,$3C,$FF,$3C,$66,$00,$00	; *
                                             
   3355 FFFC23E4 00 18 18 7E 18 18 00 00     	dc.b	$00,$18,$18,$7E,$18,$18,$00,$00	; +
                                             
   3357 FFFC23EC 00 00 00 00 00 18 18 30     	dc.b	$00,$00,$00,$00,$00,$18,$18,$30	; ,
                                             
   3359 FFFC23F4 00 00 00 7E 00 00 00 00     	dc.b	$00,$00,$00,$7E,$00,$00,$00,$00	; -
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 57
bootrom.asm
                                             
   3361 FFFC23FC 00 00 00 00 00 18 18 00     	dc.b	$00,$00,$00,$00,$00,$18,$18,$00	; .
                                             
   3363 FFFC2404 03 06 0C 18 30 60 C0 00     	dc.b	$03,$06,$0C,$18,$30,$60,$C0,$00	; /
                                             
   3365 FFFC240C 3C 66 6E 7E 76 66 3C 00     	dc.b	$3C,$66,$6E,$7E,$76,$66,$3C,$00	; 0
                                             
   3367 FFFC2414 18 38 78 18 18 18 18 00     	dc.b	$18,$38,$78,$18,$18,$18,$18,$00	; 1
                                             
   3369 FFFC241C 3C 66 06 0C 18 30 7E 00     	dc.b	$3C,$66,$06,$0C,$18,$30,$7E,$00	; 2
                                             
   3371 FFFC2424 3C 66 06 1C 06 66 3C 00     	dc.b	$3C,$66,$06,$1C,$06,$66,$3C,$00	; 3
                                             
   3373 FFFC242C 1C 3C 6C CC FE 0C 0C 00     	dc.b	$1C,$3C,$6C,$CC,$FE,$0C,$0C,$00	; 4
                                             
   3375 FFFC2434 7E 60 7C 06 06 66 3C 00     	dc.b	$7E,$60,$7C,$06,$06,$66,$3C,$00	; 5
                                             
   3377 FFFC243C 1C 30 60 7C 66 66 3C 00     	dc.b	$1C,$30,$60,$7C,$66,$66,$3C,$00	; 6
                                             
   3379 FFFC2444 7E 06 06 0C 18 18 18 00     	dc.b	$7E,$06,$06,$0C,$18,$18,$18,$00	; 7
                                             
   3381 FFFC244C 3C 66 66 3C 66 66 3C 00     	dc.b	$3C,$66,$66,$3C,$66,$66,$3C,$00	; 8
                                             
   3383 FFFC2454 3C 66 66 3E 06 0C 38 00     	dc.b	$3C,$66,$66,$3E,$06,$0C,$38,$00	; 9
                                             
   3385 FFFC245C 00 18 18 00 00 18 18 00     	dc.b	$00,$18,$18,$00,$00,$18,$18,$00	; :
                                             
   3387 FFFC2464 00 18 18 00 00 18 18 30     	dc.b	$00,$18,$18,$00,$00,$18,$18,$30	; ;
                                             
   3389 FFFC246C 00 06 18 60 18 06 00 00     	dc.b	$00,$06,$18,$60,$18,$06,$00,$00	; <
                                             
   3391 FFFC2474 00 00 7E 00 7E 00 00 00     	dc.b	$00,$00,$7E,$00,$7E,$00,$00,$00	; =
                                             
   3393 FFFC247C 00 60 18 06 18 60 00 00     	dc.b	$00,$60,$18,$06,$18,$60,$00,$00	; >
                                             
   3395 FFFC2484 3C 66 06 0C 18 00 18 00     	dc.b	$3C,$66,$06,$0C,$18,$00,$18,$00	; ?
                                             
   3397 FFFC248C 7C C6 DE D6 DE C0 78 00     	dc.b	$7C,$C6,$DE,$D6,$DE,$C0,$78,$00	; @
                                             
   3399 FFFC2494 3C 66 66 7E 66 66 66 00     	dc.b	$3C,$66,$66,$7E,$66,$66,$66,$00	; A
                                             
   3401 FFFC249C 7C 66 66 7C 66 66 7C 00     	dc.b	$7C,$66,$66,$7C,$66,$66,$7C,$00	; B
                                             
   3403 FFFC24A4 1E 30 60 60 60 30 1E 00     	dc.b	$1E,$30,$60,$60,$60,$30,$1E,$00	; C
                                             
   3405 FFFC24AC 78 6C 66 66 66 6C 78 00     	dc.b	$78,$6C,$66,$66,$66,$6C,$78,$00	; D
                                             
   3407 FFFC24B4 7E 60 60 78 60 60 7E 00     	dc.b	$7E,$60,$60,$78,$60,$60,$7E,$00	; E
                                             
   3409 FFFC24BC 7E 60 60 78 60 60 60 00     	dc.b	$7E,$60,$60,$78,$60,$60,$60,$00	; F
                                             
   3411 FFFC24C4 3C 66 60 6E 66 66 3E 00     	dc.b	$3C,$66,$60,$6E,$66,$66,$3E,$00	; G
                                             
   3413 FFFC24CC 66 66 66 7E 66 66 66 00     	dc.b	$66,$66,$66,$7E,$66,$66,$66,$00	; H
                                             
   3415 FFFC24D4 3C 18 18 18 18 18 3C 00     	dc.b	$3C,$18,$18,$18,$18,$18,$3C,$00	; I
                                             
   3417 FFFC24DC 06 06 06 06 06 66 3C 00     	dc.b	$06,$06,$06,$06,$06,$66,$3C,$00	; J
                                             
   3419 FFFC24E4 C6 CC D8 F0 D8 CC C6 00     	dc.b	$C6,$CC,$D8,$F0,$D8,$CC,$C6,$00	; K
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 58
bootrom.asm
                                             
   3421 FFFC24EC 60 60 60 60 60 60 7E 00     	dc.b	$60,$60,$60,$60,$60,$60,$7E,$00	; L
                                             
   3423 FFFC24F4 C6 EE FE D6 C6 C6 C6 00     	dc.b	$C6,$EE,$FE,$D6,$C6,$C6,$C6,$00	; M
                                             
   3425 FFFC24FC C6 E6 F6 DE CE C6 C6 00     	dc.b	$C6,$E6,$F6,$DE,$CE,$C6,$C6,$00	; N
                                             
   3427 FFFC2504 3C 66 66 66 66 66 3C 00     	dc.b	$3C,$66,$66,$66,$66,$66,$3C,$00	; O
                                             
   3429 FFFC250C 7C 66 66 7C 60 60 60 00     	dc.b	$7C,$66,$66,$7C,$60,$60,$60,$00	; P
                                             
   3431 FFFC2514 78 CC CC CC CC DC 7E 00     	dc.b	$78,$CC,$CC,$CC,$CC,$DC,$7E,$00	; Q
                                             
   3433 FFFC251C 7C 66 66 7C 6C 66 66 00     	dc.b	$7C,$66,$66,$7C,$6C,$66,$66,$00	; R
                                             
   3435 FFFC2524 3C 66 70 3C 0E 66 3C 00     	dc.b	$3C,$66,$70,$3C,$0E,$66,$3C,$00	; S
                                             
   3437 FFFC252C 7E 18 18 18 18 18 18 00     	dc.b	$7E,$18,$18,$18,$18,$18,$18,$00	; T
                                             
   3439 FFFC2534 66 66 66 66 66 66 3C 00     	dc.b	$66,$66,$66,$66,$66,$66,$3C,$00	; U
                                             
   3441 FFFC253C 66 66 66 66 3C 3C 18 00     	dc.b	$66,$66,$66,$66,$3C,$3C,$18,$00	; V
                                             
   3443 FFFC2544 C6 C6 C6 D6 FE EE C6 00     	dc.b	$C6,$C6,$C6,$D6,$FE,$EE,$C6,$00	; W
                                             
   3445 FFFC254C C3 66 3C 18 3C 66 C3 00     	dc.b	$C3,$66,$3C,$18,$3C,$66,$C3,$00	; X
                                             
   3447 FFFC2554 C3 66 3C 18 18 18 18 00     	dc.b	$C3,$66,$3C,$18,$18,$18,$18,$00	; Y
                                             
   3449 FFFC255C FE 0C 18 30 60 C0 FE 00     	dc.b	$FE,$0C,$18,$30,$60,$C0,$FE,$00	; Z
                                             
   3451 FFFC2564 3C 30 30 30 30 30 3C 00     	dc.b	$3C,$30,$30,$30,$30,$30,$3C,$00	; [
                                             
   3453 FFFC256C C0 60 30 18 0C 06 03 00     	dc.b	$C0,$60,$30,$18,$0C,$06,$03,$00	; \
                                             
   3455 FFFC2574 3C 0C 0C 0C 0C 0C 3C 00     	dc.b	$3C,$0C,$0C,$0C,$0C,$0C,$3C,$00	; ]
                                             
   3457 FFFC257C 10 38 6C C6 00 00 00 00     	dc.b	$10,$38,$6C,$C6,$00,$00,$00,$00	; ^
                                             
   3459 FFFC2584 00 00 00 00 00 00 00 FE     	dc.b	$00,$00,$00,$00,$00,$00,$00,$FE	; _
                                             
   3461 FFFC258C 18 18 0C 00 00 00 00 00     	dc.b	$18,$18,$0C,$00,$00,$00,$00,$00	; `
                                             
   3463 FFFC2594 00 00 3C 06 3E 66 3E 00     	dc.b	$00,$00,$3C,$06,$3E,$66,$3E,$00	; a
                                             
   3465 FFFC259C 60 60 7C 66 66 66 7C 00     	dc.b	$60,$60,$7C,$66,$66,$66,$7C,$00	; b
                                             
   3467 FFFC25A4 00 00 3C 60 60 60 3C 00     	dc.b	$00,$00,$3C,$60,$60,$60,$3C,$00	; c
                                             
   3469 FFFC25AC 06 06 3E 66 66 66 3E 00     	dc.b	$06,$06,$3E,$66,$66,$66,$3E,$00	; d
                                             
   3471 FFFC25B4 00 00 3C 66 7E 60 3C 00     	dc.b	$00,$00,$3C,$66,$7E,$60,$3C,$00	; e
                                             
   3473 FFFC25BC 1C 30 7C 30 30 30 30 00     	dc.b	$1C,$30,$7C,$30,$30,$30,$30,$00	; f
                                             
   3475 FFFC25C4 00 00 3E 66 66 3E 06 3C     	dc.b	$00,$00,$3E,$66,$66,$3E,$06,$3C	; g
                                             
   3477 FFFC25CC 60 60 7C 66 66 66 66 00     	dc.b	$60,$60,$7C,$66,$66,$66,$66,$00	; h
                                             
   3479 FFFC25D4 18 00 18 18 18 18 0C 00     	dc.b	$18,$00,$18,$18,$18,$18,$0C,$00	; i
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 59
bootrom.asm
                                             
   3481 FFFC25DC 0C 00 0C 0C 0C 0C 0C 78     	dc.b	$0C,$00,$0C,$0C,$0C,$0C,$0C,$78	; j
                                             
   3483 FFFC25E4 60 60 66 6C 78 6C 66 00     	dc.b	$60,$60,$66,$6C,$78,$6C,$66,$00	; k
                                             
   3485 FFFC25EC 18 18 18 18 18 18 0C 00     	dc.b	$18,$18,$18,$18,$18,$18,$0C,$00	; l
                                             
   3487 FFFC25F4 00 00 EC FE D6 C6 C6 00     	dc.b	$00,$00,$EC,$FE,$D6,$C6,$C6,$00	; m
                                             
   3489 FFFC25FC 00 00 7C 66 66 66 66 00     	dc.b	$00,$00,$7C,$66,$66,$66,$66,$00	; n
                                             
   3491 FFFC2604 00 00 3C 66 66 66 3C 00     	dc.b	$00,$00,$3C,$66,$66,$66,$3C,$00	; o
                                             
   3493 FFFC260C 00 00 7C 66 66 7C 60 60     	dc.b	$00,$00,$7C,$66,$66,$7C,$60,$60	; p
                                             
   3495 FFFC2614 00 00 3E 66 66 3E 06 06     	dc.b	$00,$00,$3E,$66,$66,$3E,$06,$06	; q
                                             
   3497 FFFC261C 00 00 7C 66 60 60 60 00     	dc.b	$00,$00,$7C,$66,$60,$60,$60,$00	; r
                                             
   3499 FFFC2624 00 00 3C 60 3C 06 7C 00     	dc.b	$00,$00,$3C,$60,$3C,$06,$7C,$00	; s
                                             
   3501 FFFC262C 30 30 7C 30 30 30 1C 00     	dc.b	$30,$30,$7C,$30,$30,$30,$1C,$00	; t
                                             
   3503 FFFC2634 00 00 66 66 66 66 3E 00     	dc.b	$00,$00,$66,$66,$66,$66,$3E,$00	; u
                                             
   3505 FFFC263C 00 00 66 66 66 3C 18 00     	dc.b	$00,$00,$66,$66,$66,$3C,$18,$00	; v
                                             
   3507 FFFC2644 00 00 C6 C6 D6 FE 6C 00     	dc.b	$00,$00,$C6,$C6,$D6,$FE,$6C,$00	; w
                                             
   3509 FFFC264C 00 00 C6 6C 38 6C C6 00     	dc.b	$00,$00,$C6,$6C,$38,$6C,$C6,$00	; x
                                             
   3511 FFFC2654 00 00 66 66 66 3C 18 30     	dc.b	$00,$00,$66,$66,$66,$3C,$18,$30	; y
                                             
   3513 FFFC265C 00 00 7E 0C 18 30 7E 00     	dc.b	$00,$00,$7E,$0C,$18,$30,$7E,$00	; z
                                             
   3515 FFFC2664 0E 18 18 70 18 18 0E 00     	dc.b	$0E,$18,$18,$70,$18,$18,$0E,$00	; {
                                             
   3517 FFFC266C 18 18 18 18 18 18 18 00     	dc.b	$18,$18,$18,$18,$18,$18,$18,$00	; |
                                             
   3519 FFFC2674 70 18 18 0E 18 18 70 00     	dc.b	$70,$18,$18,$0E,$18,$18,$70,$00	; }
                                             
   3521 FFFC267C 72 9C 00 00 00 00 00 00     	dc.b	$72,$9C,$00,$00,$00,$00,$00,$00	; ~
                                             
   3523 FFFC2684 FE FE FE FE FE FE FE 00     	dc.b	$FE,$FE,$FE,$FE,$FE,$FE,$FE,$00	; 
                                             
                                             
                                             
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 1
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm

                                             ;*****************************************************************
                                             ;								 *
                                             ;		Tiny BASIC for the Motorola MC68000		 *
                                             ;								 *
                                             ; Derived from Palo Alto Tiny BASIC as published in the May 1976 *
                                             ; issue of Dr. Dobb's Journal.  Adapted to the 68000 by:         *
                                             ;	Gordon Brandly						 *
                                             ;	12147 - 51 Street					 *
                                             ;	Edmonton AB  T5W 3G8					 *
                                             ;	Canada							 *
                                             ;	(updated mailing address for 1996)			 *
                                             ;								 *
                                             ; This version is for MEX68KECB Educational Computer Board I/O.  *
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 2
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
                                             ;								 *
                                             ;*****************************************************************
                                             ;    Copyright (C) 1984 by Gordon Brandly. This program may be	 *
                                             ;    freely distributed for personal use only. All commercial	 *
                                             ;		       rights are reserved.			 *
                                             ;*****************************************************************
                                             
                                             ; Vers. 1.0  1984/7/17	- Original version by Gordon Brandly
                                             ;	1.1  1984/12/9	- Addition of '$' print term by Marvin Lipford
                                             ;	1.2  1985/4/9	- Bug fix in multiply routine by Rick Murray
                                             
                                             ;	OPT	FRS,BRS 	forward ref.'s & branches default to short
                                             
                                             CR	EQU	0x0D		;ASCII equates
                                             LF	EQU	0x0A
                                             TAB	EQU	0x09
                                             CTRLC	EQU	0x03
                                             CTRLH	EQU	0x08
                                             CTRLS	EQU	0x13
                                             CTRLX	EQU	0x18
                                             
                                             BUFLEN	EQU	80	;	length of keyboard input buffer
                                             
                                             ;*
                                             ;* Internal variables follow:
                                             ;*
                                             	BSS
                                             	ORG		0x600
   3568 00000600                             RANPNT:
   3569 00000600                             	DC.L	START	;	random number pointer
   3570 00000604                             CURRNT:
   3571 00000604                             	DC.L	1		;Current line pointer
   3572 00000608                             STKGOS:
   3573 00000608                             	DC.L	1		;Saves stack pointer in 'GOSUB'
   3574 0000060C                             STKINP:
   3575 0000060C                             	DC.L	1		;Saves stack pointer during 'INPUT'
   3576 00000610                             LOPVAR:
   3577 00000610                             	DC.L	1		;'FOR' loop save area
   3578 00000614                             LOPINC:
   3579 00000614                             	DC.L	1		;increment
   3580 00000618                             LOPLMT:
   3581 00000618                             	DC.L	1		;limit
   3582 0000061C                             LOPLN:
   3583 0000061C                             	DC.L	1		;line number
   3584 00000620                             LOPPT:
   3585 00000620                             	DC.L	1		;text pointer
   3586 00000624                             TXTUNF:
   3587 00000624                             	DC.L	1		;points to unfilled text area
   3588 00000628                             VARBGN:
   3589 00000628                             	DC.L	1		;points to variable area
   3590 0000062C                             STKLMT:
   3591 0000062C                             	DC.L	1		;holds lower limit for stack growth
   3592 00000630                             BUFFER:
   3593 00000630                             	FILL.B	BUFLEN,0x00	;	Keyboard input buffer
                                             
                                             TXT	EQU	$		;Beginning of program area
                                             
                                             	CODE
   3598 FFFC268C FF FF FF FF FF FF FF FF     	ORG	0xFFFCC000	;
   3599 FFFC2694 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 3
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   3600 FFFC269C FF FF FF FF FF FF FF FF     
   3601 FFFC26A4 FF FF FF FF FF FF FF FF     
   3602 FFFC26AC FF FF FF FF FF FF FF FF     
   3603 FFFC26B4 FF FF FF FF FF FF FF FF     
   3604 FFFC26BC FF FF FF FF FF FF FF FF     
   3605 FFFC26C4 FF FF FF FF FF FF FF FF     
   3606 FFFC26CC FF FF FF FF FF FF FF FF     
   3607 FFFC26D4 FF FF FF FF FF FF FF FF     
   3608 FFFC26DC FF FF FF FF FF FF FF FF     
   3609 FFFC26E4 FF FF FF FF FF FF FF FF     
   3610 FFFC26EC FF FF FF FF FF FF FF FF     
   3611 FFFC26F4 FF FF FF FF FF FF FF FF     
   3612 FFFC26FC FF FF FF FF FF FF FF FF     
   3613 FFFC2704 FF FF FF FF FF FF FF FF     
   3614 FFFC270C FF FF FF FF FF FF FF FF     
   3615 FFFC2714 FF FF FF FF FF FF FF FF     
   3616 FFFC271C FF FF FF FF FF FF FF FF     
   3617 FFFC2724 FF FF FF FF FF FF FF FF     
   3618 FFFC272C FF FF FF FF FF FF FF FF     
   3619 FFFC2734 FF FF FF FF FF FF FF FF     
   3620 FFFC273C FF FF FF FF FF FF FF FF     
   3621 FFFC2744 FF FF FF FF FF FF FF FF     
   3622 FFFC274C FF FF FF FF FF FF FF FF     
   3623 FFFC2754 FF FF FF FF FF FF FF FF     
   3624 FFFC275C FF FF FF FF FF FF FF FF     
   3625 FFFC2764 FF FF FF FF FF FF FF FF     
   3626 FFFC276C FF FF FF FF FF FF FF FF     
   3627 FFFC2774 FF FF FF FF FF FF FF FF     
   3628 FFFC277C FF FF FF FF FF FF FF FF     
   3629 FFFC2784 FF FF FF FF FF FF FF FF     
   3630 FFFC278C FF FF FF FF FF FF FF FF     
   3631 FFFC2794 FF FF FF FF FF FF FF FF     
   3632 FFFC279C FF FF FF FF FF FF FF FF     
   3633 FFFC27A4 FF FF FF FF FF FF FF FF     
   3634 FFFC27AC FF FF FF FF FF FF FF FF     
   3635 FFFC27B4 FF FF FF FF FF FF FF FF     
   3636 FFFC27BC FF FF FF FF FF FF FF FF     
   3637 FFFC27C4 FF FF FF FF FF FF FF FF     
   3638 FFFC27CC FF FF FF FF FF FF FF FF     
   3639 FFFC27D4 FF FF FF FF FF FF FF FF     
   3640 FFFC27DC FF FF FF FF FF FF FF FF     
   3641 FFFC27E4 FF FF FF FF FF FF FF FF     
   3642 FFFC27EC FF FF FF FF FF FF FF FF     
   3643 FFFC27F4 FF FF FF FF FF FF FF FF     
   3644 FFFC27FC FF FF FF FF FF FF FF FF     
   3645 FFFC2804 FF FF FF FF FF FF FF FF     
   3646 FFFC280C FF FF FF FF FF FF FF FF     
   3647 FFFC2814 FF FF FF FF FF FF FF FF     
   3648 FFFC281C FF FF FF FF FF FF FF FF     
   3649 FFFC2824 FF FF FF FF FF FF FF FF     
   3650 FFFC282C FF FF FF FF FF FF FF FF     
   3651 FFFC2834 FF FF FF FF FF FF FF FF     
   3652 FFFC283C FF FF FF FF FF FF FF FF     
   3653 FFFC2844 FF FF FF FF FF FF FF FF     
   3654 FFFC284C FF FF FF FF FF FF FF FF     
   3655 FFFC2854 FF FF FF FF FF FF FF FF     
   3656 FFFC285C FF FF FF FF FF FF FF FF     
   3657 FFFC2864 FF FF FF FF FF FF FF FF     
   3658 FFFC286C FF FF FF FF FF FF FF FF     
   3659 FFFC2874 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 4
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   3660 FFFC287C FF FF FF FF FF FF FF FF     
   3661 FFFC2884 FF FF FF FF FF FF FF FF     
   3662 FFFC288C FF FF FF FF FF FF FF FF     
   3663 FFFC2894 FF FF FF FF FF FF FF FF     
   3664 FFFC289C FF FF FF FF FF FF FF FF     
   3665 FFFC28A4 FF FF FF FF FF FF FF FF     
   3666 FFFC28AC FF FF FF FF FF FF FF FF     
   3667 FFFC28B4 FF FF FF FF FF FF FF FF     
   3668 FFFC28BC FF FF FF FF FF FF FF FF     
   3669 FFFC28C4 FF FF FF FF FF FF FF FF     
   3670 FFFC28CC FF FF FF FF FF FF FF FF     
   3671 FFFC28D4 FF FF FF FF FF FF FF FF     
   3672 FFFC28DC FF FF FF FF FF FF FF FF     
   3673 FFFC28E4 FF FF FF FF FF FF FF FF     
   3674 FFFC28EC FF FF FF FF FF FF FF FF     
   3675 FFFC28F4 FF FF FF FF FF FF FF FF     
   3676 FFFC28FC FF FF FF FF FF FF FF FF     
   3677 FFFC2904 FF FF FF FF FF FF FF FF     
   3678 FFFC290C FF FF FF FF FF FF FF FF     
   3679 FFFC2914 FF FF FF FF FF FF FF FF     
   3680 FFFC291C FF FF FF FF FF FF FF FF     
   3681 FFFC2924 FF FF FF FF FF FF FF FF     
   3682 FFFC292C FF FF FF FF FF FF FF FF     
   3683 FFFC2934 FF FF FF FF FF FF FF FF     
   3684 FFFC293C FF FF FF FF FF FF FF FF     
   3685 FFFC2944 FF FF FF FF FF FF FF FF     
   3686 FFFC294C FF FF FF FF FF FF FF FF     
   3687 FFFC2954 FF FF FF FF FF FF FF FF     
   3688 FFFC295C FF FF FF FF FF FF FF FF     
   3689 FFFC2964 FF FF FF FF FF FF FF FF     
   3690 FFFC296C FF FF FF FF FF FF FF FF     
   3691 FFFC2974 FF FF FF FF FF FF FF FF     
   3692 FFFC297C FF FF FF FF FF FF FF FF     
   3693 FFFC2984 FF FF FF FF FF FF FF FF     
   3694 FFFC298C FF FF FF FF FF FF FF FF     
   3695 FFFC2994 FF FF FF FF FF FF FF FF     
   3696 FFFC299C FF FF FF FF FF FF FF FF     
   3697 FFFC29A4 FF FF FF FF FF FF FF FF     
   3698 FFFC29AC FF FF FF FF FF FF FF FF     
   3699 FFFC29B4 FF FF FF FF FF FF FF FF     
   3700 FFFC29BC FF FF FF FF FF FF FF FF     
   3701 FFFC29C4 FF FF FF FF FF FF FF FF     
   3702 FFFC29CC FF FF FF FF FF FF FF FF     
   3703 FFFC29D4 FF FF FF FF FF FF FF FF     
   3704 FFFC29DC FF FF FF FF FF FF FF FF     
   3705 FFFC29E4 FF FF FF FF FF FF FF FF     
   3706 FFFC29EC FF FF FF FF FF FF FF FF     
   3707 FFFC29F4 FF FF FF FF FF FF FF FF     
   3708 FFFC29FC FF FF FF FF FF FF FF FF     
   3709 FFFC2A04 FF FF FF FF FF FF FF FF     
   3710 FFFC2A0C FF FF FF FF FF FF FF FF     
   3711 FFFC2A14 FF FF FF FF FF FF FF FF     
   3712 FFFC2A1C FF FF FF FF FF FF FF FF     
   3713 FFFC2A24 FF FF FF FF FF FF FF FF     
   3714 FFFC2A2C FF FF FF FF FF FF FF FF     
   3715 FFFC2A34 FF FF FF FF FF FF FF FF     
   3716 FFFC2A3C FF FF FF FF FF FF FF FF     
   3717 FFFC2A44 FF FF FF FF FF FF FF FF     
   3718 FFFC2A4C FF FF FF FF FF FF FF FF     
   3719 FFFC2A54 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 5
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   3720 FFFC2A5C FF FF FF FF FF FF FF FF     
   3721 FFFC2A64 FF FF FF FF FF FF FF FF     
   3722 FFFC2A6C FF FF FF FF FF FF FF FF     
   3723 FFFC2A74 FF FF FF FF FF FF FF FF     
   3724 FFFC2A7C FF FF FF FF FF FF FF FF     
   3725 FFFC2A84 FF FF FF FF FF FF FF FF     
   3726 FFFC2A8C FF FF FF FF FF FF FF FF     
   3727 FFFC2A94 FF FF FF FF FF FF FF FF     
   3728 FFFC2A9C FF FF FF FF FF FF FF FF     
   3729 FFFC2AA4 FF FF FF FF FF FF FF FF     
   3730 FFFC2AAC FF FF FF FF FF FF FF FF     
   3731 FFFC2AB4 FF FF FF FF FF FF FF FF     
   3732 FFFC2ABC FF FF FF FF FF FF FF FF     
   3733 FFFC2AC4 FF FF FF FF FF FF FF FF     
   3734 FFFC2ACC FF FF FF FF FF FF FF FF     
   3735 FFFC2AD4 FF FF FF FF FF FF FF FF     
   3736 FFFC2ADC FF FF FF FF FF FF FF FF     
   3737 FFFC2AE4 FF FF FF FF FF FF FF FF     
   3738 FFFC2AEC FF FF FF FF FF FF FF FF     
   3739 FFFC2AF4 FF FF FF FF FF FF FF FF     
   3740 FFFC2AFC FF FF FF FF FF FF FF FF     
   3741 FFFC2B04 FF FF FF FF FF FF FF FF     
   3742 FFFC2B0C FF FF FF FF FF FF FF FF     
   3743 FFFC2B14 FF FF FF FF FF FF FF FF     
   3744 FFFC2B1C FF FF FF FF FF FF FF FF     
   3745 FFFC2B24 FF FF FF FF FF FF FF FF     
   3746 FFFC2B2C FF FF FF FF FF FF FF FF     
   3747 FFFC2B34 FF FF FF FF FF FF FF FF     
   3748 FFFC2B3C FF FF FF FF FF FF FF FF     
   3749 FFFC2B44 FF FF FF FF FF FF FF FF     
   3750 FFFC2B4C FF FF FF FF FF FF FF FF     
   3751 FFFC2B54 FF FF FF FF FF FF FF FF     
   3752 FFFC2B5C FF FF FF FF FF FF FF FF     
   3753 FFFC2B64 FF FF FF FF FF FF FF FF     
   3754 FFFC2B6C FF FF FF FF FF FF FF FF     
   3755 FFFC2B74 FF FF FF FF FF FF FF FF     
   3756 FFFC2B7C FF FF FF FF FF FF FF FF     
   3757 FFFC2B84 FF FF FF FF FF FF FF FF     
   3758 FFFC2B8C FF FF FF FF FF FF FF FF     
   3759 FFFC2B94 FF FF FF FF FF FF FF FF     
   3760 FFFC2B9C FF FF FF FF FF FF FF FF     
   3761 FFFC2BA4 FF FF FF FF FF FF FF FF     
   3762 FFFC2BAC FF FF FF FF FF FF FF FF     
   3763 FFFC2BB4 FF FF FF FF FF FF FF FF     
   3764 FFFC2BBC FF FF FF FF FF FF FF FF     
   3765 FFFC2BC4 FF FF FF FF FF FF FF FF     
   3766 FFFC2BCC FF FF FF FF FF FF FF FF     
   3767 FFFC2BD4 FF FF FF FF FF FF FF FF     
   3768 FFFC2BDC FF FF FF FF FF FF FF FF     
   3769 FFFC2BE4 FF FF FF FF FF FF FF FF     
   3770 FFFC2BEC FF FF FF FF FF FF FF FF     
   3771 FFFC2BF4 FF FF FF FF FF FF FF FF     
   3772 FFFC2BFC FF FF FF FF FF FF FF FF     
   3773 FFFC2C04 FF FF FF FF FF FF FF FF     
   3774 FFFC2C0C FF FF FF FF FF FF FF FF     
   3775 FFFC2C14 FF FF FF FF FF FF FF FF     
   3776 FFFC2C1C FF FF FF FF FF FF FF FF     
   3777 FFFC2C24 FF FF FF FF FF FF FF FF     
   3778 FFFC2C2C FF FF FF FF FF FF FF FF     
   3779 FFFC2C34 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 6
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   3780 FFFC2C3C FF FF FF FF FF FF FF FF     
   3781 FFFC2C44 FF FF FF FF FF FF FF FF     
   3782 FFFC2C4C FF FF FF FF FF FF FF FF     
   3783 FFFC2C54 FF FF FF FF FF FF FF FF     
   3784 FFFC2C5C FF FF FF FF FF FF FF FF     
   3785 FFFC2C64 FF FF FF FF FF FF FF FF     
   3786 FFFC2C6C FF FF FF FF FF FF FF FF     
   3787 FFFC2C74 FF FF FF FF FF FF FF FF     
   3788 FFFC2C7C FF FF FF FF FF FF FF FF     
   3789 FFFC2C84 FF FF FF FF FF FF FF FF     
   3790 FFFC2C8C FF FF FF FF FF FF FF FF     
   3791 FFFC2C94 FF FF FF FF FF FF FF FF     
   3792 FFFC2C9C FF FF FF FF FF FF FF FF     
   3793 FFFC2CA4 FF FF FF FF FF FF FF FF     
   3794 FFFC2CAC FF FF FF FF FF FF FF FF     
   3795 FFFC2CB4 FF FF FF FF FF FF FF FF     
   3796 FFFC2CBC FF FF FF FF FF FF FF FF     
   3797 FFFC2CC4 FF FF FF FF FF FF FF FF     
   3798 FFFC2CCC FF FF FF FF FF FF FF FF     
   3799 FFFC2CD4 FF FF FF FF FF FF FF FF     
   3800 FFFC2CDC FF FF FF FF FF FF FF FF     
   3801 FFFC2CE4 FF FF FF FF FF FF FF FF     
   3802 FFFC2CEC FF FF FF FF FF FF FF FF     
   3803 FFFC2CF4 FF FF FF FF FF FF FF FF     
   3804 FFFC2CFC FF FF FF FF FF FF FF FF     
   3805 FFFC2D04 FF FF FF FF FF FF FF FF     
   3806 FFFC2D0C FF FF FF FF FF FF FF FF     
   3807 FFFC2D14 FF FF FF FF FF FF FF FF     
   3808 FFFC2D1C FF FF FF FF FF FF FF FF     
   3809 FFFC2D24 FF FF FF FF FF FF FF FF     
   3810 FFFC2D2C FF FF FF FF FF FF FF FF     
   3811 FFFC2D34 FF FF FF FF FF FF FF FF     
   3812 FFFC2D3C FF FF FF FF FF FF FF FF     
   3813 FFFC2D44 FF FF FF FF FF FF FF FF     
   3814 FFFC2D4C FF FF FF FF FF FF FF FF     
   3815 FFFC2D54 FF FF FF FF FF FF FF FF     
   3816 FFFC2D5C FF FF FF FF FF FF FF FF     
   3817 FFFC2D64 FF FF FF FF FF FF FF FF     
   3818 FFFC2D6C FF FF FF FF FF FF FF FF     
   3819 FFFC2D74 FF FF FF FF FF FF FF FF     
   3820 FFFC2D7C FF FF FF FF FF FF FF FF     
   3821 FFFC2D84 FF FF FF FF FF FF FF FF     
   3822 FFFC2D8C FF FF FF FF FF FF FF FF     
   3823 FFFC2D94 FF FF FF FF FF FF FF FF     
   3824 FFFC2D9C FF FF FF FF FF FF FF FF     
   3825 FFFC2DA4 FF FF FF FF FF FF FF FF     
   3826 FFFC2DAC FF FF FF FF FF FF FF FF     
   3827 FFFC2DB4 FF FF FF FF FF FF FF FF     
   3828 FFFC2DBC FF FF FF FF FF FF FF FF     
   3829 FFFC2DC4 FF FF FF FF FF FF FF FF     
   3830 FFFC2DCC FF FF FF FF FF FF FF FF     
   3831 FFFC2DD4 FF FF FF FF FF FF FF FF     
   3832 FFFC2DDC FF FF FF FF FF FF FF FF     
   3833 FFFC2DE4 FF FF FF FF FF FF FF FF     
   3834 FFFC2DEC FF FF FF FF FF FF FF FF     
   3835 FFFC2DF4 FF FF FF FF FF FF FF FF     
   3836 FFFC2DFC FF FF FF FF FF FF FF FF     
   3837 FFFC2E04 FF FF FF FF FF FF FF FF     
   3838 FFFC2E0C FF FF FF FF FF FF FF FF     
   3839 FFFC2E14 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 7
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   3840 FFFC2E1C FF FF FF FF FF FF FF FF     
   3841 FFFC2E24 FF FF FF FF FF FF FF FF     
   3842 FFFC2E2C FF FF FF FF FF FF FF FF     
   3843 FFFC2E34 FF FF FF FF FF FF FF FF     
   3844 FFFC2E3C FF FF FF FF FF FF FF FF     
   3845 FFFC2E44 FF FF FF FF FF FF FF FF     
   3846 FFFC2E4C FF FF FF FF FF FF FF FF     
   3847 FFFC2E54 FF FF FF FF FF FF FF FF     
   3848 FFFC2E5C FF FF FF FF FF FF FF FF     
   3849 FFFC2E64 FF FF FF FF FF FF FF FF     
   3850 FFFC2E6C FF FF FF FF FF FF FF FF     
   3851 FFFC2E74 FF FF FF FF FF FF FF FF     
   3852 FFFC2E7C FF FF FF FF FF FF FF FF     
   3853 FFFC2E84 FF FF FF FF FF FF FF FF     
   3854 FFFC2E8C FF FF FF FF FF FF FF FF     
   3855 FFFC2E94 FF FF FF FF FF FF FF FF     
   3856 FFFC2E9C FF FF FF FF FF FF FF FF     
   3857 FFFC2EA4 FF FF FF FF FF FF FF FF     
   3858 FFFC2EAC FF FF FF FF FF FF FF FF     
   3859 FFFC2EB4 FF FF FF FF FF FF FF FF     
   3860 FFFC2EBC FF FF FF FF FF FF FF FF     
   3861 FFFC2EC4 FF FF FF FF FF FF FF FF     
   3862 FFFC2ECC FF FF FF FF FF FF FF FF     
   3863 FFFC2ED4 FF FF FF FF FF FF FF FF     
   3864 FFFC2EDC FF FF FF FF FF FF FF FF     
   3865 FFFC2EE4 FF FF FF FF FF FF FF FF     
   3866 FFFC2EEC FF FF FF FF FF FF FF FF     
   3867 FFFC2EF4 FF FF FF FF FF FF FF FF     
   3868 FFFC2EFC FF FF FF FF FF FF FF FF     
   3869 FFFC2F04 FF FF FF FF FF FF FF FF     
   3870 FFFC2F0C FF FF FF FF FF FF FF FF     
   3871 FFFC2F14 FF FF FF FF FF FF FF FF     
   3872 FFFC2F1C FF FF FF FF FF FF FF FF     
   3873 FFFC2F24 FF FF FF FF FF FF FF FF     
   3874 FFFC2F2C FF FF FF FF FF FF FF FF     
   3875 FFFC2F34 FF FF FF FF FF FF FF FF     
   3876 FFFC2F3C FF FF FF FF FF FF FF FF     
   3877 FFFC2F44 FF FF FF FF FF FF FF FF     
   3878 FFFC2F4C FF FF FF FF FF FF FF FF     
   3879 FFFC2F54 FF FF FF FF FF FF FF FF     
   3880 FFFC2F5C FF FF FF FF FF FF FF FF     
   3881 FFFC2F64 FF FF FF FF FF FF FF FF     
   3882 FFFC2F6C FF FF FF FF FF FF FF FF     
   3883 FFFC2F74 FF FF FF FF FF FF FF FF     
   3884 FFFC2F7C FF FF FF FF FF FF FF FF     
   3885 FFFC2F84 FF FF FF FF FF FF FF FF     
   3886 FFFC2F8C FF FF FF FF FF FF FF FF     
   3887 FFFC2F94 FF FF FF FF FF FF FF FF     
   3888 FFFC2F9C FF FF FF FF FF FF FF FF     
   3889 FFFC2FA4 FF FF FF FF FF FF FF FF     
   3890 FFFC2FAC FF FF FF FF FF FF FF FF     
   3891 FFFC2FB4 FF FF FF FF FF FF FF FF     
   3892 FFFC2FBC FF FF FF FF FF FF FF FF     
   3893 FFFC2FC4 FF FF FF FF FF FF FF FF     
   3894 FFFC2FCC FF FF FF FF FF FF FF FF     
   3895 FFFC2FD4 FF FF FF FF FF FF FF FF     
   3896 FFFC2FDC FF FF FF FF FF FF FF FF     
   3897 FFFC2FE4 FF FF FF FF FF FF FF FF     
   3898 FFFC2FEC FF FF FF FF FF FF FF FF     
   3899 FFFC2FF4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 8
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   3900 FFFC2FFC FF FF FF FF FF FF FF FF     
   3901 FFFC3004 FF FF FF FF FF FF FF FF     
   3902 FFFC300C FF FF FF FF FF FF FF FF     
   3903 FFFC3014 FF FF FF FF FF FF FF FF     
   3904 FFFC301C FF FF FF FF FF FF FF FF     
   3905 FFFC3024 FF FF FF FF FF FF FF FF     
   3906 FFFC302C FF FF FF FF FF FF FF FF     
   3907 FFFC3034 FF FF FF FF FF FF FF FF     
   3908 FFFC303C FF FF FF FF FF FF FF FF     
   3909 FFFC3044 FF FF FF FF FF FF FF FF     
   3910 FFFC304C FF FF FF FF FF FF FF FF     
   3911 FFFC3054 FF FF FF FF FF FF FF FF     
   3912 FFFC305C FF FF FF FF FF FF FF FF     
   3913 FFFC3064 FF FF FF FF FF FF FF FF     
   3914 FFFC306C FF FF FF FF FF FF FF FF     
   3915 FFFC3074 FF FF FF FF FF FF FF FF     
   3916 FFFC307C FF FF FF FF FF FF FF FF     
   3917 FFFC3084 FF FF FF FF FF FF FF FF     
   3918 FFFC308C FF FF FF FF FF FF FF FF     
   3919 FFFC3094 FF FF FF FF FF FF FF FF     
   3920 FFFC309C FF FF FF FF FF FF FF FF     
   3921 FFFC30A4 FF FF FF FF FF FF FF FF     
   3922 FFFC30AC FF FF FF FF FF FF FF FF     
   3923 FFFC30B4 FF FF FF FF FF FF FF FF     
   3924 FFFC30BC FF FF FF FF FF FF FF FF     
   3925 FFFC30C4 FF FF FF FF FF FF FF FF     
   3926 FFFC30CC FF FF FF FF FF FF FF FF     
   3927 FFFC30D4 FF FF FF FF FF FF FF FF     
   3928 FFFC30DC FF FF FF FF FF FF FF FF     
   3929 FFFC30E4 FF FF FF FF FF FF FF FF     
   3930 FFFC30EC FF FF FF FF FF FF FF FF     
   3931 FFFC30F4 FF FF FF FF FF FF FF FF     
   3932 FFFC30FC FF FF FF FF FF FF FF FF     
   3933 FFFC3104 FF FF FF FF FF FF FF FF     
   3934 FFFC310C FF FF FF FF FF FF FF FF     
   3935 FFFC3114 FF FF FF FF FF FF FF FF     
   3936 FFFC311C FF FF FF FF FF FF FF FF     
   3937 FFFC3124 FF FF FF FF FF FF FF FF     
   3938 FFFC312C FF FF FF FF FF FF FF FF     
   3939 FFFC3134 FF FF FF FF FF FF FF FF     
   3940 FFFC313C FF FF FF FF FF FF FF FF     
   3941 FFFC3144 FF FF FF FF FF FF FF FF     
   3942 FFFC314C FF FF FF FF FF FF FF FF     
   3943 FFFC3154 FF FF FF FF FF FF FF FF     
   3944 FFFC315C FF FF FF FF FF FF FF FF     
   3945 FFFC3164 FF FF FF FF FF FF FF FF     
   3946 FFFC316C FF FF FF FF FF FF FF FF     
   3947 FFFC3174 FF FF FF FF FF FF FF FF     
   3948 FFFC317C FF FF FF FF FF FF FF FF     
   3949 FFFC3184 FF FF FF FF FF FF FF FF     
   3950 FFFC318C FF FF FF FF FF FF FF FF     
   3951 FFFC3194 FF FF FF FF FF FF FF FF     
   3952 FFFC319C FF FF FF FF FF FF FF FF     
   3953 FFFC31A4 FF FF FF FF FF FF FF FF     
   3954 FFFC31AC FF FF FF FF FF FF FF FF     
   3955 FFFC31B4 FF FF FF FF FF FF FF FF     
   3956 FFFC31BC FF FF FF FF FF FF FF FF     
   3957 FFFC31C4 FF FF FF FF FF FF FF FF     
   3958 FFFC31CC FF FF FF FF FF FF FF FF     
   3959 FFFC31D4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 9
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   3960 FFFC31DC FF FF FF FF FF FF FF FF     
   3961 FFFC31E4 FF FF FF FF FF FF FF FF     
   3962 FFFC31EC FF FF FF FF FF FF FF FF     
   3963 FFFC31F4 FF FF FF FF FF FF FF FF     
   3964 FFFC31FC FF FF FF FF FF FF FF FF     
   3965 FFFC3204 FF FF FF FF FF FF FF FF     
   3966 FFFC320C FF FF FF FF FF FF FF FF     
   3967 FFFC3214 FF FF FF FF FF FF FF FF     
   3968 FFFC321C FF FF FF FF FF FF FF FF     
   3969 FFFC3224 FF FF FF FF FF FF FF FF     
   3970 FFFC322C FF FF FF FF FF FF FF FF     
   3971 FFFC3234 FF FF FF FF FF FF FF FF     
   3972 FFFC323C FF FF FF FF FF FF FF FF     
   3973 FFFC3244 FF FF FF FF FF FF FF FF     
   3974 FFFC324C FF FF FF FF FF FF FF FF     
   3975 FFFC3254 FF FF FF FF FF FF FF FF     
   3976 FFFC325C FF FF FF FF FF FF FF FF     
   3977 FFFC3264 FF FF FF FF FF FF FF FF     
   3978 FFFC326C FF FF FF FF FF FF FF FF     
   3979 FFFC3274 FF FF FF FF FF FF FF FF     
   3980 FFFC327C FF FF FF FF FF FF FF FF     
   3981 FFFC3284 FF FF FF FF FF FF FF FF     
   3982 FFFC328C FF FF FF FF FF FF FF FF     
   3983 FFFC3294 FF FF FF FF FF FF FF FF     
   3984 FFFC329C FF FF FF FF FF FF FF FF     
   3985 FFFC32A4 FF FF FF FF FF FF FF FF     
   3986 FFFC32AC FF FF FF FF FF FF FF FF     
   3987 FFFC32B4 FF FF FF FF FF FF FF FF     
   3988 FFFC32BC FF FF FF FF FF FF FF FF     
   3989 FFFC32C4 FF FF FF FF FF FF FF FF     
   3990 FFFC32CC FF FF FF FF FF FF FF FF     
   3991 FFFC32D4 FF FF FF FF FF FF FF FF     
   3992 FFFC32DC FF FF FF FF FF FF FF FF     
   3993 FFFC32E4 FF FF FF FF FF FF FF FF     
   3994 FFFC32EC FF FF FF FF FF FF FF FF     
   3995 FFFC32F4 FF FF FF FF FF FF FF FF     
   3996 FFFC32FC FF FF FF FF FF FF FF FF     
   3997 FFFC3304 FF FF FF FF FF FF FF FF     
   3998 FFFC330C FF FF FF FF FF FF FF FF     
   3999 FFFC3314 FF FF FF FF FF FF FF FF     
   4000 FFFC331C FF FF FF FF FF FF FF FF     
   4001 FFFC3324 FF FF FF FF FF FF FF FF     
   4002 FFFC332C FF FF FF FF FF FF FF FF     
   4003 FFFC3334 FF FF FF FF FF FF FF FF     
   4004 FFFC333C FF FF FF FF FF FF FF FF     
   4005 FFFC3344 FF FF FF FF FF FF FF FF     
   4006 FFFC334C FF FF FF FF FF FF FF FF     
   4007 FFFC3354 FF FF FF FF FF FF FF FF     
   4008 FFFC335C FF FF FF FF FF FF FF FF     
   4009 FFFC3364 FF FF FF FF FF FF FF FF     
   4010 FFFC336C FF FF FF FF FF FF FF FF     
   4011 FFFC3374 FF FF FF FF FF FF FF FF     
   4012 FFFC337C FF FF FF FF FF FF FF FF     
   4013 FFFC3384 FF FF FF FF FF FF FF FF     
   4014 FFFC338C FF FF FF FF FF FF FF FF     
   4015 FFFC3394 FF FF FF FF FF FF FF FF     
   4016 FFFC339C FF FF FF FF FF FF FF FF     
   4017 FFFC33A4 FF FF FF FF FF FF FF FF     
   4018 FFFC33AC FF FF FF FF FF FF FF FF     
   4019 FFFC33B4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 10
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4020 FFFC33BC FF FF FF FF FF FF FF FF     
   4021 FFFC33C4 FF FF FF FF FF FF FF FF     
   4022 FFFC33CC FF FF FF FF FF FF FF FF     
   4023 FFFC33D4 FF FF FF FF FF FF FF FF     
   4024 FFFC33DC FF FF FF FF FF FF FF FF     
   4025 FFFC33E4 FF FF FF FF FF FF FF FF     
   4026 FFFC33EC FF FF FF FF FF FF FF FF     
   4027 FFFC33F4 FF FF FF FF FF FF FF FF     
   4028 FFFC33FC FF FF FF FF FF FF FF FF     
   4029 FFFC3404 FF FF FF FF FF FF FF FF     
   4030 FFFC340C FF FF FF FF FF FF FF FF     
   4031 FFFC3414 FF FF FF FF FF FF FF FF     
   4032 FFFC341C FF FF FF FF FF FF FF FF     
   4033 FFFC3424 FF FF FF FF FF FF FF FF     
   4034 FFFC342C FF FF FF FF FF FF FF FF     
   4035 FFFC3434 FF FF FF FF FF FF FF FF     
   4036 FFFC343C FF FF FF FF FF FF FF FF     
   4037 FFFC3444 FF FF FF FF FF FF FF FF     
   4038 FFFC344C FF FF FF FF FF FF FF FF     
   4039 FFFC3454 FF FF FF FF FF FF FF FF     
   4040 FFFC345C FF FF FF FF FF FF FF FF     
   4041 FFFC3464 FF FF FF FF FF FF FF FF     
   4042 FFFC346C FF FF FF FF FF FF FF FF     
   4043 FFFC3474 FF FF FF FF FF FF FF FF     
   4044 FFFC347C FF FF FF FF FF FF FF FF     
   4045 FFFC3484 FF FF FF FF FF FF FF FF     
   4046 FFFC348C FF FF FF FF FF FF FF FF     
   4047 FFFC3494 FF FF FF FF FF FF FF FF     
   4048 FFFC349C FF FF FF FF FF FF FF FF     
   4049 FFFC34A4 FF FF FF FF FF FF FF FF     
   4050 FFFC34AC FF FF FF FF FF FF FF FF     
   4051 FFFC34B4 FF FF FF FF FF FF FF FF     
   4052 FFFC34BC FF FF FF FF FF FF FF FF     
   4053 FFFC34C4 FF FF FF FF FF FF FF FF     
   4054 FFFC34CC FF FF FF FF FF FF FF FF     
   4055 FFFC34D4 FF FF FF FF FF FF FF FF     
   4056 FFFC34DC FF FF FF FF FF FF FF FF     
   4057 FFFC34E4 FF FF FF FF FF FF FF FF     
   4058 FFFC34EC FF FF FF FF FF FF FF FF     
   4059 FFFC34F4 FF FF FF FF FF FF FF FF     
   4060 FFFC34FC FF FF FF FF FF FF FF FF     
   4061 FFFC3504 FF FF FF FF FF FF FF FF     
   4062 FFFC350C FF FF FF FF FF FF FF FF     
   4063 FFFC3514 FF FF FF FF FF FF FF FF     
   4064 FFFC351C FF FF FF FF FF FF FF FF     
   4065 FFFC3524 FF FF FF FF FF FF FF FF     
   4066 FFFC352C FF FF FF FF FF FF FF FF     
   4067 FFFC3534 FF FF FF FF FF FF FF FF     
   4068 FFFC353C FF FF FF FF FF FF FF FF     
   4069 FFFC3544 FF FF FF FF FF FF FF FF     
   4070 FFFC354C FF FF FF FF FF FF FF FF     
   4071 FFFC3554 FF FF FF FF FF FF FF FF     
   4072 FFFC355C FF FF FF FF FF FF FF FF     
   4073 FFFC3564 FF FF FF FF FF FF FF FF     
   4074 FFFC356C FF FF FF FF FF FF FF FF     
   4075 FFFC3574 FF FF FF FF FF FF FF FF     
   4076 FFFC357C FF FF FF FF FF FF FF FF     
   4077 FFFC3584 FF FF FF FF FF FF FF FF     
   4078 FFFC358C FF FF FF FF FF FF FF FF     
   4079 FFFC3594 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 11
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4080 FFFC359C FF FF FF FF FF FF FF FF     
   4081 FFFC35A4 FF FF FF FF FF FF FF FF     
   4082 FFFC35AC FF FF FF FF FF FF FF FF     
   4083 FFFC35B4 FF FF FF FF FF FF FF FF     
   4084 FFFC35BC FF FF FF FF FF FF FF FF     
   4085 FFFC35C4 FF FF FF FF FF FF FF FF     
   4086 FFFC35CC FF FF FF FF FF FF FF FF     
   4087 FFFC35D4 FF FF FF FF FF FF FF FF     
   4088 FFFC35DC FF FF FF FF FF FF FF FF     
   4089 FFFC35E4 FF FF FF FF FF FF FF FF     
   4090 FFFC35EC FF FF FF FF FF FF FF FF     
   4091 FFFC35F4 FF FF FF FF FF FF FF FF     
   4092 FFFC35FC FF FF FF FF FF FF FF FF     
   4093 FFFC3604 FF FF FF FF FF FF FF FF     
   4094 FFFC360C FF FF FF FF FF FF FF FF     
   4095 FFFC3614 FF FF FF FF FF FF FF FF     
   4096 FFFC361C FF FF FF FF FF FF FF FF     
   4097 FFFC3624 FF FF FF FF FF FF FF FF     
   4098 FFFC362C FF FF FF FF FF FF FF FF     
   4099 FFFC3634 FF FF FF FF FF FF FF FF     
   4100 FFFC363C FF FF FF FF FF FF FF FF     
   4101 FFFC3644 FF FF FF FF FF FF FF FF     
   4102 FFFC364C FF FF FF FF FF FF FF FF     
   4103 FFFC3654 FF FF FF FF FF FF FF FF     
   4104 FFFC365C FF FF FF FF FF FF FF FF     
   4105 FFFC3664 FF FF FF FF FF FF FF FF     
   4106 FFFC366C FF FF FF FF FF FF FF FF     
   4107 FFFC3674 FF FF FF FF FF FF FF FF     
   4108 FFFC367C FF FF FF FF FF FF FF FF     
   4109 FFFC3684 FF FF FF FF FF FF FF FF     
   4110 FFFC368C FF FF FF FF FF FF FF FF     
   4111 FFFC3694 FF FF FF FF FF FF FF FF     
   4112 FFFC369C FF FF FF FF FF FF FF FF     
   4113 FFFC36A4 FF FF FF FF FF FF FF FF     
   4114 FFFC36AC FF FF FF FF FF FF FF FF     
   4115 FFFC36B4 FF FF FF FF FF FF FF FF     
   4116 FFFC36BC FF FF FF FF FF FF FF FF     
   4117 FFFC36C4 FF FF FF FF FF FF FF FF     
   4118 FFFC36CC FF FF FF FF FF FF FF FF     
   4119 FFFC36D4 FF FF FF FF FF FF FF FF     
   4120 FFFC36DC FF FF FF FF FF FF FF FF     
   4121 FFFC36E4 FF FF FF FF FF FF FF FF     
   4122 FFFC36EC FF FF FF FF FF FF FF FF     
   4123 FFFC36F4 FF FF FF FF FF FF FF FF     
   4124 FFFC36FC FF FF FF FF FF FF FF FF     
   4125 FFFC3704 FF FF FF FF FF FF FF FF     
   4126 FFFC370C FF FF FF FF FF FF FF FF     
   4127 FFFC3714 FF FF FF FF FF FF FF FF     
   4128 FFFC371C FF FF FF FF FF FF FF FF     
   4129 FFFC3724 FF FF FF FF FF FF FF FF     
   4130 FFFC372C FF FF FF FF FF FF FF FF     
   4131 FFFC3734 FF FF FF FF FF FF FF FF     
   4132 FFFC373C FF FF FF FF FF FF FF FF     
   4133 FFFC3744 FF FF FF FF FF FF FF FF     
   4134 FFFC374C FF FF FF FF FF FF FF FF     
   4135 FFFC3754 FF FF FF FF FF FF FF FF     
   4136 FFFC375C FF FF FF FF FF FF FF FF     
   4137 FFFC3764 FF FF FF FF FF FF FF FF     
   4138 FFFC376C FF FF FF FF FF FF FF FF     
   4139 FFFC3774 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 12
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4140 FFFC377C FF FF FF FF FF FF FF FF     
   4141 FFFC3784 FF FF FF FF FF FF FF FF     
   4142 FFFC378C FF FF FF FF FF FF FF FF     
   4143 FFFC3794 FF FF FF FF FF FF FF FF     
   4144 FFFC379C FF FF FF FF FF FF FF FF     
   4145 FFFC37A4 FF FF FF FF FF FF FF FF     
   4146 FFFC37AC FF FF FF FF FF FF FF FF     
   4147 FFFC37B4 FF FF FF FF FF FF FF FF     
   4148 FFFC37BC FF FF FF FF FF FF FF FF     
   4149 FFFC37C4 FF FF FF FF FF FF FF FF     
   4150 FFFC37CC FF FF FF FF FF FF FF FF     
   4151 FFFC37D4 FF FF FF FF FF FF FF FF     
   4152 FFFC37DC FF FF FF FF FF FF FF FF     
   4153 FFFC37E4 FF FF FF FF FF FF FF FF     
   4154 FFFC37EC FF FF FF FF FF FF FF FF     
   4155 FFFC37F4 FF FF FF FF FF FF FF FF     
   4156 FFFC37FC FF FF FF FF FF FF FF FF     
   4157 FFFC3804 FF FF FF FF FF FF FF FF     
   4158 FFFC380C FF FF FF FF FF FF FF FF     
   4159 FFFC3814 FF FF FF FF FF FF FF FF     
   4160 FFFC381C FF FF FF FF FF FF FF FF     
   4161 FFFC3824 FF FF FF FF FF FF FF FF     
   4162 FFFC382C FF FF FF FF FF FF FF FF     
   4163 FFFC3834 FF FF FF FF FF FF FF FF     
   4164 FFFC383C FF FF FF FF FF FF FF FF     
   4165 FFFC3844 FF FF FF FF FF FF FF FF     
   4166 FFFC384C FF FF FF FF FF FF FF FF     
   4167 FFFC3854 FF FF FF FF FF FF FF FF     
   4168 FFFC385C FF FF FF FF FF FF FF FF     
   4169 FFFC3864 FF FF FF FF FF FF FF FF     
   4170 FFFC386C FF FF FF FF FF FF FF FF     
   4171 FFFC3874 FF FF FF FF FF FF FF FF     
   4172 FFFC387C FF FF FF FF FF FF FF FF     
   4173 FFFC3884 FF FF FF FF FF FF FF FF     
   4174 FFFC388C FF FF FF FF FF FF FF FF     
   4175 FFFC3894 FF FF FF FF FF FF FF FF     
   4176 FFFC389C FF FF FF FF FF FF FF FF     
   4177 FFFC38A4 FF FF FF FF FF FF FF FF     
   4178 FFFC38AC FF FF FF FF FF FF FF FF     
   4179 FFFC38B4 FF FF FF FF FF FF FF FF     
   4180 FFFC38BC FF FF FF FF FF FF FF FF     
   4181 FFFC38C4 FF FF FF FF FF FF FF FF     
   4182 FFFC38CC FF FF FF FF FF FF FF FF     
   4183 FFFC38D4 FF FF FF FF FF FF FF FF     
   4184 FFFC38DC FF FF FF FF FF FF FF FF     
   4185 FFFC38E4 FF FF FF FF FF FF FF FF     
   4186 FFFC38EC FF FF FF FF FF FF FF FF     
   4187 FFFC38F4 FF FF FF FF FF FF FF FF     
   4188 FFFC38FC FF FF FF FF FF FF FF FF     
   4189 FFFC3904 FF FF FF FF FF FF FF FF     
   4190 FFFC390C FF FF FF FF FF FF FF FF     
   4191 FFFC3914 FF FF FF FF FF FF FF FF     
   4192 FFFC391C FF FF FF FF FF FF FF FF     
   4193 FFFC3924 FF FF FF FF FF FF FF FF     
   4194 FFFC392C FF FF FF FF FF FF FF FF     
   4195 FFFC3934 FF FF FF FF FF FF FF FF     
   4196 FFFC393C FF FF FF FF FF FF FF FF     
   4197 FFFC3944 FF FF FF FF FF FF FF FF     
   4198 FFFC394C FF FF FF FF FF FF FF FF     
   4199 FFFC3954 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 13
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4200 FFFC395C FF FF FF FF FF FF FF FF     
   4201 FFFC3964 FF FF FF FF FF FF FF FF     
   4202 FFFC396C FF FF FF FF FF FF FF FF     
   4203 FFFC3974 FF FF FF FF FF FF FF FF     
   4204 FFFC397C FF FF FF FF FF FF FF FF     
   4205 FFFC3984 FF FF FF FF FF FF FF FF     
   4206 FFFC398C FF FF FF FF FF FF FF FF     
   4207 FFFC3994 FF FF FF FF FF FF FF FF     
   4208 FFFC399C FF FF FF FF FF FF FF FF     
   4209 FFFC39A4 FF FF FF FF FF FF FF FF     
   4210 FFFC39AC FF FF FF FF FF FF FF FF     
   4211 FFFC39B4 FF FF FF FF FF FF FF FF     
   4212 FFFC39BC FF FF FF FF FF FF FF FF     
   4213 FFFC39C4 FF FF FF FF FF FF FF FF     
   4214 FFFC39CC FF FF FF FF FF FF FF FF     
   4215 FFFC39D4 FF FF FF FF FF FF FF FF     
   4216 FFFC39DC FF FF FF FF FF FF FF FF     
   4217 FFFC39E4 FF FF FF FF FF FF FF FF     
   4218 FFFC39EC FF FF FF FF FF FF FF FF     
   4219 FFFC39F4 FF FF FF FF FF FF FF FF     
   4220 FFFC39FC FF FF FF FF FF FF FF FF     
   4221 FFFC3A04 FF FF FF FF FF FF FF FF     
   4222 FFFC3A0C FF FF FF FF FF FF FF FF     
   4223 FFFC3A14 FF FF FF FF FF FF FF FF     
   4224 FFFC3A1C FF FF FF FF FF FF FF FF     
   4225 FFFC3A24 FF FF FF FF FF FF FF FF     
   4226 FFFC3A2C FF FF FF FF FF FF FF FF     
   4227 FFFC3A34 FF FF FF FF FF FF FF FF     
   4228 FFFC3A3C FF FF FF FF FF FF FF FF     
   4229 FFFC3A44 FF FF FF FF FF FF FF FF     
   4230 FFFC3A4C FF FF FF FF FF FF FF FF     
   4231 FFFC3A54 FF FF FF FF FF FF FF FF     
   4232 FFFC3A5C FF FF FF FF FF FF FF FF     
   4233 FFFC3A64 FF FF FF FF FF FF FF FF     
   4234 FFFC3A6C FF FF FF FF FF FF FF FF     
   4235 FFFC3A74 FF FF FF FF FF FF FF FF     
   4236 FFFC3A7C FF FF FF FF FF FF FF FF     
   4237 FFFC3A84 FF FF FF FF FF FF FF FF     
   4238 FFFC3A8C FF FF FF FF FF FF FF FF     
   4239 FFFC3A94 FF FF FF FF FF FF FF FF     
   4240 FFFC3A9C FF FF FF FF FF FF FF FF     
   4241 FFFC3AA4 FF FF FF FF FF FF FF FF     
   4242 FFFC3AAC FF FF FF FF FF FF FF FF     
   4243 FFFC3AB4 FF FF FF FF FF FF FF FF     
   4244 FFFC3ABC FF FF FF FF FF FF FF FF     
   4245 FFFC3AC4 FF FF FF FF FF FF FF FF     
   4246 FFFC3ACC FF FF FF FF FF FF FF FF     
   4247 FFFC3AD4 FF FF FF FF FF FF FF FF     
   4248 FFFC3ADC FF FF FF FF FF FF FF FF     
   4249 FFFC3AE4 FF FF FF FF FF FF FF FF     
   4250 FFFC3AEC FF FF FF FF FF FF FF FF     
   4251 FFFC3AF4 FF FF FF FF FF FF FF FF     
   4252 FFFC3AFC FF FF FF FF FF FF FF FF     
   4253 FFFC3B04 FF FF FF FF FF FF FF FF     
   4254 FFFC3B0C FF FF FF FF FF FF FF FF     
   4255 FFFC3B14 FF FF FF FF FF FF FF FF     
   4256 FFFC3B1C FF FF FF FF FF FF FF FF     
   4257 FFFC3B24 FF FF FF FF FF FF FF FF     
   4258 FFFC3B2C FF FF FF FF FF FF FF FF     
   4259 FFFC3B34 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 14
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4260 FFFC3B3C FF FF FF FF FF FF FF FF     
   4261 FFFC3B44 FF FF FF FF FF FF FF FF     
   4262 FFFC3B4C FF FF FF FF FF FF FF FF     
   4263 FFFC3B54 FF FF FF FF FF FF FF FF     
   4264 FFFC3B5C FF FF FF FF FF FF FF FF     
   4265 FFFC3B64 FF FF FF FF FF FF FF FF     
   4266 FFFC3B6C FF FF FF FF FF FF FF FF     
   4267 FFFC3B74 FF FF FF FF FF FF FF FF     
   4268 FFFC3B7C FF FF FF FF FF FF FF FF     
   4269 FFFC3B84 FF FF FF FF FF FF FF FF     
   4270 FFFC3B8C FF FF FF FF FF FF FF FF     
   4271 FFFC3B94 FF FF FF FF FF FF FF FF     
   4272 FFFC3B9C FF FF FF FF FF FF FF FF     
   4273 FFFC3BA4 FF FF FF FF FF FF FF FF     
   4274 FFFC3BAC FF FF FF FF FF FF FF FF     
   4275 FFFC3BB4 FF FF FF FF FF FF FF FF     
   4276 FFFC3BBC FF FF FF FF FF FF FF FF     
   4277 FFFC3BC4 FF FF FF FF FF FF FF FF     
   4278 FFFC3BCC FF FF FF FF FF FF FF FF     
   4279 FFFC3BD4 FF FF FF FF FF FF FF FF     
   4280 FFFC3BDC FF FF FF FF FF FF FF FF     
   4281 FFFC3BE4 FF FF FF FF FF FF FF FF     
   4282 FFFC3BEC FF FF FF FF FF FF FF FF     
   4283 FFFC3BF4 FF FF FF FF FF FF FF FF     
   4284 FFFC3BFC FF FF FF FF FF FF FF FF     
   4285 FFFC3C04 FF FF FF FF FF FF FF FF     
   4286 FFFC3C0C FF FF FF FF FF FF FF FF     
   4287 FFFC3C14 FF FF FF FF FF FF FF FF     
   4288 FFFC3C1C FF FF FF FF FF FF FF FF     
   4289 FFFC3C24 FF FF FF FF FF FF FF FF     
   4290 FFFC3C2C FF FF FF FF FF FF FF FF     
   4291 FFFC3C34 FF FF FF FF FF FF FF FF     
   4292 FFFC3C3C FF FF FF FF FF FF FF FF     
   4293 FFFC3C44 FF FF FF FF FF FF FF FF     
   4294 FFFC3C4C FF FF FF FF FF FF FF FF     
   4295 FFFC3C54 FF FF FF FF FF FF FF FF     
   4296 FFFC3C5C FF FF FF FF FF FF FF FF     
   4297 FFFC3C64 FF FF FF FF FF FF FF FF     
   4298 FFFC3C6C FF FF FF FF FF FF FF FF     
   4299 FFFC3C74 FF FF FF FF FF FF FF FF     
   4300 FFFC3C7C FF FF FF FF FF FF FF FF     
   4301 FFFC3C84 FF FF FF FF FF FF FF FF     
   4302 FFFC3C8C FF FF FF FF FF FF FF FF     
   4303 FFFC3C94 FF FF FF FF FF FF FF FF     
   4304 FFFC3C9C FF FF FF FF FF FF FF FF     
   4305 FFFC3CA4 FF FF FF FF FF FF FF FF     
   4306 FFFC3CAC FF FF FF FF FF FF FF FF     
   4307 FFFC3CB4 FF FF FF FF FF FF FF FF     
   4308 FFFC3CBC FF FF FF FF FF FF FF FF     
   4309 FFFC3CC4 FF FF FF FF FF FF FF FF     
   4310 FFFC3CCC FF FF FF FF FF FF FF FF     
   4311 FFFC3CD4 FF FF FF FF FF FF FF FF     
   4312 FFFC3CDC FF FF FF FF FF FF FF FF     
   4313 FFFC3CE4 FF FF FF FF FF FF FF FF     
   4314 FFFC3CEC FF FF FF FF FF FF FF FF     
   4315 FFFC3CF4 FF FF FF FF FF FF FF FF     
   4316 FFFC3CFC FF FF FF FF FF FF FF FF     
   4317 FFFC3D04 FF FF FF FF FF FF FF FF     
   4318 FFFC3D0C FF FF FF FF FF FF FF FF     
   4319 FFFC3D14 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 15
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4320 FFFC3D1C FF FF FF FF FF FF FF FF     
   4321 FFFC3D24 FF FF FF FF FF FF FF FF     
   4322 FFFC3D2C FF FF FF FF FF FF FF FF     
   4323 FFFC3D34 FF FF FF FF FF FF FF FF     
   4324 FFFC3D3C FF FF FF FF FF FF FF FF     
   4325 FFFC3D44 FF FF FF FF FF FF FF FF     
   4326 FFFC3D4C FF FF FF FF FF FF FF FF     
   4327 FFFC3D54 FF FF FF FF FF FF FF FF     
   4328 FFFC3D5C FF FF FF FF FF FF FF FF     
   4329 FFFC3D64 FF FF FF FF FF FF FF FF     
   4330 FFFC3D6C FF FF FF FF FF FF FF FF     
   4331 FFFC3D74 FF FF FF FF FF FF FF FF     
   4332 FFFC3D7C FF FF FF FF FF FF FF FF     
   4333 FFFC3D84 FF FF FF FF FF FF FF FF     
   4334 FFFC3D8C FF FF FF FF FF FF FF FF     
   4335 FFFC3D94 FF FF FF FF FF FF FF FF     
   4336 FFFC3D9C FF FF FF FF FF FF FF FF     
   4337 FFFC3DA4 FF FF FF FF FF FF FF FF     
   4338 FFFC3DAC FF FF FF FF FF FF FF FF     
   4339 FFFC3DB4 FF FF FF FF FF FF FF FF     
   4340 FFFC3DBC FF FF FF FF FF FF FF FF     
   4341 FFFC3DC4 FF FF FF FF FF FF FF FF     
   4342 FFFC3DCC FF FF FF FF FF FF FF FF     
   4343 FFFC3DD4 FF FF FF FF FF FF FF FF     
   4344 FFFC3DDC FF FF FF FF FF FF FF FF     
   4345 FFFC3DE4 FF FF FF FF FF FF FF FF     
   4346 FFFC3DEC FF FF FF FF FF FF FF FF     
   4347 FFFC3DF4 FF FF FF FF FF FF FF FF     
   4348 FFFC3DFC FF FF FF FF FF FF FF FF     
   4349 FFFC3E04 FF FF FF FF FF FF FF FF     
   4350 FFFC3E0C FF FF FF FF FF FF FF FF     
   4351 FFFC3E14 FF FF FF FF FF FF FF FF     
   4352 FFFC3E1C FF FF FF FF FF FF FF FF     
   4353 FFFC3E24 FF FF FF FF FF FF FF FF     
   4354 FFFC3E2C FF FF FF FF FF FF FF FF     
   4355 FFFC3E34 FF FF FF FF FF FF FF FF     
   4356 FFFC3E3C FF FF FF FF FF FF FF FF     
   4357 FFFC3E44 FF FF FF FF FF FF FF FF     
   4358 FFFC3E4C FF FF FF FF FF FF FF FF     
   4359 FFFC3E54 FF FF FF FF FF FF FF FF     
   4360 FFFC3E5C FF FF FF FF FF FF FF FF     
   4361 FFFC3E64 FF FF FF FF FF FF FF FF     
   4362 FFFC3E6C FF FF FF FF FF FF FF FF     
   4363 FFFC3E74 FF FF FF FF FF FF FF FF     
   4364 FFFC3E7C FF FF FF FF FF FF FF FF     
   4365 FFFC3E84 FF FF FF FF FF FF FF FF     
   4366 FFFC3E8C FF FF FF FF FF FF FF FF     
   4367 FFFC3E94 FF FF FF FF FF FF FF FF     
   4368 FFFC3E9C FF FF FF FF FF FF FF FF     
   4369 FFFC3EA4 FF FF FF FF FF FF FF FF     
   4370 FFFC3EAC FF FF FF FF FF FF FF FF     
   4371 FFFC3EB4 FF FF FF FF FF FF FF FF     
   4372 FFFC3EBC FF FF FF FF FF FF FF FF     
   4373 FFFC3EC4 FF FF FF FF FF FF FF FF     
   4374 FFFC3ECC FF FF FF FF FF FF FF FF     
   4375 FFFC3ED4 FF FF FF FF FF FF FF FF     
   4376 FFFC3EDC FF FF FF FF FF FF FF FF     
   4377 FFFC3EE4 FF FF FF FF FF FF FF FF     
   4378 FFFC3EEC FF FF FF FF FF FF FF FF     
   4379 FFFC3EF4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 16
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4380 FFFC3EFC FF FF FF FF FF FF FF FF     
   4381 FFFC3F04 FF FF FF FF FF FF FF FF     
   4382 FFFC3F0C FF FF FF FF FF FF FF FF     
   4383 FFFC3F14 FF FF FF FF FF FF FF FF     
   4384 FFFC3F1C FF FF FF FF FF FF FF FF     
   4385 FFFC3F24 FF FF FF FF FF FF FF FF     
   4386 FFFC3F2C FF FF FF FF FF FF FF FF     
   4387 FFFC3F34 FF FF FF FF FF FF FF FF     
   4388 FFFC3F3C FF FF FF FF FF FF FF FF     
   4389 FFFC3F44 FF FF FF FF FF FF FF FF     
   4390 FFFC3F4C FF FF FF FF FF FF FF FF     
   4391 FFFC3F54 FF FF FF FF FF FF FF FF     
   4392 FFFC3F5C FF FF FF FF FF FF FF FF     
   4393 FFFC3F64 FF FF FF FF FF FF FF FF     
   4394 FFFC3F6C FF FF FF FF FF FF FF FF     
   4395 FFFC3F74 FF FF FF FF FF FF FF FF     
   4396 FFFC3F7C FF FF FF FF FF FF FF FF     
   4397 FFFC3F84 FF FF FF FF FF FF FF FF     
   4398 FFFC3F8C FF FF FF FF FF FF FF FF     
   4399 FFFC3F94 FF FF FF FF FF FF FF FF     
   4400 FFFC3F9C FF FF FF FF FF FF FF FF     
   4401 FFFC3FA4 FF FF FF FF FF FF FF FF     
   4402 FFFC3FAC FF FF FF FF FF FF FF FF     
   4403 FFFC3FB4 FF FF FF FF FF FF FF FF     
   4404 FFFC3FBC FF FF FF FF FF FF FF FF     
   4405 FFFC3FC4 FF FF FF FF FF FF FF FF     
   4406 FFFC3FCC FF FF FF FF FF FF FF FF     
   4407 FFFC3FD4 FF FF FF FF FF FF FF FF     
   4408 FFFC3FDC FF FF FF FF FF FF FF FF     
   4409 FFFC3FE4 FF FF FF FF FF FF FF FF     
   4410 FFFC3FEC FF FF FF FF FF FF FF FF     
   4411 FFFC3FF4 FF FF FF FF FF FF FF FF     
   4412 FFFC3FFC FF FF FF FF FF FF FF FF     
   4413 FFFC4004 FF FF FF FF FF FF FF FF     
   4414 FFFC400C FF FF FF FF FF FF FF FF     
   4415 FFFC4014 FF FF FF FF FF FF FF FF     
   4416 FFFC401C FF FF FF FF FF FF FF FF     
   4417 FFFC4024 FF FF FF FF FF FF FF FF     
   4418 FFFC402C FF FF FF FF FF FF FF FF     
   4419 FFFC4034 FF FF FF FF FF FF FF FF     
   4420 FFFC403C FF FF FF FF FF FF FF FF     
   4421 FFFC4044 FF FF FF FF FF FF FF FF     
   4422 FFFC404C FF FF FF FF FF FF FF FF     
   4423 FFFC4054 FF FF FF FF FF FF FF FF     
   4424 FFFC405C FF FF FF FF FF FF FF FF     
   4425 FFFC4064 FF FF FF FF FF FF FF FF     
   4426 FFFC406C FF FF FF FF FF FF FF FF     
   4427 FFFC4074 FF FF FF FF FF FF FF FF     
   4428 FFFC407C FF FF FF FF FF FF FF FF     
   4429 FFFC4084 FF FF FF FF FF FF FF FF     
   4430 FFFC408C FF FF FF FF FF FF FF FF     
   4431 FFFC4094 FF FF FF FF FF FF FF FF     
   4432 FFFC409C FF FF FF FF FF FF FF FF     
   4433 FFFC40A4 FF FF FF FF FF FF FF FF     
   4434 FFFC40AC FF FF FF FF FF FF FF FF     
   4435 FFFC40B4 FF FF FF FF FF FF FF FF     
   4436 FFFC40BC FF FF FF FF FF FF FF FF     
   4437 FFFC40C4 FF FF FF FF FF FF FF FF     
   4438 FFFC40CC FF FF FF FF FF FF FF FF     
   4439 FFFC40D4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 17
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4440 FFFC40DC FF FF FF FF FF FF FF FF     
   4441 FFFC40E4 FF FF FF FF FF FF FF FF     
   4442 FFFC40EC FF FF FF FF FF FF FF FF     
   4443 FFFC40F4 FF FF FF FF FF FF FF FF     
   4444 FFFC40FC FF FF FF FF FF FF FF FF     
   4445 FFFC4104 FF FF FF FF FF FF FF FF     
   4446 FFFC410C FF FF FF FF FF FF FF FF     
   4447 FFFC4114 FF FF FF FF FF FF FF FF     
   4448 FFFC411C FF FF FF FF FF FF FF FF     
   4449 FFFC4124 FF FF FF FF FF FF FF FF     
   4450 FFFC412C FF FF FF FF FF FF FF FF     
   4451 FFFC4134 FF FF FF FF FF FF FF FF     
   4452 FFFC413C FF FF FF FF FF FF FF FF     
   4453 FFFC4144 FF FF FF FF FF FF FF FF     
   4454 FFFC414C FF FF FF FF FF FF FF FF     
   4455 FFFC4154 FF FF FF FF FF FF FF FF     
   4456 FFFC415C FF FF FF FF FF FF FF FF     
   4457 FFFC4164 FF FF FF FF FF FF FF FF     
   4458 FFFC416C FF FF FF FF FF FF FF FF     
   4459 FFFC4174 FF FF FF FF FF FF FF FF     
   4460 FFFC417C FF FF FF FF FF FF FF FF     
   4461 FFFC4184 FF FF FF FF FF FF FF FF     
   4462 FFFC418C FF FF FF FF FF FF FF FF     
   4463 FFFC4194 FF FF FF FF FF FF FF FF     
   4464 FFFC419C FF FF FF FF FF FF FF FF     
   4465 FFFC41A4 FF FF FF FF FF FF FF FF     
   4466 FFFC41AC FF FF FF FF FF FF FF FF     
   4467 FFFC41B4 FF FF FF FF FF FF FF FF     
   4468 FFFC41BC FF FF FF FF FF FF FF FF     
   4469 FFFC41C4 FF FF FF FF FF FF FF FF     
   4470 FFFC41CC FF FF FF FF FF FF FF FF     
   4471 FFFC41D4 FF FF FF FF FF FF FF FF     
   4472 FFFC41DC FF FF FF FF FF FF FF FF     
   4473 FFFC41E4 FF FF FF FF FF FF FF FF     
   4474 FFFC41EC FF FF FF FF FF FF FF FF     
   4475 FFFC41F4 FF FF FF FF FF FF FF FF     
   4476 FFFC41FC FF FF FF FF FF FF FF FF     
   4477 FFFC4204 FF FF FF FF FF FF FF FF     
   4478 FFFC420C FF FF FF FF FF FF FF FF     
   4479 FFFC4214 FF FF FF FF FF FF FF FF     
   4480 FFFC421C FF FF FF FF FF FF FF FF     
   4481 FFFC4224 FF FF FF FF FF FF FF FF     
   4482 FFFC422C FF FF FF FF FF FF FF FF     
   4483 FFFC4234 FF FF FF FF FF FF FF FF     
   4484 FFFC423C FF FF FF FF FF FF FF FF     
   4485 FFFC4244 FF FF FF FF FF FF FF FF     
   4486 FFFC424C FF FF FF FF FF FF FF FF     
   4487 FFFC4254 FF FF FF FF FF FF FF FF     
   4488 FFFC425C FF FF FF FF FF FF FF FF     
   4489 FFFC4264 FF FF FF FF FF FF FF FF     
   4490 FFFC426C FF FF FF FF FF FF FF FF     
   4491 FFFC4274 FF FF FF FF FF FF FF FF     
   4492 FFFC427C FF FF FF FF FF FF FF FF     
   4493 FFFC4284 FF FF FF FF FF FF FF FF     
   4494 FFFC428C FF FF FF FF FF FF FF FF     
   4495 FFFC4294 FF FF FF FF FF FF FF FF     
   4496 FFFC429C FF FF FF FF FF FF FF FF     
   4497 FFFC42A4 FF FF FF FF FF FF FF FF     
   4498 FFFC42AC FF FF FF FF FF FF FF FF     
   4499 FFFC42B4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 18
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4500 FFFC42BC FF FF FF FF FF FF FF FF     
   4501 FFFC42C4 FF FF FF FF FF FF FF FF     
   4502 FFFC42CC FF FF FF FF FF FF FF FF     
   4503 FFFC42D4 FF FF FF FF FF FF FF FF     
   4504 FFFC42DC FF FF FF FF FF FF FF FF     
   4505 FFFC42E4 FF FF FF FF FF FF FF FF     
   4506 FFFC42EC FF FF FF FF FF FF FF FF     
   4507 FFFC42F4 FF FF FF FF FF FF FF FF     
   4508 FFFC42FC FF FF FF FF FF FF FF FF     
   4509 FFFC4304 FF FF FF FF FF FF FF FF     
   4510 FFFC430C FF FF FF FF FF FF FF FF     
   4511 FFFC4314 FF FF FF FF FF FF FF FF     
   4512 FFFC431C FF FF FF FF FF FF FF FF     
   4513 FFFC4324 FF FF FF FF FF FF FF FF     
   4514 FFFC432C FF FF FF FF FF FF FF FF     
   4515 FFFC4334 FF FF FF FF FF FF FF FF     
   4516 FFFC433C FF FF FF FF FF FF FF FF     
   4517 FFFC4344 FF FF FF FF FF FF FF FF     
   4518 FFFC434C FF FF FF FF FF FF FF FF     
   4519 FFFC4354 FF FF FF FF FF FF FF FF     
   4520 FFFC435C FF FF FF FF FF FF FF FF     
   4521 FFFC4364 FF FF FF FF FF FF FF FF     
   4522 FFFC436C FF FF FF FF FF FF FF FF     
   4523 FFFC4374 FF FF FF FF FF FF FF FF     
   4524 FFFC437C FF FF FF FF FF FF FF FF     
   4525 FFFC4384 FF FF FF FF FF FF FF FF     
   4526 FFFC438C FF FF FF FF FF FF FF FF     
   4527 FFFC4394 FF FF FF FF FF FF FF FF     
   4528 FFFC439C FF FF FF FF FF FF FF FF     
   4529 FFFC43A4 FF FF FF FF FF FF FF FF     
   4530 FFFC43AC FF FF FF FF FF FF FF FF     
   4531 FFFC43B4 FF FF FF FF FF FF FF FF     
   4532 FFFC43BC FF FF FF FF FF FF FF FF     
   4533 FFFC43C4 FF FF FF FF FF FF FF FF     
   4534 FFFC43CC FF FF FF FF FF FF FF FF     
   4535 FFFC43D4 FF FF FF FF FF FF FF FF     
   4536 FFFC43DC FF FF FF FF FF FF FF FF     
   4537 FFFC43E4 FF FF FF FF FF FF FF FF     
   4538 FFFC43EC FF FF FF FF FF FF FF FF     
   4539 FFFC43F4 FF FF FF FF FF FF FF FF     
   4540 FFFC43FC FF FF FF FF FF FF FF FF     
   4541 FFFC4404 FF FF FF FF FF FF FF FF     
   4542 FFFC440C FF FF FF FF FF FF FF FF     
   4543 FFFC4414 FF FF FF FF FF FF FF FF     
   4544 FFFC441C FF FF FF FF FF FF FF FF     
   4545 FFFC4424 FF FF FF FF FF FF FF FF     
   4546 FFFC442C FF FF FF FF FF FF FF FF     
   4547 FFFC4434 FF FF FF FF FF FF FF FF     
   4548 FFFC443C FF FF FF FF FF FF FF FF     
   4549 FFFC4444 FF FF FF FF FF FF FF FF     
   4550 FFFC444C FF FF FF FF FF FF FF FF     
   4551 FFFC4454 FF FF FF FF FF FF FF FF     
   4552 FFFC445C FF FF FF FF FF FF FF FF     
   4553 FFFC4464 FF FF FF FF FF FF FF FF     
   4554 FFFC446C FF FF FF FF FF FF FF FF     
   4555 FFFC4474 FF FF FF FF FF FF FF FF     
   4556 FFFC447C FF FF FF FF FF FF FF FF     
   4557 FFFC4484 FF FF FF FF FF FF FF FF     
   4558 FFFC448C FF FF FF FF FF FF FF FF     
   4559 FFFC4494 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 19
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4560 FFFC449C FF FF FF FF FF FF FF FF     
   4561 FFFC44A4 FF FF FF FF FF FF FF FF     
   4562 FFFC44AC FF FF FF FF FF FF FF FF     
   4563 FFFC44B4 FF FF FF FF FF FF FF FF     
   4564 FFFC44BC FF FF FF FF FF FF FF FF     
   4565 FFFC44C4 FF FF FF FF FF FF FF FF     
   4566 FFFC44CC FF FF FF FF FF FF FF FF     
   4567 FFFC44D4 FF FF FF FF FF FF FF FF     
   4568 FFFC44DC FF FF FF FF FF FF FF FF     
   4569 FFFC44E4 FF FF FF FF FF FF FF FF     
   4570 FFFC44EC FF FF FF FF FF FF FF FF     
   4571 FFFC44F4 FF FF FF FF FF FF FF FF     
   4572 FFFC44FC FF FF FF FF FF FF FF FF     
   4573 FFFC4504 FF FF FF FF FF FF FF FF     
   4574 FFFC450C FF FF FF FF FF FF FF FF     
   4575 FFFC4514 FF FF FF FF FF FF FF FF     
   4576 FFFC451C FF FF FF FF FF FF FF FF     
   4577 FFFC4524 FF FF FF FF FF FF FF FF     
   4578 FFFC452C FF FF FF FF FF FF FF FF     
   4579 FFFC4534 FF FF FF FF FF FF FF FF     
   4580 FFFC453C FF FF FF FF FF FF FF FF     
   4581 FFFC4544 FF FF FF FF FF FF FF FF     
   4582 FFFC454C FF FF FF FF FF FF FF FF     
   4583 FFFC4554 FF FF FF FF FF FF FF FF     
   4584 FFFC455C FF FF FF FF FF FF FF FF     
   4585 FFFC4564 FF FF FF FF FF FF FF FF     
   4586 FFFC456C FF FF FF FF FF FF FF FF     
   4587 FFFC4574 FF FF FF FF FF FF FF FF     
   4588 FFFC457C FF FF FF FF FF FF FF FF     
   4589 FFFC4584 FF FF FF FF FF FF FF FF     
   4590 FFFC458C FF FF FF FF FF FF FF FF     
   4591 FFFC4594 FF FF FF FF FF FF FF FF     
   4592 FFFC459C FF FF FF FF FF FF FF FF     
   4593 FFFC45A4 FF FF FF FF FF FF FF FF     
   4594 FFFC45AC FF FF FF FF FF FF FF FF     
   4595 FFFC45B4 FF FF FF FF FF FF FF FF     
   4596 FFFC45BC FF FF FF FF FF FF FF FF     
   4597 FFFC45C4 FF FF FF FF FF FF FF FF     
   4598 FFFC45CC FF FF FF FF FF FF FF FF     
   4599 FFFC45D4 FF FF FF FF FF FF FF FF     
   4600 FFFC45DC FF FF FF FF FF FF FF FF     
   4601 FFFC45E4 FF FF FF FF FF FF FF FF     
   4602 FFFC45EC FF FF FF FF FF FF FF FF     
   4603 FFFC45F4 FF FF FF FF FF FF FF FF     
   4604 FFFC45FC FF FF FF FF FF FF FF FF     
   4605 FFFC4604 FF FF FF FF FF FF FF FF     
   4606 FFFC460C FF FF FF FF FF FF FF FF     
   4607 FFFC4614 FF FF FF FF FF FF FF FF     
   4608 FFFC461C FF FF FF FF FF FF FF FF     
   4609 FFFC4624 FF FF FF FF FF FF FF FF     
   4610 FFFC462C FF FF FF FF FF FF FF FF     
   4611 FFFC4634 FF FF FF FF FF FF FF FF     
   4612 FFFC463C FF FF FF FF FF FF FF FF     
   4613 FFFC4644 FF FF FF FF FF FF FF FF     
   4614 FFFC464C FF FF FF FF FF FF FF FF     
   4615 FFFC4654 FF FF FF FF FF FF FF FF     
   4616 FFFC465C FF FF FF FF FF FF FF FF     
   4617 FFFC4664 FF FF FF FF FF FF FF FF     
   4618 FFFC466C FF FF FF FF FF FF FF FF     
   4619 FFFC4674 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 20
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4620 FFFC467C FF FF FF FF FF FF FF FF     
   4621 FFFC4684 FF FF FF FF FF FF FF FF     
   4622 FFFC468C FF FF FF FF FF FF FF FF     
   4623 FFFC4694 FF FF FF FF FF FF FF FF     
   4624 FFFC469C FF FF FF FF FF FF FF FF     
   4625 FFFC46A4 FF FF FF FF FF FF FF FF     
   4626 FFFC46AC FF FF FF FF FF FF FF FF     
   4627 FFFC46B4 FF FF FF FF FF FF FF FF     
   4628 FFFC46BC FF FF FF FF FF FF FF FF     
   4629 FFFC46C4 FF FF FF FF FF FF FF FF     
   4630 FFFC46CC FF FF FF FF FF FF FF FF     
   4631 FFFC46D4 FF FF FF FF FF FF FF FF     
   4632 FFFC46DC FF FF FF FF FF FF FF FF     
   4633 FFFC46E4 FF FF FF FF FF FF FF FF     
   4634 FFFC46EC FF FF FF FF FF FF FF FF     
   4635 FFFC46F4 FF FF FF FF FF FF FF FF     
   4636 FFFC46FC FF FF FF FF FF FF FF FF     
   4637 FFFC4704 FF FF FF FF FF FF FF FF     
   4638 FFFC470C FF FF FF FF FF FF FF FF     
   4639 FFFC4714 FF FF FF FF FF FF FF FF     
   4640 FFFC471C FF FF FF FF FF FF FF FF     
   4641 FFFC4724 FF FF FF FF FF FF FF FF     
   4642 FFFC472C FF FF FF FF FF FF FF FF     
   4643 FFFC4734 FF FF FF FF FF FF FF FF     
   4644 FFFC473C FF FF FF FF FF FF FF FF     
   4645 FFFC4744 FF FF FF FF FF FF FF FF     
   4646 FFFC474C FF FF FF FF FF FF FF FF     
   4647 FFFC4754 FF FF FF FF FF FF FF FF     
   4648 FFFC475C FF FF FF FF FF FF FF FF     
   4649 FFFC4764 FF FF FF FF FF FF FF FF     
   4650 FFFC476C FF FF FF FF FF FF FF FF     
   4651 FFFC4774 FF FF FF FF FF FF FF FF     
   4652 FFFC477C FF FF FF FF FF FF FF FF     
   4653 FFFC4784 FF FF FF FF FF FF FF FF     
   4654 FFFC478C FF FF FF FF FF FF FF FF     
   4655 FFFC4794 FF FF FF FF FF FF FF FF     
   4656 FFFC479C FF FF FF FF FF FF FF FF     
   4657 FFFC47A4 FF FF FF FF FF FF FF FF     
   4658 FFFC47AC FF FF FF FF FF FF FF FF     
   4659 FFFC47B4 FF FF FF FF FF FF FF FF     
   4660 FFFC47BC FF FF FF FF FF FF FF FF     
   4661 FFFC47C4 FF FF FF FF FF FF FF FF     
   4662 FFFC47CC FF FF FF FF FF FF FF FF     
   4663 FFFC47D4 FF FF FF FF FF FF FF FF     
   4664 FFFC47DC FF FF FF FF FF FF FF FF     
   4665 FFFC47E4 FF FF FF FF FF FF FF FF     
   4666 FFFC47EC FF FF FF FF FF FF FF FF     
   4667 FFFC47F4 FF FF FF FF FF FF FF FF     
   4668 FFFC47FC FF FF FF FF FF FF FF FF     
   4669 FFFC4804 FF FF FF FF FF FF FF FF     
   4670 FFFC480C FF FF FF FF FF FF FF FF     
   4671 FFFC4814 FF FF FF FF FF FF FF FF     
   4672 FFFC481C FF FF FF FF FF FF FF FF     
   4673 FFFC4824 FF FF FF FF FF FF FF FF     
   4674 FFFC482C FF FF FF FF FF FF FF FF     
   4675 FFFC4834 FF FF FF FF FF FF FF FF     
   4676 FFFC483C FF FF FF FF FF FF FF FF     
   4677 FFFC4844 FF FF FF FF FF FF FF FF     
   4678 FFFC484C FF FF FF FF FF FF FF FF     
   4679 FFFC4854 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 21
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4680 FFFC485C FF FF FF FF FF FF FF FF     
   4681 FFFC4864 FF FF FF FF FF FF FF FF     
   4682 FFFC486C FF FF FF FF FF FF FF FF     
   4683 FFFC4874 FF FF FF FF FF FF FF FF     
   4684 FFFC487C FF FF FF FF FF FF FF FF     
   4685 FFFC4884 FF FF FF FF FF FF FF FF     
   4686 FFFC488C FF FF FF FF FF FF FF FF     
   4687 FFFC4894 FF FF FF FF FF FF FF FF     
   4688 FFFC489C FF FF FF FF FF FF FF FF     
   4689 FFFC48A4 FF FF FF FF FF FF FF FF     
   4690 FFFC48AC FF FF FF FF FF FF FF FF     
   4691 FFFC48B4 FF FF FF FF FF FF FF FF     
   4692 FFFC48BC FF FF FF FF FF FF FF FF     
   4693 FFFC48C4 FF FF FF FF FF FF FF FF     
   4694 FFFC48CC FF FF FF FF FF FF FF FF     
   4695 FFFC48D4 FF FF FF FF FF FF FF FF     
   4696 FFFC48DC FF FF FF FF FF FF FF FF     
   4697 FFFC48E4 FF FF FF FF FF FF FF FF     
   4698 FFFC48EC FF FF FF FF FF FF FF FF     
   4699 FFFC48F4 FF FF FF FF FF FF FF FF     
   4700 FFFC48FC FF FF FF FF FF FF FF FF     
   4701 FFFC4904 FF FF FF FF FF FF FF FF     
   4702 FFFC490C FF FF FF FF FF FF FF FF     
   4703 FFFC4914 FF FF FF FF FF FF FF FF     
   4704 FFFC491C FF FF FF FF FF FF FF FF     
   4705 FFFC4924 FF FF FF FF FF FF FF FF     
   4706 FFFC492C FF FF FF FF FF FF FF FF     
   4707 FFFC4934 FF FF FF FF FF FF FF FF     
   4708 FFFC493C FF FF FF FF FF FF FF FF     
   4709 FFFC4944 FF FF FF FF FF FF FF FF     
   4710 FFFC494C FF FF FF FF FF FF FF FF     
   4711 FFFC4954 FF FF FF FF FF FF FF FF     
   4712 FFFC495C FF FF FF FF FF FF FF FF     
   4713 FFFC4964 FF FF FF FF FF FF FF FF     
   4714 FFFC496C FF FF FF FF FF FF FF FF     
   4715 FFFC4974 FF FF FF FF FF FF FF FF     
   4716 FFFC497C FF FF FF FF FF FF FF FF     
   4717 FFFC4984 FF FF FF FF FF FF FF FF     
   4718 FFFC498C FF FF FF FF FF FF FF FF     
   4719 FFFC4994 FF FF FF FF FF FF FF FF     
   4720 FFFC499C FF FF FF FF FF FF FF FF     
   4721 FFFC49A4 FF FF FF FF FF FF FF FF     
   4722 FFFC49AC FF FF FF FF FF FF FF FF     
   4723 FFFC49B4 FF FF FF FF FF FF FF FF     
   4724 FFFC49BC FF FF FF FF FF FF FF FF     
   4725 FFFC49C4 FF FF FF FF FF FF FF FF     
   4726 FFFC49CC FF FF FF FF FF FF FF FF     
   4727 FFFC49D4 FF FF FF FF FF FF FF FF     
   4728 FFFC49DC FF FF FF FF FF FF FF FF     
   4729 FFFC49E4 FF FF FF FF FF FF FF FF     
   4730 FFFC49EC FF FF FF FF FF FF FF FF     
   4731 FFFC49F4 FF FF FF FF FF FF FF FF     
   4732 FFFC49FC FF FF FF FF FF FF FF FF     
   4733 FFFC4A04 FF FF FF FF FF FF FF FF     
   4734 FFFC4A0C FF FF FF FF FF FF FF FF     
   4735 FFFC4A14 FF FF FF FF FF FF FF FF     
   4736 FFFC4A1C FF FF FF FF FF FF FF FF     
   4737 FFFC4A24 FF FF FF FF FF FF FF FF     
   4738 FFFC4A2C FF FF FF FF FF FF FF FF     
   4739 FFFC4A34 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 22
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4740 FFFC4A3C FF FF FF FF FF FF FF FF     
   4741 FFFC4A44 FF FF FF FF FF FF FF FF     
   4742 FFFC4A4C FF FF FF FF FF FF FF FF     
   4743 FFFC4A54 FF FF FF FF FF FF FF FF     
   4744 FFFC4A5C FF FF FF FF FF FF FF FF     
   4745 FFFC4A64 FF FF FF FF FF FF FF FF     
   4746 FFFC4A6C FF FF FF FF FF FF FF FF     
   4747 FFFC4A74 FF FF FF FF FF FF FF FF     
   4748 FFFC4A7C FF FF FF FF FF FF FF FF     
   4749 FFFC4A84 FF FF FF FF FF FF FF FF     
   4750 FFFC4A8C FF FF FF FF FF FF FF FF     
   4751 FFFC4A94 FF FF FF FF FF FF FF FF     
   4752 FFFC4A9C FF FF FF FF FF FF FF FF     
   4753 FFFC4AA4 FF FF FF FF FF FF FF FF     
   4754 FFFC4AAC FF FF FF FF FF FF FF FF     
   4755 FFFC4AB4 FF FF FF FF FF FF FF FF     
   4756 FFFC4ABC FF FF FF FF FF FF FF FF     
   4757 FFFC4AC4 FF FF FF FF FF FF FF FF     
   4758 FFFC4ACC FF FF FF FF FF FF FF FF     
   4759 FFFC4AD4 FF FF FF FF FF FF FF FF     
   4760 FFFC4ADC FF FF FF FF FF FF FF FF     
   4761 FFFC4AE4 FF FF FF FF FF FF FF FF     
   4762 FFFC4AEC FF FF FF FF FF FF FF FF     
   4763 FFFC4AF4 FF FF FF FF FF FF FF FF     
   4764 FFFC4AFC FF FF FF FF FF FF FF FF     
   4765 FFFC4B04 FF FF FF FF FF FF FF FF     
   4766 FFFC4B0C FF FF FF FF FF FF FF FF     
   4767 FFFC4B14 FF FF FF FF FF FF FF FF     
   4768 FFFC4B1C FF FF FF FF FF FF FF FF     
   4769 FFFC4B24 FF FF FF FF FF FF FF FF     
   4770 FFFC4B2C FF FF FF FF FF FF FF FF     
   4771 FFFC4B34 FF FF FF FF FF FF FF FF     
   4772 FFFC4B3C FF FF FF FF FF FF FF FF     
   4773 FFFC4B44 FF FF FF FF FF FF FF FF     
   4774 FFFC4B4C FF FF FF FF FF FF FF FF     
   4775 FFFC4B54 FF FF FF FF FF FF FF FF     
   4776 FFFC4B5C FF FF FF FF FF FF FF FF     
   4777 FFFC4B64 FF FF FF FF FF FF FF FF     
   4778 FFFC4B6C FF FF FF FF FF FF FF FF     
   4779 FFFC4B74 FF FF FF FF FF FF FF FF     
   4780 FFFC4B7C FF FF FF FF FF FF FF FF     
   4781 FFFC4B84 FF FF FF FF FF FF FF FF     
   4782 FFFC4B8C FF FF FF FF FF FF FF FF     
   4783 FFFC4B94 FF FF FF FF FF FF FF FF     
   4784 FFFC4B9C FF FF FF FF FF FF FF FF     
   4785 FFFC4BA4 FF FF FF FF FF FF FF FF     
   4786 FFFC4BAC FF FF FF FF FF FF FF FF     
   4787 FFFC4BB4 FF FF FF FF FF FF FF FF     
   4788 FFFC4BBC FF FF FF FF FF FF FF FF     
   4789 FFFC4BC4 FF FF FF FF FF FF FF FF     
   4790 FFFC4BCC FF FF FF FF FF FF FF FF     
   4791 FFFC4BD4 FF FF FF FF FF FF FF FF     
   4792 FFFC4BDC FF FF FF FF FF FF FF FF     
   4793 FFFC4BE4 FF FF FF FF FF FF FF FF     
   4794 FFFC4BEC FF FF FF FF FF FF FF FF     
   4795 FFFC4BF4 FF FF FF FF FF FF FF FF     
   4796 FFFC4BFC FF FF FF FF FF FF FF FF     
   4797 FFFC4C04 FF FF FF FF FF FF FF FF     
   4798 FFFC4C0C FF FF FF FF FF FF FF FF     
   4799 FFFC4C14 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 23
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4800 FFFC4C1C FF FF FF FF FF FF FF FF     
   4801 FFFC4C24 FF FF FF FF FF FF FF FF     
   4802 FFFC4C2C FF FF FF FF FF FF FF FF     
   4803 FFFC4C34 FF FF FF FF FF FF FF FF     
   4804 FFFC4C3C FF FF FF FF FF FF FF FF     
   4805 FFFC4C44 FF FF FF FF FF FF FF FF     
   4806 FFFC4C4C FF FF FF FF FF FF FF FF     
   4807 FFFC4C54 FF FF FF FF FF FF FF FF     
   4808 FFFC4C5C FF FF FF FF FF FF FF FF     
   4809 FFFC4C64 FF FF FF FF FF FF FF FF     
   4810 FFFC4C6C FF FF FF FF FF FF FF FF     
   4811 FFFC4C74 FF FF FF FF FF FF FF FF     
   4812 FFFC4C7C FF FF FF FF FF FF FF FF     
   4813 FFFC4C84 FF FF FF FF FF FF FF FF     
   4814 FFFC4C8C FF FF FF FF FF FF FF FF     
   4815 FFFC4C94 FF FF FF FF FF FF FF FF     
   4816 FFFC4C9C FF FF FF FF FF FF FF FF     
   4817 FFFC4CA4 FF FF FF FF FF FF FF FF     
   4818 FFFC4CAC FF FF FF FF FF FF FF FF     
   4819 FFFC4CB4 FF FF FF FF FF FF FF FF     
   4820 FFFC4CBC FF FF FF FF FF FF FF FF     
   4821 FFFC4CC4 FF FF FF FF FF FF FF FF     
   4822 FFFC4CCC FF FF FF FF FF FF FF FF     
   4823 FFFC4CD4 FF FF FF FF FF FF FF FF     
   4824 FFFC4CDC FF FF FF FF FF FF FF FF     
   4825 FFFC4CE4 FF FF FF FF FF FF FF FF     
   4826 FFFC4CEC FF FF FF FF FF FF FF FF     
   4827 FFFC4CF4 FF FF FF FF FF FF FF FF     
   4828 FFFC4CFC FF FF FF FF FF FF FF FF     
   4829 FFFC4D04 FF FF FF FF FF FF FF FF     
   4830 FFFC4D0C FF FF FF FF FF FF FF FF     
   4831 FFFC4D14 FF FF FF FF FF FF FF FF     
   4832 FFFC4D1C FF FF FF FF FF FF FF FF     
   4833 FFFC4D24 FF FF FF FF FF FF FF FF     
   4834 FFFC4D2C FF FF FF FF FF FF FF FF     
   4835 FFFC4D34 FF FF FF FF FF FF FF FF     
   4836 FFFC4D3C FF FF FF FF FF FF FF FF     
   4837 FFFC4D44 FF FF FF FF FF FF FF FF     
   4838 FFFC4D4C FF FF FF FF FF FF FF FF     
   4839 FFFC4D54 FF FF FF FF FF FF FF FF     
   4840 FFFC4D5C FF FF FF FF FF FF FF FF     
   4841 FFFC4D64 FF FF FF FF FF FF FF FF     
   4842 FFFC4D6C FF FF FF FF FF FF FF FF     
   4843 FFFC4D74 FF FF FF FF FF FF FF FF     
   4844 FFFC4D7C FF FF FF FF FF FF FF FF     
   4845 FFFC4D84 FF FF FF FF FF FF FF FF     
   4846 FFFC4D8C FF FF FF FF FF FF FF FF     
   4847 FFFC4D94 FF FF FF FF FF FF FF FF     
   4848 FFFC4D9C FF FF FF FF FF FF FF FF     
   4849 FFFC4DA4 FF FF FF FF FF FF FF FF     
   4850 FFFC4DAC FF FF FF FF FF FF FF FF     
   4851 FFFC4DB4 FF FF FF FF FF FF FF FF     
   4852 FFFC4DBC FF FF FF FF FF FF FF FF     
   4853 FFFC4DC4 FF FF FF FF FF FF FF FF     
   4854 FFFC4DCC FF FF FF FF FF FF FF FF     
   4855 FFFC4DD4 FF FF FF FF FF FF FF FF     
   4856 FFFC4DDC FF FF FF FF FF FF FF FF     
   4857 FFFC4DE4 FF FF FF FF FF FF FF FF     
   4858 FFFC4DEC FF FF FF FF FF FF FF FF     
   4859 FFFC4DF4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 24
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4860 FFFC4DFC FF FF FF FF FF FF FF FF     
   4861 FFFC4E04 FF FF FF FF FF FF FF FF     
   4862 FFFC4E0C FF FF FF FF FF FF FF FF     
   4863 FFFC4E14 FF FF FF FF FF FF FF FF     
   4864 FFFC4E1C FF FF FF FF FF FF FF FF     
   4865 FFFC4E24 FF FF FF FF FF FF FF FF     
   4866 FFFC4E2C FF FF FF FF FF FF FF FF     
   4867 FFFC4E34 FF FF FF FF FF FF FF FF     
   4868 FFFC4E3C FF FF FF FF FF FF FF FF     
   4869 FFFC4E44 FF FF FF FF FF FF FF FF     
   4870 FFFC4E4C FF FF FF FF FF FF FF FF     
   4871 FFFC4E54 FF FF FF FF FF FF FF FF     
   4872 FFFC4E5C FF FF FF FF FF FF FF FF     
   4873 FFFC4E64 FF FF FF FF FF FF FF FF     
   4874 FFFC4E6C FF FF FF FF FF FF FF FF     
   4875 FFFC4E74 FF FF FF FF FF FF FF FF     
   4876 FFFC4E7C FF FF FF FF FF FF FF FF     
   4877 FFFC4E84 FF FF FF FF FF FF FF FF     
   4878 FFFC4E8C FF FF FF FF FF FF FF FF     
   4879 FFFC4E94 FF FF FF FF FF FF FF FF     
   4880 FFFC4E9C FF FF FF FF FF FF FF FF     
   4881 FFFC4EA4 FF FF FF FF FF FF FF FF     
   4882 FFFC4EAC FF FF FF FF FF FF FF FF     
   4883 FFFC4EB4 FF FF FF FF FF FF FF FF     
   4884 FFFC4EBC FF FF FF FF FF FF FF FF     
   4885 FFFC4EC4 FF FF FF FF FF FF FF FF     
   4886 FFFC4ECC FF FF FF FF FF FF FF FF     
   4887 FFFC4ED4 FF FF FF FF FF FF FF FF     
   4888 FFFC4EDC FF FF FF FF FF FF FF FF     
   4889 FFFC4EE4 FF FF FF FF FF FF FF FF     
   4890 FFFC4EEC FF FF FF FF FF FF FF FF     
   4891 FFFC4EF4 FF FF FF FF FF FF FF FF     
   4892 FFFC4EFC FF FF FF FF FF FF FF FF     
   4893 FFFC4F04 FF FF FF FF FF FF FF FF     
   4894 FFFC4F0C FF FF FF FF FF FF FF FF     
   4895 FFFC4F14 FF FF FF FF FF FF FF FF     
   4896 FFFC4F1C FF FF FF FF FF FF FF FF     
   4897 FFFC4F24 FF FF FF FF FF FF FF FF     
   4898 FFFC4F2C FF FF FF FF FF FF FF FF     
   4899 FFFC4F34 FF FF FF FF FF FF FF FF     
   4900 FFFC4F3C FF FF FF FF FF FF FF FF     
   4901 FFFC4F44 FF FF FF FF FF FF FF FF     
   4902 FFFC4F4C FF FF FF FF FF FF FF FF     
   4903 FFFC4F54 FF FF FF FF FF FF FF FF     
   4904 FFFC4F5C FF FF FF FF FF FF FF FF     
   4905 FFFC4F64 FF FF FF FF FF FF FF FF     
   4906 FFFC4F6C FF FF FF FF FF FF FF FF     
   4907 FFFC4F74 FF FF FF FF FF FF FF FF     
   4908 FFFC4F7C FF FF FF FF FF FF FF FF     
   4909 FFFC4F84 FF FF FF FF FF FF FF FF     
   4910 FFFC4F8C FF FF FF FF FF FF FF FF     
   4911 FFFC4F94 FF FF FF FF FF FF FF FF     
   4912 FFFC4F9C FF FF FF FF FF FF FF FF     
   4913 FFFC4FA4 FF FF FF FF FF FF FF FF     
   4914 FFFC4FAC FF FF FF FF FF FF FF FF     
   4915 FFFC4FB4 FF FF FF FF FF FF FF FF     
   4916 FFFC4FBC FF FF FF FF FF FF FF FF     
   4917 FFFC4FC4 FF FF FF FF FF FF FF FF     
   4918 FFFC4FCC FF FF FF FF FF FF FF FF     
   4919 FFFC4FD4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 25
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4920 FFFC4FDC FF FF FF FF FF FF FF FF     
   4921 FFFC4FE4 FF FF FF FF FF FF FF FF     
   4922 FFFC4FEC FF FF FF FF FF FF FF FF     
   4923 FFFC4FF4 FF FF FF FF FF FF FF FF     
   4924 FFFC4FFC FF FF FF FF FF FF FF FF     
   4925 FFFC5004 FF FF FF FF FF FF FF FF     
   4926 FFFC500C FF FF FF FF FF FF FF FF     
   4927 FFFC5014 FF FF FF FF FF FF FF FF     
   4928 FFFC501C FF FF FF FF FF FF FF FF     
   4929 FFFC5024 FF FF FF FF FF FF FF FF     
   4930 FFFC502C FF FF FF FF FF FF FF FF     
   4931 FFFC5034 FF FF FF FF FF FF FF FF     
   4932 FFFC503C FF FF FF FF FF FF FF FF     
   4933 FFFC5044 FF FF FF FF FF FF FF FF     
   4934 FFFC504C FF FF FF FF FF FF FF FF     
   4935 FFFC5054 FF FF FF FF FF FF FF FF     
   4936 FFFC505C FF FF FF FF FF FF FF FF     
   4937 FFFC5064 FF FF FF FF FF FF FF FF     
   4938 FFFC506C FF FF FF FF FF FF FF FF     
   4939 FFFC5074 FF FF FF FF FF FF FF FF     
   4940 FFFC507C FF FF FF FF FF FF FF FF     
   4941 FFFC5084 FF FF FF FF FF FF FF FF     
   4942 FFFC508C FF FF FF FF FF FF FF FF     
   4943 FFFC5094 FF FF FF FF FF FF FF FF     
   4944 FFFC509C FF FF FF FF FF FF FF FF     
   4945 FFFC50A4 FF FF FF FF FF FF FF FF     
   4946 FFFC50AC FF FF FF FF FF FF FF FF     
   4947 FFFC50B4 FF FF FF FF FF FF FF FF     
   4948 FFFC50BC FF FF FF FF FF FF FF FF     
   4949 FFFC50C4 FF FF FF FF FF FF FF FF     
   4950 FFFC50CC FF FF FF FF FF FF FF FF     
   4951 FFFC50D4 FF FF FF FF FF FF FF FF     
   4952 FFFC50DC FF FF FF FF FF FF FF FF     
   4953 FFFC50E4 FF FF FF FF FF FF FF FF     
   4954 FFFC50EC FF FF FF FF FF FF FF FF     
   4955 FFFC50F4 FF FF FF FF FF FF FF FF     
   4956 FFFC50FC FF FF FF FF FF FF FF FF     
   4957 FFFC5104 FF FF FF FF FF FF FF FF     
   4958 FFFC510C FF FF FF FF FF FF FF FF     
   4959 FFFC5114 FF FF FF FF FF FF FF FF     
   4960 FFFC511C FF FF FF FF FF FF FF FF     
   4961 FFFC5124 FF FF FF FF FF FF FF FF     
   4962 FFFC512C FF FF FF FF FF FF FF FF     
   4963 FFFC5134 FF FF FF FF FF FF FF FF     
   4964 FFFC513C FF FF FF FF FF FF FF FF     
   4965 FFFC5144 FF FF FF FF FF FF FF FF     
   4966 FFFC514C FF FF FF FF FF FF FF FF     
   4967 FFFC5154 FF FF FF FF FF FF FF FF     
   4968 FFFC515C FF FF FF FF FF FF FF FF     
   4969 FFFC5164 FF FF FF FF FF FF FF FF     
   4970 FFFC516C FF FF FF FF FF FF FF FF     
   4971 FFFC5174 FF FF FF FF FF FF FF FF     
   4972 FFFC517C FF FF FF FF FF FF FF FF     
   4973 FFFC5184 FF FF FF FF FF FF FF FF     
   4974 FFFC518C FF FF FF FF FF FF FF FF     
   4975 FFFC5194 FF FF FF FF FF FF FF FF     
   4976 FFFC519C FF FF FF FF FF FF FF FF     
   4977 FFFC51A4 FF FF FF FF FF FF FF FF     
   4978 FFFC51AC FF FF FF FF FF FF FF FF     
   4979 FFFC51B4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 26
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4980 FFFC51BC FF FF FF FF FF FF FF FF     
   4981 FFFC51C4 FF FF FF FF FF FF FF FF     
   4982 FFFC51CC FF FF FF FF FF FF FF FF     
   4983 FFFC51D4 FF FF FF FF FF FF FF FF     
   4984 FFFC51DC FF FF FF FF FF FF FF FF     
   4985 FFFC51E4 FF FF FF FF FF FF FF FF     
   4986 FFFC51EC FF FF FF FF FF FF FF FF     
   4987 FFFC51F4 FF FF FF FF FF FF FF FF     
   4988 FFFC51FC FF FF FF FF FF FF FF FF     
   4989 FFFC5204 FF FF FF FF FF FF FF FF     
   4990 FFFC520C FF FF FF FF FF FF FF FF     
   4991 FFFC5214 FF FF FF FF FF FF FF FF     
   4992 FFFC521C FF FF FF FF FF FF FF FF     
   4993 FFFC5224 FF FF FF FF FF FF FF FF     
   4994 FFFC522C FF FF FF FF FF FF FF FF     
   4995 FFFC5234 FF FF FF FF FF FF FF FF     
   4996 FFFC523C FF FF FF FF FF FF FF FF     
   4997 FFFC5244 FF FF FF FF FF FF FF FF     
   4998 FFFC524C FF FF FF FF FF FF FF FF     
   4999 FFFC5254 FF FF FF FF FF FF FF FF     
   5000 FFFC525C FF FF FF FF FF FF FF FF     
   5001 FFFC5264 FF FF FF FF FF FF FF FF     
   5002 FFFC526C FF FF FF FF FF FF FF FF     
   5003 FFFC5274 FF FF FF FF FF FF FF FF     
   5004 FFFC527C FF FF FF FF FF FF FF FF     
   5005 FFFC5284 FF FF FF FF FF FF FF FF     
   5006 FFFC528C FF FF FF FF FF FF FF FF     
   5007 FFFC5294 FF FF FF FF FF FF FF FF     
   5008 FFFC529C FF FF FF FF FF FF FF FF     
   5009 FFFC52A4 FF FF FF FF FF FF FF FF     
   5010 FFFC52AC FF FF FF FF FF FF FF FF     
   5011 FFFC52B4 FF FF FF FF FF FF FF FF     
   5012 FFFC52BC FF FF FF FF FF FF FF FF     
   5013 FFFC52C4 FF FF FF FF FF FF FF FF     
   5014 FFFC52CC FF FF FF FF FF FF FF FF     
   5015 FFFC52D4 FF FF FF FF FF FF FF FF     
   5016 FFFC52DC FF FF FF FF FF FF FF FF     
   5017 FFFC52E4 FF FF FF FF FF FF FF FF     
   5018 FFFC52EC FF FF FF FF FF FF FF FF     
   5019 FFFC52F4 FF FF FF FF FF FF FF FF     
   5020 FFFC52FC FF FF FF FF FF FF FF FF     
   5021 FFFC5304 FF FF FF FF FF FF FF FF     
   5022 FFFC530C FF FF FF FF FF FF FF FF     
   5023 FFFC5314 FF FF FF FF FF FF FF FF     
   5024 FFFC531C FF FF FF FF FF FF FF FF     
   5025 FFFC5324 FF FF FF FF FF FF FF FF     
   5026 FFFC532C FF FF FF FF FF FF FF FF     
   5027 FFFC5334 FF FF FF FF FF FF FF FF     
   5028 FFFC533C FF FF FF FF FF FF FF FF     
   5029 FFFC5344 FF FF FF FF FF FF FF FF     
   5030 FFFC534C FF FF FF FF FF FF FF FF     
   5031 FFFC5354 FF FF FF FF FF FF FF FF     
   5032 FFFC535C FF FF FF FF FF FF FF FF     
   5033 FFFC5364 FF FF FF FF FF FF FF FF     
   5034 FFFC536C FF FF FF FF FF FF FF FF     
   5035 FFFC5374 FF FF FF FF FF FF FF FF     
   5036 FFFC537C FF FF FF FF FF FF FF FF     
   5037 FFFC5384 FF FF FF FF FF FF FF FF     
   5038 FFFC538C FF FF FF FF FF FF FF FF     
   5039 FFFC5394 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 27
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5040 FFFC539C FF FF FF FF FF FF FF FF     
   5041 FFFC53A4 FF FF FF FF FF FF FF FF     
   5042 FFFC53AC FF FF FF FF FF FF FF FF     
   5043 FFFC53B4 FF FF FF FF FF FF FF FF     
   5044 FFFC53BC FF FF FF FF FF FF FF FF     
   5045 FFFC53C4 FF FF FF FF FF FF FF FF     
   5046 FFFC53CC FF FF FF FF FF FF FF FF     
   5047 FFFC53D4 FF FF FF FF FF FF FF FF     
   5048 FFFC53DC FF FF FF FF FF FF FF FF     
   5049 FFFC53E4 FF FF FF FF FF FF FF FF     
   5050 FFFC53EC FF FF FF FF FF FF FF FF     
   5051 FFFC53F4 FF FF FF FF FF FF FF FF     
   5052 FFFC53FC FF FF FF FF FF FF FF FF     
   5053 FFFC5404 FF FF FF FF FF FF FF FF     
   5054 FFFC540C FF FF FF FF FF FF FF FF     
   5055 FFFC5414 FF FF FF FF FF FF FF FF     
   5056 FFFC541C FF FF FF FF FF FF FF FF     
   5057 FFFC5424 FF FF FF FF FF FF FF FF     
   5058 FFFC542C FF FF FF FF FF FF FF FF     
   5059 FFFC5434 FF FF FF FF FF FF FF FF     
   5060 FFFC543C FF FF FF FF FF FF FF FF     
   5061 FFFC5444 FF FF FF FF FF FF FF FF     
   5062 FFFC544C FF FF FF FF FF FF FF FF     
   5063 FFFC5454 FF FF FF FF FF FF FF FF     
   5064 FFFC545C FF FF FF FF FF FF FF FF     
   5065 FFFC5464 FF FF FF FF FF FF FF FF     
   5066 FFFC546C FF FF FF FF FF FF FF FF     
   5067 FFFC5474 FF FF FF FF FF FF FF FF     
   5068 FFFC547C FF FF FF FF FF FF FF FF     
   5069 FFFC5484 FF FF FF FF FF FF FF FF     
   5070 FFFC548C FF FF FF FF FF FF FF FF     
   5071 FFFC5494 FF FF FF FF FF FF FF FF     
   5072 FFFC549C FF FF FF FF FF FF FF FF     
   5073 FFFC54A4 FF FF FF FF FF FF FF FF     
   5074 FFFC54AC FF FF FF FF FF FF FF FF     
   5075 FFFC54B4 FF FF FF FF FF FF FF FF     
   5076 FFFC54BC FF FF FF FF FF FF FF FF     
   5077 FFFC54C4 FF FF FF FF FF FF FF FF     
   5078 FFFC54CC FF FF FF FF FF FF FF FF     
   5079 FFFC54D4 FF FF FF FF FF FF FF FF     
   5080 FFFC54DC FF FF FF FF FF FF FF FF     
   5081 FFFC54E4 FF FF FF FF FF FF FF FF     
   5082 FFFC54EC FF FF FF FF FF FF FF FF     
   5083 FFFC54F4 FF FF FF FF FF FF FF FF     
   5084 FFFC54FC FF FF FF FF FF FF FF FF     
   5085 FFFC5504 FF FF FF FF FF FF FF FF     
   5086 FFFC550C FF FF FF FF FF FF FF FF     
   5087 FFFC5514 FF FF FF FF FF FF FF FF     
   5088 FFFC551C FF FF FF FF FF FF FF FF     
   5089 FFFC5524 FF FF FF FF FF FF FF FF     
   5090 FFFC552C FF FF FF FF FF FF FF FF     
   5091 FFFC5534 FF FF FF FF FF FF FF FF     
   5092 FFFC553C FF FF FF FF FF FF FF FF     
   5093 FFFC5544 FF FF FF FF FF FF FF FF     
   5094 FFFC554C FF FF FF FF FF FF FF FF     
   5095 FFFC5554 FF FF FF FF FF FF FF FF     
   5096 FFFC555C FF FF FF FF FF FF FF FF     
   5097 FFFC5564 FF FF FF FF FF FF FF FF     
   5098 FFFC556C FF FF FF FF FF FF FF FF     
   5099 FFFC5574 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 28
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5100 FFFC557C FF FF FF FF FF FF FF FF     
   5101 FFFC5584 FF FF FF FF FF FF FF FF     
   5102 FFFC558C FF FF FF FF FF FF FF FF     
   5103 FFFC5594 FF FF FF FF FF FF FF FF     
   5104 FFFC559C FF FF FF FF FF FF FF FF     
   5105 FFFC55A4 FF FF FF FF FF FF FF FF     
   5106 FFFC55AC FF FF FF FF FF FF FF FF     
   5107 FFFC55B4 FF FF FF FF FF FF FF FF     
   5108 FFFC55BC FF FF FF FF FF FF FF FF     
   5109 FFFC55C4 FF FF FF FF FF FF FF FF     
   5110 FFFC55CC FF FF FF FF FF FF FF FF     
   5111 FFFC55D4 FF FF FF FF FF FF FF FF     
   5112 FFFC55DC FF FF FF FF FF FF FF FF     
   5113 FFFC55E4 FF FF FF FF FF FF FF FF     
   5114 FFFC55EC FF FF FF FF FF FF FF FF     
   5115 FFFC55F4 FF FF FF FF FF FF FF FF     
   5116 FFFC55FC FF FF FF FF FF FF FF FF     
   5117 FFFC5604 FF FF FF FF FF FF FF FF     
   5118 FFFC560C FF FF FF FF FF FF FF FF     
   5119 FFFC5614 FF FF FF FF FF FF FF FF     
   5120 FFFC561C FF FF FF FF FF FF FF FF     
   5121 FFFC5624 FF FF FF FF FF FF FF FF     
   5122 FFFC562C FF FF FF FF FF FF FF FF     
   5123 FFFC5634 FF FF FF FF FF FF FF FF     
   5124 FFFC563C FF FF FF FF FF FF FF FF     
   5125 FFFC5644 FF FF FF FF FF FF FF FF     
   5126 FFFC564C FF FF FF FF FF FF FF FF     
   5127 FFFC5654 FF FF FF FF FF FF FF FF     
   5128 FFFC565C FF FF FF FF FF FF FF FF     
   5129 FFFC5664 FF FF FF FF FF FF FF FF     
   5130 FFFC566C FF FF FF FF FF FF FF FF     
   5131 FFFC5674 FF FF FF FF FF FF FF FF     
   5132 FFFC567C FF FF FF FF FF FF FF FF     
   5133 FFFC5684 FF FF FF FF FF FF FF FF     
   5134 FFFC568C FF FF FF FF FF FF FF FF     
   5135 FFFC5694 FF FF FF FF FF FF FF FF     
   5136 FFFC569C FF FF FF FF FF FF FF FF     
   5137 FFFC56A4 FF FF FF FF FF FF FF FF     
   5138 FFFC56AC FF FF FF FF FF FF FF FF     
   5139 FFFC56B4 FF FF FF FF FF FF FF FF     
   5140 FFFC56BC FF FF FF FF FF FF FF FF     
   5141 FFFC56C4 FF FF FF FF FF FF FF FF     
   5142 FFFC56CC FF FF FF FF FF FF FF FF     
   5143 FFFC56D4 FF FF FF FF FF FF FF FF     
   5144 FFFC56DC FF FF FF FF FF FF FF FF     
   5145 FFFC56E4 FF FF FF FF FF FF FF FF     
   5146 FFFC56EC FF FF FF FF FF FF FF FF     
   5147 FFFC56F4 FF FF FF FF FF FF FF FF     
   5148 FFFC56FC FF FF FF FF FF FF FF FF     
   5149 FFFC5704 FF FF FF FF FF FF FF FF     
   5150 FFFC570C FF FF FF FF FF FF FF FF     
   5151 FFFC5714 FF FF FF FF FF FF FF FF     
   5152 FFFC571C FF FF FF FF FF FF FF FF     
   5153 FFFC5724 FF FF FF FF FF FF FF FF     
   5154 FFFC572C FF FF FF FF FF FF FF FF     
   5155 FFFC5734 FF FF FF FF FF FF FF FF     
   5156 FFFC573C FF FF FF FF FF FF FF FF     
   5157 FFFC5744 FF FF FF FF FF FF FF FF     
   5158 FFFC574C FF FF FF FF FF FF FF FF     
   5159 FFFC5754 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 29
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5160 FFFC575C FF FF FF FF FF FF FF FF     
   5161 FFFC5764 FF FF FF FF FF FF FF FF     
   5162 FFFC576C FF FF FF FF FF FF FF FF     
   5163 FFFC5774 FF FF FF FF FF FF FF FF     
   5164 FFFC577C FF FF FF FF FF FF FF FF     
   5165 FFFC5784 FF FF FF FF FF FF FF FF     
   5166 FFFC578C FF FF FF FF FF FF FF FF     
   5167 FFFC5794 FF FF FF FF FF FF FF FF     
   5168 FFFC579C FF FF FF FF FF FF FF FF     
   5169 FFFC57A4 FF FF FF FF FF FF FF FF     
   5170 FFFC57AC FF FF FF FF FF FF FF FF     
   5171 FFFC57B4 FF FF FF FF FF FF FF FF     
   5172 FFFC57BC FF FF FF FF FF FF FF FF     
   5173 FFFC57C4 FF FF FF FF FF FF FF FF     
   5174 FFFC57CC FF FF FF FF FF FF FF FF     
   5175 FFFC57D4 FF FF FF FF FF FF FF FF     
   5176 FFFC57DC FF FF FF FF FF FF FF FF     
   5177 FFFC57E4 FF FF FF FF FF FF FF FF     
   5178 FFFC57EC FF FF FF FF FF FF FF FF     
   5179 FFFC57F4 FF FF FF FF FF FF FF FF     
   5180 FFFC57FC FF FF FF FF FF FF FF FF     
   5181 FFFC5804 FF FF FF FF FF FF FF FF     
   5182 FFFC580C FF FF FF FF FF FF FF FF     
   5183 FFFC5814 FF FF FF FF FF FF FF FF     
   5184 FFFC581C FF FF FF FF FF FF FF FF     
   5185 FFFC5824 FF FF FF FF FF FF FF FF     
   5186 FFFC582C FF FF FF FF FF FF FF FF     
   5187 FFFC5834 FF FF FF FF FF FF FF FF     
   5188 FFFC583C FF FF FF FF FF FF FF FF     
   5189 FFFC5844 FF FF FF FF FF FF FF FF     
   5190 FFFC584C FF FF FF FF FF FF FF FF     
   5191 FFFC5854 FF FF FF FF FF FF FF FF     
   5192 FFFC585C FF FF FF FF FF FF FF FF     
   5193 FFFC5864 FF FF FF FF FF FF FF FF     
   5194 FFFC586C FF FF FF FF FF FF FF FF     
   5195 FFFC5874 FF FF FF FF FF FF FF FF     
   5196 FFFC587C FF FF FF FF FF FF FF FF     
   5197 FFFC5884 FF FF FF FF FF FF FF FF     
   5198 FFFC588C FF FF FF FF FF FF FF FF     
   5199 FFFC5894 FF FF FF FF FF FF FF FF     
   5200 FFFC589C FF FF FF FF FF FF FF FF     
   5201 FFFC58A4 FF FF FF FF FF FF FF FF     
   5202 FFFC58AC FF FF FF FF FF FF FF FF     
   5203 FFFC58B4 FF FF FF FF FF FF FF FF     
   5204 FFFC58BC FF FF FF FF FF FF FF FF     
   5205 FFFC58C4 FF FF FF FF FF FF FF FF     
   5206 FFFC58CC FF FF FF FF FF FF FF FF     
   5207 FFFC58D4 FF FF FF FF FF FF FF FF     
   5208 FFFC58DC FF FF FF FF FF FF FF FF     
   5209 FFFC58E4 FF FF FF FF FF FF FF FF     
   5210 FFFC58EC FF FF FF FF FF FF FF FF     
   5211 FFFC58F4 FF FF FF FF FF FF FF FF     
   5212 FFFC58FC FF FF FF FF FF FF FF FF     
   5213 FFFC5904 FF FF FF FF FF FF FF FF     
   5214 FFFC590C FF FF FF FF FF FF FF FF     
   5215 FFFC5914 FF FF FF FF FF FF FF FF     
   5216 FFFC591C FF FF FF FF FF FF FF FF     
   5217 FFFC5924 FF FF FF FF FF FF FF FF     
   5218 FFFC592C FF FF FF FF FF FF FF FF     
   5219 FFFC5934 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 30
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5220 FFFC593C FF FF FF FF FF FF FF FF     
   5221 FFFC5944 FF FF FF FF FF FF FF FF     
   5222 FFFC594C FF FF FF FF FF FF FF FF     
   5223 FFFC5954 FF FF FF FF FF FF FF FF     
   5224 FFFC595C FF FF FF FF FF FF FF FF     
   5225 FFFC5964 FF FF FF FF FF FF FF FF     
   5226 FFFC596C FF FF FF FF FF FF FF FF     
   5227 FFFC5974 FF FF FF FF FF FF FF FF     
   5228 FFFC597C FF FF FF FF FF FF FF FF     
   5229 FFFC5984 FF FF FF FF FF FF FF FF     
   5230 FFFC598C FF FF FF FF FF FF FF FF     
   5231 FFFC5994 FF FF FF FF FF FF FF FF     
   5232 FFFC599C FF FF FF FF FF FF FF FF     
   5233 FFFC59A4 FF FF FF FF FF FF FF FF     
   5234 FFFC59AC FF FF FF FF FF FF FF FF     
   5235 FFFC59B4 FF FF FF FF FF FF FF FF     
   5236 FFFC59BC FF FF FF FF FF FF FF FF     
   5237 FFFC59C4 FF FF FF FF FF FF FF FF     
   5238 FFFC59CC FF FF FF FF FF FF FF FF     
   5239 FFFC59D4 FF FF FF FF FF FF FF FF     
   5240 FFFC59DC FF FF FF FF FF FF FF FF     
   5241 FFFC59E4 FF FF FF FF FF FF FF FF     
   5242 FFFC59EC FF FF FF FF FF FF FF FF     
   5243 FFFC59F4 FF FF FF FF FF FF FF FF     
   5244 FFFC59FC FF FF FF FF FF FF FF FF     
   5245 FFFC5A04 FF FF FF FF FF FF FF FF     
   5246 FFFC5A0C FF FF FF FF FF FF FF FF     
   5247 FFFC5A14 FF FF FF FF FF FF FF FF     
   5248 FFFC5A1C FF FF FF FF FF FF FF FF     
   5249 FFFC5A24 FF FF FF FF FF FF FF FF     
   5250 FFFC5A2C FF FF FF FF FF FF FF FF     
   5251 FFFC5A34 FF FF FF FF FF FF FF FF     
   5252 FFFC5A3C FF FF FF FF FF FF FF FF     
   5253 FFFC5A44 FF FF FF FF FF FF FF FF     
   5254 FFFC5A4C FF FF FF FF FF FF FF FF     
   5255 FFFC5A54 FF FF FF FF FF FF FF FF     
   5256 FFFC5A5C FF FF FF FF FF FF FF FF     
   5257 FFFC5A64 FF FF FF FF FF FF FF FF     
   5258 FFFC5A6C FF FF FF FF FF FF FF FF     
   5259 FFFC5A74 FF FF FF FF FF FF FF FF     
   5260 FFFC5A7C FF FF FF FF FF FF FF FF     
   5261 FFFC5A84 FF FF FF FF FF FF FF FF     
   5262 FFFC5A8C FF FF FF FF FF FF FF FF     
   5263 FFFC5A94 FF FF FF FF FF FF FF FF     
   5264 FFFC5A9C FF FF FF FF FF FF FF FF     
   5265 FFFC5AA4 FF FF FF FF FF FF FF FF     
   5266 FFFC5AAC FF FF FF FF FF FF FF FF     
   5267 FFFC5AB4 FF FF FF FF FF FF FF FF     
   5268 FFFC5ABC FF FF FF FF FF FF FF FF     
   5269 FFFC5AC4 FF FF FF FF FF FF FF FF     
   5270 FFFC5ACC FF FF FF FF FF FF FF FF     
   5271 FFFC5AD4 FF FF FF FF FF FF FF FF     
   5272 FFFC5ADC FF FF FF FF FF FF FF FF     
   5273 FFFC5AE4 FF FF FF FF FF FF FF FF     
   5274 FFFC5AEC FF FF FF FF FF FF FF FF     
   5275 FFFC5AF4 FF FF FF FF FF FF FF FF     
   5276 FFFC5AFC FF FF FF FF FF FF FF FF     
   5277 FFFC5B04 FF FF FF FF FF FF FF FF     
   5278 FFFC5B0C FF FF FF FF FF FF FF FF     
   5279 FFFC5B14 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 31
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5280 FFFC5B1C FF FF FF FF FF FF FF FF     
   5281 FFFC5B24 FF FF FF FF FF FF FF FF     
   5282 FFFC5B2C FF FF FF FF FF FF FF FF     
   5283 FFFC5B34 FF FF FF FF FF FF FF FF     
   5284 FFFC5B3C FF FF FF FF FF FF FF FF     
   5285 FFFC5B44 FF FF FF FF FF FF FF FF     
   5286 FFFC5B4C FF FF FF FF FF FF FF FF     
   5287 FFFC5B54 FF FF FF FF FF FF FF FF     
   5288 FFFC5B5C FF FF FF FF FF FF FF FF     
   5289 FFFC5B64 FF FF FF FF FF FF FF FF     
   5290 FFFC5B6C FF FF FF FF FF FF FF FF     
   5291 FFFC5B74 FF FF FF FF FF FF FF FF     
   5292 FFFC5B7C FF FF FF FF FF FF FF FF     
   5293 FFFC5B84 FF FF FF FF FF FF FF FF     
   5294 FFFC5B8C FF FF FF FF FF FF FF FF     
   5295 FFFC5B94 FF FF FF FF FF FF FF FF     
   5296 FFFC5B9C FF FF FF FF FF FF FF FF     
   5297 FFFC5BA4 FF FF FF FF FF FF FF FF     
   5298 FFFC5BAC FF FF FF FF FF FF FF FF     
   5299 FFFC5BB4 FF FF FF FF FF FF FF FF     
   5300 FFFC5BBC FF FF FF FF FF FF FF FF     
   5301 FFFC5BC4 FF FF FF FF FF FF FF FF     
   5302 FFFC5BCC FF FF FF FF FF FF FF FF     
   5303 FFFC5BD4 FF FF FF FF FF FF FF FF     
   5304 FFFC5BDC FF FF FF FF FF FF FF FF     
   5305 FFFC5BE4 FF FF FF FF FF FF FF FF     
   5306 FFFC5BEC FF FF FF FF FF FF FF FF     
   5307 FFFC5BF4 FF FF FF FF FF FF FF FF     
   5308 FFFC5BFC FF FF FF FF FF FF FF FF     
   5309 FFFC5C04 FF FF FF FF FF FF FF FF     
   5310 FFFC5C0C FF FF FF FF FF FF FF FF     
   5311 FFFC5C14 FF FF FF FF FF FF FF FF     
   5312 FFFC5C1C FF FF FF FF FF FF FF FF     
   5313 FFFC5C24 FF FF FF FF FF FF FF FF     
   5314 FFFC5C2C FF FF FF FF FF FF FF FF     
   5315 FFFC5C34 FF FF FF FF FF FF FF FF     
   5316 FFFC5C3C FF FF FF FF FF FF FF FF     
   5317 FFFC5C44 FF FF FF FF FF FF FF FF     
   5318 FFFC5C4C FF FF FF FF FF FF FF FF     
   5319 FFFC5C54 FF FF FF FF FF FF FF FF     
   5320 FFFC5C5C FF FF FF FF FF FF FF FF     
   5321 FFFC5C64 FF FF FF FF FF FF FF FF     
   5322 FFFC5C6C FF FF FF FF FF FF FF FF     
   5323 FFFC5C74 FF FF FF FF FF FF FF FF     
   5324 FFFC5C7C FF FF FF FF FF FF FF FF     
   5325 FFFC5C84 FF FF FF FF FF FF FF FF     
   5326 FFFC5C8C FF FF FF FF FF FF FF FF     
   5327 FFFC5C94 FF FF FF FF FF FF FF FF     
   5328 FFFC5C9C FF FF FF FF FF FF FF FF     
   5329 FFFC5CA4 FF FF FF FF FF FF FF FF     
   5330 FFFC5CAC FF FF FF FF FF FF FF FF     
   5331 FFFC5CB4 FF FF FF FF FF FF FF FF     
   5332 FFFC5CBC FF FF FF FF FF FF FF FF     
   5333 FFFC5CC4 FF FF FF FF FF FF FF FF     
   5334 FFFC5CCC FF FF FF FF FF FF FF FF     
   5335 FFFC5CD4 FF FF FF FF FF FF FF FF     
   5336 FFFC5CDC FF FF FF FF FF FF FF FF     
   5337 FFFC5CE4 FF FF FF FF FF FF FF FF     
   5338 FFFC5CEC FF FF FF FF FF FF FF FF     
   5339 FFFC5CF4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 32
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5340 FFFC5CFC FF FF FF FF FF FF FF FF     
   5341 FFFC5D04 FF FF FF FF FF FF FF FF     
   5342 FFFC5D0C FF FF FF FF FF FF FF FF     
   5343 FFFC5D14 FF FF FF FF FF FF FF FF     
   5344 FFFC5D1C FF FF FF FF FF FF FF FF     
   5345 FFFC5D24 FF FF FF FF FF FF FF FF     
   5346 FFFC5D2C FF FF FF FF FF FF FF FF     
   5347 FFFC5D34 FF FF FF FF FF FF FF FF     
   5348 FFFC5D3C FF FF FF FF FF FF FF FF     
   5349 FFFC5D44 FF FF FF FF FF FF FF FF     
   5350 FFFC5D4C FF FF FF FF FF FF FF FF     
   5351 FFFC5D54 FF FF FF FF FF FF FF FF     
   5352 FFFC5D5C FF FF FF FF FF FF FF FF     
   5353 FFFC5D64 FF FF FF FF FF FF FF FF     
   5354 FFFC5D6C FF FF FF FF FF FF FF FF     
   5355 FFFC5D74 FF FF FF FF FF FF FF FF     
   5356 FFFC5D7C FF FF FF FF FF FF FF FF     
   5357 FFFC5D84 FF FF FF FF FF FF FF FF     
   5358 FFFC5D8C FF FF FF FF FF FF FF FF     
   5359 FFFC5D94 FF FF FF FF FF FF FF FF     
   5360 FFFC5D9C FF FF FF FF FF FF FF FF     
   5361 FFFC5DA4 FF FF FF FF FF FF FF FF     
   5362 FFFC5DAC FF FF FF FF FF FF FF FF     
   5363 FFFC5DB4 FF FF FF FF FF FF FF FF     
   5364 FFFC5DBC FF FF FF FF FF FF FF FF     
   5365 FFFC5DC4 FF FF FF FF FF FF FF FF     
   5366 FFFC5DCC FF FF FF FF FF FF FF FF     
   5367 FFFC5DD4 FF FF FF FF FF FF FF FF     
   5368 FFFC5DDC FF FF FF FF FF FF FF FF     
   5369 FFFC5DE4 FF FF FF FF FF FF FF FF     
   5370 FFFC5DEC FF FF FF FF FF FF FF FF     
   5371 FFFC5DF4 FF FF FF FF FF FF FF FF     
   5372 FFFC5DFC FF FF FF FF FF FF FF FF     
   5373 FFFC5E04 FF FF FF FF FF FF FF FF     
   5374 FFFC5E0C FF FF FF FF FF FF FF FF     
   5375 FFFC5E14 FF FF FF FF FF FF FF FF     
   5376 FFFC5E1C FF FF FF FF FF FF FF FF     
   5377 FFFC5E24 FF FF FF FF FF FF FF FF     
   5378 FFFC5E2C FF FF FF FF FF FF FF FF     
   5379 FFFC5E34 FF FF FF FF FF FF FF FF     
   5380 FFFC5E3C FF FF FF FF FF FF FF FF     
   5381 FFFC5E44 FF FF FF FF FF FF FF FF     
   5382 FFFC5E4C FF FF FF FF FF FF FF FF     
   5383 FFFC5E54 FF FF FF FF FF FF FF FF     
   5384 FFFC5E5C FF FF FF FF FF FF FF FF     
   5385 FFFC5E64 FF FF FF FF FF FF FF FF     
   5386 FFFC5E6C FF FF FF FF FF FF FF FF     
   5387 FFFC5E74 FF FF FF FF FF FF FF FF     
   5388 FFFC5E7C FF FF FF FF FF FF FF FF     
   5389 FFFC5E84 FF FF FF FF FF FF FF FF     
   5390 FFFC5E8C FF FF FF FF FF FF FF FF     
   5391 FFFC5E94 FF FF FF FF FF FF FF FF     
   5392 FFFC5E9C FF FF FF FF FF FF FF FF     
   5393 FFFC5EA4 FF FF FF FF FF FF FF FF     
   5394 FFFC5EAC FF FF FF FF FF FF FF FF     
   5395 FFFC5EB4 FF FF FF FF FF FF FF FF     
   5396 FFFC5EBC FF FF FF FF FF FF FF FF     
   5397 FFFC5EC4 FF FF FF FF FF FF FF FF     
   5398 FFFC5ECC FF FF FF FF FF FF FF FF     
   5399 FFFC5ED4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 33
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5400 FFFC5EDC FF FF FF FF FF FF FF FF     
   5401 FFFC5EE4 FF FF FF FF FF FF FF FF     
   5402 FFFC5EEC FF FF FF FF FF FF FF FF     
   5403 FFFC5EF4 FF FF FF FF FF FF FF FF     
   5404 FFFC5EFC FF FF FF FF FF FF FF FF     
   5405 FFFC5F04 FF FF FF FF FF FF FF FF     
   5406 FFFC5F0C FF FF FF FF FF FF FF FF     
   5407 FFFC5F14 FF FF FF FF FF FF FF FF     
   5408 FFFC5F1C FF FF FF FF FF FF FF FF     
   5409 FFFC5F24 FF FF FF FF FF FF FF FF     
   5410 FFFC5F2C FF FF FF FF FF FF FF FF     
   5411 FFFC5F34 FF FF FF FF FF FF FF FF     
   5412 FFFC5F3C FF FF FF FF FF FF FF FF     
   5413 FFFC5F44 FF FF FF FF FF FF FF FF     
   5414 FFFC5F4C FF FF FF FF FF FF FF FF     
   5415 FFFC5F54 FF FF FF FF FF FF FF FF     
   5416 FFFC5F5C FF FF FF FF FF FF FF FF     
   5417 FFFC5F64 FF FF FF FF FF FF FF FF     
   5418 FFFC5F6C FF FF FF FF FF FF FF FF     
   5419 FFFC5F74 FF FF FF FF FF FF FF FF     
   5420 FFFC5F7C FF FF FF FF FF FF FF FF     
   5421 FFFC5F84 FF FF FF FF FF FF FF FF     
   5422 FFFC5F8C FF FF FF FF FF FF FF FF     
   5423 FFFC5F94 FF FF FF FF FF FF FF FF     
   5424 FFFC5F9C FF FF FF FF FF FF FF FF     
   5425 FFFC5FA4 FF FF FF FF FF FF FF FF     
   5426 FFFC5FAC FF FF FF FF FF FF FF FF     
   5427 FFFC5FB4 FF FF FF FF FF FF FF FF     
   5428 FFFC5FBC FF FF FF FF FF FF FF FF     
   5429 FFFC5FC4 FF FF FF FF FF FF FF FF     
   5430 FFFC5FCC FF FF FF FF FF FF FF FF     
   5431 FFFC5FD4 FF FF FF FF FF FF FF FF     
   5432 FFFC5FDC FF FF FF FF FF FF FF FF     
   5433 FFFC5FE4 FF FF FF FF FF FF FF FF     
   5434 FFFC5FEC FF FF FF FF FF FF FF FF     
   5435 FFFC5FF4 FF FF FF FF FF FF FF FF     
   5436 FFFC5FFC FF FF FF FF FF FF FF FF     
   5437 FFFC6004 FF FF FF FF FF FF FF FF     
   5438 FFFC600C FF FF FF FF FF FF FF FF     
   5439 FFFC6014 FF FF FF FF FF FF FF FF     
   5440 FFFC601C FF FF FF FF FF FF FF FF     
   5441 FFFC6024 FF FF FF FF FF FF FF FF     
   5442 FFFC602C FF FF FF FF FF FF FF FF     
   5443 FFFC6034 FF FF FF FF FF FF FF FF     
   5444 FFFC603C FF FF FF FF FF FF FF FF     
   5445 FFFC6044 FF FF FF FF FF FF FF FF     
   5446 FFFC604C FF FF FF FF FF FF FF FF     
   5447 FFFC6054 FF FF FF FF FF FF FF FF     
   5448 FFFC605C FF FF FF FF FF FF FF FF     
   5449 FFFC6064 FF FF FF FF FF FF FF FF     
   5450 FFFC606C FF FF FF FF FF FF FF FF     
   5451 FFFC6074 FF FF FF FF FF FF FF FF     
   5452 FFFC607C FF FF FF FF FF FF FF FF     
   5453 FFFC6084 FF FF FF FF FF FF FF FF     
   5454 FFFC608C FF FF FF FF FF FF FF FF     
   5455 FFFC6094 FF FF FF FF FF FF FF FF     
   5456 FFFC609C FF FF FF FF FF FF FF FF     
   5457 FFFC60A4 FF FF FF FF FF FF FF FF     
   5458 FFFC60AC FF FF FF FF FF FF FF FF     
   5459 FFFC60B4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 34
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5460 FFFC60BC FF FF FF FF FF FF FF FF     
   5461 FFFC60C4 FF FF FF FF FF FF FF FF     
   5462 FFFC60CC FF FF FF FF FF FF FF FF     
   5463 FFFC60D4 FF FF FF FF FF FF FF FF     
   5464 FFFC60DC FF FF FF FF FF FF FF FF     
   5465 FFFC60E4 FF FF FF FF FF FF FF FF     
   5466 FFFC60EC FF FF FF FF FF FF FF FF     
   5467 FFFC60F4 FF FF FF FF FF FF FF FF     
   5468 FFFC60FC FF FF FF FF FF FF FF FF     
   5469 FFFC6104 FF FF FF FF FF FF FF FF     
   5470 FFFC610C FF FF FF FF FF FF FF FF     
   5471 FFFC6114 FF FF FF FF FF FF FF FF     
   5472 FFFC611C FF FF FF FF FF FF FF FF     
   5473 FFFC6124 FF FF FF FF FF FF FF FF     
   5474 FFFC612C FF FF FF FF FF FF FF FF     
   5475 FFFC6134 FF FF FF FF FF FF FF FF     
   5476 FFFC613C FF FF FF FF FF FF FF FF     
   5477 FFFC6144 FF FF FF FF FF FF FF FF     
   5478 FFFC614C FF FF FF FF FF FF FF FF     
   5479 FFFC6154 FF FF FF FF FF FF FF FF     
   5480 FFFC615C FF FF FF FF FF FF FF FF     
   5481 FFFC6164 FF FF FF FF FF FF FF FF     
   5482 FFFC616C FF FF FF FF FF FF FF FF     
   5483 FFFC6174 FF FF FF FF FF FF FF FF     
   5484 FFFC617C FF FF FF FF FF FF FF FF     
   5485 FFFC6184 FF FF FF FF FF FF FF FF     
   5486 FFFC618C FF FF FF FF FF FF FF FF     
   5487 FFFC6194 FF FF FF FF FF FF FF FF     
   5488 FFFC619C FF FF FF FF FF FF FF FF     
   5489 FFFC61A4 FF FF FF FF FF FF FF FF     
   5490 FFFC61AC FF FF FF FF FF FF FF FF     
   5491 FFFC61B4 FF FF FF FF FF FF FF FF     
   5492 FFFC61BC FF FF FF FF FF FF FF FF     
   5493 FFFC61C4 FF FF FF FF FF FF FF FF     
   5494 FFFC61CC FF FF FF FF FF FF FF FF     
   5495 FFFC61D4 FF FF FF FF FF FF FF FF     
   5496 FFFC61DC FF FF FF FF FF FF FF FF     
   5497 FFFC61E4 FF FF FF FF FF FF FF FF     
   5498 FFFC61EC FF FF FF FF FF FF FF FF     
   5499 FFFC61F4 FF FF FF FF FF FF FF FF     
   5500 FFFC61FC FF FF FF FF FF FF FF FF     
   5501 FFFC6204 FF FF FF FF FF FF FF FF     
   5502 FFFC620C FF FF FF FF FF FF FF FF     
   5503 FFFC6214 FF FF FF FF FF FF FF FF     
   5504 FFFC621C FF FF FF FF FF FF FF FF     
   5505 FFFC6224 FF FF FF FF FF FF FF FF     
   5506 FFFC622C FF FF FF FF FF FF FF FF     
   5507 FFFC6234 FF FF FF FF FF FF FF FF     
   5508 FFFC623C FF FF FF FF FF FF FF FF     
   5509 FFFC6244 FF FF FF FF FF FF FF FF     
   5510 FFFC624C FF FF FF FF FF FF FF FF     
   5511 FFFC6254 FF FF FF FF FF FF FF FF     
   5512 FFFC625C FF FF FF FF FF FF FF FF     
   5513 FFFC6264 FF FF FF FF FF FF FF FF     
   5514 FFFC626C FF FF FF FF FF FF FF FF     
   5515 FFFC6274 FF FF FF FF FF FF FF FF     
   5516 FFFC627C FF FF FF FF FF FF FF FF     
   5517 FFFC6284 FF FF FF FF FF FF FF FF     
   5518 FFFC628C FF FF FF FF FF FF FF FF     
   5519 FFFC6294 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 35
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5520 FFFC629C FF FF FF FF FF FF FF FF     
   5521 FFFC62A4 FF FF FF FF FF FF FF FF     
   5522 FFFC62AC FF FF FF FF FF FF FF FF     
   5523 FFFC62B4 FF FF FF FF FF FF FF FF     
   5524 FFFC62BC FF FF FF FF FF FF FF FF     
   5525 FFFC62C4 FF FF FF FF FF FF FF FF     
   5526 FFFC62CC FF FF FF FF FF FF FF FF     
   5527 FFFC62D4 FF FF FF FF FF FF FF FF     
   5528 FFFC62DC FF FF FF FF FF FF FF FF     
   5529 FFFC62E4 FF FF FF FF FF FF FF FF     
   5530 FFFC62EC FF FF FF FF FF FF FF FF     
   5531 FFFC62F4 FF FF FF FF FF FF FF FF     
   5532 FFFC62FC FF FF FF FF FF FF FF FF     
   5533 FFFC6304 FF FF FF FF FF FF FF FF     
   5534 FFFC630C FF FF FF FF FF FF FF FF     
   5535 FFFC6314 FF FF FF FF FF FF FF FF     
   5536 FFFC631C FF FF FF FF FF FF FF FF     
   5537 FFFC6324 FF FF FF FF FF FF FF FF     
   5538 FFFC632C FF FF FF FF FF FF FF FF     
   5539 FFFC6334 FF FF FF FF FF FF FF FF     
   5540 FFFC633C FF FF FF FF FF FF FF FF     
   5541 FFFC6344 FF FF FF FF FF FF FF FF     
   5542 FFFC634C FF FF FF FF FF FF FF FF     
   5543 FFFC6354 FF FF FF FF FF FF FF FF     
   5544 FFFC635C FF FF FF FF FF FF FF FF     
   5545 FFFC6364 FF FF FF FF FF FF FF FF     
   5546 FFFC636C FF FF FF FF FF FF FF FF     
   5547 FFFC6374 FF FF FF FF FF FF FF FF     
   5548 FFFC637C FF FF FF FF FF FF FF FF     
   5549 FFFC6384 FF FF FF FF FF FF FF FF     
   5550 FFFC638C FF FF FF FF FF FF FF FF     
   5551 FFFC6394 FF FF FF FF FF FF FF FF     
   5552 FFFC639C FF FF FF FF FF FF FF FF     
   5553 FFFC63A4 FF FF FF FF FF FF FF FF     
   5554 FFFC63AC FF FF FF FF FF FF FF FF     
   5555 FFFC63B4 FF FF FF FF FF FF FF FF     
   5556 FFFC63BC FF FF FF FF FF FF FF FF     
   5557 FFFC63C4 FF FF FF FF FF FF FF FF     
   5558 FFFC63CC FF FF FF FF FF FF FF FF     
   5559 FFFC63D4 FF FF FF FF FF FF FF FF     
   5560 FFFC63DC FF FF FF FF FF FF FF FF     
   5561 FFFC63E4 FF FF FF FF FF FF FF FF     
   5562 FFFC63EC FF FF FF FF FF FF FF FF     
   5563 FFFC63F4 FF FF FF FF FF FF FF FF     
   5564 FFFC63FC FF FF FF FF FF FF FF FF     
   5565 FFFC6404 FF FF FF FF FF FF FF FF     
   5566 FFFC640C FF FF FF FF FF FF FF FF     
   5567 FFFC6414 FF FF FF FF FF FF FF FF     
   5568 FFFC641C FF FF FF FF FF FF FF FF     
   5569 FFFC6424 FF FF FF FF FF FF FF FF     
   5570 FFFC642C FF FF FF FF FF FF FF FF     
   5571 FFFC6434 FF FF FF FF FF FF FF FF     
   5572 FFFC643C FF FF FF FF FF FF FF FF     
   5573 FFFC6444 FF FF FF FF FF FF FF FF     
   5574 FFFC644C FF FF FF FF FF FF FF FF     
   5575 FFFC6454 FF FF FF FF FF FF FF FF     
   5576 FFFC645C FF FF FF FF FF FF FF FF     
   5577 FFFC6464 FF FF FF FF FF FF FF FF     
   5578 FFFC646C FF FF FF FF FF FF FF FF     
   5579 FFFC6474 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 36
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5580 FFFC647C FF FF FF FF FF FF FF FF     
   5581 FFFC6484 FF FF FF FF FF FF FF FF     
   5582 FFFC648C FF FF FF FF FF FF FF FF     
   5583 FFFC6494 FF FF FF FF FF FF FF FF     
   5584 FFFC649C FF FF FF FF FF FF FF FF     
   5585 FFFC64A4 FF FF FF FF FF FF FF FF     
   5586 FFFC64AC FF FF FF FF FF FF FF FF     
   5587 FFFC64B4 FF FF FF FF FF FF FF FF     
   5588 FFFC64BC FF FF FF FF FF FF FF FF     
   5589 FFFC64C4 FF FF FF FF FF FF FF FF     
   5590 FFFC64CC FF FF FF FF FF FF FF FF     
   5591 FFFC64D4 FF FF FF FF FF FF FF FF     
   5592 FFFC64DC FF FF FF FF FF FF FF FF     
   5593 FFFC64E4 FF FF FF FF FF FF FF FF     
   5594 FFFC64EC FF FF FF FF FF FF FF FF     
   5595 FFFC64F4 FF FF FF FF FF FF FF FF     
   5596 FFFC64FC FF FF FF FF FF FF FF FF     
   5597 FFFC6504 FF FF FF FF FF FF FF FF     
   5598 FFFC650C FF FF FF FF FF FF FF FF     
   5599 FFFC6514 FF FF FF FF FF FF FF FF     
   5600 FFFC651C FF FF FF FF FF FF FF FF     
   5601 FFFC6524 FF FF FF FF FF FF FF FF     
   5602 FFFC652C FF FF FF FF FF FF FF FF     
   5603 FFFC6534 FF FF FF FF FF FF FF FF     
   5604 FFFC653C FF FF FF FF FF FF FF FF     
   5605 FFFC6544 FF FF FF FF FF FF FF FF     
   5606 FFFC654C FF FF FF FF FF FF FF FF     
   5607 FFFC6554 FF FF FF FF FF FF FF FF     
   5608 FFFC655C FF FF FF FF FF FF FF FF     
   5609 FFFC6564 FF FF FF FF FF FF FF FF     
   5610 FFFC656C FF FF FF FF FF FF FF FF     
   5611 FFFC6574 FF FF FF FF FF FF FF FF     
   5612 FFFC657C FF FF FF FF FF FF FF FF     
   5613 FFFC6584 FF FF FF FF FF FF FF FF     
   5614 FFFC658C FF FF FF FF FF FF FF FF     
   5615 FFFC6594 FF FF FF FF FF FF FF FF     
   5616 FFFC659C FF FF FF FF FF FF FF FF     
   5617 FFFC65A4 FF FF FF FF FF FF FF FF     
   5618 FFFC65AC FF FF FF FF FF FF FF FF     
   5619 FFFC65B4 FF FF FF FF FF FF FF FF     
   5620 FFFC65BC FF FF FF FF FF FF FF FF     
   5621 FFFC65C4 FF FF FF FF FF FF FF FF     
   5622 FFFC65CC FF FF FF FF FF FF FF FF     
   5623 FFFC65D4 FF FF FF FF FF FF FF FF     
   5624 FFFC65DC FF FF FF FF FF FF FF FF     
   5625 FFFC65E4 FF FF FF FF FF FF FF FF     
   5626 FFFC65EC FF FF FF FF FF FF FF FF     
   5627 FFFC65F4 FF FF FF FF FF FF FF FF     
   5628 FFFC65FC FF FF FF FF FF FF FF FF     
   5629 FFFC6604 FF FF FF FF FF FF FF FF     
   5630 FFFC660C FF FF FF FF FF FF FF FF     
   5631 FFFC6614 FF FF FF FF FF FF FF FF     
   5632 FFFC661C FF FF FF FF FF FF FF FF     
   5633 FFFC6624 FF FF FF FF FF FF FF FF     
   5634 FFFC662C FF FF FF FF FF FF FF FF     
   5635 FFFC6634 FF FF FF FF FF FF FF FF     
   5636 FFFC663C FF FF FF FF FF FF FF FF     
   5637 FFFC6644 FF FF FF FF FF FF FF FF     
   5638 FFFC664C FF FF FF FF FF FF FF FF     
   5639 FFFC6654 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 37
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5640 FFFC665C FF FF FF FF FF FF FF FF     
   5641 FFFC6664 FF FF FF FF FF FF FF FF     
   5642 FFFC666C FF FF FF FF FF FF FF FF     
   5643 FFFC6674 FF FF FF FF FF FF FF FF     
   5644 FFFC667C FF FF FF FF FF FF FF FF     
   5645 FFFC6684 FF FF FF FF FF FF FF FF     
   5646 FFFC668C FF FF FF FF FF FF FF FF     
   5647 FFFC6694 FF FF FF FF FF FF FF FF     
   5648 FFFC669C FF FF FF FF FF FF FF FF     
   5649 FFFC66A4 FF FF FF FF FF FF FF FF     
   5650 FFFC66AC FF FF FF FF FF FF FF FF     
   5651 FFFC66B4 FF FF FF FF FF FF FF FF     
   5652 FFFC66BC FF FF FF FF FF FF FF FF     
   5653 FFFC66C4 FF FF FF FF FF FF FF FF     
   5654 FFFC66CC FF FF FF FF FF FF FF FF     
   5655 FFFC66D4 FF FF FF FF FF FF FF FF     
   5656 FFFC66DC FF FF FF FF FF FF FF FF     
   5657 FFFC66E4 FF FF FF FF FF FF FF FF     
   5658 FFFC66EC FF FF FF FF FF FF FF FF     
   5659 FFFC66F4 FF FF FF FF FF FF FF FF     
   5660 FFFC66FC FF FF FF FF FF FF FF FF     
   5661 FFFC6704 FF FF FF FF FF FF FF FF     
   5662 FFFC670C FF FF FF FF FF FF FF FF     
   5663 FFFC6714 FF FF FF FF FF FF FF FF     
   5664 FFFC671C FF FF FF FF FF FF FF FF     
   5665 FFFC6724 FF FF FF FF FF FF FF FF     
   5666 FFFC672C FF FF FF FF FF FF FF FF     
   5667 FFFC6734 FF FF FF FF FF FF FF FF     
   5668 FFFC673C FF FF FF FF FF FF FF FF     
   5669 FFFC6744 FF FF FF FF FF FF FF FF     
   5670 FFFC674C FF FF FF FF FF FF FF FF     
   5671 FFFC6754 FF FF FF FF FF FF FF FF     
   5672 FFFC675C FF FF FF FF FF FF FF FF     
   5673 FFFC6764 FF FF FF FF FF FF FF FF     
   5674 FFFC676C FF FF FF FF FF FF FF FF     
   5675 FFFC6774 FF FF FF FF FF FF FF FF     
   5676 FFFC677C FF FF FF FF FF FF FF FF     
   5677 FFFC6784 FF FF FF FF FF FF FF FF     
   5678 FFFC678C FF FF FF FF FF FF FF FF     
   5679 FFFC6794 FF FF FF FF FF FF FF FF     
   5680 FFFC679C FF FF FF FF FF FF FF FF     
   5681 FFFC67A4 FF FF FF FF FF FF FF FF     
   5682 FFFC67AC FF FF FF FF FF FF FF FF     
   5683 FFFC67B4 FF FF FF FF FF FF FF FF     
   5684 FFFC67BC FF FF FF FF FF FF FF FF     
   5685 FFFC67C4 FF FF FF FF FF FF FF FF     
   5686 FFFC67CC FF FF FF FF FF FF FF FF     
   5687 FFFC67D4 FF FF FF FF FF FF FF FF     
   5688 FFFC67DC FF FF FF FF FF FF FF FF     
   5689 FFFC67E4 FF FF FF FF FF FF FF FF     
   5690 FFFC67EC FF FF FF FF FF FF FF FF     
   5691 FFFC67F4 FF FF FF FF FF FF FF FF     
   5692 FFFC67FC FF FF FF FF FF FF FF FF     
   5693 FFFC6804 FF FF FF FF FF FF FF FF     
   5694 FFFC680C FF FF FF FF FF FF FF FF     
   5695 FFFC6814 FF FF FF FF FF FF FF FF     
   5696 FFFC681C FF FF FF FF FF FF FF FF     
   5697 FFFC6824 FF FF FF FF FF FF FF FF     
   5698 FFFC682C FF FF FF FF FF FF FF FF     
   5699 FFFC6834 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 38
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5700 FFFC683C FF FF FF FF FF FF FF FF     
   5701 FFFC6844 FF FF FF FF FF FF FF FF     
   5702 FFFC684C FF FF FF FF FF FF FF FF     
   5703 FFFC6854 FF FF FF FF FF FF FF FF     
   5704 FFFC685C FF FF FF FF FF FF FF FF     
   5705 FFFC6864 FF FF FF FF FF FF FF FF     
   5706 FFFC686C FF FF FF FF FF FF FF FF     
   5707 FFFC6874 FF FF FF FF FF FF FF FF     
   5708 FFFC687C FF FF FF FF FF FF FF FF     
   5709 FFFC6884 FF FF FF FF FF FF FF FF     
   5710 FFFC688C FF FF FF FF FF FF FF FF     
   5711 FFFC6894 FF FF FF FF FF FF FF FF     
   5712 FFFC689C FF FF FF FF FF FF FF FF     
   5713 FFFC68A4 FF FF FF FF FF FF FF FF     
   5714 FFFC68AC FF FF FF FF FF FF FF FF     
   5715 FFFC68B4 FF FF FF FF FF FF FF FF     
   5716 FFFC68BC FF FF FF FF FF FF FF FF     
   5717 FFFC68C4 FF FF FF FF FF FF FF FF     
   5718 FFFC68CC FF FF FF FF FF FF FF FF     
   5719 FFFC68D4 FF FF FF FF FF FF FF FF     
   5720 FFFC68DC FF FF FF FF FF FF FF FF     
   5721 FFFC68E4 FF FF FF FF FF FF FF FF     
   5722 FFFC68EC FF FF FF FF FF FF FF FF     
   5723 FFFC68F4 FF FF FF FF FF FF FF FF     
   5724 FFFC68FC FF FF FF FF FF FF FF FF     
   5725 FFFC6904 FF FF FF FF FF FF FF FF     
   5726 FFFC690C FF FF FF FF FF FF FF FF     
   5727 FFFC6914 FF FF FF FF FF FF FF FF     
   5728 FFFC691C FF FF FF FF FF FF FF FF     
   5729 FFFC6924 FF FF FF FF FF FF FF FF     
   5730 FFFC692C FF FF FF FF FF FF FF FF     
   5731 FFFC6934 FF FF FF FF FF FF FF FF     
   5732 FFFC693C FF FF FF FF FF FF FF FF     
   5733 FFFC6944 FF FF FF FF FF FF FF FF     
   5734 FFFC694C FF FF FF FF FF FF FF FF     
   5735 FFFC6954 FF FF FF FF FF FF FF FF     
   5736 FFFC695C FF FF FF FF FF FF FF FF     
   5737 FFFC6964 FF FF FF FF FF FF FF FF     
   5738 FFFC696C FF FF FF FF FF FF FF FF     
   5739 FFFC6974 FF FF FF FF FF FF FF FF     
   5740 FFFC697C FF FF FF FF FF FF FF FF     
   5741 FFFC6984 FF FF FF FF FF FF FF FF     
   5742 FFFC698C FF FF FF FF FF FF FF FF     
   5743 FFFC6994 FF FF FF FF FF FF FF FF     
   5744 FFFC699C FF FF FF FF FF FF FF FF     
   5745 FFFC69A4 FF FF FF FF FF FF FF FF     
   5746 FFFC69AC FF FF FF FF FF FF FF FF     
   5747 FFFC69B4 FF FF FF FF FF FF FF FF     
   5748 FFFC69BC FF FF FF FF FF FF FF FF     
   5749 FFFC69C4 FF FF FF FF FF FF FF FF     
   5750 FFFC69CC FF FF FF FF FF FF FF FF     
   5751 FFFC69D4 FF FF FF FF FF FF FF FF     
   5752 FFFC69DC FF FF FF FF FF FF FF FF     
   5753 FFFC69E4 FF FF FF FF FF FF FF FF     
   5754 FFFC69EC FF FF FF FF FF FF FF FF     
   5755 FFFC69F4 FF FF FF FF FF FF FF FF     
   5756 FFFC69FC FF FF FF FF FF FF FF FF     
   5757 FFFC6A04 FF FF FF FF FF FF FF FF     
   5758 FFFC6A0C FF FF FF FF FF FF FF FF     
   5759 FFFC6A14 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 39
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5760 FFFC6A1C FF FF FF FF FF FF FF FF     
   5761 FFFC6A24 FF FF FF FF FF FF FF FF     
   5762 FFFC6A2C FF FF FF FF FF FF FF FF     
   5763 FFFC6A34 FF FF FF FF FF FF FF FF     
   5764 FFFC6A3C FF FF FF FF FF FF FF FF     
   5765 FFFC6A44 FF FF FF FF FF FF FF FF     
   5766 FFFC6A4C FF FF FF FF FF FF FF FF     
   5767 FFFC6A54 FF FF FF FF FF FF FF FF     
   5768 FFFC6A5C FF FF FF FF FF FF FF FF     
   5769 FFFC6A64 FF FF FF FF FF FF FF FF     
   5770 FFFC6A6C FF FF FF FF FF FF FF FF     
   5771 FFFC6A74 FF FF FF FF FF FF FF FF     
   5772 FFFC6A7C FF FF FF FF FF FF FF FF     
   5773 FFFC6A84 FF FF FF FF FF FF FF FF     
   5774 FFFC6A8C FF FF FF FF FF FF FF FF     
   5775 FFFC6A94 FF FF FF FF FF FF FF FF     
   5776 FFFC6A9C FF FF FF FF FF FF FF FF     
   5777 FFFC6AA4 FF FF FF FF FF FF FF FF     
   5778 FFFC6AAC FF FF FF FF FF FF FF FF     
   5779 FFFC6AB4 FF FF FF FF FF FF FF FF     
   5780 FFFC6ABC FF FF FF FF FF FF FF FF     
   5781 FFFC6AC4 FF FF FF FF FF FF FF FF     
   5782 FFFC6ACC FF FF FF FF FF FF FF FF     
   5783 FFFC6AD4 FF FF FF FF FF FF FF FF     
   5784 FFFC6ADC FF FF FF FF FF FF FF FF     
   5785 FFFC6AE4 FF FF FF FF FF FF FF FF     
   5786 FFFC6AEC FF FF FF FF FF FF FF FF     
   5787 FFFC6AF4 FF FF FF FF FF FF FF FF     
   5788 FFFC6AFC FF FF FF FF FF FF FF FF     
   5789 FFFC6B04 FF FF FF FF FF FF FF FF     
   5790 FFFC6B0C FF FF FF FF FF FF FF FF     
   5791 FFFC6B14 FF FF FF FF FF FF FF FF     
   5792 FFFC6B1C FF FF FF FF FF FF FF FF     
   5793 FFFC6B24 FF FF FF FF FF FF FF FF     
   5794 FFFC6B2C FF FF FF FF FF FF FF FF     
   5795 FFFC6B34 FF FF FF FF FF FF FF FF     
   5796 FFFC6B3C FF FF FF FF FF FF FF FF     
   5797 FFFC6B44 FF FF FF FF FF FF FF FF     
   5798 FFFC6B4C FF FF FF FF FF FF FF FF     
   5799 FFFC6B54 FF FF FF FF FF FF FF FF     
   5800 FFFC6B5C FF FF FF FF FF FF FF FF     
   5801 FFFC6B64 FF FF FF FF FF FF FF FF     
   5802 FFFC6B6C FF FF FF FF FF FF FF FF     
   5803 FFFC6B74 FF FF FF FF FF FF FF FF     
   5804 FFFC6B7C FF FF FF FF FF FF FF FF     
   5805 FFFC6B84 FF FF FF FF FF FF FF FF     
   5806 FFFC6B8C FF FF FF FF FF FF FF FF     
   5807 FFFC6B94 FF FF FF FF FF FF FF FF     
   5808 FFFC6B9C FF FF FF FF FF FF FF FF     
   5809 FFFC6BA4 FF FF FF FF FF FF FF FF     
   5810 FFFC6BAC FF FF FF FF FF FF FF FF     
   5811 FFFC6BB4 FF FF FF FF FF FF FF FF     
   5812 FFFC6BBC FF FF FF FF FF FF FF FF     
   5813 FFFC6BC4 FF FF FF FF FF FF FF FF     
   5814 FFFC6BCC FF FF FF FF FF FF FF FF     
   5815 FFFC6BD4 FF FF FF FF FF FF FF FF     
   5816 FFFC6BDC FF FF FF FF FF FF FF FF     
   5817 FFFC6BE4 FF FF FF FF FF FF FF FF     
   5818 FFFC6BEC FF FF FF FF FF FF FF FF     
   5819 FFFC6BF4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 40
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5820 FFFC6BFC FF FF FF FF FF FF FF FF     
   5821 FFFC6C04 FF FF FF FF FF FF FF FF     
   5822 FFFC6C0C FF FF FF FF FF FF FF FF     
   5823 FFFC6C14 FF FF FF FF FF FF FF FF     
   5824 FFFC6C1C FF FF FF FF FF FF FF FF     
   5825 FFFC6C24 FF FF FF FF FF FF FF FF     
   5826 FFFC6C2C FF FF FF FF FF FF FF FF     
   5827 FFFC6C34 FF FF FF FF FF FF FF FF     
   5828 FFFC6C3C FF FF FF FF FF FF FF FF     
   5829 FFFC6C44 FF FF FF FF FF FF FF FF     
   5830 FFFC6C4C FF FF FF FF FF FF FF FF     
   5831 FFFC6C54 FF FF FF FF FF FF FF FF     
   5832 FFFC6C5C FF FF FF FF FF FF FF FF     
   5833 FFFC6C64 FF FF FF FF FF FF FF FF     
   5834 FFFC6C6C FF FF FF FF FF FF FF FF     
   5835 FFFC6C74 FF FF FF FF FF FF FF FF     
   5836 FFFC6C7C FF FF FF FF FF FF FF FF     
   5837 FFFC6C84 FF FF FF FF FF FF FF FF     
   5838 FFFC6C8C FF FF FF FF FF FF FF FF     
   5839 FFFC6C94 FF FF FF FF FF FF FF FF     
   5840 FFFC6C9C FF FF FF FF FF FF FF FF     
   5841 FFFC6CA4 FF FF FF FF FF FF FF FF     
   5842 FFFC6CAC FF FF FF FF FF FF FF FF     
   5843 FFFC6CB4 FF FF FF FF FF FF FF FF     
   5844 FFFC6CBC FF FF FF FF FF FF FF FF     
   5845 FFFC6CC4 FF FF FF FF FF FF FF FF     
   5846 FFFC6CCC FF FF FF FF FF FF FF FF     
   5847 FFFC6CD4 FF FF FF FF FF FF FF FF     
   5848 FFFC6CDC FF FF FF FF FF FF FF FF     
   5849 FFFC6CE4 FF FF FF FF FF FF FF FF     
   5850 FFFC6CEC FF FF FF FF FF FF FF FF     
   5851 FFFC6CF4 FF FF FF FF FF FF FF FF     
   5852 FFFC6CFC FF FF FF FF FF FF FF FF     
   5853 FFFC6D04 FF FF FF FF FF FF FF FF     
   5854 FFFC6D0C FF FF FF FF FF FF FF FF     
   5855 FFFC6D14 FF FF FF FF FF FF FF FF     
   5856 FFFC6D1C FF FF FF FF FF FF FF FF     
   5857 FFFC6D24 FF FF FF FF FF FF FF FF     
   5858 FFFC6D2C FF FF FF FF FF FF FF FF     
   5859 FFFC6D34 FF FF FF FF FF FF FF FF     
   5860 FFFC6D3C FF FF FF FF FF FF FF FF     
   5861 FFFC6D44 FF FF FF FF FF FF FF FF     
   5862 FFFC6D4C FF FF FF FF FF FF FF FF     
   5863 FFFC6D54 FF FF FF FF FF FF FF FF     
   5864 FFFC6D5C FF FF FF FF FF FF FF FF     
   5865 FFFC6D64 FF FF FF FF FF FF FF FF     
   5866 FFFC6D6C FF FF FF FF FF FF FF FF     
   5867 FFFC6D74 FF FF FF FF FF FF FF FF     
   5868 FFFC6D7C FF FF FF FF FF FF FF FF     
   5869 FFFC6D84 FF FF FF FF FF FF FF FF     
   5870 FFFC6D8C FF FF FF FF FF FF FF FF     
   5871 FFFC6D94 FF FF FF FF FF FF FF FF     
   5872 FFFC6D9C FF FF FF FF FF FF FF FF     
   5873 FFFC6DA4 FF FF FF FF FF FF FF FF     
   5874 FFFC6DAC FF FF FF FF FF FF FF FF     
   5875 FFFC6DB4 FF FF FF FF FF FF FF FF     
   5876 FFFC6DBC FF FF FF FF FF FF FF FF     
   5877 FFFC6DC4 FF FF FF FF FF FF FF FF     
   5878 FFFC6DCC FF FF FF FF FF FF FF FF     
   5879 FFFC6DD4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 41
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5880 FFFC6DDC FF FF FF FF FF FF FF FF     
   5881 FFFC6DE4 FF FF FF FF FF FF FF FF     
   5882 FFFC6DEC FF FF FF FF FF FF FF FF     
   5883 FFFC6DF4 FF FF FF FF FF FF FF FF     
   5884 FFFC6DFC FF FF FF FF FF FF FF FF     
   5885 FFFC6E04 FF FF FF FF FF FF FF FF     
   5886 FFFC6E0C FF FF FF FF FF FF FF FF     
   5887 FFFC6E14 FF FF FF FF FF FF FF FF     
   5888 FFFC6E1C FF FF FF FF FF FF FF FF     
   5889 FFFC6E24 FF FF FF FF FF FF FF FF     
   5890 FFFC6E2C FF FF FF FF FF FF FF FF     
   5891 FFFC6E34 FF FF FF FF FF FF FF FF     
   5892 FFFC6E3C FF FF FF FF FF FF FF FF     
   5893 FFFC6E44 FF FF FF FF FF FF FF FF     
   5894 FFFC6E4C FF FF FF FF FF FF FF FF     
   5895 FFFC6E54 FF FF FF FF FF FF FF FF     
   5896 FFFC6E5C FF FF FF FF FF FF FF FF     
   5897 FFFC6E64 FF FF FF FF FF FF FF FF     
   5898 FFFC6E6C FF FF FF FF FF FF FF FF     
   5899 FFFC6E74 FF FF FF FF FF FF FF FF     
   5900 FFFC6E7C FF FF FF FF FF FF FF FF     
   5901 FFFC6E84 FF FF FF FF FF FF FF FF     
   5902 FFFC6E8C FF FF FF FF FF FF FF FF     
   5903 FFFC6E94 FF FF FF FF FF FF FF FF     
   5904 FFFC6E9C FF FF FF FF FF FF FF FF     
   5905 FFFC6EA4 FF FF FF FF FF FF FF FF     
   5906 FFFC6EAC FF FF FF FF FF FF FF FF     
   5907 FFFC6EB4 FF FF FF FF FF FF FF FF     
   5908 FFFC6EBC FF FF FF FF FF FF FF FF     
   5909 FFFC6EC4 FF FF FF FF FF FF FF FF     
   5910 FFFC6ECC FF FF FF FF FF FF FF FF     
   5911 FFFC6ED4 FF FF FF FF FF FF FF FF     
   5912 FFFC6EDC FF FF FF FF FF FF FF FF     
   5913 FFFC6EE4 FF FF FF FF FF FF FF FF     
   5914 FFFC6EEC FF FF FF FF FF FF FF FF     
   5915 FFFC6EF4 FF FF FF FF FF FF FF FF     
   5916 FFFC6EFC FF FF FF FF FF FF FF FF     
   5917 FFFC6F04 FF FF FF FF FF FF FF FF     
   5918 FFFC6F0C FF FF FF FF FF FF FF FF     
   5919 FFFC6F14 FF FF FF FF FF FF FF FF     
   5920 FFFC6F1C FF FF FF FF FF FF FF FF     
   5921 FFFC6F24 FF FF FF FF FF FF FF FF     
   5922 FFFC6F2C FF FF FF FF FF FF FF FF     
   5923 FFFC6F34 FF FF FF FF FF FF FF FF     
   5924 FFFC6F3C FF FF FF FF FF FF FF FF     
   5925 FFFC6F44 FF FF FF FF FF FF FF FF     
   5926 FFFC6F4C FF FF FF FF FF FF FF FF     
   5927 FFFC6F54 FF FF FF FF FF FF FF FF     
   5928 FFFC6F5C FF FF FF FF FF FF FF FF     
   5929 FFFC6F64 FF FF FF FF FF FF FF FF     
   5930 FFFC6F6C FF FF FF FF FF FF FF FF     
   5931 FFFC6F74 FF FF FF FF FF FF FF FF     
   5932 FFFC6F7C FF FF FF FF FF FF FF FF     
   5933 FFFC6F84 FF FF FF FF FF FF FF FF     
   5934 FFFC6F8C FF FF FF FF FF FF FF FF     
   5935 FFFC6F94 FF FF FF FF FF FF FF FF     
   5936 FFFC6F9C FF FF FF FF FF FF FF FF     
   5937 FFFC6FA4 FF FF FF FF FF FF FF FF     
   5938 FFFC6FAC FF FF FF FF FF FF FF FF     
   5939 FFFC6FB4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 42
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5940 FFFC6FBC FF FF FF FF FF FF FF FF     
   5941 FFFC6FC4 FF FF FF FF FF FF FF FF     
   5942 FFFC6FCC FF FF FF FF FF FF FF FF     
   5943 FFFC6FD4 FF FF FF FF FF FF FF FF     
   5944 FFFC6FDC FF FF FF FF FF FF FF FF     
   5945 FFFC6FE4 FF FF FF FF FF FF FF FF     
   5946 FFFC6FEC FF FF FF FF FF FF FF FF     
   5947 FFFC6FF4 FF FF FF FF FF FF FF FF     
   5948 FFFC6FFC FF FF FF FF FF FF FF FF     
   5949 FFFC7004 FF FF FF FF FF FF FF FF     
   5950 FFFC700C FF FF FF FF FF FF FF FF     
   5951 FFFC7014 FF FF FF FF FF FF FF FF     
   5952 FFFC701C FF FF FF FF FF FF FF FF     
   5953 FFFC7024 FF FF FF FF FF FF FF FF     
   5954 FFFC702C FF FF FF FF FF FF FF FF     
   5955 FFFC7034 FF FF FF FF FF FF FF FF     
   5956 FFFC703C FF FF FF FF FF FF FF FF     
   5957 FFFC7044 FF FF FF FF FF FF FF FF     
   5958 FFFC704C FF FF FF FF FF FF FF FF     
   5959 FFFC7054 FF FF FF FF FF FF FF FF     
   5960 FFFC705C FF FF FF FF FF FF FF FF     
   5961 FFFC7064 FF FF FF FF FF FF FF FF     
   5962 FFFC706C FF FF FF FF FF FF FF FF     
   5963 FFFC7074 FF FF FF FF FF FF FF FF     
   5964 FFFC707C FF FF FF FF FF FF FF FF     
   5965 FFFC7084 FF FF FF FF FF FF FF FF     
   5966 FFFC708C FF FF FF FF FF FF FF FF     
   5967 FFFC7094 FF FF FF FF FF FF FF FF     
   5968 FFFC709C FF FF FF FF FF FF FF FF     
   5969 FFFC70A4 FF FF FF FF FF FF FF FF     
   5970 FFFC70AC FF FF FF FF FF FF FF FF     
   5971 FFFC70B4 FF FF FF FF FF FF FF FF     
   5972 FFFC70BC FF FF FF FF FF FF FF FF     
   5973 FFFC70C4 FF FF FF FF FF FF FF FF     
   5974 FFFC70CC FF FF FF FF FF FF FF FF     
   5975 FFFC70D4 FF FF FF FF FF FF FF FF     
   5976 FFFC70DC FF FF FF FF FF FF FF FF     
   5977 FFFC70E4 FF FF FF FF FF FF FF FF     
   5978 FFFC70EC FF FF FF FF FF FF FF FF     
   5979 FFFC70F4 FF FF FF FF FF FF FF FF     
   5980 FFFC70FC FF FF FF FF FF FF FF FF     
   5981 FFFC7104 FF FF FF FF FF FF FF FF     
   5982 FFFC710C FF FF FF FF FF FF FF FF     
   5983 FFFC7114 FF FF FF FF FF FF FF FF     
   5984 FFFC711C FF FF FF FF FF FF FF FF     
   5985 FFFC7124 FF FF FF FF FF FF FF FF     
   5986 FFFC712C FF FF FF FF FF FF FF FF     
   5987 FFFC7134 FF FF FF FF FF FF FF FF     
   5988 FFFC713C FF FF FF FF FF FF FF FF     
   5989 FFFC7144 FF FF FF FF FF FF FF FF     
   5990 FFFC714C FF FF FF FF FF FF FF FF     
   5991 FFFC7154 FF FF FF FF FF FF FF FF     
   5992 FFFC715C FF FF FF FF FF FF FF FF     
   5993 FFFC7164 FF FF FF FF FF FF FF FF     
   5994 FFFC716C FF FF FF FF FF FF FF FF     
   5995 FFFC7174 FF FF FF FF FF FF FF FF     
   5996 FFFC717C FF FF FF FF FF FF FF FF     
   5997 FFFC7184 FF FF FF FF FF FF FF FF     
   5998 FFFC718C FF FF FF FF FF FF FF FF     
   5999 FFFC7194 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 43
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6000 FFFC719C FF FF FF FF FF FF FF FF     
   6001 FFFC71A4 FF FF FF FF FF FF FF FF     
   6002 FFFC71AC FF FF FF FF FF FF FF FF     
   6003 FFFC71B4 FF FF FF FF FF FF FF FF     
   6004 FFFC71BC FF FF FF FF FF FF FF FF     
   6005 FFFC71C4 FF FF FF FF FF FF FF FF     
   6006 FFFC71CC FF FF FF FF FF FF FF FF     
   6007 FFFC71D4 FF FF FF FF FF FF FF FF     
   6008 FFFC71DC FF FF FF FF FF FF FF FF     
   6009 FFFC71E4 FF FF FF FF FF FF FF FF     
   6010 FFFC71EC FF FF FF FF FF FF FF FF     
   6011 FFFC71F4 FF FF FF FF FF FF FF FF     
   6012 FFFC71FC FF FF FF FF FF FF FF FF     
   6013 FFFC7204 FF FF FF FF FF FF FF FF     
   6014 FFFC720C FF FF FF FF FF FF FF FF     
   6015 FFFC7214 FF FF FF FF FF FF FF FF     
   6016 FFFC721C FF FF FF FF FF FF FF FF     
   6017 FFFC7224 FF FF FF FF FF FF FF FF     
   6018 FFFC722C FF FF FF FF FF FF FF FF     
   6019 FFFC7234 FF FF FF FF FF FF FF FF     
   6020 FFFC723C FF FF FF FF FF FF FF FF     
   6021 FFFC7244 FF FF FF FF FF FF FF FF     
   6022 FFFC724C FF FF FF FF FF FF FF FF     
   6023 FFFC7254 FF FF FF FF FF FF FF FF     
   6024 FFFC725C FF FF FF FF FF FF FF FF     
   6025 FFFC7264 FF FF FF FF FF FF FF FF     
   6026 FFFC726C FF FF FF FF FF FF FF FF     
   6027 FFFC7274 FF FF FF FF FF FF FF FF     
   6028 FFFC727C FF FF FF FF FF FF FF FF     
   6029 FFFC7284 FF FF FF FF FF FF FF FF     
   6030 FFFC728C FF FF FF FF FF FF FF FF     
   6031 FFFC7294 FF FF FF FF FF FF FF FF     
   6032 FFFC729C FF FF FF FF FF FF FF FF     
   6033 FFFC72A4 FF FF FF FF FF FF FF FF     
   6034 FFFC72AC FF FF FF FF FF FF FF FF     
   6035 FFFC72B4 FF FF FF FF FF FF FF FF     
   6036 FFFC72BC FF FF FF FF FF FF FF FF     
   6037 FFFC72C4 FF FF FF FF FF FF FF FF     
   6038 FFFC72CC FF FF FF FF FF FF FF FF     
   6039 FFFC72D4 FF FF FF FF FF FF FF FF     
   6040 FFFC72DC FF FF FF FF FF FF FF FF     
   6041 FFFC72E4 FF FF FF FF FF FF FF FF     
   6042 FFFC72EC FF FF FF FF FF FF FF FF     
   6043 FFFC72F4 FF FF FF FF FF FF FF FF     
   6044 FFFC72FC FF FF FF FF FF FF FF FF     
   6045 FFFC7304 FF FF FF FF FF FF FF FF     
   6046 FFFC730C FF FF FF FF FF FF FF FF     
   6047 FFFC7314 FF FF FF FF FF FF FF FF     
   6048 FFFC731C FF FF FF FF FF FF FF FF     
   6049 FFFC7324 FF FF FF FF FF FF FF FF     
   6050 FFFC732C FF FF FF FF FF FF FF FF     
   6051 FFFC7334 FF FF FF FF FF FF FF FF     
   6052 FFFC733C FF FF FF FF FF FF FF FF     
   6053 FFFC7344 FF FF FF FF FF FF FF FF     
   6054 FFFC734C FF FF FF FF FF FF FF FF     
   6055 FFFC7354 FF FF FF FF FF FF FF FF     
   6056 FFFC735C FF FF FF FF FF FF FF FF     
   6057 FFFC7364 FF FF FF FF FF FF FF FF     
   6058 FFFC736C FF FF FF FF FF FF FF FF     
   6059 FFFC7374 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 44
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6060 FFFC737C FF FF FF FF FF FF FF FF     
   6061 FFFC7384 FF FF FF FF FF FF FF FF     
   6062 FFFC738C FF FF FF FF FF FF FF FF     
   6063 FFFC7394 FF FF FF FF FF FF FF FF     
   6064 FFFC739C FF FF FF FF FF FF FF FF     
   6065 FFFC73A4 FF FF FF FF FF FF FF FF     
   6066 FFFC73AC FF FF FF FF FF FF FF FF     
   6067 FFFC73B4 FF FF FF FF FF FF FF FF     
   6068 FFFC73BC FF FF FF FF FF FF FF FF     
   6069 FFFC73C4 FF FF FF FF FF FF FF FF     
   6070 FFFC73CC FF FF FF FF FF FF FF FF     
   6071 FFFC73D4 FF FF FF FF FF FF FF FF     
   6072 FFFC73DC FF FF FF FF FF FF FF FF     
   6073 FFFC73E4 FF FF FF FF FF FF FF FF     
   6074 FFFC73EC FF FF FF FF FF FF FF FF     
   6075 FFFC73F4 FF FF FF FF FF FF FF FF     
   6076 FFFC73FC FF FF FF FF FF FF FF FF     
   6077 FFFC7404 FF FF FF FF FF FF FF FF     
   6078 FFFC740C FF FF FF FF FF FF FF FF     
   6079 FFFC7414 FF FF FF FF FF FF FF FF     
   6080 FFFC741C FF FF FF FF FF FF FF FF     
   6081 FFFC7424 FF FF FF FF FF FF FF FF     
   6082 FFFC742C FF FF FF FF FF FF FF FF     
   6083 FFFC7434 FF FF FF FF FF FF FF FF     
   6084 FFFC743C FF FF FF FF FF FF FF FF     
   6085 FFFC7444 FF FF FF FF FF FF FF FF     
   6086 FFFC744C FF FF FF FF FF FF FF FF     
   6087 FFFC7454 FF FF FF FF FF FF FF FF     
   6088 FFFC745C FF FF FF FF FF FF FF FF     
   6089 FFFC7464 FF FF FF FF FF FF FF FF     
   6090 FFFC746C FF FF FF FF FF FF FF FF     
   6091 FFFC7474 FF FF FF FF FF FF FF FF     
   6092 FFFC747C FF FF FF FF FF FF FF FF     
   6093 FFFC7484 FF FF FF FF FF FF FF FF     
   6094 FFFC748C FF FF FF FF FF FF FF FF     
   6095 FFFC7494 FF FF FF FF FF FF FF FF     
   6096 FFFC749C FF FF FF FF FF FF FF FF     
   6097 FFFC74A4 FF FF FF FF FF FF FF FF     
   6098 FFFC74AC FF FF FF FF FF FF FF FF     
   6099 FFFC74B4 FF FF FF FF FF FF FF FF     
   6100 FFFC74BC FF FF FF FF FF FF FF FF     
   6101 FFFC74C4 FF FF FF FF FF FF FF FF     
   6102 FFFC74CC FF FF FF FF FF FF FF FF     
   6103 FFFC74D4 FF FF FF FF FF FF FF FF     
   6104 FFFC74DC FF FF FF FF FF FF FF FF     
   6105 FFFC74E4 FF FF FF FF FF FF FF FF     
   6106 FFFC74EC FF FF FF FF FF FF FF FF     
   6107 FFFC74F4 FF FF FF FF FF FF FF FF     
   6108 FFFC74FC FF FF FF FF FF FF FF FF     
   6109 FFFC7504 FF FF FF FF FF FF FF FF     
   6110 FFFC750C FF FF FF FF FF FF FF FF     
   6111 FFFC7514 FF FF FF FF FF FF FF FF     
   6112 FFFC751C FF FF FF FF FF FF FF FF     
   6113 FFFC7524 FF FF FF FF FF FF FF FF     
   6114 FFFC752C FF FF FF FF FF FF FF FF     
   6115 FFFC7534 FF FF FF FF FF FF FF FF     
   6116 FFFC753C FF FF FF FF FF FF FF FF     
   6117 FFFC7544 FF FF FF FF FF FF FF FF     
   6118 FFFC754C FF FF FF FF FF FF FF FF     
   6119 FFFC7554 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 45
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6120 FFFC755C FF FF FF FF FF FF FF FF     
   6121 FFFC7564 FF FF FF FF FF FF FF FF     
   6122 FFFC756C FF FF FF FF FF FF FF FF     
   6123 FFFC7574 FF FF FF FF FF FF FF FF     
   6124 FFFC757C FF FF FF FF FF FF FF FF     
   6125 FFFC7584 FF FF FF FF FF FF FF FF     
   6126 FFFC758C FF FF FF FF FF FF FF FF     
   6127 FFFC7594 FF FF FF FF FF FF FF FF     
   6128 FFFC759C FF FF FF FF FF FF FF FF     
   6129 FFFC75A4 FF FF FF FF FF FF FF FF     
   6130 FFFC75AC FF FF FF FF FF FF FF FF     
   6131 FFFC75B4 FF FF FF FF FF FF FF FF     
   6132 FFFC75BC FF FF FF FF FF FF FF FF     
   6133 FFFC75C4 FF FF FF FF FF FF FF FF     
   6134 FFFC75CC FF FF FF FF FF FF FF FF     
   6135 FFFC75D4 FF FF FF FF FF FF FF FF     
   6136 FFFC75DC FF FF FF FF FF FF FF FF     
   6137 FFFC75E4 FF FF FF FF FF FF FF FF     
   6138 FFFC75EC FF FF FF FF FF FF FF FF     
   6139 FFFC75F4 FF FF FF FF FF FF FF FF     
   6140 FFFC75FC FF FF FF FF FF FF FF FF     
   6141 FFFC7604 FF FF FF FF FF FF FF FF     
   6142 FFFC760C FF FF FF FF FF FF FF FF     
   6143 FFFC7614 FF FF FF FF FF FF FF FF     
   6144 FFFC761C FF FF FF FF FF FF FF FF     
   6145 FFFC7624 FF FF FF FF FF FF FF FF     
   6146 FFFC762C FF FF FF FF FF FF FF FF     
   6147 FFFC7634 FF FF FF FF FF FF FF FF     
   6148 FFFC763C FF FF FF FF FF FF FF FF     
   6149 FFFC7644 FF FF FF FF FF FF FF FF     
   6150 FFFC764C FF FF FF FF FF FF FF FF     
   6151 FFFC7654 FF FF FF FF FF FF FF FF     
   6152 FFFC765C FF FF FF FF FF FF FF FF     
   6153 FFFC7664 FF FF FF FF FF FF FF FF     
   6154 FFFC766C FF FF FF FF FF FF FF FF     
   6155 FFFC7674 FF FF FF FF FF FF FF FF     
   6156 FFFC767C FF FF FF FF FF FF FF FF     
   6157 FFFC7684 FF FF FF FF FF FF FF FF     
   6158 FFFC768C FF FF FF FF FF FF FF FF     
   6159 FFFC7694 FF FF FF FF FF FF FF FF     
   6160 FFFC769C FF FF FF FF FF FF FF FF     
   6161 FFFC76A4 FF FF FF FF FF FF FF FF     
   6162 FFFC76AC FF FF FF FF FF FF FF FF     
   6163 FFFC76B4 FF FF FF FF FF FF FF FF     
   6164 FFFC76BC FF FF FF FF FF FF FF FF     
   6165 FFFC76C4 FF FF FF FF FF FF FF FF     
   6166 FFFC76CC FF FF FF FF FF FF FF FF     
   6167 FFFC76D4 FF FF FF FF FF FF FF FF     
   6168 FFFC76DC FF FF FF FF FF FF FF FF     
   6169 FFFC76E4 FF FF FF FF FF FF FF FF     
   6170 FFFC76EC FF FF FF FF FF FF FF FF     
   6171 FFFC76F4 FF FF FF FF FF FF FF FF     
   6172 FFFC76FC FF FF FF FF FF FF FF FF     
   6173 FFFC7704 FF FF FF FF FF FF FF FF     
   6174 FFFC770C FF FF FF FF FF FF FF FF     
   6175 FFFC7714 FF FF FF FF FF FF FF FF     
   6176 FFFC771C FF FF FF FF FF FF FF FF     
   6177 FFFC7724 FF FF FF FF FF FF FF FF     
   6178 FFFC772C FF FF FF FF FF FF FF FF     
   6179 FFFC7734 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 46
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6180 FFFC773C FF FF FF FF FF FF FF FF     
   6181 FFFC7744 FF FF FF FF FF FF FF FF     
   6182 FFFC774C FF FF FF FF FF FF FF FF     
   6183 FFFC7754 FF FF FF FF FF FF FF FF     
   6184 FFFC775C FF FF FF FF FF FF FF FF     
   6185 FFFC7764 FF FF FF FF FF FF FF FF     
   6186 FFFC776C FF FF FF FF FF FF FF FF     
   6187 FFFC7774 FF FF FF FF FF FF FF FF     
   6188 FFFC777C FF FF FF FF FF FF FF FF     
   6189 FFFC7784 FF FF FF FF FF FF FF FF     
   6190 FFFC778C FF FF FF FF FF FF FF FF     
   6191 FFFC7794 FF FF FF FF FF FF FF FF     
   6192 FFFC779C FF FF FF FF FF FF FF FF     
   6193 FFFC77A4 FF FF FF FF FF FF FF FF     
   6194 FFFC77AC FF FF FF FF FF FF FF FF     
   6195 FFFC77B4 FF FF FF FF FF FF FF FF     
   6196 FFFC77BC FF FF FF FF FF FF FF FF     
   6197 FFFC77C4 FF FF FF FF FF FF FF FF     
   6198 FFFC77CC FF FF FF FF FF FF FF FF     
   6199 FFFC77D4 FF FF FF FF FF FF FF FF     
   6200 FFFC77DC FF FF FF FF FF FF FF FF     
   6201 FFFC77E4 FF FF FF FF FF FF FF FF     
   6202 FFFC77EC FF FF FF FF FF FF FF FF     
   6203 FFFC77F4 FF FF FF FF FF FF FF FF     
   6204 FFFC77FC FF FF FF FF FF FF FF FF     
   6205 FFFC7804 FF FF FF FF FF FF FF FF     
   6206 FFFC780C FF FF FF FF FF FF FF FF     
   6207 FFFC7814 FF FF FF FF FF FF FF FF     
   6208 FFFC781C FF FF FF FF FF FF FF FF     
   6209 FFFC7824 FF FF FF FF FF FF FF FF     
   6210 FFFC782C FF FF FF FF FF FF FF FF     
   6211 FFFC7834 FF FF FF FF FF FF FF FF     
   6212 FFFC783C FF FF FF FF FF FF FF FF     
   6213 FFFC7844 FF FF FF FF FF FF FF FF     
   6214 FFFC784C FF FF FF FF FF FF FF FF     
   6215 FFFC7854 FF FF FF FF FF FF FF FF     
   6216 FFFC785C FF FF FF FF FF FF FF FF     
   6217 FFFC7864 FF FF FF FF FF FF FF FF     
   6218 FFFC786C FF FF FF FF FF FF FF FF     
   6219 FFFC7874 FF FF FF FF FF FF FF FF     
   6220 FFFC787C FF FF FF FF FF FF FF FF     
   6221 FFFC7884 FF FF FF FF FF FF FF FF     
   6222 FFFC788C FF FF FF FF FF FF FF FF     
   6223 FFFC7894 FF FF FF FF FF FF FF FF     
   6224 FFFC789C FF FF FF FF FF FF FF FF     
   6225 FFFC78A4 FF FF FF FF FF FF FF FF     
   6226 FFFC78AC FF FF FF FF FF FF FF FF     
   6227 FFFC78B4 FF FF FF FF FF FF FF FF     
   6228 FFFC78BC FF FF FF FF FF FF FF FF     
   6229 FFFC78C4 FF FF FF FF FF FF FF FF     
   6230 FFFC78CC FF FF FF FF FF FF FF FF     
   6231 FFFC78D4 FF FF FF FF FF FF FF FF     
   6232 FFFC78DC FF FF FF FF FF FF FF FF     
   6233 FFFC78E4 FF FF FF FF FF FF FF FF     
   6234 FFFC78EC FF FF FF FF FF FF FF FF     
   6235 FFFC78F4 FF FF FF FF FF FF FF FF     
   6236 FFFC78FC FF FF FF FF FF FF FF FF     
   6237 FFFC7904 FF FF FF FF FF FF FF FF     
   6238 FFFC790C FF FF FF FF FF FF FF FF     
   6239 FFFC7914 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 47
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6240 FFFC791C FF FF FF FF FF FF FF FF     
   6241 FFFC7924 FF FF FF FF FF FF FF FF     
   6242 FFFC792C FF FF FF FF FF FF FF FF     
   6243 FFFC7934 FF FF FF FF FF FF FF FF     
   6244 FFFC793C FF FF FF FF FF FF FF FF     
   6245 FFFC7944 FF FF FF FF FF FF FF FF     
   6246 FFFC794C FF FF FF FF FF FF FF FF     
   6247 FFFC7954 FF FF FF FF FF FF FF FF     
   6248 FFFC795C FF FF FF FF FF FF FF FF     
   6249 FFFC7964 FF FF FF FF FF FF FF FF     
   6250 FFFC796C FF FF FF FF FF FF FF FF     
   6251 FFFC7974 FF FF FF FF FF FF FF FF     
   6252 FFFC797C FF FF FF FF FF FF FF FF     
   6253 FFFC7984 FF FF FF FF FF FF FF FF     
   6254 FFFC798C FF FF FF FF FF FF FF FF     
   6255 FFFC7994 FF FF FF FF FF FF FF FF     
   6256 FFFC799C FF FF FF FF FF FF FF FF     
   6257 FFFC79A4 FF FF FF FF FF FF FF FF     
   6258 FFFC79AC FF FF FF FF FF FF FF FF     
   6259 FFFC79B4 FF FF FF FF FF FF FF FF     
   6260 FFFC79BC FF FF FF FF FF FF FF FF     
   6261 FFFC79C4 FF FF FF FF FF FF FF FF     
   6262 FFFC79CC FF FF FF FF FF FF FF FF     
   6263 FFFC79D4 FF FF FF FF FF FF FF FF     
   6264 FFFC79DC FF FF FF FF FF FF FF FF     
   6265 FFFC79E4 FF FF FF FF FF FF FF FF     
   6266 FFFC79EC FF FF FF FF FF FF FF FF     
   6267 FFFC79F4 FF FF FF FF FF FF FF FF     
   6268 FFFC79FC FF FF FF FF FF FF FF FF     
   6269 FFFC7A04 FF FF FF FF FF FF FF FF     
   6270 FFFC7A0C FF FF FF FF FF FF FF FF     
   6271 FFFC7A14 FF FF FF FF FF FF FF FF     
   6272 FFFC7A1C FF FF FF FF FF FF FF FF     
   6273 FFFC7A24 FF FF FF FF FF FF FF FF     
   6274 FFFC7A2C FF FF FF FF FF FF FF FF     
   6275 FFFC7A34 FF FF FF FF FF FF FF FF     
   6276 FFFC7A3C FF FF FF FF FF FF FF FF     
   6277 FFFC7A44 FF FF FF FF FF FF FF FF     
   6278 FFFC7A4C FF FF FF FF FF FF FF FF     
   6279 FFFC7A54 FF FF FF FF FF FF FF FF     
   6280 FFFC7A5C FF FF FF FF FF FF FF FF     
   6281 FFFC7A64 FF FF FF FF FF FF FF FF     
   6282 FFFC7A6C FF FF FF FF FF FF FF FF     
   6283 FFFC7A74 FF FF FF FF FF FF FF FF     
   6284 FFFC7A7C FF FF FF FF FF FF FF FF     
   6285 FFFC7A84 FF FF FF FF FF FF FF FF     
   6286 FFFC7A8C FF FF FF FF FF FF FF FF     
   6287 FFFC7A94 FF FF FF FF FF FF FF FF     
   6288 FFFC7A9C FF FF FF FF FF FF FF FF     
   6289 FFFC7AA4 FF FF FF FF FF FF FF FF     
   6290 FFFC7AAC FF FF FF FF FF FF FF FF     
   6291 FFFC7AB4 FF FF FF FF FF FF FF FF     
   6292 FFFC7ABC FF FF FF FF FF FF FF FF     
   6293 FFFC7AC4 FF FF FF FF FF FF FF FF     
   6294 FFFC7ACC FF FF FF FF FF FF FF FF     
   6295 FFFC7AD4 FF FF FF FF FF FF FF FF     
   6296 FFFC7ADC FF FF FF FF FF FF FF FF     
   6297 FFFC7AE4 FF FF FF FF FF FF FF FF     
   6298 FFFC7AEC FF FF FF FF FF FF FF FF     
   6299 FFFC7AF4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 48
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6300 FFFC7AFC FF FF FF FF FF FF FF FF     
   6301 FFFC7B04 FF FF FF FF FF FF FF FF     
   6302 FFFC7B0C FF FF FF FF FF FF FF FF     
   6303 FFFC7B14 FF FF FF FF FF FF FF FF     
   6304 FFFC7B1C FF FF FF FF FF FF FF FF     
   6305 FFFC7B24 FF FF FF FF FF FF FF FF     
   6306 FFFC7B2C FF FF FF FF FF FF FF FF     
   6307 FFFC7B34 FF FF FF FF FF FF FF FF     
   6308 FFFC7B3C FF FF FF FF FF FF FF FF     
   6309 FFFC7B44 FF FF FF FF FF FF FF FF     
   6310 FFFC7B4C FF FF FF FF FF FF FF FF     
   6311 FFFC7B54 FF FF FF FF FF FF FF FF     
   6312 FFFC7B5C FF FF FF FF FF FF FF FF     
   6313 FFFC7B64 FF FF FF FF FF FF FF FF     
   6314 FFFC7B6C FF FF FF FF FF FF FF FF     
   6315 FFFC7B74 FF FF FF FF FF FF FF FF     
   6316 FFFC7B7C FF FF FF FF FF FF FF FF     
   6317 FFFC7B84 FF FF FF FF FF FF FF FF     
   6318 FFFC7B8C FF FF FF FF FF FF FF FF     
   6319 FFFC7B94 FF FF FF FF FF FF FF FF     
   6320 FFFC7B9C FF FF FF FF FF FF FF FF     
   6321 FFFC7BA4 FF FF FF FF FF FF FF FF     
   6322 FFFC7BAC FF FF FF FF FF FF FF FF     
   6323 FFFC7BB4 FF FF FF FF FF FF FF FF     
   6324 FFFC7BBC FF FF FF FF FF FF FF FF     
   6325 FFFC7BC4 FF FF FF FF FF FF FF FF     
   6326 FFFC7BCC FF FF FF FF FF FF FF FF     
   6327 FFFC7BD4 FF FF FF FF FF FF FF FF     
   6328 FFFC7BDC FF FF FF FF FF FF FF FF     
   6329 FFFC7BE4 FF FF FF FF FF FF FF FF     
   6330 FFFC7BEC FF FF FF FF FF FF FF FF     
   6331 FFFC7BF4 FF FF FF FF FF FF FF FF     
   6332 FFFC7BFC FF FF FF FF FF FF FF FF     
   6333 FFFC7C04 FF FF FF FF FF FF FF FF     
   6334 FFFC7C0C FF FF FF FF FF FF FF FF     
   6335 FFFC7C14 FF FF FF FF FF FF FF FF     
   6336 FFFC7C1C FF FF FF FF FF FF FF FF     
   6337 FFFC7C24 FF FF FF FF FF FF FF FF     
   6338 FFFC7C2C FF FF FF FF FF FF FF FF     
   6339 FFFC7C34 FF FF FF FF FF FF FF FF     
   6340 FFFC7C3C FF FF FF FF FF FF FF FF     
   6341 FFFC7C44 FF FF FF FF FF FF FF FF     
   6342 FFFC7C4C FF FF FF FF FF FF FF FF     
   6343 FFFC7C54 FF FF FF FF FF FF FF FF     
   6344 FFFC7C5C FF FF FF FF FF FF FF FF     
   6345 FFFC7C64 FF FF FF FF FF FF FF FF     
   6346 FFFC7C6C FF FF FF FF FF FF FF FF     
   6347 FFFC7C74 FF FF FF FF FF FF FF FF     
   6348 FFFC7C7C FF FF FF FF FF FF FF FF     
   6349 FFFC7C84 FF FF FF FF FF FF FF FF     
   6350 FFFC7C8C FF FF FF FF FF FF FF FF     
   6351 FFFC7C94 FF FF FF FF FF FF FF FF     
   6352 FFFC7C9C FF FF FF FF FF FF FF FF     
   6353 FFFC7CA4 FF FF FF FF FF FF FF FF     
   6354 FFFC7CAC FF FF FF FF FF FF FF FF     
   6355 FFFC7CB4 FF FF FF FF FF FF FF FF     
   6356 FFFC7CBC FF FF FF FF FF FF FF FF     
   6357 FFFC7CC4 FF FF FF FF FF FF FF FF     
   6358 FFFC7CCC FF FF FF FF FF FF FF FF     
   6359 FFFC7CD4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 49
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6360 FFFC7CDC FF FF FF FF FF FF FF FF     
   6361 FFFC7CE4 FF FF FF FF FF FF FF FF     
   6362 FFFC7CEC FF FF FF FF FF FF FF FF     
   6363 FFFC7CF4 FF FF FF FF FF FF FF FF     
   6364 FFFC7CFC FF FF FF FF FF FF FF FF     
   6365 FFFC7D04 FF FF FF FF FF FF FF FF     
   6366 FFFC7D0C FF FF FF FF FF FF FF FF     
   6367 FFFC7D14 FF FF FF FF FF FF FF FF     
   6368 FFFC7D1C FF FF FF FF FF FF FF FF     
   6369 FFFC7D24 FF FF FF FF FF FF FF FF     
   6370 FFFC7D2C FF FF FF FF FF FF FF FF     
   6371 FFFC7D34 FF FF FF FF FF FF FF FF     
   6372 FFFC7D3C FF FF FF FF FF FF FF FF     
   6373 FFFC7D44 FF FF FF FF FF FF FF FF     
   6374 FFFC7D4C FF FF FF FF FF FF FF FF     
   6375 FFFC7D54 FF FF FF FF FF FF FF FF     
   6376 FFFC7D5C FF FF FF FF FF FF FF FF     
   6377 FFFC7D64 FF FF FF FF FF FF FF FF     
   6378 FFFC7D6C FF FF FF FF FF FF FF FF     
   6379 FFFC7D74 FF FF FF FF FF FF FF FF     
   6380 FFFC7D7C FF FF FF FF FF FF FF FF     
   6381 FFFC7D84 FF FF FF FF FF FF FF FF     
   6382 FFFC7D8C FF FF FF FF FF FF FF FF     
   6383 FFFC7D94 FF FF FF FF FF FF FF FF     
   6384 FFFC7D9C FF FF FF FF FF FF FF FF     
   6385 FFFC7DA4 FF FF FF FF FF FF FF FF     
   6386 FFFC7DAC FF FF FF FF FF FF FF FF     
   6387 FFFC7DB4 FF FF FF FF FF FF FF FF     
   6388 FFFC7DBC FF FF FF FF FF FF FF FF     
   6389 FFFC7DC4 FF FF FF FF FF FF FF FF     
   6390 FFFC7DCC FF FF FF FF FF FF FF FF     
   6391 FFFC7DD4 FF FF FF FF FF FF FF FF     
   6392 FFFC7DDC FF FF FF FF FF FF FF FF     
   6393 FFFC7DE4 FF FF FF FF FF FF FF FF     
   6394 FFFC7DEC FF FF FF FF FF FF FF FF     
   6395 FFFC7DF4 FF FF FF FF FF FF FF FF     
   6396 FFFC7DFC FF FF FF FF FF FF FF FF     
   6397 FFFC7E04 FF FF FF FF FF FF FF FF     
   6398 FFFC7E0C FF FF FF FF FF FF FF FF     
   6399 FFFC7E14 FF FF FF FF FF FF FF FF     
   6400 FFFC7E1C FF FF FF FF FF FF FF FF     
   6401 FFFC7E24 FF FF FF FF FF FF FF FF     
   6402 FFFC7E2C FF FF FF FF FF FF FF FF     
   6403 FFFC7E34 FF FF FF FF FF FF FF FF     
   6404 FFFC7E3C FF FF FF FF FF FF FF FF     
   6405 FFFC7E44 FF FF FF FF FF FF FF FF     
   6406 FFFC7E4C FF FF FF FF FF FF FF FF     
   6407 FFFC7E54 FF FF FF FF FF FF FF FF     
   6408 FFFC7E5C FF FF FF FF FF FF FF FF     
   6409 FFFC7E64 FF FF FF FF FF FF FF FF     
   6410 FFFC7E6C FF FF FF FF FF FF FF FF     
   6411 FFFC7E74 FF FF FF FF FF FF FF FF     
   6412 FFFC7E7C FF FF FF FF FF FF FF FF     
   6413 FFFC7E84 FF FF FF FF FF FF FF FF     
   6414 FFFC7E8C FF FF FF FF FF FF FF FF     
   6415 FFFC7E94 FF FF FF FF FF FF FF FF     
   6416 FFFC7E9C FF FF FF FF FF FF FF FF     
   6417 FFFC7EA4 FF FF FF FF FF FF FF FF     
   6418 FFFC7EAC FF FF FF FF FF FF FF FF     
   6419 FFFC7EB4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 50
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6420 FFFC7EBC FF FF FF FF FF FF FF FF     
   6421 FFFC7EC4 FF FF FF FF FF FF FF FF     
   6422 FFFC7ECC FF FF FF FF FF FF FF FF     
   6423 FFFC7ED4 FF FF FF FF FF FF FF FF     
   6424 FFFC7EDC FF FF FF FF FF FF FF FF     
   6425 FFFC7EE4 FF FF FF FF FF FF FF FF     
   6426 FFFC7EEC FF FF FF FF FF FF FF FF     
   6427 FFFC7EF4 FF FF FF FF FF FF FF FF     
   6428 FFFC7EFC FF FF FF FF FF FF FF FF     
   6429 FFFC7F04 FF FF FF FF FF FF FF FF     
   6430 FFFC7F0C FF FF FF FF FF FF FF FF     
   6431 FFFC7F14 FF FF FF FF FF FF FF FF     
   6432 FFFC7F1C FF FF FF FF FF FF FF FF     
   6433 FFFC7F24 FF FF FF FF FF FF FF FF     
   6434 FFFC7F2C FF FF FF FF FF FF FF FF     
   6435 FFFC7F34 FF FF FF FF FF FF FF FF     
   6436 FFFC7F3C FF FF FF FF FF FF FF FF     
   6437 FFFC7F44 FF FF FF FF FF FF FF FF     
   6438 FFFC7F4C FF FF FF FF FF FF FF FF     
   6439 FFFC7F54 FF FF FF FF FF FF FF FF     
   6440 FFFC7F5C FF FF FF FF FF FF FF FF     
   6441 FFFC7F64 FF FF FF FF FF FF FF FF     
   6442 FFFC7F6C FF FF FF FF FF FF FF FF     
   6443 FFFC7F74 FF FF FF FF FF FF FF FF     
   6444 FFFC7F7C FF FF FF FF FF FF FF FF     
   6445 FFFC7F84 FF FF FF FF FF FF FF FF     
   6446 FFFC7F8C FF FF FF FF FF FF FF FF     
   6447 FFFC7F94 FF FF FF FF FF FF FF FF     
   6448 FFFC7F9C FF FF FF FF FF FF FF FF     
   6449 FFFC7FA4 FF FF FF FF FF FF FF FF     
   6450 FFFC7FAC FF FF FF FF FF FF FF FF     
   6451 FFFC7FB4 FF FF FF FF FF FF FF FF     
   6452 FFFC7FBC FF FF FF FF FF FF FF FF     
   6453 FFFC7FC4 FF FF FF FF FF FF FF FF     
   6454 FFFC7FCC FF FF FF FF FF FF FF FF     
   6455 FFFC7FD4 FF FF FF FF FF FF FF FF     
   6456 FFFC7FDC FF FF FF FF FF FF FF FF     
   6457 FFFC7FE4 FF FF FF FF FF FF FF FF     
   6458 FFFC7FEC FF FF FF FF FF FF FF FF     
   6459 FFFC7FF4 FF FF FF FF FF FF FF FF     
   6460 FFFC7FFC FF FF FF FF FF FF FF FF     
   6461 FFFC8004 FF FF FF FF FF FF FF FF     
   6462 FFFC800C FF FF FF FF FF FF FF FF     
   6463 FFFC8014 FF FF FF FF FF FF FF FF     
   6464 FFFC801C FF FF FF FF FF FF FF FF     
   6465 FFFC8024 FF FF FF FF FF FF FF FF     
   6466 FFFC802C FF FF FF FF FF FF FF FF     
   6467 FFFC8034 FF FF FF FF FF FF FF FF     
   6468 FFFC803C FF FF FF FF FF FF FF FF     
   6469 FFFC8044 FF FF FF FF FF FF FF FF     
   6470 FFFC804C FF FF FF FF FF FF FF FF     
   6471 FFFC8054 FF FF FF FF FF FF FF FF     
   6472 FFFC805C FF FF FF FF FF FF FF FF     
   6473 FFFC8064 FF FF FF FF FF FF FF FF     
   6474 FFFC806C FF FF FF FF FF FF FF FF     
   6475 FFFC8074 FF FF FF FF FF FF FF FF     
   6476 FFFC807C FF FF FF FF FF FF FF FF     
   6477 FFFC8084 FF FF FF FF FF FF FF FF     
   6478 FFFC808C FF FF FF FF FF FF FF FF     
   6479 FFFC8094 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 51
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6480 FFFC809C FF FF FF FF FF FF FF FF     
   6481 FFFC80A4 FF FF FF FF FF FF FF FF     
   6482 FFFC80AC FF FF FF FF FF FF FF FF     
   6483 FFFC80B4 FF FF FF FF FF FF FF FF     
   6484 FFFC80BC FF FF FF FF FF FF FF FF     
   6485 FFFC80C4 FF FF FF FF FF FF FF FF     
   6486 FFFC80CC FF FF FF FF FF FF FF FF     
   6487 FFFC80D4 FF FF FF FF FF FF FF FF     
   6488 FFFC80DC FF FF FF FF FF FF FF FF     
   6489 FFFC80E4 FF FF FF FF FF FF FF FF     
   6490 FFFC80EC FF FF FF FF FF FF FF FF     
   6491 FFFC80F4 FF FF FF FF FF FF FF FF     
   6492 FFFC80FC FF FF FF FF FF FF FF FF     
   6493 FFFC8104 FF FF FF FF FF FF FF FF     
   6494 FFFC810C FF FF FF FF FF FF FF FF     
   6495 FFFC8114 FF FF FF FF FF FF FF FF     
   6496 FFFC811C FF FF FF FF FF FF FF FF     
   6497 FFFC8124 FF FF FF FF FF FF FF FF     
   6498 FFFC812C FF FF FF FF FF FF FF FF     
   6499 FFFC8134 FF FF FF FF FF FF FF FF     
   6500 FFFC813C FF FF FF FF FF FF FF FF     
   6501 FFFC8144 FF FF FF FF FF FF FF FF     
   6502 FFFC814C FF FF FF FF FF FF FF FF     
   6503 FFFC8154 FF FF FF FF FF FF FF FF     
   6504 FFFC815C FF FF FF FF FF FF FF FF     
   6505 FFFC8164 FF FF FF FF FF FF FF FF     
   6506 FFFC816C FF FF FF FF FF FF FF FF     
   6507 FFFC8174 FF FF FF FF FF FF FF FF     
   6508 FFFC817C FF FF FF FF FF FF FF FF     
   6509 FFFC8184 FF FF FF FF FF FF FF FF     
   6510 FFFC818C FF FF FF FF FF FF FF FF     
   6511 FFFC8194 FF FF FF FF FF FF FF FF     
   6512 FFFC819C FF FF FF FF FF FF FF FF     
   6513 FFFC81A4 FF FF FF FF FF FF FF FF     
   6514 FFFC81AC FF FF FF FF FF FF FF FF     
   6515 FFFC81B4 FF FF FF FF FF FF FF FF     
   6516 FFFC81BC FF FF FF FF FF FF FF FF     
   6517 FFFC81C4 FF FF FF FF FF FF FF FF     
   6518 FFFC81CC FF FF FF FF FF FF FF FF     
   6519 FFFC81D4 FF FF FF FF FF FF FF FF     
   6520 FFFC81DC FF FF FF FF FF FF FF FF     
   6521 FFFC81E4 FF FF FF FF FF FF FF FF     
   6522 FFFC81EC FF FF FF FF FF FF FF FF     
   6523 FFFC81F4 FF FF FF FF FF FF FF FF     
   6524 FFFC81FC FF FF FF FF FF FF FF FF     
   6525 FFFC8204 FF FF FF FF FF FF FF FF     
   6526 FFFC820C FF FF FF FF FF FF FF FF     
   6527 FFFC8214 FF FF FF FF FF FF FF FF     
   6528 FFFC821C FF FF FF FF FF FF FF FF     
   6529 FFFC8224 FF FF FF FF FF FF FF FF     
   6530 FFFC822C FF FF FF FF FF FF FF FF     
   6531 FFFC8234 FF FF FF FF FF FF FF FF     
   6532 FFFC823C FF FF FF FF FF FF FF FF     
   6533 FFFC8244 FF FF FF FF FF FF FF FF     
   6534 FFFC824C FF FF FF FF FF FF FF FF     
   6535 FFFC8254 FF FF FF FF FF FF FF FF     
   6536 FFFC825C FF FF FF FF FF FF FF FF     
   6537 FFFC8264 FF FF FF FF FF FF FF FF     
   6538 FFFC826C FF FF FF FF FF FF FF FF     
   6539 FFFC8274 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 52
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6540 FFFC827C FF FF FF FF FF FF FF FF     
   6541 FFFC8284 FF FF FF FF FF FF FF FF     
   6542 FFFC828C FF FF FF FF FF FF FF FF     
   6543 FFFC8294 FF FF FF FF FF FF FF FF     
   6544 FFFC829C FF FF FF FF FF FF FF FF     
   6545 FFFC82A4 FF FF FF FF FF FF FF FF     
   6546 FFFC82AC FF FF FF FF FF FF FF FF     
   6547 FFFC82B4 FF FF FF FF FF FF FF FF     
   6548 FFFC82BC FF FF FF FF FF FF FF FF     
   6549 FFFC82C4 FF FF FF FF FF FF FF FF     
   6550 FFFC82CC FF FF FF FF FF FF FF FF     
   6551 FFFC82D4 FF FF FF FF FF FF FF FF     
   6552 FFFC82DC FF FF FF FF FF FF FF FF     
   6553 FFFC82E4 FF FF FF FF FF FF FF FF     
   6554 FFFC82EC FF FF FF FF FF FF FF FF     
   6555 FFFC82F4 FF FF FF FF FF FF FF FF     
   6556 FFFC82FC FF FF FF FF FF FF FF FF     
   6557 FFFC8304 FF FF FF FF FF FF FF FF     
   6558 FFFC830C FF FF FF FF FF FF FF FF     
   6559 FFFC8314 FF FF FF FF FF FF FF FF     
   6560 FFFC831C FF FF FF FF FF FF FF FF     
   6561 FFFC8324 FF FF FF FF FF FF FF FF     
   6562 FFFC832C FF FF FF FF FF FF FF FF     
   6563 FFFC8334 FF FF FF FF FF FF FF FF     
   6564 FFFC833C FF FF FF FF FF FF FF FF     
   6565 FFFC8344 FF FF FF FF FF FF FF FF     
   6566 FFFC834C FF FF FF FF FF FF FF FF     
   6567 FFFC8354 FF FF FF FF FF FF FF FF     
   6568 FFFC835C FF FF FF FF FF FF FF FF     
   6569 FFFC8364 FF FF FF FF FF FF FF FF     
   6570 FFFC836C FF FF FF FF FF FF FF FF     
   6571 FFFC8374 FF FF FF FF FF FF FF FF     
   6572 FFFC837C FF FF FF FF FF FF FF FF     
   6573 FFFC8384 FF FF FF FF FF FF FF FF     
   6574 FFFC838C FF FF FF FF FF FF FF FF     
   6575 FFFC8394 FF FF FF FF FF FF FF FF     
   6576 FFFC839C FF FF FF FF FF FF FF FF     
   6577 FFFC83A4 FF FF FF FF FF FF FF FF     
   6578 FFFC83AC FF FF FF FF FF FF FF FF     
   6579 FFFC83B4 FF FF FF FF FF FF FF FF     
   6580 FFFC83BC FF FF FF FF FF FF FF FF     
   6581 FFFC83C4 FF FF FF FF FF FF FF FF     
   6582 FFFC83CC FF FF FF FF FF FF FF FF     
   6583 FFFC83D4 FF FF FF FF FF FF FF FF     
   6584 FFFC83DC FF FF FF FF FF FF FF FF     
   6585 FFFC83E4 FF FF FF FF FF FF FF FF     
   6586 FFFC83EC FF FF FF FF FF FF FF FF     
   6587 FFFC83F4 FF FF FF FF FF FF FF FF     
   6588 FFFC83FC FF FF FF FF FF FF FF FF     
   6589 FFFC8404 FF FF FF FF FF FF FF FF     
   6590 FFFC840C FF FF FF FF FF FF FF FF     
   6591 FFFC8414 FF FF FF FF FF FF FF FF     
   6592 FFFC841C FF FF FF FF FF FF FF FF     
   6593 FFFC8424 FF FF FF FF FF FF FF FF     
   6594 FFFC842C FF FF FF FF FF FF FF FF     
   6595 FFFC8434 FF FF FF FF FF FF FF FF     
   6596 FFFC843C FF FF FF FF FF FF FF FF     
   6597 FFFC8444 FF FF FF FF FF FF FF FF     
   6598 FFFC844C FF FF FF FF FF FF FF FF     
   6599 FFFC8454 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 53
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6600 FFFC845C FF FF FF FF FF FF FF FF     
   6601 FFFC8464 FF FF FF FF FF FF FF FF     
   6602 FFFC846C FF FF FF FF FF FF FF FF     
   6603 FFFC8474 FF FF FF FF FF FF FF FF     
   6604 FFFC847C FF FF FF FF FF FF FF FF     
   6605 FFFC8484 FF FF FF FF FF FF FF FF     
   6606 FFFC848C FF FF FF FF FF FF FF FF     
   6607 FFFC8494 FF FF FF FF FF FF FF FF     
   6608 FFFC849C FF FF FF FF FF FF FF FF     
   6609 FFFC84A4 FF FF FF FF FF FF FF FF     
   6610 FFFC84AC FF FF FF FF FF FF FF FF     
   6611 FFFC84B4 FF FF FF FF FF FF FF FF     
   6612 FFFC84BC FF FF FF FF FF FF FF FF     
   6613 FFFC84C4 FF FF FF FF FF FF FF FF     
   6614 FFFC84CC FF FF FF FF FF FF FF FF     
   6615 FFFC84D4 FF FF FF FF FF FF FF FF     
   6616 FFFC84DC FF FF FF FF FF FF FF FF     
   6617 FFFC84E4 FF FF FF FF FF FF FF FF     
   6618 FFFC84EC FF FF FF FF FF FF FF FF     
   6619 FFFC84F4 FF FF FF FF FF FF FF FF     
   6620 FFFC84FC FF FF FF FF FF FF FF FF     
   6621 FFFC8504 FF FF FF FF FF FF FF FF     
   6622 FFFC850C FF FF FF FF FF FF FF FF     
   6623 FFFC8514 FF FF FF FF FF FF FF FF     
   6624 FFFC851C FF FF FF FF FF FF FF FF     
   6625 FFFC8524 FF FF FF FF FF FF FF FF     
   6626 FFFC852C FF FF FF FF FF FF FF FF     
   6627 FFFC8534 FF FF FF FF FF FF FF FF     
   6628 FFFC853C FF FF FF FF FF FF FF FF     
   6629 FFFC8544 FF FF FF FF FF FF FF FF     
   6630 FFFC854C FF FF FF FF FF FF FF FF     
   6631 FFFC8554 FF FF FF FF FF FF FF FF     
   6632 FFFC855C FF FF FF FF FF FF FF FF     
   6633 FFFC8564 FF FF FF FF FF FF FF FF     
   6634 FFFC856C FF FF FF FF FF FF FF FF     
   6635 FFFC8574 FF FF FF FF FF FF FF FF     
   6636 FFFC857C FF FF FF FF FF FF FF FF     
   6637 FFFC8584 FF FF FF FF FF FF FF FF     
   6638 FFFC858C FF FF FF FF FF FF FF FF     
   6639 FFFC8594 FF FF FF FF FF FF FF FF     
   6640 FFFC859C FF FF FF FF FF FF FF FF     
   6641 FFFC85A4 FF FF FF FF FF FF FF FF     
   6642 FFFC85AC FF FF FF FF FF FF FF FF     
   6643 FFFC85B4 FF FF FF FF FF FF FF FF     
   6644 FFFC85BC FF FF FF FF FF FF FF FF     
   6645 FFFC85C4 FF FF FF FF FF FF FF FF     
   6646 FFFC85CC FF FF FF FF FF FF FF FF     
   6647 FFFC85D4 FF FF FF FF FF FF FF FF     
   6648 FFFC85DC FF FF FF FF FF FF FF FF     
   6649 FFFC85E4 FF FF FF FF FF FF FF FF     
   6650 FFFC85EC FF FF FF FF FF FF FF FF     
   6651 FFFC85F4 FF FF FF FF FF FF FF FF     
   6652 FFFC85FC FF FF FF FF FF FF FF FF     
   6653 FFFC8604 FF FF FF FF FF FF FF FF     
   6654 FFFC860C FF FF FF FF FF FF FF FF     
   6655 FFFC8614 FF FF FF FF FF FF FF FF     
   6656 FFFC861C FF FF FF FF FF FF FF FF     
   6657 FFFC8624 FF FF FF FF FF FF FF FF     
   6658 FFFC862C FF FF FF FF FF FF FF FF     
   6659 FFFC8634 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 54
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6660 FFFC863C FF FF FF FF FF FF FF FF     
   6661 FFFC8644 FF FF FF FF FF FF FF FF     
   6662 FFFC864C FF FF FF FF FF FF FF FF     
   6663 FFFC8654 FF FF FF FF FF FF FF FF     
   6664 FFFC865C FF FF FF FF FF FF FF FF     
   6665 FFFC8664 FF FF FF FF FF FF FF FF     
   6666 FFFC866C FF FF FF FF FF FF FF FF     
   6667 FFFC8674 FF FF FF FF FF FF FF FF     
   6668 FFFC867C FF FF FF FF FF FF FF FF     
   6669 FFFC8684 FF FF FF FF FF FF FF FF     
   6670 FFFC868C FF FF FF FF FF FF FF FF     
   6671 FFFC8694 FF FF FF FF FF FF FF FF     
   6672 FFFC869C FF FF FF FF FF FF FF FF     
   6673 FFFC86A4 FF FF FF FF FF FF FF FF     
   6674 FFFC86AC FF FF FF FF FF FF FF FF     
   6675 FFFC86B4 FF FF FF FF FF FF FF FF     
   6676 FFFC86BC FF FF FF FF FF FF FF FF     
   6677 FFFC86C4 FF FF FF FF FF FF FF FF     
   6678 FFFC86CC FF FF FF FF FF FF FF FF     
   6679 FFFC86D4 FF FF FF FF FF FF FF FF     
   6680 FFFC86DC FF FF FF FF FF FF FF FF     
   6681 FFFC86E4 FF FF FF FF FF FF FF FF     
   6682 FFFC86EC FF FF FF FF FF FF FF FF     
   6683 FFFC86F4 FF FF FF FF FF FF FF FF     
   6684 FFFC86FC FF FF FF FF FF FF FF FF     
   6685 FFFC8704 FF FF FF FF FF FF FF FF     
   6686 FFFC870C FF FF FF FF FF FF FF FF     
   6687 FFFC8714 FF FF FF FF FF FF FF FF     
   6688 FFFC871C FF FF FF FF FF FF FF FF     
   6689 FFFC8724 FF FF FF FF FF FF FF FF     
   6690 FFFC872C FF FF FF FF FF FF FF FF     
   6691 FFFC8734 FF FF FF FF FF FF FF FF     
   6692 FFFC873C FF FF FF FF FF FF FF FF     
   6693 FFFC8744 FF FF FF FF FF FF FF FF     
   6694 FFFC874C FF FF FF FF FF FF FF FF     
   6695 FFFC8754 FF FF FF FF FF FF FF FF     
   6696 FFFC875C FF FF FF FF FF FF FF FF     
   6697 FFFC8764 FF FF FF FF FF FF FF FF     
   6698 FFFC876C FF FF FF FF FF FF FF FF     
   6699 FFFC8774 FF FF FF FF FF FF FF FF     
   6700 FFFC877C FF FF FF FF FF FF FF FF     
   6701 FFFC8784 FF FF FF FF FF FF FF FF     
   6702 FFFC878C FF FF FF FF FF FF FF FF     
   6703 FFFC8794 FF FF FF FF FF FF FF FF     
   6704 FFFC879C FF FF FF FF FF FF FF FF     
   6705 FFFC87A4 FF FF FF FF FF FF FF FF     
   6706 FFFC87AC FF FF FF FF FF FF FF FF     
   6707 FFFC87B4 FF FF FF FF FF FF FF FF     
   6708 FFFC87BC FF FF FF FF FF FF FF FF     
   6709 FFFC87C4 FF FF FF FF FF FF FF FF     
   6710 FFFC87CC FF FF FF FF FF FF FF FF     
   6711 FFFC87D4 FF FF FF FF FF FF FF FF     
   6712 FFFC87DC FF FF FF FF FF FF FF FF     
   6713 FFFC87E4 FF FF FF FF FF FF FF FF     
   6714 FFFC87EC FF FF FF FF FF FF FF FF     
   6715 FFFC87F4 FF FF FF FF FF FF FF FF     
   6716 FFFC87FC FF FF FF FF FF FF FF FF     
   6717 FFFC8804 FF FF FF FF FF FF FF FF     
   6718 FFFC880C FF FF FF FF FF FF FF FF     
   6719 FFFC8814 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 55
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6720 FFFC881C FF FF FF FF FF FF FF FF     
   6721 FFFC8824 FF FF FF FF FF FF FF FF     
   6722 FFFC882C FF FF FF FF FF FF FF FF     
   6723 FFFC8834 FF FF FF FF FF FF FF FF     
   6724 FFFC883C FF FF FF FF FF FF FF FF     
   6725 FFFC8844 FF FF FF FF FF FF FF FF     
   6726 FFFC884C FF FF FF FF FF FF FF FF     
   6727 FFFC8854 FF FF FF FF FF FF FF FF     
   6728 FFFC885C FF FF FF FF FF FF FF FF     
   6729 FFFC8864 FF FF FF FF FF FF FF FF     
   6730 FFFC886C FF FF FF FF FF FF FF FF     
   6731 FFFC8874 FF FF FF FF FF FF FF FF     
   6732 FFFC887C FF FF FF FF FF FF FF FF     
   6733 FFFC8884 FF FF FF FF FF FF FF FF     
   6734 FFFC888C FF FF FF FF FF FF FF FF     
   6735 FFFC8894 FF FF FF FF FF FF FF FF     
   6736 FFFC889C FF FF FF FF FF FF FF FF     
   6737 FFFC88A4 FF FF FF FF FF FF FF FF     
   6738 FFFC88AC FF FF FF FF FF FF FF FF     
   6739 FFFC88B4 FF FF FF FF FF FF FF FF     
   6740 FFFC88BC FF FF FF FF FF FF FF FF     
   6741 FFFC88C4 FF FF FF FF FF FF FF FF     
   6742 FFFC88CC FF FF FF FF FF FF FF FF     
   6743 FFFC88D4 FF FF FF FF FF FF FF FF     
   6744 FFFC88DC FF FF FF FF FF FF FF FF     
   6745 FFFC88E4 FF FF FF FF FF FF FF FF     
   6746 FFFC88EC FF FF FF FF FF FF FF FF     
   6747 FFFC88F4 FF FF FF FF FF FF FF FF     
   6748 FFFC88FC FF FF FF FF FF FF FF FF     
   6749 FFFC8904 FF FF FF FF FF FF FF FF     
   6750 FFFC890C FF FF FF FF FF FF FF FF     
   6751 FFFC8914 FF FF FF FF FF FF FF FF     
   6752 FFFC891C FF FF FF FF FF FF FF FF     
   6753 FFFC8924 FF FF FF FF FF FF FF FF     
   6754 FFFC892C FF FF FF FF FF FF FF FF     
   6755 FFFC8934 FF FF FF FF FF FF FF FF     
   6756 FFFC893C FF FF FF FF FF FF FF FF     
   6757 FFFC8944 FF FF FF FF FF FF FF FF     
   6758 FFFC894C FF FF FF FF FF FF FF FF     
   6759 FFFC8954 FF FF FF FF FF FF FF FF     
   6760 FFFC895C FF FF FF FF FF FF FF FF     
   6761 FFFC8964 FF FF FF FF FF FF FF FF     
   6762 FFFC896C FF FF FF FF FF FF FF FF     
   6763 FFFC8974 FF FF FF FF FF FF FF FF     
   6764 FFFC897C FF FF FF FF FF FF FF FF     
   6765 FFFC8984 FF FF FF FF FF FF FF FF     
   6766 FFFC898C FF FF FF FF FF FF FF FF     
   6767 FFFC8994 FF FF FF FF FF FF FF FF     
   6768 FFFC899C FF FF FF FF FF FF FF FF     
   6769 FFFC89A4 FF FF FF FF FF FF FF FF     
   6770 FFFC89AC FF FF FF FF FF FF FF FF     
   6771 FFFC89B4 FF FF FF FF FF FF FF FF     
   6772 FFFC89BC FF FF FF FF FF FF FF FF     
   6773 FFFC89C4 FF FF FF FF FF FF FF FF     
   6774 FFFC89CC FF FF FF FF FF FF FF FF     
   6775 FFFC89D4 FF FF FF FF FF FF FF FF     
   6776 FFFC89DC FF FF FF FF FF FF FF FF     
   6777 FFFC89E4 FF FF FF FF FF FF FF FF     
   6778 FFFC89EC FF FF FF FF FF FF FF FF     
   6779 FFFC89F4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 56
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6780 FFFC89FC FF FF FF FF FF FF FF FF     
   6781 FFFC8A04 FF FF FF FF FF FF FF FF     
   6782 FFFC8A0C FF FF FF FF FF FF FF FF     
   6783 FFFC8A14 FF FF FF FF FF FF FF FF     
   6784 FFFC8A1C FF FF FF FF FF FF FF FF     
   6785 FFFC8A24 FF FF FF FF FF FF FF FF     
   6786 FFFC8A2C FF FF FF FF FF FF FF FF     
   6787 FFFC8A34 FF FF FF FF FF FF FF FF     
   6788 FFFC8A3C FF FF FF FF FF FF FF FF     
   6789 FFFC8A44 FF FF FF FF FF FF FF FF     
   6790 FFFC8A4C FF FF FF FF FF FF FF FF     
   6791 FFFC8A54 FF FF FF FF FF FF FF FF     
   6792 FFFC8A5C FF FF FF FF FF FF FF FF     
   6793 FFFC8A64 FF FF FF FF FF FF FF FF     
   6794 FFFC8A6C FF FF FF FF FF FF FF FF     
   6795 FFFC8A74 FF FF FF FF FF FF FF FF     
   6796 FFFC8A7C FF FF FF FF FF FF FF FF     
   6797 FFFC8A84 FF FF FF FF FF FF FF FF     
   6798 FFFC8A8C FF FF FF FF FF FF FF FF     
   6799 FFFC8A94 FF FF FF FF FF FF FF FF     
   6800 FFFC8A9C FF FF FF FF FF FF FF FF     
   6801 FFFC8AA4 FF FF FF FF FF FF FF FF     
   6802 FFFC8AAC FF FF FF FF FF FF FF FF     
   6803 FFFC8AB4 FF FF FF FF FF FF FF FF     
   6804 FFFC8ABC FF FF FF FF FF FF FF FF     
   6805 FFFC8AC4 FF FF FF FF FF FF FF FF     
   6806 FFFC8ACC FF FF FF FF FF FF FF FF     
   6807 FFFC8AD4 FF FF FF FF FF FF FF FF     
   6808 FFFC8ADC FF FF FF FF FF FF FF FF     
   6809 FFFC8AE4 FF FF FF FF FF FF FF FF     
   6810 FFFC8AEC FF FF FF FF FF FF FF FF     
   6811 FFFC8AF4 FF FF FF FF FF FF FF FF     
   6812 FFFC8AFC FF FF FF FF FF FF FF FF     
   6813 FFFC8B04 FF FF FF FF FF FF FF FF     
   6814 FFFC8B0C FF FF FF FF FF FF FF FF     
   6815 FFFC8B14 FF FF FF FF FF FF FF FF     
   6816 FFFC8B1C FF FF FF FF FF FF FF FF     
   6817 FFFC8B24 FF FF FF FF FF FF FF FF     
   6818 FFFC8B2C FF FF FF FF FF FF FF FF     
   6819 FFFC8B34 FF FF FF FF FF FF FF FF     
   6820 FFFC8B3C FF FF FF FF FF FF FF FF     
   6821 FFFC8B44 FF FF FF FF FF FF FF FF     
   6822 FFFC8B4C FF FF FF FF FF FF FF FF     
   6823 FFFC8B54 FF FF FF FF FF FF FF FF     
   6824 FFFC8B5C FF FF FF FF FF FF FF FF     
   6825 FFFC8B64 FF FF FF FF FF FF FF FF     
   6826 FFFC8B6C FF FF FF FF FF FF FF FF     
   6827 FFFC8B74 FF FF FF FF FF FF FF FF     
   6828 FFFC8B7C FF FF FF FF FF FF FF FF     
   6829 FFFC8B84 FF FF FF FF FF FF FF FF     
   6830 FFFC8B8C FF FF FF FF FF FF FF FF     
   6831 FFFC8B94 FF FF FF FF FF FF FF FF     
   6832 FFFC8B9C FF FF FF FF FF FF FF FF     
   6833 FFFC8BA4 FF FF FF FF FF FF FF FF     
   6834 FFFC8BAC FF FF FF FF FF FF FF FF     
   6835 FFFC8BB4 FF FF FF FF FF FF FF FF     
   6836 FFFC8BBC FF FF FF FF FF FF FF FF     
   6837 FFFC8BC4 FF FF FF FF FF FF FF FF     
   6838 FFFC8BCC FF FF FF FF FF FF FF FF     
   6839 FFFC8BD4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 57
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6840 FFFC8BDC FF FF FF FF FF FF FF FF     
   6841 FFFC8BE4 FF FF FF FF FF FF FF FF     
   6842 FFFC8BEC FF FF FF FF FF FF FF FF     
   6843 FFFC8BF4 FF FF FF FF FF FF FF FF     
   6844 FFFC8BFC FF FF FF FF FF FF FF FF     
   6845 FFFC8C04 FF FF FF FF FF FF FF FF     
   6846 FFFC8C0C FF FF FF FF FF FF FF FF     
   6847 FFFC8C14 FF FF FF FF FF FF FF FF     
   6848 FFFC8C1C FF FF FF FF FF FF FF FF     
   6849 FFFC8C24 FF FF FF FF FF FF FF FF     
   6850 FFFC8C2C FF FF FF FF FF FF FF FF     
   6851 FFFC8C34 FF FF FF FF FF FF FF FF     
   6852 FFFC8C3C FF FF FF FF FF FF FF FF     
   6853 FFFC8C44 FF FF FF FF FF FF FF FF     
   6854 FFFC8C4C FF FF FF FF FF FF FF FF     
   6855 FFFC8C54 FF FF FF FF FF FF FF FF     
   6856 FFFC8C5C FF FF FF FF FF FF FF FF     
   6857 FFFC8C64 FF FF FF FF FF FF FF FF     
   6858 FFFC8C6C FF FF FF FF FF FF FF FF     
   6859 FFFC8C74 FF FF FF FF FF FF FF FF     
   6860 FFFC8C7C FF FF FF FF FF FF FF FF     
   6861 FFFC8C84 FF FF FF FF FF FF FF FF     
   6862 FFFC8C8C FF FF FF FF FF FF FF FF     
   6863 FFFC8C94 FF FF FF FF FF FF FF FF     
   6864 FFFC8C9C FF FF FF FF FF FF FF FF     
   6865 FFFC8CA4 FF FF FF FF FF FF FF FF     
   6866 FFFC8CAC FF FF FF FF FF FF FF FF     
   6867 FFFC8CB4 FF FF FF FF FF FF FF FF     
   6868 FFFC8CBC FF FF FF FF FF FF FF FF     
   6869 FFFC8CC4 FF FF FF FF FF FF FF FF     
   6870 FFFC8CCC FF FF FF FF FF FF FF FF     
   6871 FFFC8CD4 FF FF FF FF FF FF FF FF     
   6872 FFFC8CDC FF FF FF FF FF FF FF FF     
   6873 FFFC8CE4 FF FF FF FF FF FF FF FF     
   6874 FFFC8CEC FF FF FF FF FF FF FF FF     
   6875 FFFC8CF4 FF FF FF FF FF FF FF FF     
   6876 FFFC8CFC FF FF FF FF FF FF FF FF     
   6877 FFFC8D04 FF FF FF FF FF FF FF FF     
   6878 FFFC8D0C FF FF FF FF FF FF FF FF     
   6879 FFFC8D14 FF FF FF FF FF FF FF FF     
   6880 FFFC8D1C FF FF FF FF FF FF FF FF     
   6881 FFFC8D24 FF FF FF FF FF FF FF FF     
   6882 FFFC8D2C FF FF FF FF FF FF FF FF     
   6883 FFFC8D34 FF FF FF FF FF FF FF FF     
   6884 FFFC8D3C FF FF FF FF FF FF FF FF     
   6885 FFFC8D44 FF FF FF FF FF FF FF FF     
   6886 FFFC8D4C FF FF FF FF FF FF FF FF     
   6887 FFFC8D54 FF FF FF FF FF FF FF FF     
   6888 FFFC8D5C FF FF FF FF FF FF FF FF     
   6889 FFFC8D64 FF FF FF FF FF FF FF FF     
   6890 FFFC8D6C FF FF FF FF FF FF FF FF     
   6891 FFFC8D74 FF FF FF FF FF FF FF FF     
   6892 FFFC8D7C FF FF FF FF FF FF FF FF     
   6893 FFFC8D84 FF FF FF FF FF FF FF FF     
   6894 FFFC8D8C FF FF FF FF FF FF FF FF     
   6895 FFFC8D94 FF FF FF FF FF FF FF FF     
   6896 FFFC8D9C FF FF FF FF FF FF FF FF     
   6897 FFFC8DA4 FF FF FF FF FF FF FF FF     
   6898 FFFC8DAC FF FF FF FF FF FF FF FF     
   6899 FFFC8DB4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 58
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6900 FFFC8DBC FF FF FF FF FF FF FF FF     
   6901 FFFC8DC4 FF FF FF FF FF FF FF FF     
   6902 FFFC8DCC FF FF FF FF FF FF FF FF     
   6903 FFFC8DD4 FF FF FF FF FF FF FF FF     
   6904 FFFC8DDC FF FF FF FF FF FF FF FF     
   6905 FFFC8DE4 FF FF FF FF FF FF FF FF     
   6906 FFFC8DEC FF FF FF FF FF FF FF FF     
   6907 FFFC8DF4 FF FF FF FF FF FF FF FF     
   6908 FFFC8DFC FF FF FF FF FF FF FF FF     
   6909 FFFC8E04 FF FF FF FF FF FF FF FF     
   6910 FFFC8E0C FF FF FF FF FF FF FF FF     
   6911 FFFC8E14 FF FF FF FF FF FF FF FF     
   6912 FFFC8E1C FF FF FF FF FF FF FF FF     
   6913 FFFC8E24 FF FF FF FF FF FF FF FF     
   6914 FFFC8E2C FF FF FF FF FF FF FF FF     
   6915 FFFC8E34 FF FF FF FF FF FF FF FF     
   6916 FFFC8E3C FF FF FF FF FF FF FF FF     
   6917 FFFC8E44 FF FF FF FF FF FF FF FF     
   6918 FFFC8E4C FF FF FF FF FF FF FF FF     
   6919 FFFC8E54 FF FF FF FF FF FF FF FF     
   6920 FFFC8E5C FF FF FF FF FF FF FF FF     
   6921 FFFC8E64 FF FF FF FF FF FF FF FF     
   6922 FFFC8E6C FF FF FF FF FF FF FF FF     
   6923 FFFC8E74 FF FF FF FF FF FF FF FF     
   6924 FFFC8E7C FF FF FF FF FF FF FF FF     
   6925 FFFC8E84 FF FF FF FF FF FF FF FF     
   6926 FFFC8E8C FF FF FF FF FF FF FF FF     
   6927 FFFC8E94 FF FF FF FF FF FF FF FF     
   6928 FFFC8E9C FF FF FF FF FF FF FF FF     
   6929 FFFC8EA4 FF FF FF FF FF FF FF FF     
   6930 FFFC8EAC FF FF FF FF FF FF FF FF     
   6931 FFFC8EB4 FF FF FF FF FF FF FF FF     
   6932 FFFC8EBC FF FF FF FF FF FF FF FF     
   6933 FFFC8EC4 FF FF FF FF FF FF FF FF     
   6934 FFFC8ECC FF FF FF FF FF FF FF FF     
   6935 FFFC8ED4 FF FF FF FF FF FF FF FF     
   6936 FFFC8EDC FF FF FF FF FF FF FF FF     
   6937 FFFC8EE4 FF FF FF FF FF FF FF FF     
   6938 FFFC8EEC FF FF FF FF FF FF FF FF     
   6939 FFFC8EF4 FF FF FF FF FF FF FF FF     
   6940 FFFC8EFC FF FF FF FF FF FF FF FF     
   6941 FFFC8F04 FF FF FF FF FF FF FF FF     
   6942 FFFC8F0C FF FF FF FF FF FF FF FF     
   6943 FFFC8F14 FF FF FF FF FF FF FF FF     
   6944 FFFC8F1C FF FF FF FF FF FF FF FF     
   6945 FFFC8F24 FF FF FF FF FF FF FF FF     
   6946 FFFC8F2C FF FF FF FF FF FF FF FF     
   6947 FFFC8F34 FF FF FF FF FF FF FF FF     
   6948 FFFC8F3C FF FF FF FF FF FF FF FF     
   6949 FFFC8F44 FF FF FF FF FF FF FF FF     
   6950 FFFC8F4C FF FF FF FF FF FF FF FF     
   6951 FFFC8F54 FF FF FF FF FF FF FF FF     
   6952 FFFC8F5C FF FF FF FF FF FF FF FF     
   6953 FFFC8F64 FF FF FF FF FF FF FF FF     
   6954 FFFC8F6C FF FF FF FF FF FF FF FF     
   6955 FFFC8F74 FF FF FF FF FF FF FF FF     
   6956 FFFC8F7C FF FF FF FF FF FF FF FF     
   6957 FFFC8F84 FF FF FF FF FF FF FF FF     
   6958 FFFC8F8C FF FF FF FF FF FF FF FF     
   6959 FFFC8F94 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 59
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6960 FFFC8F9C FF FF FF FF FF FF FF FF     
   6961 FFFC8FA4 FF FF FF FF FF FF FF FF     
   6962 FFFC8FAC FF FF FF FF FF FF FF FF     
   6963 FFFC8FB4 FF FF FF FF FF FF FF FF     
   6964 FFFC8FBC FF FF FF FF FF FF FF FF     
   6965 FFFC8FC4 FF FF FF FF FF FF FF FF     
   6966 FFFC8FCC FF FF FF FF FF FF FF FF     
   6967 FFFC8FD4 FF FF FF FF FF FF FF FF     
   6968 FFFC8FDC FF FF FF FF FF FF FF FF     
   6969 FFFC8FE4 FF FF FF FF FF FF FF FF     
   6970 FFFC8FEC FF FF FF FF FF FF FF FF     
   6971 FFFC8FF4 FF FF FF FF FF FF FF FF     
   6972 FFFC8FFC FF FF FF FF FF FF FF FF     
   6973 FFFC9004 FF FF FF FF FF FF FF FF     
   6974 FFFC900C FF FF FF FF FF FF FF FF     
   6975 FFFC9014 FF FF FF FF FF FF FF FF     
   6976 FFFC901C FF FF FF FF FF FF FF FF     
   6977 FFFC9024 FF FF FF FF FF FF FF FF     
   6978 FFFC902C FF FF FF FF FF FF FF FF     
   6979 FFFC9034 FF FF FF FF FF FF FF FF     
   6980 FFFC903C FF FF FF FF FF FF FF FF     
   6981 FFFC9044 FF FF FF FF FF FF FF FF     
   6982 FFFC904C FF FF FF FF FF FF FF FF     
   6983 FFFC9054 FF FF FF FF FF FF FF FF     
   6984 FFFC905C FF FF FF FF FF FF FF FF     
   6985 FFFC9064 FF FF FF FF FF FF FF FF     
   6986 FFFC906C FF FF FF FF FF FF FF FF     
   6987 FFFC9074 FF FF FF FF FF FF FF FF     
   6988 FFFC907C FF FF FF FF FF FF FF FF     
   6989 FFFC9084 FF FF FF FF FF FF FF FF     
   6990 FFFC908C FF FF FF FF FF FF FF FF     
   6991 FFFC9094 FF FF FF FF FF FF FF FF     
   6992 FFFC909C FF FF FF FF FF FF FF FF     
   6993 FFFC90A4 FF FF FF FF FF FF FF FF     
   6994 FFFC90AC FF FF FF FF FF FF FF FF     
   6995 FFFC90B4 FF FF FF FF FF FF FF FF     
   6996 FFFC90BC FF FF FF FF FF FF FF FF     
   6997 FFFC90C4 FF FF FF FF FF FF FF FF     
   6998 FFFC90CC FF FF FF FF FF FF FF FF     
   6999 FFFC90D4 FF FF FF FF FF FF FF FF     
   7000 FFFC90DC FF FF FF FF FF FF FF FF     
   7001 FFFC90E4 FF FF FF FF FF FF FF FF     
   7002 FFFC90EC FF FF FF FF FF FF FF FF     
   7003 FFFC90F4 FF FF FF FF FF FF FF FF     
   7004 FFFC90FC FF FF FF FF FF FF FF FF     
   7005 FFFC9104 FF FF FF FF FF FF FF FF     
   7006 FFFC910C FF FF FF FF FF FF FF FF     
   7007 FFFC9114 FF FF FF FF FF FF FF FF     
   7008 FFFC911C FF FF FF FF FF FF FF FF     
   7009 FFFC9124 FF FF FF FF FF FF FF FF     
   7010 FFFC912C FF FF FF FF FF FF FF FF     
   7011 FFFC9134 FF FF FF FF FF FF FF FF     
   7012 FFFC913C FF FF FF FF FF FF FF FF     
   7013 FFFC9144 FF FF FF FF FF FF FF FF     
   7014 FFFC914C FF FF FF FF FF FF FF FF     
   7015 FFFC9154 FF FF FF FF FF FF FF FF     
   7016 FFFC915C FF FF FF FF FF FF FF FF     
   7017 FFFC9164 FF FF FF FF FF FF FF FF     
   7018 FFFC916C FF FF FF FF FF FF FF FF     
   7019 FFFC9174 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 60
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7020 FFFC917C FF FF FF FF FF FF FF FF     
   7021 FFFC9184 FF FF FF FF FF FF FF FF     
   7022 FFFC918C FF FF FF FF FF FF FF FF     
   7023 FFFC9194 FF FF FF FF FF FF FF FF     
   7024 FFFC919C FF FF FF FF FF FF FF FF     
   7025 FFFC91A4 FF FF FF FF FF FF FF FF     
   7026 FFFC91AC FF FF FF FF FF FF FF FF     
   7027 FFFC91B4 FF FF FF FF FF FF FF FF     
   7028 FFFC91BC FF FF FF FF FF FF FF FF     
   7029 FFFC91C4 FF FF FF FF FF FF FF FF     
   7030 FFFC91CC FF FF FF FF FF FF FF FF     
   7031 FFFC91D4 FF FF FF FF FF FF FF FF     
   7032 FFFC91DC FF FF FF FF FF FF FF FF     
   7033 FFFC91E4 FF FF FF FF FF FF FF FF     
   7034 FFFC91EC FF FF FF FF FF FF FF FF     
   7035 FFFC91F4 FF FF FF FF FF FF FF FF     
   7036 FFFC91FC FF FF FF FF FF FF FF FF     
   7037 FFFC9204 FF FF FF FF FF FF FF FF     
   7038 FFFC920C FF FF FF FF FF FF FF FF     
   7039 FFFC9214 FF FF FF FF FF FF FF FF     
   7040 FFFC921C FF FF FF FF FF FF FF FF     
   7041 FFFC9224 FF FF FF FF FF FF FF FF     
   7042 FFFC922C FF FF FF FF FF FF FF FF     
   7043 FFFC9234 FF FF FF FF FF FF FF FF     
   7044 FFFC923C FF FF FF FF FF FF FF FF     
   7045 FFFC9244 FF FF FF FF FF FF FF FF     
   7046 FFFC924C FF FF FF FF FF FF FF FF     
   7047 FFFC9254 FF FF FF FF FF FF FF FF     
   7048 FFFC925C FF FF FF FF FF FF FF FF     
   7049 FFFC9264 FF FF FF FF FF FF FF FF     
   7050 FFFC926C FF FF FF FF FF FF FF FF     
   7051 FFFC9274 FF FF FF FF FF FF FF FF     
   7052 FFFC927C FF FF FF FF FF FF FF FF     
   7053 FFFC9284 FF FF FF FF FF FF FF FF     
   7054 FFFC928C FF FF FF FF FF FF FF FF     
   7055 FFFC9294 FF FF FF FF FF FF FF FF     
   7056 FFFC929C FF FF FF FF FF FF FF FF     
   7057 FFFC92A4 FF FF FF FF FF FF FF FF     
   7058 FFFC92AC FF FF FF FF FF FF FF FF     
   7059 FFFC92B4 FF FF FF FF FF FF FF FF     
   7060 FFFC92BC FF FF FF FF FF FF FF FF     
   7061 FFFC92C4 FF FF FF FF FF FF FF FF     
   7062 FFFC92CC FF FF FF FF FF FF FF FF     
   7063 FFFC92D4 FF FF FF FF FF FF FF FF     
   7064 FFFC92DC FF FF FF FF FF FF FF FF     
   7065 FFFC92E4 FF FF FF FF FF FF FF FF     
   7066 FFFC92EC FF FF FF FF FF FF FF FF     
   7067 FFFC92F4 FF FF FF FF FF FF FF FF     
   7068 FFFC92FC FF FF FF FF FF FF FF FF     
   7069 FFFC9304 FF FF FF FF FF FF FF FF     
   7070 FFFC930C FF FF FF FF FF FF FF FF     
   7071 FFFC9314 FF FF FF FF FF FF FF FF     
   7072 FFFC931C FF FF FF FF FF FF FF FF     
   7073 FFFC9324 FF FF FF FF FF FF FF FF     
   7074 FFFC932C FF FF FF FF FF FF FF FF     
   7075 FFFC9334 FF FF FF FF FF FF FF FF     
   7076 FFFC933C FF FF FF FF FF FF FF FF     
   7077 FFFC9344 FF FF FF FF FF FF FF FF     
   7078 FFFC934C FF FF FF FF FF FF FF FF     
   7079 FFFC9354 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 61
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7080 FFFC935C FF FF FF FF FF FF FF FF     
   7081 FFFC9364 FF FF FF FF FF FF FF FF     
   7082 FFFC936C FF FF FF FF FF FF FF FF     
   7083 FFFC9374 FF FF FF FF FF FF FF FF     
   7084 FFFC937C FF FF FF FF FF FF FF FF     
   7085 FFFC9384 FF FF FF FF FF FF FF FF     
   7086 FFFC938C FF FF FF FF FF FF FF FF     
   7087 FFFC9394 FF FF FF FF FF FF FF FF     
   7088 FFFC939C FF FF FF FF FF FF FF FF     
   7089 FFFC93A4 FF FF FF FF FF FF FF FF     
   7090 FFFC93AC FF FF FF FF FF FF FF FF     
   7091 FFFC93B4 FF FF FF FF FF FF FF FF     
   7092 FFFC93BC FF FF FF FF FF FF FF FF     
   7093 FFFC93C4 FF FF FF FF FF FF FF FF     
   7094 FFFC93CC FF FF FF FF FF FF FF FF     
   7095 FFFC93D4 FF FF FF FF FF FF FF FF     
   7096 FFFC93DC FF FF FF FF FF FF FF FF     
   7097 FFFC93E4 FF FF FF FF FF FF FF FF     
   7098 FFFC93EC FF FF FF FF FF FF FF FF     
   7099 FFFC93F4 FF FF FF FF FF FF FF FF     
   7100 FFFC93FC FF FF FF FF FF FF FF FF     
   7101 FFFC9404 FF FF FF FF FF FF FF FF     
   7102 FFFC940C FF FF FF FF FF FF FF FF     
   7103 FFFC9414 FF FF FF FF FF FF FF FF     
   7104 FFFC941C FF FF FF FF FF FF FF FF     
   7105 FFFC9424 FF FF FF FF FF FF FF FF     
   7106 FFFC942C FF FF FF FF FF FF FF FF     
   7107 FFFC9434 FF FF FF FF FF FF FF FF     
   7108 FFFC943C FF FF FF FF FF FF FF FF     
   7109 FFFC9444 FF FF FF FF FF FF FF FF     
   7110 FFFC944C FF FF FF FF FF FF FF FF     
   7111 FFFC9454 FF FF FF FF FF FF FF FF     
   7112 FFFC945C FF FF FF FF FF FF FF FF     
   7113 FFFC9464 FF FF FF FF FF FF FF FF     
   7114 FFFC946C FF FF FF FF FF FF FF FF     
   7115 FFFC9474 FF FF FF FF FF FF FF FF     
   7116 FFFC947C FF FF FF FF FF FF FF FF     
   7117 FFFC9484 FF FF FF FF FF FF FF FF     
   7118 FFFC948C FF FF FF FF FF FF FF FF     
   7119 FFFC9494 FF FF FF FF FF FF FF FF     
   7120 FFFC949C FF FF FF FF FF FF FF FF     
   7121 FFFC94A4 FF FF FF FF FF FF FF FF     
   7122 FFFC94AC FF FF FF FF FF FF FF FF     
   7123 FFFC94B4 FF FF FF FF FF FF FF FF     
   7124 FFFC94BC FF FF FF FF FF FF FF FF     
   7125 FFFC94C4 FF FF FF FF FF FF FF FF     
   7126 FFFC94CC FF FF FF FF FF FF FF FF     
   7127 FFFC94D4 FF FF FF FF FF FF FF FF     
   7128 FFFC94DC FF FF FF FF FF FF FF FF     
   7129 FFFC94E4 FF FF FF FF FF FF FF FF     
   7130 FFFC94EC FF FF FF FF FF FF FF FF     
   7131 FFFC94F4 FF FF FF FF FF FF FF FF     
   7132 FFFC94FC FF FF FF FF FF FF FF FF     
   7133 FFFC9504 FF FF FF FF FF FF FF FF     
   7134 FFFC950C FF FF FF FF FF FF FF FF     
   7135 FFFC9514 FF FF FF FF FF FF FF FF     
   7136 FFFC951C FF FF FF FF FF FF FF FF     
   7137 FFFC9524 FF FF FF FF FF FF FF FF     
   7138 FFFC952C FF FF FF FF FF FF FF FF     
   7139 FFFC9534 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 62
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7140 FFFC953C FF FF FF FF FF FF FF FF     
   7141 FFFC9544 FF FF FF FF FF FF FF FF     
   7142 FFFC954C FF FF FF FF FF FF FF FF     
   7143 FFFC9554 FF FF FF FF FF FF FF FF     
   7144 FFFC955C FF FF FF FF FF FF FF FF     
   7145 FFFC9564 FF FF FF FF FF FF FF FF     
   7146 FFFC956C FF FF FF FF FF FF FF FF     
   7147 FFFC9574 FF FF FF FF FF FF FF FF     
   7148 FFFC957C FF FF FF FF FF FF FF FF     
   7149 FFFC9584 FF FF FF FF FF FF FF FF     
   7150 FFFC958C FF FF FF FF FF FF FF FF     
   7151 FFFC9594 FF FF FF FF FF FF FF FF     
   7152 FFFC959C FF FF FF FF FF FF FF FF     
   7153 FFFC95A4 FF FF FF FF FF FF FF FF     
   7154 FFFC95AC FF FF FF FF FF FF FF FF     
   7155 FFFC95B4 FF FF FF FF FF FF FF FF     
   7156 FFFC95BC FF FF FF FF FF FF FF FF     
   7157 FFFC95C4 FF FF FF FF FF FF FF FF     
   7158 FFFC95CC FF FF FF FF FF FF FF FF     
   7159 FFFC95D4 FF FF FF FF FF FF FF FF     
   7160 FFFC95DC FF FF FF FF FF FF FF FF     
   7161 FFFC95E4 FF FF FF FF FF FF FF FF     
   7162 FFFC95EC FF FF FF FF FF FF FF FF     
   7163 FFFC95F4 FF FF FF FF FF FF FF FF     
   7164 FFFC95FC FF FF FF FF FF FF FF FF     
   7165 FFFC9604 FF FF FF FF FF FF FF FF     
   7166 FFFC960C FF FF FF FF FF FF FF FF     
   7167 FFFC9614 FF FF FF FF FF FF FF FF     
   7168 FFFC961C FF FF FF FF FF FF FF FF     
   7169 FFFC9624 FF FF FF FF FF FF FF FF     
   7170 FFFC962C FF FF FF FF FF FF FF FF     
   7171 FFFC9634 FF FF FF FF FF FF FF FF     
   7172 FFFC963C FF FF FF FF FF FF FF FF     
   7173 FFFC9644 FF FF FF FF FF FF FF FF     
   7174 FFFC964C FF FF FF FF FF FF FF FF     
   7175 FFFC9654 FF FF FF FF FF FF FF FF     
   7176 FFFC965C FF FF FF FF FF FF FF FF     
   7177 FFFC9664 FF FF FF FF FF FF FF FF     
   7178 FFFC966C FF FF FF FF FF FF FF FF     
   7179 FFFC9674 FF FF FF FF FF FF FF FF     
   7180 FFFC967C FF FF FF FF FF FF FF FF     
   7181 FFFC9684 FF FF FF FF FF FF FF FF     
   7182 FFFC968C FF FF FF FF FF FF FF FF     
   7183 FFFC9694 FF FF FF FF FF FF FF FF     
   7184 FFFC969C FF FF FF FF FF FF FF FF     
   7185 FFFC96A4 FF FF FF FF FF FF FF FF     
   7186 FFFC96AC FF FF FF FF FF FF FF FF     
   7187 FFFC96B4 FF FF FF FF FF FF FF FF     
   7188 FFFC96BC FF FF FF FF FF FF FF FF     
   7189 FFFC96C4 FF FF FF FF FF FF FF FF     
   7190 FFFC96CC FF FF FF FF FF FF FF FF     
   7191 FFFC96D4 FF FF FF FF FF FF FF FF     
   7192 FFFC96DC FF FF FF FF FF FF FF FF     
   7193 FFFC96E4 FF FF FF FF FF FF FF FF     
   7194 FFFC96EC FF FF FF FF FF FF FF FF     
   7195 FFFC96F4 FF FF FF FF FF FF FF FF     
   7196 FFFC96FC FF FF FF FF FF FF FF FF     
   7197 FFFC9704 FF FF FF FF FF FF FF FF     
   7198 FFFC970C FF FF FF FF FF FF FF FF     
   7199 FFFC9714 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 63
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7200 FFFC971C FF FF FF FF FF FF FF FF     
   7201 FFFC9724 FF FF FF FF FF FF FF FF     
   7202 FFFC972C FF FF FF FF FF FF FF FF     
   7203 FFFC9734 FF FF FF FF FF FF FF FF     
   7204 FFFC973C FF FF FF FF FF FF FF FF     
   7205 FFFC9744 FF FF FF FF FF FF FF FF     
   7206 FFFC974C FF FF FF FF FF FF FF FF     
   7207 FFFC9754 FF FF FF FF FF FF FF FF     
   7208 FFFC975C FF FF FF FF FF FF FF FF     
   7209 FFFC9764 FF FF FF FF FF FF FF FF     
   7210 FFFC976C FF FF FF FF FF FF FF FF     
   7211 FFFC9774 FF FF FF FF FF FF FF FF     
   7212 FFFC977C FF FF FF FF FF FF FF FF     
   7213 FFFC9784 FF FF FF FF FF FF FF FF     
   7214 FFFC978C FF FF FF FF FF FF FF FF     
   7215 FFFC9794 FF FF FF FF FF FF FF FF     
   7216 FFFC979C FF FF FF FF FF FF FF FF     
   7217 FFFC97A4 FF FF FF FF FF FF FF FF     
   7218 FFFC97AC FF FF FF FF FF FF FF FF     
   7219 FFFC97B4 FF FF FF FF FF FF FF FF     
   7220 FFFC97BC FF FF FF FF FF FF FF FF     
   7221 FFFC97C4 FF FF FF FF FF FF FF FF     
   7222 FFFC97CC FF FF FF FF FF FF FF FF     
   7223 FFFC97D4 FF FF FF FF FF FF FF FF     
   7224 FFFC97DC FF FF FF FF FF FF FF FF     
   7225 FFFC97E4 FF FF FF FF FF FF FF FF     
   7226 FFFC97EC FF FF FF FF FF FF FF FF     
   7227 FFFC97F4 FF FF FF FF FF FF FF FF     
   7228 FFFC97FC FF FF FF FF FF FF FF FF     
   7229 FFFC9804 FF FF FF FF FF FF FF FF     
   7230 FFFC980C FF FF FF FF FF FF FF FF     
   7231 FFFC9814 FF FF FF FF FF FF FF FF     
   7232 FFFC981C FF FF FF FF FF FF FF FF     
   7233 FFFC9824 FF FF FF FF FF FF FF FF     
   7234 FFFC982C FF FF FF FF FF FF FF FF     
   7235 FFFC9834 FF FF FF FF FF FF FF FF     
   7236 FFFC983C FF FF FF FF FF FF FF FF     
   7237 FFFC9844 FF FF FF FF FF FF FF FF     
   7238 FFFC984C FF FF FF FF FF FF FF FF     
   7239 FFFC9854 FF FF FF FF FF FF FF FF     
   7240 FFFC985C FF FF FF FF FF FF FF FF     
   7241 FFFC9864 FF FF FF FF FF FF FF FF     
   7242 FFFC986C FF FF FF FF FF FF FF FF     
   7243 FFFC9874 FF FF FF FF FF FF FF FF     
   7244 FFFC987C FF FF FF FF FF FF FF FF     
   7245 FFFC9884 FF FF FF FF FF FF FF FF     
   7246 FFFC988C FF FF FF FF FF FF FF FF     
   7247 FFFC9894 FF FF FF FF FF FF FF FF     
   7248 FFFC989C FF FF FF FF FF FF FF FF     
   7249 FFFC98A4 FF FF FF FF FF FF FF FF     
   7250 FFFC98AC FF FF FF FF FF FF FF FF     
   7251 FFFC98B4 FF FF FF FF FF FF FF FF     
   7252 FFFC98BC FF FF FF FF FF FF FF FF     
   7253 FFFC98C4 FF FF FF FF FF FF FF FF     
   7254 FFFC98CC FF FF FF FF FF FF FF FF     
   7255 FFFC98D4 FF FF FF FF FF FF FF FF     
   7256 FFFC98DC FF FF FF FF FF FF FF FF     
   7257 FFFC98E4 FF FF FF FF FF FF FF FF     
   7258 FFFC98EC FF FF FF FF FF FF FF FF     
   7259 FFFC98F4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 64
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7260 FFFC98FC FF FF FF FF FF FF FF FF     
   7261 FFFC9904 FF FF FF FF FF FF FF FF     
   7262 FFFC990C FF FF FF FF FF FF FF FF     
   7263 FFFC9914 FF FF FF FF FF FF FF FF     
   7264 FFFC991C FF FF FF FF FF FF FF FF     
   7265 FFFC9924 FF FF FF FF FF FF FF FF     
   7266 FFFC992C FF FF FF FF FF FF FF FF     
   7267 FFFC9934 FF FF FF FF FF FF FF FF     
   7268 FFFC993C FF FF FF FF FF FF FF FF     
   7269 FFFC9944 FF FF FF FF FF FF FF FF     
   7270 FFFC994C FF FF FF FF FF FF FF FF     
   7271 FFFC9954 FF FF FF FF FF FF FF FF     
   7272 FFFC995C FF FF FF FF FF FF FF FF     
   7273 FFFC9964 FF FF FF FF FF FF FF FF     
   7274 FFFC996C FF FF FF FF FF FF FF FF     
   7275 FFFC9974 FF FF FF FF FF FF FF FF     
   7276 FFFC997C FF FF FF FF FF FF FF FF     
   7277 FFFC9984 FF FF FF FF FF FF FF FF     
   7278 FFFC998C FF FF FF FF FF FF FF FF     
   7279 FFFC9994 FF FF FF FF FF FF FF FF     
   7280 FFFC999C FF FF FF FF FF FF FF FF     
   7281 FFFC99A4 FF FF FF FF FF FF FF FF     
   7282 FFFC99AC FF FF FF FF FF FF FF FF     
   7283 FFFC99B4 FF FF FF FF FF FF FF FF     
   7284 FFFC99BC FF FF FF FF FF FF FF FF     
   7285 FFFC99C4 FF FF FF FF FF FF FF FF     
   7286 FFFC99CC FF FF FF FF FF FF FF FF     
   7287 FFFC99D4 FF FF FF FF FF FF FF FF     
   7288 FFFC99DC FF FF FF FF FF FF FF FF     
   7289 FFFC99E4 FF FF FF FF FF FF FF FF     
   7290 FFFC99EC FF FF FF FF FF FF FF FF     
   7291 FFFC99F4 FF FF FF FF FF FF FF FF     
   7292 FFFC99FC FF FF FF FF FF FF FF FF     
   7293 FFFC9A04 FF FF FF FF FF FF FF FF     
   7294 FFFC9A0C FF FF FF FF FF FF FF FF     
   7295 FFFC9A14 FF FF FF FF FF FF FF FF     
   7296 FFFC9A1C FF FF FF FF FF FF FF FF     
   7297 FFFC9A24 FF FF FF FF FF FF FF FF     
   7298 FFFC9A2C FF FF FF FF FF FF FF FF     
   7299 FFFC9A34 FF FF FF FF FF FF FF FF     
   7300 FFFC9A3C FF FF FF FF FF FF FF FF     
   7301 FFFC9A44 FF FF FF FF FF FF FF FF     
   7302 FFFC9A4C FF FF FF FF FF FF FF FF     
   7303 FFFC9A54 FF FF FF FF FF FF FF FF     
   7304 FFFC9A5C FF FF FF FF FF FF FF FF     
   7305 FFFC9A64 FF FF FF FF FF FF FF FF     
   7306 FFFC9A6C FF FF FF FF FF FF FF FF     
   7307 FFFC9A74 FF FF FF FF FF FF FF FF     
   7308 FFFC9A7C FF FF FF FF FF FF FF FF     
   7309 FFFC9A84 FF FF FF FF FF FF FF FF     
   7310 FFFC9A8C FF FF FF FF FF FF FF FF     
   7311 FFFC9A94 FF FF FF FF FF FF FF FF     
   7312 FFFC9A9C FF FF FF FF FF FF FF FF     
   7313 FFFC9AA4 FF FF FF FF FF FF FF FF     
   7314 FFFC9AAC FF FF FF FF FF FF FF FF     
   7315 FFFC9AB4 FF FF FF FF FF FF FF FF     
   7316 FFFC9ABC FF FF FF FF FF FF FF FF     
   7317 FFFC9AC4 FF FF FF FF FF FF FF FF     
   7318 FFFC9ACC FF FF FF FF FF FF FF FF     
   7319 FFFC9AD4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 65
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7320 FFFC9ADC FF FF FF FF FF FF FF FF     
   7321 FFFC9AE4 FF FF FF FF FF FF FF FF     
   7322 FFFC9AEC FF FF FF FF FF FF FF FF     
   7323 FFFC9AF4 FF FF FF FF FF FF FF FF     
   7324 FFFC9AFC FF FF FF FF FF FF FF FF     
   7325 FFFC9B04 FF FF FF FF FF FF FF FF     
   7326 FFFC9B0C FF FF FF FF FF FF FF FF     
   7327 FFFC9B14 FF FF FF FF FF FF FF FF     
   7328 FFFC9B1C FF FF FF FF FF FF FF FF     
   7329 FFFC9B24 FF FF FF FF FF FF FF FF     
   7330 FFFC9B2C FF FF FF FF FF FF FF FF     
   7331 FFFC9B34 FF FF FF FF FF FF FF FF     
   7332 FFFC9B3C FF FF FF FF FF FF FF FF     
   7333 FFFC9B44 FF FF FF FF FF FF FF FF     
   7334 FFFC9B4C FF FF FF FF FF FF FF FF     
   7335 FFFC9B54 FF FF FF FF FF FF FF FF     
   7336 FFFC9B5C FF FF FF FF FF FF FF FF     
   7337 FFFC9B64 FF FF FF FF FF FF FF FF     
   7338 FFFC9B6C FF FF FF FF FF FF FF FF     
   7339 FFFC9B74 FF FF FF FF FF FF FF FF     
   7340 FFFC9B7C FF FF FF FF FF FF FF FF     
   7341 FFFC9B84 FF FF FF FF FF FF FF FF     
   7342 FFFC9B8C FF FF FF FF FF FF FF FF     
   7343 FFFC9B94 FF FF FF FF FF FF FF FF     
   7344 FFFC9B9C FF FF FF FF FF FF FF FF     
   7345 FFFC9BA4 FF FF FF FF FF FF FF FF     
   7346 FFFC9BAC FF FF FF FF FF FF FF FF     
   7347 FFFC9BB4 FF FF FF FF FF FF FF FF     
   7348 FFFC9BBC FF FF FF FF FF FF FF FF     
   7349 FFFC9BC4 FF FF FF FF FF FF FF FF     
   7350 FFFC9BCC FF FF FF FF FF FF FF FF     
   7351 FFFC9BD4 FF FF FF FF FF FF FF FF     
   7352 FFFC9BDC FF FF FF FF FF FF FF FF     
   7353 FFFC9BE4 FF FF FF FF FF FF FF FF     
   7354 FFFC9BEC FF FF FF FF FF FF FF FF     
   7355 FFFC9BF4 FF FF FF FF FF FF FF FF     
   7356 FFFC9BFC FF FF FF FF FF FF FF FF     
   7357 FFFC9C04 FF FF FF FF FF FF FF FF     
   7358 FFFC9C0C FF FF FF FF FF FF FF FF     
   7359 FFFC9C14 FF FF FF FF FF FF FF FF     
   7360 FFFC9C1C FF FF FF FF FF FF FF FF     
   7361 FFFC9C24 FF FF FF FF FF FF FF FF     
   7362 FFFC9C2C FF FF FF FF FF FF FF FF     
   7363 FFFC9C34 FF FF FF FF FF FF FF FF     
   7364 FFFC9C3C FF FF FF FF FF FF FF FF     
   7365 FFFC9C44 FF FF FF FF FF FF FF FF     
   7366 FFFC9C4C FF FF FF FF FF FF FF FF     
   7367 FFFC9C54 FF FF FF FF FF FF FF FF     
   7368 FFFC9C5C FF FF FF FF FF FF FF FF     
   7369 FFFC9C64 FF FF FF FF FF FF FF FF     
   7370 FFFC9C6C FF FF FF FF FF FF FF FF     
   7371 FFFC9C74 FF FF FF FF FF FF FF FF     
   7372 FFFC9C7C FF FF FF FF FF FF FF FF     
   7373 FFFC9C84 FF FF FF FF FF FF FF FF     
   7374 FFFC9C8C FF FF FF FF FF FF FF FF     
   7375 FFFC9C94 FF FF FF FF FF FF FF FF     
   7376 FFFC9C9C FF FF FF FF FF FF FF FF     
   7377 FFFC9CA4 FF FF FF FF FF FF FF FF     
   7378 FFFC9CAC FF FF FF FF FF FF FF FF     
   7379 FFFC9CB4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 66
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7380 FFFC9CBC FF FF FF FF FF FF FF FF     
   7381 FFFC9CC4 FF FF FF FF FF FF FF FF     
   7382 FFFC9CCC FF FF FF FF FF FF FF FF     
   7383 FFFC9CD4 FF FF FF FF FF FF FF FF     
   7384 FFFC9CDC FF FF FF FF FF FF FF FF     
   7385 FFFC9CE4 FF FF FF FF FF FF FF FF     
   7386 FFFC9CEC FF FF FF FF FF FF FF FF     
   7387 FFFC9CF4 FF FF FF FF FF FF FF FF     
   7388 FFFC9CFC FF FF FF FF FF FF FF FF     
   7389 FFFC9D04 FF FF FF FF FF FF FF FF     
   7390 FFFC9D0C FF FF FF FF FF FF FF FF     
   7391 FFFC9D14 FF FF FF FF FF FF FF FF     
   7392 FFFC9D1C FF FF FF FF FF FF FF FF     
   7393 FFFC9D24 FF FF FF FF FF FF FF FF     
   7394 FFFC9D2C FF FF FF FF FF FF FF FF     
   7395 FFFC9D34 FF FF FF FF FF FF FF FF     
   7396 FFFC9D3C FF FF FF FF FF FF FF FF     
   7397 FFFC9D44 FF FF FF FF FF FF FF FF     
   7398 FFFC9D4C FF FF FF FF FF FF FF FF     
   7399 FFFC9D54 FF FF FF FF FF FF FF FF     
   7400 FFFC9D5C FF FF FF FF FF FF FF FF     
   7401 FFFC9D64 FF FF FF FF FF FF FF FF     
   7402 FFFC9D6C FF FF FF FF FF FF FF FF     
   7403 FFFC9D74 FF FF FF FF FF FF FF FF     
   7404 FFFC9D7C FF FF FF FF FF FF FF FF     
   7405 FFFC9D84 FF FF FF FF FF FF FF FF     
   7406 FFFC9D8C FF FF FF FF FF FF FF FF     
   7407 FFFC9D94 FF FF FF FF FF FF FF FF     
   7408 FFFC9D9C FF FF FF FF FF FF FF FF     
   7409 FFFC9DA4 FF FF FF FF FF FF FF FF     
   7410 FFFC9DAC FF FF FF FF FF FF FF FF     
   7411 FFFC9DB4 FF FF FF FF FF FF FF FF     
   7412 FFFC9DBC FF FF FF FF FF FF FF FF     
   7413 FFFC9DC4 FF FF FF FF FF FF FF FF     
   7414 FFFC9DCC FF FF FF FF FF FF FF FF     
   7415 FFFC9DD4 FF FF FF FF FF FF FF FF     
   7416 FFFC9DDC FF FF FF FF FF FF FF FF     
   7417 FFFC9DE4 FF FF FF FF FF FF FF FF     
   7418 FFFC9DEC FF FF FF FF FF FF FF FF     
   7419 FFFC9DF4 FF FF FF FF FF FF FF FF     
   7420 FFFC9DFC FF FF FF FF FF FF FF FF     
   7421 FFFC9E04 FF FF FF FF FF FF FF FF     
   7422 FFFC9E0C FF FF FF FF FF FF FF FF     
   7423 FFFC9E14 FF FF FF FF FF FF FF FF     
   7424 FFFC9E1C FF FF FF FF FF FF FF FF     
   7425 FFFC9E24 FF FF FF FF FF FF FF FF     
   7426 FFFC9E2C FF FF FF FF FF FF FF FF     
   7427 FFFC9E34 FF FF FF FF FF FF FF FF     
   7428 FFFC9E3C FF FF FF FF FF FF FF FF     
   7429 FFFC9E44 FF FF FF FF FF FF FF FF     
   7430 FFFC9E4C FF FF FF FF FF FF FF FF     
   7431 FFFC9E54 FF FF FF FF FF FF FF FF     
   7432 FFFC9E5C FF FF FF FF FF FF FF FF     
   7433 FFFC9E64 FF FF FF FF FF FF FF FF     
   7434 FFFC9E6C FF FF FF FF FF FF FF FF     
   7435 FFFC9E74 FF FF FF FF FF FF FF FF     
   7436 FFFC9E7C FF FF FF FF FF FF FF FF     
   7437 FFFC9E84 FF FF FF FF FF FF FF FF     
   7438 FFFC9E8C FF FF FF FF FF FF FF FF     
   7439 FFFC9E94 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 67
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7440 FFFC9E9C FF FF FF FF FF FF FF FF     
   7441 FFFC9EA4 FF FF FF FF FF FF FF FF     
   7442 FFFC9EAC FF FF FF FF FF FF FF FF     
   7443 FFFC9EB4 FF FF FF FF FF FF FF FF     
   7444 FFFC9EBC FF FF FF FF FF FF FF FF     
   7445 FFFC9EC4 FF FF FF FF FF FF FF FF     
   7446 FFFC9ECC FF FF FF FF FF FF FF FF     
   7447 FFFC9ED4 FF FF FF FF FF FF FF FF     
   7448 FFFC9EDC FF FF FF FF FF FF FF FF     
   7449 FFFC9EE4 FF FF FF FF FF FF FF FF     
   7450 FFFC9EEC FF FF FF FF FF FF FF FF     
   7451 FFFC9EF4 FF FF FF FF FF FF FF FF     
   7452 FFFC9EFC FF FF FF FF FF FF FF FF     
   7453 FFFC9F04 FF FF FF FF FF FF FF FF     
   7454 FFFC9F0C FF FF FF FF FF FF FF FF     
   7455 FFFC9F14 FF FF FF FF FF FF FF FF     
   7456 FFFC9F1C FF FF FF FF FF FF FF FF     
   7457 FFFC9F24 FF FF FF FF FF FF FF FF     
   7458 FFFC9F2C FF FF FF FF FF FF FF FF     
   7459 FFFC9F34 FF FF FF FF FF FF FF FF     
   7460 FFFC9F3C FF FF FF FF FF FF FF FF     
   7461 FFFC9F44 FF FF FF FF FF FF FF FF     
   7462 FFFC9F4C FF FF FF FF FF FF FF FF     
   7463 FFFC9F54 FF FF FF FF FF FF FF FF     
   7464 FFFC9F5C FF FF FF FF FF FF FF FF     
   7465 FFFC9F64 FF FF FF FF FF FF FF FF     
   7466 FFFC9F6C FF FF FF FF FF FF FF FF     
   7467 FFFC9F74 FF FF FF FF FF FF FF FF     
   7468 FFFC9F7C FF FF FF FF FF FF FF FF     
   7469 FFFC9F84 FF FF FF FF FF FF FF FF     
   7470 FFFC9F8C FF FF FF FF FF FF FF FF     
   7471 FFFC9F94 FF FF FF FF FF FF FF FF     
   7472 FFFC9F9C FF FF FF FF FF FF FF FF     
   7473 FFFC9FA4 FF FF FF FF FF FF FF FF     
   7474 FFFC9FAC FF FF FF FF FF FF FF FF     
   7475 FFFC9FB4 FF FF FF FF FF FF FF FF     
   7476 FFFC9FBC FF FF FF FF FF FF FF FF     
   7477 FFFC9FC4 FF FF FF FF FF FF FF FF     
   7478 FFFC9FCC FF FF FF FF FF FF FF FF     
   7479 FFFC9FD4 FF FF FF FF FF FF FF FF     
   7480 FFFC9FDC FF FF FF FF FF FF FF FF     
   7481 FFFC9FE4 FF FF FF FF FF FF FF FF     
   7482 FFFC9FEC FF FF FF FF FF FF FF FF     
   7483 FFFC9FF4 FF FF FF FF FF FF FF FF     
   7484 FFFC9FFC FF FF FF FF FF FF FF FF     
   7485 FFFCA004 FF FF FF FF FF FF FF FF     
   7486 FFFCA00C FF FF FF FF FF FF FF FF     
   7487 FFFCA014 FF FF FF FF FF FF FF FF     
   7488 FFFCA01C FF FF FF FF FF FF FF FF     
   7489 FFFCA024 FF FF FF FF FF FF FF FF     
   7490 FFFCA02C FF FF FF FF FF FF FF FF     
   7491 FFFCA034 FF FF FF FF FF FF FF FF     
   7492 FFFCA03C FF FF FF FF FF FF FF FF     
   7493 FFFCA044 FF FF FF FF FF FF FF FF     
   7494 FFFCA04C FF FF FF FF FF FF FF FF     
   7495 FFFCA054 FF FF FF FF FF FF FF FF     
   7496 FFFCA05C FF FF FF FF FF FF FF FF     
   7497 FFFCA064 FF FF FF FF FF FF FF FF     
   7498 FFFCA06C FF FF FF FF FF FF FF FF     
   7499 FFFCA074 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 68
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7500 FFFCA07C FF FF FF FF FF FF FF FF     
   7501 FFFCA084 FF FF FF FF FF FF FF FF     
   7502 FFFCA08C FF FF FF FF FF FF FF FF     
   7503 FFFCA094 FF FF FF FF FF FF FF FF     
   7504 FFFCA09C FF FF FF FF FF FF FF FF     
   7505 FFFCA0A4 FF FF FF FF FF FF FF FF     
   7506 FFFCA0AC FF FF FF FF FF FF FF FF     
   7507 FFFCA0B4 FF FF FF FF FF FF FF FF     
   7508 FFFCA0BC FF FF FF FF FF FF FF FF     
   7509 FFFCA0C4 FF FF FF FF FF FF FF FF     
   7510 FFFCA0CC FF FF FF FF FF FF FF FF     
   7511 FFFCA0D4 FF FF FF FF FF FF FF FF     
   7512 FFFCA0DC FF FF FF FF FF FF FF FF     
   7513 FFFCA0E4 FF FF FF FF FF FF FF FF     
   7514 FFFCA0EC FF FF FF FF FF FF FF FF     
   7515 FFFCA0F4 FF FF FF FF FF FF FF FF     
   7516 FFFCA0FC FF FF FF FF FF FF FF FF     
   7517 FFFCA104 FF FF FF FF FF FF FF FF     
   7518 FFFCA10C FF FF FF FF FF FF FF FF     
   7519 FFFCA114 FF FF FF FF FF FF FF FF     
   7520 FFFCA11C FF FF FF FF FF FF FF FF     
   7521 FFFCA124 FF FF FF FF FF FF FF FF     
   7522 FFFCA12C FF FF FF FF FF FF FF FF     
   7523 FFFCA134 FF FF FF FF FF FF FF FF     
   7524 FFFCA13C FF FF FF FF FF FF FF FF     
   7525 FFFCA144 FF FF FF FF FF FF FF FF     
   7526 FFFCA14C FF FF FF FF FF FF FF FF     
   7527 FFFCA154 FF FF FF FF FF FF FF FF     
   7528 FFFCA15C FF FF FF FF FF FF FF FF     
   7529 FFFCA164 FF FF FF FF FF FF FF FF     
   7530 FFFCA16C FF FF FF FF FF FF FF FF     
   7531 FFFCA174 FF FF FF FF FF FF FF FF     
   7532 FFFCA17C FF FF FF FF FF FF FF FF     
   7533 FFFCA184 FF FF FF FF FF FF FF FF     
   7534 FFFCA18C FF FF FF FF FF FF FF FF     
   7535 FFFCA194 FF FF FF FF FF FF FF FF     
   7536 FFFCA19C FF FF FF FF FF FF FF FF     
   7537 FFFCA1A4 FF FF FF FF FF FF FF FF     
   7538 FFFCA1AC FF FF FF FF FF FF FF FF     
   7539 FFFCA1B4 FF FF FF FF FF FF FF FF     
   7540 FFFCA1BC FF FF FF FF FF FF FF FF     
   7541 FFFCA1C4 FF FF FF FF FF FF FF FF     
   7542 FFFCA1CC FF FF FF FF FF FF FF FF     
   7543 FFFCA1D4 FF FF FF FF FF FF FF FF     
   7544 FFFCA1DC FF FF FF FF FF FF FF FF     
   7545 FFFCA1E4 FF FF FF FF FF FF FF FF     
   7546 FFFCA1EC FF FF FF FF FF FF FF FF     
   7547 FFFCA1F4 FF FF FF FF FF FF FF FF     
   7548 FFFCA1FC FF FF FF FF FF FF FF FF     
   7549 FFFCA204 FF FF FF FF FF FF FF FF     
   7550 FFFCA20C FF FF FF FF FF FF FF FF     
   7551 FFFCA214 FF FF FF FF FF FF FF FF     
   7552 FFFCA21C FF FF FF FF FF FF FF FF     
   7553 FFFCA224 FF FF FF FF FF FF FF FF     
   7554 FFFCA22C FF FF FF FF FF FF FF FF     
   7555 FFFCA234 FF FF FF FF FF FF FF FF     
   7556 FFFCA23C FF FF FF FF FF FF FF FF     
   7557 FFFCA244 FF FF FF FF FF FF FF FF     
   7558 FFFCA24C FF FF FF FF FF FF FF FF     
   7559 FFFCA254 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 69
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7560 FFFCA25C FF FF FF FF FF FF FF FF     
   7561 FFFCA264 FF FF FF FF FF FF FF FF     
   7562 FFFCA26C FF FF FF FF FF FF FF FF     
   7563 FFFCA274 FF FF FF FF FF FF FF FF     
   7564 FFFCA27C FF FF FF FF FF FF FF FF     
   7565 FFFCA284 FF FF FF FF FF FF FF FF     
   7566 FFFCA28C FF FF FF FF FF FF FF FF     
   7567 FFFCA294 FF FF FF FF FF FF FF FF     
   7568 FFFCA29C FF FF FF FF FF FF FF FF     
   7569 FFFCA2A4 FF FF FF FF FF FF FF FF     
   7570 FFFCA2AC FF FF FF FF FF FF FF FF     
   7571 FFFCA2B4 FF FF FF FF FF FF FF FF     
   7572 FFFCA2BC FF FF FF FF FF FF FF FF     
   7573 FFFCA2C4 FF FF FF FF FF FF FF FF     
   7574 FFFCA2CC FF FF FF FF FF FF FF FF     
   7575 FFFCA2D4 FF FF FF FF FF FF FF FF     
   7576 FFFCA2DC FF FF FF FF FF FF FF FF     
   7577 FFFCA2E4 FF FF FF FF FF FF FF FF     
   7578 FFFCA2EC FF FF FF FF FF FF FF FF     
   7579 FFFCA2F4 FF FF FF FF FF FF FF FF     
   7580 FFFCA2FC FF FF FF FF FF FF FF FF     
   7581 FFFCA304 FF FF FF FF FF FF FF FF     
   7582 FFFCA30C FF FF FF FF FF FF FF FF     
   7583 FFFCA314 FF FF FF FF FF FF FF FF     
   7584 FFFCA31C FF FF FF FF FF FF FF FF     
   7585 FFFCA324 FF FF FF FF FF FF FF FF     
   7586 FFFCA32C FF FF FF FF FF FF FF FF     
   7587 FFFCA334 FF FF FF FF FF FF FF FF     
   7588 FFFCA33C FF FF FF FF FF FF FF FF     
   7589 FFFCA344 FF FF FF FF FF FF FF FF     
   7590 FFFCA34C FF FF FF FF FF FF FF FF     
   7591 FFFCA354 FF FF FF FF FF FF FF FF     
   7592 FFFCA35C FF FF FF FF FF FF FF FF     
   7593 FFFCA364 FF FF FF FF FF FF FF FF     
   7594 FFFCA36C FF FF FF FF FF FF FF FF     
   7595 FFFCA374 FF FF FF FF FF FF FF FF     
   7596 FFFCA37C FF FF FF FF FF FF FF FF     
   7597 FFFCA384 FF FF FF FF FF FF FF FF     
   7598 FFFCA38C FF FF FF FF FF FF FF FF     
   7599 FFFCA394 FF FF FF FF FF FF FF FF     
   7600 FFFCA39C FF FF FF FF FF FF FF FF     
   7601 FFFCA3A4 FF FF FF FF FF FF FF FF     
   7602 FFFCA3AC FF FF FF FF FF FF FF FF     
   7603 FFFCA3B4 FF FF FF FF FF FF FF FF     
   7604 FFFCA3BC FF FF FF FF FF FF FF FF     
   7605 FFFCA3C4 FF FF FF FF FF FF FF FF     
   7606 FFFCA3CC FF FF FF FF FF FF FF FF     
   7607 FFFCA3D4 FF FF FF FF FF FF FF FF     
   7608 FFFCA3DC FF FF FF FF FF FF FF FF     
   7609 FFFCA3E4 FF FF FF FF FF FF FF FF     
   7610 FFFCA3EC FF FF FF FF FF FF FF FF     
   7611 FFFCA3F4 FF FF FF FF FF FF FF FF     
   7612 FFFCA3FC FF FF FF FF FF FF FF FF     
   7613 FFFCA404 FF FF FF FF FF FF FF FF     
   7614 FFFCA40C FF FF FF FF FF FF FF FF     
   7615 FFFCA414 FF FF FF FF FF FF FF FF     
   7616 FFFCA41C FF FF FF FF FF FF FF FF     
   7617 FFFCA424 FF FF FF FF FF FF FF FF     
   7618 FFFCA42C FF FF FF FF FF FF FF FF     
   7619 FFFCA434 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 70
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7620 FFFCA43C FF FF FF FF FF FF FF FF     
   7621 FFFCA444 FF FF FF FF FF FF FF FF     
   7622 FFFCA44C FF FF FF FF FF FF FF FF     
   7623 FFFCA454 FF FF FF FF FF FF FF FF     
   7624 FFFCA45C FF FF FF FF FF FF FF FF     
   7625 FFFCA464 FF FF FF FF FF FF FF FF     
   7626 FFFCA46C FF FF FF FF FF FF FF FF     
   7627 FFFCA474 FF FF FF FF FF FF FF FF     
   7628 FFFCA47C FF FF FF FF FF FF FF FF     
   7629 FFFCA484 FF FF FF FF FF FF FF FF     
   7630 FFFCA48C FF FF FF FF FF FF FF FF     
   7631 FFFCA494 FF FF FF FF FF FF FF FF     
   7632 FFFCA49C FF FF FF FF FF FF FF FF     
   7633 FFFCA4A4 FF FF FF FF FF FF FF FF     
   7634 FFFCA4AC FF FF FF FF FF FF FF FF     
   7635 FFFCA4B4 FF FF FF FF FF FF FF FF     
   7636 FFFCA4BC FF FF FF FF FF FF FF FF     
   7637 FFFCA4C4 FF FF FF FF FF FF FF FF     
   7638 FFFCA4CC FF FF FF FF FF FF FF FF     
   7639 FFFCA4D4 FF FF FF FF FF FF FF FF     
   7640 FFFCA4DC FF FF FF FF FF FF FF FF     
   7641 FFFCA4E4 FF FF FF FF FF FF FF FF     
   7642 FFFCA4EC FF FF FF FF FF FF FF FF     
   7643 FFFCA4F4 FF FF FF FF FF FF FF FF     
   7644 FFFCA4FC FF FF FF FF FF FF FF FF     
   7645 FFFCA504 FF FF FF FF FF FF FF FF     
   7646 FFFCA50C FF FF FF FF FF FF FF FF     
   7647 FFFCA514 FF FF FF FF FF FF FF FF     
   7648 FFFCA51C FF FF FF FF FF FF FF FF     
   7649 FFFCA524 FF FF FF FF FF FF FF FF     
   7650 FFFCA52C FF FF FF FF FF FF FF FF     
   7651 FFFCA534 FF FF FF FF FF FF FF FF     
   7652 FFFCA53C FF FF FF FF FF FF FF FF     
   7653 FFFCA544 FF FF FF FF FF FF FF FF     
   7654 FFFCA54C FF FF FF FF FF FF FF FF     
   7655 FFFCA554 FF FF FF FF FF FF FF FF     
   7656 FFFCA55C FF FF FF FF FF FF FF FF     
   7657 FFFCA564 FF FF FF FF FF FF FF FF     
   7658 FFFCA56C FF FF FF FF FF FF FF FF     
   7659 FFFCA574 FF FF FF FF FF FF FF FF     
   7660 FFFCA57C FF FF FF FF FF FF FF FF     
   7661 FFFCA584 FF FF FF FF FF FF FF FF     
   7662 FFFCA58C FF FF FF FF FF FF FF FF     
   7663 FFFCA594 FF FF FF FF FF FF FF FF     
   7664 FFFCA59C FF FF FF FF FF FF FF FF     
   7665 FFFCA5A4 FF FF FF FF FF FF FF FF     
   7666 FFFCA5AC FF FF FF FF FF FF FF FF     
   7667 FFFCA5B4 FF FF FF FF FF FF FF FF     
   7668 FFFCA5BC FF FF FF FF FF FF FF FF     
   7669 FFFCA5C4 FF FF FF FF FF FF FF FF     
   7670 FFFCA5CC FF FF FF FF FF FF FF FF     
   7671 FFFCA5D4 FF FF FF FF FF FF FF FF     
   7672 FFFCA5DC FF FF FF FF FF FF FF FF     
   7673 FFFCA5E4 FF FF FF FF FF FF FF FF     
   7674 FFFCA5EC FF FF FF FF FF FF FF FF     
   7675 FFFCA5F4 FF FF FF FF FF FF FF FF     
   7676 FFFCA5FC FF FF FF FF FF FF FF FF     
   7677 FFFCA604 FF FF FF FF FF FF FF FF     
   7678 FFFCA60C FF FF FF FF FF FF FF FF     
   7679 FFFCA614 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 71
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7680 FFFCA61C FF FF FF FF FF FF FF FF     
   7681 FFFCA624 FF FF FF FF FF FF FF FF     
   7682 FFFCA62C FF FF FF FF FF FF FF FF     
   7683 FFFCA634 FF FF FF FF FF FF FF FF     
   7684 FFFCA63C FF FF FF FF FF FF FF FF     
   7685 FFFCA644 FF FF FF FF FF FF FF FF     
   7686 FFFCA64C FF FF FF FF FF FF FF FF     
   7687 FFFCA654 FF FF FF FF FF FF FF FF     
   7688 FFFCA65C FF FF FF FF FF FF FF FF     
   7689 FFFCA664 FF FF FF FF FF FF FF FF     
   7690 FFFCA66C FF FF FF FF FF FF FF FF     
   7691 FFFCA674 FF FF FF FF FF FF FF FF     
   7692 FFFCA67C FF FF FF FF FF FF FF FF     
   7693 FFFCA684 FF FF FF FF FF FF FF FF     
   7694 FFFCA68C FF FF FF FF FF FF FF FF     
   7695 FFFCA694 FF FF FF FF FF FF FF FF     
   7696 FFFCA69C FF FF FF FF FF FF FF FF     
   7697 FFFCA6A4 FF FF FF FF FF FF FF FF     
   7698 FFFCA6AC FF FF FF FF FF FF FF FF     
   7699 FFFCA6B4 FF FF FF FF FF FF FF FF     
   7700 FFFCA6BC FF FF FF FF FF FF FF FF     
   7701 FFFCA6C4 FF FF FF FF FF FF FF FF     
   7702 FFFCA6CC FF FF FF FF FF FF FF FF     
   7703 FFFCA6D4 FF FF FF FF FF FF FF FF     
   7704 FFFCA6DC FF FF FF FF FF FF FF FF     
   7705 FFFCA6E4 FF FF FF FF FF FF FF FF     
   7706 FFFCA6EC FF FF FF FF FF FF FF FF     
   7707 FFFCA6F4 FF FF FF FF FF FF FF FF     
   7708 FFFCA6FC FF FF FF FF FF FF FF FF     
   7709 FFFCA704 FF FF FF FF FF FF FF FF     
   7710 FFFCA70C FF FF FF FF FF FF FF FF     
   7711 FFFCA714 FF FF FF FF FF FF FF FF     
   7712 FFFCA71C FF FF FF FF FF FF FF FF     
   7713 FFFCA724 FF FF FF FF FF FF FF FF     
   7714 FFFCA72C FF FF FF FF FF FF FF FF     
   7715 FFFCA734 FF FF FF FF FF FF FF FF     
   7716 FFFCA73C FF FF FF FF FF FF FF FF     
   7717 FFFCA744 FF FF FF FF FF FF FF FF     
   7718 FFFCA74C FF FF FF FF FF FF FF FF     
   7719 FFFCA754 FF FF FF FF FF FF FF FF     
   7720 FFFCA75C FF FF FF FF FF FF FF FF     
   7721 FFFCA764 FF FF FF FF FF FF FF FF     
   7722 FFFCA76C FF FF FF FF FF FF FF FF     
   7723 FFFCA774 FF FF FF FF FF FF FF FF     
   7724 FFFCA77C FF FF FF FF FF FF FF FF     
   7725 FFFCA784 FF FF FF FF FF FF FF FF     
   7726 FFFCA78C FF FF FF FF FF FF FF FF     
   7727 FFFCA794 FF FF FF FF FF FF FF FF     
   7728 FFFCA79C FF FF FF FF FF FF FF FF     
   7729 FFFCA7A4 FF FF FF FF FF FF FF FF     
   7730 FFFCA7AC FF FF FF FF FF FF FF FF     
   7731 FFFCA7B4 FF FF FF FF FF FF FF FF     
   7732 FFFCA7BC FF FF FF FF FF FF FF FF     
   7733 FFFCA7C4 FF FF FF FF FF FF FF FF     
   7734 FFFCA7CC FF FF FF FF FF FF FF FF     
   7735 FFFCA7D4 FF FF FF FF FF FF FF FF     
   7736 FFFCA7DC FF FF FF FF FF FF FF FF     
   7737 FFFCA7E4 FF FF FF FF FF FF FF FF     
   7738 FFFCA7EC FF FF FF FF FF FF FF FF     
   7739 FFFCA7F4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 72
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7740 FFFCA7FC FF FF FF FF FF FF FF FF     
   7741 FFFCA804 FF FF FF FF FF FF FF FF     
   7742 FFFCA80C FF FF FF FF FF FF FF FF     
   7743 FFFCA814 FF FF FF FF FF FF FF FF     
   7744 FFFCA81C FF FF FF FF FF FF FF FF     
   7745 FFFCA824 FF FF FF FF FF FF FF FF     
   7746 FFFCA82C FF FF FF FF FF FF FF FF     
   7747 FFFCA834 FF FF FF FF FF FF FF FF     
   7748 FFFCA83C FF FF FF FF FF FF FF FF     
   7749 FFFCA844 FF FF FF FF FF FF FF FF     
   7750 FFFCA84C FF FF FF FF FF FF FF FF     
   7751 FFFCA854 FF FF FF FF FF FF FF FF     
   7752 FFFCA85C FF FF FF FF FF FF FF FF     
   7753 FFFCA864 FF FF FF FF FF FF FF FF     
   7754 FFFCA86C FF FF FF FF FF FF FF FF     
   7755 FFFCA874 FF FF FF FF FF FF FF FF     
   7756 FFFCA87C FF FF FF FF FF FF FF FF     
   7757 FFFCA884 FF FF FF FF FF FF FF FF     
   7758 FFFCA88C FF FF FF FF FF FF FF FF     
   7759 FFFCA894 FF FF FF FF FF FF FF FF     
   7760 FFFCA89C FF FF FF FF FF FF FF FF     
   7761 FFFCA8A4 FF FF FF FF FF FF FF FF     
   7762 FFFCA8AC FF FF FF FF FF FF FF FF     
   7763 FFFCA8B4 FF FF FF FF FF FF FF FF     
   7764 FFFCA8BC FF FF FF FF FF FF FF FF     
   7765 FFFCA8C4 FF FF FF FF FF FF FF FF     
   7766 FFFCA8CC FF FF FF FF FF FF FF FF     
   7767 FFFCA8D4 FF FF FF FF FF FF FF FF     
   7768 FFFCA8DC FF FF FF FF FF FF FF FF     
   7769 FFFCA8E4 FF FF FF FF FF FF FF FF     
   7770 FFFCA8EC FF FF FF FF FF FF FF FF     
   7771 FFFCA8F4 FF FF FF FF FF FF FF FF     
   7772 FFFCA8FC FF FF FF FF FF FF FF FF     
   7773 FFFCA904 FF FF FF FF FF FF FF FF     
   7774 FFFCA90C FF FF FF FF FF FF FF FF     
   7775 FFFCA914 FF FF FF FF FF FF FF FF     
   7776 FFFCA91C FF FF FF FF FF FF FF FF     
   7777 FFFCA924 FF FF FF FF FF FF FF FF     
   7778 FFFCA92C FF FF FF FF FF FF FF FF     
   7779 FFFCA934 FF FF FF FF FF FF FF FF     
   7780 FFFCA93C FF FF FF FF FF FF FF FF     
   7781 FFFCA944 FF FF FF FF FF FF FF FF     
   7782 FFFCA94C FF FF FF FF FF FF FF FF     
   7783 FFFCA954 FF FF FF FF FF FF FF FF     
   7784 FFFCA95C FF FF FF FF FF FF FF FF     
   7785 FFFCA964 FF FF FF FF FF FF FF FF     
   7786 FFFCA96C FF FF FF FF FF FF FF FF     
   7787 FFFCA974 FF FF FF FF FF FF FF FF     
   7788 FFFCA97C FF FF FF FF FF FF FF FF     
   7789 FFFCA984 FF FF FF FF FF FF FF FF     
   7790 FFFCA98C FF FF FF FF FF FF FF FF     
   7791 FFFCA994 FF FF FF FF FF FF FF FF     
   7792 FFFCA99C FF FF FF FF FF FF FF FF     
   7793 FFFCA9A4 FF FF FF FF FF FF FF FF     
   7794 FFFCA9AC FF FF FF FF FF FF FF FF     
   7795 FFFCA9B4 FF FF FF FF FF FF FF FF     
   7796 FFFCA9BC FF FF FF FF FF FF FF FF     
   7797 FFFCA9C4 FF FF FF FF FF FF FF FF     
   7798 FFFCA9CC FF FF FF FF FF FF FF FF     
   7799 FFFCA9D4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 73
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7800 FFFCA9DC FF FF FF FF FF FF FF FF     
   7801 FFFCA9E4 FF FF FF FF FF FF FF FF     
   7802 FFFCA9EC FF FF FF FF FF FF FF FF     
   7803 FFFCA9F4 FF FF FF FF FF FF FF FF     
   7804 FFFCA9FC FF FF FF FF FF FF FF FF     
   7805 FFFCAA04 FF FF FF FF FF FF FF FF     
   7806 FFFCAA0C FF FF FF FF FF FF FF FF     
   7807 FFFCAA14 FF FF FF FF FF FF FF FF     
   7808 FFFCAA1C FF FF FF FF FF FF FF FF     
   7809 FFFCAA24 FF FF FF FF FF FF FF FF     
   7810 FFFCAA2C FF FF FF FF FF FF FF FF     
   7811 FFFCAA34 FF FF FF FF FF FF FF FF     
   7812 FFFCAA3C FF FF FF FF FF FF FF FF     
   7813 FFFCAA44 FF FF FF FF FF FF FF FF     
   7814 FFFCAA4C FF FF FF FF FF FF FF FF     
   7815 FFFCAA54 FF FF FF FF FF FF FF FF     
   7816 FFFCAA5C FF FF FF FF FF FF FF FF     
   7817 FFFCAA64 FF FF FF FF FF FF FF FF     
   7818 FFFCAA6C FF FF FF FF FF FF FF FF     
   7819 FFFCAA74 FF FF FF FF FF FF FF FF     
   7820 FFFCAA7C FF FF FF FF FF FF FF FF     
   7821 FFFCAA84 FF FF FF FF FF FF FF FF     
   7822 FFFCAA8C FF FF FF FF FF FF FF FF     
   7823 FFFCAA94 FF FF FF FF FF FF FF FF     
   7824 FFFCAA9C FF FF FF FF FF FF FF FF     
   7825 FFFCAAA4 FF FF FF FF FF FF FF FF     
   7826 FFFCAAAC FF FF FF FF FF FF FF FF     
   7827 FFFCAAB4 FF FF FF FF FF FF FF FF     
   7828 FFFCAABC FF FF FF FF FF FF FF FF     
   7829 FFFCAAC4 FF FF FF FF FF FF FF FF     
   7830 FFFCAACC FF FF FF FF FF FF FF FF     
   7831 FFFCAAD4 FF FF FF FF FF FF FF FF     
   7832 FFFCAADC FF FF FF FF FF FF FF FF     
   7833 FFFCAAE4 FF FF FF FF FF FF FF FF     
   7834 FFFCAAEC FF FF FF FF FF FF FF FF     
   7835 FFFCAAF4 FF FF FF FF FF FF FF FF     
   7836 FFFCAAFC FF FF FF FF FF FF FF FF     
   7837 FFFCAB04 FF FF FF FF FF FF FF FF     
   7838 FFFCAB0C FF FF FF FF FF FF FF FF     
   7839 FFFCAB14 FF FF FF FF FF FF FF FF     
   7840 FFFCAB1C FF FF FF FF FF FF FF FF     
   7841 FFFCAB24 FF FF FF FF FF FF FF FF     
   7842 FFFCAB2C FF FF FF FF FF FF FF FF     
   7843 FFFCAB34 FF FF FF FF FF FF FF FF     
   7844 FFFCAB3C FF FF FF FF FF FF FF FF     
   7845 FFFCAB44 FF FF FF FF FF FF FF FF     
   7846 FFFCAB4C FF FF FF FF FF FF FF FF     
   7847 FFFCAB54 FF FF FF FF FF FF FF FF     
   7848 FFFCAB5C FF FF FF FF FF FF FF FF     
   7849 FFFCAB64 FF FF FF FF FF FF FF FF     
   7850 FFFCAB6C FF FF FF FF FF FF FF FF     
   7851 FFFCAB74 FF FF FF FF FF FF FF FF     
   7852 FFFCAB7C FF FF FF FF FF FF FF FF     
   7853 FFFCAB84 FF FF FF FF FF FF FF FF     
   7854 FFFCAB8C FF FF FF FF FF FF FF FF     
   7855 FFFCAB94 FF FF FF FF FF FF FF FF     
   7856 FFFCAB9C FF FF FF FF FF FF FF FF     
   7857 FFFCABA4 FF FF FF FF FF FF FF FF     
   7858 FFFCABAC FF FF FF FF FF FF FF FF     
   7859 FFFCABB4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 74
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7860 FFFCABBC FF FF FF FF FF FF FF FF     
   7861 FFFCABC4 FF FF FF FF FF FF FF FF     
   7862 FFFCABCC FF FF FF FF FF FF FF FF     
   7863 FFFCABD4 FF FF FF FF FF FF FF FF     
   7864 FFFCABDC FF FF FF FF FF FF FF FF     
   7865 FFFCABE4 FF FF FF FF FF FF FF FF     
   7866 FFFCABEC FF FF FF FF FF FF FF FF     
   7867 FFFCABF4 FF FF FF FF FF FF FF FF     
   7868 FFFCABFC FF FF FF FF FF FF FF FF     
   7869 FFFCAC04 FF FF FF FF FF FF FF FF     
   7870 FFFCAC0C FF FF FF FF FF FF FF FF     
   7871 FFFCAC14 FF FF FF FF FF FF FF FF     
   7872 FFFCAC1C FF FF FF FF FF FF FF FF     
   7873 FFFCAC24 FF FF FF FF FF FF FF FF     
   7874 FFFCAC2C FF FF FF FF FF FF FF FF     
   7875 FFFCAC34 FF FF FF FF FF FF FF FF     
   7876 FFFCAC3C FF FF FF FF FF FF FF FF     
   7877 FFFCAC44 FF FF FF FF FF FF FF FF     
   7878 FFFCAC4C FF FF FF FF FF FF FF FF     
   7879 FFFCAC54 FF FF FF FF FF FF FF FF     
   7880 FFFCAC5C FF FF FF FF FF FF FF FF     
   7881 FFFCAC64 FF FF FF FF FF FF FF FF     
   7882 FFFCAC6C FF FF FF FF FF FF FF FF     
   7883 FFFCAC74 FF FF FF FF FF FF FF FF     
   7884 FFFCAC7C FF FF FF FF FF FF FF FF     
   7885 FFFCAC84 FF FF FF FF FF FF FF FF     
   7886 FFFCAC8C FF FF FF FF FF FF FF FF     
   7887 FFFCAC94 FF FF FF FF FF FF FF FF     
   7888 FFFCAC9C FF FF FF FF FF FF FF FF     
   7889 FFFCACA4 FF FF FF FF FF FF FF FF     
   7890 FFFCACAC FF FF FF FF FF FF FF FF     
   7891 FFFCACB4 FF FF FF FF FF FF FF FF     
   7892 FFFCACBC FF FF FF FF FF FF FF FF     
   7893 FFFCACC4 FF FF FF FF FF FF FF FF     
   7894 FFFCACCC FF FF FF FF FF FF FF FF     
   7895 FFFCACD4 FF FF FF FF FF FF FF FF     
   7896 FFFCACDC FF FF FF FF FF FF FF FF     
   7897 FFFCACE4 FF FF FF FF FF FF FF FF     
   7898 FFFCACEC FF FF FF FF FF FF FF FF     
   7899 FFFCACF4 FF FF FF FF FF FF FF FF     
   7900 FFFCACFC FF FF FF FF FF FF FF FF     
   7901 FFFCAD04 FF FF FF FF FF FF FF FF     
   7902 FFFCAD0C FF FF FF FF FF FF FF FF     
   7903 FFFCAD14 FF FF FF FF FF FF FF FF     
   7904 FFFCAD1C FF FF FF FF FF FF FF FF     
   7905 FFFCAD24 FF FF FF FF FF FF FF FF     
   7906 FFFCAD2C FF FF FF FF FF FF FF FF     
   7907 FFFCAD34 FF FF FF FF FF FF FF FF     
   7908 FFFCAD3C FF FF FF FF FF FF FF FF     
   7909 FFFCAD44 FF FF FF FF FF FF FF FF     
   7910 FFFCAD4C FF FF FF FF FF FF FF FF     
   7911 FFFCAD54 FF FF FF FF FF FF FF FF     
   7912 FFFCAD5C FF FF FF FF FF FF FF FF     
   7913 FFFCAD64 FF FF FF FF FF FF FF FF     
   7914 FFFCAD6C FF FF FF FF FF FF FF FF     
   7915 FFFCAD74 FF FF FF FF FF FF FF FF     
   7916 FFFCAD7C FF FF FF FF FF FF FF FF     
   7917 FFFCAD84 FF FF FF FF FF FF FF FF     
   7918 FFFCAD8C FF FF FF FF FF FF FF FF     
   7919 FFFCAD94 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 75
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7920 FFFCAD9C FF FF FF FF FF FF FF FF     
   7921 FFFCADA4 FF FF FF FF FF FF FF FF     
   7922 FFFCADAC FF FF FF FF FF FF FF FF     
   7923 FFFCADB4 FF FF FF FF FF FF FF FF     
   7924 FFFCADBC FF FF FF FF FF FF FF FF     
   7925 FFFCADC4 FF FF FF FF FF FF FF FF     
   7926 FFFCADCC FF FF FF FF FF FF FF FF     
   7927 FFFCADD4 FF FF FF FF FF FF FF FF     
   7928 FFFCADDC FF FF FF FF FF FF FF FF     
   7929 FFFCADE4 FF FF FF FF FF FF FF FF     
   7930 FFFCADEC FF FF FF FF FF FF FF FF     
   7931 FFFCADF4 FF FF FF FF FF FF FF FF     
   7932 FFFCADFC FF FF FF FF FF FF FF FF     
   7933 FFFCAE04 FF FF FF FF FF FF FF FF     
   7934 FFFCAE0C FF FF FF FF FF FF FF FF     
   7935 FFFCAE14 FF FF FF FF FF FF FF FF     
   7936 FFFCAE1C FF FF FF FF FF FF FF FF     
   7937 FFFCAE24 FF FF FF FF FF FF FF FF     
   7938 FFFCAE2C FF FF FF FF FF FF FF FF     
   7939 FFFCAE34 FF FF FF FF FF FF FF FF     
   7940 FFFCAE3C FF FF FF FF FF FF FF FF     
   7941 FFFCAE44 FF FF FF FF FF FF FF FF     
   7942 FFFCAE4C FF FF FF FF FF FF FF FF     
   7943 FFFCAE54 FF FF FF FF FF FF FF FF     
   7944 FFFCAE5C FF FF FF FF FF FF FF FF     
   7945 FFFCAE64 FF FF FF FF FF FF FF FF     
   7946 FFFCAE6C FF FF FF FF FF FF FF FF     
   7947 FFFCAE74 FF FF FF FF FF FF FF FF     
   7948 FFFCAE7C FF FF FF FF FF FF FF FF     
   7949 FFFCAE84 FF FF FF FF FF FF FF FF     
   7950 FFFCAE8C FF FF FF FF FF FF FF FF     
   7951 FFFCAE94 FF FF FF FF FF FF FF FF     
   7952 FFFCAE9C FF FF FF FF FF FF FF FF     
   7953 FFFCAEA4 FF FF FF FF FF FF FF FF     
   7954 FFFCAEAC FF FF FF FF FF FF FF FF     
   7955 FFFCAEB4 FF FF FF FF FF FF FF FF     
   7956 FFFCAEBC FF FF FF FF FF FF FF FF     
   7957 FFFCAEC4 FF FF FF FF FF FF FF FF     
   7958 FFFCAECC FF FF FF FF FF FF FF FF     
   7959 FFFCAED4 FF FF FF FF FF FF FF FF     
   7960 FFFCAEDC FF FF FF FF FF FF FF FF     
   7961 FFFCAEE4 FF FF FF FF FF FF FF FF     
   7962 FFFCAEEC FF FF FF FF FF FF FF FF     
   7963 FFFCAEF4 FF FF FF FF FF FF FF FF     
   7964 FFFCAEFC FF FF FF FF FF FF FF FF     
   7965 FFFCAF04 FF FF FF FF FF FF FF FF     
   7966 FFFCAF0C FF FF FF FF FF FF FF FF     
   7967 FFFCAF14 FF FF FF FF FF FF FF FF     
   7968 FFFCAF1C FF FF FF FF FF FF FF FF     
   7969 FFFCAF24 FF FF FF FF FF FF FF FF     
   7970 FFFCAF2C FF FF FF FF FF FF FF FF     
   7971 FFFCAF34 FF FF FF FF FF FF FF FF     
   7972 FFFCAF3C FF FF FF FF FF FF FF FF     
   7973 FFFCAF44 FF FF FF FF FF FF FF FF     
   7974 FFFCAF4C FF FF FF FF FF FF FF FF     
   7975 FFFCAF54 FF FF FF FF FF FF FF FF     
   7976 FFFCAF5C FF FF FF FF FF FF FF FF     
   7977 FFFCAF64 FF FF FF FF FF FF FF FF     
   7978 FFFCAF6C FF FF FF FF FF FF FF FF     
   7979 FFFCAF74 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 76
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7980 FFFCAF7C FF FF FF FF FF FF FF FF     
   7981 FFFCAF84 FF FF FF FF FF FF FF FF     
   7982 FFFCAF8C FF FF FF FF FF FF FF FF     
   7983 FFFCAF94 FF FF FF FF FF FF FF FF     
   7984 FFFCAF9C FF FF FF FF FF FF FF FF     
   7985 FFFCAFA4 FF FF FF FF FF FF FF FF     
   7986 FFFCAFAC FF FF FF FF FF FF FF FF     
   7987 FFFCAFB4 FF FF FF FF FF FF FF FF     
   7988 FFFCAFBC FF FF FF FF FF FF FF FF     
   7989 FFFCAFC4 FF FF FF FF FF FF FF FF     
   7990 FFFCAFCC FF FF FF FF FF FF FF FF     
   7991 FFFCAFD4 FF FF FF FF FF FF FF FF     
   7992 FFFCAFDC FF FF FF FF FF FF FF FF     
   7993 FFFCAFE4 FF FF FF FF FF FF FF FF     
   7994 FFFCAFEC FF FF FF FF FF FF FF FF     
   7995 FFFCAFF4 FF FF FF FF FF FF FF FF     
   7996 FFFCAFFC FF FF FF FF FF FF FF FF     
   7997 FFFCB004 FF FF FF FF FF FF FF FF     
   7998 FFFCB00C FF FF FF FF FF FF FF FF     
   7999 FFFCB014 FF FF FF FF FF FF FF FF     
   8000 FFFCB01C FF FF FF FF FF FF FF FF     
   8001 FFFCB024 FF FF FF FF FF FF FF FF     
   8002 FFFCB02C FF FF FF FF FF FF FF FF     
   8003 FFFCB034 FF FF FF FF FF FF FF FF     
   8004 FFFCB03C FF FF FF FF FF FF FF FF     
   8005 FFFCB044 FF FF FF FF FF FF FF FF     
   8006 FFFCB04C FF FF FF FF FF FF FF FF     
   8007 FFFCB054 FF FF FF FF FF FF FF FF     
   8008 FFFCB05C FF FF FF FF FF FF FF FF     
   8009 FFFCB064 FF FF FF FF FF FF FF FF     
   8010 FFFCB06C FF FF FF FF FF FF FF FF     
   8011 FFFCB074 FF FF FF FF FF FF FF FF     
   8012 FFFCB07C FF FF FF FF FF FF FF FF     
   8013 FFFCB084 FF FF FF FF FF FF FF FF     
   8014 FFFCB08C FF FF FF FF FF FF FF FF     
   8015 FFFCB094 FF FF FF FF FF FF FF FF     
   8016 FFFCB09C FF FF FF FF FF FF FF FF     
   8017 FFFCB0A4 FF FF FF FF FF FF FF FF     
   8018 FFFCB0AC FF FF FF FF FF FF FF FF     
   8019 FFFCB0B4 FF FF FF FF FF FF FF FF     
   8020 FFFCB0BC FF FF FF FF FF FF FF FF     
   8021 FFFCB0C4 FF FF FF FF FF FF FF FF     
   8022 FFFCB0CC FF FF FF FF FF FF FF FF     
   8023 FFFCB0D4 FF FF FF FF FF FF FF FF     
   8024 FFFCB0DC FF FF FF FF FF FF FF FF     
   8025 FFFCB0E4 FF FF FF FF FF FF FF FF     
   8026 FFFCB0EC FF FF FF FF FF FF FF FF     
   8027 FFFCB0F4 FF FF FF FF FF FF FF FF     
   8028 FFFCB0FC FF FF FF FF FF FF FF FF     
   8029 FFFCB104 FF FF FF FF FF FF FF FF     
   8030 FFFCB10C FF FF FF FF FF FF FF FF     
   8031 FFFCB114 FF FF FF FF FF FF FF FF     
   8032 FFFCB11C FF FF FF FF FF FF FF FF     
   8033 FFFCB124 FF FF FF FF FF FF FF FF     
   8034 FFFCB12C FF FF FF FF FF FF FF FF     
   8035 FFFCB134 FF FF FF FF FF FF FF FF     
   8036 FFFCB13C FF FF FF FF FF FF FF FF     
   8037 FFFCB144 FF FF FF FF FF FF FF FF     
   8038 FFFCB14C FF FF FF FF FF FF FF FF     
   8039 FFFCB154 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 77
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8040 FFFCB15C FF FF FF FF FF FF FF FF     
   8041 FFFCB164 FF FF FF FF FF FF FF FF     
   8042 FFFCB16C FF FF FF FF FF FF FF FF     
   8043 FFFCB174 FF FF FF FF FF FF FF FF     
   8044 FFFCB17C FF FF FF FF FF FF FF FF     
   8045 FFFCB184 FF FF FF FF FF FF FF FF     
   8046 FFFCB18C FF FF FF FF FF FF FF FF     
   8047 FFFCB194 FF FF FF FF FF FF FF FF     
   8048 FFFCB19C FF FF FF FF FF FF FF FF     
   8049 FFFCB1A4 FF FF FF FF FF FF FF FF     
   8050 FFFCB1AC FF FF FF FF FF FF FF FF     
   8051 FFFCB1B4 FF FF FF FF FF FF FF FF     
   8052 FFFCB1BC FF FF FF FF FF FF FF FF     
   8053 FFFCB1C4 FF FF FF FF FF FF FF FF     
   8054 FFFCB1CC FF FF FF FF FF FF FF FF     
   8055 FFFCB1D4 FF FF FF FF FF FF FF FF     
   8056 FFFCB1DC FF FF FF FF FF FF FF FF     
   8057 FFFCB1E4 FF FF FF FF FF FF FF FF     
   8058 FFFCB1EC FF FF FF FF FF FF FF FF     
   8059 FFFCB1F4 FF FF FF FF FF FF FF FF     
   8060 FFFCB1FC FF FF FF FF FF FF FF FF     
   8061 FFFCB204 FF FF FF FF FF FF FF FF     
   8062 FFFCB20C FF FF FF FF FF FF FF FF     
   8063 FFFCB214 FF FF FF FF FF FF FF FF     
   8064 FFFCB21C FF FF FF FF FF FF FF FF     
   8065 FFFCB224 FF FF FF FF FF FF FF FF     
   8066 FFFCB22C FF FF FF FF FF FF FF FF     
   8067 FFFCB234 FF FF FF FF FF FF FF FF     
   8068 FFFCB23C FF FF FF FF FF FF FF FF     
   8069 FFFCB244 FF FF FF FF FF FF FF FF     
   8070 FFFCB24C FF FF FF FF FF FF FF FF     
   8071 FFFCB254 FF FF FF FF FF FF FF FF     
   8072 FFFCB25C FF FF FF FF FF FF FF FF     
   8073 FFFCB264 FF FF FF FF FF FF FF FF     
   8074 FFFCB26C FF FF FF FF FF FF FF FF     
   8075 FFFCB274 FF FF FF FF FF FF FF FF     
   8076 FFFCB27C FF FF FF FF FF FF FF FF     
   8077 FFFCB284 FF FF FF FF FF FF FF FF     
   8078 FFFCB28C FF FF FF FF FF FF FF FF     
   8079 FFFCB294 FF FF FF FF FF FF FF FF     
   8080 FFFCB29C FF FF FF FF FF FF FF FF     
   8081 FFFCB2A4 FF FF FF FF FF FF FF FF     
   8082 FFFCB2AC FF FF FF FF FF FF FF FF     
   8083 FFFCB2B4 FF FF FF FF FF FF FF FF     
   8084 FFFCB2BC FF FF FF FF FF FF FF FF     
   8085 FFFCB2C4 FF FF FF FF FF FF FF FF     
   8086 FFFCB2CC FF FF FF FF FF FF FF FF     
   8087 FFFCB2D4 FF FF FF FF FF FF FF FF     
   8088 FFFCB2DC FF FF FF FF FF FF FF FF     
   8089 FFFCB2E4 FF FF FF FF FF FF FF FF     
   8090 FFFCB2EC FF FF FF FF FF FF FF FF     
   8091 FFFCB2F4 FF FF FF FF FF FF FF FF     
   8092 FFFCB2FC FF FF FF FF FF FF FF FF     
   8093 FFFCB304 FF FF FF FF FF FF FF FF     
   8094 FFFCB30C FF FF FF FF FF FF FF FF     
   8095 FFFCB314 FF FF FF FF FF FF FF FF     
   8096 FFFCB31C FF FF FF FF FF FF FF FF     
   8097 FFFCB324 FF FF FF FF FF FF FF FF     
   8098 FFFCB32C FF FF FF FF FF FF FF FF     
   8099 FFFCB334 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 78
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8100 FFFCB33C FF FF FF FF FF FF FF FF     
   8101 FFFCB344 FF FF FF FF FF FF FF FF     
   8102 FFFCB34C FF FF FF FF FF FF FF FF     
   8103 FFFCB354 FF FF FF FF FF FF FF FF     
   8104 FFFCB35C FF FF FF FF FF FF FF FF     
   8105 FFFCB364 FF FF FF FF FF FF FF FF     
   8106 FFFCB36C FF FF FF FF FF FF FF FF     
   8107 FFFCB374 FF FF FF FF FF FF FF FF     
   8108 FFFCB37C FF FF FF FF FF FF FF FF     
   8109 FFFCB384 FF FF FF FF FF FF FF FF     
   8110 FFFCB38C FF FF FF FF FF FF FF FF     
   8111 FFFCB394 FF FF FF FF FF FF FF FF     
   8112 FFFCB39C FF FF FF FF FF FF FF FF     
   8113 FFFCB3A4 FF FF FF FF FF FF FF FF     
   8114 FFFCB3AC FF FF FF FF FF FF FF FF     
   8115 FFFCB3B4 FF FF FF FF FF FF FF FF     
   8116 FFFCB3BC FF FF FF FF FF FF FF FF     
   8117 FFFCB3C4 FF FF FF FF FF FF FF FF     
   8118 FFFCB3CC FF FF FF FF FF FF FF FF     
   8119 FFFCB3D4 FF FF FF FF FF FF FF FF     
   8120 FFFCB3DC FF FF FF FF FF FF FF FF     
   8121 FFFCB3E4 FF FF FF FF FF FF FF FF     
   8122 FFFCB3EC FF FF FF FF FF FF FF FF     
   8123 FFFCB3F4 FF FF FF FF FF FF FF FF     
   8124 FFFCB3FC FF FF FF FF FF FF FF FF     
   8125 FFFCB404 FF FF FF FF FF FF FF FF     
   8126 FFFCB40C FF FF FF FF FF FF FF FF     
   8127 FFFCB414 FF FF FF FF FF FF FF FF     
   8128 FFFCB41C FF FF FF FF FF FF FF FF     
   8129 FFFCB424 FF FF FF FF FF FF FF FF     
   8130 FFFCB42C FF FF FF FF FF FF FF FF     
   8131 FFFCB434 FF FF FF FF FF FF FF FF     
   8132 FFFCB43C FF FF FF FF FF FF FF FF     
   8133 FFFCB444 FF FF FF FF FF FF FF FF     
   8134 FFFCB44C FF FF FF FF FF FF FF FF     
   8135 FFFCB454 FF FF FF FF FF FF FF FF     
   8136 FFFCB45C FF FF FF FF FF FF FF FF     
   8137 FFFCB464 FF FF FF FF FF FF FF FF     
   8138 FFFCB46C FF FF FF FF FF FF FF FF     
   8139 FFFCB474 FF FF FF FF FF FF FF FF     
   8140 FFFCB47C FF FF FF FF FF FF FF FF     
   8141 FFFCB484 FF FF FF FF FF FF FF FF     
   8142 FFFCB48C FF FF FF FF FF FF FF FF     
   8143 FFFCB494 FF FF FF FF FF FF FF FF     
   8144 FFFCB49C FF FF FF FF FF FF FF FF     
   8145 FFFCB4A4 FF FF FF FF FF FF FF FF     
   8146 FFFCB4AC FF FF FF FF FF FF FF FF     
   8147 FFFCB4B4 FF FF FF FF FF FF FF FF     
   8148 FFFCB4BC FF FF FF FF FF FF FF FF     
   8149 FFFCB4C4 FF FF FF FF FF FF FF FF     
   8150 FFFCB4CC FF FF FF FF FF FF FF FF     
   8151 FFFCB4D4 FF FF FF FF FF FF FF FF     
   8152 FFFCB4DC FF FF FF FF FF FF FF FF     
   8153 FFFCB4E4 FF FF FF FF FF FF FF FF     
   8154 FFFCB4EC FF FF FF FF FF FF FF FF     
   8155 FFFCB4F4 FF FF FF FF FF FF FF FF     
   8156 FFFCB4FC FF FF FF FF FF FF FF FF     
   8157 FFFCB504 FF FF FF FF FF FF FF FF     
   8158 FFFCB50C FF FF FF FF FF FF FF FF     
   8159 FFFCB514 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 79
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8160 FFFCB51C FF FF FF FF FF FF FF FF     
   8161 FFFCB524 FF FF FF FF FF FF FF FF     
   8162 FFFCB52C FF FF FF FF FF FF FF FF     
   8163 FFFCB534 FF FF FF FF FF FF FF FF     
   8164 FFFCB53C FF FF FF FF FF FF FF FF     
   8165 FFFCB544 FF FF FF FF FF FF FF FF     
   8166 FFFCB54C FF FF FF FF FF FF FF FF     
   8167 FFFCB554 FF FF FF FF FF FF FF FF     
   8168 FFFCB55C FF FF FF FF FF FF FF FF     
   8169 FFFCB564 FF FF FF FF FF FF FF FF     
   8170 FFFCB56C FF FF FF FF FF FF FF FF     
   8171 FFFCB574 FF FF FF FF FF FF FF FF     
   8172 FFFCB57C FF FF FF FF FF FF FF FF     
   8173 FFFCB584 FF FF FF FF FF FF FF FF     
   8174 FFFCB58C FF FF FF FF FF FF FF FF     
   8175 FFFCB594 FF FF FF FF FF FF FF FF     
   8176 FFFCB59C FF FF FF FF FF FF FF FF     
   8177 FFFCB5A4 FF FF FF FF FF FF FF FF     
   8178 FFFCB5AC FF FF FF FF FF FF FF FF     
   8179 FFFCB5B4 FF FF FF FF FF FF FF FF     
   8180 FFFCB5BC FF FF FF FF FF FF FF FF     
   8181 FFFCB5C4 FF FF FF FF FF FF FF FF     
   8182 FFFCB5CC FF FF FF FF FF FF FF FF     
   8183 FFFCB5D4 FF FF FF FF FF FF FF FF     
   8184 FFFCB5DC FF FF FF FF FF FF FF FF     
   8185 FFFCB5E4 FF FF FF FF FF FF FF FF     
   8186 FFFCB5EC FF FF FF FF FF FF FF FF     
   8187 FFFCB5F4 FF FF FF FF FF FF FF FF     
   8188 FFFCB5FC FF FF FF FF FF FF FF FF     
   8189 FFFCB604 FF FF FF FF FF FF FF FF     
   8190 FFFCB60C FF FF FF FF FF FF FF FF     
   8191 FFFCB614 FF FF FF FF FF FF FF FF     
   8192 FFFCB61C FF FF FF FF FF FF FF FF     
   8193 FFFCB624 FF FF FF FF FF FF FF FF     
   8194 FFFCB62C FF FF FF FF FF FF FF FF     
   8195 FFFCB634 FF FF FF FF FF FF FF FF     
   8196 FFFCB63C FF FF FF FF FF FF FF FF     
   8197 FFFCB644 FF FF FF FF FF FF FF FF     
   8198 FFFCB64C FF FF FF FF FF FF FF FF     
   8199 FFFCB654 FF FF FF FF FF FF FF FF     
   8200 FFFCB65C FF FF FF FF FF FF FF FF     
   8201 FFFCB664 FF FF FF FF FF FF FF FF     
   8202 FFFCB66C FF FF FF FF FF FF FF FF     
   8203 FFFCB674 FF FF FF FF FF FF FF FF     
   8204 FFFCB67C FF FF FF FF FF FF FF FF     
   8205 FFFCB684 FF FF FF FF FF FF FF FF     
   8206 FFFCB68C FF FF FF FF FF FF FF FF     
   8207 FFFCB694 FF FF FF FF FF FF FF FF     
   8208 FFFCB69C FF FF FF FF FF FF FF FF     
   8209 FFFCB6A4 FF FF FF FF FF FF FF FF     
   8210 FFFCB6AC FF FF FF FF FF FF FF FF     
   8211 FFFCB6B4 FF FF FF FF FF FF FF FF     
   8212 FFFCB6BC FF FF FF FF FF FF FF FF     
   8213 FFFCB6C4 FF FF FF FF FF FF FF FF     
   8214 FFFCB6CC FF FF FF FF FF FF FF FF     
   8215 FFFCB6D4 FF FF FF FF FF FF FF FF     
   8216 FFFCB6DC FF FF FF FF FF FF FF FF     
   8217 FFFCB6E4 FF FF FF FF FF FF FF FF     
   8218 FFFCB6EC FF FF FF FF FF FF FF FF     
   8219 FFFCB6F4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 80
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8220 FFFCB6FC FF FF FF FF FF FF FF FF     
   8221 FFFCB704 FF FF FF FF FF FF FF FF     
   8222 FFFCB70C FF FF FF FF FF FF FF FF     
   8223 FFFCB714 FF FF FF FF FF FF FF FF     
   8224 FFFCB71C FF FF FF FF FF FF FF FF     
   8225 FFFCB724 FF FF FF FF FF FF FF FF     
   8226 FFFCB72C FF FF FF FF FF FF FF FF     
   8227 FFFCB734 FF FF FF FF FF FF FF FF     
   8228 FFFCB73C FF FF FF FF FF FF FF FF     
   8229 FFFCB744 FF FF FF FF FF FF FF FF     
   8230 FFFCB74C FF FF FF FF FF FF FF FF     
   8231 FFFCB754 FF FF FF FF FF FF FF FF     
   8232 FFFCB75C FF FF FF FF FF FF FF FF     
   8233 FFFCB764 FF FF FF FF FF FF FF FF     
   8234 FFFCB76C FF FF FF FF FF FF FF FF     
   8235 FFFCB774 FF FF FF FF FF FF FF FF     
   8236 FFFCB77C FF FF FF FF FF FF FF FF     
   8237 FFFCB784 FF FF FF FF FF FF FF FF     
   8238 FFFCB78C FF FF FF FF FF FF FF FF     
   8239 FFFCB794 FF FF FF FF FF FF FF FF     
   8240 FFFCB79C FF FF FF FF FF FF FF FF     
   8241 FFFCB7A4 FF FF FF FF FF FF FF FF     
   8242 FFFCB7AC FF FF FF FF FF FF FF FF     
   8243 FFFCB7B4 FF FF FF FF FF FF FF FF     
   8244 FFFCB7BC FF FF FF FF FF FF FF FF     
   8245 FFFCB7C4 FF FF FF FF FF FF FF FF     
   8246 FFFCB7CC FF FF FF FF FF FF FF FF     
   8247 FFFCB7D4 FF FF FF FF FF FF FF FF     
   8248 FFFCB7DC FF FF FF FF FF FF FF FF     
   8249 FFFCB7E4 FF FF FF FF FF FF FF FF     
   8250 FFFCB7EC FF FF FF FF FF FF FF FF     
   8251 FFFCB7F4 FF FF FF FF FF FF FF FF     
   8252 FFFCB7FC FF FF FF FF FF FF FF FF     
   8253 FFFCB804 FF FF FF FF FF FF FF FF     
   8254 FFFCB80C FF FF FF FF FF FF FF FF     
   8255 FFFCB814 FF FF FF FF FF FF FF FF     
   8256 FFFCB81C FF FF FF FF FF FF FF FF     
   8257 FFFCB824 FF FF FF FF FF FF FF FF     
   8258 FFFCB82C FF FF FF FF FF FF FF FF     
   8259 FFFCB834 FF FF FF FF FF FF FF FF     
   8260 FFFCB83C FF FF FF FF FF FF FF FF     
   8261 FFFCB844 FF FF FF FF FF FF FF FF     
   8262 FFFCB84C FF FF FF FF FF FF FF FF     
   8263 FFFCB854 FF FF FF FF FF FF FF FF     
   8264 FFFCB85C FF FF FF FF FF FF FF FF     
   8265 FFFCB864 FF FF FF FF FF FF FF FF     
   8266 FFFCB86C FF FF FF FF FF FF FF FF     
   8267 FFFCB874 FF FF FF FF FF FF FF FF     
   8268 FFFCB87C FF FF FF FF FF FF FF FF     
   8269 FFFCB884 FF FF FF FF FF FF FF FF     
   8270 FFFCB88C FF FF FF FF FF FF FF FF     
   8271 FFFCB894 FF FF FF FF FF FF FF FF     
   8272 FFFCB89C FF FF FF FF FF FF FF FF     
   8273 FFFCB8A4 FF FF FF FF FF FF FF FF     
   8274 FFFCB8AC FF FF FF FF FF FF FF FF     
   8275 FFFCB8B4 FF FF FF FF FF FF FF FF     
   8276 FFFCB8BC FF FF FF FF FF FF FF FF     
   8277 FFFCB8C4 FF FF FF FF FF FF FF FF     
   8278 FFFCB8CC FF FF FF FF FF FF FF FF     
   8279 FFFCB8D4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 81
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8280 FFFCB8DC FF FF FF FF FF FF FF FF     
   8281 FFFCB8E4 FF FF FF FF FF FF FF FF     
   8282 FFFCB8EC FF FF FF FF FF FF FF FF     
   8283 FFFCB8F4 FF FF FF FF FF FF FF FF     
   8284 FFFCB8FC FF FF FF FF FF FF FF FF     
   8285 FFFCB904 FF FF FF FF FF FF FF FF     
   8286 FFFCB90C FF FF FF FF FF FF FF FF     
   8287 FFFCB914 FF FF FF FF FF FF FF FF     
   8288 FFFCB91C FF FF FF FF FF FF FF FF     
   8289 FFFCB924 FF FF FF FF FF FF FF FF     
   8290 FFFCB92C FF FF FF FF FF FF FF FF     
   8291 FFFCB934 FF FF FF FF FF FF FF FF     
   8292 FFFCB93C FF FF FF FF FF FF FF FF     
   8293 FFFCB944 FF FF FF FF FF FF FF FF     
   8294 FFFCB94C FF FF FF FF FF FF FF FF     
   8295 FFFCB954 FF FF FF FF FF FF FF FF     
   8296 FFFCB95C FF FF FF FF FF FF FF FF     
   8297 FFFCB964 FF FF FF FF FF FF FF FF     
   8298 FFFCB96C FF FF FF FF FF FF FF FF     
   8299 FFFCB974 FF FF FF FF FF FF FF FF     
   8300 FFFCB97C FF FF FF FF FF FF FF FF     
   8301 FFFCB984 FF FF FF FF FF FF FF FF     
   8302 FFFCB98C FF FF FF FF FF FF FF FF     
   8303 FFFCB994 FF FF FF FF FF FF FF FF     
   8304 FFFCB99C FF FF FF FF FF FF FF FF     
   8305 FFFCB9A4 FF FF FF FF FF FF FF FF     
   8306 FFFCB9AC FF FF FF FF FF FF FF FF     
   8307 FFFCB9B4 FF FF FF FF FF FF FF FF     
   8308 FFFCB9BC FF FF FF FF FF FF FF FF     
   8309 FFFCB9C4 FF FF FF FF FF FF FF FF     
   8310 FFFCB9CC FF FF FF FF FF FF FF FF     
   8311 FFFCB9D4 FF FF FF FF FF FF FF FF     
   8312 FFFCB9DC FF FF FF FF FF FF FF FF     
   8313 FFFCB9E4 FF FF FF FF FF FF FF FF     
   8314 FFFCB9EC FF FF FF FF FF FF FF FF     
   8315 FFFCB9F4 FF FF FF FF FF FF FF FF     
   8316 FFFCB9FC FF FF FF FF FF FF FF FF     
   8317 FFFCBA04 FF FF FF FF FF FF FF FF     
   8318 FFFCBA0C FF FF FF FF FF FF FF FF     
   8319 FFFCBA14 FF FF FF FF FF FF FF FF     
   8320 FFFCBA1C FF FF FF FF FF FF FF FF     
   8321 FFFCBA24 FF FF FF FF FF FF FF FF     
   8322 FFFCBA2C FF FF FF FF FF FF FF FF     
   8323 FFFCBA34 FF FF FF FF FF FF FF FF     
   8324 FFFCBA3C FF FF FF FF FF FF FF FF     
   8325 FFFCBA44 FF FF FF FF FF FF FF FF     
   8326 FFFCBA4C FF FF FF FF FF FF FF FF     
   8327 FFFCBA54 FF FF FF FF FF FF FF FF     
   8328 FFFCBA5C FF FF FF FF FF FF FF FF     
   8329 FFFCBA64 FF FF FF FF FF FF FF FF     
   8330 FFFCBA6C FF FF FF FF FF FF FF FF     
   8331 FFFCBA74 FF FF FF FF FF FF FF FF     
   8332 FFFCBA7C FF FF FF FF FF FF FF FF     
   8333 FFFCBA84 FF FF FF FF FF FF FF FF     
   8334 FFFCBA8C FF FF FF FF FF FF FF FF     
   8335 FFFCBA94 FF FF FF FF FF FF FF FF     
   8336 FFFCBA9C FF FF FF FF FF FF FF FF     
   8337 FFFCBAA4 FF FF FF FF FF FF FF FF     
   8338 FFFCBAAC FF FF FF FF FF FF FF FF     
   8339 FFFCBAB4 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 82
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8340 FFFCBABC FF FF FF FF FF FF FF FF     
   8341 FFFCBAC4 FF FF FF FF FF FF FF FF     
   8342 FFFCBACC FF FF FF FF FF FF FF FF     
   8343 FFFCBAD4 FF FF FF FF FF FF FF FF     
   8344 FFFCBADC FF FF FF FF FF FF FF FF     
   8345 FFFCBAE4 FF FF FF FF FF FF FF FF     
   8346 FFFCBAEC FF FF FF FF FF FF FF FF     
   8347 FFFCBAF4 FF FF FF FF FF FF FF FF     
   8348 FFFCBAFC FF FF FF FF FF FF FF FF     
   8349 FFFCBB04 FF FF FF FF FF FF FF FF     
   8350 FFFCBB0C FF FF FF FF FF FF FF FF     
   8351 FFFCBB14 FF FF FF FF FF FF FF FF     
   8352 FFFCBB1C FF FF FF FF FF FF FF FF     
   8353 FFFCBB24 FF FF FF FF FF FF FF FF     
   8354 FFFCBB2C FF FF FF FF FF FF FF FF     
   8355 FFFCBB34 FF FF FF FF FF FF FF FF     
   8356 FFFCBB3C FF FF FF FF FF FF FF FF     
   8357 FFFCBB44 FF FF FF FF FF FF FF FF     
   8358 FFFCBB4C FF FF FF FF FF FF FF FF     
   8359 FFFCBB54 FF FF FF FF FF FF FF FF     
   8360 FFFCBB5C FF FF FF FF FF FF FF FF     
   8361 FFFCBB64 FF FF FF FF FF FF FF FF     
   8362 FFFCBB6C FF FF FF FF FF FF FF FF     
   8363 FFFCBB74 FF FF FF FF FF FF FF FF     
   8364 FFFCBB7C FF FF FF FF FF FF FF FF     
   8365 FFFCBB84 FF FF FF FF FF FF FF FF     
   8366 FFFCBB8C FF FF FF FF FF FF FF FF     
   8367 FFFCBB94 FF FF FF FF FF FF FF FF     
   8368 FFFCBB9C FF FF FF FF FF FF FF FF     
   8369 FFFCBBA4 FF FF FF FF FF FF FF FF     
   8370 FFFCBBAC FF FF FF FF FF FF FF FF     
   8371 FFFCBBB4 FF FF FF FF FF FF FF FF     
   8372 FFFCBBBC FF FF FF FF FF FF FF FF     
   8373 FFFCBBC4 FF FF FF FF FF FF FF FF     
   8374 FFFCBBCC FF FF FF FF FF FF FF FF     
   8375 FFFCBBD4 FF FF FF FF FF FF FF FF     
   8376 FFFCBBDC FF FF FF FF FF FF FF FF     
   8377 FFFCBBE4 FF FF FF FF FF FF FF FF     
   8378 FFFCBBEC FF FF FF FF FF FF FF FF     
   8379 FFFCBBF4 FF FF FF FF FF FF FF FF     
   8380 FFFCBBFC FF FF FF FF FF FF FF FF     
   8381 FFFCBC04 FF FF FF FF FF FF FF FF     
   8382 FFFCBC0C FF FF FF FF FF FF FF FF     
   8383 FFFCBC14 FF FF FF FF FF FF FF FF     
   8384 FFFCBC1C FF FF FF FF FF FF FF FF     
   8385 FFFCBC24 FF FF FF FF FF FF FF FF     
   8386 FFFCBC2C FF FF FF FF FF FF FF FF     
   8387 FFFCBC34 FF FF FF FF FF FF FF FF     
   8388 FFFCBC3C FF FF FF FF FF FF FF FF     
   8389 FFFCBC44 FF FF FF FF FF FF FF FF     
   8390 FFFCBC4C FF FF FF FF FF FF FF FF     
   8391 FFFCBC54 FF FF FF FF FF FF FF FF     
   8392 FFFCBC5C FF FF FF FF FF FF FF FF     
   8393 FFFCBC64 FF FF FF FF FF FF FF FF     
   8394 FFFCBC6C FF FF FF FF FF FF FF FF     
   8395 FFFCBC74 FF FF FF FF FF FF FF FF     
   8396 FFFCBC7C FF FF FF FF FF FF FF FF     
   8397 FFFCBC84 FF FF FF FF FF FF FF FF     
   8398 FFFCBC8C FF FF FF FF FF FF FF FF     
   8399 FFFCBC94 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 83
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8400 FFFCBC9C FF FF FF FF FF FF FF FF     
   8401 FFFCBCA4 FF FF FF FF FF FF FF FF     
   8402 FFFCBCAC FF FF FF FF FF FF FF FF     
   8403 FFFCBCB4 FF FF FF FF FF FF FF FF     
   8404 FFFCBCBC FF FF FF FF FF FF FF FF     
   8405 FFFCBCC4 FF FF FF FF FF FF FF FF     
   8406 FFFCBCCC FF FF FF FF FF FF FF FF     
   8407 FFFCBCD4 FF FF FF FF FF FF FF FF     
   8408 FFFCBCDC FF FF FF FF FF FF FF FF     
   8409 FFFCBCE4 FF FF FF FF FF FF FF FF     
   8410 FFFCBCEC FF FF FF FF FF FF FF FF     
   8411 FFFCBCF4 FF FF FF FF FF FF FF FF     
   8412 FFFCBCFC FF FF FF FF FF FF FF FF     
   8413 FFFCBD04 FF FF FF FF FF FF FF FF     
   8414 FFFCBD0C FF FF FF FF FF FF FF FF     
   8415 FFFCBD14 FF FF FF FF FF FF FF FF     
   8416 FFFCBD1C FF FF FF FF FF FF FF FF     
   8417 FFFCBD24 FF FF FF FF FF FF FF FF     
   8418 FFFCBD2C FF FF FF FF FF FF FF FF     
   8419 FFFCBD34 FF FF FF FF FF FF FF FF     
   8420 FFFCBD3C FF FF FF FF FF FF FF FF     
   8421 FFFCBD44 FF FF FF FF FF FF FF FF     
   8422 FFFCBD4C FF FF FF FF FF FF FF FF     
   8423 FFFCBD54 FF FF FF FF FF FF FF FF     
   8424 FFFCBD5C FF FF FF FF FF FF FF FF     
   8425 FFFCBD64 FF FF FF FF FF FF FF FF     
   8426 FFFCBD6C FF FF FF FF FF FF FF FF     
   8427 FFFCBD74 FF FF FF FF FF FF FF FF     
   8428 FFFCBD7C FF FF FF FF FF FF FF FF     
   8429 FFFCBD84 FF FF FF FF FF FF FF FF     
   8430 FFFCBD8C FF FF FF FF FF FF FF FF     
   8431 FFFCBD94 FF FF FF FF FF FF FF FF     
   8432 FFFCBD9C FF FF FF FF FF FF FF FF     
   8433 FFFCBDA4 FF FF FF FF FF FF FF FF     
   8434 FFFCBDAC FF FF FF FF FF FF FF FF     
   8435 FFFCBDB4 FF FF FF FF FF FF FF FF     
   8436 FFFCBDBC FF FF FF FF FF FF FF FF     
   8437 FFFCBDC4 FF FF FF FF FF FF FF FF     
   8438 FFFCBDCC FF FF FF FF FF FF FF FF     
   8439 FFFCBDD4 FF FF FF FF FF FF FF FF     
   8440 FFFCBDDC FF FF FF FF FF FF FF FF     
   8441 FFFCBDE4 FF FF FF FF FF FF FF FF     
   8442 FFFCBDEC FF FF FF FF FF FF FF FF     
   8443 FFFCBDF4 FF FF FF FF FF FF FF FF     
   8444 FFFCBDFC FF FF FF FF FF FF FF FF     
   8445 FFFCBE04 FF FF FF FF FF FF FF FF     
   8446 FFFCBE0C FF FF FF FF FF FF FF FF     
   8447 FFFCBE14 FF FF FF FF FF FF FF FF     
   8448 FFFCBE1C FF FF FF FF FF FF FF FF     
   8449 FFFCBE24 FF FF FF FF FF FF FF FF     
   8450 FFFCBE2C FF FF FF FF FF FF FF FF     
   8451 FFFCBE34 FF FF FF FF FF FF FF FF     
   8452 FFFCBE3C FF FF FF FF FF FF FF FF     
   8453 FFFCBE44 FF FF FF FF FF FF FF FF     
   8454 FFFCBE4C FF FF FF FF FF FF FF FF     
   8455 FFFCBE54 FF FF FF FF FF FF FF FF     
   8456 FFFCBE5C FF FF FF FF FF FF FF FF     
   8457 FFFCBE64 FF FF FF FF FF FF FF FF     
   8458 FFFCBE6C FF FF FF FF FF FF FF FF     
   8459 FFFCBE74 FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 84
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8460 FFFCBE7C FF FF FF FF FF FF FF FF     
   8461 FFFCBE84 FF FF FF FF FF FF FF FF     
   8462 FFFCBE8C FF FF FF FF FF FF FF FF     
   8463 FFFCBE94 FF FF FF FF FF FF FF FF     
   8464 FFFCBE9C FF FF FF FF FF FF FF FF     
   8465 FFFCBEA4 FF FF FF FF FF FF FF FF     
   8466 FFFCBEAC FF FF FF FF FF FF FF FF     
   8467 FFFCBEB4 FF FF FF FF FF FF FF FF     
   8468 FFFCBEBC FF FF FF FF FF FF FF FF     
   8469 FFFCBEC4 FF FF FF FF FF FF FF FF     
   8470 FFFCBECC FF FF FF FF FF FF FF FF     
   8471 FFFCBED4 FF FF FF FF FF FF FF FF     
   8472 FFFCBEDC FF FF FF FF FF FF FF FF     
   8473 FFFCBEE4 FF FF FF FF FF FF FF FF     
   8474 FFFCBEEC FF FF FF FF FF FF FF FF     
   8475 FFFCBEF4 FF FF FF FF FF FF FF FF     
   8476 FFFCBEFC FF FF FF FF FF FF FF FF     
   8477 FFFCBF04 FF FF FF FF FF FF FF FF     
   8478 FFFCBF0C FF FF FF FF FF FF FF FF     
   8479 FFFCBF14 FF FF FF FF FF FF FF FF     
   8480 FFFCBF1C FF FF FF FF FF FF FF FF     
   8481 FFFCBF24 FF FF FF FF FF FF FF FF     
   8482 FFFCBF2C FF FF FF FF FF FF FF FF     
   8483 FFFCBF34 FF FF FF FF FF FF FF FF     
   8484 FFFCBF3C FF FF FF FF FF FF FF FF     
   8485 FFFCBF44 FF FF FF FF FF FF FF FF     
   8486 FFFCBF4C FF FF FF FF FF FF FF FF     
   8487 FFFCBF54 FF FF FF FF FF FF FF FF     
   8488 FFFCBF5C FF FF FF FF FF FF FF FF     
   8489 FFFCBF64 FF FF FF FF FF FF FF FF     
   8490 FFFCBF6C FF FF FF FF FF FF FF FF     
   8491 FFFCBF74 FF FF FF FF FF FF FF FF     
   8492 FFFCBF7C FF FF FF FF FF FF FF FF     
   8493 FFFCBF84 FF FF FF FF FF FF FF FF     
   8494 FFFCBF8C FF FF FF FF FF FF FF FF     
   8495 FFFCBF94 FF FF FF FF FF FF FF FF     
   8496 FFFCBF9C FF FF FF FF FF FF FF FF     
   8497 FFFCBFA4 FF FF FF FF FF FF FF FF     
   8498 FFFCBFAC FF FF FF FF FF FF FF FF     
   8499 FFFCBFB4 FF FF FF FF FF FF FF FF     
   8500 FFFCBFBC FF FF FF FF FF FF FF FF     
   8501 FFFCBFC4 FF FF FF FF FF FF FF FF     
   8502 FFFCBFCC FF FF FF FF FF FF FF FF     
   8503 FFFCBFD4 FF FF FF FF FF FF FF FF     
   8504 FFFCBFDC FF FF FF FF FF FF FF FF     
   8505 FFFCBFE4 FF FF FF FF FF FF FF FF     
   8506 FFFCBFEC FF FF FF FF FF FF FF FF     
   8507 FFFCBFF4 FF FF FF FF FF FF FF FF     
   8508 FFFCBFFC FF FF FF FF                 
                                             ;*
                                             ;* Standard jump table. You can change these addresses if you are
                                             ;* customizing this interpreter for a different environment.
                                             ;*
   8513 FFFCC000 6000 0022                   START	BRA.L	CSTART		;Cold Start entry point
   8514 FFFCC004 6000 005A                   GOWARM	BRA.L	WSTART		;Warm Start entry point
   8515 FFFCC008 6000 0B68                   GOOUT	BRA.L	OUTC		;Jump to character-out routine
   8516 FFFCC00C 6000 0B74                   GOIN	BRA.L	INC		;Jump to character-in routine
   8517 FFFCC010 6000 0B86                   GOAUXO	BRA.L	AUXOUT		;Jump to auxiliary-out routine
   8518 FFFCC014 6000 0B94                   GOAUXI	BRA.L	AUXIN		;Jump to auxiliary-in routine
   8519 FFFCC018 6000 0BA6                   GOBYE	BRA.L	BYEBYE		;Jump to monitor, DOS, etc.
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 85
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
                                             ;*
                                             ;* Modifiable system constants:
                                             ;*
   8523 FFFCC01C 00200000                    TXTBGN	DC.L	0x200000	;beginning of program memory
   8524 FFFCC020 1E000000                    ENDMEM	DC.L	0x1E000000	;	end of available memory
                                             ;*
                                             ;* The main interpreter starts here:
                                             ;*
   8528 FFFCC024                             CSTART:
   8529 FFFCC024 41F9 FFFC C000              	LEA		START,A0
   8530 FFFCC02A 21C8 0600                   	MOVE.L	A0,RANPNT
   8531 FFFCC02E 2E79 FFFC C020              	MOVE.L	ENDMEM,SP	;initialize stack pointer
   8532 FFFCC034 4DF9 FFFC CBC6              	LEA		INITMSG,A6	;tell who we are
   8533 FFFCC03A 6100 0B2A                   	BSR.L	PRMESG
   8534 FFFCC03E 21F9 FFFC C01C 0624         	MOVE.L	TXTBGN,TXTUNF	;init. end-of-program pointer
   8535 FFFCC046 2039 FFFC C020              	MOVE.L	ENDMEM,D0	;get address of end of memory
   8536 FFFCC04C 0480 0000 0800              	SUB.L	#2048,D0	;reserve 2K for the stack
   8537 FFFCC052 21C0 062C                   	MOVE.L	D0,STKLMT
   8538 FFFCC056 0480 0000 006C              	SUB.L	#108,D0 	;reserve variable area (27 long words)
   8539 FFFCC05C 21C0 0628                   	MOVE.L	D0,VARBGN
   8540 FFFCC060                             WSTART:
   8541 FFFCC060 4280                        	CLR.L	D0		;initialize internal variables
   8542 FFFCC062 21C0 0610                   	MOVE.L	D0,LOPVAR
   8543 FFFCC066 21C0 0608                   	MOVE.L	D0,STKGOS
   8544 FFFCC06A 21C0 0604                   	MOVE.L	D0,CURRNT	;current line number pointer = 0
   8545 FFFCC06E 2E79 FFFC C020              	MOVE.L	ENDMEM,SP	;init S.P. again, just in case
   8546 FFFCC074 4DF9 FFFC CBEC              	LEA	OKMSG,A6	;display "OK"
   8547 FFFCC07A 6100 0AEA                   	BSR.L	PRMESG
   8548 FFFCC07E                             ST3:
   8549 FFFCC07E 103C 003E                   	MOVE.B	#'>',D0  ;       Prompt with a '>' and
   8550 FFFCC082 6100 0810                   	BSR.L	GETLN	;	read a line.
   8551 FFFCC086 6100 0A7A                   	BSR.L	TOUPBUF ;	convert to upper case
   8552 FFFCC08A 2848                        	MOVE.L	A0,A4	;	save pointer to end of line
   8553 FFFCC08C 41F8 0630                   	LEA	BUFFER,A0	;point to the beginning of line
   8554 FFFCC090 6100 0A2C                   	BSR.L	TSTNUM	;	is there a number there?
   8555 FFFCC094 6100 0A60                   	BSR.L	IGNBLK	;	skip trailing blanks
   8556 FFFCC098 4A81                        	TST	D1		;does line no. exist? (or nonzero?)
   8557 FFFCC09A 6700 011A                   	BEQ.L	DIRECT	;	if not, it's a direct statement
   8558 FFFCC09E B2BC 0000 FFFF              	CMP.L	#$FFFF,D1	;see if line no. is <= 16 bits
   8559 FFFCC0A4 6400 07E4                   	BCC.L	QHOW		;if not, we've overflowed
   8560 FFFCC0A8 1101                        	MOVE.B	D1,-(A0)	;store the binary line no.
   8561 FFFCC0AA E099                        	ROR	#8,D1		;(Kludge to store a word on a
   8562 FFFCC0AC 1101                        	MOVE.B	D1,-(A0)	;possible byte boundary)
   8563 FFFCC0AE E199                        	ROL	#8,D1
   8564 FFFCC0B0 6100 0882                   	BSR.L	FNDLN	;	find this line in save area
   8565 FFFCC0B4 2A49                        	MOVE.L	A1,A5	;	save possible line pointer
   8566 FFFCC0B6 6612                        	BNE	ST4				;	if not found, insert
   8567 FFFCC0B8 6100 08A2                   	BSR.L	FNDNXT		;find the next line (into A1)
   8568 FFFCC0BC 244D                        	MOVE.L	A5,A2		;pointer to line to be deleted
   8569 FFFCC0BE 2678 0624                   	MOVE.L	TXTUNF,A3	;points to top of save area
   8570 FFFCC0C2 6100 08A2                   	BSR.L	MVUP		;move up to delete
   8571 FFFCC0C6 21CA 0624                   	MOVE.L	A2,TXTUNF	;update the end pointer
   8572 FFFCC0CA                             ST4:
   8573 FFFCC0CA 200C                        	MOVE.L	A4,D0		;calculate the length of new line
   8574 FFFCC0CC 9088                        	SUB.L	A0,D0
   8575 FFFCC0CE B0BC 0000 0003              	CMP.L	#3,D0		;is it just a line no. & CR?
   8576 FFFCC0D4 67A8                        	BEQ	ST3				;if so, it was just a delete
   8577 FFFCC0D6 2678 0624                   	MOVE.L	TXTUNF,A3	;compute new end
   8578 FFFCC0DA 2C4B                        	MOVE.L	A3,A6
   8579 FFFCC0DC D7C0                        	ADD.L	D0,A3
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 86
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8580 FFFCC0DE 2038 0628                   	MOVE.L	VARBGN,D0	;see if there's enough room
   8581 FFFCC0E2 B08B                        	CMP.L	A3,D0
   8582 FFFCC0E4 6300 079A                   	BLS.L	QSORRY		;if not, say so
   8583 FFFCC0E8 21CB 0624                   	MOVE.L	A3,TXTUNF	;if so, store new end position
   8584 FFFCC0EC 224E                        	MOVE.L	A6,A1		;points to old unfilled area
   8585 FFFCC0EE 244D                        	MOVE.L	A5,A2		;points to beginning of move area
   8586 FFFCC0F0 6100 087E                   	BSR.L	MVDOWN		;move things out of the way
   8587 FFFCC0F4 2248                        	MOVE.L	A0,A1		;set up to do the insertion
   8588 FFFCC0F6 244D                        	MOVE.L	A5,A2
   8589 FFFCC0F8 264C                        	MOVE.L	A4,A3
   8590 FFFCC0FA 6100 086A                   	BSR.L	MVUP		;do it
   8591 FFFCC0FE 6000 FF7E                   	BRA	ST3		;go back and get another line
                                             
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** Tables *** DIRECT *** EXEC ***
                                             ;*
                                             ;* This section of the code tests a string against a table. When
                                             ;* a match is found, control is transferred to the section of
                                             ;* code according to the table.
                                             ;*
                                             ;* At 'EXEC', A0 should point to the string, A1 should point to
                                             ;* the character table, and A2 should point to the execution
                                             ;* table. At 'DIRECT', A0 should point to the string, A1 and
                                             ;* A2 will be set up to point to TAB1 and TAB1.1, which are
                                             ;* the tables of all direct and statement commands.
                                             ;*
                                             ;* A '.' in the string will terminate the test and the partial
                                             ;* match will be considered as a match, e.g. 'P.', 'PR.','PRI.',
                                             ;* 'PRIN.', or 'PRINT' will all match 'PRINT'.
                                             ;*
                                             ;* There are two tables: the character table and the execution
                                             ;* table. The character table consists of any number of text items.
                                             ;* Each item is a string of characters with the last character's
                                             ;* high bit set to one. The execution table holds a 16-bit
                                             ;* execution addresses that correspond to each entry in the
                                             ;* character table.
                                             ;*
                                             ;* The end of the character table is a 0 byte which corresponds
                                             ;* to the default routine in the execution table, which is
                                             ;* executed if none of the other table items are matched.
                                             ;*
                                             ;* Character-matching tables:
   8624 FFFCC102                             TAB1:
   8625 FFFCC102 4C 49 53 D4                 	DC.B	'LIS',('T'+0x80) ;        Direct commands
   8626 FFFCC106 4C 4F 41 C4                 	DC.B	'LOA',('D'+0x80)
   8627 FFFCC10A 4E 45 D7                    	DC.B	'NE',('W'+0x80)
   8628 FFFCC10D 52 55 CE                    	DC.B	'RU',('N'+0x80)
   8629 FFFCC110 53 41 56 C5                 	DC.B	'SAV',('E'+0x80)
   8630 FFFCC114                             TAB2:
   8631 FFFCC114 4E 45 58 D4                 	DC.B	'NEX',('T'+0x80)  ;       Direct / statement
   8632 FFFCC118 4C 45 D4                    	DC.B	'LE',('T'+0x80)
   8633 FFFCC11B 49 C6                       	DC.B	'I',('F'+0x80)
   8634 FFFCC11D 47 4F 54 CF                 	DC.B	'GOT',('O'+0x80)
   8635 FFFCC121 47 4F 53 55 C2              	DC.B	'GOSU',('B'+0x80)
   8636 FFFCC126 52 45 54 55 52 CE           	DC.B	'RETUR',('N'+0x80)
   8637 FFFCC12C 52 45 CD                    	DC.B	'RE',('M'+0x80)
   8638 FFFCC12F 46 4F D2                    	DC.B	'FO',('R'+0x80)
   8639 FFFCC132 49 4E 50 55 D4              	DC.B	'INPU',('T'+0x80)
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 87
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8640 FFFCC137 50 52 49 4E D4              	DC.B	'PRIN',('T'+0x80)
   8641 FFFCC13C 50 4F 4B C5                 	DC.B	'POK',('E'+0x80)
   8642 FFFCC140 53 54 4F D0                 	DC.B	'STO',('P'+0x80)
   8643 FFFCC144 42 59 C5                    	DC.B	'BY',('E'+0x80)
   8644 FFFCC147 43 41 4C CC                 	DC.B	'CAL',('L'+0x80)
   8645 FFFCC14B 00                          	DC.B	0
   8646 FFFCC14C                             TAB4:
   8647 FFFCC14C 50 45 45 CB                 	DC.B	'PEE',('K'+0x80)   ;      Functions
   8648 FFFCC150 52 4E C4                    	DC.B	'RN',('D'+0x80)
   8649 FFFCC153 41 42 D3                    	DC.B	'AB',('S'+0x80)
   8650 FFFCC156 53 49 5A C5                 	DC.B	'SIZ',('E'+0x80)
   8651 FFFCC15A 00                          	DC.B	0
   8652 FFFCC15B                             TAB5:
   8653 FFFCC15B 54 CF                       	DC.B	'T',('O'+0x80)      ;     "TO" in "FOR"
   8654 FFFCC15D 00                          	DC.B	0
   8655 FFFCC15E                             TAB6:
   8656 FFFCC15E 53 54 45 D0                 	DC.B	'STE',('P'+0x80)     ;    "STEP" in "FOR"
   8657 FFFCC162 00                          	DC.B	0
   8658 FFFCC163                             TAB8:
   8659 FFFCC163 3E BD                       	DC.B	'>',('='+0x80)        ;   Relational operators
   8660 FFFCC165 3C BE                       	DC.B	'<',('>'+0x80)
   8661 FFFCC167 BE                          	DC.B	('>'+0x80)
   8662 FFFCC168 BD                          	DC.B	('='+0x80)
   8663 FFFCC169 3C BD                       	DC.B	'<',('='+0x80)
   8664 FFFCC16B BC                          	DC.B	('<'+0x80)
   8665 FFFCC16C 00                          	DC.B	0
   8666 FFFCC16D 00                          	DC.B	0	;<- for aligning on a word boundary
                                             
                                             	align	2
                                             ;* Execution address tables:
   8670 FFFCC16E                             TAB1_1:
   8671 FFFCC16E C266                        	DC.W	LIST_			;Direct commands
   8672 FFFCC170 C4A8                        	DC.W	LOAD
   8673 FFFCC172 C200                        	DC.W	NEW
   8674 FFFCC174 C214                        	DC.W	RUN
   8675 FFFCC176 C50C                        	DC.W	SAVE
   8676 FFFCC178                             TAB2_1:
   8677 FFFCC178 C3B4                        	DC.W	NEXT			;Direct / statement
   8678 FFFCC17A C498                        	DC.W	LET
   8679 FFFCC17C C404                        	DC.W	IF
   8680 FFFCC17E C252                        	DC.W	GOTO
   8681 FFFCC180 C2FC                        	DC.W	GOSUB
   8682 FFFCC182 C324                        	DC.W	RETURN
   8683 FFFCC184 C402                        	DC.W	REM
   8684 FFFCC186 C342                        	DC.W	FOR
   8685 FFFCC188 C42A                        	DC.W	INPUT
   8686 FFFCC18A C292                        	DC.W	PRINT
   8687 FFFCC18C C590                        	DC.W	POKE
   8688 FFFCC18E C20C                        	DC.W	STOP_
   8689 FFFCC190 C018                        	DC.W	GOBYE
   8690 FFFCC192 C5AC                        	DC.W	CALL
   8691 FFFCC194 C492                        	DC.W	DEFLT
   8692 FFFCC196                             TAB4_1:
   8693 FFFCC196 C7A2                        	DC.W	PEEK			;Functions
   8694 FFFCC198 C7AE                        	DC.W	RND
   8695 FFFCC19A C7E4                        	DC.W	ABS
   8696 FFFCC19C C7F4                        	DC.W	SIZE_
   8697 FFFCC19E C6A6                        	DC.W	XP40
   8698 FFFCC1A0                             TAB5_1:
   8699 FFFCC1A0 C35E                        	DC.W	FR1		;	"TO" in "FOR"
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 88
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8700 FFFCC1A2 C83E                        	DC.W	QWHAT
   8701 FFFCC1A4                             TAB6_1:
   8702 FFFCC1A4 C376                        	DC.W	FR2		;	"STEP" in "FOR"
   8703 FFFCC1A6 C37C                        	DC.W	FR3
   8704 FFFCC1A8                             TAB8_1:
   8705 FFFCC1A8 C5D8                        	DC.W	XP11;	>=		Relational operators
   8706 FFFCC1AA C5E0                        	DC.W	XP12	;<>
   8707 FFFCC1AC C5E8                        	DC.W	XP13	;>
   8708 FFFCC1AE C5F8                        	DC.W	XP15	;=
   8709 FFFCC1B0 C5F0                        	DC.W	XP14	;<=
   8710 FFFCC1B2 C602                        	DC.W	XP16	;<
   8711 FFFCC1B4 C614                        	DC.W	XP17
                                             ;*
   8713 FFFCC1B6                             DIRECT:
   8714 FFFCC1B6 43F9 FFFC C102              	LEA	TAB1,A1
   8715 FFFCC1BC 45F9 FFFC C16E              	LEA	TAB1_1,A2
   8716 FFFCC1C2                             EXEC:
   8717 FFFCC1C2 6100 0932                   	BSR.L	IGNBLK;		ignore leading blanks
   8718 FFFCC1C6 2648                        	MOVE.L	A0,A3		;save the pointer
   8719 FFFCC1C8 4202                        	CLR.B	D2		;clear match flag
   8720 FFFCC1CA                             EXLP:
   8721 FFFCC1CA 1018                        	MOVE.B	(A0)+,D0;	get the program character
   8722 FFFCC1CC 1211                        	MOVE.B	(A1),D1 	;get the table character
   8723 FFFCC1CE 6604                        	BNE	EXNGO		;If end of table,
   8724 FFFCC1D0 204B                        	MOVE.L	A3,A0	;;	restore the text pointer and...
   8725 FFFCC1D2 6024                        	BRA	EXGO		;execute the default.
   8726 FFFCC1D4                             EXNGO:
   8727 FFFCC1D4 1600                        	MOVE.B	D0,D3	;	Else check for period...
   8728 FFFCC1D6 C602                        	AND.B	D2,D3		;and a match.
   8729 FFFCC1D8 B63C 002E                   	CMP.B	#'.',D3
   8730 FFFCC1DC 671A                        	BEQ	EXGO		;if so, execute
   8731 FFFCC1DE 0201 007F                   	AND.B	#0x7F,D1 ;	ignore the table's high bit
   8732 FFFCC1E2 B200                        	CMP.B	D0,D1	;	is there a match?
   8733 FFFCC1E4 670C                        	BEQ	EXMAT
   8734 FFFCC1E6 548A                        	ADDQ.L	#2,A2	;	if not, try the next entry
   8735 FFFCC1E8 204B                        	MOVE.L	A3,A0	;	reset the program pointer
   8736 FFFCC1EA 4202                        	CLR.B	D2		;sorry, no match
   8737 FFFCC1EC                             EX1:
   8738 FFFCC1EC 4A19                        	TST.B	(A1)+	;	get to the end of the entry
   8739 FFFCC1EE 6AFC                        	BPL	EX1
   8740 FFFCC1F0 60D8                        	BRA	EXLP		;back for more matching
   8741 FFFCC1F2                             EXMAT:
   8742 FFFCC1F2 74FF                        	MOVEQ	#-1,D2;		we've got a match so far
   8743 FFFCC1F4 4A19                        	TST.B	(A1)+	;	end of table entry?
   8744 FFFCC1F6 6AD2                        	BPL	EXLP		;if not, go back for more
   8745 FFFCC1F8                             EXGO:
   8746 FFFCC1F8 47F8 0000                   	LEA	0,A3	;	execute the appropriate routine
   8747 FFFCC1FC 2652                        	MOVE	(A2),A3
   8748 FFFCC1FE 4ED3                        	JMP	(A3)
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* What follows is the code to execute direct and statement
                                             ;* commands. Control is transferred to these points via the command
                                             ;* table lookup code of 'DIRECT' and 'EXEC' in the last section.
                                             ;* After the command is executed, control is transferred to other
                                             ;* sections as follows:
                                             ;*
                                             ;* For 'LIST', 'NEW', and 'STOP': go back to the warm start point.
                                             ;* For 'RUN': go execute the first stored line if any; else go
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 89
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
                                             ;* back to the warm start point.
                                             ;* For 'GOTO' and 'GOSUB': go execute the target line.
                                             ;* For 'RETURN' and 'NEXT'; go back to saved return line.
                                             ;* For all others: if 'CURRNT' is 0, go to warm start; else go;
                                             ;* execute next command. (This is done in 'FINISH'.)
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** NEW *** STOP *** RUN (& friends) *** GOTO ***
                                             ;*
                                             ;* 'NEW<CR>' sets TXTUNF to point to TXTBGN
                                             ;*
                                             ;* 'STOP<CR>' goes back to WSTART
                                             ;*
                                             ;* 'RUN<CR>' finds the first stored line, stores its address
                                             ;* in CURRNT, and starts executing it. Note that only those
                                             ;* commands in TAB2 are legal for a stored program.
                                             ;*
                                             ;* There are 3 more entries in 'RUN':
                                             ;* 'RUNNXL' finds next line, stores it's address and executes it.
                                             ;* 'RUNTSL' stores the address of this line and executes it.
                                             ;* 'RUNSML' continues the execution on same line.
                                             ;*
                                             ;* 'GOTO expr<CR>' evaluates the expression, finds the target
                                             ;* line, and jumps to 'RUNTSL' to do it.
                                             ;*
   8786 FFFCC200                             NEW:
   8787 FFFCC200 6100 0630                   	BSR.L	ENDCHK
   8788 FFFCC204 21F9 FFFC C01C 0624         	MOVE.L	TXTBGN,TXTUNF	;set the end pointer
                                             
   8790 FFFCC20C                             STOP_:
   8791 FFFCC20C 6100 0624                   	BSR.L	ENDCHK
   8792 FFFCC210 6000 FE4E                   	BRA	WSTART
                                             
   8794 FFFCC214                             RUN:
   8795 FFFCC214 6100 061C                   	BSR.L	ENDCHK
   8796 FFFCC218 2079 FFFC C01C              	MOVE.L	TXTBGN,A0	;set pointer to beginning
   8797 FFFCC21E 21C8 0604                   	MOVE.L	A0,CURRNT
                                             
   8799 FFFCC222                             RUNNXL:
   8800 FFFCC222 4AB8 0604                   	TST.L	CURRNT	;	executing a program?
   8801 FFFCC226 6700 FE38                   	BEQ.L	WSTART		;if not, we've finished a direct stat.
   8802 FFFCC22A 4281                        	CLR.L	D1		;else find the next line number
   8803 FFFCC22C 2248                        	MOVE.L	A0,A1
   8804 FFFCC22E 6100 0714                   	BSR.L	FNDLNP
   8805 FFFCC232 6500 FE2C                   	BCS	WSTART		;if we've fallen off the end, stop
                                             
   8807 FFFCC236                             RUNTSL:
   8808 FFFCC236 21C9 0604                   	MOVE.L	A1,CURRNT	;set CURRNT to point to the line no.
   8809 FFFCC23A 2049                        	MOVE.L	A1,A0		;set the text pointer to
   8810 FFFCC23C 5488                        	ADDQ.L	#2,A0		;the start of the line text
                                             
   8812 FFFCC23E                             RUNSML:
   8813 FFFCC23E 6100 090E                   	BSR.L	CHKIO	;	see if a control-C was pressed
   8814 FFFCC242 43F9 FFFC C114              	LEA	TAB2,A1 	;find command in TAB2
   8815 FFFCC248 45F9 FFFC C178              	LEA	TAB2_1,A2
   8816 FFFCC24E 6000 FF72                   	BRA	EXEC		;and execute it
                                             
   8818 FFFCC252                             GOTO:
   8819 FFFCC252 6100 036E                   	BSR.L	EXPR	;	evaluate the following expression
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 90
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8820 FFFCC256 6100 05DA                   	BSR.L	ENDCHK		;must find end of line
   8821 FFFCC25A 2200                        	MOVE.L	D0,D1
   8822 FFFCC25C 6100 06D6                   	BSR.L	FNDLN		;find the target line
   8823 FFFCC260 6600 0628                   	BNE.L	QHOW		;no such line no.
   8824 FFFCC264 60D0                        	BRA	RUNTSL		;go do it
                                             
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** LIST *** PRINT ***
                                             ;*
                                             ;* LIST has two forms:
                                             ;* 'LIST<CR>' lists all saved lines
                                             ;* 'LIST #<CR>' starts listing at the line #
                                             ;* Control-S pauses the listing, control-C stops it.
                                             ;*
                                             ;* PRINT command is 'PRINT ....:' or 'PRINT ....<CR>'
                                             ;* where '....' is a list of expressions, formats, back-arrows,
                                             ;* and strings.	These items a separated by commas.
                                             ;*
                                             ;* A format is a pound sign followed by a number.  It controls
                                             ;* the number of spaces the value of an expression is going to
                                             ;* be printed in.  It stays effective for the rest of the print
                                             ;* command unless changed by another format.  If no format is
                                             ;* specified, 11 positions will be used.
                                             ;*
                                             ;* A string is quoted in a pair of single- or double-quotes.
                                             ;*
                                             ;* An underline (back-arrow) means generate a <CR> without a <LF>
                                             ;*
                                             ;* A <CR LF> is generated after the entire list has been printed
                                             ;* or if the list is empty.  If the list ends with a semicolon,
                                             ;* however, no <CR LF> is generated.
                                             ;*
                                             
   8855 FFFCC266                             LIST_:
   8856 FFFCC266 6100 0856                   	BSR.L	TSTNUM	;	see if there's a line no.
   8857 FFFCC26A 6100 05C6                   	BSR.L	ENDCHK		;if not, we get a zero
   8858 FFFCC26E 6100 06C4                   	BSR.L	FNDLN		;find this or next line
   8859 FFFCC272                             LS1:
   8860 FFFCC272 6500 FDEC                   	BCS	WSTART		;warm start if we passed the end
   8861 FFFCC276 6100 0810                   	BSR.L	PRTLN	;	print the line
   8862 FFFCC27A 6100 08D2                   	BSR.L	CHKIO	;	check for listing halt request
   8863 FFFCC27E 670C                        	BEQ	LS3
   8864 FFFCC280 B03C 0013                   	CMP.B	#CTRLS,D0	;pause the listing?
   8865 FFFCC284 6606                        	BNE	LS3
   8866 FFFCC286                             LS2:
   8867 FFFCC286 6100 08C6                   	BSR.L	CHKIO		;if so, wait for another keypress
   8868 FFFCC28A 67FA                        	BEQ	LS2
   8869 FFFCC28C                             LS3:
   8870 FFFCC28C 6100 06B6                   	BSR.L	FNDLNP		;find the next line
   8871 FFFCC290 60E0                        	BRA	LS1
                                             
   8873 FFFCC292                             PRINT:
   8874 FFFCC292 780B                        	MOVE	#11,D4	;	D4 = number of print spaces
   8875 FFFCC294 6100 080E                   	BSR.L	TSTC		;if null list and ":"
   8876 FFFCC298 3A 07                       	DC.B	':',PR2-$
   8877 FFFCC29A 6100 08C4                   	BSR.L	CRLF		;give CR-LF and continue
   8878 FFFCC29E 609E                        	BRA	RUNSML		;execution on the same line
   8879 FFFCC2A0                             PR2:
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 91
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8880 FFFCC2A0 6100 0802                   	BSR.L	TSTC		;if null list and <CR>
   8881 FFFCC2A4 0D 09                       	DC.B	CR,PR0-$
   8882 FFFCC2A6 6100 08B8                   	BSR.L	CRLF		;also give CR-LF and
   8883 FFFCC2AA 6000 FF76                   	BRA	RUNNXL		;execute the next line
   8884 FFFCC2AE                             PR0:
   8885 FFFCC2AE 6100 07F4                   	BSR.L	TSTC		;else is it a format?
   8886 FFFCC2B2 23 09                       	DC.B	'#',PR1-$
   8887 FFFCC2B4 6100 030C                   	BSR.L	EXPR		;yes, evaluate expression
   8888 FFFCC2B8 2800                        	MOVE	D0,D4		;and save it as print width
   8889 FFFCC2BA 6016                        	BRA	PR3		;look for more to print
   8890 FFFCC2BC                             PR1:
   8891 FFFCC2BC 6100 07E6                   	BSR.L	TSTC		;is character expression? (MRL)
   8892 FFFCC2C0 24 0B                       	DC.B	'$',PR4-$
   8893 FFFCC2C2 6100 02FE                   	BSR.L	EXPR		;yep. Evaluate expression (MRL)
   8894 FFFCC2C6 6100 FD40                   	BSR	GOOUT		;print low byte (MRL)
   8895 FFFCC2CA 6006                        	BRA	PR3		;look for more. (MRL)
   8896 FFFCC2CC                             PR4:
   8897 FFFCC2CC 6100 0706                   	BSR.L	QTSTG	;	is it a string?
   8898 FFFCC2D0 6012                        	BRA.S	PR8		;if not, must be an expression
   8899 FFFCC2D2                             PR3:
   8900 FFFCC2D2 6100 07D0                   	BSR.L	TSTC	;	if ",", go find next
   8901 FFFCC2D6 2C 07                       	DC.B	',',PR6-$
   8902 FFFCC2D8 6100 053E                   	BSR.L	FIN		;in the list.
   8903 FFFCC2DC 60D0                        	BRA	PR0
   8904 FFFCC2DE                             PR6:
   8905 FFFCC2DE 6100 0880                   	BSR.L	CRLF	;	list ends here
   8906 FFFCC2E2 6010                        	BRA	FINISH
   8907 FFFCC2E4                             PR8:
   8908 FFFCC2E4 2F04                        	MOVE	D4,-(SP)	;save the width value
   8909 FFFCC2E6 6100 02DA                   	BSR.L	EXPR		;evaluate the expression
   8910 FFFCC2EA 281F                        	MOVE	(SP)+,D4	;restore the width
   8911 FFFCC2EC 2200                        	MOVE.L	D0,D1
   8912 FFFCC2EE 6100 0724                   	BSR.L	PRTNUM		;print its value
   8913 FFFCC2F2 60DE                        	BRA	PR3		;more to print?
                                             
   8915 FFFCC2F4                             FINISH:
   8916 FFFCC2F4 6100 0522                   	BSR.L	FIN	;	Check end of command
   8917 FFFCC2F8 6000 0544                   	BRA.L	QWHAT	;	print "What?" if wrong
                                             
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** GOSUB *** & RETURN ***
                                             ;*
                                             ;* 'GOSUB expr:' or 'GOSUB expr<CR>' is like the 'GOTO' command,
                                             ;* except that the current text pointer, stack pointer, etc. are
                                             ;* saved so that execution can be continued after the subroutine
                                             ;* 'RETURN's.  In order that 'GOSUB' can be nested (and even
                                             ;* recursive), the save area must be stacked.  The stack pointer
                                             ;* is saved in 'STKGOS'.  The old 'STKGOS' is saved on the stack.
                                             ;* If we are in the main routine, 'STKGOS' is zero (this was done
                                             ;* in the initialization section of the interpreter), but we still
                                             ;* save it as a flag for no further 'RETURN's.
                                             ;*
                                             ;* 'RETURN<CR>' undoes everything that 'GOSUB' did, and thus
                                             ;* returns the execution to the command after the most recent
                                             ;* 'GOSUB'.  If 'STKGOS' is zero, it indicates that we never had
                                             ;* a 'GOSUB' and is thus an error.
                                             ;*
   8939 FFFCC2FC                             GOSUB:
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 92
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8940 FFFCC2FC 6100 0694                   	BSR.L	PUSHA	;	save the current 'FOR' parameters
   8941 FFFCC300 6100 02C0                   	BSR.L	EXPR		;get line number
   8942 FFFCC304 2F08                        	MOVE.L	A0,-(SP)	;save text pointer
   8943 FFFCC306 2200                        	MOVE.L	D0,D1
   8944 FFFCC308 6100 062A                   	BSR.L	FNDLN		;find the target line
   8945 FFFCC30C 6600 057E                   	BNE.L	AHOW		;if not there, say "How?"
   8946 FFFCC310 2F38 0604                   	MOVE.L	CURRNT,-(SP)	;found it, save old 'CURRNT'...
   8947 FFFCC314 2F38 0608                   	MOVE.L	STKGOS,-(SP)	;and 'STKGOS'
   8948 FFFCC318 42B8 0610                   	CLR.L	LOPVAR		;load new values
   8949 FFFCC31C 21CF 0608                   	MOVE.L	SP,STKGOS
   8950 FFFCC320 6000 FF14                   	BRA	RUNTSL
                                             
   8952 FFFCC324                             RETURN:
   8953 FFFCC324 6100 050C                   	BSR.L	ENDCHK	;	there should be just a <CR>
   8954 FFFCC328 2238 0608                   	MOVE.L	STKGOS,D1	;get old stack pointer
   8955 FFFCC32C 6700 0510                   	BEQ.L	QWHAT		;if zero, it doesn't exist
   8956 FFFCC330 2E41                        	MOVE.L	D1,SP		;else restore it
   8957 FFFCC332 21DF 0608                   	MOVE.L	(SP)+,STKGOS	;and the old 'STKGOS'
   8958 FFFCC336 21DF 0604                   	MOVE.L	(SP)+,CURRNT	;and the old 'CURRNT'
   8959 FFFCC33A 205F                        	MOVE.L	(SP)+,A0	;and the old text pointer
   8960 FFFCC33C 6100 063A                   	BSR.L	POPA		;and the old 'FOR' parameters
   8961 FFFCC340 60B2                        	BRA	FINISH		;and we are back home
                                             
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** FOR *** & NEXT ***
                                             ;*
                                             ;* 'FOR' has two forms:
                                             ;* 'FOR var=exp1 TO exp2 STEP exp1' and 'FOR var=exp1 TO exp2'
                                             ;* The second form means the same thing as the first form with a
                                             ;* STEP of positive 1.  The interpreter will find the variable 'var'
                                             ;* and set its value to the current value of 'exp1'.  It also
                                             ;* evaluates 'exp2' and 'exp1' and saves all these together with
                                             ;* the text pointer, etc. in the 'FOR' save area, which consisits of
                                             ;* 'LOPVAR', 'LOPINC', 'LOPLMT', 'LOPLN', and 'LOPPT'.  If there is
                                             ;* already something in the save area (indicated by a non-zero
                                             ;* 'LOPVAR'), then the old save area is saved on the stack before
                                             ;* the new values are stored.  The interpreter will then dig in the
                                             ;* stack and find out if this same variable was used in another
                                             ;* currently active 'FOR' loop.  If that is the case, then the old
                                             ;* 'FOR' loop is deactivated. (i.e. purged from the stack)
                                             ;*
                                             ;* 'NEXT var' serves as the logical (not necessarily physical) end
                                             ;* of the 'FOR' loop.  The control variable 'var' is checked with
                                             ;* the 'LOPVAR'.  If they are not the same, the interpreter digs in
                                             ;* the stack to find the right one and purges all those that didn't
                                             ;* match.  Either way, it then adds the 'STEP' to that variable and
                                             ;* checks the result with against the limit value.  If it is within
                                             ;* the limit, control loops back to the command following the
                                             ;* 'FOR'.  If it's outside the limit, the save area is purged and
                                             ;* execution continues.
                                             ;*
   8993 FFFCC342                             FOR:
   8994 FFFCC342 6100 064E                   	BSR.L	PUSHA		;save the old 'FOR' save area
   8995 FFFCC346 6100 04B6                   	BSR.L	SETVAL		;set the control variable
   8996 FFFCC34A 21CE 0610                   	MOVE.L	A6,LOPVAR	;save its address
   8997 FFFCC34E 43F9 FFFC C15B              	LEA	TAB5,A1 	;use 'EXEC' to test for 'TO'
   8998 FFFCC354 45F9 FFFC C1A0              	LEA	TAB5_1,A2
   8999 FFFCC35A 6000 FE66                   	BRA	EXEC
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 93
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9000 FFFCC35E                             FR1:
   9001 FFFCC35E 6100 0262                   	BSR.L	EXPR		;evaluate the limit
   9002 FFFCC362 21C0 0618                   	MOVE.L	D0,LOPLMT	;save that
   9003 FFFCC366 43F9 FFFC C15E              	LEA	TAB6,A1 	;use 'EXEC' to look for the
   9004 FFFCC36C 45F9 FFFC C1A4              	LEA	TAB6_1,A2	;word 'STEP'
   9005 FFFCC372 6000 FE4E                   	BRA	EXEC
   9006 FFFCC376                             FR2:
   9007 FFFCC376 6100 024A                   	BSR.L	EXPR	;	found it, get the step value
   9008 FFFCC37A 6002                        	BRA	FR4
   9009 FFFCC37C                             FR3:
   9010 FFFCC37C 7001                        	MOVEQ	#1,D0	;	not found, step defaults to 1
   9011 FFFCC37E                             FR4:
   9012 FFFCC37E 21C0 0614                   	MOVE.L	D0,LOPINC	;save that too
   9013 FFFCC382                             FR5:
   9014 FFFCC382 21F8 0604 061C              	MOVE.L	CURRNT,LOPLN	;save address of current line number
   9015 FFFCC388 21C8 0620                   	MOVE.L	A0,LOPPT	;and text pointer
   9016 FFFCC38C 2C4F                        	MOVE.L	SP,A6		;dig into the stack to find 'LOPVAR'
   9017 FFFCC38E 6006                        	BRA	FR7
   9018 FFFCC390                             FR6:
   9019 FFFCC390 DDFC 0000 0014              	ADD.L	#20,A6		;look at next stack frame
   9020 FFFCC396                             FR7:
   9021 FFFCC396 2016                        	MOVE.L	(A6),D0 	;is it zero?
   9022 FFFCC398 6716                        	BEQ	FR8		;if so, we're done
   9023 FFFCC39A B0B8 0610                   	CMP.L	LOPVAR,D0	;same as current LOPVAR?
   9024 FFFCC39E 66F0                        	BNE	FR6		;nope, look some more
   9025 FFFCC3A0 244F                        	MOVE.L	SP,A2	;	Else remove 5 long words from...
   9026 FFFCC3A2 224E                        	MOVE.L	A6,A1	;	inside the stack.
   9027 FFFCC3A4 47F8 0014                   	LEA	20,A3
   9028 FFFCC3A8 D7C9                        	ADD.L	A1,A3
   9029 FFFCC3AA 6100 05C4                   	BSR.L	MVDOWN
   9030 FFFCC3AE 2E4B                        	MOVE.L	A3,SP	;	set the SP 5 long words up
   9031 FFFCC3B0                             FR8:
   9032 FFFCC3B0 6000 FF42                   	BRA	FINISH		;and continue execution
                                             
   9034 FFFCC3B4                             NEXT:
   9035 FFFCC3B4 6100 031E                   	BSR.L	TSTV;		get address of variable
   9036 FFFCC3B8 6500 0484                   	BCS.L	QWHAT	;	if no variable, say "What?"
   9037 FFFCC3BC 2240                        	MOVE.L	D0,A1	;	save variable's address
   9038 FFFCC3BE                             NX0:
   9039 FFFCC3BE 2038 0610                   	MOVE.L	LOPVAR,D0;	If 'LOPVAR' is zero, we never...
   9040 FFFCC3C2 6700 047A                   	BEQ.L	QWHAT	;	had a FOR loop, so say "What?"
   9041 FFFCC3C6 B3C0                        	CMP.L	D0,A1	;;	else we check them
   9042 FFFCC3C8 6706                        	BEQ	NX3	;	OK, they agree
   9043 FFFCC3CA 6100 05AC                   	BSR.L	POPA	;	nope, let's see the next frame
   9044 FFFCC3CE 60EE                        	BRA	NX0
   9045 FFFCC3D0                             NX3:
   9046 FFFCC3D0 2011                        	MOVE.L	(A1),D0 ;	get control variable's value
   9047 FFFCC3D2 D0B8 0614                   	ADD.L	LOPINC,D0;	add in loop increment
   9048 FFFCC3D6 6900 04B2                   	BVS.L	QHOW	;	say "How?" for 32-bit overflow
   9049 FFFCC3DA 2280                        	MOVE.L	D0,(A1) ;	save control variable's new value
   9050 FFFCC3DC 2238 0618                   	MOVE.L	LOPLMT,D1;	get loop's limit value
   9051 FFFCC3E0 4AB8 0614                   	TST.L	LOPINC
   9052 FFFCC3E4 6A02                        	BPL	NX1	;	branch if loop increment is positive
   9053 FFFCC3E6 C141                        	EXG	D0,D1
   9054 FFFCC3E8                             NX1:
   9055 FFFCC3E8 B280                        	CMP.L	D0,D1;		test against limit
   9056 FFFCC3EA 6D0E                        	BLT	NX2;		branch if outside limit
   9057 FFFCC3EC 21F8 061C 0604              	MOVE.L	LOPLN,CURRNT	;Within limit, go back to the...
   9058 FFFCC3F2 2078 0620                   	MOVE.L	LOPPT,A0	;saved 'CURRNT' and text pointer.
   9059 FFFCC3F6 6000 FEFC                   	BRA	FINISH
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 94
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9060 FFFCC3FA                             NX2:
   9061 FFFCC3FA 6100 057C                   	BSR.L	POPA		;purge this loop
   9062 FFFCC3FE 6000 FEF4                   	BRA	FINISH
                                             
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** REM *** IF *** INPUT *** LET (& DEFLT) ***
                                             ;*
                                             ;* 'REM' can be followed by anything and is ignored by the
                                             ;* interpreter.
                                             ;*
                                             ;* 'IF' is followed by an expression, as a condition and one or
                                             ;* more commands (including other 'IF's) separated by colons.
                                             ;* Note that the word 'THEN' is not used.  The interpreter evaluates
                                             ;* the expression.  If it is non-zero, execution continues.  If it
                                             ;* is zero, the commands that follow are ignored and execution
                                             ;* continues on the next line.
                                             ;*
                                             ;* 'INPUT' is like the 'PRINT' command, and is followed by a list
                                             ;* of items.  If the item is a string in single or double quotes,
                                             ;* or is an underline (back arrow), it has the same effect as in
                                             ;* 'PRINT'.  If an item is a variable, this variable name is
                                             ;* printed out followed by a colon, then the interpreter waits for
                                             ;* an expression to be typed in.  The variable is then set to the
                                             ;* value of this expression.  If the variable is preceeded by a
                                             ;* string (again in single or double quotes), the string will be
                                             ;* displayed followed by a colon.  The interpreter the waits for an
                                             ;* expression to be entered and sets the variable equal to the
                                             ;* expression's value.  If the input expression is invalid, the
                                             ;* interpreter will print "What?", "How?", or "Sorry" and reprint
                                             ;* the prompt and redo the input.  The execution will not terminate
                                             ;* unless you press control-C.  This is handled in 'INPERR'.
                                             ;*
                                             ;* 'LET' is followed by a list of items separated by commas.
                                             ;* Each item consists of a variable, an equals sign, and an
                                             ;* expression.  The interpreter evaluates the expression and sets
                                             ;* the variable to that value.  The interpreter will also handle
                                             ;* 'LET' commands without the word 'LET'.  This is done by 'DEFLT'.
                                             ;*
   9100 FFFCC402                             REM:
   9101 FFFCC402 600A                        	BRA	IF2		;skip the rest of the line
                                             
   9103 FFFCC404                             IF:	
   9104 FFFCC404 6100 01BC                   	BSR.L	EXPR	;	evaluate the expression
   9105 FFFCC408                             IF1:
   9106 FFFCC408 4A80                        	TST.L	D0		;is it zero?
   9107 FFFCC40A 6600 FE32                   	BNE	RUNSML		;if not, continue
   9108 FFFCC40E                             IF2:
   9109 FFFCC40E 2248                        	MOVE.L	A0,A1
   9110 FFFCC410 4281                        	CLR.L	D1
   9111 FFFCC412 6100 054A                   	BSR.L	FNDSKP	;	if so, skip the rest of the line
   9112 FFFCC416 6400 FE1E                   	BCC	RUNTSL		;and run the next line
   9113 FFFCC41A 6000 FC44                   	BRA.L	WSTART	;	if no next line, do a warm start
                                             
   9115 FFFCC41E                             INPERR:
   9116 FFFCC41E 2E78 060C                   	MOVE.L	STKINP,SP;	restore the old stack pointer
   9117 FFFCC422 21DF 0604                   	MOVE.L	(SP)+,CURRNT;	and old 'CURRNT'
   9118 FFFCC426 588F                        	ADDQ.L	#4,SP
   9119 FFFCC428 205F                        	MOVE.L	(SP)+,A0	;and old text pointer
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 95
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
                                             
   9121 FFFCC42A                             INPUT:
   9122 FFFCC42A 2F08                        	MOVE.L	A0,-(SP);	save in case of error
   9123 FFFCC42C 6100 05A6                   	BSR.L	QTSTG		;is next item a string?
   9124 FFFCC430 600A                        	BRA.S	IP2		;nope
   9125 FFFCC432 6100 02A0                   	BSR.L	TSTV	;	yes, but is it followed by a variable?
   9126 FFFCC436 654C                        	BCS	IP4		;if not, branch
   9127 FFFCC438 2440                        	MOVE.L	D0,A2	;	put away the variable's address
   9128 FFFCC43A 601A                        	BRA	IP3		;if so, input to variable
   9129 FFFCC43C                             IP2:
   9130 FFFCC43C 2F08                        	MOVE.L	A0,-(SP);	save for 'PRTSTG'
   9131 FFFCC43E 6100 0294                   	BSR.L	TSTV	;	must be a variable now
   9132 FFFCC442 6500 03FA                   	BCS.L	QWHAT	;	"What?" it isn't?
   9133 FFFCC446 2440                        	MOVE.L	D0,A2	;	put away the variable's address
   9134 FFFCC448 1410                        	MOVE.B	(A0),D2 ;	get ready for 'PRTSTG'
   9135 FFFCC44A 4200                        	CLR.B	D0
   9136 FFFCC44C 1080                        	MOVE.B	D0,(A0)
   9137 FFFCC44E 225F                        	MOVE.L	(SP)+,A1
   9138 FFFCC450 6100 0566                   	BSR.L	PRTSTG	;	print string as prompt
   9139 FFFCC454 1082                        	MOVE.B	D2,(A0) ;	restore text
   9140 FFFCC456                             IP3:
   9141 FFFCC456 2F08                        	MOVE.L	A0,-(SP);	save in case of error
   9142 FFFCC458 2F38 0604                   	MOVE.L	CURRNT,-(SP)	;also save 'CURRNT'
   9143 FFFCC45C 21FC FFFF FFFF 0604         	MOVE.L	#-1,CURRNT	;flag that we are in INPUT
   9144 FFFCC464 21CF 060C                   	MOVE.L	SP,STKINP	;save the stack pointer too
   9145 FFFCC468 2F0A                        	MOVE.L	A2,-(SP)	;save the variable address
   9146 FFFCC46A 103C 003A                   	MOVE.B	#':',D0     ;    print a colon first
   9147 FFFCC46E 6100 0424                   	BSR.L	GETLN		;then get an input line
   9148 FFFCC472 41F8 0630                   	LEA	BUFFER,A0	;point to the buffer
   9149 FFFCC476 6100 014A                   	BSR.L	EXPR	;	evaluate the input
   9150 FFFCC47A 245F                        	MOVE.L	(SP)+,A2	;restore the variable address
   9151 FFFCC47C 2480                        	MOVE.L	D0,(A2) 	;save value in variable
   9152 FFFCC47E 21DF 0604                   	MOVE.L	(SP)+,CURRNT	;restore old 'CURRNT'
   9153 FFFCC482 205F                        	MOVE.L	(SP)+,A0;	and the old text pointer
   9154 FFFCC484                             IP4:
   9155 FFFCC484 588F                        	ADDQ.L	#4,SP	;	clean up the stack
   9156 FFFCC486 6100 061C                   	BSR.L	TSTC	;	is the next thing a comma?
   9157 FFFCC48A 2C 03                       	DC.B	',',IP5-$
   9158 FFFCC48C 609C                        	BRA	INPUT	;	yes, more items
   9159 FFFCC48E                             IP5:
   9160 FFFCC48E 6000 FE64                   	BRA	FINISH
                                             
   9162 FFFCC492                             DEFLT:
   9163 FFFCC492 0C10 000D                   	CMP.B	#CR,(A0);	empty line is OK
   9164 FFFCC496 670C                        	BEQ	LT1		;else it is 'LET'
                                             
   9166 FFFCC498                             LET:
   9167 FFFCC498 6100 0364                   	BSR.L	SETVAL		;do the assignment
   9168 FFFCC49C 6100 0606                   	BSR.L	TSTC		;check for more 'LET' items
   9169 FFFCC4A0 2C 03                       	DC.B	',',LT1-$
   9170 FFFCC4A2 60F4                        	BRA	LET
   9171 FFFCC4A4                             LT1:
   9172 FFFCC4A4 6000 FE4E                   	BRA	FINISH		;until we are finished.
                                             
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** LOAD *** & SAVE ***
                                             ;*
                                             ;* These two commands transfer a program to/from an auxiliary
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 96
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
                                             ;* device such as a cassette, another computer, etc.  The program
                                             ;* is converted to an easily-stored format: each line starts with
                                             ;* a colon, the line no. as 4 hex digits, and the rest of the line.
                                             ;* At the end, a line starting with an '@' sign is sent.  This
                                             ;* format can be read back with a minimum of processing time by
                                             ;* the 68000.
                                             ;*
   9187 FFFCC4A8                             LOAD:
   9188 FFFCC4A8 2079 FFFC C01C              	MOVE.L	TXTBGN,A0	;set pointer to start of prog. area
   9189 FFFCC4AE 103C 000D                   	MOVE.B	#CR,D0		;For a CP/M host, tell it we're ready...
   9190 FFFCC4B2 6100 FB5C                   	BSR	GOAUXO		;by sending a CR to finish PIP command.
   9191 FFFCC4B6                             LOD1:
   9192 FFFCC4B6 6100 FB5C                   	BSR	GOAUXI	;	look for start of line
   9193 FFFCC4BA 67FA                        	BEQ	LOD1
   9194 FFFCC4BC B03C 0040                   	CMP.B	#'@',D0  ;       end of program?
   9195 FFFCC4C0 6722                        	BEQ	LODEND
   9196 FFFCC4C2 B03C 003A                   	CMP.B	#':',D0   ;      if not, is it start of line?
   9197 FFFCC4C6 66EE                        	BNE	LOD1		;if not, wait for it
   9198 FFFCC4C8 6100 0022                   	BSR	GBYTE		;get first byte of line no.
   9199 FFFCC4CC 10C1                        	MOVE.B	D1,(A0)+	;store it
   9200 FFFCC4CE 6100 001C                   	BSR	GBYTE		;get 2nd bye of line no.
   9201 FFFCC4D2 10C1                        	MOVE.B	D1,(A0)+;	store that, too
   9202 FFFCC4D4                             LOD2:
   9203 FFFCC4D4 6100 FB3E                   	BSR	GOAUXI	;	get another text char.
   9204 FFFCC4D8 67FA                        	BEQ	LOD2
   9205 FFFCC4DA 10C0                        	MOVE.B	D0,(A0)+	;store it
   9206 FFFCC4DC B03C 000D                   	CMP.B	#CR,D0		;is it the end of the line?
   9207 FFFCC4E0 66F2                        	BNE	LOD2		;if not, go back for more
   9208 FFFCC4E2 60D2                        	BRA	LOD1		;if so, start a new line
   9209 FFFCC4E4                             LODEND:
   9210 FFFCC4E4 21C8 0624                   	MOVE.L	A0,TXTUNF	;set end-of program pointer
   9211 FFFCC4E8 6000 FB76                   	BRA	WSTART		;back to direct mode
                                             
   9213 FFFCC4EC                             GBYTE:
   9214 FFFCC4EC 7401                        	MOVEQ	#1,D2;		get two hex characters from auxiliary
   9215 FFFCC4EE 4281                        	CLR	D1		;and store them as a byte in D1
   9216 FFFCC4F0                             GBYTE1:
   9217 FFFCC4F0 6100 FB22                   	BSR	GOAUXI	;	get a char.
   9218 FFFCC4F4 67FA                        	BEQ	GBYTE1
   9219 FFFCC4F6 B03C 0041                   	CMP.B	#'A',D0
   9220 FFFCC4FA 6502                        	BCS	GBYTE2
   9221 FFFCC4FC 5F00                        	SUBQ.B	#7,D0	;	if greater than 9, adjust
   9222 FFFCC4FE                             GBYTE2:
   9223 FFFCC4FE 0200 000F                   	AND.B	#0xF,D0		;strip ASCII
   9224 FFFCC502 E909                        	LSL.B	#4,D1		;put nybble into the result
   9225 FFFCC504 8200                        	OR.B	D0,D1
   9226 FFFCC506 51CA FFE8                   	DBRA	D2,GBYTE1	;get another char.
   9227 FFFCC50A 4E75                        	RTS
                                             
   9229 FFFCC50C                             SAVE:
   9230 FFFCC50C 2079 FFFC C01C              	MOVE.L	TXTBGN,A0;	set pointer to start of prog. area
   9231 FFFCC512 2278 0624                   	MOVE.L	TXTUNF,A1	;set pointer to end of prog. area
   9232 FFFCC516                             SAVE1:
   9233 FFFCC516 103C 000D                   	MOVE.B	#CR,D0	;	send out a CR & LF (CP/M likes this)
   9234 FFFCC51A 6100 FAF4                   	BSR	GOAUXO
   9235 FFFCC51E 103C 000A                   	MOVE.B	#LF,D0
   9236 FFFCC522 6100 FAEC                   	BSR	GOAUXO
   9237 FFFCC526 B3C8                        	CMP.L	A0,A1		;are we finished?
   9238 FFFCC528 6322                        	BLS	SAVEND
   9239 FFFCC52A 103C 003A                   	MOVE.B	#':',D0      ;   if not, start a line
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 97
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9240 FFFCC52E 6100 FAE0                   	BSR	GOAUXO
   9241 FFFCC532 1218                        	MOVE.B	(A0)+,D1	;send first half of line no.
   9242 FFFCC534 6100 003A                   	BSR	PBYTE
   9243 FFFCC538 1218                        	MOVE.B	(A0)+,D1	;and send 2nd half
   9244 FFFCC53A 6100 0034                   	BSR	PBYTE
   9245 FFFCC53E                             SAVE2:
   9246 FFFCC53E 1018                        	MOVE.B	(A0)+,D0;	get a text char.
   9247 FFFCC540 B03C 000D                   	CMP.B	#CR,D0		;is it the end of the line?
   9248 FFFCC544 67D0                        	BEQ	SAVE1		;if so, send CR & LF and start new line
   9249 FFFCC546 6100 FAC8                   	BSR	GOAUXO		;send it out
   9250 FFFCC54A 60F2                        	BRA	SAVE2		;go back for more text
   9251 FFFCC54C                             SAVEND:
   9252 FFFCC54C 103C 0040                   	MOVE.B	#'@',D0 ;        send end-of-program indicator
   9253 FFFCC550 6100 FABE                   	BSR	GOAUXO
   9254 FFFCC554 103C 000D                   	MOVE.B	#CR,D0	;	followed by a CR & LF
   9255 FFFCC558 6100 FAB6                   	BSR	GOAUXO
   9256 FFFCC55C 103C 000A                   	MOVE.B	#LF,D0
   9257 FFFCC560 6100 FAAE                   	BSR	GOAUXO
   9258 FFFCC564 103C 001A                   	MOVE.B	#0x1A,D0 	;and a control-Z to end the CP/M file
   9259 FFFCC568 6100 FAA6                   	BSR	GOAUXO
   9260 FFFCC56C 6000 FAF2                   	BRA	WSTART		;then go do a warm start
                                             
   9262 FFFCC570                             PBYTE:
   9263 FFFCC570 7401                        	MOVEQ	#1,D2	;	send two hex characters from D1's low byte
   9264 FFFCC572                             PBYTE1:
   9265 FFFCC572 E919                        	ROL.B	#4,D1	;	get the next nybble
   9266 FFFCC574 1001                        	MOVE.B	D1,D0
   9267 FFFCC576 0200 000F                   	AND.B	#0xF,D0	;	strip off garbage
   9268 FFFCC57A 0600 0030                   	ADD.B	#'0',D0   ;      make it into ASCII
   9269 FFFCC57E B03C 0039                   	CMP.B	#'9',D0
   9270 FFFCC582 6302                        	BLS	PBYTE2
   9271 FFFCC584 5E00                        	ADDQ.B	#7,D0		;adjust if greater than 9
   9272 FFFCC586                             PBYTE2:
   9273 FFFCC586 6100 FA88                   	BSR	GOAUXO		;send it out
   9274 FFFCC58A 51CA FFE6                   	DBRA	D2,PBYTE1	;then send the next nybble
   9275 FFFCC58E 4E75                        	RTS
                                             
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** POKE *** & CALL ***
                                             ;*
                                             ;* 'POKE expr1,expr2' stores the byte from 'expr2' into the memory
                                             ;* address specified by 'expr1'.
                                             ;*
                                             ;* 'CALL expr' jumps to the machine language subroutine whose
                                             ;* starting address is specified by 'expr'.  The subroutine can use
                                             ;* all registers but must leave the stack the way it found it.
                                             ;* The subroutine returns to the interpreter by executing an RTS.
                                             ;*
   9290 FFFCC590                             POKE:
   9291 FFFCC590 6100 0030                   	BSR	EXPR		;get the memory address
   9292 FFFCC594 6100 050E                   	BSR.L	TSTC		;it must be followed by a comma
   9293 FFFCC598 2C 0F                       	DC.B	',',PKER-$
   9294 FFFCC59A 2F00                        	MOVE.L	D0,-(SP)	;save the address
   9295 FFFCC59C 6100 0024                   	BSR	EXPR		;get the byte to be POKE'd
   9296 FFFCC5A0 225F                        	MOVE.L	(SP)+,A1	;get the address back
   9297 FFFCC5A2 1280                        	MOVE.B	D0,(A1) 	;store the byte in memory
   9298 FFFCC5A4 6000 FD4E                   	BRA	FINISH
   9299 FFFCC5A8                             PKER:
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 98
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9300 FFFCC5A8 6000 0294                   	BRA.L	QWHAT	;	if no comma, say "What?"
                                             
   9302 FFFCC5AC                             CALL:
   9303 FFFCC5AC 6100 0014                   	BSR	EXPR		;get the subroutine's address
   9304 FFFCC5B0 4A80                        	TST.L	D0		;make sure we got a valid address
   9305 FFFCC5B2 6700 02D6                   	BEQ.L	QHOW	;	if not, say "How?"
   9306 FFFCC5B6 2F08                        	MOVE.L	A0,-(SP);	save the text pointer
   9307 FFFCC5B8 2240                        	MOVE.L	D0,A1
   9308 FFFCC5BA 4E91                        	JSR	(A1)		;jump to the subroutine
   9309 FFFCC5BC 205F                        	MOVE.L	(SP)+,A0	;restore the text pointer
   9310 FFFCC5BE 6000 FD34                   	BRA	FINISH
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** EXPR ***
                                             ;*
                                             ;* 'EXPR' evaluates arithmetical or logical expressions.
                                             ;* <EXPR>::=<EXPR2>
                                             ;*	   <EXPR2><rel.op.><EXPR2>
                                             ;* where <rel.op.> is one of the operators in TAB8 and the result
                                             ;* of these operations is 1 if true and 0 if false.
                                             ;* <EXPR2>::=(+ or -)<EXPR3>(+ or -)<EXPR3>(...
                                             ;* where () are optional and (... are optional repeats.
                                             ;* <EXPR3>::=<EXPR4>( <* or /><EXPR4> )(...
                                             ;* <EXPR4>::=<variable>
                                             ;*	    <function>
                                             ;*	    (<EXPR>)
                                             ;* <EXPR> is recursive so that the variable '@' can have an <EXPR>
                                             ;* as an index, functions can have an <EXPR> as arguments, and
                                             ;* <EXPR4> can be an <EXPR> in parenthesis.
                                             ;*
   9331 FFFCC5C2                             EXPR:
   9332 FFFCC5C2 6100 0066                   	BSR	EXPR2
   9333 FFFCC5C6 2F00                        	MOVE.L	D0,-(SP);	save <EXPR2> value
   9334 FFFCC5C8 43F9 FFFC C163              	LEA	TAB8,A1 	;look up a relational operator
   9335 FFFCC5CE 45F9 FFFC C1A8              	LEA	TAB8_1,A2
   9336 FFFCC5D4 6000 FBEC                   	BRA	EXEC		;go do it
                                             
   9338 FFFCC5D8                             XP11:
   9339 FFFCC5D8 6100 003E                   	BSR	XP18	;	is it ">="?
   9340 FFFCC5DC 6D2E                        	BLT	XPRT0		;no, return D0=0
   9341 FFFCC5DE 6030                        	BRA	XPRT1		;else return D0=1
                                             
   9343 FFFCC5E0                             XP12:
   9344 FFFCC5E0 6100 0036                   	BSR	XP18	;	is it "<>"?
   9345 FFFCC5E4 6726                        	BEQ	XPRT0		;no, return D0=0
   9346 FFFCC5E6 6028                        	BRA	XPRT1		;else return D0=1
                                             
   9348 FFFCC5E8                             XP13:
   9349 FFFCC5E8 6100 002E                   	BSR	XP18	;	is it ">"?
   9350 FFFCC5EC 6F1E                        	BLE	XPRT0		;no, return D0=0
   9351 FFFCC5EE 6020                        	BRA	XPRT1		;else return D0=1
                                             
   9353 FFFCC5F0                             XP14:
   9354 FFFCC5F0 6100 0026                   	BSR	XP18	;	is it "<="?
   9355 FFFCC5F4 6E16                        	BGT	XPRT0		;no, return D0=0
   9356 FFFCC5F6 6018                        	BRA	XPRT1		;else return D0=1
                                             
   9358 FFFCC5F8                             XP15:
   9359 FFFCC5F8 6100 001E                   	BSR	XP18	;	is it "="?
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 99
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9360 FFFCC5FC 660E                        	BNE	XPRT0		;if not, return D0=0
   9361 FFFCC5FE 6010                        	BRA	XPRT1		;else return D0=1
   9362 FFFCC600                             XP15RT:
   9363 FFFCC600 4E75                        	RTS
                                             
   9365 FFFCC602                             XP16:
   9366 FFFCC602 6100 0014                   	BSR	XP18	;	is it "<"?
   9367 FFFCC606 6C04                        	BGE	XPRT0		;if not, return D0=0
   9368 FFFCC608 6006                        	BRA	XPRT1		;else return D0=1
   9369 FFFCC60A                             XP16RT:
   9370 FFFCC60A 4E75                        	RTS
                                             
   9372 FFFCC60C                             XPRT0:
   9373 FFFCC60C 4280                        	CLR.L	D0	;	return D0=0 (false)
   9374 FFFCC60E 4E75                        	RTS
                                             
   9376 FFFCC610                             XPRT1:
   9377 FFFCC610 7001                        	MOVEQ	#1,D0;		return D0=1 (true)
   9378 FFFCC612 4E75                        	RTS
                                             
   9380 FFFCC614                             XP17:
   9381 FFFCC614 201F                        	MOVE.L	(SP)+,D0	;it's not a rel. operator
   9382 FFFCC616 4E75                        	RTS			;return D0=<EXPR2>
                                             
   9384 FFFCC618                             XP18:
   9385 FFFCC618 201F                        	MOVE.L	(SP)+,D0	;reverse the top two stack items
   9386 FFFCC61A 221F                        	MOVE.L	(SP)+,D1
   9387 FFFCC61C 2F00                        	MOVE.L	D0,-(SP)
   9388 FFFCC61E 2F01                        	MOVE.L	D1,-(SP)
   9389 FFFCC620 6100 0008                   	BSR	EXPR2		;do second <EXPR2>
   9390 FFFCC624 221F                        	MOVE.L	(SP)+,D1
   9391 FFFCC626 B280                        	CMP.L	D0,D1	;	compare with the first result
   9392 FFFCC628 4E75                        	RTS			;return the result
                                             
   9394 FFFCC62A                             EXPR2:
   9395 FFFCC62A 6100 0478                   	BSR.L	TSTC		;negative sign?
   9396 FFFCC62E 2D 05                       	DC.B	'-',XP21-$
   9397 FFFCC630 4280                        	CLR.L	D0	;	yes, fake '0-'
   9398 FFFCC632 6026                        	BRA	XP26
   9399 FFFCC634                             XP21:
   9400 FFFCC634 6100 046E                   	BSR.L	TSTC	;	positive sign? ignore it
   9401 FFFCC638 2B 01                       	DC.B	'+',XP22-$
   9402 FFFCC63A                             XP22:
   9403 FFFCC63A 6100 002C                   	BSR	EXPR3		;first <EXPR3>
   9404 FFFCC63E                             XP23:
   9405 FFFCC63E 6100 0464                   	BSR.L	TSTC	;	add?
   9406 FFFCC642 2B 11                       	DC.B	'+',XP25-$
   9407 FFFCC644 2F00                        	MOVE.L	D0,-(SP)	;yes, save the value
   9408 FFFCC646 6100 0020                   	BSR	EXPR3		;get the second <EXPR3>
   9409 FFFCC64A                             XP24:
   9410 FFFCC64A 221F                        	MOVE.L	(SP)+,D1
   9411 FFFCC64C D081                        	ADD.L	D1,D0	;	add it to the first <EXPR3>
   9412 FFFCC64E 6900 023A                   	BVS.L	QHOW	;	branch if there's an overflow
   9413 FFFCC652 60EA                        	BRA	XP23	;	else go back for more operations
   9414 FFFCC654                             XP25:
   9415 FFFCC654 6100 044E                   	BSR.L	TSTC		;subtract?
   9416 FFFCC658 2D 75                       	DC.B	'-',XP42-$
   9417 FFFCC65A                             XP26:
   9418 FFFCC65A 2F00                        	MOVE.L	D0,-(SP)	;yes, save the result of 1st <EXPR3>
   9419 FFFCC65C 6100 000A                   	BSR	EXPR3		;get second <EXPR3>
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 100
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9420 FFFCC660 4480                        	NEG.L	D0		;change its sign
   9421 FFFCC662 4EF9 FFFC C64A              	JMP	XP24		;and do an addition
                                             
   9423 FFFCC668                             EXPR3:
   9424 FFFCC668 6100 002C                   	BSR	EXPR4		;get first <EXPR4>
   9425 FFFCC66C                             XP31:
   9426 FFFCC66C 6100 0436                   	BSR.L	TSTC	;	multiply?
   9427 FFFCC670 2A 0F                       	DC.B	'*',XP34-$
   9428 FFFCC672 2F00                        	MOVE.L	D0,-(SP);	yes, save that first result
   9429 FFFCC674 6100 0020                   	BSR	EXPR4		;get second <EXPR4>
   9430 FFFCC678 221F                        	MOVE.L	(SP)+,D1
   9431 FFFCC67A 6100 00A8                   	BSR.L	MULT32	;	multiply the two
   9432 FFFCC67E 60EC                        	BRA	XP31		;then look for more terms
   9433 FFFCC680                             XP34:
   9434 FFFCC680 6100 0422                   	BSR.L	TSTC;		divide?
   9435 FFFCC684 2F 49                       	DC.B	'/',XP42-$
   9436 FFFCC686 2F00                        	MOVE.L	D0,-(SP);	save result of 1st <EXPR4>
   9437 FFFCC688 6100 000C                   	BSR	EXPR4		;get second <EXPR4>
   9438 FFFCC68C 221F                        	MOVE.L	(SP)+,D1
   9439 FFFCC68E C141                        	EXG	D0,D1
   9440 FFFCC690 6100 00D4                   	BSR.L	DIV32	;	do the division
   9441 FFFCC694 60D6                        	BRA	XP31		;go back for any more terms
                                             
   9443 FFFCC696                             EXPR4:
   9444 FFFCC696 43F9 FFFC C14C              	LEA	TAB4,A1 ;	find possible function
   9445 FFFCC69C 45F9 FFFC C196              	LEA	TAB4_1,A2
   9446 FFFCC6A2 6000 FB1E                   	BRA	EXEC
   9447 FFFCC6A6                             XP40:
   9448 FFFCC6A6 6100 002C                   	BSR	TSTV	;	nope, not a function
   9449 FFFCC6AA 6508                        	BCS	XP41		;nor a variable
   9450 FFFCC6AC 2240                        	MOVE.L	D0,A1
   9451 FFFCC6AE 4280                        	CLR.L	D0
   9452 FFFCC6B0 2011                        	MOVE.L	(A1),D0 ;	if a variable, return its value in D0
   9453 FFFCC6B2                             EXP4RT:
   9454 FFFCC6B2 4E75                        	RTS
   9455 FFFCC6B4                             XP41:
   9456 FFFCC6B4 6100 0408                   	BSR.L	TSTNUM	;	or is it a number?
   9457 FFFCC6B8 2001                        	MOVE.L	D1,D0
   9458 FFFCC6BA 4A82                        	TST	D2		;(if not, # of digits will be zero)
   9459 FFFCC6BC 66F4                        	BNE	EXP4RT	;	if so, return it in D0
   9460 FFFCC6BE                             PARN:
   9461 FFFCC6BE 6100 03E4                   	BSR.L	TSTC	;	else look for ( EXPR )
   9462 FFFCC6C2 28 0D                       	DC.B	'(',XP43-$
   9463 FFFCC6C4 6100 FEFC                   	BSR	EXPR
   9464 FFFCC6C8 6100 03DA                   	BSR.L	TSTC
   9465 FFFCC6CC 29 03                       	DC.B	')',XP43-$
   9466 FFFCC6CE                             XP42:
   9467 FFFCC6CE 4E75                        	RTS
   9468 FFFCC6D0                             XP43:
   9469 FFFCC6D0 6000 016C                   	BRA.L	QWHAT	;	else say "What?"
                                             
                                             ;*
                                             ;* ===== Test for a valid variable name.  Returns Carry=1 if not
                                             ;*	found, else returns Carry=0 and the address of the
                                             ;*	variable in D0.
                                             
   9476 FFFCC6D4                             TSTV:
   9477 FFFCC6D4 6100 0420                   	BSR.L	IGNBLK
   9478 FFFCC6D8 4280                        	CLR.L	D0
   9479 FFFCC6DA 1010                        	MOVE.B	(A0),D0 ;	look at the program text
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 101
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9480 FFFCC6DC 0400 0040                   	SUB.B	#'@',D0
   9481 FFFCC6E0 6540                        	BCS	TSTVRT	;	C=1: not a variable
   9482 FFFCC6E2 6628                        	BNE	TV1		;branch if not "@" array
   9483 FFFCC6E4 5288                        	ADDQ	#1,A0	;	If it is, it should be
   9484 FFFCC6E6 6100 FFD6                   	BSR	PARN		;followed by (EXPR) as its index.
   9485 FFFCC6EA D080                        	ADD.L	D0,D0
   9486 FFFCC6EC 6500 019C                   	BCS.L	QHOW	;	say "How?" if index is too big
   9487 FFFCC6F0 D080                        	ADD.L	D0,D0
   9488 FFFCC6F2 6500 0196                   	BCS.L	QHOW
   9489 FFFCC6F6 2F00                        	MOVE.L	D0,-(SP)	;save the index
   9490 FFFCC6F8 6100 00FA                   	BSR.L	SIZE_		;get amount of free memory
   9491 FFFCC6FC 221F                        	MOVE.L	(SP)+,D1	;get back the index
   9492 FFFCC6FE B081                        	CMP.L	D1,D0		;see if there's enough memory
   9493 FFFCC700 6300 017E                   	BLS.L	QSORRY		;if not, say "Sorry"
   9494 FFFCC704 2038 0628                   	MOVE.L	VARBGN,D0	;put address of array element...
   9495 FFFCC708 9081                        	SUB.L	D1,D0		;into D0
   9496 FFFCC70A 4E75                        	RTS
   9497 FFFCC70C                             TV1:
   9498 FFFCC70C B03C 001B                   	CMP.B	#27,D0		;if not @, is it A through Z?
   9499 FFFCC710 0A3C 0001                   	EOR	#1,CCR
   9500 FFFCC714 650C                        	BCS	TSTVRT		;if not, set Carry and return
   9501 FFFCC716 5288                        	ADDQ	#1,A0	;	else bump the text pointer
   9502 FFFCC718 D080                        	ADD	D0,D0		;compute the variable's address
   9503 FFFCC71A D080                        	ADD	D0,D0
   9504 FFFCC71C 2238 0628                   	MOVE.L	VARBGN,D1
   9505 FFFCC720 D081                        	ADD	D1,D0		;and return it in D0 with Carry=0
   9506 FFFCC722                             TSTVRT:
   9507 FFFCC722 4E75                        	RTS
                                             
                                             ;*
                                             ;* ===== Multiplies the 32 bit values in D0 and D1, returning
                                             ;*	the 32 bit result in D0.
                                             ;*
   9513 FFFCC724                             MULT32:
   9514 FFFCC724 2801                        	MOVE.L	D1,D4
   9515 FFFCC726 B184                        	EOR.L	D0,D4	;	see if the signs are the same
   9516 FFFCC728 4A80                        	TST.L	D0		;take absolute value of D0
   9517 FFFCC72A 6A02                        	BPL	MLT1
   9518 FFFCC72C 4480                        	NEG.L	D0
   9519 FFFCC72E                             MLT1:
   9520 FFFCC72E 4A81                        	TST.L	D1	;	take absolute value of D1
   9521 FFFCC730 6A02                        	BPL	MLT2
   9522 FFFCC732 4481                        	NEG.L	D1
   9523 FFFCC734                             MLT2:
   9524 FFFCC734 B2BC 0000 FFFF              	CMP.L	#0xFFFF,D1	;is second argument <= 16 bits?
   9525 FFFCC73A 630C                        	BLS	MLT3	;	OK, let it through
   9526 FFFCC73C C141                        	EXG	D0,D1	;	else swap the two arguments
   9527 FFFCC73E B2BC 0000 FFFF              	CMP.L	#0xFFFF,D1	;and check 2nd argument again
   9528 FFFCC744 6200 0144                   	BHI.L	QHOW		;one of them MUST be 16 bits
   9529 FFFCC748                             MLT3:
   9530 FFFCC748 2400                        	MOVE	D0,D2	;	prepare for 32 bit X 16 bit multiply
   9531 FFFCC74A C4C1                        	MULU	D1,D2		;multiply low word
   9532 FFFCC74C 4840                        	SWAP	D0
   9533 FFFCC74E C0C1                        	MULU	D1,D0		;multiply high word
   9534 FFFCC750 4840                        	SWAP	D0
                                             ;*** Rick Murray's bug correction follows:
   9536 FFFCC752 4A80                        	TST	D0		;if lower word not 0, then overflow
   9537 FFFCC754 6600 0134                   	BNE.L	QHOW	;	if overflow, say "How?"
   9538 FFFCC758 D082                        	ADD.L	D2,D0	;	D0 now holds the product
   9539 FFFCC75A 6B00 012E                   	BMI.L	QHOW	;	if sign bit set, it's an overflow
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 102
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9540 FFFCC75E 4A84                        	TST.L	D4		;were the signs the same?
   9541 FFFCC760 6A02                        	BPL	MLTRET
   9542 FFFCC762 4480                        	NEG.L	D0		;if not, make the result negative
   9543 FFFCC764                             MLTRET:
   9544 FFFCC764 4E75                        	RTS
                                             
                                             ;*
                                             ;* ===== Divide the 32 bit value in D0 by the 32 bit value in D1.
                                             ;*	Returns the 32 bit quotient in D0, remainder in D1.
                                             ;*
   9550 FFFCC766                             DIV32:
   9551 FFFCC766 4A81                        	TST.L	D1		;check for divide-by-zero
   9552 FFFCC768 6700 0120                   	BEQ.L	QHOW		;if so, say "How?"
   9553 FFFCC76C 2401                        	MOVE.L	D1,D2
   9554 FFFCC76E 2801                        	MOVE.L	D1,D4
   9555 FFFCC770 B184                        	EOR.L	D0,D4		;see if the signs are the same
   9556 FFFCC772 4A80                        	TST.L	D0		;take absolute value of D0
   9557 FFFCC774 6A02                        	BPL	DIV1
   9558 FFFCC776 4480                        	NEG.L	D0
   9559 FFFCC778                             DIV1:
   9560 FFFCC778 4A81                        	TST.L	D1	;	take absolute value of D1
   9561 FFFCC77A 6A02                        	BPL	DIV2
   9562 FFFCC77C 4481                        	NEG.L	D1
   9563 FFFCC77E                             DIV2:
   9564 FFFCC77E 761F                        	MOVEQ	#31,D3	;	iteration count for 32 bits
   9565 FFFCC780 2200                        	MOVE.L	D0,D1
   9566 FFFCC782 4280                        	CLR.L	D0
   9567 FFFCC784                             DIV3:
   9568 FFFCC784 D281                        	ADD.L	D1,D1	;	(This algorithm was translated from
   9569 FFFCC786 D180                        	ADDX.L	D0,D0		;the divide routine in Ron Cain's
   9570 FFFCC788 6708                        	BEQ	DIV4		;Small-C run time library.)
   9571 FFFCC78A B082                        	CMP.L	D2,D0
   9572 FFFCC78C 6B04                        	BMI	DIV4
   9573 FFFCC78E 5281                        	ADDQ.L	#1,D1
   9574 FFFCC790 9082                        	SUB.L	D2,D0
   9575 FFFCC792                             DIV4:
   9576 FFFCC792 51CB FFF0                   	DBRA	D3,DIV3
   9577 FFFCC796 C141                        	EXG	D0,D1	;	put rem. & quot. in proper registers
   9578 FFFCC798 4A84                        	TST.L	D4	;	were the signs the same?
   9579 FFFCC79A 6A04                        	BPL	DIVRT
   9580 FFFCC79C 4480                        	NEG.L	D0	;	if not, results are negative
   9581 FFFCC79E 4481                        	NEG.L	D1
   9582 FFFCC7A0                             DIVRT:
   9583 FFFCC7A0 4E75                        	RTS
                                             
                                             ;*
                                             ;* ===== The PEEK function returns the byte stored at the address
                                             ;*	contained in the following expression.
                                             ;*
   9589 FFFCC7A2                             PEEK:
   9590 FFFCC7A2 6100 FF1A                   	BSR	PARN	;	get the memory address
   9591 FFFCC7A6 2240                        	MOVE.L	D0,A1
   9592 FFFCC7A8 4280                        	CLR.L	D0		;upper 3 bytes will be zero
   9593 FFFCC7AA 1011                        	MOVE.B	(A1),D0 ;	get the addressed byte
   9594 FFFCC7AC 4E75                        	RTS			;and return it
                                             
                                             ;*
                                             ;* ===== The RND function returns a random number from 1 to
                                             ;*	the value of the following expression in D0.
                                             ;*
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 103
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9600 FFFCC7AE                             RND:
   9601 FFFCC7AE 6100 FF0E                   	BSR	PARN	;	get the upper limit
   9602 FFFCC7B2 4A80                        	TST.L	D0	;	it must be positive and non-zero
   9603 FFFCC7B4 6700 00D4                   	BEQ.L	QHOW
   9604 FFFCC7B8 6B00 00D0                   	BMI.L	QHOW
   9605 FFFCC7BC 2200                        	MOVE.L	D0,D1
   9606 FFFCC7BE 2278 0600                   	MOVE.L	RANPNT,A1	;get memory as a random number
   9607 FFFCC7C2 B3FC FFFC CC78              	CMP.L	#LSTROM,A1
   9608 FFFCC7C8 6506                        	BCS	RA1
   9609 FFFCC7CA 43F9 FFFC C000              	LEA	START,A1	;wrap around if end of program
   9610 FFFCC7D0                             RA1:
   9611 FFFCC7D0 2019                        	MOVE.L	(A1)+,D0;	get the slightly random number
   9612 FFFCC7D2 0880 001F                   	BCLR	#31,D0	;	make sure it's positive
   9613 FFFCC7D6 21C9 0600                   	MOVE.L	A1,RANPNT	;(even I can do better than this!)
   9614 FFFCC7DA 6100 FF8A                   	BSR	DIV32		;RND(n)=MOD(number,n)+1
   9615 FFFCC7DE 2001                        	MOVE.L	D1,D0	;	MOD is the remainder of the div.
   9616 FFFCC7E0 5280                        	ADDQ.L	#1,D0
   9617 FFFCC7E2 4E75                        	RTS
                                             
                                             ;*
                                             ;* ===== The ABS function returns an absolute value in D0.
                                             ;*
   9622 FFFCC7E4                             ABS:
   9623 FFFCC7E4 6100 FED8                   	BSR	PARN		;get the following expr.'s value
   9624 FFFCC7E8 4A80                        	TST.L	D0
   9625 FFFCC7EA 6A06                        	BPL	ABSRT
   9626 FFFCC7EC 4480                        	NEG.L	D0		;if negative, complement it
   9627 FFFCC7EE 6B00 009A                   	BMI.L	QHOW	;	if still negative, it was too big
   9628 FFFCC7F2                             ABSRT:
   9629 FFFCC7F2 4E75                        	RTS
                                             
                                             ;*
                                             ;* ===== The SIZE function returns the size of free memory in D0.
                                             ;*
   9634 FFFCC7F4                             SIZE_:
   9635 FFFCC7F4 2038 0628                   	MOVE.L	VARBGN,D0	;get the number of free bytes...
   9636 FFFCC7F8 90B8 0624                   	SUB.L	TXTUNF,D0	;between 'TXTUNF' and 'VARBGN'
   9637 FFFCC7FC 4E75                        	RTS			;return the number in D0
                                             
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** SETVAL *** FIN *** ENDCHK *** ERROR (& friends) ***
                                             ;*
                                             ;* 'SETVAL' expects a variable, followed by an equal sign and then
                                             ;* an expression.  It evaluates the expression and sets the variable
                                             ;* to that value.
                                             ;*
                                             ;* 'FIN' checks the end of a command.  If it ended with ":",
                                             ;* execution continues.	If it ended with a CR, it finds the
                                             ;* the next line and continues from there.
                                             ;*
                                             ;* 'ENDCHK' checks if a command is ended with a CR. This is
                                             ;* required in certain commands, such as GOTO, RETURN, STOP, etc.
                                             ;*
                                             ;* 'ERROR' prints the string pointed to by A0. It then prints the
                                             ;* line pointed to by CURRNT with a "?" inserted at where the
                                             ;* old text pointer (should be on top of the stack) points to.
                                             ;* Execution of Tiny BASIC is stopped and a warm start is done.
                                             ;* If CURRNT is zero (indicating a direct command), the direct
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 104
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
                                             ;* command is not printed. If CURRNT is -1 (indicating
                                             ;* 'INPUT' command in progress), the input line is not printed
                                             ;* and execution is not terminated but continues at 'INPERR'.
                                             ;*
                                             ;* Related to 'ERROR' are the following:
                                             ;* 'QWHAT' saves text pointer on stack and gets "What?" message.
                                             ;* 'AWHAT' just gets the "What?" message and jumps to 'ERROR'.
                                             ;* 'QSORRY' and 'ASORRY' do the same kind of thing.
                                             ;* 'QHOW' and 'AHOW' also do this for "How?".
                                             ;*
   9670 FFFCC7FE                             SETVAL:
   9671 FFFCC7FE 6100 FED4                   	BSR	TSTV	;	variable name?
   9672 FFFCC802 653A                        	BCS	QWHAT		;if not, say "What?"
   9673 FFFCC804 2F00                        	MOVE.L	D0,-(SP);	save the variable's address
   9674 FFFCC806 6100 029C                   	BSR.L	TSTC	;	get past the "=" sign
   9675 FFFCC80A 3D 0B                       	DC.B	'=',SV1-$
   9676 FFFCC80C 6100 FDB4                   	BSR	EXPR	;	evaluate the expression
   9677 FFFCC810 2C5F                        	MOVE.L	(SP)+,A6
   9678 FFFCC812 2C80                        	MOVE.L	D0,(A6) ;	and save its value in the variable
   9679 FFFCC814 4E75                        	RTS
   9680 FFFCC816                             SV1:
   9681 FFFCC816 6026                        	BRA	QWHAT	;	if no "=" sign
                                             
   9683 FFFCC818                             FIN:
   9684 FFFCC818 6100 028A                   	BSR.L	TSTC	;	*** FIN ***
   9685 FFFCC81C 3A 07                       	DC.B	':',FI1-$
   9686 FFFCC81E 588F                        	ADDQ.L	#4,SP	;	if ":", discard return address
   9687 FFFCC820 6000 FA1C                   	BRA	RUNSML	;	continue on the same line
   9688 FFFCC824                             FI1:
   9689 FFFCC824 6100 027E                   	BSR.L	TSTC	;	not ":", is it a CR?
   9690 FFFCC828 0D 07                       	DC.B	CR,FI2-$
   9691 FFFCC82A 588F                        	ADDQ.L	#4,SP	;	yes, purge return address
   9692 FFFCC82C 6000 F9F4                   	BRA	RUNNXL		;execute the next line
   9693 FFFCC830                             FI2:
   9694 FFFCC830 4E75                        	RTS			;else return to the caller
                                             
   9696 FFFCC832                             ENDCHK:
   9697 FFFCC832 6100 02C2                   	BSR.L	IGNBLK
   9698 FFFCC836 0C10 000D                   	CMP.B	#CR,(A0);	does it end with a CR?
   9699 FFFCC83A 6602                        	BNE	QWHAT	;	if not, say "WHAT?"
   9700 FFFCC83C 4E75                        	RTS
                                             
   9702 FFFCC83E                             QWHAT:
   9703 FFFCC83E 2F08                        	MOVE.L	A0,-(SP)
   9704 FFFCC840                             AWHAT:
   9705 FFFCC840 4DF9 FFFC CBFA              	LEA	WHTMSG,A6
   9706 FFFCC846                             ERROR:
   9707 FFFCC846 6100 031E                   	BSR.L	PRMESG	;	display the error message
   9708 FFFCC84A 205F                        	MOVE.L	(SP)+,A0	;restore the text pointer
   9709 FFFCC84C 2038 0604                   	MOVE.L	CURRNT,D0	;get the current line number
   9710 FFFCC850 6700 F80E                   	BEQ	WSTART		;if zero, do a warm start
   9711 FFFCC854 B0BC FFFF FFFF              	CMP.L	#-1,D0		;is the line no. pointer = -1?
   9712 FFFCC85A 6700 FBC2                   	BEQ	INPERR		;if so, redo input
   9713 FFFCC85E 1F10                        	MOVE.B	(A0),-(SP)	;save the char. pointed to
   9714 FFFCC860 4210                        	CLR.B	(A0)		;put a zero where the error is
   9715 FFFCC862 2278 0604                   	MOVE.L	CURRNT,A1	;point to start of current line
   9716 FFFCC866 6100 0220                   	BSR.L	PRTLN		;display the line in error up to the 0
   9717 FFFCC86A 109F                        	MOVE.B	(SP)+,(A0)	;restore the character
   9718 FFFCC86C 103C 003F                   	MOVE.B	#'?',D0     ;    display a "?"
   9719 FFFCC870 6100 F796                   	BSR	GOOUT
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 105
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9720 FFFCC874 4280                        	CLR	D0
   9721 FFFCC876 5389                        	SUBQ.L	#1,A1		;point back to the error char.
   9722 FFFCC878 6100 013E                   	BSR.L	PRTSTG		;display the rest of the line
   9723 FFFCC87C 6000 F7E2                   	BRA	WSTART		;and do a warm start
   9724 FFFCC880                             QSORRY:
   9725 FFFCC880 2F08                        	MOVE.L	A0,-(SP)
   9726 FFFCC882                             ASORRY:
   9727 FFFCC882 4DF9 FFFC CC02              	LEA	SRYMSG,A6
   9728 FFFCC888 60BC                        	BRA	ERROR
   9729 FFFCC88A                             QHOW:
   9730 FFFCC88A 2F08                        	MOVE.L	A0,-(SP)	;Error: "How?"
   9731 FFFCC88C                             AHOW:
   9732 FFFCC88C 4DF9 FFFC CBF3              	LEA	HOWMSG,A6
   9733 FFFCC892 60B2                        	BRA	ERROR
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** GETLN *** FNDLN (& friends) ***
                                             ;*
                                             ;* 'GETLN' reads in input line into 'BUFFER'. It first prompts with
                                             ;* the character in D0 (given by the caller), then it fills the
                                             ;* buffer and echos. It ignores LF's but still echos
                                             ;* them back. Control-H is used to delete the last character
                                             ;* entered (if there is one), and control-X is used to delete the
                                             ;* whole line and start over again. CR signals the end of a line,
                                             ;* and causes 'GETLN' to return.
                                             ;*
                                             ;* 'FNDLN' finds a line with a given line no. (in D1) in the
                                             ;* text save area.  A1 is used as the text pointer. If the line
                                             ;* is found, A1 will point to the beginning of that line
                                             ;* (i.e. the high byte of the line no.), and flags are NC & Z.
                                             ;* If that line is not there and a line with a higher line no.
                                             ;* is found, A1 points there and flags are NC & NZ. If we reached
                                             ;* the end of the text save area and cannot find the line, flags
                                             ;* are C & NZ.
                                             ;* 'FNDLN' will initialize A1 to the beginning of the text save
                                             ;* area to start the search. Some other entries of this routine
                                             ;* will not initialize A1 and do the search.
                                             ;* 'FNDLNP' will start with A1 and search for the line no.
                                             ;* 'FNDNXT' will bump A1 by 2, find a CR and then start search.
                                             ;* 'FNDSKP' uses A1 to find a CR, and then starts the search.
                                             ;*
                                             PUBLIC GETLN:
   9763 FFFCC894 6100 F772                   	BSR	GOOUT		;display the prompt
   9764 FFFCC898 103C 0020                   	MOVE.B	#' ',D0      ;   and a space
   9765 FFFCC89C 6100 F76A                   	BSR	GOOUT
   9766 FFFCC8A0 41F8 0630                   	LEA	BUFFER,A0;	A0 is the buffer pointer
   9767 FFFCC8A4                             GL1:
   9768 FFFCC8A4 6100 02A8                   	BSR.L	CHKIO;		check keyboard
   9769 FFFCC8A8 67FA                        	BEQ	GL1	;	wait for a char. to come in
   9770 FFFCC8AA B03C 0008                   	CMP.B	#CTRLH,D0	;delete last character?
   9771 FFFCC8AE 6726                        	BEQ	GL3	;	if so
   9772 FFFCC8B0 B03C 0018                   	CMP.B	#CTRLX,D0;	delete the whole line?
   9773 FFFCC8B4 6744                        	BEQ	GL4	;	if so
   9774 FFFCC8B6 B03C 000D                   	CMP.B	#CR,D0	;	accept a CR
   9775 FFFCC8BA 6706                        	BEQ	GL2
   9776 FFFCC8BC B03C 0020                   	CMP.B	#' ',D0  ;       if other control char., discard it
   9777 FFFCC8C0 65E2                        	BCS	GL1
   9778 FFFCC8C2                             GL2:
   9779 FFFCC8C2 10C0                        	MOVE.B	D0,(A0)+;	save the char.
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 106
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9780 FFFCC8C4 6100 F742                   	BSR	GOOUT		;echo the char back out
   9781 FFFCC8C8 B03C 000D                   	CMP.B	#CR,D0	;	if it's a CR, end the line
   9782 FFFCC8CC 675C                        	BEQ	GL7
   9783 FFFCC8CE B1FC 0000 067F              	CMP.L	#(BUFFER+BUFLEN-1),A0	;any more room?
   9784 FFFCC8D4 65CE                        	BCS	GL1	;	yes: get some more, else delete last char.
   9785 FFFCC8D6                             GL3:
   9786 FFFCC8D6 103C 0008                   	MOVE.B	#CTRLH,D0	;delete a char. if possible
   9787 FFFCC8DA 6100 F72C                   	BSR	GOOUT
   9788 FFFCC8DE 103C 0020                   	MOVE.B	#' ',D0
   9789 FFFCC8E2 6100 F724                   	BSR	GOOUT
   9790 FFFCC8E6 B1FC 0000 0630              	CMP.L	#BUFFER,A0	;any char.'s left?
   9791 FFFCC8EC 63B6                        	BLS	GL1		;if not
   9792 FFFCC8EE 103C 0008                   	MOVE.B	#CTRLH,D0;	if so, finish the BS-space-BS sequence
   9793 FFFCC8F2 6100 F714                   	BSR	GOOUT
   9794 FFFCC8F6 5388                        	SUBQ.L	#1,A0	;	decrement the text pointer
   9795 FFFCC8F8 60AA                        	BRA	GL1		;back for more
   9796 FFFCC8FA                             GL4:
   9797 FFFCC8FA 2208                        	MOVE.L	A0,D1	;	delete the whole line
   9798 FFFCC8FC 0481 0000 0630              	SUB.L	#BUFFER,D1;	figure out how many backspaces we need
   9799 FFFCC902 671E                        	BEQ	GL6		;if none needed, branch
   9800 FFFCC904 5381                        	SUBQ	#1,D1	;	adjust for DBRA
   9801 FFFCC906                             GL5:
   9802 FFFCC906 103C 0008                   	MOVE.B	#CTRLH,D0	;and display BS-space-BS sequences
   9803 FFFCC90A 6100 F6FC                   	BSR	GOOUT
   9804 FFFCC90E 103C 0020                   	MOVE.B	#' ',D0
   9805 FFFCC912 6100 F6F4                   	BSR	GOOUT
   9806 FFFCC916 103C 0008                   	MOVE.B	#CTRLH,D0
   9807 FFFCC91A 6100 F6EC                   	BSR	GOOUT
   9808 FFFCC91E 51C9 FFE6                   	DBRA	D1,GL5
   9809 FFFCC922                             GL6:
   9810 FFFCC922 41F8 0630                   	LEA	BUFFER,A0	;reinitialize the text pointer
   9811 FFFCC926 6000 FF7C                   	BRA	GL1		;and go back for more
   9812 FFFCC92A                             GL7:
   9813 FFFCC92A 103C 000A                   	MOVE.B	#LF,D0	;	echo a LF for the CR
   9814 FFFCC92E 6100 F6D8                   	BSR	GOOUT
   9815 FFFCC932 4E75                        	RTS
                                             
   9817 FFFCC934                             FNDLN:
   9818 FFFCC934 B2BC 0000 FFFF              	CMP.L	#0xFFFF,D1	;line no. must be < 65535
   9819 FFFCC93A 6400 FF4E                   	BCC	QHOW
   9820 FFFCC93E 2279 FFFC C01C              	MOVE.L	TXTBGN,A1	;init. the text save pointer
                                             
   9822 FFFCC944                             FNDLNP:
   9823 FFFCC944 2478 0624                   	MOVE.L	TXTUNF,A2	;check if we passed the end
   9824 FFFCC948 538A                        	SUBQ.L	#1,A2
   9825 FFFCC94A B5C9                        	CMP	A1,A2
   9826 FFFCC94C 650C                        	BCS	FNDRET	;	if so, return with Z=0 & C=1
   9827 FFFCC94E 1419                        	MOVE.B	(A1)+,D2	;if not, get a line no.
   9828 FFFCC950 E18A                        	LSL	#8,D2
   9829 FFFCC952 1411                        	MOVE.B	(A1),D2
   9830 FFFCC954 5389                        	SUBQ.L	#1,A1
   9831 FFFCC956 B481                        	CMP	D1,D2		;is this the line we want?
   9832 FFFCC958 6502                        	BCS	FNDNXT		;no, not there yet
   9833 FFFCC95A                             FNDRET:
   9834 FFFCC95A 4E75                        	RTS			;return the cond. codes
                                             
   9836 FFFCC95C                             FNDNXT:
   9837 FFFCC95C 5489                        	ADDQ.L	#2,A1;		find the next line
                                             
   9839 FFFCC95E                             FNDSKP:
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 107
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9840 FFFCC95E 0C19 000D                   	CMP.B	#CR,(A1)+	;try to find a CR
   9841 FFFCC962 66FA                        	BNE	FNDSKP		;keep looking
   9842 FFFCC964 60DE                        	BRA	FNDLNP		;check if end of text
                                             
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** MVUP *** MVDOWN *** POPA *** PUSHA ***
                                             ;*
                                             ;* 'MVUP' moves a block up from where A1 points to where A2 points
                                             ;* until A1=A3
                                             ;*
                                             ;* 'MVDOWN' moves a block down from where A1 points to where A3
                                             ;* points until A1=A2
                                             ;*
                                             ;* 'POPA' restores the 'FOR' loop variable save area from the stack
                                             ;*
                                             ;* 'PUSHA' stacks for 'FOR' loop variable save area onto the stack
                                             ;*
   9859 FFFCC966                             MVUP:
   9860 FFFCC966 B7C9                        	CMP.L	A1,A3	;	see the above description
   9861 FFFCC968 6704                        	BEQ	MVRET
   9862 FFFCC96A 14D9                        	MOVE.B	(A1)+,(A2)+
   9863 FFFCC96C 60F8                        	BRA	MVUP
   9864 FFFCC96E                             MVRET:
   9865 FFFCC96E 4E75                        	RTS
                                             
   9867 FFFCC970                             MVDOWN:
   9868 FFFCC970 B5C9                        	CMP.L	A1,A2	;	see the above description
   9869 FFFCC972 67FA                        	BEQ	MVRET
   9870 FFFCC974 1721                        	MOVE.B	-(A1),-(A3)
   9871 FFFCC976 60F8                        	BRA	MVDOWN
                                             
   9873 FFFCC978                             POPA:
   9874 FFFCC978 2C5F                        	MOVE.L	(SP)+,A6	;A6 = return address
   9875 FFFCC97A 21DF 0610                   	MOVE.L	(SP)+,LOPVAR	;restore LOPVAR, but zero means no more
   9876 FFFCC97E 6710                        	BEQ	PP1
   9877 FFFCC980 21DF 0614                   	MOVE.L	(SP)+,LOPINC	;if not zero, restore the rest
   9878 FFFCC984 21DF 0618                   	MOVE.L	(SP)+,LOPLMT
   9879 FFFCC988 21DF 061C                   	MOVE.L	(SP)+,LOPLN
   9880 FFFCC98C 21DF 0620                   	MOVE.L	(SP)+,LOPPT
   9881 FFFCC990                             PP1:
   9882 FFFCC990 4ED6                        	JMP	(A6)	;	return
                                             
   9884 FFFCC992                             PUSHA:
   9885 FFFCC992 2238 062C                   	MOVE.L	STKLMT,D1	;Are we running out of stack room?
   9886 FFFCC996 928F                        	SUB.L	SP,D1
   9887 FFFCC998 6400 FEE6                   	BCC	QSORRY		;if so, say we're sorry
   9888 FFFCC99C 2C5F                        	MOVE.L	(SP)+,A6	;else get the return address
   9889 FFFCC99E 2238 0610                   	MOVE.L	LOPVAR,D1	;save loop variables
   9890 FFFCC9A2 6710                        	BEQ	PU1		;if LOPVAR is zero, that's all
   9891 FFFCC9A4 2F38 0620                   	MOVE.L	LOPPT,-(SP)	;else save all the others
   9892 FFFCC9A8 2F38 061C                   	MOVE.L	LOPLN,-(SP)
   9893 FFFCC9AC 2F38 0618                   	MOVE.L	LOPLMT,-(SP)
   9894 FFFCC9B0 2F38 0614                   	MOVE.L	LOPINC,-(SP)
   9895 FFFCC9B4                             PU1:
   9896 FFFCC9B4 2F01                        	MOVE.L	D1,-(SP)
   9897 FFFCC9B6 4ED6                        	JMP	(A6)		;return
                                             
                                             ;*
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 108
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
                                             ;*******************************************************************
                                             ;*
                                             ;* *** PRTSTG *** QTSTG *** PRTNUM *** PRTLN ***
                                             ;*
                                             ;* 'PRTSTG' prints a string pointed to by A1. It stops printing
                                             ;* and returns to the caller when either a CR is printed or when
                                             ;* the next byte is the same as what was passed in D0 by the
                                             ;* caller.
                                             ;*
                                             ;* 'QTSTG' looks for an underline (back-arrow on some systems),
                                             ;* single-quote, or double-quote.  If none of these are found, returns
                                             ;* to the caller.  If underline, outputs a CR without a LF.  If single
                                             ;* or double quote, prints the quoted string and demands a matching
                                             ;* end quote.  After the printing, the next 2 bytes of the caller are
                                             ;* skipped over (usually a short branch instruction).
                                             ;*
                                             ;* 'PRTNUM' prints the 32 bit number in D1, leading blanks are added if
                                             ;* needed to pad the number of spaces to the number in D4.
                                             ;* However, if the number of digits is larger than the no. in
                                             ;* D4, all digits are printed anyway. Negative sign is also
                                             ;* printed and counted in, positive sign is not.
                                             ;*
                                             ;* 'PRTLN' prints the saved text line pointed to by A1
                                             ;* with line no. and all.
                                             ;*
   9925 FFFCC9B8                             PRTSTG:
   9926 FFFCC9B8 1200                        	MOVE.B	D0,D1	;	save the stop character
   9927 FFFCC9BA                             PS1:
   9928 FFFCC9BA 1019                        	MOVE.B	(A1)+,D0	;get a text character
   9929 FFFCC9BC B200                        	CMP.B	D0,D1		;same as stop character?
   9930 FFFCC9BE 6712                        	BEQ	PRTRET		;if so, return
   9931 FFFCC9C0 6100 F646                   	BSR	GOOUT		;display the char.
   9932 FFFCC9C4 B03C 000D                   	CMP.B	#CR,D0		;;is it a C.R.?
   9933 FFFCC9C8 66F0                        	BNE	PS1		;no, go back for more
   9934 FFFCC9CA 103C 000A                   	MOVE.B	#LF,D0	;	yes, add a L.F.
   9935 FFFCC9CE 6100 F638                   	BSR	GOOUT
   9936 FFFCC9D2                             PRTRET:
   9937 FFFCC9D2 4E75                        	RTS			;then return
                                             
   9939 FFFCC9D4                             QTSTG:
   9940 FFFCC9D4 6100 00CE                   	BSR.L	TSTC;		*** QTSTG ***
   9941 FFFCC9D8 22 1B                       	DC.B	'"',QT3-$
   9942 FFFCC9DA 103C 0022                   	MOVE.B	#'"',D0  ;       it is a "
   9943 FFFCC9DE                             QT1:
   9944 FFFCC9DE 2248                        	MOVE.L	A0,A1
   9945 FFFCC9E0 6100 FFD6                   	BSR	PRTSTG		;print until another
   9946 FFFCC9E4 2049                        	MOVE.L	A1,A0
   9947 FFFCC9E6 225F                        	MOVE.L	(SP)+,A1;	pop return address
   9948 FFFCC9E8 B03C 000A                   	CMP.B	#LF,D0	;	was last one a CR?
   9949 FFFCC9EC 6700 F834                   	BEQ	RUNNXL		;if so, run next line
   9950 FFFCC9F0                             QT2:
   9951 FFFCC9F0 5489                        	ADDQ.L	#2,A1	;	skip 2 bytes on return
   9952 FFFCC9F2 4ED1                        	JMP	(A1)		;return
   9953 FFFCC9F4                             QT3:
   9954 FFFCC9F4 6100 00AE                   	BSR.L	TSTC	;	is it a single quote?
   9955 FFFCC9F8 27 07                       	DC.B	'\'',QT4-$
   9956 FFFCC9FA 103C 0027                   	MOVE.B	#'''',D0  ;      if so, do same as above
   9957 FFFCC9FE 60DE                        	BRA	QT1
   9958 FFFCCA00                             QT4:
   9959 FFFCCA00 6100 00A2                   	BSR.L	TSTC		;is it an underline?
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 109
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9960 FFFCCA04 5F 0D                       	DC.B	'_',QT5-$
   9961 FFFCCA06 103C 000D                   	MOVE.B	#CR,D0		;if so, output a CR without LF
   9962 FFFCCA0A 6100 F5FC                   	BSR.L	GOOUT
   9963 FFFCCA0E 225F                        	MOVE.L	(SP)+,A1	;pop return address
   9964 FFFCCA10 60DE                        	BRA	QT2
   9965 FFFCCA12                             QT5:
   9966 FFFCCA12 4E75                        	RTS			;none of the above
                                             
   9968 FFFCCA14                             PRTNUM:
   9969 FFFCCA14 2601                        	MOVE.L	D1,D3	;	save the number for later
   9970 FFFCCA16 2F04                        	MOVE	D4,-(SP)	;save the width value
   9971 FFFCCA18 1F3C 00FF                   	MOVE.B	#0xFF,-(SP)	;flag for end of digit string
   9972 FFFCCA1C 4A81                        	TST.L	D1		;is it negative?
   9973 FFFCCA1E 6A04                        	BPL	PN1		;if not
   9974 FFFCCA20 4481                        	NEG.L	D1	;	else make it positive
   9975 FFFCCA22 5384                        	SUBQ	#1,D4	;	one less for width count
   9976 FFFCCA24                             PN1:
   9977 FFFCCA24 82FC 000A                   	DIVU	#10,D1	;	get the next digit
   9978 FFFCCA28 690A                        	BVS	PNOV	;	overflow flag set?
   9979 FFFCCA2A 2001                        	MOVE.L	D1,D0	;	if not, save remainder
   9980 FFFCCA2C 0281 0000 FFFF              	AND.L	#0xFFFF,D1	;strip the remainder
   9981 FFFCCA32 601A                        	BRA	TOASCII 	;skip the overflow stuff
   9982 FFFCCA34                             PNOV:
   9983 FFFCCA34 2001                        	MOVE	D1,D0	;	prepare for long word division
   9984 FFFCCA36 4241                        	CLR.W	D1		;zero out low word
   9985 FFFCCA38 4841                        	SWAP	D1		;high word into low
   9986 FFFCCA3A 82FC 000A                   	DIVU	#10,D1	;	divide high word
   9987 FFFCCA3E 2401                        	MOVE	D1,D2	;	save quotient
   9988 FFFCCA40 2200                        	MOVE	D0,D1	;	low word into low
   9989 FFFCCA42 82FC 000A                   	DIVU	#10,D1	;	divide low word
   9990 FFFCCA46 2001                        	MOVE.L	D1,D0	;	D0 = remainder
   9991 FFFCCA48 4841                        	SWAP	D1	;	R/Q becomes Q/R
   9992 FFFCCA4A 2202                        	MOVE	D2,D1	;	D1 is low/high
   9993 FFFCCA4C 4841                        	SWAP	D1	;	D1 is finally high/low
   9994 FFFCCA4E                             TOASCII:
   9995 FFFCCA4E 4840                        	SWAP	D0	;	get remainder
   9996 FFFCCA50 1F00                        	MOVE.B	D0,-(SP);	stack it as a digit
   9997 FFFCCA52 4840                        	SWAP	D0
   9998 FFFCCA54 5384                        	SUBQ	#1,D4	;	decrement width count
   9999 FFFCCA56 4A81                        	TST.L	D1		;if quotient is zero, we're done
  10000 FFFCCA58 66CA                        	BNE	PN1
  10001 FFFCCA5A 5384                        	SUBQ	#1,D4	;	adjust padding count for DBRA
  10002 FFFCCA5C 6B0C                        	BMI	PN4		;skip padding if not needed
  10003 FFFCCA5E                             PN3:
  10004 FFFCCA5E 103C 0020                   	MOVE.B	#' ',D0  ;       display the required leading spaces
  10005 FFFCCA62 6100 F5A4                   	BSR	GOOUT
  10006 FFFCCA66 51CC FFF6                   	DBRA	D4,PN3
  10007 FFFCCA6A                             PN4:
  10008 FFFCCA6A 4A83                        	TST.L	D3		;is number negative?
  10009 FFFCCA6C 6A08                        	BPL	PN5
  10010 FFFCCA6E 103C 002D                   	MOVE.B	#'-',D0  ;       if so, display the sign
  10011 FFFCCA72 6100 F594                   	BSR	GOOUT
  10012 FFFCCA76                             PN5:
  10013 FFFCCA76 101F                        	MOVE.B	(SP)+,D0	;now unstack the digits and display
  10014 FFFCCA78 6B0A                        	BMI	PNRET		;until the flag code is reached
  10015 FFFCCA7A 0600 0030                   	ADD.B	#'0',D0   ;      make into ASCII
  10016 FFFCCA7E 6100 F588                   	BSR	GOOUT
  10017 FFFCCA82 60F2                        	BRA	PN5
  10018 FFFCCA84                             PNRET:
  10019 FFFCCA84 281F                        	MOVE	(SP)+,D4	;restore width value
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 110
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
  10020 FFFCCA86 4E75                        	RTS
                                             
  10022 FFFCCA88                             PRTLN:
  10023 FFFCCA88 4281                        	CLR.L	D1
  10024 FFFCCA8A 1219                        	MOVE.B	(A1)+,D1	;get the binary line number
  10025 FFFCCA8C E189                        	LSL	#8,D1
  10026 FFFCCA8E 1219                        	MOVE.B	(A1)+,D1
  10027 FFFCCA90 7805                        	MOVEQ	#5,D4		;display a 5 digit line no.
  10028 FFFCCA92 6100 FF80                   	BSR	PRTNUM
  10029 FFFCCA96 103C 0020                   	MOVE.B	#' ',D0      ;   followed by a blank
  10030 FFFCCA9A 6100 F56C                   	BSR	GOOUT
  10031 FFFCCA9E 4280                        	CLR	D0		;stop char. is a zero
  10032 FFFCCAA0 6000 FF16                   	BRA	PRTSTG	;	display the rest of the line
                                             
                                             ;*
                                             ;* ===== Test text byte following the call to this subroutine. If it
                                             ;*	equals the byte pointed to by A0, return to the code following
                                             ;*	the call. If they are not equal, branch to the point
                                             ;*	indicated by the offset byte following the text byte.
                                             ;*
  10040 FFFCCAA4                             TSTC:
  10041 FFFCCAA4 6100 0050                   	BSR	IGNBLK		;ignore leading blanks
  10042 FFFCCAA8 225F                        	MOVE.L	(SP)+,A1	;get the return address
  10043 FFFCCAAA 1219                        	MOVE.B	(A1)+,D1	;get the byte to compare
  10044 FFFCCAAC B210                        	CMP.B	(A0),D1 	;is it = to what A0 points to?
  10045 FFFCCAAE 6708                        	BEQ	TC1		;if so
  10046 FFFCCAB0 4281                        	CLR.L	D1		;If not, add the second
  10047 FFFCCAB2 1211                        	MOVE.B	(A1),D1 ;	byte following the call to
  10048 FFFCCAB4 D3C1                        	ADD.L	D1,A1	;	the return address.
  10049 FFFCCAB6 4ED1                        	JMP	(A1)		;jump to the routine
  10050 FFFCCAB8                             TC1:
  10051 FFFCCAB8 5288                        	ADDQ.L	#1,A0	;	if equal, bump text pointer
  10052 FFFCCABA 5289                        	ADDQ.L	#1,A1	;	Skip the 2 bytes following
  10053 FFFCCABC 4ED1                        	JMP	(A1)		;the call and continue.
                                             
                                             ;*
                                             ;* ===== See if the text pointed to by A0 is a number. If so,
                                             ;*	return the number in D1 and the number of digits in D2,
                                             ;*	else return zero in D1 and D2.
                                             ;*
  10060 FFFCCABE                             TSTNUM:
  10061 FFFCCABE 4281                        	CLR.L	D1		;initialize return parameters
  10062 FFFCCAC0 4282                        	CLR	D2
  10063 FFFCCAC2 6100 0032                   	BSR	IGNBLK		;skip over blanks
  10064 FFFCCAC6                             TN1:
  10065 FFFCCAC6 0C10 0030                   	CMP.B	#'0',(A0) ;      is it less than zero?
  10066 FFFCCACA 6528                        	BCS	TSNMRET 	;if so, that's all
  10067 FFFCCACC 0C10 0039                   	CMP.B	#'9',(A0) ;      is it greater than nine?
  10068 FFFCCAD0 6222                        	BHI	TSNMRET 	;if so, return
  10069 FFFCCAD2 B2BC 0CCC CCCC              	CMP.L	#214748364,D1	;see if there's room for new digit
  10070 FFFCCAD8 6400 FDB0                   	BCC	QHOW		;if not, we've overflowd
  10071 FFFCCADC 2001                        	MOVE.L	D1,D0	;	quickly multiply result by 10
  10072 FFFCCADE D281                        	ADD.L	D1,D1
  10073 FFFCCAE0 D281                        	ADD.L	D1,D1
  10074 FFFCCAE2 D280                        	ADD.L	D0,D1
  10075 FFFCCAE4 D281                        	ADD.L	D1,D1
  10076 FFFCCAE6 1018                        	MOVE.B	(A0)+,D0	;add in the new digit
  10077 FFFCCAE8 0280 0000 000F              	AND.L	#0xF,D0
  10078 FFFCCAEE D280                        	ADD.L	D0,D1
  10079 FFFCCAF0 5282                        	ADDQ	#1,D2		;increment the no. of digits
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 111
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
  10080 FFFCCAF2 60D2                        	BRA	TN1
  10081 FFFCCAF4                             TSNMRET:
  10082 FFFCCAF4 4E75                        	RTS
                                             
                                             ;*
                                             ;* ===== Skip over blanks in the text pointed to by A0.
                                             ;*
  10087 FFFCCAF6                             IGNBLK:
  10088 FFFCCAF6 0C10 0020                   	CMP.B	#' ',(A0)   ;    see if it's a space
  10089 FFFCCAFA 6604                        	BNE	IGBRET		;if so, swallow it
  10090 FFFCCAFC                             IGB1:
  10091 FFFCCAFC 5288                        	ADDQ.L	#1,A0	;	increment the text pointer
  10092 FFFCCAFE 60F6                        	BRA	IGNBLK
  10093 FFFCCB00                             IGBRET:
  10094 FFFCCB00 4E75                        	RTS
                                             
                                             ;*
                                             ;* ===== Convert the line of text in the input buffer to upper
                                             ;*	case (except for stuff between quotes).
                                             ;*
  10100 FFFCCB02                             TOUPBUF:
  10101 FFFCCB02 41F8 0630                   	LEA	BUFFER,A0	;set up text pointer
  10102 FFFCCB06 4201                        	CLR.B	D1		;clear quote flag
  10103 FFFCCB08                             TOUPB1:
  10104 FFFCCB08 1018                        	MOVE.B	(A0)+,D0	;get the next text char.
  10105 FFFCCB0A B03C 000D                   	CMP.B	#CR,D0		;is it end of line?
  10106 FFFCCB0E 671A                        	BEQ	TOUPBRT 	;if so, return
  10107 FFFCCB10 B03C 0022                   	CMP.B	#'"',D0  ;       a double quote?
  10108 FFFCCB14 6716                        	BEQ	DOQUO
  10109 FFFCCB16 B03C 0027                   	CMP.B	#'''',D0  ;      or a single quote?
  10110 FFFCCB1A 6710                        	BEQ	DOQUO
  10111 FFFCCB1C 4A01                        	TST.B	D1		;inside quotes?
  10112 FFFCCB1E 66E8                        	BNE	TOUPB1		;if so, do the next one
  10113 FFFCCB20 6100 001A                   	BSR	TOUPPER 	;convert to upper case
  10114 FFFCCB24 1100                        	MOVE.B	D0,-(A0);	store it
  10115 FFFCCB26 5288                        	ADDQ.L	#1,A0
  10116 FFFCCB28 60DE                        	BRA	TOUPB1		;and go back for more
  10117 FFFCCB2A                             TOUPBRT:
  10118 FFFCCB2A 4E75                        	RTS
                                             
  10120 FFFCCB2C                             DOQUO:
  10121 FFFCCB2C 4A01                        	TST.B	D1	;	are we inside quotes?
  10122 FFFCCB2E 6604                        	BNE	DOQUO1
  10123 FFFCCB30 1200                        	MOVE.B	D0,D1	;	if not, toggle inside-quotes flag
  10124 FFFCCB32 60D4                        	BRA	TOUPB1
  10125 FFFCCB34                             DOQUO1:
  10126 FFFCCB34 B200                        	CMP.B	D0,D1	;	make sure we're ending proper quote
  10127 FFFCCB36 66D0                        	BNE	TOUPB1		;if not, ignore it
  10128 FFFCCB38 4201                        	CLR.B	D1		;else clear quote flag
  10129 FFFCCB3A 60CC                        	BRA	TOUPB1
                                             
                                             ;*
                                             ;* ===== Convert the character in D0 to upper case
                                             ;*
  10134 FFFCCB3C                             TOUPPER:
  10135 FFFCCB3C B03C 0061                   	CMP.B	#'a',D0   ;      is it < 'a'?
  10136 FFFCCB40 650A                        	BCS	TOUPRET
  10137 FFFCCB42 B03C 007A                   	CMP.B	#'z',D0        ; or > 'z'?
  10138 FFFCCB46 6204                        	BHI	TOUPRET
  10139 FFFCCB48 0400 0020                   	SUB.B	#32,D0		;if not, make it upper case
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 112
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
  10140 FFFCCB4C                             TOUPRET:
  10141 FFFCCB4C 4E75                        	RTS
                                             
                                             ;*
                                             ;* 'CHKIO' checks the input. If there's no input, it will return
                                             ;* to the caller with the Z flag set. If there is input, the Z
                                             ;* flag is cleared and the input byte is in D0. However, if a
                                             ;* control-C is read, 'CHKIO' will warm-start BASIC and will not
                                             ;* return to the caller.
                                             ;*
  10150 FFFCCB4E                             CHKIO:
  10151 FFFCCB4E 6100 F4BC                   	BSR.L	GOIN	;	get input if possible
  10152 FFFCCB52 670A                        	BEQ	CHKRET		;if Zero, no input
  10153 FFFCCB54 B03C 0003                   	CMP.B	#CTRLC,D0	;is it control-C?
  10154 FFFCCB58 6604                        	BNE	CHKRET		;if not
  10155 FFFCCB5A 6000 F504                   	BRA.L	WSTART		;if so, do a warm start
  10156 FFFCCB5E                             CHKRET:
  10157 FFFCCB5E 4E75                        	RTS
                                             
                                             ;*
                                             ;* ===== Display a CR-LF sequence
                                             ;*
  10162 FFFCCB60                             CRLF:
  10163 FFFCCB60 4DF9 FFFC CC08              	LEA	CLMSG,A6
                                             
                                             ;*
                                             ;* ===== Display a zero-ended string pointed to by register A6
                                             ;*
  10168 FFFCCB66                             PRMESG:
  10169 FFFCCB66 101E                        	MOVE.B	(A6)+,D0	;get the char.
  10170 FFFCCB68 6706                        	BEQ	PRMRET		;if it's zero, we're done
  10171 FFFCCB6A 6100 F49C                   	BSR	GOOUT		;else display it
  10172 FFFCCB6E 60F6                        	BRA	PRMESG
  10173 FFFCCB70                             PRMRET:
  10174 FFFCCB70 4E75                        	RTS
                                             
                                             ;******************************************************
                                             ;* The following routines are the only ones that need *
                                             ;* to be changed for a different I/O environment.     *
                                             ;******************************************************
                                             
                                             UART		EQU		0xFFDC0A00
                                             UART_LS		EQU		UART+1
                                             UART_CTRL	EQU		UART+7
                                             KEYBD		EQU		0xFFDC0000
                                             
                                             
                                             ;*
                                             ;* ===== Output character to the console (Port 1) from register D0
                                             ;*	(Preserves all registers.)
                                             ;*
  10191 FFFCCB72                             OUTC:
  10192 FFFCCB72 48E7 C000                   	MOVEM.L	D0/D1,-(SP)
  10193 FFFCCB76 2200                        	MOVE.L	D0,D1
  10194 FFFCCB78 7006                        	MOVEQ	#6,D0
  10195 FFFCCB7A 4E4F                        	TRAP	#15
  10196 FFFCCB7C 4CDF 0003                   	MOVEM.L	(SP)+,D0/D1
  10197 FFFCCB80 4E75                        	RTS
                                             
                                             ;*
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 113
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
                                             ;* ===== Input a character from the console into register D0 (or
                                             ;*	return Zero status if there's no character available).
                                             ;*
  10203 FFFCCB82                             INC:
  10204 FFFCCB82 2F01                        	move.l	d1,-(a7)
  10205 FFFCCB84 7007                        	moveq	#7,d0		; check for key
  10206 FFFCCB86 4E4F                        	trap	#15
  10207 FFFCCB88 4A00                        	tst.b	d0
  10208 FFFCCB8A 670A                        	beq.s	.0001
  10209 FFFCCB8C 7005                        	moveq	#5,d0
  10210 FFFCCB8E 4E4F                        	trap	#15
  10211 FFFCCB90 2001                        	move.l	d1,d0
  10212 FFFCCB92 221F                        	move.l	(a7)+,d1
  10213 FFFCCB94 4A00                        	tst.b	d0
  10214 FFFCCB96                             .0001:
  10215 FFFCCB96 4E75                        	rts
                                             
                                             ;*
                                             ;* ===== Output character to the host (Port 2) from register D0
                                             ;*	(Preserves all registers.)
                                             ;*
  10221 FFFCCB98                             AUXOUT:
  10222 FFFCCB98 0839 0005 FFDC 0A01         	BTST	#5,UART_LS	;is port ready for a character?
  10223 FFFCCBA0 67F6                        	BEQ		AUXOUT		;if not, wait for it
  10224 FFFCCBA2 13C0 FFDC 0A00              	MOVE.B	D0,UART		;out it goes.
  10225 FFFCCBA8 4E75                        	RTS
                                             
                                             ;*
                                             ;* ===== Input a character from the host into register D0 (or
                                             ;*	return Zero status if there's no character available).
                                             ;*
  10231 FFFCCBAA                             AUXIN:
  10232 FFFCCBAA 0839 0000 FFDC 0A01         	BTST	#0,UART_LS	;is character ready?
  10233 FFFCCBB2 670A                        	BEQ		AXIRET		;if not, return Zero status
  10234 FFFCCBB4 1039 FFDC 0A00              	MOVE.B	UART,D0		;else get the character
  10235 FFFCCBBA 0200 007F                   	AND.B	#0x7F,D0 	;zero out the high bit
  10236 FFFCCBBE                             AXIRET:
  10237 FFFCCBBE 4E75                        	RTS
                                             
                                             ;*
                                             ;* ===== Return to the resident monitor, operating system, etc.
                                             ;*
  10242 FFFCCBC0                             BYEBYE:
  10243 FFFCCBC0 1E3C 00E4                   	MOVE.B	#228,D7 	;return to Tutor
  10244 FFFCCBC4 4E4E                        	TRAP	#14
                                             
  10246 FFFCCBC6                             INITMSG:
  10247 FFFCCBC6 0D 0A 47 6F 72 64 6F 27     	DC.B	CR,LF,"Gordo's MC68000 Tiny BASIC, v1.2",CR,LF,LF,0
  10248 FFFCCBCE 73 20 4D 43 36 38 30 30     
  10249 FFFCCBD6 30 20 54 69 6E 79 20 42     
  10250 FFFCCBDE 41 53 49 43 2C 20 76 31     
  10251 FFFCCBE6 2E 32 0D 0A 0A 00           
  10252 FFFCCBEC                             OKMSG:
  10253 FFFCCBEC 0D 0A 4F 4B 0D 0A 00        	DC.B	CR,LF,'OK',CR,LF,0
  10254 FFFCCBF3                             HOWMSG:
  10255 FFFCCBF3 48 6F 77 3F 0D 0A 00        	DC.B	'How?',CR,LF,0
  10256 FFFCCBFA                             WHTMSG:
  10257 FFFCCBFA 57 68 61 74 3F 0D 0A 00     	DC.B	'What?',CR,LF,0
                                             
  10259 FFFCCC02                             SRYMSG:
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 114
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
  10260 FFFCCC02 53 6F 72 72 79 2E           	DC.B	'Sorry.'
  10261 FFFCCC08                             CLMSG:
  10262 FFFCCC08 0D 0A 00                    	DC.B	CR,LF,0
  10263 FFFCCC0B 00                          	DC.B	0	;<- for aligning on a word boundary
                                             
                                             LSTROM	EQU		$
                                             	;	end of possible ROM area
                                             
Finitron asm68 assembler    version 5.8   Fri Dec 15 16:29:34 2017     Page 114
bootrom.asm


                                             .include C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
                                             
                                             	;
                                             
                                             
