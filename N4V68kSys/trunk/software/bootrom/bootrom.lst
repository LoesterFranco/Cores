Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 1
bootrom.asm

                                             ; N4V68kSys bootrom - (C) 2017 Robert Finch, Waterloo
                                             ;
                                             ; This file is part of N4V68kSys
                                             ;
                                             ; how to build:
                                             ; 1. assemble using "asm68 bootrom.asm /G00 /olyebvm"
                                             ; 2. copy bootrom.vh to the correct directory if not already there
                                             ;
                                             ;------------------------------------------------------------------------------
                                             ;
                                             ; system memory map
                                             ;
                                             ;
                                             ; 00000000 +----------------+
                                             ;          | startup sp,pc  | 8 B
                                             ; 00000008 +----------------+
                                             ;          |                |
                                             ;          |                |
                                             ;          |                |
                                             ;          :  dram memory   : 512 MB
                                             ;          |                |
                                             ;          |                |
                                             ;          |                |
                                             ; 20000000 +----------------+
                                             ;          |                |
                                             ;          :     unused     :
                                             ;          |                |
                                             ; FF800000 +----------------+
                                             ;          |                |
                                             ;          : display buffer : 896k
                                             ;          |                |
                                             ; FF8E0000 +----------------+
                                             ;          |                |
                                             ;          :     unused     :
                                             ;          |                |
                                             ; FFD00000 +----------------+
                                             ;          |                |
                                             ;          :    I/O area    : 1.0 M
                                             ;          |                |
                                             ; FFE00000 +----------------+
                                             ;          |   VDG regs     |
                                             ; FFE01000 +----------------+
                                             ;          |                |
                                             ;          :     unused     :
                                             ;          |                |
                                             ; FFFC0000 +----------------+
                                             ;          |                |
                                             ;          :    boot rom    :
                                             ;          |                |
                                             ; FFFFFFFF +----------------+
                                             ;
                                             ;
                                             RGBMASK		EQU		%0111111111111111
                                             RED			EQU		%0111110000000000
                                             DARK_BLUE	EQU		%0000000000001111
                                             BLACK		EQU		%0000000000000000
                                             WHITE		EQU		%0111111111111111
                                             
                                             CR		EQU		$0D
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 2
bootrom.asm
                                             LF		EQU		$0A
                                             
                                             SC_F12  EQU    $07
                                             SC_C    EQU    $21
                                             SC_T    EQU    $2C
                                             SC_Z    EQU    $1A
                                             SC_KEYUP	EQU		$F0
                                             SC_EXTEND   EQU		$E0
                                             SC_CTRL		EQU		$14
                                             SC_RSHIFT	EQU		$59
                                             SC_NUMLOCK	EQU		$77
                                             SC_SCROLLLOCK	EQU	$7E
                                             SC_CAPSLOCK		EQU	$58
                                             SC_ALT		EQU		$11
                                             SC_LSHIFT	EQU		$12
                                             SC_DEL		EQU		$71		; extend
                                             SC_LCTRL	EQU		$58
                                             SC_TAB      EQU		$0D
                                             
                                             TEXTCOLS	EQU	40
                                             TEXTROWS	EQU	32
                                             
                                             VDGBUF		EQU	$FF800000
                                             VDGREG		EQU	$FFE00000
                                             VDG_CURX	EQU	$0440
                                             VDG_CURY	EQU	$0442
                                             VDG_CURSZ	EQU	$0444
                                             VDG_CURCLR	EQU	$0446
                                             VDG_CURFLSH	EQU	$0448
                                             VDG_CURIMG	EQU	$0460
                                             I2C			EQU	$FFDC0E00
                                             I2C2		EQU	$FFDC0E10
                                             VirtScreen	EQU	$1FFF0000
                                             KEYBD		EQU	$FFDC0000
                                             leds		EQU	$FFDC0600
                                             rand		EQU	$FFDC0C00
                                             
                                             fgcolor		EQU	$10002
                                             bkcolor		EQU	$10004
                                             fntsz		EQU	$10006
                                             memend		EQU	$10008
                                             CursorRow	EQU	$10418
                                             CursorCol	EQU $10419
                                             TextRows	EQU	$1041A
                                             TextCols	EQU	$1041B
                                             TextCurpos	EQU	$1041C
                                             TextScr		EQU	$10420
                                             KeybdEcho		EQU	$10424
                                             KeybdWaitFlag	EQU	$10425
                                             _KeyState1		EQU	$10426
                                             _KeyState2		EQU	$10427
                                             KeybdLEDs		EQU	$10428
                                             
                                             reg_d0			EQU	$10500
                                             reg_d1			EQU	$10504
                                             reg_d2			EQU	$10508
                                             reg_d3			EQU	$1050C
                                             reg_d4			EQU $10510
                                             reg_d5			EQU $10514
                                             reg_d6			EQU	$10518
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 3
bootrom.asm
                                             reg_d7			EQU	$1051C
                                             reg_a0			EQU $10520
                                             reg_a1			EQU	$10524
                                             reg_a2			EQU	$10528
                                             reg_a3			EQU $1052C
                                             reg_a4			EQU $10530
                                             reg_a5			EQU $10534
                                             reg_a6			EQU $10538
                                             reg_ssp			EQU	$1053C
                                             reg_usp			EQU	$10540
                                             reg_pc			EQU $10544
                                             reg_sr			EQU	$10548
                                             
                                             RTCBuf			EQU	$10600
                                             RTFBufEnd		EQU	$10660
                                             
                                             	org		$FFFC0000
                                             
                                             ;------------------------------------------------------------------------------
                                             
    140 FFFC0000 FF401000                    	dc.l	$FF401000	; initial SSP
    141 FFFC0004 FFFC0010                    	dc.l	Start		; initial PC
                                             	
                                             ;------------------------------------------------------------------------------
    144 FFFC0008                             fpga_version:
    145 FFFC0008 41 41 30 30 30 30 30 30     	dc.b	"AA000000"	; FPGA core version - 8 ASCII characters
                                             
                                             
                                             ;------------------------------------------------------------------------------
    149 FFFC0010                             	Start:
                                             ;------------------------------------------------------------------------------
    151 FFFC0010 33FC A1A1 FFDC 0600         		move.w	#$A1A1,leds		; diagnostics
                                             
                                             		; SIM croaked because the upper half of D1 was undefined. This caused
                                             		; problems with a dbra instruction. So the contents of all the registers
                                             		; are defined at startup. This is only needed for SIM.
    156 FFFC0018 7000                        		moveq	#0,D0
    157 FFFC001A 7200                        		moveq	#0,D1				; for SIM
    158 FFFC001C 7400                        		moveq	#0,D2
    159 FFFC001E 7600                        		moveq	#0,D3
    160 FFFC0020 7800                        		moveq	#0,D4
    161 FFFC0022 7A00                        		moveq	#0,D5
    162 FFFC0024 7C00                        		moveq	#0,D6
    163 FFFC0026 7E00                        		moveq	#0,D7
    164 FFFC0028 4288                        		clr.l	A0
    165 FFFC002A 4289                        		clr.l	A1
    166 FFFC002C 428A                        		clr.l	A2
    167 FFFC002E 428B                        		clr.l	A3
    168 FFFC0030 428C                        		clr.l	A4
    169 FFFC0032 428D                        		clr.l	A5
    170 FFFC0034 428E                        		clr.l	A6
    171 FFFC0036 4E67                        		move.l	A7,usp
                                             
    173 FFFC0038 6100 1294                   		bsr		i2c_setup
    174 FFFC003C 6100 146E                   		bsr		rtc_read
    175 FFFC0040 33FC A2A2 FFDC 0600         		move.w	#$A2A2,leds		; diagnostics
                                             
    177 FFFC0048 13FC 0028 0001 041B         		move.b	#TEXTCOLS,TextCols
    178 FFFC0050 13FC 0020 0001 041A         		move.b	#TEXTROWS,TextRows
    179 FFFC0058 4239 0001 0419              		clr.b	CursorCol
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 4
bootrom.asm
    180 FFFC005E 4239 0001 0418              		clr.b	CursorRow
    181 FFFC0064 4279 0001 041C              		clr.w	TextCurpos
    182 FFFC006A 23FC 0002 0000 0001 0420    		move.l	#$00020000,TextScr		; set virtual screen location
                                             
                                             
    185 FFFC0074 6100 03DC                   		bsr		SetCursorColor
    186 FFFC0078 6100 03F0                   		bsr		SetCursorImage
                                             
    188 FFFC007C 4DF9 FFDC 0000              		lea	$FFDC0000,A6	; I/O base
                                             
                                             		; Initialize random number generator
                                             
    192 FFFC0082 426E 0C06                   		clr.w	$0C06(a6)				; select stream #0
    193 FFFC0086 2D7C 8888 8888 0C08         		move.l	#$88888888,$0C08(a6)	; set initial m_z
    194 FFFC008E 2D7C 0123 4567 0C0C         		move.l	#$01234567,$0C0C(a6)	; set initial m_w
                                             
    196 FFFC0096 6100 02B0                   		bsr		BootClearScreen		
    197 FFFC009A 33FC A2A2 FFDC 0600         		move.w	#$A2A2,leds			; diagnostics
                                             		
    199 FFFC00A2 6100 10FE                   		bsr		DrawLines
    200 FFFC00A6 6100 1170                   		bsr		TestBlitter
                                             
    202 FFFC00AA 6100 02B2                   		bsr		BootCopyFont
    203 FFFC00AE 33FC A3A3 FFDC 0600         		move.w	#$A3A3,leds			; diagnostics
                                             
    205 FFFC00B6 33FC 7FFF 0001 0002         		move.w	#WHITE,fgcolor		; set text colors
    206 FFFC00BE 33FC 000F 0001 0004         		move.w	#DARK_BLUE,bkcolor
                                             
                                             		; Write startup message to screen
                                             
    210 FFFC00C6 41F9 FFFC 15D1              		lea		msg_start,a0
    211 FFFC00CC 7200                        		moveq	#0,d1					; xpos
    212 FFFC00CE 7400                        		moveq	#0,d2					; ypos
    213 FFFC00D0 6100 03D6                   		bsr		DispStringAt
    214 FFFC00D4 33FC A4A4 FFDC 0600         		move.w	#$A4A4,leds			; diagnostics
                                             
    216 FFFC00DC 47F9 FFFC 00E6              		lea		j1,a3
    217 FFFC00E2 6000 0FD2                   		bra		ramtest
    218 FFFC00E6                             j1:
    219 FFFC00E6 60FE                        		bra		j1
                                             
    221 FFFC00E8                             CRLF:
    222 FFFC00E8 2F01                        		move.l	d1,-(a7)
    223 FFFC00EA 123C 000D                   		move.b	#'\r',d1
    224 FFFC00EE 4EB9 FFFC 0132              		jsr		DisplayChar
    225 FFFC00F4 123C 000A                   		move.b	#'\n',d1
    226 FFFC00F8 4EB9 FFFC 0132              		jsr		DisplayChar
    227 FFFC00FE 221F                        		move.l	(a7)+,d1
    228 FFFC0100 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Calculate screen memory location from CursorRow,CursorCol.
                                             ; Destroys d0,d2,a0
                                             ;------------------------------------------------------------------------------
                                             ;
    235 FFFC0102                             CalcScreenLoc:
    236 FFFC0102 1039 0001 0418              		move.b	CursorRow,d0		; compute screen location
    237 FFFC0108 0240 007F                   		andi.w	#0x7f,d0
    238 FFFC010C 1439 0001 041B              		move.b	TextCols,d2
    239 FFFC0112 4882                        		ext.w	d2
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 5
bootrom.asm
    240 FFFC0114 C0C2                        		mulu.w	d2,d0
    241 FFFC0116 1439 0001 0419              		move.b	CursorCol,d2
    242 FFFC011C 0242 00FF                   		andi.w	#0xff,d2
    243 FFFC0120 D042                        		add.w	d2,d0
    244 FFFC0122 33C0 0001 041C              		move.w	d0,TextCurpos
    245 FFFC0128 D0B9 0001 0420              		add.l	TextScr,d0
    246 FFFC012E 2040                        		move.l	d0,a0				; a0 = screen location
    247 FFFC0130 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display a character on the screen
                                             ; d1.b = char to display
                                             ;------------------------------------------------------------------------------
                                             ;
    254 FFFC0132                             DisplayChar:
    255 FFFC0132 0C01 000D                   		cmpi.b	#'\r',d1			; carriage return ?
    256 FFFC0136 6608                        		bne.s	dccr
    257 FFFC0138 4239 0001 0419              		clr.b	CursorCol			; just set cursor column to zero on a CR
    258 FFFC013E 4E75                        		rts
    259 FFFC0140                             dccr:
    260 FFFC0140 0C01 0091                   		cmpi.b	#0x91,d1			; cursor right ?
    261 FFFC0144 6616                        		bne.s   dcx6
    262 FFFC0146 0C39 004F 0001 0419         		cmpi.b	#79,CursorCol
    263 FFFC014E 670A                        		beq.s	dcx7
    264 FFFC0150 5239 0001 0419              		addi.b	#1,CursorCol
    265 FFFC0156 6000 02C4                   		bra		DispCursor
    266 FFFC015A                             dcx7:
    267 FFFC015A 4E75                        		rts
    268 FFFC015C                             dcx6:
    269 FFFC015C 0C01 0090                   		cmpi.b	#0x90,d1			; cursor up ?
    270 FFFC0160 6614                        		bne.s	dcx8
    271 FFFC0162 0C39 0000 0001 0418         		cmpi.b	#0,CursorRow
    272 FFFC016A 67EE                        		beq.s	dcx7
    273 FFFC016C 5339 0001 0418              		subi.b	#1,CursorRow
    274 FFFC0172 6000 02A8                   		bra		DispCursor
    275 FFFC0176                             dcx8:
    276 FFFC0176 0C01 0093                   		cmpi.b	#0x93,d1			; cursor left?
    277 FFFC017A 6614                        		bne.s	dcx9
    278 FFFC017C 0C39 0000 0001 0419         		cmpi.b	#0,CursorCol
    279 FFFC0184 67D4                        		beq.s	dcx7
    280 FFFC0186 5339 0001 0419              		subi.b	#1,CursorCol
    281 FFFC018C 6000 028E                   		bra		DispCursor
    282 FFFC0190                             dcx9:
    283 FFFC0190 0C01 0092                   		cmpi.b	#0x92,d1			; cursor down ?
    284 FFFC0194 6614                        		bne		dcx10
    285 FFFC0196 0C39 003F 0001 0418         		cmpi.b	#63,CursorRow
    286 FFFC019E 67BA                        		beq		dcx7
    287 FFFC01A0 5279 0001 0418              		addi.w	#1,CursorRow
    288 FFFC01A6 6000 0274                   		bra		DispCursor
    289 FFFC01AA                             dcx10:
    290 FFFC01AA 0C01 0094                   		cmpi.b	#0x94,d1			; cursor home ?
    291 FFFC01AE 661E                        		bne.s	dcx11
    292 FFFC01B0 0C39 0000 0001 0419         		cmpi.b	#0,CursorCol
    293 FFFC01B8 670A                        		beq.s	dcx12
    294 FFFC01BA 4239 0001 0419              		clr.b	CursorCol
    295 FFFC01C0 6000 025A                   		bra		DispCursor
    296 FFFC01C4                             dcx12:
    297 FFFC01C4 4239 0001 0418              		clr.b	CursorRow
    298 FFFC01CA 6000 0250                   		bra		DispCursor
    299 FFFC01CE                             dcx11:
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 6
bootrom.asm
    300 FFFC01CE 48E7 E080                   		movem.l	d0/d1/d2/a0,-(a7)
    301 FFFC01D2 0C01 0099                   		cmpi.b	#0x99,d1			; delete ?
    302 FFFC01D6 660C                        		bne.s	dcx13
    303 FFFC01D8 6100 FF28                   		bsr		CalcScreenLoc
    304 FFFC01DC 1039 0001 0419              		move.b	CursorCol,d0
    305 FFFC01E2 6020                        		bra.s	dcx5
    306 FFFC01E4                             dcx13:
    307 FFFC01E4 0C01 0000                   		cmpi.b	#CTRLH,d1			; backspace ?
    308 FFFC01E8 6632                        		bne.s   dcx3
    309 FFFC01EA 0C39 0000 0001 0419         		cmpi.b	#0,CursorCol
    310 FFFC01F2 6752                        		beq.s   dcx4
    311 FFFC01F4 5339 0001 0419              		subi.b	#1,CursorCol
    312 FFFC01FA 6100 FF06                   		bsr		CalcScreenLoc		; a0 = screen location
    313 FFFC01FE 1039 0001 0419              		move.b	CursorCol,d0
    314 FFFC0204                             dcx5:
    315 FFFC0204 10E8 0001                   		move.b	1(a0),(a0)+
    316 FFFC0208 5200                        		addi.b	#1,d0
    317 FFFC020A B039 0001 041B              		cmp.b	TextCols,d0
    318 FFFC0210 65F2                        		blo.s	dcx5
    319 FFFC0212 103C 0020                   		move.b	#32,d0
    320 FFFC0216 1140 FFFF                   		move.b	d0,-1(a0)
    321 FFFC021A 602A                        		bra.s	dcx4
    322 FFFC021C                             dcx3:
    323 FFFC021C 0C01 000A                   		cmpi.b	#'\n',d1		; linefeed ?
    324 FFFC0220 671C                        		beq.s	dclf
                                             
    326 FFFC0222 6100 FEDE                   		bsr		CalcScreenLoc	; a0 = screen location
                                             		;bsr		AsciiToScreen	; convert ascii char to screen char
    328 FFFC0226 1081                        		move.b	d1,(a0)
    329 FFFC0228 1001                        		move.b	d1,d0
    330 FFFC022A 4880                        		ext.w	d0
    331 FFFC022C 6100 0194                   		bsr		DispChar
    332 FFFC0230 6100 001A                   		bsr		IncCursorPos
    333 FFFC0234 6100 01E6                   		bsr		DispCursor
    334 FFFC0238 4CDF 0107                   		movem.l	(a7)+,d0/d1/d2/a0
    335 FFFC023C 4E75                        		rts
    336 FFFC023E                             dclf:
    337 FFFC023E 6100 002C                   		bsr		IncCursorRow
    338 FFFC0242 6100 01D8                   		bsr		DispCursor
    339 FFFC0246                             dcx4:
    340 FFFC0246 4CDF 0107                   		movem.l	(a7)+,d0/d1/d2/a0		; get back a0
    341 FFFC024A 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Increment the cursor position, scroll the screen if needed.
                                             ;------------------------------------------------------------------------------
                                             ;
    347 FFFC024C                             IncCursorPos:
    348 FFFC024C 5279 0001 041C              		addi.w	#1,TextCurpos
    349 FFFC0252 5239 0001 0419              		addi.b	#1,CursorCol
    350 FFFC0258 1039 0001 041B              		move.b	TextCols,d0
    351 FFFC025E B039 0001 0419              		cmp.b	CursorCol,d0
    352 FFFC0264 643A                        		bhs.s	icc1
    353 FFFC0266 4239 0001 0419              		clr.b	CursorCol
    354 FFFC026C                             IncCursorRow:
    355 FFFC026C 5239 0001 0418              		addi.b	#1,CursorRow
    356 FFFC0272 1039 0001 041A              		move.b	TextRows,d0
    357 FFFC0278 B039 0001 0418              		cmp.b	CursorRow,d0
    358 FFFC027E 6220                        		bhi.s	icc1
    359 FFFC0280 1039 0001 041A              		move.b	TextRows,d0
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 7
bootrom.asm
    360 FFFC0286 13C0 0001 0418              		move.b	d0,CursorRow		; in case CursorRow is way over
    361 FFFC028C 5339 0001 0418              		subi.b	#1,CursorRow
    362 FFFC0292 4880                        		ext.w	d0
    363 FFFC0294 E340                        		asl.w	#1,d0
    364 FFFC0296 9179 0001 041C              		sub.w	d0,TextCurpos
    365 FFFC029C 6100 0B6A                   		bsr		ScrollUp
    366 FFFC02A0                             icc1:
    367 FFFC02A0 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display a string on the screen.
                                             ;------------------------------------------------------------------------------
                                             ;
    373 FFFC02A2                             DisplayString:
    374 FFFC02A2 48E7 C040                   		movem.l	d0/d1/a1,-(a7)
    375 FFFC02A6                             dspj1:
    376 FFFC02A6 4281                        		clr.l	d1				; clear upper bits of d1
    377 FFFC02A8 1219                        		move.b	(a1)+,d1		; move string char into d1
    378 FFFC02AA 0C01 0000                   		cmpi.b	#0,d1			; is it end of string ?
    379 FFFC02AE 6706                        		beq		dsret			
    380 FFFC02B0 6100 FE80                   		bsr		DisplayChar		; display character
    381 FFFC02B4 60F0                        		bra		dspj1			; go back for next character
    382 FFFC02B6                             dsret:
    383 FFFC02B6 4CDF 0203                   		movem.l	(a7)+,d0/d1/a1
    384 FFFC02BA 4E75                        		rts
                                             
    386 FFFC02BC                             DisplayStringCRLF:
    387 FFFC02BC 6100 FFE4                   		bsr		DisplayString
    388 FFFC02C0 6000 FE26                   		bra		CRLF
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display a string on the screen. Stop at 255 chars, or NULL or D1.W
                                             ;------------------------------------------------------------------------------
                                             ;
    394 FFFC02C4                             DisplayString1:
    395 FFFC02C4 48E7 C040                   		movem.l	d0/d1/a1,-(a7)
    396 FFFC02C8 0241 00FF                   		andi.w	#255,d1			; max 255 chars
    397 FFFC02CC 2001                        		move.l	d1,d0
    398 FFFC02CE                             dspj11:
    399 FFFC02CE 1219                        		move.b	(a1)+,d1		; move string char into d1
    400 FFFC02D0 0C01 0000                   		cmpi.b	#0,d1			; is it end of string ?
    401 FFFC02D4 6708                        		beq		dsret1			
    402 FFFC02D6 6100 FE5A                   		bsr		DisplayChar		; display character
    403 FFFC02DA 57C8 FFF2                   		dbeq	d0,dspj11		; go back for next character
    404 FFFC02DE                             dsret1:
    405 FFFC02DE 4CDF 0203                   		movem.l	(a7)+,d0/d1/a1
    406 FFFC02E2 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display a string on the screen. Stop at 255 chars, or NULL or D1.W
                                             ; end string with CR,LF
                                             ;------------------------------------------------------------------------------
                                             ;
    413 FFFC02E4                             DisplayString0:
    414 FFFC02E4 6100 FFDE                   		bsr		DisplayString1
    415 FFFC02E8 6000 FDFE                   		bra		CRLF
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Dispatch cursor functions
                                             ;------------------------------------------------------------------------------
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 8
bootrom.asm
                                             ;
    421 FFFC02EC                             Cursor1:
    422 FFFC02EC 0C41 00FF                   		cmpi.w	#0x00ff,d1
    423 FFFC02F0 670E                        		beq		GetCursorPos
    424 FFFC02F2 0C41 FF00                   		cmpi.w	#0xFF00,d1
    425 FFFC02F6 6718                        		beq		SetCursorPos
    426 FFFC02F8 4EB9 FFFC 0DCA              		jsr		ClearScreen
    427 FFFC02FE 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Get the cursor position.
                                             ; d1.b0 = row
                                             ; d1.b1 = col
                                             ;------------------------------------------------------------------------------
                                             ;
    435 FFFC0300                             GetCursorPos:
    436 FFFC0300 1239 0001 0419              		move.b	CursorCol,d1
    437 FFFC0306 E141                        		asl.w	#8,d1
    438 FFFC0308 1239 0001 0418              		move.b	CursorRow,d1
    439 FFFC030E 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Set the position of the cursor, update the linear screen pointer.
                                             ; d1.b0 = row
                                             ; d1.b1 = col
                                             ;------------------------------------------------------------------------------
                                             ;
    447 FFFC0310                             SetCursorPos:
    448 FFFC0310 48E7 6000                   		movem.l	d1/d2,-(a7)
    449 FFFC0314 13C1 0001 0418              		move.b	d1,CursorRow
    450 FFFC031A E049                        		lsr.w	#8,d1
    451 FFFC031C 13C1 0001 0419              		move.b	d1,CursorCol
    452 FFFC0322 1239 0001 0418              		move.b	CursorRow,d1
    453 FFFC0328 4881                        		ext.w	d1
    454 FFFC032A 1439 0001 041B              		move.b	TextCols,d2
    455 FFFC0330 4882                        		ext.w	d2
    456 FFFC0332 C2C2                        		mulu.w	d2,d1
    457 FFFC0334 1439 0001 0419              		move.b	CursorCol,d2
    458 FFFC033A D242                        		add.w	d2,d1
    459 FFFC033C 33C1 0001 041C              		move.w	d1,TextCurpos
    460 FFFC0342                             scp1:
    461 FFFC0342 4CDF 0006                   		movem.l	(a7)+,d1/d2
    462 FFFC0346 4E75                        		rts
                                             
                                             
                                             ;------------------------------------------------------------------------------
                                             ; clear screen	
                                             ;
                                             ; Trashes:
                                             ;	a0,d0,d1
                                             ;------------------------------------------------------------------------------
                                             
    472 FFFC0348                             BootClearScreen:
    473 FFFC0348 207C FF80 0000              		move.l	#VDGBUF,A0
    474 FFFC034E 700F                        		moveq	#DARK_BLUE,D0			; dark blue
    475 FFFC0350 223C 0001 4000              		move.l	#320*256,D1				; number of pixels
    476 FFFC0356                             .loop1:
    477 FFFC0356 30C0                        		move.w	d0,(a0)+				; store it to the screen
    478 FFFC0358 5381                        		sub.l	#1,d1					; can't use dbra here
    479 FFFC035A 66FA                        		bne.s	.loop1
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 9
bootrom.asm
    480 FFFC035C 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; copy font to VDG ram
                                             ;
                                             ; Trashes:
                                             ;	a0,a1,d0,d1
                                             ;------------------------------------------------------------------------------
                                             
    489 FFFC035E                             BootCopyFont:
    490 FFFC035E 33FC 0707 0001 0006         		move.w	#$0707,fntsz		; set font size
    491 FFFC0366 41F9 FFFC 15E9              		lea		font8,a0
    492 FFFC036C 223C 0000 1000              		move.l	#8*512,d1			; 512 chars * 8 bytes per char
    493 FFFC0372 227C FF8B 8000              		move.l	#$FF8B8000,a1		; font table address
    494 FFFC0378 7000                        		moveq	#0,d0				; zero out high order bits
    495 FFFC037A                             cpyfnt:
    496 FFFC037A 1018                        		move.b	(a0)+,d0			; get a byte
    497 FFFC037C 32C0                        		move.w	d0,(a1)+			; store in font table
    498 FFFC037E 51C9 FFFA                   		dbra	d1,cpyfnt
    499 FFFC0382 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Parameters:
                                             ;	d0.w		character to display
                                             ;	d1.w		x position
                                             ;	d2.w		y position
                                             ; Trashes:
                                             ;	a6
                                             ;------------------------------------------------------------------------------
                                             
    510 FFFC0384                             DispCharAt:
    511 FFFC0384 2C7C FFE0 0000              		move.l	#VDGREG,a6
    512 FFFC038A 4840                        		swap	d0						; save off d0 low
    513 FFFC038C                             .0001:									; wait for character que to empty
    514 FFFC038C 302E 042C                   		move.w	$42C(a6),d0			; read character queue index into d0
    515 FFFC0390 B07C 001C                   		cmp.w	#28,d0					; allow up 28 entries to be in progress
    516 FFFC0394 64F6                        		bhs.s	.0001					; branch if too many chars queued
    517 FFFC0396 4840                        		swap	d0						; get back d0 low
    518 FFFC0398 3D40 0420                   		move.w	d0,$420(a6)			; set char code
    519 FFFC039C 3D79 0001 0002 0422         		move.w	fgcolor,$422(a6)		; set fg color
    520 FFFC03A4 3D79 0001 0004 0424         		move.w	bkcolor,$424(a6)		; set bk color
    521 FFFC03AC 3D41 0426                   		move.w	d1,$426(a6)			; set x pos
    522 FFFC03B0 3D42 0428                   		move.w	d2,$428(a6)			; set y pos
    523 FFFC03B4 3D7C 0707 042A              		move.w	#$0707,$42A(a6)		; set font x,y extent
    524 FFFC03BA 3D7C 0000 042E              		move.w	#0,$42E(a6)			; pulse character queue write signal
    525 FFFC03C0 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Parameters:
                                             ;	d0.w		character to display
                                             ;------------------------------------------------------------------------------
                                             
    532 FFFC03C2                             DispChar:
    533 FFFC03C2 48E7 4002                   		movem.l	d1/a6,-(a7)
    534 FFFC03C6 2C7C FFE0 0000              		move.l	#VDGREG,a6
    535 FFFC03CC 4840                        		swap	d0					; save off d0 low
    536 FFFC03CE                             .0001:								; wait for character que to empty
    537 FFFC03CE 302E 042C                   		move.w	$42C(a6),d0			; read character queue index into d0
    538 FFFC03D2 B07C 001C                   		cmp.w	#28,d0				; allow up 28 entries to be in progress
    539 FFFC03D6 64F6                        		bhs.s	.0001				; branch if too many chars queued
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 10
bootrom.asm
    540 FFFC03D8 4840                        		swap	d0					; get back d0 low
    541 FFFC03DA 3D40 0420                   		move.w	d0,$420(a6)			; set char code
    542 FFFC03DE 3D79 0001 0002 0422         		move.w	fgcolor,$422(a6)	; set fg color
    543 FFFC03E6 3D79 0001 0004 0424         		move.w	bkcolor,$424(a6)	; set bk color
    544 FFFC03EE 1239 0001 0419              		move.b	CursorCol,d1
    545 FFFC03F4 4881                        		ext.w	d1
    546 FFFC03F6 E741                        		asl.w	#3,d1
    547 FFFC03F8 3D41 0426                   		move.w	d1,$426(a6)			; set x pos
    548 FFFC03FC 1239 0001 0418              		move.b	CursorRow,d1
    549 FFFC0402 4881                        		ext.w	d1
    550 FFFC0404 E741                        		asl.w	#3,d1
    551 FFFC0406 3D41 0428                   		move.w	d1,$428(a6)			; set y pos
    552 FFFC040A 3D7C 0707 042A              		move.w	#$0707,$42A(a6)		; set font x,y extent
    553 FFFC0410 3D7C 0000 042E              		move.w	#0,$42E(a6)			; pulse character queue write signal
    554 FFFC0416 4CDF 4002                   		movem.l	(a7)+,d1/a6
    555 FFFC041A 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ;------------------------------------------------------------------------------
                                             
    560 FFFC041C                             DispCursor:
    561 FFFC041C 48E7 4002                   		movem.l	d1/a6,-(a7)
    562 FFFC0420 2C7C FFE0 0000              		move.l	#VDGREG,a6
    563 FFFC0426 3D7C 0A0A 0444              		move.w	#$0A0A,VDG_CURSZ(a6)
    564 FFFC042C 1239 0001 0419              		move.b	CursorCol,d1
    565 FFFC0432 4881                        		ext.w	d1
    566 FFFC0434 E741                        		asl.w	#3,d1
    567 FFFC0436 5341                        		sub.w	#1,d1
    568 FFFC0438 3D41 0440                   		move.w	d1,VDG_CURX(a6)
    569 FFFC043C 1239 0001 0418              		move.b	CursorRow,d1
    570 FFFC0442 4881                        		ext.w	d1
    571 FFFC0444 E741                        		asl.w	#3,d1
    572 FFFC0446 5341                        		sub.w	#1,d1
    573 FFFC0448 3D41 0442                   		move.w	d1,VDG_CURY(a6)
    574 FFFC044C 4CDF 4002                   		movem.l	(a7)+,d1/a6
    575 FFFC0450 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Cursor Color
                                             ;
                                             ;	fffff-irrrgggbbb
                                             ;	  |   | |  |  |
                                             ;     |   | |  |  +- blue
                                             ;	  |   | |  +---- green
                                             ;     |   | +------- red
                                             ;     |   +--------- invert video (rgb ignored)
                                             ;     +------------- flash rate
                                             ;					 1xxxx = no flash
                                             ;                    00001 = 1/8 vsync (7.5 Hz)
                                             ;				     00010 = 1/16 vsync (3.75 Hz)
                                             ;                    00100 = 1/32 vsync (1.875 Hz)
                                             ;------------------------------------------------------------------------------
                                             
    593 FFFC0452                             SetCursorColor:
    594 FFFC0452 2F0E                        		move.l  a6,-(a7)
    595 FFFC0454 2C7C FFE0 0000              		move.l	#VDGREG,a6
    596 FFFC045A 3D7C 7FFF 0446              		move.w	#%0111111111111111,VDG_CURCLR(a6)
    597 FFFC0460 3D7C 0004 0448              		move.w	#%00100,VDG_CURFLSH(a6)
    598 FFFC0466 2C5F                        		move.l	(a7)+,a6
    599 FFFC0468 4E75                        		rts
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 11
bootrom.asm
                                             		
                                             ;------------------------------------------------------------------------------
                                             ; Cursor Image
                                             ; Cursor may be up to 16x16 pixels.
                                             ;------------------------------------------------------------------------------
                                             
    606 FFFC046A                             SetCursorImage:
    607 FFFC046A 48E7 4082                   		movem.l	d1/a0/a6,-(a7)
    608 FFFC046E 41F9 FFFC 0488              		lea		CursorImage,a0
    609 FFFC0474 2C7C FFE0 0460              		move.l	#VDGREG+VDG_CURIMG,a6
    610 FFFC047A 720F                        		moveq	#15,d1
    611 FFFC047C                             .0001:
    612 FFFC047C 3CD8                        		move.w	(a0)+,(a6)+
    613 FFFC047E 51C9 FFFC                   		dbra	d1,.0001
    614 FFFC0482 4CDF 4102                   		movem.l	(a7)+,d1/a0/a6
    615 FFFC0486 4E75                        		rts
                                             
                                             	align	2
    618 FFFC0488                             CursorImage:
    619 FFFC0488 03FF                        	dc.w	%1111111111
    620 FFFC048A 0201                        	dc.w	%1000000001
    621 FFFC048C 0201                        	dc.w	%1000000001
    622 FFFC048E 0201                        	dc.w	%1000000001
    623 FFFC0490 0201                        	dc.w	%1000000001
    624 FFFC0492 0201                        	dc.w	%1000000001
    625 FFFC0494 0201                        	dc.w	%1000000001
    626 FFFC0496 0201                        	dc.w	%1000000001
    627 FFFC0498 0231                        	dc.w	%1000110001
    628 FFFC049A 03FF                        	dc.w	%1111111111
    629 FFFC049C 0000                        	dc.w	%0000000000
    630 FFFC049E 0000                        	dc.w	%0000000000
    631 FFFC04A0 0000                        	dc.w	%0000000000
    632 FFFC04A2 0000                        	dc.w	%0000000000
    633 FFFC04A4 0000                        	dc.w	%0000000000
    634 FFFC04A6 0000                        	dc.w	%0000000000
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Parameters:
                                             ;	a0			pointer to string
                                             ;	d1.w		x position
                                             ;	d2.w		y position
                                             ; Returns:
                                             ;	a0			points to byte after NULL character
                                             ;	d1.w		updated x position
                                             ; Trashes:
                                             ;	d0,a6
                                             ;------------------------------------------------------------------------------
                                             
    648 FFFC04A8                             DispStringAt:
    649 FFFC04A8                             .0003:
    650 FFFC04A8 7000                        		moveq	#0,d0					; zero out high order bits
    651 FFFC04AA 1018                        		move.b	(a0)+,d0				; get character from string into d0
    652 FFFC04AC 6708                        		beq.s	.0002					; end of string ?
    653 FFFC04AE 6100 FED4                   		bsr		DispCharAt
    654 FFFC04B2 5041                        		add.w	#8,d1					; increment xpos
    655 FFFC04B4 60F2                        		bra.s	.0003
    656 FFFC04B6                             .0002:
    657 FFFC04B6 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 12
bootrom.asm
                                             ; Display nybble in D1.B
                                             ;------------------------------------------------------------------------------
                                             ;
    663 FFFC04B8                             DisplayNybble:
    664 FFFC04B8 3F01                        		move.w	d1,-(a7)
    665 FFFC04BA 0201 000F                   		andi.b	#0xF,d1
    666 FFFC04BE 0601 0030                   		addi.b	#'0',d1
    667 FFFC04C2 0C01 0039                   		cmpi.b	#'9',d1
    668 FFFC04C6 6302                        		bls.s	dispnyb1
    669 FFFC04C8 5E01                        		addi.b	#7,d1
    670 FFFC04CA                             dispnyb1:
    671 FFFC04CA 6100 FC66                   		bsr		DisplayChar
    672 FFFC04CE 321F                        		move.w	(a7)+,d1
    673 FFFC04D0 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display the byte in D1.B
                                             ;------------------------------------------------------------------------------
                                             ;
    679 FFFC04D2                             DisplayByte:
    680 FFFC04D2 3F01                        		move.w	d1,-(a7)
    681 FFFC04D4 E819                        		ror.b	#4,d1
    682 FFFC04D6 6100 FFE0                   		bsr		DisplayNybble
    683 FFFC04DA E919                        		rol.b	#4,d1
    684 FFFC04DC 6100 FFDA                   		bsr		DisplayNybble
    685 FFFC04E0 321F                        		move.w	(a7)+,d1
    686 FFFC04E2 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display the 32 bit word in D1.L
                                             ;------------------------------------------------------------------------------
                                             ;
    692 FFFC04E4                             DisplayWord:
    693 FFFC04E4 E199                        		rol.l	#8,d1
    694 FFFC04E6 6100 FFEA                   		bsr		DisplayByte
    695 FFFC04EA E199                        		rol.l	#8,d1
    696 FFFC04EC 6100 FFE4                   		bsr		DisplayByte
    697 FFFC04F0 E199                        		rol.l	#8,d1
    698 FFFC04F2 6100 FFDE                   		bsr		DisplayByte
    699 FFFC04F6 E199                        		rol.l	#8,d1
    700 FFFC04F8 6100 FFD8                   		bsr		DisplayByte
    701 FFFC04FC 4E75                        		rts
                                             
    703 FFFC04FE                             DisplayMem:
    704 FFFC04FE 123C 003A                   		move.b	#':',d1
    705 FFFC0502 4EB9 FFFC 0132              		jsr		DisplayChar
    706 FFFC0508 2208                        		move.l	a0,d1
    707 FFFC050A 4EB9 FFFC 04E4              		jsr		DisplayWord
    708 FFFC0510 7407                        		moveq	#7,d2
    709 FFFC0512                             dspmem1:
    710 FFFC0512 123C 0020                   		move.b	#' ',d1
    711 FFFC0516 4EB9 FFFC 0132              		jsr		DisplayChar
    712 FFFC051C 1218                        		move.b	(a0)+,d1
    713 FFFC051E 4EB9 FFFC 04D2              		jsr		DisplayByte
    714 FFFC0524 51CA FFEC                   		dbra	d2,dspmem1
    715 FFFC0528 4EF9 FFFC 00E8              		jmp		CRLF
                                             
                                             ;==============================================================================
                                             ; Keyboard stuff
                                             ;
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 13
bootrom.asm
                                             ; KeyState2_
                                             ; 876543210
                                             ; ||||||||+ = shift
                                             ; |||||||+- = alt
                                             ; ||||||+-- = control
                                             ; |||||+--- = numlock
                                             ; ||||+---- = capslock
                                             ; |||+----- = scrolllock
                                             ; ||+------ =
                                             ; |+------- = 
                                             ; +-------- = extended
                                             ;
                                             ;==============================================================================
                                             
    734 FFFC052E                             _KeybdGetStatus:
    735 FFFC052E 1239 FFDC 0001              		move.b	KEYBD+1,d1
    736 FFFC0534 4E75                        		rts
                                             
                                             ; Get the scancode from the keyboard port
                                             ;
    740 FFFC0536                             _KeybdGetScancode:
    741 FFFC0536 7200                        		moveq	#0,d1
    742 FFFC0538 1239 FFDC 0000              		move.b	KEYBD,d1				; get the scan code
    743 FFFC053E 13FC 0000 FFDC 0001         		move.b	#0,KEYBD+1				; clear receive register
    744 FFFC0546 4E75                        		rts
                                             
                                             ; Recieve a byte from the keyboard, used after a command is sent to the
                                             ; keyboard in order to wait for a response.
                                             ;
    749 FFFC0548                             KeybdRecvByte:
    750 FFFC0548 2F03                        		move.l	d3,-(a7)
    751 FFFC054A 363C 0064                   		move.w	#100,d3		; wait up to 1s
    752 FFFC054E                             .0003:
    753 FFFC054E 6100 FFDE                   		bsr		_KeybdGetStatus	; wait for response from keyboard
    754 FFFC0552 4A01                        		tst.b	d1
    755 FFFC0554 6B0E                        		bmi		.0004		; is input buffer full ? yes, branch
    756 FFFC0556 6100 02C4                   		bsr		Wait10ms		; wait a bit
    757 FFFC055A 51CB FFF2                   		dbra	d3,.0003	; go back and try again
    758 FFFC055E 261F                        		move.l	(a7)+,d3
    759 FFFC0560 72FF                        		moveq	#-1,d1			; return -1
    760 FFFC0562 4E75                        		rts
    761 FFFC0564                             .0004:
    762 FFFC0564 6100 FFD0                   		bsr		_KeybdGetScancode
    763 FFFC0568 261F                        		move.l	(a7)+,d3
    764 FFFC056A 4E75                        		rts
                                             
                                             
                                             ; Wait until the keyboard transmit is complete
                                             ; Returns .CF = 1 if successful, .CF=0 timeout
                                             ;
    770 FFFC056C                             KeybdWaitTx:
    771 FFFC056C 48E7 3000                   		movem.l	d2/d3,-(a7)
    772 FFFC0570 7664                        		moveq	#100,d3		; wait a max of 1s
    773 FFFC0572                             .0001:
    774 FFFC0572 6100 FFBA                   		bsr		_KeybdGetStatus
    775 FFFC0576 0801 0006                   		btst	#6,d1		; check for transmit complete bit
    776 FFFC057A 6610                        		bne	    .0002		; branch if bit set
    777 FFFC057C 6100 029E                   		bsr		Wait10ms		; delay a little bit
    778 FFFC0580 51CB FFF0                   		dbra	d3,.0001	; go back and try again
    779 FFFC0584 4CDF 000C                   		movem.l	(a7)+,d2/d3
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 14
bootrom.asm
    780 FFFC0588 72FF                        		moveq	#-1,d1		; return -1
    781 FFFC058A 4E75                        		rts
    782 FFFC058C                             .0002:
    783 FFFC058C 4CDF 000C                   		movem.l	(a7)+,d2/d3
    784 FFFC0590 7200                        		moveq	#0,d1		; return 0
    785 FFFC0592 4E75                        		rts
                                             
                                             
                                             ;------------------------------------------------------------------------------
                                             ; get key pending status into d1.b
                                             ;------------------------------------------------------------------------------
                                             ;
    792 FFFC0594                             CheckForKey:
    793 FFFC0594 1239 FFDC 0001              		move.b	KEYBD+1,d1
    794 FFFC059A 6A06                        		bpl.s	cfk1
    795 FFFC059C 123C 0001                   		move.b	#1,d1
    796 FFFC05A0 4E75                        		rts
    797 FFFC05A2                             cfk1:
    798 FFFC05A2 4201                        		clr.b	d1
    799 FFFC05A4 4E75                        		rts
                                             
    801 FFFC05A6                             GetKey:
    802 FFFC05A6 6100 0022                   		bsr		KeybdGetCharWait
    803 FFFC05AA 0C39 0000 0001 0424         		cmpi.b	#0,KeybdEcho	; is keyboard echo on ?
    804 FFFC05B2 670C                        		beq.s	gk1
    805 FFFC05B4 0C01 000D                   		cmpi.b	#'\r',d1		; convert CR keystroke into CRLF
    806 FFFC05B8 6700 FB2E                   		beq		CRLF
    807 FFFC05BC 6100 FB74                   		bsr		DisplayChar
    808 FFFC05C0                             gk1:
    809 FFFC05C0 4E75                        		rts
                                             
                                             
    812 FFFC05C2                             KeybdGetCharNoWait:
    813 FFFC05C2 4239 0001 0425              		clr.b	KeybdWaitFlag
    814 FFFC05C8 6008                        		bra		KeybdGetChar
                                             
    816 FFFC05CA                             KeybdGetCharWait:
    817 FFFC05CA 13FC FFFF 0001 0425         		move.b	#-1,KeybdWaitFlag
                                             
    819 FFFC05D2                             KeybdGetChar:
    820 FFFC05D2 48E7 3080                   		movem.l	d2/d3/a0,-(a7)
    821 FFFC05D6                             .0003:
    822 FFFC05D6 6100 FF56                   		bsr		_KeybdGetStatus			; check keyboard status for key available
    823 FFFC05DA 6B10                        		bmi		.0006					; yes, go process
    824 FFFC05DC 4A39 0001 0425              		tst.b	KeybdWaitFlag			; are we willing to wait for a key ?
    825 FFFC05E2 6BF2                        		bmi		.0003					; yes, branch back
    826 FFFC05E4 4CDF 010C                   		movem.l	(a7)+,d2/d3/a0
    827 FFFC05E8 72FF                        		moveq	#-1,d1					; flag no char available
    828 FFFC05EA 4E75                        		rts
    829 FFFC05EC                             .0006:
    830 FFFC05EC 6100 FF48                   		bsr		_KeybdGetScancode
    831 FFFC05F0                             .0001:
    832 FFFC05F0 33FC 0001 FFDC 0600         		move.w	#1,leds
    833 FFFC05F8 B23C 00F0                   		cmp.b	#SC_KEYUP,d1
    834 FFFC05FC 6700 00CA                   		beq		.doKeyup
    835 FFFC0600 B23C 00E0                   		cmp.b	#SC_EXTEND,d1
    836 FFFC0604 6700 00CE                   		beq		.doExtend
    837 FFFC0608 B23C 0014                   		cmp.b	#SC_CTRL,d1
    838 FFFC060C 6700 00D2                   		beq		.doCtrl
    839 FFFC0610 B23C 0012                   		cmp.b	#SC_LSHIFT,d1
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 15
bootrom.asm
    840 FFFC0614 6700 0134                   		beq		.doShift
    841 FFFC0618 B23C 0059                   		cmp.b	#SC_RSHIFT,d1
    842 FFFC061C 6700 012C                   		beq		.doShift
    843 FFFC0620 B23C 0077                   		cmp.b	#SC_NUMLOCK,d1
    844 FFFC0624 6700 014C                   		beq		.doNumLock
    845 FFFC0628 B23C 0058                   		cmp.b	#SC_CAPSLOCK,d1
    846 FFFC062C 6700 0154                   		beq		.doCapsLock
    847 FFFC0630 B23C 007E                   		cmp.b	#SC_SCROLLLOCK,d1
    848 FFFC0634 6700 015C                   		beq		.doScrollLock
    849 FFFC0638 B23C 0011                   		cmp.b   #SC_ALT,d1
    850 FFFC063C 6700 00CA                   		beq     .doAlt
    851 FFFC0640 1439 0001 0426              		move.b	_KeyState1,d2			; check key up/down
    852 FFFC0646 13FC 0000 0001 0426         		move.b	#0,_KeyState1			; clear keyup status
    853 FFFC064E 4A02                        		tst.b	d2
    854 FFFC0650 6684                        		bne	    .0003					; ignore key up
    855 FFFC0652 B23C 000D                   		cmp.b   #SC_TAB,d1
    856 FFFC0656 6700 00D8                   		beq     .doTab
    857 FFFC065A                             .0013:
    858 FFFC065A 1439 0001 0427              		move.b	_KeyState2,d2
    859 FFFC0660 6A1E                        		bpl		.0010					; is it extended code ?
    860 FFFC0662 0202 007F                   		and.b	#$7F,d2					; clear extended bit
    861 FFFC0666 13C2 0001 0427              		move.b	d2,_KeyState2
    862 FFFC066C 13FC 0000 0001 0426         		move.b	#0,_KeyState1			; clear keyup
    863 FFFC0674 41F9 FFFC 0AAC              		lea		_keybdExtendedCodes,a0
    864 FFFC067A 1230 1000                   		move.b	(a0,d1.w),d1
    865 FFFC067E 603A                        		bra		.0008
    866 FFFC0680                             .0010:
    867 FFFC0680 0802 0002                   		btst	#2,d2					; is it CTRL code ?
    868 FFFC0684 6710                        		beq		.0009
    869 FFFC0686 0241 007F                   		and.w	#$7F,d1
    870 FFFC068A 41F9 FFFC 0A2C              		lea		_keybdControlCodes,a0
    871 FFFC0690 1230 1000                   		move.b	(a0,d1.w),d1
    872 FFFC0694 6024                        		bra		.0008
    873 FFFC0696                             .0009:
    874 FFFC0696 0802 0000                   		btst	#0,d2					; is it shift down ?
    875 FFFC069A 670C                        		beq  	.0007
    876 FFFC069C 41F9 FFFC 092C              		lea		_shiftedScanCodes,a0
    877 FFFC06A2 1230 1000                   		move.b	(a0,d1.w),d1
    878 FFFC06A6 6012                        		bra		.0008
    879 FFFC06A8                             .0007:
    880 FFFC06A8 41F9 FFFC 082C              		lea		_unshiftedScanCodes,a0
    881 FFFC06AE 1230 1000                   		move.b	(a0,d1.w),d1
    882 FFFC06B2 33FC 0202 FFDC 0600         		move.w	#$0202,leds
    883 FFFC06BA                             .0008:
    884 FFFC06BA 33FC 0303 FFDC 0600         		move.w	#$0303,leds
    885 FFFC06C2 4CDF 010C                   		movem.l	(a7)+,d2/d3/a0
    886 FFFC06C6 4E75                        		rts
    887 FFFC06C8                             .doKeyup:
    888 FFFC06C8 13FC FFFF 0001 0426         		move.b	#-1,_KeyState1
    889 FFFC06D0 6000 FF04                   		bra		.0003
    890 FFFC06D4                             .doExtend:
    891 FFFC06D4 0039 0080 0001 0427         		or.b	#$80,_KeyState2
    892 FFFC06DC 6000 FEF8                   		bra		.0003
    893 FFFC06E0                             .doCtrl:
    894 FFFC06E0 1239 0001 0426              		move.b	_KeyState1,d1
    895 FFFC06E6 4239 0001 0426              		clr.b	_KeyState1
    896 FFFC06EC 4A01                        		tst.b	d1
    897 FFFC06EE 6A0C                        		bpl.s	.0004
    898 FFFC06F0 08B9 0002 0001 0427         		bclr	#2,_KeyState2
    899 FFFC06F8 6000 FEDC                   		bra		.0003
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 16
bootrom.asm
    900 FFFC06FC                             .0004:
    901 FFFC06FC 08F9 0002 0001 0427         		bset	#2,_KeyState2
    902 FFFC0704 6000 FED0                   		bra		.0003
    903 FFFC0708                             .doAlt:
    904 FFFC0708 1239 0001 0426              		move.b	_KeyState1,d1
    905 FFFC070E 4239 0001 0426              		clr.b	_KeyState1
    906 FFFC0714 4A01                        		tst.b	d1
    907 FFFC0716 6A0C                        		bpl		.0011
    908 FFFC0718 08B9 0001 0001 0427         		bclr	#1,_KeyState2
    909 FFFC0720 6000 FEB4                   		bra		.0003
    910 FFFC0724                             .0011:
    911 FFFC0724 08F9 0001 0001 0427         		bset	#1,_KeyState2
    912 FFFC072C 6000 FEA8                   		bra		.0003
    913 FFFC0730                             .doTab:
    914 FFFC0730 2F01                        		move.l	d1,-(a7)
    915 FFFC0732 1239 0001 0427              	    move.b  _KeyState2,d1
    916 FFFC0738 0801 0000                   	    btst	#0,d1                 ; is ALT down ?
    917 FFFC073C 6706                        	    beq     .0012
                                             ;    	inc     _iof_switch
    919 FFFC073E 221F                        	    move.l	(a7)+,d1
    920 FFFC0740 6000 FE94                   	    bra     .0003
    921 FFFC0744                             .0012:
    922 FFFC0744 221F                        	    move.l	(a7)+,d1
    923 FFFC0746 6000 FF12                   	    bra     .0013
    924 FFFC074A                             .doShift:
    925 FFFC074A 1239 0001 0426              		move.b	_KeyState1,d1
    926 FFFC0750 4239 0001 0426              		clr.b	_KeyState1
    927 FFFC0756 4A01                        		tst.b	d1
    928 FFFC0758 6A0C                        		bpl.s	.0005
    929 FFFC075A 08B9 0000 0001 0427         		bclr	#0,_KeyState2
    930 FFFC0762 6000 FE72                   		bra		.0003
    931 FFFC0766                             .0005:
    932 FFFC0766 08F9 0000 0001 0427         		bset	#0,_KeyState2
    933 FFFC076E 6000 FE66                   		bra		.0003
    934 FFFC0772                             .doNumLock:
    935 FFFC0772 0879 0004 0001 0427         		bchg	#4,_KeyState2
    936 FFFC077A 6100 0026                   		bsr		KeybdSetLEDStatus
    937 FFFC077E 6000 FE56                   		bra		.0003
    938 FFFC0782                             .doCapsLock:
    939 FFFC0782 0879 0005 0001 0427         		bchg	#5,_KeyState2
    940 FFFC078A 6100 0016                   		bsr		KeybdSetLEDStatus
    941 FFFC078E 6000 FE46                   		bra		.0003
    942 FFFC0792                             .doScrollLock:
    943 FFFC0792 0879 0006 0001 0427         		bchg	#6,_KeyState2
    944 FFFC079A 6100 0006                   		bsr		KeybdSetLEDStatus
    945 FFFC079E 6000 FE36                   		bra		.0003
                                             
    947 FFFC07A2                             KeybdSetLEDStatus:
    948 FFFC07A2 48E7 3000                   		movem.l	d2/d3,-(a7)
    949 FFFC07A6 4239 0001 0428              		clr.b	KeybdLEDs
    950 FFFC07AC 0839 0004 0001 0427         		btst	#4,_KeyState2
    951 FFFC07B4 6708                        		beq.s	.0002
    952 FFFC07B6 13FC 0002 0001 0428         		move.b	#2,KeybdLEDs
    953 FFFC07BE                             .0002:
    954 FFFC07BE 0839 0005 0001 0427         		btst	#5,_KeyState2
    955 FFFC07C6 6708                        		beq.s	.0003
    956 FFFC07C8 08F9 0002 0001 0428         		bset	#2,KeybdLEDs
    957 FFFC07D0                             .0003:
    958 FFFC07D0 0839 0006 0001 0427         		btst	#6,_KeyState2
    959 FFFC07D8 6708                        		beq.s	.0004
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 17
bootrom.asm
    960 FFFC07DA 08F9 0000 0001 0428         		bset	#0,KeybdLEDs
    961 FFFC07E2                             .0004:
    962 FFFC07E2 123C 00ED                   		move.b	#$ED,d1
    963 FFFC07E6 6100 002C                   		bsr		KeybdSendByte
    964 FFFC07EA 6100 FD80                   		bsr		KeybdWaitTx
    965 FFFC07EE 6100 FD58                   		bsr		KeybdRecvByte
    966 FFFC07F2 4A01                        		tst.b	d1
    967 FFFC07F4 6B18                        		bmi		.0001
    968 FFFC07F6 B2BC 0000 00FA              		cmp		#$FA,d1
    969 FFFC07FC 1239 0001 0428              		move.b	KeybdLEDs,d1
    970 FFFC0802 6100 0010                   		bsr		KeybdSendByte
    971 FFFC0806 6100 FD64                   		bsr		KeybdWaitTx
    972 FFFC080A 6100 FD3C                   		bsr		KeybdRecvByte
    973 FFFC080E                             .0001:
    974 FFFC080E 4CDF 000C                   		movem.l	(a7)+,d2/d3
    975 FFFC0812 4E75                        		rts
                                             
    977 FFFC0814                             KeybdSendByte:
    978 FFFC0814 13C1 FFDC 0000              		move.b	d1,KEYBD
    979 FFFC081A 4E75                        		rts
                                             	
    981 FFFC081C                             Wait10ms:
    982 FFFC081C 2F03                        		move.l	d3,-(a7)
    983 FFFC081E 263C 0000 03E8              		move.l	#1000,d3
    984 FFFC0824                             .0001:
    985 FFFC0824 51CB FFFE                   		dbra	d3,.0001
    986 FFFC0828 261F                        		move.l	(a7)+,d3
    987 FFFC082A 4E75                        		rts
                                             
                                             
                                             ;--------------------------------------------------------------------------
                                             ; PS2 scan codes to ascii conversion tables.
                                             ;--------------------------------------------------------------------------
                                             ;
    994 FFFC082C                             _unshiftedScanCodes:
    995 FFFC082C 2E A9 2E A5 A3 A1 A2 AC     	dc.b	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
                                             
    997 FFFC0834 2E AA A8 A6 A4 09 60 2E     	dc.b	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
                                             
    999 FFFC083C 2E 2E 2E 2E 2E 71 31 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
                                             
   1001 FFFC0844 2E 2E 7A 73 61 77 32 2E     	dc.b	$2e,$2e,$7a,$73,$61,$77,$32,$2e
                                             
   1003 FFFC084C 2E 63 78 64 65 34 33 2E     	dc.b	$2e,$63,$78,$64,$65,$34,$33,$2e
                                             
   1005 FFFC0854 2E 20 76 66 74 72 35 2E     	dc.b	$2e,$20,$76,$66,$74,$72,$35,$2e
                                             
   1007 FFFC085C 2E 6E 62 68 67 79 36 2E     	dc.b	$2e,$6e,$62,$68,$67,$79,$36,$2e
                                             
   1009 FFFC0864 2E 2E 6D 6A 75 37 38 2E     	dc.b	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
                                             
   1011 FFFC086C 2E 2C 6B 69 6F 30 39 2E     	dc.b	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
                                             
   1013 FFFC0874 2E 2E 2F 6C 3B 70 2D 2E     	dc.b	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
                                             
   1015 FFFC087C 2E 2E 27 2E 5B 3D 2E 2E     	dc.b	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
                                             
   1017 FFFC0884 AD 2E 0D 5D 2E 5C 2E 2E     	dc.b	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
                                             
   1019 FFFC088C 2E 2E 2E 2E 2E 2E 08 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 18
bootrom.asm
                                             
   1021 FFFC0894 2E 95 2E 93 94 2E 2E 2E     	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
                                             
   1023 FFFC089C 98 7F 92 2E 91 90 1B AF     	dc.b	$98,$7f,$92,$2e,$91,$90,$1b,$af
                                             
   1025 FFFC08A4 AB 2E 97 2E 2E 96 AE 2E     	dc.b	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
                                             
                                             
   1028 FFFC08AC 2E 2E 2E A7 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
                                             
   1030 FFFC08B4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1032 FFFC08BC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1034 FFFC08C4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1036 FFFC08CC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1038 FFFC08D4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1040 FFFC08DC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1042 FFFC08E4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1044 FFFC08EC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1046 FFFC08F4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1048 FFFC08FC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1050 FFFC0904 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1052 FFFC090C 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1054 FFFC0914 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1056 FFFC091C 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1058 FFFC0924 2E 2E FA 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
                                             
                                             
   1061 FFFC092C                             _shiftedScanCodes:
   1062 FFFC092C 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1064 FFFC0934 2E 2E 2E 2E 2E 09 7E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
                                             
   1066 FFFC093C 2E 2E 2E 2E 2E 51 21 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
                                             
   1068 FFFC0944 2E 2E 5A 53 41 57 40 2E     	dc.b	$2e,$2e,$5a,$53,$41,$57,$40,$2e
                                             
   1070 FFFC094C 2E 43 58 44 45 24 23 2E     	dc.b	$2e,$43,$58,$44,$45,$24,$23,$2e
                                             
   1072 FFFC0954 2E 20 56 46 54 52 25 2E     	dc.b	$2e,$20,$56,$46,$54,$52,$25,$2e
                                             
   1074 FFFC095C 2E 4E 42 48 47 59 5E 2E     	dc.b	$2e,$4e,$42,$48,$47,$59,$5e,$2e
                                             
   1076 FFFC0964 2E 2E 4D 4A 55 26 2A 2E     	dc.b	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
                                             
   1078 FFFC096C 2E 3C 4B 49 4F 29 28 2E     	dc.b	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
                                             
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 19
bootrom.asm
   1080 FFFC0974 2E 3E 3F 4C 3A 50 5F 2E     	dc.b	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
                                             
   1082 FFFC097C 2E 2E 22 2E 7B 2B 2E 2E     	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
                                             
   1084 FFFC0984 2E 2E 0D 7D 2E 7C 2E 2E     	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
                                             
   1086 FFFC098C 2E 2E 2E 2E 2E 2E 08 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                             
   1088 FFFC0994 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1090 FFFC099C 2E 7F 2E 2E 2E 2E 1B 2E     	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
                                             
   1092 FFFC09A4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
                                             
   1095 FFFC09AC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1097 FFFC09B4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1099 FFFC09BC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1101 FFFC09C4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1103 FFFC09CC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1105 FFFC09D4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1107 FFFC09DC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1109 FFFC09E4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1111 FFFC09EC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1113 FFFC09F4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1115 FFFC09FC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1117 FFFC0A04 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1119 FFFC0A0C 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1121 FFFC0A14 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1123 FFFC0A1C 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1125 FFFC0A24 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
                                             
                                             ; control
   1129 FFFC0A2C                             _keybdControlCodes:
   1130 FFFC0A2C 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1132 FFFC0A34 2E 2E 2E 2E 2E 09 7E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
                                             
   1134 FFFC0A3C 2E 2E 2E 2E 2E 11 21 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
                                             
   1136 FFFC0A44 2E 2E 1A 13 01 17 40 2E     	dc.b	$2e,$2e,$1a,$13,$01,$17,$40,$2e
                                             
   1138 FFFC0A4C 2E 03 18 04 05 24 23 2E     	dc.b	$2e,$03,$18,$04,$05,$24,$23,$2e
                                             
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 20
bootrom.asm
   1140 FFFC0A54 2E 20 16 06 14 12 25 2E     	dc.b	$2e,$20,$16,$06,$14,$12,$25,$2e
                                             
   1142 FFFC0A5C 2E 0E 02 08 07 19 5E 2E     	dc.b	$2e,$0e,$02,$08,$07,$19,$5e,$2e
                                             
   1144 FFFC0A64 2E 2E 0D 0A 15 26 2A 2E     	dc.b	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
                                             
   1146 FFFC0A6C 2E 3C 0B 09 0F 29 28 2E     	dc.b	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
                                             
   1148 FFFC0A74 2E 3E 3F 0C 3A 10 5F 2E     	dc.b	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
                                             
   1150 FFFC0A7C 2E 2E 22 2E 7B 2B 2E 2E     	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
                                             
   1152 FFFC0A84 2E 2E 0D 7D 2E 7C 2E 2E     	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
                                             
   1154 FFFC0A8C 2E 2E 2E 2E 2E 2E 08 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                             
   1156 FFFC0A94 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1158 FFFC0A9C 2E 7F 2E 2E 2E 2E 1B 2E     	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
                                             
   1160 FFFC0AA4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
                                             
   1163 FFFC0AAC                             _keybdExtendedCodes:
   1164 FFFC0AAC 2E 2E 2E 2E A3 A1 A2 2E     	dc.b	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
                                             
   1166 FFFC0AB4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1168 FFFC0ABC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1170 FFFC0AC4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1172 FFFC0ACC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1174 FFFC0AD4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1176 FFFC0ADC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1178 FFFC0AE4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1180 FFFC0AEC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1182 FFFC0AF4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1184 FFFC0AFC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1186 FFFC0B04 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1188 FFFC0B0C 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1190 FFFC0B14 2E 95 2E 93 94 2E 2E 2E     	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
                                             
   1192 FFFC0B1C 98 99 92 2E 91 90 2E 2E     	dc.b	$98,$99,$92,$2e,$91,$90,$2e,$2e
                                             
   1194 FFFC0B24 2E 2E 97 2E 2E 96 2E 2E     	dc.b	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
                                             
                                             
                                             
                                             ;==============================================================================
                                             ; Monitor
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 21
bootrom.asm
                                             ;==============================================================================
                                             ;
   1202 FFFC0B2C                             StartMon:
   1203 FFFC0B2C                             Monitor:
                                             ;	lea		STACK,a7		; reset the stack pointer
   1205 FFFC0B2C 4239 0001 0424              		clr.b	KeybdEcho		; turn off keyboard echo
   1206 FFFC0B32                             PromptLn:
   1207 FFFC0B32 6100 F5B4                   		bsr		CRLF
   1208 FFFC0B36 123C 0024                   		move.b	#'$',d1
   1209 FFFC0B3A 6100 F5F6                   		bsr		DisplayChar
                                             
                                             ; Get characters until a CR is keyed
                                             ;
   1213 FFFC0B3E                             Prompt3:
   1214 FFFC0B3E 6100 FA66                   		bsr		GetKey
   1215 FFFC0B42 0C01 000D                   		cmpi.b	#CR,d1
   1216 FFFC0B46 6706                        		beq.s	Prompt1
   1217 FFFC0B48 6100 F5E8                   		bsr		DisplayChar
   1218 FFFC0B4C 60F0                        		bra.s	Prompt3
                                             
                                             ; Process the screen line that the CR was keyed on
                                             ;
   1222 FFFC0B4E                             Prompt1:
   1223 FFFC0B4E 4239 0001 0419              		clr.b	CursorCol		; go back to the start of the line
   1224 FFFC0B54 6100 F5AC                   		bsr		CalcScreenLoc	; a0 = screen memory location
   1225 FFFC0B58 1218                        		move.b	(a0)+,d1
                                             		;bsr		ScreenToAscii
   1227 FFFC0B5A 0C01 0024                   		cmpi.b	#'$',d1			; skip over '$' prompt character
   1228 FFFC0B5E 6602                        		bne.s	Prompt2
   1229 FFFC0B60 1218                        		move.b	(a0)+,d1
                                             		;bsr		ScreenToAscii
                                             	
                                             ; Dispatch based on command character
                                             ;
   1234 FFFC0B62                             Prompt2:
   1235 FFFC0B62 0C01 003A                   		cmpi.b	#':',d1			; $: - edit memory
   1236 FFFC0B66 6700 0154                   		beq		EditMem
   1237 FFFC0B6A 0C01 0044                   		cmpi.b	#'D',d1			; $D - dump memory
   1238 FFFC0B6E 6700 01BA                   		beq		DumpMem
   1239 FFFC0B72 0C01 0046                   		cmpi.b	#'F',d1
   1240 FFFC0B76 6700 00EE                   		beq		FillMem
   1241 FFFC0B7A 0C01 0042                   		cmpi.b	#'B',d1			; $B - start tiny basic
   1242 FFFC0B7E 6700 FFFF                   		beq		START
   1243 FFFC0B82 0C01 004A                   		cmpi.b	#'J',d1			; $J - execute code
   1244 FFFC0B86 6700 0192                   		beq		ExecuteCode
   1245 FFFC0B8A 0C01 004C                   		cmpi.b	#'L',d1			; $L - load S19 file
   1246 FFFC0B8E 6700 032A                   		beq		LoadS19
   1247 FFFC0B92 0C01 003F                   		cmpi.b	#'?',d1			; $? - display help
   1248 FFFC0B96 6722                        		beq		DisplayHelp
   1249 FFFC0B98 0C01 0043                   		cmpi.b	#'C',d1			; $C - clear screen
   1250 FFFC0B9C 6702                        		beq		TestCLS
   1251 FFFC0B9E 608C                        		bra		Monitor
                                             
   1253 FFFC0BA0                             TestCLS:
   1254 FFFC0BA0 1218                        		move.b	(a0)+,d1
   1255 FFFC0BA2 0C01 004C                   		cmpi.b	#'L',d1
   1256 FFFC0BA6 6684                        		bne		Monitor
   1257 FFFC0BA8 1218                        		move.b	(a0)+,d1
   1258 FFFC0BAA 0C01 0053                   		cmpi.b	#'S',d1
   1259 FFFC0BAE 6600 FF7C                   		bne		Monitor
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 22
bootrom.asm
   1260 FFFC0BB2 6100 0216                   		bsr		ClearScreen
   1261 FFFC0BB6 6000 FF74                   		bra		Monitor
                                             	
   1263 FFFC0BBA                             DisplayHelp:
   1264 FFFC0BBA 43F9 FFFC 0BCA              		lea		HelpMsg,a1
   1265 FFFC0BC0 4EB9 FFFC 02A2              		jsr		DisplayString
   1266 FFFC0BC6 6000 FF64                   		bra		Monitor
                                             
   1268 FFFC0BCA                             HelpMsg:
   1269 FFFC0BCA 3F 20 3D 20 44 69 73 70     		dc.b	"? = Display help",CR,LF
   1270 FFFC0BD2 6C 61 79 20 68 65 6C 70     
   1271 FFFC0BDA 0D 0A                       
   1272 FFFC0BDC 43 4C 53 20 3D 20 63 6C     		dc.b	"CLS = clear screen",CR,LF
   1273 FFFC0BE4 65 61 72 20 73 63 72 65     
   1274 FFFC0BEC 65 6E 0D 0A                 
   1275 FFFC0BF0 3A 20 3D 20 45 64 69 74     		dc.b	": = Edit memory bytes",CR,LF
   1276 FFFC0BF8 20 6D 65 6D 6F 72 79 20     
   1277 FFFC0C00 62 79 74 65 73 0D 0A        
   1278 FFFC0C07 46 20 3D 20 46 69 6C 6C     		dc.b	"F = Fill memory",CR,LF
   1279 FFFC0C0F 20 6D 65 6D 6F 72 79 0D     
   1280 FFFC0C17 0A                          
   1281 FFFC0C18 4C 20 3D 20 4C 6F 61 64     		dc.b	"L = Load S19 file",CR,LF
   1282 FFFC0C20 20 53 31 39 20 66 69 6C     
   1283 FFFC0C28 65 0D 0A                    
   1284 FFFC0C2B 44 20 3D 20 44 75 6D 70     		dc.b	"D = Dump memory",CR,LF
   1285 FFFC0C33 20 6D 65 6D 6F 72 79 0D     
   1286 FFFC0C3B 0A                          
   1287 FFFC0C3C 42 20 3D 20 73 74 61 72     		dc.b	"B = start tiny basic",CR,LF
   1288 FFFC0C44 74 20 74 69 6E 79 20 62     
   1289 FFFC0C4C 61 73 69 63 0D 0A           
   1290 FFFC0C52 4A 20 3D 20 4A 75 6D 70     		dc.b	"J = Jump to code",CR,LF,0
   1291 FFFC0C5A 20 74 6F 20 63 6F 64 65     
   1292 FFFC0C62 0D 0A 00                    
   1293 FFFC0C65 FF                         		even
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Fill memory
                                             ; FB = fill bytes		FB 00000010 100 FF	; fill starting at 10 for 256 bytes
                                             ; FW = fill words
                                             ; FL = fill longs
                                             ; F = fill bytes
                                             ;------------------------------------------------------------------------------
                                             ;
   1303 FFFC0C66                             FillMem:
   1304 FFFC0C66 1218                        		move.b	(a0)+,d1
                                             		;bsr		ScreenToAscii
   1306 FFFC0C68 1801                        		move.b	d1,d4			; d4 = fill size
   1307 FFFC0C6A 6100 0044                   		bsr		ignBlanks
   1308 FFFC0C6E 6100 00EE                   		bsr		GetHexNumber
   1309 FFFC0C72 2241                        		move.l	d1,a1			; a1 = start
   1310 FFFC0C74 6100 003A                   		bsr		ignBlanks
   1311 FFFC0C78 6100 00E4                   		bsr		GetHexNumber
   1312 FFFC0C7C 2601                        		move.l	d1,d3			; d3 = count
   1313 FFFC0C7E 6100 0030                   		bsr		ignBlanks
   1314 FFFC0C82 6100 00DA                   		bsr		GetHexNumber	; fill value
   1315 FFFC0C86 0C04 004C                   		cmpi.b	#'L',d4
   1316 FFFC0C8A 660A                        		bne		fmem1
   1317 FFFC0C8C                             fmemL:
   1318 FFFC0C8C 22C1                        		move.l	d1,(a1)+
   1319 FFFC0C8E 51CB FFFC                   		dbra	d3,fmemL
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 23
bootrom.asm
   1320 FFFC0C92 6000 FE98                   		bra		Monitor
   1321 FFFC0C96                             fmem1
   1322 FFFC0C96 0C04 0057                   		cmpi.b	#'W',d4
   1323 FFFC0C9A 660A                        		bne		fmemB
   1324 FFFC0C9C                             fmemW:
   1325 FFFC0C9C 32C1                        		move.w	d1,(a1)+
   1326 FFFC0C9E 51CB FFFC                   		dbra	d3,fmemW
   1327 FFFC0CA2 6000 FE88                   		bra		Monitor
   1328 FFFC0CA6                             fmemB:
   1329 FFFC0CA6 12C1                        		move.b	d1,(a1)+
   1330 FFFC0CA8 51CB FFFC                   		dbra	d3,fmemB
   1331 FFFC0CAC 6000 FE7E                   		bra		Monitor
                                             
                                             ;------------------------------------------------------------------------------
                                             ;------------------------------------------------------------------------------
                                             ;
   1336 FFFC0CB0                             ignBlanks:
   1337 FFFC0CB0 1218                        		move.b	(a0)+,d1
   1338 FFFC0CB2 0C01 0020                   		cmpi.b	#' ',d1
   1339 FFFC0CB6 67F8                        		beq		ignBlanks
   1340 FFFC0CB8 5388                        		subq	#1,a0
   1341 FFFC0CBA 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Edit memory byte.
                                             ;------------------------------------------------------------------------------
                                             ;
   1347 FFFC0CBC                             EditMem:
   1348 FFFC0CBC 6100 FFF2                   		bsr		ignBlanks
   1349 FFFC0CC0 6100 009C                   		bsr		GetHexNumber
   1350 FFFC0CC4 2241                        		move.l	d1,a1
   1351 FFFC0CC6                             edtmem1:
   1352 FFFC0CC6 6100 FFE8                   		bsr		ignBlanks
   1353 FFFC0CCA 6100 0092                   		bsr		GetHexNumber
   1354 FFFC0CCE 12C1                        		move.b	d1,(a1)+
   1355 FFFC0CD0 6100 FFDE                   		bsr		ignBlanks
   1356 FFFC0CD4 6100 0088                   		bsr		GetHexNumber
   1357 FFFC0CD8 12C1                        		move.b	d1,(a1)+
   1358 FFFC0CDA 6100 FFD4                   		bsr		ignBlanks
   1359 FFFC0CDE 6100 007E                   		bsr		GetHexNumber
   1360 FFFC0CE2 12C1                        		move.b	d1,(a1)+
   1361 FFFC0CE4 6100 FFCA                   		bsr		ignBlanks
   1362 FFFC0CE8 6100 0074                   		bsr		GetHexNumber
   1363 FFFC0CEC 12C1                        		move.b	d1,(a1)+
   1364 FFFC0CEE 6100 FFC0                   		bsr		ignBlanks
   1365 FFFC0CF2 6100 006A                   		bsr		GetHexNumber
   1366 FFFC0CF6 12C1                        		move.b	d1,(a1)+
   1367 FFFC0CF8 6100 FFB6                   		bsr		ignBlanks
   1368 FFFC0CFC 6100 0060                   		bsr		GetHexNumber
   1369 FFFC0D00 12C1                        		move.b	d1,(a1)+
   1370 FFFC0D02 6100 FFAC                   		bsr		ignBlanks
   1371 FFFC0D06 6100 0056                   		bsr		GetHexNumber
   1372 FFFC0D0A 12C1                        		move.b	d1,(a1)+
   1373 FFFC0D0C 6100 FFA2                   		bsr		ignBlanks
   1374 FFFC0D10 6100 004C                   		bsr		GetHexNumber
   1375 FFFC0D14 12C1                        		move.b	d1,(a1)+
   1376 FFFC0D16 6000 FE14                   		bra		Monitor
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Execute code at the specified address.
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 24
bootrom.asm
                                             ;------------------------------------------------------------------------------
                                             ;
   1382 FFFC0D1A                             ExecuteCode:
   1383 FFFC0D1A 6100 FF94                   		bsr		ignBlanks
   1384 FFFC0D1E 6100 003E                   		bsr		GetHexNumber
   1385 FFFC0D22 2041                        		move.l	d1,a0
   1386 FFFC0D24 4E90                        		jsr		(a0)
   1387 FFFC0D26 6000 FE04                   		bra     Monitor
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Do a memory dump of the requested location.
                                             ;------------------------------------------------------------------------------
                                             ;
   1393 FFFC0D2A                             DumpMem:
   1394 FFFC0D2A 6100 FF84                   		bsr		ignBlanks
   1395 FFFC0D2E 6100 002E                   		bsr		GetHexNumber
   1396 FFFC0D32                             DumpMem1:
   1397 FFFC0D32 2041                        		move.l	d1,a0
   1398 FFFC0D34 4EB9 FFFC 00E8              		jsr		CRLF
   1399 FFFC0D3A 6100 F7C2                   		bsr		DisplayMem
   1400 FFFC0D3E 6100 F7BE                   		bsr		DisplayMem
   1401 FFFC0D42 6100 F7BA                   		bsr		DisplayMem
   1402 FFFC0D46 6100 F7B6                   		bsr		DisplayMem
   1403 FFFC0D4A 6100 F7B2                   		bsr		DisplayMem
   1404 FFFC0D4E 6100 F7AE                   		bsr		DisplayMem
   1405 FFFC0D52 6100 F7AA                   		bsr		DisplayMem
   1406 FFFC0D56 6100 F7A6                   		bsr		DisplayMem
   1407 FFFC0D5A 6000 FDD0                   		bra		Monitor
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Get a hexidecimal number. Maximum of eight digits.
                                             ;------------------------------------------------------------------------------
                                             ;
   1413 FFFC0D5E                             GetHexNumber:
   1414 FFFC0D5E 48E7 A000                   		movem.l	d0/d2,-(a7)
   1415 FFFC0D62 4282                        		clr.l	d2
   1416 FFFC0D64 7007                        		moveq	#7,d0
   1417 FFFC0D66                             gthxn2:
   1418 FFFC0D66 1218                        		move.b	(a0)+,d1
   1419 FFFC0D68 6100 001E                   		bsr		AsciiToHexNybble
   1420 FFFC0D6C B23C 00FF                   		cmp.b	#0xff,d1
   1421 FFFC0D70 670E                        		beq		gthxn1
   1422 FFFC0D72 E98A                        		lsl.l	#4,d2
   1423 FFFC0D74 0281 0000 000F              		andi.l	#0x0f,d1
   1424 FFFC0D7A 8481                        		or.l	d1,d2
   1425 FFFC0D7C 51C8 FFE8                   		dbra	d0,gthxn2
   1426 FFFC0D80                             gthxn1:
   1427 FFFC0D80 2202                        		move.l	d2,d1
   1428 FFFC0D82 4CDF 0005                   		movem.l	(a7)+,d0/d2
   1429 FFFC0D86 4E75                        		rts	
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Convert ASCII character in the range '0' to '9', 'a' tr 'f' or 'A' to 'F'
                                             ; to a hex nybble.
                                             ;------------------------------------------------------------------------------
                                             ;
   1436 FFFC0D88                             AsciiToHexNybble:
   1437 FFFC0D88 0C01 0030                   		cmpi.b	#'0',d1
   1438 FFFC0D8C 6538                        		blo.s	gthx3
   1439 FFFC0D8E 0C01 0039                   		cmpi.b	#'9',d1
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 25
bootrom.asm
   1440 FFFC0D92 6206                        		bhi.s	gthx5
   1441 FFFC0D94 0401 0030                   		subi.b	#'0',d1
   1442 FFFC0D98 4E75                        		rts
   1443 FFFC0D9A                             gthx5:
   1444 FFFC0D9A 0C01 0041                   		cmpi.b	#'A',d1
   1445 FFFC0D9E 6526                        		blo.s	gthx3
   1446 FFFC0DA0 0C01 0046                   		cmpi.b	#'F',d1
   1447 FFFC0DA4 620A                        		bhi.s	gthx6
   1448 FFFC0DA6 0401 0041                   		subi.b	#'A',d1
   1449 FFFC0DAA 0601 000A                   		addi.b	#10,d1
   1450 FFFC0DAE 4E75                        		rts
   1451 FFFC0DB0                             gthx6:
   1452 FFFC0DB0 0C01 0061                   		cmpi.b	#'a',d1
   1453 FFFC0DB4 6510                        		blo.s	gthx3
   1454 FFFC0DB6 0C01 0066                   		cmpi.b	#'f',d1
   1455 FFFC0DBA 620A                        		bhi.s	gthx3
   1456 FFFC0DBC 0401 0061                   		subi.b	#'a',d1
   1457 FFFC0DC0 0601 000A                   		addi.b	#10,d1
   1458 FFFC0DC4 4E75                        		rts
   1459 FFFC0DC6                             gthx3:
   1460 FFFC0DC6 72FF                        		moveq	#-1,d1		; not a hex number
   1461 FFFC0DC8 4E75                        		rts
                                             
                                             ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                             ; The fast way to clear the screen. Uses the blitter.
                                             ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                             
   1467 FFFC0DCA                             ClearScreen:
   1468 FFFC0DCA 4BF9 FFE0 0000              		lea		VDGREG,a5
   1469 FFFC0DD0                             .0003:								
   1470 FFFC0DD0 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   1471 FFFC0DD4 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   1472 FFFC0DD8 67F6                        		beq.s	.0003				; branch if not done
   1473 FFFC0DDA 2B7C 0001 4000 04BC         		move.l	#320*256,$4BC(a5)		; set transfer count  pixels
   1474 FFFC0DE2 3B7C 000F 04A8              		move.w	#DARK_BLUE,$4A8(a5)	; set color dark blue
   1475 FFFC0DE8 2B7C 0000 0000 0498         		move.l	#0,$498(a5)			; set destination address
   1476 FFFC0DF0 2B7C 0000 013F 04A4         		move.l	#319,$4A4(a5)		; set destination width
   1477 FFFC0DF8 2B7C 0000 0000 049C         		move.l	#0,$49C(a5)			; set dst modulo
   1478 FFFC0E00 3B7C 8080 04AC              		move.w	#%1000000010000000,$4AC(a5)		; enable channel D, start transfer
   1479 FFFC0E06 4E75                        		rts
                                             
   1481 FFFC0E08                             ScrollUp:
   1482 FFFC0E08 48E7 8004                   		movem.l	d0/a5,-(a7)
   1483 FFFC0E0C 4BF9 FFE0 0000              		lea		VDGREG,a5
   1484 FFFC0E12                             .0003:								
   1485 FFFC0E12 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   1486 FFFC0E16 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   1487 FFFC0E1A 67F6                        		beq.s	.0003				; branch if not done
   1488 FFFC0E1C 2B7C 0001 3600 04BC         		move.l	#320*248,$4BC(a5)		; set transfer count  pixels
                                             		; Channel A
   1490 FFFC0E24 2B7C 0001 3600 04B0         		move.l	#320*248,$4B0(a5)	; set source transfer count pixels
   1491 FFFC0E2C 2B7C 0000 0A00 0480         		move.l	#320*8,$480(a5)		; set source bitmap address (address in graphics mem)
   1492 FFFC0E34 2B7C 0000 0000 0484         		move.l	#0,$484(a5)			; set src modulo
                                             		; Channel D
   1494 FFFC0E3C 2B7C 0001 3600 04BC         		move.l	#320*248,$4BC(a5)	; set destination transfer count pixels
   1495 FFFC0E44 2B7C 0000 0000 0498         		move.l	#0,$498(a5)			; set destination address
   1496 FFFC0E4C 2B7C 0000 0000 049C         		move.l	#0,$49C(a5)			; set dst modulo
                                             
   1498 FFFC0E54 2B7C 0000 013F 04A0         		move.l	#319,$4A0(a5)		; set source width
   1499 FFFC0E5C 2B7C 0000 013F 04A4         		move.l	#319,$4A4(a5)		; set destination width
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 26
bootrom.asm
   1500 FFFC0E64 3B7C 0011 04AE              		move.w	#$11,$4AE(a5)		; set op A ($11 = copy A)
   1501 FFFC0E6A 3B7C 8082 04AC              		move.w	#%1000000010000010,$4AC(a5)		; enable channel A,C,D, start transfer
   1502 FFFC0E70 4CDF 2001                   		movem.l	(a7)+,d0/a5
                                             
   1504 FFFC0E74                             BlankLastLine:
   1505 FFFC0E74 48E7 8004                   		movem.l	d0/a5,-(a7)
                                             		; Channel D
   1507 FFFC0E78 4BF9 FFE0 0000              		lea		VDGREG,a5
   1508 FFFC0E7E                             .0003:								
   1509 FFFC0E7E 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   1510 FFFC0E82 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   1511 FFFC0E86 67F6                        		beq.s	.0003				; branch if not done
   1512 FFFC0E88 2B7C 0000 0A00 04BC         		move.l	#320*8,$4BC(a5)		; set destination transfer count pixels
   1513 FFFC0E90 2B7C 0001 3600 0498         		move.l	#320*248,$498(a5)	; set destination address
   1514 FFFC0E98 2B7C 0000 0000 049C         		move.l	#0,$49C(a5)			; set dst modulo
   1515 FFFC0EA0 2B7C 0000 013F 04A4         		move.l	#319,$4A4(a5)		; set destination width
   1516 FFFC0EA8 3B7C 000F 04A8              		move.w	#DARK_BLUE,$4A8(a5)	; set color dark blue
   1517 FFFC0EAE 3B7C 8080 04AC              		move.w	#%1000000010000000,$4AC(a5)		; enable channel D, start transfer
   1518 FFFC0EB4 4CDF 2001                   		movem.l	(a7)+,d0/a5
   1519 FFFC0EB8 4E75                        		rts
                                             
                                             ;==============================================================================
                                             ; Load an S19 format file
                                             ;==============================================================================
                                             ;
   1525 FFFC0EBA                             LoadS19:
   1526 FFFC0EBA 600A                        	bra		ProcessRec
   1527 FFFC0EBC                             NextRec:
   1528 FFFC0EBC 6100 017A                   	bsr		sGetChar
   1529 FFFC0EC0 0C00 000A                   	cmpi.b	#LF,d0
   1530 FFFC0EC4 66F6                        	bne		NextRec
   1531 FFFC0EC6                             ProcessRec
   1532 FFFC0EC6 6100 0170                   	bsr		sGetChar
   1533 FFFC0ECA 1800                        	move.b	d0,d4
   1534 FFFC0ECC 0C04 001A                   	cmpi.b	#26,d4		; CTRL-Z ?
   1535 FFFC0ED0 6700 FC5A                   	beq		Monitor
   1536 FFFC0ED4 0C04 0053                   	cmpi.b	#'S',d4
   1537 FFFC0ED8 66E2                        	bne		NextRec
   1538 FFFC0EDA 6100 015C                   	bsr		sGetChar
   1539 FFFC0EDE 1800                        	move.b	d0,d4
   1540 FFFC0EE0 0C04 0030                   	cmpi.b	#'0',d4
   1541 FFFC0EE4 65D6                        	blo		NextRec
   1542 FFFC0EE6 0C04 0039                   	cmpi.b	#'9',d4		; d4 = record type
   1543 FFFC0EEA 62D0                        	bhi		NextRec
   1544 FFFC0EEC 6100 014A                   	bsr		sGetChar
   1545 FFFC0EF0 6100 FE96                   	bsr		AsciiToHexNybble
   1546 FFFC0EF4 1401                        	move.b	d1,d2
   1547 FFFC0EF6 6100 0140                   	bsr		sGetChar
   1548 FFFC0EFA 6100 FE8C                   	bsr		AsciiToHexNybble
   1549 FFFC0EFE E90A                        	lsl.b	#4,d2
   1550 FFFC0F00 8202                        	or.b	d2,d1		; d1 = byte count
   1551 FFFC0F02 1601                        	move.b	d1,d3		; d3 = byte count
   1552 FFFC0F04 0C04 0030                   	cmpi.b	#'0',d4		; manufacturer ID record, ignore
   1553 FFFC0F08 67B2                        	beq		NextRec
   1554 FFFC0F0A 0C04 0031                   	cmpi.b	#'1',d4
   1555 FFFC0F0E 676A                        	beq		ProcessS1
   1556 FFFC0F10 0C04 0032                   	cmpi.b	#'2',d4
   1557 FFFC0F14 676A                        	beq		ProcessS2
   1558 FFFC0F16 0C04 0033                   	cmpi.b	#'3',d4
   1559 FFFC0F1A 676A                        	beq		ProcessS3
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 27
bootrom.asm
   1560 FFFC0F1C 0C04 0035                   	cmpi.b	#'5',d4		; record count record, ignore
   1561 FFFC0F20 679A                        	beq		NextRec
   1562 FFFC0F22 0C04 0037                   	cmpi.b	#'7',d4
   1563 FFFC0F26 6764                        	beq		ProcessS7
   1564 FFFC0F28 0C04 0038                   	cmpi.b	#'8',d4
   1565 FFFC0F2C 676C                        	beq		ProcessS8
   1566 FFFC0F2E 0C04 0039                   	cmpi.b	#'9',d4
   1567 FFFC0F32 6774                        	beq		ProcessS9
   1568 FFFC0F34 6086                        	bra		NextRec
                                             
   1570 FFFC0F36                             pcssxa
   1571 FFFC0F36 0243 00FF                   	andi.w	#0xff,d3
   1572 FFFC0F3A 5343                        	subi.w	#1,d3			; one less for dbra
   1573 FFFC0F3C                             pcss1a
   1574 FFFC0F3C 4282                        	clr.l	d2
   1575 FFFC0F3E 6100 00F8                   	bsr		sGetChar
   1576 FFFC0F42 6100 FE44                   	bsr		AsciiToHexNybble
   1577 FFFC0F46 E98A                        	lsl.l	#4,d2
   1578 FFFC0F48 8401                        	or.b	d1,d2
   1579 FFFC0F4A 6100 00EC                   	bsr		sGetChar
   1580 FFFC0F4E 6100 FE38                   	bsr		AsciiToHexNybble
   1581 FFFC0F52 E98A                        	lsl.l	#4,d2
   1582 FFFC0F54 8401                        	or.b	d1,d2
   1583 FFFC0F56 12C2                        	move.b	d2,(a1)+
   1584 FFFC0F58 51CB FFE2                   	dbra	d3,pcss1a
                                             ; Get the checksum byte
   1586 FFFC0F5C 4282                        	clr.l	d2
   1587 FFFC0F5E 6100 00D8                   	bsr		sGetChar
   1588 FFFC0F62 6100 FE24                   	bsr		AsciiToHexNybble
   1589 FFFC0F66 E98A                        	lsl.l	#4,d2
   1590 FFFC0F68 8401                        	or.b	d1,d2
   1591 FFFC0F6A 6100 00CC                   	bsr		sGetChar
   1592 FFFC0F6E 6100 FE18                   	bsr		AsciiToHexNybble
   1593 FFFC0F72 E98A                        	lsl.l	#4,d2
   1594 FFFC0F74 8401                        	or.b	d1,d2
   1595 FFFC0F76 6000 FF44                   	bra		NextRec
                                             
   1597 FFFC0F7A                             ProcessS1:
   1598 FFFC0F7A 6100 003A                   	bsr		S19Get16BitAddress
   1599 FFFC0F7E 60B6                        	bra		pcssxa
   1600 FFFC0F80                             ProcessS2:
   1601 FFFC0F80 6100 0042                   	bsr		S19Get24BitAddress
   1602 FFFC0F84 60B0                        	bra		pcssxa
   1603 FFFC0F86                             ProcessS3:
   1604 FFFC0F86 6100 004A                   	bsr		S19Get32BitAddress
   1605 FFFC0F8A 60AA                        	bra		pcssxa
   1606 FFFC0F8C                             ProcessS7:
   1607 FFFC0F8C 6100 0044                   	bsr		S19Get32BitAddress
   1608 FFFC0F90 23C9 0000 0000              	move.l	a1,S19StartAddress
   1609 FFFC0F96 6000 FB94                   	bra		Monitor
   1610 FFFC0F9A                             ProcessS8:
   1611 FFFC0F9A 6100 0028                   	bsr		S19Get24BitAddress
   1612 FFFC0F9E 23C9 0000 0000              	move.l	a1,S19StartAddress
   1613 FFFC0FA4 6000 FB86                   	bra		Monitor
   1614 FFFC0FA8                             ProcessS9:
   1615 FFFC0FA8 6100 000C                   	bsr		S19Get16BitAddress
   1616 FFFC0FAC 23C9 0000 0000              	move.l	a1,S19StartAddress
   1617 FFFC0FB2 6000 FB78                   	bra		Monitor
                                             
   1619 FFFC0FB6                             S19Get16BitAddress:
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 28
bootrom.asm
   1620 FFFC0FB6 4282                        	clr.l	d2
   1621 FFFC0FB8 6100 007E                   	bsr		sGetChar
   1622 FFFC0FBC 6100 FDCA                   	bsr		AsciiToHexNybble
   1623 FFFC0FC0 1401                        	move.b	d1,d2
   1624 FFFC0FC2 604A                        	bra		S1932b
                                             
   1626 FFFC0FC4                             S19Get24BitAddress:
   1627 FFFC0FC4 4282                        	clr.l	d2
   1628 FFFC0FC6 6100 0070                   	bsr		sGetChar
   1629 FFFC0FCA 6100 FDBC                   	bsr		AsciiToHexNybble
   1630 FFFC0FCE 1401                        	move.b	d1,d2
   1631 FFFC0FD0 6024                        	bra		S1932a
                                             
   1633 FFFC0FD2                             S19Get32BitAddress:
   1634 FFFC0FD2 4282                        	clr.l	d2
   1635 FFFC0FD4 6100 0062                   	bsr		sGetChar
   1636 FFFC0FD8 6100 FDAE                   	bsr		AsciiToHexNybble
   1637 FFFC0FDC 1401                        	move.b	d1,d2
   1638 FFFC0FDE 6100 0058                   	bsr		sGetChar
   1639 FFFC0FE2 6100 FDA4                   	bsr		AsciiToHexNybble
   1640 FFFC0FE6 E98A                        	lsl.l	#4,d2
   1641 FFFC0FE8 8401                        	or.b	d1,d2
   1642 FFFC0FEA 6100 004C                   	bsr		sGetChar
   1643 FFFC0FEE 6100 FD98                   	bsr		AsciiToHexNybble
   1644 FFFC0FF2 E98A                        	lsl.l	#4,d2
   1645 FFFC0FF4 8401                        	or.b	d1,d2
   1646 FFFC0FF6                             S1932a:
   1647 FFFC0FF6 6100 0040                   	bsr		sGetChar
   1648 FFFC0FFA 6100 FD8C                   	bsr		AsciiToHexNybble
   1649 FFFC0FFE E98A                        	lsl.l	#4,d2
   1650 FFFC1000 8401                        	or.b	d1,d2
   1651 FFFC1002 6100 0034                   	bsr		sGetChar
   1652 FFFC1006 6100 FD80                   	bsr		AsciiToHexNybble
   1653 FFFC100A E98A                        	lsl.l	#4,d2
   1654 FFFC100C 8401                        	or.b	d1,d2
   1655 FFFC100E                             S1932b:
   1656 FFFC100E 6100 0028                   	bsr		sGetChar
   1657 FFFC1012 6100 FD74                   	bsr		AsciiToHexNybble
   1658 FFFC1016 E98A                        	lsl.l	#4,d2
   1659 FFFC1018 8401                        	or.b	d1,d2
   1660 FFFC101A 6100 001C                   	bsr		sGetChar
   1661 FFFC101E 6100 FD68                   	bsr		AsciiToHexNybble
   1662 FFFC1022 E98A                        	lsl.l	#4,d2
   1663 FFFC1024 8401                        	or.b	d1,d2
   1664 FFFC1026 6100 0010                   	bsr		sGetChar
   1665 FFFC102A 6100 FD5C                   	bsr		AsciiToHexNybble
   1666 FFFC102E E98A                        	lsl.l	#4,d2
   1667 FFFC1030 8401                        	or.b	d1,d2
   1668 FFFC1032 4284                        	clr.l	d4
   1669 FFFC1034 2242                        	move.l	d2,a1
   1670 FFFC1036 4E75                        	rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Get a character from auxillary input, checking the keyboard status for a
                                             ; CTRL-C
                                             ;------------------------------------------------------------------------------
                                             ;
   1677 FFFC1038                             sGetChar:
   1678 FFFC1038 6100 F55A                   	bsr		CheckForKey
   1679 FFFC103C 670C                        	beq		sgc1
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 29
bootrom.asm
   1680 FFFC103E 6100 F566                   	bsr		GetKey
   1681 FFFC1042 0C01 0000                   	cmpi.b	#CTRLC,d1
   1682 FFFC1046 6700 FAE4                   	beq		Monitor
   1683 FFFC104A                             sgc1:
   1684 FFFC104A 6100 FFFF                   	bsr		AUXIN
   1685 FFFC104E 67E8                        	beq		sGetChar
   1686 FFFC1050 1200                        	move.b	d0,d1
   1687 FFFC1052 4E75                        	rts
                                             
                                             ;==============================================================================
                                             ;==============================================================================
                                             
                                             ;------------------------------------------------------------------------------
                                             ;------------------------------------------------------------------------------
                                             ;
   1695 FFFC1054                             DisplayHexNumber:
   1696 FFFC1054 33FC A6A6 FFDC 0600         		move.w	#$A6A6,leds		; diagnostics
   1697 FFFC105C 2C7C FFE0 0000              		move.l	#VDGREG,a6
   1698 FFFC1062 343C 0007                   		move.w	#7,d2		; number-1 of digits to display
   1699 FFFC1066                             disphnum1:
   1700 FFFC1066 1001                        		move.b	d1,d0		; get digit into d0.b
   1701 FFFC1068 0240 000F                   		andi.w	#$0f,d0
   1702 FFFC106C 0C40 0009                   		cmpi.w	#$09,d0
   1703 FFFC1070 6302                        		bls.s	disphnum2
   1704 FFFC1072 5E40                        		addi.w	#7,d0
   1705 FFFC1074                             disphnum2:
   1706 FFFC1074 0640 0030                   		addi.w	#$30,d0	; convert to display char
   1707 FFFC1078 3602                        		move.w	d2,d3		; char count into d3
   1708 FFFC107A E743                        		asl.w	#3,d3		; scale * 8
   1709 FFFC107C                             disphnum3:
   1710 FFFC107C 382E 042C                   		move.w	$42C(a6),d4			; read character queue index into d4
   1711 FFFC1080 B87C 001C                   		cmp.w	#28,d4					; allow up 28 entries to be in progress
   1712 FFFC1084 64F6                        		bhs.s	disphnum3				; branch if too many chars queued
   1713 FFFC1086 4880                        		ext.w	d0						; zero out high order bits
   1714 FFFC1088 3D40 0420                   		move.w	d0,$420(a6)			; set char code
   1715 FFFC108C 3D7C 7FFF 0422              		move.w	#WHITE,$422(a6)		; set fg color
   1716 FFFC1092 3D7C 000F 0424              		move.w	#DARK_BLUE,$424(a6)	; set bk color
   1717 FFFC1098 3D43 0426                   		move.w	d3,$426(a6)			; set x pos
   1718 FFFC109C 3D7C 0008 0428              		move.w	#8,$428(a6)			; set y pos
   1719 FFFC10A2 3D7C 0707 042A              		move.w	#$0707,$42A(a6)		; set font x,y extent
   1720 FFFC10A8 3D7C 0000 042E              		move.w	#0,$42E(a6)			; pulse character queue write signal
   1721 FFFC10AE E899                        		ror.l	#4,d1					; rot to next digit
   1722 FFFC10B0 57CA FFB4                   		dbeq	d2,disphnum1
   1723 FFFC10B4 4ED5                        		jmp		(a5)
                                             
                                             ;===============================================================================
                                             ;    Perform ram test. (Uses checkerboard testing).
                                             ; 
                                             ;    Return address must be stored in a3 since the stack cannot be used (it
                                             ; would get overwritten in test). Note this routine uses no ram at all.
                                             ;===============================================================================
   1731 FFFC10B6                             ramtest:
   1732 FFFC10B6 33FC A5A5 FFDC 0600         		move.w	#$A5A5,leds		; diagnostics
   1733 FFFC10BE 207C 0003 0000                      movea.l #$30000,a0
   1734 FFFC10C4 203C AAAA 5555                      move.l #$aaaa5555,d0
                                             ;-----------------------------------------------------------
                                             ;   Write checkerboard pattern to ram then read it back to
                                             ; find the highest usable ram address (maybe). This address
                                             ; must be lower than the start of the rom (0xe00000).
                                             ;-----------------------------------------------------------
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 30
bootrom.asm
   1740 FFFC10CA                             ramtest1:
   1741 FFFC10CA 20C0                                move.l 	d0,(a0)+
   1742 FFFC10CC 2208                                move.l	a0,d1
   1743 FFFC10CE 4A41                                tst.w	d1
   1744 FFFC10D0 660A                                bne.s	rmtst1
   1745 FFFC10D2 4BF9 FFFC 10DC                      lea		rmtst1,a5
   1746 FFFC10D8 6000 FF7A                           bra		DisplayHexNumber
   1747 FFFC10DC                             rmtst1:
   1748 FFFC10DC 33FC A9A9 FFDC 0600         		move.w	#$A9A9,leds		; diagnostics
   1749 FFFC10E4 B1FC 0005 FFFC                      cmpa.l 	#$5FFFC,a0
   1750 FFFC10EA 66DE                                bne.s 	ramtest1
   1751 FFFC10EC 7200                                move.l	#0,d1
   1752 FFFC10EE 6100 F012                           bsr		CalcScreenLoc
   1753 FFFC10F2 6000 FC3E                           bra		DumpMem1
                                             
                                             ;------------------------------------------------------
                                             ;   Save maximum useable address for later comparison.
                                             ;------------------------------------------------------
   1758 FFFC10F6                             ramtest6:
   1759 FFFC10F6 33FC A7A7 FFDC 0600         		move.w	#$A7A7,leds		; diagnostics
   1760 FFFC10FE 2448                                movea.l a0,a2
   1761 FFFC1100 207C 0003 0000                      movea.l #$30000,a0
                                             ;--------------------------------------------
                                             ;   Read back checkerboard pattern from ram.
                                             ;--------------------------------------------
   1765 FFFC1106                             ramtest2:
   1766 FFFC1106 2A18                                move.l  (a0)+,d5
   1767 FFFC1108 B5C8                                cmpa.l	a0,a2
   1768 FFFC110A 671A                                beq.s	ramtest3
   1769 FFFC110C 2208                                move.l	a0,d1
   1770 FFFC110E 4A41                                tst.w	d1
   1771 FFFC1110 660A                                bne.s	rmtst2
   1772 FFFC1112 4BF9 FFFC 111C                      lea		rmtst2,a5
   1773 FFFC1118 6000 FF3A                           bra		DisplayHexNumber
   1774 FFFC111C                             rmtst2:
   1775 FFFC111C 0C85 AAAA 5555                      cmpi.l 	#$aaaa5555,d5
   1776 FFFC1122 67E2                                beq.s 	ramtest2
   1777 FFFC1124 6678                                bne.s 	ramtest7
                                             ;---------------------------------------------------
                                             ;   The following section does the same test except
                                             ; with the checkerboard order switched around.
                                             ;---------------------------------------------------
   1782 FFFC1126                             ramtest3:                
   1783 FFFC1126 33FC A8A8 FFDC 0600         		move.w	#$A8A8,leds		; diagnostics
   1784 FFFC112E 207C 0003 0000                      movea.l #$30000,a0
   1785 FFFC1134 203C 5555 AAAA                      move.l 	#$5555aaaa,d0
   1786 FFFC113A                             ramtest4:
   1787 FFFC113A 20C0                                move.l 	d0,(a0)+
   1788 FFFC113C 2208                                move.l 	a0,d1
   1789 FFFC113E 4A41                                tst.w	d1
   1790 FFFC1140 660A                                bne.s   rmtst3
   1791 FFFC1142 4BF9 FFFC 114C                      lea		rmtst3,a5
   1792 FFFC1148 6000 FF0A                           bra		DisplayHexNumber
   1793 FFFC114C                             rmtst3:
   1794 FFFC114C B1FC 1FFF FFFC                      cmpa.l 	#$1FFFFFFC,a0
   1795 FFFC1152 66E6                                bne.s 	ramtest4
   1796 FFFC1154                             ramtest8:
   1797 FFFC1154 2448                                movea.l a0,a2
   1798 FFFC1156 207C 0003 0000                      movea.l #$30000,a0
   1799 FFFC115C                             ramtest5:
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 31
bootrom.asm
   1800 FFFC115C 2018                                move.l 	(a0)+,d0
   1801 FFFC115E B5C8                                cmpa.l	a0,a2
   1802 FFFC1160 671A                                beq.s	rmtst5
   1803 FFFC1162 2208                                move.l 	a0,d1
   1804 FFFC1164 4A41                                tst.w	d1
   1805 FFFC1166 660A                                bne.s	rmtst4
   1806 FFFC1168 4BF9 FFFC 1172                      lea		rmtst4,a5
   1807 FFFC116E 6000 FEE4                           bra		DisplayHexNumber
   1808 FFFC1172                             rmtst4:
   1809 FFFC1172 0C80 5555 AAAA                      cmpi.l 	#$5555aaaa,d0
   1810 FFFC1178 67E2                                beq.s 	ramtest5
   1811 FFFC117A 6622                                bne.s 	ramtest7
                                             ;---------------------------------------------------
                                             ;   Save last ram address in end of memory pointer.
                                             ;---------------------------------------------------
   1815 FFFC117C                             rmtst5:
   1816 FFFC117C 23C8 0001 0008                      move.l a0,memend
                                             ;-----------------------------------
                                             ;   Create very first memory block.
                                             ;-----------------------------------
   1820 FFFC1182 91FC 0000 000C                      suba.l 	#12,a0
   1821 FFFC1188 21C8 0404                           move.l 	a0,$0404
   1822 FFFC118C 21FC 4652 4545 0400                 move.l 	#$46524545,$0400
   1823 FFFC1194 21FC 0000 0408 0408                 move.l 	#$408,$408			; point back-link to self
   1824 FFFC119C 4ED3                                jmp 	(a3)
                                             ;----------------------------------
                                             ; Error in ram - go no farther.
                                             ;----------------------------------
   1828 FFFC119E                             ramtest7:
   1829 FFFC119E 4ED3                        		jmp 	(a3)
   1830 FFFC11A0 60FC                                bra.s 	ramtest7
                                             
                                             ;===============================================================================
                                             ; Draw lines randomly on the screen.
                                             ;===============================================================================
                                             
   1836 FFFC11A2                             DrawLines:
   1837 FFFC11A2 4DF9 FFDC 0000              		lea		$FFDC0000,A6	; I/O base
   1838 FFFC11A8 4BF9 FFE0 0000              		lea		VDGREG,a5
   1839 FFFC11AE 2C3C 0003 0D40              		move.l	#200000,d6		; repeat a few times
   1840 FFFC11B4                             .0001:
   1841 FFFC11B4 202E 0C00                   		move.l	$0C00(a6),d0	; get 32 bit number
   1842 FFFC11B8 3200                        		move.w	d0,d1			; use bits 0 to 8 for y0
   1843 FFFC11BA 4840                        		swap	d0				; and bits 16 to 24 for x0
   1844 FFFC11BC 0240 00FF                   		and.w	#$FF,d0		; 0 to 511
   1845 FFFC11C0 0241 00FF                   		and.w	#$FF,d1		; 0 to 511
   1846 FFFC11C4 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   1847 FFFC11C8 242E 0C00                   		move.l	$0C00(a6),d2
   1848 FFFC11CC 3602                        		move.w	d2,d3
   1849 FFFC11CE 4842                        		swap	d2
   1850 FFFC11D0 0242 00FF                   		and.w	#$FF,d2		; 0 to 511
   1851 FFFC11D4 0243 00FF                   		and.w	#$FF,d3		; 0 to 511
   1852 FFFC11D8 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   1853 FFFC11DC 282E 0C00                   		move.l	$0C00(a6),d4
   1854 FFFC11E0 0244 7FFF                   		and.w	#RGBMASK,d4		; 9/15 bits color
   1855 FFFC11E4 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   1856 FFFC11E8                             .0002:
   1857 FFFC11E8 3E2D 042C                   		move.w	$42C(a5),d7		; check # queued
   1858 FFFC11EC BE7C 001C                   		cmp.w	#28,d7			; more than 28 queued ?
   1859 FFFC11F0 64F6                        		bhs.s	.0002			; too many, wait for queue to empty
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 32
bootrom.asm
   1860 FFFC11F2 3B7C 0001 0422              		move.w	#1,$422(a5)		; raster op = COPY
   1861 FFFC11F8 3B44 0424                   		move.w	d4,$424(a5)		; set color
   1862 FFFC11FC 3B40 0426                   		move.w	d0,$426(a5)		; set x0
   1863 FFFC1200 3B41 0428                   		move.w	d1,$428(a5)		; set y0
   1864 FFFC1204 3B42 0430                   		move.w	d2,$430(a5)		; set x1
   1865 FFFC1208 3B43 0432                   		move.w	d3,$432(a5)		; set y1
   1866 FFFC120C 3B7C 0002 042E              		move.w	#2,$42E(a5)		; pulse command queue (2 = draw line)
   1867 FFFC1212 5386                        		sub.l	#1,d6
   1868 FFFC1214 669E                        		bne		.0001			; go back and do more lines
   1869 FFFC1216 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Test Blitter
                                             ;===============================================================================
                                             
   1875 FFFC1218                             TestBlitter:
                                             		; puts a red rectangle on screen
   1877 FFFC1218 4BF9 FFE0 0000              		lea		VDGREG,a5
   1878 FFFC121E                             .0003:								
   1879 FFFC121E 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   1880 FFFC1222 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   1881 FFFC1226 67F6                        		beq.s	.0003				; branch if not done
   1882 FFFC1228 2B7C 0000 1F3F 04BC         		move.l	#7999,$4BC(a5)		; set transfer count 8000 pixels
   1883 FFFC1230 3B7C 7C00 04A8              		move.w	#RED,$4A8(a5)		; set color red
   1884 FFFC1236 2B7C 0000 0118 0498         		move.l	#280,$498(a5)		; set destination address
   1885 FFFC123E 2B7C 0000 0027 04A4         		move.l	#39,$4A4(a5)		; set destination width
   1886 FFFC1246 2B7C 0000 0118 049C         		move.l	#280,$49C(a5)		; set dst modulo
   1887 FFFC124E 3B7C 8080 04AC              		move.w	#%1000000010000000,$4AC(a5)		; enable channel D, start transfer
                                             
                                             		; makes a copy of the upper left corner of the screen
   1890 FFFC1254                             .0001:								
   1891 FFFC1254 302D 04AC                   		move.w	$4AC(a5),d0			; get blit status
   1892 FFFC1258 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   1893 FFFC125C 67F6                        		beq.s	.0001				; branch if not done
                                             		; Channel A
   1895 FFFC125E 2B7C 0000 03E7 04B0         		move.l	#999,$4B0(a5)		; set source transfer count 8000 pixels
   1896 FFFC1266 2B7C 0000 0000 0480         		move.l	#0,$480(a5)			; set source bitmap address (address in graphics mem)
   1897 FFFC126E 2B7C 0000 0118 0484         		move.l	#280,$484(a5)		; set src modulo
                                             		; Channel C
   1899 FFFC1276 2B7C 0000 03E7 04B8         		move.l	#999,$4B8(a5)		; set source transfer count 8000 pixels
   1900 FFFC127E 2B7C 0000 0000 0490         		move.l	#0,$490(a5)			; set source bitmap address (address in graphics mem)
   1901 FFFC1286 2B7C 0000 0118 0494         		move.l	#280,$494(a5)		; set src modulo
                                             		; Channel D
   1903 FFFC128E 2B7C 0000 1F3F 04BC         		move.l	#7999,$4BC(a5)		; set destination transfer count 8000 pixels
   1904 FFFC1296 2B7C 0000 00F0 0498         		move.l	#240,$498(a5)		; set destination address
   1905 FFFC129E 2B7C 0000 0118 049C         		move.l	#280,$49C(a5)		; set dst modulo
                                             		
   1907 FFFC12A6 2B7C 0000 0027 04A0         		move.l	#39,$4A0(a5)		; set source width
   1908 FFFC12AE 2B7C 0000 0027 04A4         		move.l	#39,$4A4(a5)		; set destination width
   1909 FFFC12B6 3B7C 0091 04AE              		move.w	#$91,$4AE(a5)		; set op A|C	($11 = copy A)
   1910 FFFC12BC 3B7C 80A2 04AC              		move.w	#%1000000010100010,$4AC(a5)		; enable channel A,C,D, start transfer
   1911 FFFC12C2                             .0002:								
   1912 FFFC12C2 302D 04AC                   		move.w	$4AC(a5),d0			; get blit status
   1913 FFFC12C6 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   1914 FFFC12CA 67F6                        		beq.s	.0002				; branch if not done
   1915 FFFC12CC 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Generic I2C routines
                                             ;===============================================================================
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 33
bootrom.asm
                                             
                                             I2C_PREL	EQU		$0
                                             I2C_PREH	EQU		$2
                                             I2C_CTRL	EQU		$4
                                             I2C_RXR		EQU		$6
                                             I2C_TXR		EQU		$6
                                             I2C_CMD		EQU		$8
                                             I2C_STAT	EQU		$A
                                             
                                             ; i2c
   1930 FFFC12CE                             i2c_setup:
   1931 FFFC12CE 4DF9 FFDC 0E00              		lea		I2C,a6				
   1932 FFFC12D4 3CBC 0013                   		move.w	#19,I2C_PREL(a6)	; setup prescale for 400kHz clock
   1933 FFFC12D8 3D7C 0000 0002              		move.w	#0,I2C_PREH(a6)
   1934 FFFC12DE 4DF9 FFDC 0E10              		lea		I2C2,a6				
   1935 FFFC12E4 3CBC 0013                   		move.w	#19,I2C_PREL(a6)	; setup prescale for 400kHz clock
   1936 FFFC12E8 3D7C 0000 0002              		move.w	#0,I2C_PREH(a6)
   1937 FFFC12EE 4E75                        		rts
                                             
                                             ; Wait for I2C transfer to complete
                                             ;
                                             ; Parameters
                                             ; 	a6 - I2C controller base address
                                             
   1944 FFFC12F0                             i2c_wait_tip:
   1945 FFFC12F0 3F00                        		move.w	d0,-(a7)
   1946 FFFC12F2                             .0001:					
   1947 FFFC12F2 302E 000A                   		move.w	I2C_STAT(a6),d0		; wait for tip to clear
   1948 FFFC12F6 0800 0001                   		btst	#1,d0
   1949 FFFC12FA 66F6                        		bne.s	.0001
   1950 FFFC12FC 301F                        		move.w	(a7)+,d0
   1951 FFFC12FE 4E75                        		rts
                                             
                                             ; Parameters
                                             ;	d0.w - data to transmit
                                             ;	d1.w - command value
                                             ;	a6	 - I2C controller base address
                                             ;
   1958 FFFC1300                             i2c_wr_cmd:
   1959 FFFC1300 3D40 0006                   		move.w	d0,I2C_TXR(a6)
   1960 FFFC1304 3D41 0008                   		move.w	d1,I2C_CMD(a6)
   1961 FFFC1308 6100 FFE6                   		bsr		i2c_wait_tip
   1962 FFFC130C 302E 000A                   		move.w	I2C_STAT(a6),d0
   1963 FFFC1310 4E75                        		rts
                                             
   1965 FFFC1312                             i2c_xmit1:
   1966 FFFC1312 3F00                        		move.w	d0,-(a7)
   1967 FFFC1314 3D7C 0001 0004              		move.w	#1,I2C_CTRL(a6)		; enable the core
   1968 FFFC131A 7076                        		moveq	#$76,d0				; set slave address = %0111011
   1969 FFFC131C 323C 0090                   		move.w	#$90,d1				; set STA, WR
   1970 FFFC1320 6100 FFDE                   		bsr		i2c_wr_cmd
   1971 FFFC1324 6100 0010                   		bsr		i2c_wait_rx_nack
   1972 FFFC1328 301F                        		move.w	(a7)+,d0
   1973 FFFC132A 323C 0050                   		move.w	#$50,d1				; set STO, WR
   1974 FFFC132E 6100 FFD0                   		bsr		i2c_wr_cmd
   1975 FFFC1332 6100 0002                   		bsr		i2c_wait_rx_nack
                                             
   1977 FFFC1336                             i2c_wait_rx_nack:
   1978 FFFC1336 3F00                        		move.w	d0,-(a7)
   1979 FFFC1338                             .0001:							
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 34
bootrom.asm
   1980 FFFC1338 302E 000A                   		move.w	I2C_STAT(a6),d0		; wait for RXack = 0
   1981 FFFC133C 0800 0007                   		btst	#7,d0
   1982 FFFC1340 66F6                        		bne.s	.0001
   1983 FFFC1342 301F                        		move.w	(a7)+,d0
   1984 FFFC1344 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Audio
                                             ;===============================================================================
                                             
                                             
   1991 FFFC1346                             audio_pll_config:
   1992 FFFC1346 7000                        		moveq	#0,d0
   1993 FFFC1348 720E                        		moveq	#$0E,d1
   1994 FFFC134A 6100 001C                   		bsr		audio_write_reg
   1995 FFFC134E 7002                        		moveq	#2,d0
   1996 FFFC1350 41F9 FFFC 13C2              		lea		audio_tbl1,a0
   1997 FFFC1356 6100 0076                   		bsr		audio_write_reg6
   1998 FFFC135A 4E75                        		rts
                                             
   2000 FFFC135C                             audio_startup_config:
   2001 FFFC135C 4E75                        		rts
                                             
   2003 FFFC135E                             audio_init:
   2004 FFFC135E 6100 FFE6                   		bsr		audio_pll_config
   2005 FFFC1362 6100 FFF8                   		bsr		audio_startup_config
   2006 FFFC1366 4E75                        		rts
                                             
                                             ; d0.w = register number
                                             ; d1.w = data to write
                                             		
   2011 FFFC1368                             audio_write_reg:
   2012 FFFC1368 4DF9 FFDC 0E00              		lea		I2C,a6				
   2013 FFFC136E 3D7C 0001 0004              		move.w	#1,I2C_CTRL(a6)		; enable the core
   2014 FFFC1374 3D7C 0076 0006              		move.w	#$76,I2C_TXR(a6)	; set slave address = %0111011
   2015 FFFC137A 3D7C 0090 0008              		move.w	#$90,I2C_CMD(a6)	; set STA, WR
   2016 FFFC1380 6100 FF6E                   		bsr		i2c_wait_tip	; wait for tip to clear
   2017 FFFC1384 6100 FFB0                   		bsr		i2c_wait_rx_nack
   2018 FFFC1388 3D7C 0040 0006              		move.w	#$40,I2C_TXR(a6)	; all regsister are $40xx
   2019 FFFC138E 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2020 FFFC1394 6100 FF5A                   		bsr		i2c_wait_tip	; wait for tip to clear
   2021 FFFC1398 6100 FF9C                   		bsr		i2c_wait_rx_nack
   2022 FFFC139C 3D40 0006                   		move.w	d0,I2C_TXR(a6)		; send register address
   2023 FFFC13A0 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2024 FFFC13A6 6100 FF48                   		bsr		i2c_wait_tip	; wait for tip to clear
   2025 FFFC13AA 6100 FF8A                   		bsr		i2c_wait_rx_nack
   2026 FFFC13AE 3D41 0006                   		move.w	d1,I2C_TXR(a6)		; send data
   2027 FFFC13B2 3D7C 0050 0008              		move.w	#$50,I2C_CMD(a6)	; set STO, WR
   2028 FFFC13B8 6100 FF36                   		bsr		i2c_wait_tip	; wait for tip to clear
   2029 FFFC13BC 6100 FF78                   		bsr		i2c_wait_rx_nack
   2030 FFFC13C0 4E75                        		rts
                                             
   2032 FFFC13C2                             audio_tbl1:
   2033 FFFC13C2 0000 007D 0000 000C         		dc.w	$00,$7D,$00,$0C,$20,$01
   2034 FFFC13CA 0020 0001                   
                                             ; a0
                                             ;
   2037 FFFC13CE                             audio_write_reg6:
   2038 FFFC13CE 41F9 FFFC 13C2              		lea		audio_tbl1,a0
   2039 FFFC13D4 4DF9 FFDC 0E00              		lea		I2C,a6				
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 35
bootrom.asm
   2040 FFFC13DA 3D7C 0001 0004              		move.w	#1,I2C_CTRL(a6)		; enable the core
   2041 FFFC13E0 3D7C 0076 0006              		move.w	#$76,I2C_TXR(a6)	; set slave address = %0111011
   2042 FFFC13E6 3D7C 0090 0008              		move.w	#$90,I2C_CMD(a6)	; set STA, WR
   2043 FFFC13EC 6100 FF02                   		bsr		i2c_wait_tip	; wait for tip to clear
   2044 FFFC13F0 6100 FF44                   		bsr		i2c_wait_rx_nack
   2045 FFFC13F4 3D7C 0040 0006              		move.w	#$40,I2C_TXR(a6)	; all regsister are $40xx
   2046 FFFC13FA 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2047 FFFC1400 6100 FEEE                   		bsr		i2c_wait_tip	; wait for tip to clear
   2048 FFFC1404 6100 FF30                   		bsr		i2c_wait_rx_nack
                                             
   2050 FFFC1408 3D40 0006                   		move.w	d0,I2C_TXR(a6)		; send register address
   2051 FFFC140C 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2052 FFFC1412 6100 FEDC                   		bsr		i2c_wait_tip	; wait for tip to clear
   2053 FFFC1416 6100 FF1E                   		bsr		i2c_wait_rx_nack
                                             		
   2055 FFFC141A 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #0
   2056 FFFC141E 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2057 FFFC1424 6100 FECA                   		bsr		i2c_wait_tip	; wait for tip to clear
   2058 FFFC1428 6100 FF0C                   		bsr		i2c_wait_rx_nack
                                             
   2060 FFFC142C 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #1
   2061 FFFC1430 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2062 FFFC1436 6100 FEB8                   		bsr		i2c_wait_tip	; wait for tip to clear
   2063 FFFC143A 6100 FEFA                   		bsr		i2c_wait_rx_nack
                                             
   2065 FFFC143E 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #2
   2066 FFFC1442 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2067 FFFC1448 6100 FEA6                   		bsr		i2c_wait_tip	; wait for tip to clear
   2068 FFFC144C 6100 FEE8                   		bsr		i2c_wait_rx_nack
                                             
   2070 FFFC1450 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #3
   2071 FFFC1454 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2072 FFFC145A 6100 FE94                   		bsr		i2c_wait_tip	; wait for tip to clear
   2073 FFFC145E 6100 FED6                   		bsr		i2c_wait_rx_nack
                                             
   2075 FFFC1462 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #4
   2076 FFFC1466 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2077 FFFC146C 6100 FE82                   		bsr		i2c_wait_tip	; wait for tip to clear
   2078 FFFC1470 6100 FEC4                   		bsr		i2c_wait_rx_nack
                                             
   2080 FFFC1474 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #5
   2081 FFFC1478 3D7C 0050 0008              		move.w	#$50,I2C_CMD(a6)	; set WR, STO
   2082 FFFC147E 6100 FE70                   		bsr		i2c_wait_tip		; wait for tip to clear
   2083 FFFC1482 6100 FEB2                   		bsr		i2c_wait_rx_nack
   2084 FFFC1486 4E75                        		rts
                                             
   2086 FFFC1488                             set_hp_output:
   2087 FFFC1488 7021                        		moveq	#$21,d0				;
   2088 FFFC148A 7200                        		moveq	#0,d1
   2089 FFFC148C 6100 FEDA                   		bsr		audio_write_reg
   2090 FFFC1490 7020                        		moveq	#$20,d0				;
   2091 FFFC1492 6100 FED4                   		bsr		audio_write_reg
   2092 FFFC1496 7023                        		moveq	#$23,d0
   2093 FFFC1498 323C 00E7                   		move.w	#$E7,d1		
   2094 FFFC149C 6100 FECA                   		bsr		audio_write_reg
   2095 FFFC14A0 7024                        		moveq	#$24,d0
   2096 FFFC14A2 323C 00E7                   		move.w	#$E7,d1		
   2097 FFFC14A6 6100 FEC0                   		bsr		audio_write_reg
   2098 FFFC14AA 4E75                        		rts
                                             
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 36
bootrom.asm
                                             ;===============================================================================
                                             ; Realtime clock routines
                                             ;===============================================================================
                                             
   2104 FFFC14AC                             rtc_read:
   2105 FFFC14AC 2C7C FFDC 0E10              		movea.l	#I2C2,a6
   2106 FFFC14B2 4BF9 0001 0600              		lea		RTCBuf,a5
   2107 FFFC14B8 3D7C 0080 0004              		move.w	#$80,I2C_CTRL(a6)	; enable I2C
   2108 FFFC14BE 303C 00DE                   		move.w	#$DE,d0				; read address, write op
   2109 FFFC14C2 323C 0090                   		move.w	#$90,d1				; STA + wr bit
   2110 FFFC14C6 6100 FE38                   		bsr		i2c_wr_cmd
   2111 FFFC14CA 4A00                        		tst.b	d0
   2112 FFFC14CC 6B72                        		bmi		.rxerr
   2113 FFFC14CE 303C 0000                   		move.w	#$00,d0				; address zero
   2114 FFFC14D2 323C 0010                   		move.w	#$10,d1				; wr bit
   2115 FFFC14D6 6100 FE28                   		bsr		i2c_wr_cmd
   2116 FFFC14DA 4A00                        		tst.b	d0
   2117 FFFC14DC 6B62                        		bmi		.rxerr
   2118 FFFC14DE 303C 00DF                   		move.w	#$DF,d0				; read address, read op
   2119 FFFC14E2 323C 0090                   		move.w	#$90,d1				; STA + wr bit
   2120 FFFC14E6 6100 FE18                   		bsr		i2c_wr_cmd
   2121 FFFC14EA 4A00                        		tst.b	d0
   2122 FFFC14EC 6B52                        		bmi		.rxerr
                                             		
   2124 FFFC14EE 343C 0020                   		move.w	#$20,d2
   2125 FFFC14F2                             .0001:
   2126 FFFC14F2 3D7C 0020 0008              		move.w	#$20,I2C_CMD(a6)	; rd bit
   2127 FFFC14F8 6100 FDF6                   		bsr		i2c_wait_tip
   2128 FFFC14FC 6100 FE38                   		bsr		i2c_wait_rx_nack
   2129 FFFC1500 302E 000A                   		move.w	I2C_STAT(a6),d0
   2130 FFFC1504 4A00                        		tst.b	d0
   2131 FFFC1506 6B38                        		bmi		.rxerr
   2132 FFFC1508 302E 0006                   		move.w	I2C_RXR(a6),d0
   2133 FFFC150C 1B80 2000                   		move.b	d0,(a5,d2.w)
   2134 FFFC1510 5242                        		add.w	#1,d2
   2135 FFFC1512 B47C 005F                   		cmp.w	#$5F,d2
   2136 FFFC1516 66DA                        		bne		.0001
   2137 FFFC1518 3D7C 0068 0008              		move.w	#$68,I2C_CMD(a6)	; STO, rd bit + nack
   2138 FFFC151E 6100 FDD0                   		bsr		i2c_wait_tip
   2139 FFFC1522 6100 FE12                   		bsr		i2c_wait_rx_nack
   2140 FFFC1526 302E 000A                   		move.w	I2C_STAT(a6),d0
   2141 FFFC152A 4A00                        		tst.b	d0
   2142 FFFC152C 6B12                        		bmi		.rxerr
   2143 FFFC152E 302E 0006                   		move.w	I2C_RXR(a6),d0
   2144 FFFC1532 1B80 2000                   		move.b	d0,(a5,d2.w)
   2145 FFFC1536 3D7C 0000 0004              		move.w	#0,I2C_CTRL(a6)		; disable I2C and return 0
   2146 FFFC153C 7000                        		moveq	#0,d0
   2147 FFFC153E 4E75                        		rts
   2148 FFFC1540                             .rxerr:
   2149 FFFC1540 3D7C 0000 0004              		move.w	#0,I2C_CTRL(a6)		; disable I2C and return status
   2150 FFFC1546 4E75                        		rts
                                             
   2152 FFFC1548                             rtc_write:
   2153 FFFC1548 2C7C FFDC 0E10              		movea.l	#I2C2,a6
   2154 FFFC154E 4BF9 0001 0600              		lea		RTCBuf,a5
   2155 FFFC1554 3D7C 0080 0004              		move.w	#$80,I2C_CTRL(a6)	; enable I2C
   2156 FFFC155A 303C 00DE                   		move.w	#$DE,d0				; read address, write op
   2157 FFFC155E 323C 0090                   		move.w	#$90,d1				; STA + wr bit
   2158 FFFC1562 6100 FD9C                   		bsr		i2c_wr_cmd
   2159 FFFC1566 4A00                        		tst.b	d0
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 37
bootrom.asm
   2160 FFFC1568 6B46                        		bmi		.rxerr
   2161 FFFC156A 303C 0000                   		move.w	#$00,d0				; address zero
   2162 FFFC156E 323C 0010                   		move.w	#$10,d1				; wr bit
   2163 FFFC1572 6100 FD8C                   		bsr		i2c_wr_cmd
   2164 FFFC1576 4A00                        		tst.b	d0
   2165 FFFC1578 6B36                        		bmi		.rxerr
   2166 FFFC157A 343C 0020                   		move.w	#$20,d2
   2167 FFFC157E                             .0001:
   2168 FFFC157E 1035 2000                   		move.b	(a5,d2.w),d0
   2169 FFFC1582 323C 0010                   		move.w	#$10,d1
   2170 FFFC1586 6100 FD78                   		bsr		i2c_wr_cmd
   2171 FFFC158A 4A00                        		tst.b	d0
   2172 FFFC158C 6B22                        		bmi		.rxerr
   2173 FFFC158E 5242                        		add.w	#1,d2
   2174 FFFC1590 B47C 005F                   		cmp.w	#$5F,d2
   2175 FFFC1594 66E8                        		bne.s	.0001
   2176 FFFC1596 1035 2000                   		move.b	(a5,d2.w),d0
   2177 FFFC159A 323C 0050                   		move.w	#$50,d1				; STO, wr bit
   2178 FFFC159E 6100 FD60                   		bsr		i2c_wr_cmd
   2179 FFFC15A2 4A00                        		tst.b	d0
   2180 FFFC15A4 6B0A                        		bmi		.rxerr
   2181 FFFC15A6 3D7C 0000 0004              		move.w	#0,I2C_CTRL(a6)		; disable I2C and return 0
   2182 FFFC15AC 7000                        		moveq	#0,d0
   2183 FFFC15AE 4E75                        		rts
   2184 FFFC15B0                             .rxerr:
   2185 FFFC15B0 3D7C 0000 0004              		move.w	#0,I2C_CTRL(a6)		; disable I2C and return status
   2186 FFFC15B6 4E75                        		rts
                                             
   2188 FFFC15B8                             msgRtcReadFail:
   2189 FFFC15B8 52 54 43 20 72 65 61 64     		dc.b	"RTC read/write failed.",$0D,$0A,$00
   2190 FFFC15C0 2F 77 72 69 74 65 20 66     
   2191 FFFC15C8 61 69 6C 65 64 2E 0D 0A     
   2192 FFFC15D0 00                          
                                             
                                             		
                                             ; Randomize the screen	
                                             ;		move.l	#VDGBUF,A0
                                             ;		move.l	#%011011111,D0		; light blue
                                             ;		move.l	#640*512,D1
                                             ;clrscr_loop1:
                                             ;		move.l	$0C00(a6),d0			; get a random number
                                             ;		clr.w	$0C04(a6)				; generate next number
                                             ;		move.w	d0,(a0)+				; store it to the screen
                                             ;		sub.l	#1,d1
                                             ;		bne		clrscr_loop1
                                             
   2206 FFFC15D1                             msg_start:
   2207 FFFC15D1 4E 34 56 20 36 38 6B 20     	dc.b	"N4V 68k System Starting",0
   2208 FFFC15D9 53 79 73 74 65 6D 20 53     
   2209 FFFC15E1 74 61 72 74 69 6E 67 00     
                                             
                                             
                                             ;------------------------------------------------------------------------------
   2213 FFFC15E9                             font8:
   2214 FFFC15E9 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $00
                                             
   2216 FFFC15F1 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2218 FFFC15F9 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 38
bootrom.asm
   2220 FFFC1601 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2222 FFFC1609 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $04
                                             
   2224 FFFC1611 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2226 FFFC1619 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2228 FFFC1621 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2230 FFFC1629 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $08
                                             
   2232 FFFC1631 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2234 FFFC1639 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2236 FFFC1641 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2238 FFFC1649 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $0C
                                             
   2240 FFFC1651 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2242 FFFC1659 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2244 FFFC1661 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2246 FFFC1669 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $10
                                             
   2248 FFFC1671 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2250 FFFC1679 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2252 FFFC1681 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2254 FFFC1689 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $14
                                             
   2256 FFFC1691 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2258 FFFC1699 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2260 FFFC16A1 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2262 FFFC16A9 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $18
                                             
   2264 FFFC16B1 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2266 FFFC16B9 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2268 FFFC16C1 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2270 FFFC16C9 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $1C
                                             
   2272 FFFC16D1 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2274 FFFC16D9 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2276 FFFC16E1 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2278 FFFC16E9 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; SPACE
                                             
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 39
bootrom.asm
   2280 FFFC16F1 18 18 18 18 18 00 18 00     	dc.b	$18,$18,$18,$18,$18,$00,$18,$00	; !
                                             
   2282 FFFC16F9 6C 6C 00 00 00 00 00 00     	dc.b	$6C,$6C,$00,$00,$00,$00,$00,$00	; "
                                             
   2284 FFFC1701 6C 6C FE 6C FE 6C 6C 00     	dc.b	$6C,$6C,$FE,$6C,$FE,$6C,$6C,$00	; #
                                             
   2286 FFFC1709 18 3E 60 3C 06 7C 18 00     	dc.b	$18,$3E,$60,$3C,$06,$7C,$18,$00	; $
                                             
   2288 FFFC1711 00 66 AC D8 36 6A CC 00     	dc.b	$00,$66,$AC,$D8,$36,$6A,$CC,$00	; %
                                             
   2290 FFFC1719 38 6C 68 76 DC CE 7B 00     	dc.b	$38,$6C,$68,$76,$DC,$CE,$7B,$00	; &
                                             
   2292 FFFC1721 18 18 30 00 00 00 00 00     	dc.b	$18,$18,$30,$00,$00,$00,$00,$00	; '
                                             
   2294 FFFC1729 0C 18 30 30 30 18 0C 00     	dc.b	$0C,$18,$30,$30,$30,$18,$0C,$00	; (
                                             
   2296 FFFC1731 30 18 0C 0C 0C 18 30 00     	dc.b	$30,$18,$0C,$0C,$0C,$18,$30,$00	; )
                                             
   2298 FFFC1739 00 66 3C FF 3C 66 00 00     	dc.b	$00,$66,$3C,$FF,$3C,$66,$00,$00	; *
                                             
   2300 FFFC1741 00 18 18 7E 18 18 00 00     	dc.b	$00,$18,$18,$7E,$18,$18,$00,$00	; +
                                             
   2302 FFFC1749 00 00 00 00 00 18 18 30     	dc.b	$00,$00,$00,$00,$00,$18,$18,$30	; ,
                                             
   2304 FFFC1751 00 00 00 7E 00 00 00 00     	dc.b	$00,$00,$00,$7E,$00,$00,$00,$00	; -
                                             
   2306 FFFC1759 00 00 00 00 00 18 18 00     	dc.b	$00,$00,$00,$00,$00,$18,$18,$00	; .
                                             
   2308 FFFC1761 03 06 0C 18 30 60 C0 00     	dc.b	$03,$06,$0C,$18,$30,$60,$C0,$00	; /
                                             
   2310 FFFC1769 3C 66 6E 7E 76 66 3C 00     	dc.b	$3C,$66,$6E,$7E,$76,$66,$3C,$00	; 0
                                             
   2312 FFFC1771 18 38 78 18 18 18 18 00     	dc.b	$18,$38,$78,$18,$18,$18,$18,$00	; 1
                                             
   2314 FFFC1779 3C 66 06 0C 18 30 7E 00     	dc.b	$3C,$66,$06,$0C,$18,$30,$7E,$00	; 2
                                             
   2316 FFFC1781 3C 66 06 1C 06 66 3C 00     	dc.b	$3C,$66,$06,$1C,$06,$66,$3C,$00	; 3
                                             
   2318 FFFC1789 1C 3C 6C CC FE 0C 0C 00     	dc.b	$1C,$3C,$6C,$CC,$FE,$0C,$0C,$00	; 4
                                             
   2320 FFFC1791 7E 60 7C 06 06 66 3C 00     	dc.b	$7E,$60,$7C,$06,$06,$66,$3C,$00	; 5
                                             
   2322 FFFC1799 1C 30 60 7C 66 66 3C 00     	dc.b	$1C,$30,$60,$7C,$66,$66,$3C,$00	; 6
                                             
   2324 FFFC17A1 7E 06 06 0C 18 18 18 00     	dc.b	$7E,$06,$06,$0C,$18,$18,$18,$00	; 7
                                             
   2326 FFFC17A9 3C 66 66 3C 66 66 3C 00     	dc.b	$3C,$66,$66,$3C,$66,$66,$3C,$00	; 8
                                             
   2328 FFFC17B1 3C 66 66 3E 06 0C 38 00     	dc.b	$3C,$66,$66,$3E,$06,$0C,$38,$00	; 9
                                             
   2330 FFFC17B9 00 18 18 00 00 18 18 00     	dc.b	$00,$18,$18,$00,$00,$18,$18,$00	; :
                                             
   2332 FFFC17C1 00 18 18 00 00 18 18 30     	dc.b	$00,$18,$18,$00,$00,$18,$18,$30	; ;
                                             
   2334 FFFC17C9 00 06 18 60 18 06 00 00     	dc.b	$00,$06,$18,$60,$18,$06,$00,$00	; <
                                             
   2336 FFFC17D1 00 00 7E 00 7E 00 00 00     	dc.b	$00,$00,$7E,$00,$7E,$00,$00,$00	; =
                                             
   2338 FFFC17D9 00 60 18 06 18 60 00 00     	dc.b	$00,$60,$18,$06,$18,$60,$00,$00	; >
                                             
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 40
bootrom.asm
   2340 FFFC17E1 3C 66 06 0C 18 00 18 00     	dc.b	$3C,$66,$06,$0C,$18,$00,$18,$00	; ?
                                             
   2342 FFFC17E9 7C C6 DE D6 DE C0 78 00     	dc.b	$7C,$C6,$DE,$D6,$DE,$C0,$78,$00	; @
                                             
   2344 FFFC17F1 3C 66 66 7E 66 66 66 00     	dc.b	$3C,$66,$66,$7E,$66,$66,$66,$00	; A
                                             
   2346 FFFC17F9 7C 66 66 7C 66 66 7C 00     	dc.b	$7C,$66,$66,$7C,$66,$66,$7C,$00	; B
                                             
   2348 FFFC1801 1E 30 60 60 60 30 1E 00     	dc.b	$1E,$30,$60,$60,$60,$30,$1E,$00	; C
                                             
   2350 FFFC1809 78 6C 66 66 66 6C 78 00     	dc.b	$78,$6C,$66,$66,$66,$6C,$78,$00	; D
                                             
   2352 FFFC1811 7E 60 60 78 60 60 7E 00     	dc.b	$7E,$60,$60,$78,$60,$60,$7E,$00	; E
                                             
   2354 FFFC1819 7E 60 60 78 60 60 60 00     	dc.b	$7E,$60,$60,$78,$60,$60,$60,$00	; F
                                             
   2356 FFFC1821 3C 66 60 6E 66 66 3E 00     	dc.b	$3C,$66,$60,$6E,$66,$66,$3E,$00	; G
                                             
   2358 FFFC1829 66 66 66 7E 66 66 66 00     	dc.b	$66,$66,$66,$7E,$66,$66,$66,$00	; H
                                             
   2360 FFFC1831 3C 18 18 18 18 18 3C 00     	dc.b	$3C,$18,$18,$18,$18,$18,$3C,$00	; I
                                             
   2362 FFFC1839 06 06 06 06 06 66 3C 00     	dc.b	$06,$06,$06,$06,$06,$66,$3C,$00	; J
                                             
   2364 FFFC1841 C6 CC D8 F0 D8 CC C6 00     	dc.b	$C6,$CC,$D8,$F0,$D8,$CC,$C6,$00	; K
                                             
   2366 FFFC1849 60 60 60 60 60 60 7E 00     	dc.b	$60,$60,$60,$60,$60,$60,$7E,$00	; L
                                             
   2368 FFFC1851 C6 EE FE D6 C6 C6 C6 00     	dc.b	$C6,$EE,$FE,$D6,$C6,$C6,$C6,$00	; M
                                             
   2370 FFFC1859 C6 E6 F6 DE CE C6 C6 00     	dc.b	$C6,$E6,$F6,$DE,$CE,$C6,$C6,$00	; N
                                             
   2372 FFFC1861 3C 66 66 66 66 66 3C 00     	dc.b	$3C,$66,$66,$66,$66,$66,$3C,$00	; O
                                             
   2374 FFFC1869 7C 66 66 7C 60 60 60 00     	dc.b	$7C,$66,$66,$7C,$60,$60,$60,$00	; P
                                             
   2376 FFFC1871 78 CC CC CC CC DC 7E 00     	dc.b	$78,$CC,$CC,$CC,$CC,$DC,$7E,$00	; Q
                                             
   2378 FFFC1879 7C 66 66 7C 6C 66 66 00     	dc.b	$7C,$66,$66,$7C,$6C,$66,$66,$00	; R
                                             
   2380 FFFC1881 3C 66 70 3C 0E 66 3C 00     	dc.b	$3C,$66,$70,$3C,$0E,$66,$3C,$00	; S
                                             
   2382 FFFC1889 7E 18 18 18 18 18 18 00     	dc.b	$7E,$18,$18,$18,$18,$18,$18,$00	; T
                                             
   2384 FFFC1891 66 66 66 66 66 66 3C 00     	dc.b	$66,$66,$66,$66,$66,$66,$3C,$00	; U
                                             
   2386 FFFC1899 66 66 66 66 3C 3C 18 00     	dc.b	$66,$66,$66,$66,$3C,$3C,$18,$00	; V
                                             
   2388 FFFC18A1 C6 C6 C6 D6 FE EE C6 00     	dc.b	$C6,$C6,$C6,$D6,$FE,$EE,$C6,$00	; W
                                             
   2390 FFFC18A9 C3 66 3C 18 3C 66 C3 00     	dc.b	$C3,$66,$3C,$18,$3C,$66,$C3,$00	; X
                                             
   2392 FFFC18B1 C3 66 3C 18 18 18 18 00     	dc.b	$C3,$66,$3C,$18,$18,$18,$18,$00	; Y
                                             
   2394 FFFC18B9 FE 0C 18 30 60 C0 FE 00     	dc.b	$FE,$0C,$18,$30,$60,$C0,$FE,$00	; Z
                                             
   2396 FFFC18C1 3C 30 30 30 30 30 3C 00     	dc.b	$3C,$30,$30,$30,$30,$30,$3C,$00	; [
                                             
   2398 FFFC18C9 C0 60 30 18 0C 06 03 00     	dc.b	$C0,$60,$30,$18,$0C,$06,$03,$00	; \
                                             
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 41
bootrom.asm
   2400 FFFC18D1 3C 0C 0C 0C 0C 0C 3C 00     	dc.b	$3C,$0C,$0C,$0C,$0C,$0C,$3C,$00	; ]
                                             
   2402 FFFC18D9 10 38 6C C6 00 00 00 00     	dc.b	$10,$38,$6C,$C6,$00,$00,$00,$00	; ^
                                             
   2404 FFFC18E1 00 00 00 00 00 00 00 FE     	dc.b	$00,$00,$00,$00,$00,$00,$00,$FE	; _
                                             
   2406 FFFC18E9 18 18 0C 00 00 00 00 00     	dc.b	$18,$18,$0C,$00,$00,$00,$00,$00	; `
                                             
   2408 FFFC18F1 00 00 3C 06 3E 66 3E 00     	dc.b	$00,$00,$3C,$06,$3E,$66,$3E,$00	; a
                                             
   2410 FFFC18F9 60 60 7C 66 66 66 7C 00     	dc.b	$60,$60,$7C,$66,$66,$66,$7C,$00	; b
                                             
   2412 FFFC1901 00 00 3C 60 60 60 3C 00     	dc.b	$00,$00,$3C,$60,$60,$60,$3C,$00	; c
                                             
   2414 FFFC1909 06 06 3E 66 66 66 3E 00     	dc.b	$06,$06,$3E,$66,$66,$66,$3E,$00	; d
                                             
   2416 FFFC1911 00 00 3C 66 7E 60 3C 00     	dc.b	$00,$00,$3C,$66,$7E,$60,$3C,$00	; e
                                             
   2418 FFFC1919 1C 30 7C 30 30 30 30 00     	dc.b	$1C,$30,$7C,$30,$30,$30,$30,$00	; f
                                             
   2420 FFFC1921 00 00 3E 66 66 3E 06 3C     	dc.b	$00,$00,$3E,$66,$66,$3E,$06,$3C	; g
                                             
   2422 FFFC1929 60 60 7C 66 66 66 66 00     	dc.b	$60,$60,$7C,$66,$66,$66,$66,$00	; h
                                             
   2424 FFFC1931 18 00 18 18 18 18 0C 00     	dc.b	$18,$00,$18,$18,$18,$18,$0C,$00	; i
                                             
   2426 FFFC1939 0C 00 0C 0C 0C 0C 0C 78     	dc.b	$0C,$00,$0C,$0C,$0C,$0C,$0C,$78	; j
                                             
   2428 FFFC1941 60 60 66 6C 78 6C 66 00     	dc.b	$60,$60,$66,$6C,$78,$6C,$66,$00	; k
                                             
   2430 FFFC1949 18 18 18 18 18 18 0C 00     	dc.b	$18,$18,$18,$18,$18,$18,$0C,$00	; l
                                             
   2432 FFFC1951 00 00 EC FE D6 C6 C6 00     	dc.b	$00,$00,$EC,$FE,$D6,$C6,$C6,$00	; m
                                             
   2434 FFFC1959 00 00 7C 66 66 66 66 00     	dc.b	$00,$00,$7C,$66,$66,$66,$66,$00	; n
                                             
   2436 FFFC1961 00 00 3C 66 66 66 3C 00     	dc.b	$00,$00,$3C,$66,$66,$66,$3C,$00	; o
                                             
   2438 FFFC1969 00 00 7C 66 66 7C 60 60     	dc.b	$00,$00,$7C,$66,$66,$7C,$60,$60	; p
                                             
   2440 FFFC1971 00 00 3E 66 66 3E 06 06     	dc.b	$00,$00,$3E,$66,$66,$3E,$06,$06	; q
                                             
   2442 FFFC1979 00 00 7C 66 60 60 60 00     	dc.b	$00,$00,$7C,$66,$60,$60,$60,$00	; r
                                             
   2444 FFFC1981 00 00 3C 60 3C 06 7C 00     	dc.b	$00,$00,$3C,$60,$3C,$06,$7C,$00	; s
                                             
   2446 FFFC1989 30 30 7C 30 30 30 1C 00     	dc.b	$30,$30,$7C,$30,$30,$30,$1C,$00	; t
                                             
   2448 FFFC1991 00 00 66 66 66 66 3E 00     	dc.b	$00,$00,$66,$66,$66,$66,$3E,$00	; u
                                             
   2450 FFFC1999 00 00 66 66 66 3C 18 00     	dc.b	$00,$00,$66,$66,$66,$3C,$18,$00	; v
                                             
   2452 FFFC19A1 00 00 C6 C6 D6 FE 6C 00     	dc.b	$00,$00,$C6,$C6,$D6,$FE,$6C,$00	; w
                                             
   2454 FFFC19A9 00 00 C6 6C 38 6C C6 00     	dc.b	$00,$00,$C6,$6C,$38,$6C,$C6,$00	; x
                                             
   2456 FFFC19B1 00 00 66 66 66 3C 18 30     	dc.b	$00,$00,$66,$66,$66,$3C,$18,$30	; y
                                             
   2458 FFFC19B9 00 00 7E 0C 18 30 7E 00     	dc.b	$00,$00,$7E,$0C,$18,$30,$7E,$00	; z
                                             
Finitron asm68 assembler    version 5.6   Fri Dec 01 17:05:11 2017     Page 42
bootrom.asm
   2460 FFFC19C1 0E 18 18 70 18 18 0E 00     	dc.b	$0E,$18,$18,$70,$18,$18,$0E,$00	; {
                                             
   2462 FFFC19C9 18 18 18 18 18 18 18 00     	dc.b	$18,$18,$18,$18,$18,$18,$18,$00	; |
                                             
   2464 FFFC19D1 70 18 18 0E 18 18 70 00     	dc.b	$70,$18,$18,$0E,$18,$18,$70,$00	; }
                                             
   2466 FFFC19D9 72 9C 00 00 00 00 00 00     	dc.b	$72,$9C,$00,$00,$00,$00,$00,$00	; ~
                                             
   2468 FFFC19E1 FE FE FE FE FE FE FE 00     	dc.b	$FE,$FE,$FE,$FE,$FE,$FE,$FE,$00	; 
                                             
