Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 1
bootrom.asm

                                             ; N4V68kSys bootrom - (C) 2017 Robert Finch, Waterloo
                                             ;
                                             ; This file is part of N4V68kSys
                                             ;
                                             ; how to build:
                                             ; 1. assemble using "asm68 bootrom.asm /G00 /olyebvm"
                                             ; 2. copy bootrom.vh to the correct directory if not already there
                                             ;
                                             ;------------------------------------------------------------------------------
                                             ;
                                             ; system memory map
                                             ;
                                             ;
                                             ; 00000000 +----------------+
                                             ;          | startup sp,pc  | 8 B
                                             ; 00000008 +----------------+
                                             ;          |                |
                                             ;          |                |
                                             ;          |                |
                                             ;          :  dram memory   : 512 MB
                                             ;          |                |
                                             ;          |                |
                                             ;          |                |
                                             ; 20000000 +----------------+
                                             ;          |                |
                                             ;          :     unused     :
                                             ;          |                |
                                             ; FF800000 +----------------+
                                             ;          |                |
                                             ;          : display buffer : 896k
                                             ;          |                |
                                             ; FF8E0000 +----------------+
                                             ;          |                |
                                             ;          :     unused     :
                                             ;          |                |
                                             ; FFD00000 +----------------+
                                             ;          |                |
                                             ;          :    I/O area    : 1.0 M
                                             ;          |                |
                                             ; FFE00000 +----------------+
                                             ;          |   VDG regs     |
                                             ; FFE01000 +----------------+
                                             ;          |                |
                                             ;          :     unused     :
                                             ;          |                |
                                             ; FFFC0000 +----------------+
                                             ;          |                |
                                             ;          :    boot rom    :
                                             ;          |                |
                                             ; FFFFFFFF +----------------+
                                             ;
                                             ;
                                             RGBMASK		EQU		%0111111111111111
                                             RED			EQU		%0111110000000000
                                             DARK_BLUE	EQU		%0000000000001111
                                             BLACK		EQU		%0000000000000000
                                             WHITE		EQU		%0111111111111111
                                             
                                             CR		EQU		$0D
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 2
bootrom.asm
                                             LF		EQU		$0A
                                             
                                             SC_F12  EQU    $07
                                             SC_C    EQU    $21
                                             SC_T    EQU    $2C
                                             SC_Z    EQU    $1A
                                             SC_KEYUP	EQU		$F0
                                             SC_EXTEND   EQU		$E0
                                             SC_CTRL		EQU		$14
                                             SC_RSHIFT	EQU		$59
                                             SC_NUMLOCK	EQU		$77
                                             SC_SCROLLLOCK	EQU	$7E
                                             SC_CAPSLOCK		EQU	$58
                                             SC_ALT		EQU		$11
                                             SC_LSHIFT	EQU		$12
                                             SC_DEL		EQU		$71		; extend
                                             SC_LCTRL	EQU		$58
                                             SC_TAB      EQU		$0D
                                             
                                             TEXTCOLS	EQU	40
                                             TEXTROWS	EQU	32
                                             
                                             VDGBUF		EQU	$FF800000
                                             VDGREG		EQU	$FFE00000
                                             VDG_CURX	EQU	$0440
                                             VDG_CURY	EQU	$0442
                                             VDG_CURSZ	EQU	$0444
                                             VDG_CURCLR	EQU	$0446
                                             VDG_CURFLSH	EQU	$0448
                                             VDG_CURIMG	EQU	$0460
                                             I2C			EQU	$FFDC0E00
                                             I2C2		EQU	$FFDC0E10
                                             VirtScreen	EQU	$1FFF0000
                                             KEYBD		EQU	$FFDC0000
                                             leds		EQU	$FFDC0600
                                             rand		EQU	$FFDC0C00
                                             
                                             fgcolor		EQU	$10002
                                             bkcolor		EQU	$10004
                                             fntsz		EQU	$10006
                                             memend		EQU	$10008
                                             CursorRow	EQU	$10418
                                             CursorCol	EQU $10419
                                             TextRows	EQU	$1041A
                                             TextCols	EQU	$1041B
                                             TextCurpos	EQU	$1041C
                                             TextScr		EQU	$10420
                                             KeybdEcho		EQU	$10424
                                             KeybdWaitFlag	EQU	$10425
                                             _KeyState1		EQU	$10426
                                             _KeyState2		EQU	$10427
                                             KeybdLEDs		EQU	$10428
                                             
                                             reg_d0			EQU	$10500
                                             reg_d1			EQU	$10504
                                             reg_d2			EQU	$10508
                                             reg_d3			EQU	$1050C
                                             reg_d4			EQU $10510
                                             reg_d5			EQU $10514
                                             reg_d6			EQU	$10518
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 3
bootrom.asm
                                             reg_d7			EQU	$1051C
                                             reg_a0			EQU $10520
                                             reg_a1			EQU	$10524
                                             reg_a2			EQU	$10528
                                             reg_a3			EQU $1052C
                                             reg_a4			EQU $10530
                                             reg_a5			EQU $10534
                                             reg_a6			EQU $10538
                                             reg_ssp			EQU	$1053C
                                             reg_usp			EQU	$10540
                                             reg_pc			EQU $10544
                                             reg_sr			EQU	$10548
                                             
                                             RTCBuf			EQU	$10600
                                             RTFBufEnd		EQU	$10660
                                             
                                             	org		$FFFC0000
                                             
                                             ;------------------------------------------------------------------------------
                                             
    140 FFFC0000 FF401000                    	dc.l	$FF401000	; initial SSP
    141 FFFC0004 FFFC0010                    	dc.l	Start		; initial PC
                                             	
                                             ;------------------------------------------------------------------------------
    144 FFFC0008                             fpga_version:
    145 FFFC0008 41 41 30 30 30 30 30 30     	dc.b	"AA000000"	; FPGA core version - 8 ASCII characters
                                             
                                             
                                             ;------------------------------------------------------------------------------
    149 FFFC0010                             	Start:
                                             ;------------------------------------------------------------------------------
    151 FFFC0010 33FC A1A1 FFDC 0600         		move.w	#$A1A1,leds		; diagnostics
                                             
                                             		; SIM croaked because the upper half of D1 was undefined. This caused
                                             		; problems with a dbra instruction. So the contents of all the registers
                                             		; are defined at startup. This is only needed for SIM.
    156 FFFC0018 7000                        		moveq	#0,D0
    157 FFFC001A 7200                        		moveq	#0,D1				; for SIM
    158 FFFC001C 7400                        		moveq	#0,D2
    159 FFFC001E 7600                        		moveq	#0,D3
    160 FFFC0020 7800                        		moveq	#0,D4
    161 FFFC0022 7A00                        		moveq	#0,D5
    162 FFFC0024 7C00                        		moveq	#0,D6
    163 FFFC0026 7E00                        		moveq	#0,D7
    164 FFFC0028 4288                        		clr.l	A0
    165 FFFC002A 4289                        		clr.l	A1
    166 FFFC002C 428A                        		clr.l	A2
    167 FFFC002E 428B                        		clr.l	A3
    168 FFFC0030 428C                        		clr.l	A4
    169 FFFC0032 428D                        		clr.l	A5
    170 FFFC0034 428E                        		clr.l	A6
    171 FFFC0036 4E67                        		move.l	A7,usp
                                             
    173 FFFC0038 6100 1378                   		bsr		i2c_setup
                                             ;		bsr		rtc_read
    175 FFFC003C 33FC A2A2 FFDC 0600         		move.w	#$A2A2,leds		; diagnostics
                                             
    177 FFFC0044 13FC 0028 0001 041B         		move.b	#TEXTCOLS,TextCols
    178 FFFC004C 13FC 0020 0001 041A         		move.b	#TEXTROWS,TextRows
    179 FFFC0054 4239 0001 0419              		clr.b	CursorCol
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 4
bootrom.asm
    180 FFFC005A 4239 0001 0418              		clr.b	CursorRow
    181 FFFC0060 4279 0001 041C              		clr.w	TextCurpos
    182 FFFC0066 23FC 0002 0000 0001 0420    		move.l	#$00020000,TextScr		; set virtual screen location
                                             
                                             
    185 FFFC0070 6100 0412                   		bsr		SetCursorColor
    186 FFFC0074 6100 0426                   		bsr		SetCursorImage
                                             
    188 FFFC0078 4DF9 FFDC 0000              		lea	$FFDC0000,A6	; I/O base
                                             
                                             		; Initialize random number generator
                                             
    192 FFFC007E 426E 0C06                   		clr.w	$0C06(a6)				; select stream #0
    193 FFFC0082 2D7C 8888 8888 0C08         		move.l	#$88888888,$0C08(a6)	; set initial m_z
    194 FFFC008A 2D7C 0123 4567 0C0C         		move.l	#$01234567,$0C0C(a6)	; set initial m_w
                                             
    196 FFFC0092 6100 02C8                   		bsr		BootClearScreen		
    197 FFFC0096 33FC A2A2 FFDC 0600         		move.w	#$A2A2,leds			; diagnostics
                                             		
                                             		; turn on audio test mode
    200 FFFC009E 4DF9 FFDC 0000              		lea		$FFDC0000,A6		; set I/O base
    201 FFFC00A4 3D7C FFFF 0700              		move.w	#$FFFF,$0700(a6)	; turn on audio clocks
    202 FFFC00AA 2A7C FFE0 0000              		movea.l	#VDGREG,a5
    203 FFFC00B0 3B7C 4000 0584              		move.w	#%0100000000000000,$584(a5)
                                             
    205 FFFC00B6 6100 11A4                   		bsr		DrawLines
    206 FFFC00BA 6100 1240                   		bsr		TestBlitter
                                             
    208 FFFC00BE 6100 02B2                   		bsr		BootCopyFont
    209 FFFC00C2 33FC A3A3 FFDC 0600         		move.w	#$A3A3,leds			; diagnostics
                                             
    211 FFFC00CA 33FC 7FFF 0001 0002         		move.w	#WHITE,fgcolor		; set text colors
    212 FFFC00D2 33FC 000F 0001 0004         		move.w	#DARK_BLUE,bkcolor
                                             
                                             		; Write startup message to screen
                                             
    216 FFFC00DA 41F9 FFFC 16B5              		lea		msg_start,a0
    217 FFFC00E0 7200                        		moveq	#0,d1					; xpos
    218 FFFC00E2 7400                        		moveq	#0,d2					; ypos
    219 FFFC00E4 6100 03F4                   		bsr		DispStringAt
    220 FFFC00E8 33FC A4A4 FFDC 0600         		move.w	#$A4A4,leds			; diagnostics
                                             
    222 FFFC00F0 47F9 FFFC 00FA              		lea		j1,a3
    223 FFFC00F6 6000 0FF6                   		bra		ramtest
    224 FFFC00FA                             j1:
    225 FFFC00FA 60FE                        		bra		j1
                                             
    227 FFFC00FC                             CRLF:
    228 FFFC00FC 2F01                        		move.l	d1,-(a7)
    229 FFFC00FE 123C 000D                   		move.b	#'\r',d1
    230 FFFC0102 4EB9 FFFC 0146              		jsr		DisplayChar
    231 FFFC0108 123C 000A                   		move.b	#'\n',d1
    232 FFFC010C 4EB9 FFFC 0146              		jsr		DisplayChar
    233 FFFC0112 221F                        		move.l	(a7)+,d1
    234 FFFC0114 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Calculate screen memory location from CursorRow,CursorCol.
                                             ; Destroys d0,d2,a0
                                             ;------------------------------------------------------------------------------
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 5
bootrom.asm
                                             ;
    241 FFFC0116                             CalcScreenLoc:
    242 FFFC0116 1039 0001 0418              		move.b	CursorRow,d0		; compute screen location
    243 FFFC011C 0240 007F                   		andi.w	#0x7f,d0
    244 FFFC0120 1439 0001 041B              		move.b	TextCols,d2
    245 FFFC0126 4882                        		ext.w	d2
    246 FFFC0128 C0C2                        		mulu.w	d2,d0
    247 FFFC012A 1439 0001 0419              		move.b	CursorCol,d2
    248 FFFC0130 0242 00FF                   		andi.w	#0xff,d2
    249 FFFC0134 D042                        		add.w	d2,d0
    250 FFFC0136 33C0 0001 041C              		move.w	d0,TextCurpos
    251 FFFC013C D0B9 0001 0420              		add.l	TextScr,d0
    252 FFFC0142 2040                        		move.l	d0,a0				; a0 = screen location
    253 FFFC0144 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display a character on the screen
                                             ; d1.b = char to display
                                             ;------------------------------------------------------------------------------
                                             ;
    260 FFFC0146                             DisplayChar:
    261 FFFC0146 0C01 000D                   		cmpi.b	#'\r',d1			; carriage return ?
    262 FFFC014A 6608                        		bne.s	dccr
    263 FFFC014C 4239 0001 0419              		clr.b	CursorCol			; just set cursor column to zero on a CR
    264 FFFC0152 4E75                        		rts
    265 FFFC0154                             dccr:
    266 FFFC0154 0C01 0091                   		cmpi.b	#0x91,d1			; cursor right ?
    267 FFFC0158 6616                        		bne.s   dcx6
    268 FFFC015A 0C39 004F 0001 0419         		cmpi.b	#79,CursorCol
    269 FFFC0162 670A                        		beq.s	dcx7
    270 FFFC0164 5239 0001 0419              		addi.b	#1,CursorCol
    271 FFFC016A 6000 02E2                   		bra		DispCursor
    272 FFFC016E                             dcx7:
    273 FFFC016E 4E75                        		rts
    274 FFFC0170                             dcx6:
    275 FFFC0170 0C01 0090                   		cmpi.b	#0x90,d1			; cursor up ?
    276 FFFC0174 6614                        		bne.s	dcx8
    277 FFFC0176 0C39 0000 0001 0418         		cmpi.b	#0,CursorRow
    278 FFFC017E 67EE                        		beq.s	dcx7
    279 FFFC0180 5339 0001 0418              		subi.b	#1,CursorRow
    280 FFFC0186 6000 02C6                   		bra		DispCursor
    281 FFFC018A                             dcx8:
    282 FFFC018A 0C01 0093                   		cmpi.b	#0x93,d1			; cursor left?
    283 FFFC018E 6614                        		bne.s	dcx9
    284 FFFC0190 0C39 0000 0001 0419         		cmpi.b	#0,CursorCol
    285 FFFC0198 67D4                        		beq.s	dcx7
    286 FFFC019A 5339 0001 0419              		subi.b	#1,CursorCol
    287 FFFC01A0 6000 02AC                   		bra		DispCursor
    288 FFFC01A4                             dcx9:
    289 FFFC01A4 0C01 0092                   		cmpi.b	#0x92,d1			; cursor down ?
    290 FFFC01A8 6614                        		bne		dcx10
    291 FFFC01AA 0C39 003F 0001 0418         		cmpi.b	#63,CursorRow
    292 FFFC01B2 67BA                        		beq		dcx7
    293 FFFC01B4 5279 0001 0418              		addi.w	#1,CursorRow
    294 FFFC01BA 6000 0292                   		bra		DispCursor
    295 FFFC01BE                             dcx10:
    296 FFFC01BE 0C01 0094                   		cmpi.b	#0x94,d1			; cursor home ?
    297 FFFC01C2 661E                        		bne.s	dcx11
    298 FFFC01C4 0C39 0000 0001 0419         		cmpi.b	#0,CursorCol
    299 FFFC01CC 670A                        		beq.s	dcx12
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 6
bootrom.asm
    300 FFFC01CE 4239 0001 0419              		clr.b	CursorCol
    301 FFFC01D4 6000 0278                   		bra		DispCursor
    302 FFFC01D8                             dcx12:
    303 FFFC01D8 4239 0001 0418              		clr.b	CursorRow
    304 FFFC01DE 6000 026E                   		bra		DispCursor
    305 FFFC01E2                             dcx11:
    306 FFFC01E2 48E7 E080                   		movem.l	d0/d1/d2/a0,-(a7)
    307 FFFC01E6 0C01 0099                   		cmpi.b	#0x99,d1			; delete ?
    308 FFFC01EA 660C                        		bne.s	dcx13
    309 FFFC01EC 6100 FF28                   		bsr		CalcScreenLoc
    310 FFFC01F0 1039 0001 0419              		move.b	CursorCol,d0
    311 FFFC01F6 6020                        		bra.s	dcx5
    312 FFFC01F8                             dcx13:
    313 FFFC01F8 0C01 0000                   		cmpi.b	#CTRLH,d1			; backspace ?
    314 FFFC01FC 6632                        		bne.s   dcx3
    315 FFFC01FE 0C39 0000 0001 0419         		cmpi.b	#0,CursorCol
    316 FFFC0206 6752                        		beq.s   dcx4
    317 FFFC0208 5339 0001 0419              		subi.b	#1,CursorCol
    318 FFFC020E 6100 FF06                   		bsr		CalcScreenLoc		; a0 = screen location
    319 FFFC0212 1039 0001 0419              		move.b	CursorCol,d0
    320 FFFC0218                             dcx5:
    321 FFFC0218 10E8 0001                   		move.b	1(a0),(a0)+
    322 FFFC021C 5200                        		addi.b	#1,d0
    323 FFFC021E B039 0001 041B              		cmp.b	TextCols,d0
    324 FFFC0224 65F2                        		blo.s	dcx5
    325 FFFC0226 103C 0020                   		move.b	#32,d0
    326 FFFC022A 1140 FFFF                   		move.b	d0,-1(a0)
    327 FFFC022E 602A                        		bra.s	dcx4
    328 FFFC0230                             dcx3:
    329 FFFC0230 0C01 000A                   		cmpi.b	#'\n',d1		; linefeed ?
    330 FFFC0234 671C                        		beq.s	dclf
                                             
    332 FFFC0236 6100 FEDE                   		bsr		CalcScreenLoc	; a0 = screen location
                                             		;bsr		AsciiToScreen	; convert ascii char to screen char
    334 FFFC023A 1081                        		move.b	d1,(a0)
    335 FFFC023C 1001                        		move.b	d1,d0
    336 FFFC023E 4880                        		ext.w	d0
    337 FFFC0240 6100 01B2                   		bsr		DispChar
    338 FFFC0244 6100 001A                   		bsr		IncCursorPos
    339 FFFC0248 6100 0204                   		bsr		DispCursor
    340 FFFC024C 4CDF 0107                   		movem.l	(a7)+,d0/d1/d2/a0
    341 FFFC0250 4E75                        		rts
    342 FFFC0252                             dclf:
    343 FFFC0252 6100 002C                   		bsr		IncCursorRow
    344 FFFC0256 6100 01F6                   		bsr		DispCursor
    345 FFFC025A                             dcx4:
    346 FFFC025A 4CDF 0107                   		movem.l	(a7)+,d0/d1/d2/a0		; get back a0
    347 FFFC025E 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Increment the cursor position, scroll the screen if needed.
                                             ;------------------------------------------------------------------------------
                                             ;
    353 FFFC0260                             IncCursorPos:
    354 FFFC0260 5279 0001 041C              		addi.w	#1,TextCurpos
    355 FFFC0266 5239 0001 0419              		addi.b	#1,CursorCol
    356 FFFC026C 1039 0001 041B              		move.b	TextCols,d0
    357 FFFC0272 B039 0001 0419              		cmp.b	CursorCol,d0
    358 FFFC0278 643A                        		bhs.s	icc1
    359 FFFC027A 4239 0001 0419              		clr.b	CursorCol
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 7
bootrom.asm
    360 FFFC0280                             IncCursorRow:
    361 FFFC0280 5239 0001 0418              		addi.b	#1,CursorRow
    362 FFFC0286 1039 0001 041A              		move.b	TextRows,d0
    363 FFFC028C B039 0001 0418              		cmp.b	CursorRow,d0
    364 FFFC0292 6220                        		bhi.s	icc1
    365 FFFC0294 1039 0001 041A              		move.b	TextRows,d0
    366 FFFC029A 13C0 0001 0418              		move.b	d0,CursorRow		; in case CursorRow is way over
    367 FFFC02A0 5339 0001 0418              		subi.b	#1,CursorRow
    368 FFFC02A6 4880                        		ext.w	d0
    369 FFFC02A8 E340                        		asl.w	#1,d0
    370 FFFC02AA 9179 0001 041C              		sub.w	d0,TextCurpos
    371 FFFC02B0 6100 0B94                   		bsr		ScrollUp
    372 FFFC02B4                             icc1:
    373 FFFC02B4 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display a string on the screen.
                                             ;------------------------------------------------------------------------------
                                             ;
    379 FFFC02B6                             DisplayString:
    380 FFFC02B6 48E7 C040                   		movem.l	d0/d1/a1,-(a7)
    381 FFFC02BA                             dspj1:
    382 FFFC02BA 4281                        		clr.l	d1				; clear upper bits of d1
    383 FFFC02BC 1219                        		move.b	(a1)+,d1		; move string char into d1
    384 FFFC02BE 0C01 0000                   		cmpi.b	#0,d1			; is it end of string ?
    385 FFFC02C2 6706                        		beq		dsret			
    386 FFFC02C4 6100 FE80                   		bsr		DisplayChar		; display character
    387 FFFC02C8 60F0                        		bra		dspj1			; go back for next character
    388 FFFC02CA                             dsret:
    389 FFFC02CA 4CDF 0203                   		movem.l	(a7)+,d0/d1/a1
    390 FFFC02CE 4E75                        		rts
                                             
    392 FFFC02D0                             DisplayStringCRLF:
    393 FFFC02D0 6100 FFE4                   		bsr		DisplayString
    394 FFFC02D4 6000 FE26                   		bra		CRLF
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display a string on the screen. Stop at 255 chars, or NULL or D1.W
                                             ;------------------------------------------------------------------------------
                                             ;
    400 FFFC02D8                             DisplayString1:
    401 FFFC02D8 48E7 C040                   		movem.l	d0/d1/a1,-(a7)
    402 FFFC02DC 0241 00FF                   		andi.w	#255,d1			; max 255 chars
    403 FFFC02E0 2001                        		move.l	d1,d0
    404 FFFC02E2                             dspj11:
    405 FFFC02E2 1219                        		move.b	(a1)+,d1		; move string char into d1
    406 FFFC02E4 0C01 0000                   		cmpi.b	#0,d1			; is it end of string ?
    407 FFFC02E8 6708                        		beq		dsret1			
    408 FFFC02EA 6100 FE5A                   		bsr		DisplayChar		; display character
    409 FFFC02EE 57C8 FFF2                   		dbeq	d0,dspj11		; go back for next character
    410 FFFC02F2                             dsret1:
    411 FFFC02F2 4CDF 0203                   		movem.l	(a7)+,d0/d1/a1
    412 FFFC02F6 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display a string on the screen. Stop at 255 chars, or NULL or D1.W
                                             ; end string with CR,LF
                                             ;------------------------------------------------------------------------------
                                             ;
    419 FFFC02F8                             DisplayString0:
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 8
bootrom.asm
    420 FFFC02F8 6100 FFDE                   		bsr		DisplayString1
    421 FFFC02FC 6000 FDFE                   		bra		CRLF
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Dispatch cursor functions
                                             ;------------------------------------------------------------------------------
                                             ;
    427 FFFC0300                             Cursor1:
    428 FFFC0300 0C41 00FF                   		cmpi.w	#0x00ff,d1
    429 FFFC0304 670E                        		beq		GetCursorPos
    430 FFFC0306 0C41 FF00                   		cmpi.w	#0xFF00,d1
    431 FFFC030A 6718                        		beq		SetCursorPos
    432 FFFC030C 4EB9 FFFC 0E06              		jsr		ClearScreen
    433 FFFC0312 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Get the cursor position.
                                             ; d1.b0 = row
                                             ; d1.b1 = col
                                             ;------------------------------------------------------------------------------
                                             ;
    441 FFFC0314                             GetCursorPos:
    442 FFFC0314 1239 0001 0419              		move.b	CursorCol,d1
    443 FFFC031A E141                        		asl.w	#8,d1
    444 FFFC031C 1239 0001 0418              		move.b	CursorRow,d1
    445 FFFC0322 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Set the position of the cursor, update the linear screen pointer.
                                             ; d1.b0 = row
                                             ; d1.b1 = col
                                             ;------------------------------------------------------------------------------
                                             ;
    453 FFFC0324                             SetCursorPos:
    454 FFFC0324 48E7 6000                   		movem.l	d1/d2,-(a7)
    455 FFFC0328 13C1 0001 0418              		move.b	d1,CursorRow
    456 FFFC032E E049                        		lsr.w	#8,d1
    457 FFFC0330 13C1 0001 0419              		move.b	d1,CursorCol
    458 FFFC0336 1239 0001 0418              		move.b	CursorRow,d1
    459 FFFC033C 4881                        		ext.w	d1
    460 FFFC033E 1439 0001 041B              		move.b	TextCols,d2
    461 FFFC0344 4882                        		ext.w	d2
    462 FFFC0346 C2C2                        		mulu.w	d2,d1
    463 FFFC0348 1439 0001 0419              		move.b	CursorCol,d2
    464 FFFC034E D242                        		add.w	d2,d1
    465 FFFC0350 33C1 0001 041C              		move.w	d1,TextCurpos
    466 FFFC0356                             scp1:
    467 FFFC0356 4CDF 0006                   		movem.l	(a7)+,d1/d2
    468 FFFC035A 4E75                        		rts
                                             
                                             
                                             ;------------------------------------------------------------------------------
                                             ; clear screen	
                                             ;
                                             ; Trashes:
                                             ;	a0,d0,d1
                                             ;------------------------------------------------------------------------------
                                             
    478 FFFC035C                             BootClearScreen:
    479 FFFC035C 207C FF80 0000              		move.l	#VDGBUF,A0
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 9
bootrom.asm
    480 FFFC0362 700F                        		moveq	#DARK_BLUE,D0			; dark blue
    481 FFFC0364 223C 0001 4000              		move.l	#320*256,D1				; number of pixels
    482 FFFC036A                             .loop1:
    483 FFFC036A 30C0                        		move.w	d0,(a0)+				; store it to the screen
    484 FFFC036C 5381                        		sub.l	#1,d1					; can't use dbra here
    485 FFFC036E 66FA                        		bne.s	.loop1
    486 FFFC0370 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; copy font to VDG ram
                                             ;
                                             ; The font address is 1/2 of the memory address that the cpu sees because
                                             ; the AV controller only deals with word accesses.
                                             ;
                                             ; Trashes:
                                             ;	a0,a1,a6,d0,d1
                                             ;------------------------------------------------------------------------------
                                             
    498 FFFC0372                             BootCopyFont:
    499 FFFC0372 2C7C FFE0 0000              		movea.l	#VDGREG,a6
                                             		; Setup font table
    501 FFFC0378 2D7C 0005 C000 0590         		move.l	#$5C000,$590(a6)	; set font table address
    502 FFFC0380 33FC 8707 FF8B 8000         		move.w	#$8707,$FF8B8000	; set font fixed, width, height
    503 FFFC0388 227C FF8B 8008              		movea.l	#$FF8B8008,a1		; font table address
    504 FFFC038E 23FC 0005 C004 FF8B 8004    		move.l	#$5C004,$FF8B8004	; set bitmap address (directly follows)
                                             
                                             
                                             ;		move.w	#$0707,fntsz		; set font size
    508 FFFC0398 41F9 FFFC 16CD              		lea		font8,a0
    509 FFFC039E 223C 0000 1000              		move.l	#8*512,d1			; 512 chars * 8 bytes per char
                                             
    511 FFFC03A4 3D7C 0000 0594              		move.w	#0,$594(a6)			; select font id (0)
                                             
    513 FFFC03AA 7000                        		moveq	#0,d0				; zero out high order bits
    514 FFFC03AC                             cpyfnt:
    515 FFFC03AC 1018                        		move.b	(a0)+,d0			; get a byte
    516 FFFC03AE 32C0                        		move.w	d0,(a1)+			; store in font table
    517 FFFC03B0 51C9 FFFA                   		dbra	d1,cpyfnt
    518 FFFC03B4 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Parameters:
                                             ;	d0.w		character to display
                                             ;	d1.w		x position
                                             ;	d2.w		y position
                                             ; Trashes:
                                             ;	a6
                                             ;------------------------------------------------------------------------------
                                             
    529 FFFC03B6                             DispCharAt:
    530 FFFC03B6 2C7C FFE0 0000              		move.l	#VDGREG,a6
    531 FFFC03BC 4840                        		swap	d0						; save off d0 low
    532 FFFC03BE                             .0001:									; wait for character que to empty
    533 FFFC03BE 302E 042C                   		move.w	$42C(a6),d0			; read character queue index into d0
    534 FFFC03C2 B07C 001C                   		cmp.w	#28,d0					; allow up 28 entries to be in progress
    535 FFFC03C6 64F6                        		bhs.s	.0001					; branch if too many chars queued
    536 FFFC03C8 4840                        		swap	d0						; get back d0 low
    537 FFFC03CA 3D40 0420                   		move.w	d0,$420(a6)			; set char code
    538 FFFC03CE 3D79 0001 0002 0422         		move.w	fgcolor,$422(a6)		; set fg color
    539 FFFC03D6 3D79 0001 0004 0424         		move.w	bkcolor,$424(a6)		; set bk color
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 10
bootrom.asm
    540 FFFC03DE 3D41 0426                   		move.w	d1,$426(a6)			; set x pos
    541 FFFC03E2 3D42 0428                   		move.w	d2,$428(a6)			; set y pos
    542 FFFC03E6 3D7C 0707 042A              		move.w	#$0707,$42A(a6)		; set font x,y extent
    543 FFFC03EC 3D7C 0000 042E              		move.w	#0,$42E(a6)			; pulse character queue write signal
    544 FFFC03F2 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Parameters:
                                             ;	d0.w		character to display
                                             ;------------------------------------------------------------------------------
                                             
    551 FFFC03F4                             DispChar:
    552 FFFC03F4 48E7 4002                   		movem.l	d1/a6,-(a7)
    553 FFFC03F8 2C7C FFE0 0000              		move.l	#VDGREG,a6
    554 FFFC03FE 4840                        		swap	d0					; save off d0 low
    555 FFFC0400                             .0001:								; wait for character que to empty
    556 FFFC0400 302E 042C                   		move.w	$42C(a6),d0			; read character queue index into d0
    557 FFFC0404 B07C 001C                   		cmp.w	#28,d0				; allow up 28 entries to be in progress
    558 FFFC0408 64F6                        		bhs.s	.0001				; branch if too many chars queued
    559 FFFC040A 4840                        		swap	d0					; get back d0 low
    560 FFFC040C 3D40 0420                   		move.w	d0,$420(a6)			; set char code
    561 FFFC0410 3D79 0001 0002 0422         		move.w	fgcolor,$422(a6)	; set fg color
    562 FFFC0418 3D79 0001 0004 0424         		move.w	bkcolor,$424(a6)	; set bk color
    563 FFFC0420 1239 0001 0419              		move.b	CursorCol,d1
    564 FFFC0426 4881                        		ext.w	d1
    565 FFFC0428 E741                        		asl.w	#3,d1
    566 FFFC042A 3D41 0426                   		move.w	d1,$426(a6)			; set x pos
    567 FFFC042E 1239 0001 0418              		move.b	CursorRow,d1
    568 FFFC0434 4881                        		ext.w	d1
    569 FFFC0436 E741                        		asl.w	#3,d1
    570 FFFC0438 3D41 0428                   		move.w	d1,$428(a6)			; set y pos
    571 FFFC043C 3D7C 0707 042A              		move.w	#$0707,$42A(a6)		; set font x,y extent
    572 FFFC0442 3D7C 0000 042E              		move.w	#0,$42E(a6)			; pulse character queue write signal
    573 FFFC0448 4CDF 4002                   		movem.l	(a7)+,d1/a6
    574 FFFC044C 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ;------------------------------------------------------------------------------
                                             
    579 FFFC044E                             DispCursor:
    580 FFFC044E 48E7 4002                   		movem.l	d1/a6,-(a7)
    581 FFFC0452 2C7C FFE0 0000              		move.l	#VDGREG,a6
    582 FFFC0458 3D7C 0A0A 0444              		move.w	#$0A0A,VDG_CURSZ(a6)
    583 FFFC045E 1239 0001 0419              		move.b	CursorCol,d1
    584 FFFC0464 4881                        		ext.w	d1
    585 FFFC0466 E741                        		asl.w	#3,d1
    586 FFFC0468 5341                        		sub.w	#1,d1
    587 FFFC046A 3D41 0440                   		move.w	d1,VDG_CURX(a6)
    588 FFFC046E 1239 0001 0418              		move.b	CursorRow,d1
    589 FFFC0474 4881                        		ext.w	d1
    590 FFFC0476 E741                        		asl.w	#3,d1
    591 FFFC0478 5341                        		sub.w	#1,d1
    592 FFFC047A 3D41 0442                   		move.w	d1,VDG_CURY(a6)
    593 FFFC047E 4CDF 4002                   		movem.l	(a7)+,d1/a6
    594 FFFC0482 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Cursor Color
                                             ;
                                             ;	irrrrrgggggbbbbb
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 11
bootrom.asm
                                             ;	|  |    |    |
                                             ;   |  |    |    +-- blue
                                             ;	|  |    +------- green
                                             ;   |  +------------ red
                                             ;   +--------------- invert video (rgb ignored)
                                             ;
                                             ;
                                             ;   flash rate
                                             ;		 1xxxx = no flash
                                             ;        00001 = 1/8 vsync (7.5 Hz)
                                             ;	     00010 = 1/16 vsync (3.75 Hz)
                                             ;        00100 = 1/32 vsync (1.875 Hz)
                                             ;------------------------------------------------------------------------------
                                             
    614 FFFC0484                             SetCursorColor:
    615 FFFC0484 2F0E                        		move.l  a6,-(a7)
    616 FFFC0486 2C7C FFE0 0000              		move.l	#VDGREG,a6
    617 FFFC048C 3D7C 7FFF 0446              		move.w	#%0111111111111111,VDG_CURCLR(a6)
    618 FFFC0492 3D7C 0004 0448              		move.w	#%00100,VDG_CURFLSH(a6)
    619 FFFC0498 2C5F                        		move.l	(a7)+,a6
    620 FFFC049A 4E75                        		rts
                                             		
                                             ;------------------------------------------------------------------------------
                                             ; Cursor Image
                                             ; Cursor may be up to 16x16 pixels.
                                             ;------------------------------------------------------------------------------
                                             
    627 FFFC049C                             SetCursorImage:
    628 FFFC049C 48E7 4082                   		movem.l	d1/a0/a6,-(a7)
    629 FFFC04A0 41F9 FFFC 04BA              		lea		CursorImage,a0
    630 FFFC04A6 2C7C FFE0 0460              		move.l	#VDGREG+VDG_CURIMG,a6
    631 FFFC04AC 720F                        		moveq	#15,d1
    632 FFFC04AE                             .0001:
    633 FFFC04AE 3CD8                        		move.w	(a0)+,(a6)+
    634 FFFC04B0 51C9 FFFC                   		dbra	d1,.0001
    635 FFFC04B4 4CDF 4102                   		movem.l	(a7)+,d1/a0/a6
    636 FFFC04B8 4E75                        		rts
                                             
                                             	align	2
    639 FFFC04BA                             CursorImage:
    640 FFFC04BA 03FF                        	dc.w	%1111111111
    641 FFFC04BC 0201                        	dc.w	%1000000001
    642 FFFC04BE 0201                        	dc.w	%1000000001
    643 FFFC04C0 0201                        	dc.w	%1000000001
    644 FFFC04C2 0201                        	dc.w	%1000000001
    645 FFFC04C4 0201                        	dc.w	%1000000001
    646 FFFC04C6 0201                        	dc.w	%1000000001
    647 FFFC04C8 0201                        	dc.w	%1000000001
    648 FFFC04CA 0231                        	dc.w	%1000110001
    649 FFFC04CC 03FF                        	dc.w	%1111111111
    650 FFFC04CE 0000                        	dc.w	%0000000000
    651 FFFC04D0 0000                        	dc.w	%0000000000
    652 FFFC04D2 0000                        	dc.w	%0000000000
    653 FFFC04D4 0000                        	dc.w	%0000000000
    654 FFFC04D6 0000                        	dc.w	%0000000000
    655 FFFC04D8 0000                        	dc.w	%0000000000
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Parameters:
                                             ;	a0			pointer to string
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 12
bootrom.asm
                                             ;	d1.w		x position
                                             ;	d2.w		y position
                                             ; Returns:
                                             ;	a0			points to byte after NULL character
                                             ;	d1.w		updated x position
                                             ; Trashes:
                                             ;	d0,a6
                                             ;------------------------------------------------------------------------------
                                             
    669 FFFC04DA                             DispStringAt:
    670 FFFC04DA                             .0003:
    671 FFFC04DA 7000                        		moveq	#0,d0					; zero out high order bits
    672 FFFC04DC 1018                        		move.b	(a0)+,d0				; get character from string into d0
    673 FFFC04DE 6708                        		beq.s	.0002					; end of string ?
    674 FFFC04E0 6100 FED4                   		bsr		DispCharAt
    675 FFFC04E4 5041                        		add.w	#8,d1					; increment xpos
    676 FFFC04E6 60F2                        		bra.s	.0003
    677 FFFC04E8                             .0002:
    678 FFFC04E8 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display nybble in D1.B
                                             ;------------------------------------------------------------------------------
                                             ;
    684 FFFC04EA                             DisplayNybble:
    685 FFFC04EA 3F01                        		move.w	d1,-(a7)
    686 FFFC04EC 0201 000F                   		andi.b	#0xF,d1
    687 FFFC04F0 0601 0030                   		addi.b	#'0',d1
    688 FFFC04F4 0C01 0039                   		cmpi.b	#'9',d1
    689 FFFC04F8 6302                        		bls.s	dispnyb1
    690 FFFC04FA 5E01                        		addi.b	#7,d1
    691 FFFC04FC                             dispnyb1:
    692 FFFC04FC 6100 FC48                   		bsr		DisplayChar
    693 FFFC0500 321F                        		move.w	(a7)+,d1
    694 FFFC0502 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display the byte in D1.B
                                             ;------------------------------------------------------------------------------
                                             ;
    700 FFFC0504                             DisplayByte:
    701 FFFC0504 3F01                        		move.w	d1,-(a7)
    702 FFFC0506 E819                        		ror.b	#4,d1
    703 FFFC0508 6100 FFE0                   		bsr		DisplayNybble
    704 FFFC050C E919                        		rol.b	#4,d1
    705 FFFC050E 6100 FFDA                   		bsr		DisplayNybble
    706 FFFC0512 321F                        		move.w	(a7)+,d1
    707 FFFC0514 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display the 32 bit word in D1.L
                                             ;------------------------------------------------------------------------------
                                             ;
    713 FFFC0516                             DisplayWord:
    714 FFFC0516 E199                        		rol.l	#8,d1
    715 FFFC0518 6100 FFEA                   		bsr		DisplayByte
    716 FFFC051C E199                        		rol.l	#8,d1
    717 FFFC051E 6100 FFE4                   		bsr		DisplayByte
    718 FFFC0522 E199                        		rol.l	#8,d1
    719 FFFC0524 6100 FFDE                   		bsr		DisplayByte
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 13
bootrom.asm
    720 FFFC0528 E199                        		rol.l	#8,d1
    721 FFFC052A 6100 FFD8                   		bsr		DisplayByte
    722 FFFC052E 4E75                        		rts
                                             
    724 FFFC0530                             DisplayMem:
    725 FFFC0530 123C 003A                   		move.b	#':',d1
    726 FFFC0534 4EB9 FFFC 0146              		jsr		DisplayChar
    727 FFFC053A 2208                        		move.l	a0,d1
    728 FFFC053C 4EB9 FFFC 0516              		jsr		DisplayWord
    729 FFFC0542 7407                        		moveq	#7,d2
    730 FFFC0544                             dspmem1:
    731 FFFC0544 123C 0020                   		move.b	#' ',d1
    732 FFFC0548 4EB9 FFFC 0146              		jsr		DisplayChar
    733 FFFC054E 1218                        		move.b	(a0)+,d1
    734 FFFC0550 4EB9 FFFC 0504              		jsr		DisplayByte
    735 FFFC0556 51CA FFEC                   		dbra	d2,dspmem1
    736 FFFC055A 4EF9 FFFC 00FC              		jmp		CRLF
                                             
                                             ;==============================================================================
                                             ; Keyboard stuff
                                             ;
                                             ; KeyState2_
                                             ; 876543210
                                             ; ||||||||+ = shift
                                             ; |||||||+- = alt
                                             ; ||||||+-- = control
                                             ; |||||+--- = numlock
                                             ; ||||+---- = capslock
                                             ; |||+----- = scrolllock
                                             ; ||+------ =
                                             ; |+------- = 
                                             ; +-------- = extended
                                             ;
                                             ;==============================================================================
                                             
    755 FFFC0560                             _KeybdGetStatus:
    756 FFFC0560 1239 FFDC 0001              		move.b	KEYBD+1,d1
    757 FFFC0566 4E75                        		rts
                                             
                                             ; Get the scancode from the keyboard port
                                             ;
    761 FFFC0568                             _KeybdGetScancode:
    762 FFFC0568 7200                        		moveq	#0,d1
    763 FFFC056A 1239 FFDC 0000              		move.b	KEYBD,d1				; get the scan code
    764 FFFC0570 13FC 0000 FFDC 0001         		move.b	#0,KEYBD+1				; clear receive register
    765 FFFC0578 4E75                        		rts
                                             
                                             ; Recieve a byte from the keyboard, used after a command is sent to the
                                             ; keyboard in order to wait for a response.
                                             ;
    770 FFFC057A                             KeybdRecvByte:
    771 FFFC057A 2F03                        		move.l	d3,-(a7)
    772 FFFC057C 363C 0064                   		move.w	#100,d3		; wait up to 1s
    773 FFFC0580                             .0003:
    774 FFFC0580 6100 FFDE                   		bsr		_KeybdGetStatus	; wait for response from keyboard
    775 FFFC0584 4A01                        		tst.b	d1
    776 FFFC0586 6B0E                        		bmi		.0004		; is input buffer full ? yes, branch
    777 FFFC0588 6100 02C4                   		bsr		Wait10ms		; wait a bit
    778 FFFC058C 51CB FFF2                   		dbra	d3,.0003	; go back and try again
    779 FFFC0590 261F                        		move.l	(a7)+,d3
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 14
bootrom.asm
    780 FFFC0592 72FF                        		moveq	#-1,d1			; return -1
    781 FFFC0594 4E75                        		rts
    782 FFFC0596                             .0004:
    783 FFFC0596 6100 FFD0                   		bsr		_KeybdGetScancode
    784 FFFC059A 261F                        		move.l	(a7)+,d3
    785 FFFC059C 4E75                        		rts
                                             
                                             
                                             ; Wait until the keyboard transmit is complete
                                             ; Returns .CF = 1 if successful, .CF=0 timeout
                                             ;
    791 FFFC059E                             KeybdWaitTx:
    792 FFFC059E 48E7 3000                   		movem.l	d2/d3,-(a7)
    793 FFFC05A2 7664                        		moveq	#100,d3		; wait a max of 1s
    794 FFFC05A4                             .0001:
    795 FFFC05A4 6100 FFBA                   		bsr		_KeybdGetStatus
    796 FFFC05A8 0801 0006                   		btst	#6,d1		; check for transmit complete bit
    797 FFFC05AC 6610                        		bne	    .0002		; branch if bit set
    798 FFFC05AE 6100 029E                   		bsr		Wait10ms		; delay a little bit
    799 FFFC05B2 51CB FFF0                   		dbra	d3,.0001	; go back and try again
    800 FFFC05B6 4CDF 000C                   		movem.l	(a7)+,d2/d3
    801 FFFC05BA 72FF                        		moveq	#-1,d1		; return -1
    802 FFFC05BC 4E75                        		rts
    803 FFFC05BE                             .0002:
    804 FFFC05BE 4CDF 000C                   		movem.l	(a7)+,d2/d3
    805 FFFC05C2 7200                        		moveq	#0,d1		; return 0
    806 FFFC05C4 4E75                        		rts
                                             
                                             
                                             ;------------------------------------------------------------------------------
                                             ; get key pending status into d1.b
                                             ;------------------------------------------------------------------------------
                                             ;
    813 FFFC05C6                             CheckForKey:
    814 FFFC05C6 1239 FFDC 0001              		move.b	KEYBD+1,d1
    815 FFFC05CC 6A06                        		bpl.s	cfk1
    816 FFFC05CE 123C 0001                   		move.b	#1,d1
    817 FFFC05D2 4E75                        		rts
    818 FFFC05D4                             cfk1:
    819 FFFC05D4 4201                        		clr.b	d1
    820 FFFC05D6 4E75                        		rts
                                             
    822 FFFC05D8                             GetKey:
    823 FFFC05D8 6100 0022                   		bsr		KeybdGetCharWait
    824 FFFC05DC 0C39 0000 0001 0424         		cmpi.b	#0,KeybdEcho	; is keyboard echo on ?
    825 FFFC05E4 670C                        		beq.s	gk1
    826 FFFC05E6 0C01 000D                   		cmpi.b	#'\r',d1		; convert CR keystroke into CRLF
    827 FFFC05EA 6700 FB10                   		beq		CRLF
    828 FFFC05EE 6100 FB56                   		bsr		DisplayChar
    829 FFFC05F2                             gk1:
    830 FFFC05F2 4E75                        		rts
                                             
                                             
    833 FFFC05F4                             KeybdGetCharNoWait:
    834 FFFC05F4 4239 0001 0425              		clr.b	KeybdWaitFlag
    835 FFFC05FA 6008                        		bra		KeybdGetChar
                                             
    837 FFFC05FC                             KeybdGetCharWait:
    838 FFFC05FC 13FC FFFF 0001 0425         		move.b	#-1,KeybdWaitFlag
                                             
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 15
bootrom.asm
    840 FFFC0604                             KeybdGetChar:
    841 FFFC0604 48E7 3080                   		movem.l	d2/d3/a0,-(a7)
    842 FFFC0608                             .0003:
    843 FFFC0608 6100 FF56                   		bsr		_KeybdGetStatus			; check keyboard status for key available
    844 FFFC060C 6B10                        		bmi		.0006					; yes, go process
    845 FFFC060E 4A39 0001 0425              		tst.b	KeybdWaitFlag			; are we willing to wait for a key ?
    846 FFFC0614 6BF2                        		bmi		.0003					; yes, branch back
    847 FFFC0616 4CDF 010C                   		movem.l	(a7)+,d2/d3/a0
    848 FFFC061A 72FF                        		moveq	#-1,d1					; flag no char available
    849 FFFC061C 4E75                        		rts
    850 FFFC061E                             .0006:
    851 FFFC061E 6100 FF48                   		bsr		_KeybdGetScancode
    852 FFFC0622                             .0001:
    853 FFFC0622 33FC 0001 FFDC 0600         		move.w	#1,leds
    854 FFFC062A B23C 00F0                   		cmp.b	#SC_KEYUP,d1
    855 FFFC062E 6700 00CA                   		beq		.doKeyup
    856 FFFC0632 B23C 00E0                   		cmp.b	#SC_EXTEND,d1
    857 FFFC0636 6700 00CE                   		beq		.doExtend
    858 FFFC063A B23C 0014                   		cmp.b	#SC_CTRL,d1
    859 FFFC063E 6700 00D2                   		beq		.doCtrl
    860 FFFC0642 B23C 0012                   		cmp.b	#SC_LSHIFT,d1
    861 FFFC0646 6700 0134                   		beq		.doShift
    862 FFFC064A B23C 0059                   		cmp.b	#SC_RSHIFT,d1
    863 FFFC064E 6700 012C                   		beq		.doShift
    864 FFFC0652 B23C 0077                   		cmp.b	#SC_NUMLOCK,d1
    865 FFFC0656 6700 014C                   		beq		.doNumLock
    866 FFFC065A B23C 0058                   		cmp.b	#SC_CAPSLOCK,d1
    867 FFFC065E 6700 0154                   		beq		.doCapsLock
    868 FFFC0662 B23C 007E                   		cmp.b	#SC_SCROLLLOCK,d1
    869 FFFC0666 6700 015C                   		beq		.doScrollLock
    870 FFFC066A B23C 0011                   		cmp.b   #SC_ALT,d1
    871 FFFC066E 6700 00CA                   		beq     .doAlt
    872 FFFC0672 1439 0001 0426              		move.b	_KeyState1,d2			; check key up/down
    873 FFFC0678 13FC 0000 0001 0426         		move.b	#0,_KeyState1			; clear keyup status
    874 FFFC0680 4A02                        		tst.b	d2
    875 FFFC0682 6684                        		bne	    .0003					; ignore key up
    876 FFFC0684 B23C 000D                   		cmp.b   #SC_TAB,d1
    877 FFFC0688 6700 00D8                   		beq     .doTab
    878 FFFC068C                             .0013:
    879 FFFC068C 1439 0001 0427              		move.b	_KeyState2,d2
    880 FFFC0692 6A1E                        		bpl		.0010					; is it extended code ?
    881 FFFC0694 0202 007F                   		and.b	#$7F,d2					; clear extended bit
    882 FFFC0698 13C2 0001 0427              		move.b	d2,_KeyState2
    883 FFFC069E 13FC 0000 0001 0426         		move.b	#0,_KeyState1			; clear keyup
    884 FFFC06A6 41F9 FFFC 0ADE              		lea		_keybdExtendedCodes,a0
    885 FFFC06AC 1230 1000                   		move.b	(a0,d1.w),d1
    886 FFFC06B0 603A                        		bra		.0008
    887 FFFC06B2                             .0010:
    888 FFFC06B2 0802 0002                   		btst	#2,d2					; is it CTRL code ?
    889 FFFC06B6 6710                        		beq		.0009
    890 FFFC06B8 0241 007F                   		and.w	#$7F,d1
    891 FFFC06BC 41F9 FFFC 0A5E              		lea		_keybdControlCodes,a0
    892 FFFC06C2 1230 1000                   		move.b	(a0,d1.w),d1
    893 FFFC06C6 6024                        		bra		.0008
    894 FFFC06C8                             .0009:
    895 FFFC06C8 0802 0000                   		btst	#0,d2					; is it shift down ?
    896 FFFC06CC 670C                        		beq  	.0007
    897 FFFC06CE 41F9 FFFC 095E              		lea		_shiftedScanCodes,a0
    898 FFFC06D4 1230 1000                   		move.b	(a0,d1.w),d1
    899 FFFC06D8 6012                        		bra		.0008
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 16
bootrom.asm
    900 FFFC06DA                             .0007:
    901 FFFC06DA 41F9 FFFC 085E              		lea		_unshiftedScanCodes,a0
    902 FFFC06E0 1230 1000                   		move.b	(a0,d1.w),d1
    903 FFFC06E4 33FC 0202 FFDC 0600         		move.w	#$0202,leds
    904 FFFC06EC                             .0008:
    905 FFFC06EC 33FC 0303 FFDC 0600         		move.w	#$0303,leds
    906 FFFC06F4 4CDF 010C                   		movem.l	(a7)+,d2/d3/a0
    907 FFFC06F8 4E75                        		rts
    908 FFFC06FA                             .doKeyup:
    909 FFFC06FA 13FC FFFF 0001 0426         		move.b	#-1,_KeyState1
    910 FFFC0702 6000 FF04                   		bra		.0003
    911 FFFC0706                             .doExtend:
    912 FFFC0706 0039 0080 0001 0427         		or.b	#$80,_KeyState2
    913 FFFC070E 6000 FEF8                   		bra		.0003
    914 FFFC0712                             .doCtrl:
    915 FFFC0712 1239 0001 0426              		move.b	_KeyState1,d1
    916 FFFC0718 4239 0001 0426              		clr.b	_KeyState1
    917 FFFC071E 4A01                        		tst.b	d1
    918 FFFC0720 6A0C                        		bpl.s	.0004
    919 FFFC0722 08B9 0002 0001 0427         		bclr	#2,_KeyState2
    920 FFFC072A 6000 FEDC                   		bra		.0003
    921 FFFC072E                             .0004:
    922 FFFC072E 08F9 0002 0001 0427         		bset	#2,_KeyState2
    923 FFFC0736 6000 FED0                   		bra		.0003
    924 FFFC073A                             .doAlt:
    925 FFFC073A 1239 0001 0426              		move.b	_KeyState1,d1
    926 FFFC0740 4239 0001 0426              		clr.b	_KeyState1
    927 FFFC0746 4A01                        		tst.b	d1
    928 FFFC0748 6A0C                        		bpl		.0011
    929 FFFC074A 08B9 0001 0001 0427         		bclr	#1,_KeyState2
    930 FFFC0752 6000 FEB4                   		bra		.0003
    931 FFFC0756                             .0011:
    932 FFFC0756 08F9 0001 0001 0427         		bset	#1,_KeyState2
    933 FFFC075E 6000 FEA8                   		bra		.0003
    934 FFFC0762                             .doTab:
    935 FFFC0762 2F01                        		move.l	d1,-(a7)
    936 FFFC0764 1239 0001 0427              	    move.b  _KeyState2,d1
    937 FFFC076A 0801 0000                   	    btst	#0,d1                 ; is ALT down ?
    938 FFFC076E 6706                        	    beq     .0012
                                             ;    	inc     _iof_switch
    940 FFFC0770 221F                        	    move.l	(a7)+,d1
    941 FFFC0772 6000 FE94                   	    bra     .0003
    942 FFFC0776                             .0012:
    943 FFFC0776 221F                        	    move.l	(a7)+,d1
    944 FFFC0778 6000 FF12                   	    bra     .0013
    945 FFFC077C                             .doShift:
    946 FFFC077C 1239 0001 0426              		move.b	_KeyState1,d1
    947 FFFC0782 4239 0001 0426              		clr.b	_KeyState1
    948 FFFC0788 4A01                        		tst.b	d1
    949 FFFC078A 6A0C                        		bpl.s	.0005
    950 FFFC078C 08B9 0000 0001 0427         		bclr	#0,_KeyState2
    951 FFFC0794 6000 FE72                   		bra		.0003
    952 FFFC0798                             .0005:
    953 FFFC0798 08F9 0000 0001 0427         		bset	#0,_KeyState2
    954 FFFC07A0 6000 FE66                   		bra		.0003
    955 FFFC07A4                             .doNumLock:
    956 FFFC07A4 0879 0004 0001 0427         		bchg	#4,_KeyState2
    957 FFFC07AC 6100 0026                   		bsr		KeybdSetLEDStatus
    958 FFFC07B0 6000 FE56                   		bra		.0003
    959 FFFC07B4                             .doCapsLock:
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 17
bootrom.asm
    960 FFFC07B4 0879 0005 0001 0427         		bchg	#5,_KeyState2
    961 FFFC07BC 6100 0016                   		bsr		KeybdSetLEDStatus
    962 FFFC07C0 6000 FE46                   		bra		.0003
    963 FFFC07C4                             .doScrollLock:
    964 FFFC07C4 0879 0006 0001 0427         		bchg	#6,_KeyState2
    965 FFFC07CC 6100 0006                   		bsr		KeybdSetLEDStatus
    966 FFFC07D0 6000 FE36                   		bra		.0003
                                             
    968 FFFC07D4                             KeybdSetLEDStatus:
    969 FFFC07D4 48E7 3000                   		movem.l	d2/d3,-(a7)
    970 FFFC07D8 4239 0001 0428              		clr.b	KeybdLEDs
    971 FFFC07DE 0839 0004 0001 0427         		btst	#4,_KeyState2
    972 FFFC07E6 6708                        		beq.s	.0002
    973 FFFC07E8 13FC 0002 0001 0428         		move.b	#2,KeybdLEDs
    974 FFFC07F0                             .0002:
    975 FFFC07F0 0839 0005 0001 0427         		btst	#5,_KeyState2
    976 FFFC07F8 6708                        		beq.s	.0003
    977 FFFC07FA 08F9 0002 0001 0428         		bset	#2,KeybdLEDs
    978 FFFC0802                             .0003:
    979 FFFC0802 0839 0006 0001 0427         		btst	#6,_KeyState2
    980 FFFC080A 6708                        		beq.s	.0004
    981 FFFC080C 08F9 0000 0001 0428         		bset	#0,KeybdLEDs
    982 FFFC0814                             .0004:
    983 FFFC0814 123C 00ED                   		move.b	#$ED,d1
    984 FFFC0818 6100 002C                   		bsr		KeybdSendByte
    985 FFFC081C 6100 FD80                   		bsr		KeybdWaitTx
    986 FFFC0820 6100 FD58                   		bsr		KeybdRecvByte
    987 FFFC0824 4A01                        		tst.b	d1
    988 FFFC0826 6B18                        		bmi		.0001
    989 FFFC0828 B2BC 0000 00FA              		cmp		#$FA,d1
    990 FFFC082E 1239 0001 0428              		move.b	KeybdLEDs,d1
    991 FFFC0834 6100 0010                   		bsr		KeybdSendByte
    992 FFFC0838 6100 FD64                   		bsr		KeybdWaitTx
    993 FFFC083C 6100 FD3C                   		bsr		KeybdRecvByte
    994 FFFC0840                             .0001:
    995 FFFC0840 4CDF 000C                   		movem.l	(a7)+,d2/d3
    996 FFFC0844 4E75                        		rts
                                             
    998 FFFC0846                             KeybdSendByte:
    999 FFFC0846 13C1 FFDC 0000              		move.b	d1,KEYBD
   1000 FFFC084C 4E75                        		rts
                                             	
   1002 FFFC084E                             Wait10ms:
   1003 FFFC084E 2F03                        		move.l	d3,-(a7)
   1004 FFFC0850 263C 0000 03E8              		move.l	#1000,d3
   1005 FFFC0856                             .0001:
   1006 FFFC0856 51CB FFFE                   		dbra	d3,.0001
   1007 FFFC085A 261F                        		move.l	(a7)+,d3
   1008 FFFC085C 4E75                        		rts
                                             
                                             
                                             ;--------------------------------------------------------------------------
                                             ; PS2 scan codes to ascii conversion tables.
                                             ;--------------------------------------------------------------------------
                                             ;
   1015 FFFC085E                             _unshiftedScanCodes:
   1016 FFFC085E 2E A9 2E A5 A3 A1 A2 AC     	dc.b	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
                                             
   1018 FFFC0866 2E AA A8 A6 A4 09 60 2E     	dc.b	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
                                             
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 18
bootrom.asm
   1020 FFFC086E 2E 2E 2E 2E 2E 71 31 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
                                             
   1022 FFFC0876 2E 2E 7A 73 61 77 32 2E     	dc.b	$2e,$2e,$7a,$73,$61,$77,$32,$2e
                                             
   1024 FFFC087E 2E 63 78 64 65 34 33 2E     	dc.b	$2e,$63,$78,$64,$65,$34,$33,$2e
                                             
   1026 FFFC0886 2E 20 76 66 74 72 35 2E     	dc.b	$2e,$20,$76,$66,$74,$72,$35,$2e
                                             
   1028 FFFC088E 2E 6E 62 68 67 79 36 2E     	dc.b	$2e,$6e,$62,$68,$67,$79,$36,$2e
                                             
   1030 FFFC0896 2E 2E 6D 6A 75 37 38 2E     	dc.b	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
                                             
   1032 FFFC089E 2E 2C 6B 69 6F 30 39 2E     	dc.b	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
                                             
   1034 FFFC08A6 2E 2E 2F 6C 3B 70 2D 2E     	dc.b	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
                                             
   1036 FFFC08AE 2E 2E 27 2E 5B 3D 2E 2E     	dc.b	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
                                             
   1038 FFFC08B6 AD 2E 0D 5D 2E 5C 2E 2E     	dc.b	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
                                             
   1040 FFFC08BE 2E 2E 2E 2E 2E 2E 08 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                             
   1042 FFFC08C6 2E 95 2E 93 94 2E 2E 2E     	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
                                             
   1044 FFFC08CE 98 7F 92 2E 91 90 1B AF     	dc.b	$98,$7f,$92,$2e,$91,$90,$1b,$af
                                             
   1046 FFFC08D6 AB 2E 97 2E 2E 96 AE 2E     	dc.b	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
                                             
                                             
   1049 FFFC08DE 2E 2E 2E A7 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
                                             
   1051 FFFC08E6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1053 FFFC08EE 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1055 FFFC08F6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1057 FFFC08FE 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1059 FFFC0906 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1061 FFFC090E 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1063 FFFC0916 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1065 FFFC091E 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1067 FFFC0926 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1069 FFFC092E 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1071 FFFC0936 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1073 FFFC093E 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1075 FFFC0946 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1077 FFFC094E 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1079 FFFC0956 2E 2E FA 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 19
bootrom.asm
                                             
                                             
   1082 FFFC095E                             _shiftedScanCodes:
   1083 FFFC095E 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1085 FFFC0966 2E 2E 2E 2E 2E 09 7E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
                                             
   1087 FFFC096E 2E 2E 2E 2E 2E 51 21 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
                                             
   1089 FFFC0976 2E 2E 5A 53 41 57 40 2E     	dc.b	$2e,$2e,$5a,$53,$41,$57,$40,$2e
                                             
   1091 FFFC097E 2E 43 58 44 45 24 23 2E     	dc.b	$2e,$43,$58,$44,$45,$24,$23,$2e
                                             
   1093 FFFC0986 2E 20 56 46 54 52 25 2E     	dc.b	$2e,$20,$56,$46,$54,$52,$25,$2e
                                             
   1095 FFFC098E 2E 4E 42 48 47 59 5E 2E     	dc.b	$2e,$4e,$42,$48,$47,$59,$5e,$2e
                                             
   1097 FFFC0996 2E 2E 4D 4A 55 26 2A 2E     	dc.b	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
                                             
   1099 FFFC099E 2E 3C 4B 49 4F 29 28 2E     	dc.b	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
                                             
   1101 FFFC09A6 2E 3E 3F 4C 3A 50 5F 2E     	dc.b	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
                                             
   1103 FFFC09AE 2E 2E 22 2E 7B 2B 2E 2E     	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
                                             
   1105 FFFC09B6 2E 2E 0D 7D 2E 7C 2E 2E     	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
                                             
   1107 FFFC09BE 2E 2E 2E 2E 2E 2E 08 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                             
   1109 FFFC09C6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1111 FFFC09CE 2E 7F 2E 2E 2E 2E 1B 2E     	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
                                             
   1113 FFFC09D6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
                                             
   1116 FFFC09DE 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1118 FFFC09E6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1120 FFFC09EE 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1122 FFFC09F6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1124 FFFC09FE 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1126 FFFC0A06 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1128 FFFC0A0E 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1130 FFFC0A16 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1132 FFFC0A1E 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1134 FFFC0A26 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1136 FFFC0A2E 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1138 FFFC0A36 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 20
bootrom.asm
   1140 FFFC0A3E 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1142 FFFC0A46 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1144 FFFC0A4E 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1146 FFFC0A56 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
                                             
                                             ; control
   1150 FFFC0A5E                             _keybdControlCodes:
   1151 FFFC0A5E 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1153 FFFC0A66 2E 2E 2E 2E 2E 09 7E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
                                             
   1155 FFFC0A6E 2E 2E 2E 2E 2E 11 21 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
                                             
   1157 FFFC0A76 2E 2E 1A 13 01 17 40 2E     	dc.b	$2e,$2e,$1a,$13,$01,$17,$40,$2e
                                             
   1159 FFFC0A7E 2E 03 18 04 05 24 23 2E     	dc.b	$2e,$03,$18,$04,$05,$24,$23,$2e
                                             
   1161 FFFC0A86 2E 20 16 06 14 12 25 2E     	dc.b	$2e,$20,$16,$06,$14,$12,$25,$2e
                                             
   1163 FFFC0A8E 2E 0E 02 08 07 19 5E 2E     	dc.b	$2e,$0e,$02,$08,$07,$19,$5e,$2e
                                             
   1165 FFFC0A96 2E 2E 0D 0A 15 26 2A 2E     	dc.b	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
                                             
   1167 FFFC0A9E 2E 3C 0B 09 0F 29 28 2E     	dc.b	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
                                             
   1169 FFFC0AA6 2E 3E 3F 0C 3A 10 5F 2E     	dc.b	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
                                             
   1171 FFFC0AAE 2E 2E 22 2E 7B 2B 2E 2E     	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
                                             
   1173 FFFC0AB6 2E 2E 0D 7D 2E 7C 2E 2E     	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
                                             
   1175 FFFC0ABE 2E 2E 2E 2E 2E 2E 08 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                             
   1177 FFFC0AC6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1179 FFFC0ACE 2E 7F 2E 2E 2E 2E 1B 2E     	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
                                             
   1181 FFFC0AD6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
                                             
   1184 FFFC0ADE                             _keybdExtendedCodes:
   1185 FFFC0ADE 2E 2E 2E 2E A3 A1 A2 2E     	dc.b	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
                                             
   1187 FFFC0AE6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1189 FFFC0AEE 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1191 FFFC0AF6 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1193 FFFC0AFE 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1195 FFFC0B06 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1197 FFFC0B0E 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1199 FFFC0B16 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 21
bootrom.asm
                                             
   1201 FFFC0B1E 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1203 FFFC0B26 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1205 FFFC0B2E 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1207 FFFC0B36 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1209 FFFC0B3E 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1211 FFFC0B46 2E 95 2E 93 94 2E 2E 2E     	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
                                             
   1213 FFFC0B4E 98 99 92 2E 91 90 2E 2E     	dc.b	$98,$99,$92,$2e,$91,$90,$2e,$2e
                                             
   1215 FFFC0B56 2E 2E 97 2E 2E 96 2E 2E     	dc.b	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
                                             
                                             
                                             
                                             ;==============================================================================
                                             ;==============================================================================
                                             ; Monitor
                                             ;==============================================================================
                                             ;==============================================================================
                                             ;
   1225 FFFC0B5E                             StartMon:
   1226 FFFC0B5E                             Monitor:
                                             ;	lea		STACK,a7		; reset the stack pointer
   1228 FFFC0B5E 4239 0001 0424              		clr.b	KeybdEcho		; turn off keyboard echo
   1229 FFFC0B64                             PromptLn:
   1230 FFFC0B64 6100 F596                   		bsr		CRLF
   1231 FFFC0B68 123C 0024                   		move.b	#'$',d1
   1232 FFFC0B6C 6100 F5D8                   		bsr		DisplayChar
                                             
                                             ; Get characters until a CR is keyed
                                             ;
   1236 FFFC0B70                             Prompt3:
   1237 FFFC0B70 6100 FA66                   		bsr		GetKey
   1238 FFFC0B74 0C01 000D                   		cmpi.b	#CR,d1
   1239 FFFC0B78 6706                        		beq.s	Prompt1
   1240 FFFC0B7A 6100 F5CA                   		bsr		DisplayChar
   1241 FFFC0B7E 60F0                        		bra.s	Prompt3
                                             
                                             ; Process the screen line that the CR was keyed on
                                             ;
   1245 FFFC0B80                             Prompt1:
   1246 FFFC0B80 4239 0001 0419              		clr.b	CursorCol		; go back to the start of the line
   1247 FFFC0B86 6100 F58E                   		bsr		CalcScreenLoc	; a0 = screen memory location
   1248 FFFC0B8A 1218                        		move.b	(a0)+,d1
                                             		;bsr		ScreenToAscii
   1250 FFFC0B8C 0C01 0024                   		cmpi.b	#'$',d1			; skip over '$' prompt character
   1251 FFFC0B90 6602                        		bne.s	Prompt2
   1252 FFFC0B92 1218                        		move.b	(a0)+,d1
                                             		;bsr		ScreenToAscii
                                             	
                                             ; Dispatch based on command character
                                             ;
   1257 FFFC0B94                             Prompt2:
   1258 FFFC0B94 0C01 0067                   		cmpi.b	#'g',d1
   1259 FFFC0B98 6700 0640                   		beq		GraphicsDemo
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 22
bootrom.asm
   1260 FFFC0B9C 0C01 003A                   		cmpi.b	#':',d1			; $: - edit memory
   1261 FFFC0BA0 6700 0156                   		beq		EditMem
   1262 FFFC0BA4 0C01 0044                   		cmpi.b	#'D',d1			; $D - dump memory
   1263 FFFC0BA8 6700 01BC                   		beq		DumpMem
   1264 FFFC0BAC 0C01 0046                   		cmpi.b	#'F',d1
   1265 FFFC0BB0 6700 00F0                   		beq		FillMem
   1266 FFFC0BB4 0C01 0042                   		cmpi.b	#'B',d1			; $B - start tiny basic
   1267 FFFC0BB8 6700 FFFF                   		beq		START
   1268 FFFC0BBC 0C01 004A                   		cmpi.b	#'J',d1			; $J - execute code
   1269 FFFC0BC0 6700 0194                   		beq		ExecuteCode
   1270 FFFC0BC4 0C01 004C                   		cmpi.b	#'L',d1			; $L - load S19 file
   1271 FFFC0BC8 6700 0328                   		beq		LoadS19
   1272 FFFC0BCC 0C01 003F                   		cmpi.b	#'?',d1			; $? - display help
   1273 FFFC0BD0 6724                        		beq		DisplayHelp
   1274 FFFC0BD2 0C01 0043                   		cmpi.b	#'C',d1			; $C - clear screen
   1275 FFFC0BD6 6702                        		beq		TestCLS
   1276 FFFC0BD8 6084                        		bra		Monitor
                                             
   1278 FFFC0BDA                             TestCLS:
   1279 FFFC0BDA 1218                        		move.b	(a0)+,d1
   1280 FFFC0BDC 0C01 004C                   		cmpi.b	#'L',d1
   1281 FFFC0BE0 6600 FF7C                   		bne		Monitor
   1282 FFFC0BE4 1218                        		move.b	(a0)+,d1
   1283 FFFC0BE6 0C01 0053                   		cmpi.b	#'S',d1
   1284 FFFC0BEA 6600 FF72                   		bne		Monitor
   1285 FFFC0BEE 6100 0216                   		bsr		ClearScreen
   1286 FFFC0BF2 6000 FF6A                   		bra		Monitor
                                             	
   1288 FFFC0BF6                             DisplayHelp:
   1289 FFFC0BF6 43F9 FFFC 0C06              		lea		HelpMsg,a1
   1290 FFFC0BFC 4EB9 FFFC 02B6              		jsr		DisplayString
   1291 FFFC0C02 6000 FF5A                   		bra		Monitor
                                             
   1293 FFFC0C06                             HelpMsg:
   1294 FFFC0C06 3F 20 3D 20 44 69 73 70     		dc.b	"? = Display help",CR,LF
   1295 FFFC0C0E 6C 61 79 20 68 65 6C 70     
   1296 FFFC0C16 0D 0A                       
   1297 FFFC0C18 43 4C 53 20 3D 20 63 6C     		dc.b	"CLS = clear screen",CR,LF
   1298 FFFC0C20 65 61 72 20 73 63 72 65     
   1299 FFFC0C28 65 6E 0D 0A                 
   1300 FFFC0C2C 3A 20 3D 20 45 64 69 74     		dc.b	": = Edit memory bytes",CR,LF
   1301 FFFC0C34 20 6D 65 6D 6F 72 79 20     
   1302 FFFC0C3C 62 79 74 65 73 0D 0A        
   1303 FFFC0C43 46 20 3D 20 46 69 6C 6C     		dc.b	"F = Fill memory",CR,LF
   1304 FFFC0C4B 20 6D 65 6D 6F 72 79 0D     
   1305 FFFC0C53 0A                          
   1306 FFFC0C54 4C 20 3D 20 4C 6F 61 64     		dc.b	"L = Load S19 file",CR,LF
   1307 FFFC0C5C 20 53 31 39 20 66 69 6C     
   1308 FFFC0C64 65 0D 0A                    
   1309 FFFC0C67 44 20 3D 20 44 75 6D 70     		dc.b	"D = Dump memory",CR,LF
   1310 FFFC0C6F 20 6D 65 6D 6F 72 79 0D     
   1311 FFFC0C77 0A                          
   1312 FFFC0C78 42 20 3D 20 73 74 61 72     		dc.b	"B = start tiny basic",CR,LF
   1313 FFFC0C80 74 20 74 69 6E 79 20 62     
   1314 FFFC0C88 61 73 69 63 0D 0A           
   1315 FFFC0C8E 4A 20 3D 20 4A 75 6D 70     		dc.b	"J = Jump to code",CR,LF,0
   1316 FFFC0C96 20 74 6F 20 63 6F 64 65     
   1317 FFFC0C9E 0D 0A 00                    
   1318 FFFC0CA1 FF                         		even
                                             
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 23
bootrom.asm
                                             ;------------------------------------------------------------------------------
                                             ; Fill memory
                                             ; FB = fill bytes		FB 00000010 100 FF	; fill starting at 10 for 256 bytes
                                             ; FW = fill words
                                             ; FL = fill longs
                                             ; F = fill bytes
                                             ;------------------------------------------------------------------------------
                                             ;
   1328 FFFC0CA2                             FillMem:
   1329 FFFC0CA2 1218                        		move.b	(a0)+,d1
                                             		;bsr		ScreenToAscii
   1331 FFFC0CA4 1801                        		move.b	d1,d4			; d4 = fill size
   1332 FFFC0CA6 6100 0044                   		bsr		ignBlanks
   1333 FFFC0CAA 6100 00EE                   		bsr		GetHexNumber
   1334 FFFC0CAE 2241                        		move.l	d1,a1			; a1 = start
   1335 FFFC0CB0 6100 003A                   		bsr		ignBlanks
   1336 FFFC0CB4 6100 00E4                   		bsr		GetHexNumber
   1337 FFFC0CB8 2601                        		move.l	d1,d3			; d3 = count
   1338 FFFC0CBA 6100 0030                   		bsr		ignBlanks
   1339 FFFC0CBE 6100 00DA                   		bsr		GetHexNumber	; fill value
   1340 FFFC0CC2 0C04 004C                   		cmpi.b	#'L',d4
   1341 FFFC0CC6 660A                        		bne		fmem1
   1342 FFFC0CC8                             fmemL:
   1343 FFFC0CC8 22C1                        		move.l	d1,(a1)+
   1344 FFFC0CCA 51CB FFFC                   		dbra	d3,fmemL
   1345 FFFC0CCE 6000 FE8E                   		bra		Monitor
   1346 FFFC0CD2                             fmem1
   1347 FFFC0CD2 0C04 0057                   		cmpi.b	#'W',d4
   1348 FFFC0CD6 660A                        		bne		fmemB
   1349 FFFC0CD8                             fmemW:
   1350 FFFC0CD8 32C1                        		move.w	d1,(a1)+
   1351 FFFC0CDA 51CB FFFC                   		dbra	d3,fmemW
   1352 FFFC0CDE 6000 FE7E                   		bra		Monitor
   1353 FFFC0CE2                             fmemB:
   1354 FFFC0CE2 12C1                        		move.b	d1,(a1)+
   1355 FFFC0CE4 51CB FFFC                   		dbra	d3,fmemB
   1356 FFFC0CE8 6000 FE74                   		bra		Monitor
                                             
                                             ;------------------------------------------------------------------------------
                                             ;------------------------------------------------------------------------------
                                             ;
   1361 FFFC0CEC                             ignBlanks:
   1362 FFFC0CEC 1218                        		move.b	(a0)+,d1
   1363 FFFC0CEE 0C01 0020                   		cmpi.b	#' ',d1
   1364 FFFC0CF2 67F8                        		beq		ignBlanks
   1365 FFFC0CF4 5388                        		subq	#1,a0
   1366 FFFC0CF6 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Edit memory byte.
                                             ;------------------------------------------------------------------------------
                                             ;
   1372 FFFC0CF8                             EditMem:
   1373 FFFC0CF8 6100 FFF2                   		bsr		ignBlanks
   1374 FFFC0CFC 6100 009C                   		bsr		GetHexNumber
   1375 FFFC0D00 2241                        		move.l	d1,a1
   1376 FFFC0D02                             edtmem1:
   1377 FFFC0D02 6100 FFE8                   		bsr		ignBlanks
   1378 FFFC0D06 6100 0092                   		bsr		GetHexNumber
   1379 FFFC0D0A 12C1                        		move.b	d1,(a1)+
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 24
bootrom.asm
   1380 FFFC0D0C 6100 FFDE                   		bsr		ignBlanks
   1381 FFFC0D10 6100 0088                   		bsr		GetHexNumber
   1382 FFFC0D14 12C1                        		move.b	d1,(a1)+
   1383 FFFC0D16 6100 FFD4                   		bsr		ignBlanks
   1384 FFFC0D1A 6100 007E                   		bsr		GetHexNumber
   1385 FFFC0D1E 12C1                        		move.b	d1,(a1)+
   1386 FFFC0D20 6100 FFCA                   		bsr		ignBlanks
   1387 FFFC0D24 6100 0074                   		bsr		GetHexNumber
   1388 FFFC0D28 12C1                        		move.b	d1,(a1)+
   1389 FFFC0D2A 6100 FFC0                   		bsr		ignBlanks
   1390 FFFC0D2E 6100 006A                   		bsr		GetHexNumber
   1391 FFFC0D32 12C1                        		move.b	d1,(a1)+
   1392 FFFC0D34 6100 FFB6                   		bsr		ignBlanks
   1393 FFFC0D38 6100 0060                   		bsr		GetHexNumber
   1394 FFFC0D3C 12C1                        		move.b	d1,(a1)+
   1395 FFFC0D3E 6100 FFAC                   		bsr		ignBlanks
   1396 FFFC0D42 6100 0056                   		bsr		GetHexNumber
   1397 FFFC0D46 12C1                        		move.b	d1,(a1)+
   1398 FFFC0D48 6100 FFA2                   		bsr		ignBlanks
   1399 FFFC0D4C 6100 004C                   		bsr		GetHexNumber
   1400 FFFC0D50 12C1                        		move.b	d1,(a1)+
   1401 FFFC0D52 6000 FE0A                   		bra		Monitor
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Execute code at the specified address.
                                             ;------------------------------------------------------------------------------
                                             ;
   1407 FFFC0D56                             ExecuteCode:
   1408 FFFC0D56 6100 FF94                   		bsr		ignBlanks
   1409 FFFC0D5A 6100 003E                   		bsr		GetHexNumber
   1410 FFFC0D5E 2041                        		move.l	d1,a0
   1411 FFFC0D60 4E90                        		jsr		(a0)
   1412 FFFC0D62 6000 FDFA                   		bra     Monitor
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Do a memory dump of the requested location.
                                             ;------------------------------------------------------------------------------
                                             ;
   1418 FFFC0D66                             DumpMem:
   1419 FFFC0D66 6100 FF84                   		bsr		ignBlanks
   1420 FFFC0D6A 6100 002E                   		bsr		GetHexNumber
   1421 FFFC0D6E                             DumpMem1:
   1422 FFFC0D6E 2041                        		move.l	d1,a0
   1423 FFFC0D70 4EB9 FFFC 00FC              		jsr		CRLF
   1424 FFFC0D76 6100 F7B8                   		bsr		DisplayMem
   1425 FFFC0D7A 6100 F7B4                   		bsr		DisplayMem
   1426 FFFC0D7E 6100 F7B0                   		bsr		DisplayMem
   1427 FFFC0D82 6100 F7AC                   		bsr		DisplayMem
   1428 FFFC0D86 6100 F7A8                   		bsr		DisplayMem
   1429 FFFC0D8A 6100 F7A4                   		bsr		DisplayMem
   1430 FFFC0D8E 6100 F7A0                   		bsr		DisplayMem
   1431 FFFC0D92 6100 F79C                   		bsr		DisplayMem
   1432 FFFC0D96 6000 FDC6                   		bra		Monitor
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Get a hexidecimal number. Maximum of eight digits.
                                             ;------------------------------------------------------------------------------
                                             ;
   1438 FFFC0D9A                             GetHexNumber:
   1439 FFFC0D9A 48E7 A000                   		movem.l	d0/d2,-(a7)
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 25
bootrom.asm
   1440 FFFC0D9E 4282                        		clr.l	d2
   1441 FFFC0DA0 7007                        		moveq	#7,d0
   1442 FFFC0DA2                             gthxn2:
   1443 FFFC0DA2 1218                        		move.b	(a0)+,d1
   1444 FFFC0DA4 6100 001E                   		bsr		AsciiToHexNybble
   1445 FFFC0DA8 B23C 00FF                   		cmp.b	#0xff,d1
   1446 FFFC0DAC 670E                        		beq		gthxn1
   1447 FFFC0DAE E98A                        		lsl.l	#4,d2
   1448 FFFC0DB0 0281 0000 000F              		andi.l	#0x0f,d1
   1449 FFFC0DB6 8481                        		or.l	d1,d2
   1450 FFFC0DB8 51C8 FFE8                   		dbra	d0,gthxn2
   1451 FFFC0DBC                             gthxn1:
   1452 FFFC0DBC 2202                        		move.l	d2,d1
   1453 FFFC0DBE 4CDF 0005                   		movem.l	(a7)+,d0/d2
   1454 FFFC0DC2 4E75                        		rts	
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Convert ASCII character in the range '0' to '9', 'a' tr 'f' or 'A' to 'F'
                                             ; to a hex nybble.
                                             ;------------------------------------------------------------------------------
                                             ;
   1461 FFFC0DC4                             AsciiToHexNybble:
   1462 FFFC0DC4 0C01 0030                   		cmpi.b	#'0',d1
   1463 FFFC0DC8 6538                        		blo.s	gthx3
   1464 FFFC0DCA 0C01 0039                   		cmpi.b	#'9',d1
   1465 FFFC0DCE 6206                        		bhi.s	gthx5
   1466 FFFC0DD0 0401 0030                   		subi.b	#'0',d1
   1467 FFFC0DD4 4E75                        		rts
   1468 FFFC0DD6                             gthx5:
   1469 FFFC0DD6 0C01 0041                   		cmpi.b	#'A',d1
   1470 FFFC0DDA 6526                        		blo.s	gthx3
   1471 FFFC0DDC 0C01 0046                   		cmpi.b	#'F',d1
   1472 FFFC0DE0 620A                        		bhi.s	gthx6
   1473 FFFC0DE2 0401 0041                   		subi.b	#'A',d1
   1474 FFFC0DE6 0601 000A                   		addi.b	#10,d1
   1475 FFFC0DEA 4E75                        		rts
   1476 FFFC0DEC                             gthx6:
   1477 FFFC0DEC 0C01 0061                   		cmpi.b	#'a',d1
   1478 FFFC0DF0 6510                        		blo.s	gthx3
   1479 FFFC0DF2 0C01 0066                   		cmpi.b	#'f',d1
   1480 FFFC0DF6 620A                        		bhi.s	gthx3
   1481 FFFC0DF8 0401 0061                   		subi.b	#'a',d1
   1482 FFFC0DFC 0601 000A                   		addi.b	#10,d1
   1483 FFFC0E00 4E75                        		rts
   1484 FFFC0E02                             gthx3:
   1485 FFFC0E02 72FF                        		moveq	#-1,d1		; not a hex number
   1486 FFFC0E04 4E75                        		rts
                                             
                                             ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                             ; The fast way to clear the screen. Uses the blitter.
                                             ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                             
   1492 FFFC0E06                             ClearScreen:
   1493 FFFC0E06 4BF9 FFE0 0000              		lea		VDGREG,a5
   1494 FFFC0E0C                             .0003:								
   1495 FFFC0E0C 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   1496 FFFC0E10 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   1497 FFFC0E14 67F6                        		beq.s	.0003				; branch if not done
   1498 FFFC0E16 2B7C 0001 4000 04BC         		move.l	#320*256,$4BC(a5)		; set transfer count  pixels
   1499 FFFC0E1E 3B79 0001 0004 04A8         		move.w	bkcolor,$4A8(a5)	; set color dark blue
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 26
bootrom.asm
   1500 FFFC0E26 2B7C 0000 0000 0498         		move.l	#0,$498(a5)			; set destination address
   1501 FFFC0E2E 2B7C 0000 0140 04A4         		move.l	#320,$4A4(a5)		; set destination width
   1502 FFFC0E36 2B7C 0000 0000 049C         		move.l	#0,$49C(a5)			; set dst modulo
   1503 FFFC0E3E 3B7C 8080 04AC              		move.w	#%1000000010000000,$4AC(a5)		; enable channel D, start transfer
   1504 FFFC0E44 4E75                        		rts
                                             
   1506 FFFC0E46                             ScrollUp:
   1507 FFFC0E46 48E7 8004                   		movem.l	d0/a5,-(a7)
   1508 FFFC0E4A 4BF9 FFE0 0000              		lea		VDGREG,a5
   1509 FFFC0E50                             .0003:								
   1510 FFFC0E50 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   1511 FFFC0E54 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   1512 FFFC0E58 67F6                        		beq.s	.0003				; branch if not done
                                             		; Channel A
   1514 FFFC0E5A 2B7C 0001 3600 04B0         		move.l	#320*248,$4B0(a5)	; set source transfer count pixels
   1515 FFFC0E62 2B7C 0000 0A00 0480         		move.l	#320*8,$480(a5)		; set source bitmap address (address in graphics mem)
   1516 FFFC0E6A 2B7C 0000 0000 0484         		move.l	#0,$484(a5)			; set src modulo
                                             		; Channel D
   1518 FFFC0E72 2B7C 0001 3600 04BC         		move.l	#320*248,$4BC(a5)	; set destination transfer count pixels
   1519 FFFC0E7A 2B7C 0000 0000 0498         		move.l	#0,$498(a5)			; set destination address
   1520 FFFC0E82 2B7C 0000 0000 049C         		move.l	#0,$49C(a5)			; set dst modulo
                                             
   1522 FFFC0E8A 2B7C FFFF FFFF 04A0         		move.l	#-1,$4A0(a5)		; set source width
   1523 FFFC0E92 2B7C FFFF FFFF 04A4         		move.l	#-1,$4A4(a5)		; set destination width
   1524 FFFC0E9A 3B7C 0011 04AE              		move.w	#$11,$4AE(a5)		; set op A ($11 = copy A)
   1525 FFFC0EA0 3B7C 8082 04AC              		move.w	#%1000000010000010,$4AC(a5)		; enable channel A,D, start transfer
   1526 FFFC0EA6 4CDF 2001                   		movem.l	(a7)+,d0/a5
                                             
   1528 FFFC0EAA                             BlankLastLine:
   1529 FFFC0EAA 48E7 8004                   		movem.l	d0/a5,-(a7)
                                             		; Channel D
   1531 FFFC0EAE 4BF9 FFE0 0000              		lea		VDGREG,a5
   1532 FFFC0EB4                             .0003:								
   1533 FFFC0EB4 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   1534 FFFC0EB8 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   1535 FFFC0EBC 67F6                        		beq.s	.0003				; branch if not done
   1536 FFFC0EBE 2B7C 0000 0A00 04BC         		move.l	#320*8,$4BC(a5)		; set destination transfer count pixels
   1537 FFFC0EC6 2B7C 0001 3600 0498         		move.l	#320*248,$498(a5)	; set destination address
   1538 FFFC0ECE 2B7C 0000 0000 049C         		move.l	#0,$49C(a5)			; set dst modulo
   1539 FFFC0ED6 2B7C FFFF FFFF 04A4         		move.l	#-1,$4A4(a5)		; set destination width
   1540 FFFC0EDE 3B79 0001 0004 04A8         		move.w	bkcolor,$4A8(a5)	; set color dark blue
   1541 FFFC0EE6 3B7C 8080 04AC              		move.w	#%1000000010000000,$4AC(a5)		; enable channel D, start transfer
   1542 FFFC0EEC 4CDF 2001                   		movem.l	(a7)+,d0/a5
   1543 FFFC0EF0 4E75                        		rts
                                             
                                             ;==============================================================================
                                             ; Load an S19 format file
                                             ;==============================================================================
                                             ;
   1549 FFFC0EF2                             LoadS19:
   1550 FFFC0EF2 600A                        	bra		ProcessRec
   1551 FFFC0EF4                             NextRec:
   1552 FFFC0EF4 6100 017A                   	bsr		sGetChar
   1553 FFFC0EF8 0C00 000A                   	cmpi.b	#LF,d0
   1554 FFFC0EFC 66F6                        	bne		NextRec
   1555 FFFC0EFE                             ProcessRec
   1556 FFFC0EFE 6100 0170                   	bsr		sGetChar
   1557 FFFC0F02 1800                        	move.b	d0,d4
   1558 FFFC0F04 0C04 001A                   	cmpi.b	#26,d4		; CTRL-Z ?
   1559 FFFC0F08 6700 FC54                   	beq		Monitor
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 27
bootrom.asm
   1560 FFFC0F0C 0C04 0053                   	cmpi.b	#'S',d4
   1561 FFFC0F10 66E2                        	bne		NextRec
   1562 FFFC0F12 6100 015C                   	bsr		sGetChar
   1563 FFFC0F16 1800                        	move.b	d0,d4
   1564 FFFC0F18 0C04 0030                   	cmpi.b	#'0',d4
   1565 FFFC0F1C 65D6                        	blo		NextRec
   1566 FFFC0F1E 0C04 0039                   	cmpi.b	#'9',d4		; d4 = record type
   1567 FFFC0F22 62D0                        	bhi		NextRec
   1568 FFFC0F24 6100 014A                   	bsr		sGetChar
   1569 FFFC0F28 6100 FE9A                   	bsr		AsciiToHexNybble
   1570 FFFC0F2C 1401                        	move.b	d1,d2
   1571 FFFC0F2E 6100 0140                   	bsr		sGetChar
   1572 FFFC0F32 6100 FE90                   	bsr		AsciiToHexNybble
   1573 FFFC0F36 E90A                        	lsl.b	#4,d2
   1574 FFFC0F38 8202                        	or.b	d2,d1		; d1 = byte count
   1575 FFFC0F3A 1601                        	move.b	d1,d3		; d3 = byte count
   1576 FFFC0F3C 0C04 0030                   	cmpi.b	#'0',d4		; manufacturer ID record, ignore
   1577 FFFC0F40 67B2                        	beq		NextRec
   1578 FFFC0F42 0C04 0031                   	cmpi.b	#'1',d4
   1579 FFFC0F46 676A                        	beq		ProcessS1
   1580 FFFC0F48 0C04 0032                   	cmpi.b	#'2',d4
   1581 FFFC0F4C 676A                        	beq		ProcessS2
   1582 FFFC0F4E 0C04 0033                   	cmpi.b	#'3',d4
   1583 FFFC0F52 676A                        	beq		ProcessS3
   1584 FFFC0F54 0C04 0035                   	cmpi.b	#'5',d4		; record count record, ignore
   1585 FFFC0F58 679A                        	beq		NextRec
   1586 FFFC0F5A 0C04 0037                   	cmpi.b	#'7',d4
   1587 FFFC0F5E 6764                        	beq		ProcessS7
   1588 FFFC0F60 0C04 0038                   	cmpi.b	#'8',d4
   1589 FFFC0F64 676C                        	beq		ProcessS8
   1590 FFFC0F66 0C04 0039                   	cmpi.b	#'9',d4
   1591 FFFC0F6A 6774                        	beq		ProcessS9
   1592 FFFC0F6C 6086                        	bra		NextRec
                                             
   1594 FFFC0F6E                             pcssxa
   1595 FFFC0F6E 0243 00FF                   	andi.w	#0xff,d3
   1596 FFFC0F72 5343                        	subi.w	#1,d3			; one less for dbra
   1597 FFFC0F74                             pcss1a
   1598 FFFC0F74 4282                        	clr.l	d2
   1599 FFFC0F76 6100 00F8                   	bsr		sGetChar
   1600 FFFC0F7A 6100 FE48                   	bsr		AsciiToHexNybble
   1601 FFFC0F7E E98A                        	lsl.l	#4,d2
   1602 FFFC0F80 8401                        	or.b	d1,d2
   1603 FFFC0F82 6100 00EC                   	bsr		sGetChar
   1604 FFFC0F86 6100 FE3C                   	bsr		AsciiToHexNybble
   1605 FFFC0F8A E98A                        	lsl.l	#4,d2
   1606 FFFC0F8C 8401                        	or.b	d1,d2
   1607 FFFC0F8E 12C2                        	move.b	d2,(a1)+
   1608 FFFC0F90 51CB FFE2                   	dbra	d3,pcss1a
                                             ; Get the checksum byte
   1610 FFFC0F94 4282                        	clr.l	d2
   1611 FFFC0F96 6100 00D8                   	bsr		sGetChar
   1612 FFFC0F9A 6100 FE28                   	bsr		AsciiToHexNybble
   1613 FFFC0F9E E98A                        	lsl.l	#4,d2
   1614 FFFC0FA0 8401                        	or.b	d1,d2
   1615 FFFC0FA2 6100 00CC                   	bsr		sGetChar
   1616 FFFC0FA6 6100 FE1C                   	bsr		AsciiToHexNybble
   1617 FFFC0FAA E98A                        	lsl.l	#4,d2
   1618 FFFC0FAC 8401                        	or.b	d1,d2
   1619 FFFC0FAE 6000 FF44                   	bra		NextRec
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 28
bootrom.asm
                                             
   1621 FFFC0FB2                             ProcessS1:
   1622 FFFC0FB2 6100 003A                   	bsr		S19Get16BitAddress
   1623 FFFC0FB6 60B6                        	bra		pcssxa
   1624 FFFC0FB8                             ProcessS2:
   1625 FFFC0FB8 6100 0042                   	bsr		S19Get24BitAddress
   1626 FFFC0FBC 60B0                        	bra		pcssxa
   1627 FFFC0FBE                             ProcessS3:
   1628 FFFC0FBE 6100 004A                   	bsr		S19Get32BitAddress
   1629 FFFC0FC2 60AA                        	bra		pcssxa
   1630 FFFC0FC4                             ProcessS7:
   1631 FFFC0FC4 6100 0044                   	bsr		S19Get32BitAddress
   1632 FFFC0FC8 23C9 0000 0000              	move.l	a1,S19StartAddress
   1633 FFFC0FCE 6000 FB8E                   	bra		Monitor
   1634 FFFC0FD2                             ProcessS8:
   1635 FFFC0FD2 6100 0028                   	bsr		S19Get24BitAddress
   1636 FFFC0FD6 23C9 0000 0000              	move.l	a1,S19StartAddress
   1637 FFFC0FDC 6000 FB80                   	bra		Monitor
   1638 FFFC0FE0                             ProcessS9:
   1639 FFFC0FE0 6100 000C                   	bsr		S19Get16BitAddress
   1640 FFFC0FE4 23C9 0000 0000              	move.l	a1,S19StartAddress
   1641 FFFC0FEA 6000 FB72                   	bra		Monitor
                                             
   1643 FFFC0FEE                             S19Get16BitAddress:
   1644 FFFC0FEE 4282                        	clr.l	d2
   1645 FFFC0FF0 6100 007E                   	bsr		sGetChar
   1646 FFFC0FF4 6100 FDCE                   	bsr		AsciiToHexNybble
   1647 FFFC0FF8 1401                        	move.b	d1,d2
   1648 FFFC0FFA 604A                        	bra		S1932b
                                             
   1650 FFFC0FFC                             S19Get24BitAddress:
   1651 FFFC0FFC 4282                        	clr.l	d2
   1652 FFFC0FFE 6100 0070                   	bsr		sGetChar
   1653 FFFC1002 6100 FDC0                   	bsr		AsciiToHexNybble
   1654 FFFC1006 1401                        	move.b	d1,d2
   1655 FFFC1008 6024                        	bra		S1932a
                                             
   1657 FFFC100A                             S19Get32BitAddress:
   1658 FFFC100A 4282                        	clr.l	d2
   1659 FFFC100C 6100 0062                   	bsr		sGetChar
   1660 FFFC1010 6100 FDB2                   	bsr		AsciiToHexNybble
   1661 FFFC1014 1401                        	move.b	d1,d2
   1662 FFFC1016 6100 0058                   	bsr		sGetChar
   1663 FFFC101A 6100 FDA8                   	bsr		AsciiToHexNybble
   1664 FFFC101E E98A                        	lsl.l	#4,d2
   1665 FFFC1020 8401                        	or.b	d1,d2
   1666 FFFC1022 6100 004C                   	bsr		sGetChar
   1667 FFFC1026 6100 FD9C                   	bsr		AsciiToHexNybble
   1668 FFFC102A E98A                        	lsl.l	#4,d2
   1669 FFFC102C 8401                        	or.b	d1,d2
   1670 FFFC102E                             S1932a:
   1671 FFFC102E 6100 0040                   	bsr		sGetChar
   1672 FFFC1032 6100 FD90                   	bsr		AsciiToHexNybble
   1673 FFFC1036 E98A                        	lsl.l	#4,d2
   1674 FFFC1038 8401                        	or.b	d1,d2
   1675 FFFC103A 6100 0034                   	bsr		sGetChar
   1676 FFFC103E 6100 FD84                   	bsr		AsciiToHexNybble
   1677 FFFC1042 E98A                        	lsl.l	#4,d2
   1678 FFFC1044 8401                        	or.b	d1,d2
   1679 FFFC1046                             S1932b:
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 29
bootrom.asm
   1680 FFFC1046 6100 0028                   	bsr		sGetChar
   1681 FFFC104A 6100 FD78                   	bsr		AsciiToHexNybble
   1682 FFFC104E E98A                        	lsl.l	#4,d2
   1683 FFFC1050 8401                        	or.b	d1,d2
   1684 FFFC1052 6100 001C                   	bsr		sGetChar
   1685 FFFC1056 6100 FD6C                   	bsr		AsciiToHexNybble
   1686 FFFC105A E98A                        	lsl.l	#4,d2
   1687 FFFC105C 8401                        	or.b	d1,d2
   1688 FFFC105E 6100 0010                   	bsr		sGetChar
   1689 FFFC1062 6100 FD60                   	bsr		AsciiToHexNybble
   1690 FFFC1066 E98A                        	lsl.l	#4,d2
   1691 FFFC1068 8401                        	or.b	d1,d2
   1692 FFFC106A 4284                        	clr.l	d4
   1693 FFFC106C 2242                        	move.l	d2,a1
   1694 FFFC106E 4E75                        	rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Get a character from auxillary input, checking the keyboard status for a
                                             ; CTRL-C
                                             ;------------------------------------------------------------------------------
                                             ;
   1701 FFFC1070                             sGetChar:
   1702 FFFC1070 6100 F554                   	bsr		CheckForKey
   1703 FFFC1074 670C                        	beq		sgc1
   1704 FFFC1076 6100 F560                   	bsr		GetKey
   1705 FFFC107A 0C01 0000                   	cmpi.b	#CTRLC,d1
   1706 FFFC107E 6700 FADE                   	beq		Monitor
   1707 FFFC1082                             sgc1:
   1708 FFFC1082 6100 FFFF                   	bsr		AUXIN
   1709 FFFC1086 67E8                        	beq		sGetChar
   1710 FFFC1088 1200                        	move.b	d0,d1
   1711 FFFC108A 4E75                        	rts
                                             
                                             ;==============================================================================
                                             ;==============================================================================
                                             
                                             ;------------------------------------------------------------------------------
                                             ;------------------------------------------------------------------------------
                                             ;
   1719 FFFC108C                             DisplayHexNumber:
   1720 FFFC108C 33FC A6A6 FFDC 0600         		move.w	#$A6A6,leds		; diagnostics
   1721 FFFC1094 2C7C FFE0 0000              		move.l	#VDGREG,a6
   1722 FFFC109A 343C 0007                   		move.w	#7,d2		; number-1 of digits to display
   1723 FFFC109E                             disphnum1:
   1724 FFFC109E 1001                        		move.b	d1,d0		; get digit into d0.b
   1725 FFFC10A0 0240 000F                   		andi.w	#$0f,d0
   1726 FFFC10A4 0C40 0009                   		cmpi.w	#$09,d0
   1727 FFFC10A8 6302                        		bls.s	disphnum2
   1728 FFFC10AA 5E40                        		addi.w	#7,d0
   1729 FFFC10AC                             disphnum2:
   1730 FFFC10AC 0640 0030                   		addi.w	#$30,d0	; convert to display char
   1731 FFFC10B0 3602                        		move.w	d2,d3		; char count into d3
   1732 FFFC10B2 E743                        		asl.w	#3,d3		; scale * 8
   1733 FFFC10B4                             disphnum3:
   1734 FFFC10B4 382E 042C                   		move.w	$42C(a6),d4			; read character queue index into d4
   1735 FFFC10B8 B87C 001C                   		cmp.w	#28,d4					; allow up 28 entries to be in progress
   1736 FFFC10BC 64F6                        		bhs.s	disphnum3				; branch if too many chars queued
   1737 FFFC10BE 4880                        		ext.w	d0						; zero out high order bits
   1738 FFFC10C0 3D40 0420                   		move.w	d0,$420(a6)			; set char code
   1739 FFFC10C4 3D7C 7FFF 0422              		move.w	#WHITE,$422(a6)		; set fg color
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 30
bootrom.asm
   1740 FFFC10CA 3D7C 000F 0424              		move.w	#DARK_BLUE,$424(a6)	; set bk color
   1741 FFFC10D0 3D43 0426                   		move.w	d3,$426(a6)			; set x pos
   1742 FFFC10D4 3D7C 0008 0428              		move.w	#8,$428(a6)			; set y pos
   1743 FFFC10DA 3D7C 0707 042A              		move.w	#$0707,$42A(a6)		; set font x,y extent
   1744 FFFC10E0 3D7C 0000 042E              		move.w	#0,$42E(a6)			; pulse character queue write signal
   1745 FFFC10E6 E899                        		ror.l	#4,d1					; rot to next digit
   1746 FFFC10E8 57CA FFB4                   		dbeq	d2,disphnum1
   1747 FFFC10EC 4ED5                        		jmp		(a5)
                                             
                                             ;===============================================================================
                                             ;    Perform ram test. (Uses checkerboard testing).
                                             ; 
                                             ;    Return address must be stored in a3 since the stack cannot be used (it
                                             ; would get overwritten in test). Note this routine uses no ram at all.
                                             ;===============================================================================
   1755 FFFC10EE                             ramtest:
   1756 FFFC10EE 33FC A5A5 FFDC 0600         		move.w	#$A5A5,leds		; diagnostics
   1757 FFFC10F6 207C 0003 0000                      movea.l #$30000,a0
   1758 FFFC10FC 203C AAAA 5555                      move.l #$aaaa5555,d0
                                             ;-----------------------------------------------------------
                                             ;   Write checkerboard pattern to ram then read it back to
                                             ; find the highest usable ram address (maybe). This address
                                             ; must be lower than the start of the rom (0xe00000).
                                             ;-----------------------------------------------------------
   1764 FFFC1102                             ramtest1:
   1765 FFFC1102 20C0                                move.l 	d0,(a0)+
   1766 FFFC1104 2208                                move.l	a0,d1
   1767 FFFC1106 4A41                                tst.w	d1
   1768 FFFC1108 660A                                bne.s	rmtst1
   1769 FFFC110A 4BF9 FFFC 1114                      lea		rmtst1,a5
   1770 FFFC1110 6000 FF7A                           bra		DisplayHexNumber
   1771 FFFC1114                             rmtst1:
   1772 FFFC1114 33FC A9A9 FFDC 0600         		move.w	#$A9A9,leds		; diagnostics
   1773 FFFC111C B1FC 0005 FFFC                      cmpa.l 	#$5FFFC,a0
   1774 FFFC1122 66DE                                bne.s 	ramtest1
   1775 FFFC1124 7200                                move.l	#0,d1
   1776 FFFC1126 6100 EFEE                           bsr		CalcScreenLoc
   1777 FFFC112A 6000 FC42                           bra		DumpMem1
                                             
                                             ;------------------------------------------------------
                                             ;   Save maximum useable address for later comparison.
                                             ;------------------------------------------------------
   1782 FFFC112E                             ramtest6:
   1783 FFFC112E 33FC A7A7 FFDC 0600         		move.w	#$A7A7,leds		; diagnostics
   1784 FFFC1136 2448                                movea.l a0,a2
   1785 FFFC1138 207C 0003 0000                      movea.l #$30000,a0
                                             ;--------------------------------------------
                                             ;   Read back checkerboard pattern from ram.
                                             ;--------------------------------------------
   1789 FFFC113E                             ramtest2:
   1790 FFFC113E 2A18                                move.l  (a0)+,d5
   1791 FFFC1140 B5C8                                cmpa.l	a0,a2
   1792 FFFC1142 671A                                beq.s	ramtest3
   1793 FFFC1144 2208                                move.l	a0,d1
   1794 FFFC1146 4A41                                tst.w	d1
   1795 FFFC1148 660A                                bne.s	rmtst2
   1796 FFFC114A 4BF9 FFFC 1154                      lea		rmtst2,a5
   1797 FFFC1150 6000 FF3A                           bra		DisplayHexNumber
   1798 FFFC1154                             rmtst2:
   1799 FFFC1154 0C85 AAAA 5555                      cmpi.l 	#$aaaa5555,d5
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 31
bootrom.asm
   1800 FFFC115A 67E2                                beq.s 	ramtest2
   1801 FFFC115C 6678                                bne.s 	ramtest7
                                             ;---------------------------------------------------
                                             ;   The following section does the same test except
                                             ; with the checkerboard order switched around.
                                             ;---------------------------------------------------
   1806 FFFC115E                             ramtest3:                
   1807 FFFC115E 33FC A8A8 FFDC 0600         		move.w	#$A8A8,leds		; diagnostics
   1808 FFFC1166 207C 0003 0000                      movea.l #$30000,a0
   1809 FFFC116C 203C 5555 AAAA                      move.l 	#$5555aaaa,d0
   1810 FFFC1172                             ramtest4:
   1811 FFFC1172 20C0                                move.l 	d0,(a0)+
   1812 FFFC1174 2208                                move.l 	a0,d1
   1813 FFFC1176 4A41                                tst.w	d1
   1814 FFFC1178 660A                                bne.s   rmtst3
   1815 FFFC117A 4BF9 FFFC 1184                      lea		rmtst3,a5
   1816 FFFC1180 6000 FF0A                           bra		DisplayHexNumber
   1817 FFFC1184                             rmtst3:
   1818 FFFC1184 B1FC 1FFF FFFC                      cmpa.l 	#$1FFFFFFC,a0
   1819 FFFC118A 66E6                                bne.s 	ramtest4
   1820 FFFC118C                             ramtest8:
   1821 FFFC118C 2448                                movea.l a0,a2
   1822 FFFC118E 207C 0003 0000                      movea.l #$30000,a0
   1823 FFFC1194                             ramtest5:
   1824 FFFC1194 2018                                move.l 	(a0)+,d0
   1825 FFFC1196 B5C8                                cmpa.l	a0,a2
   1826 FFFC1198 671A                                beq.s	rmtst5
   1827 FFFC119A 2208                                move.l 	a0,d1
   1828 FFFC119C 4A41                                tst.w	d1
   1829 FFFC119E 660A                                bne.s	rmtst4
   1830 FFFC11A0 4BF9 FFFC 11AA                      lea		rmtst4,a5
   1831 FFFC11A6 6000 FEE4                           bra		DisplayHexNumber
   1832 FFFC11AA                             rmtst4:
   1833 FFFC11AA 0C80 5555 AAAA                      cmpi.l 	#$5555aaaa,d0
   1834 FFFC11B0 67E2                                beq.s 	ramtest5
   1835 FFFC11B2 6622                                bne.s 	ramtest7
                                             ;---------------------------------------------------
                                             ;   Save last ram address in end of memory pointer.
                                             ;---------------------------------------------------
   1839 FFFC11B4                             rmtst5:
   1840 FFFC11B4 23C8 0001 0008                      move.l a0,memend
                                             ;-----------------------------------
                                             ;   Create very first memory block.
                                             ;-----------------------------------
   1844 FFFC11BA 91FC 0000 000C                      suba.l 	#12,a0
   1845 FFFC11C0 21C8 0404                           move.l 	a0,$0404
   1846 FFFC11C4 21FC 4652 4545 0400                 move.l 	#$46524545,$0400
   1847 FFFC11CC 21FC 0000 0408 0408                 move.l 	#$408,$408			; point back-link to self
   1848 FFFC11D4 4ED3                                jmp 	(a3)
                                             ;----------------------------------
                                             ; Error in ram - go no farther.
                                             ;----------------------------------
   1852 FFFC11D6                             ramtest7:
   1853 FFFC11D6 4ED3                        		jmp 	(a3)
   1854 FFFC11D8 60FC                                bra.s 	ramtest7
                                             
                                             
                                             ;===============================================================================
                                             ;===============================================================================
                                             ;===============================================================================
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 32
bootrom.asm
                                             ;===============================================================================
                                             
   1862 FFFC11DA                             GraphicsDemo:
   1863 FFFC11DA 6100 0080                   		bsr		DrawLines
   1864 FFFC11DE 6100 0006                   		bsr		DrawRects
   1865 FFFC11E2 6000 F97A                   		bra		Monitor
                                             
   1867 FFFC11E6                             DrawRects:
   1868 FFFC11E6 4DF9 FFDC 0000              		lea		$FFDC0000,A6	; I/O base
   1869 FFFC11EC 4BF9 FFE0 0000              		lea		VDGREG,a5
   1870 FFFC11F2 2C3C 0000 4E20              		move.l	#20000,d6		; repeat a few times
   1871 FFFC11F8                             .0001:
   1872 FFFC11F8 202E 0C00                   		move.l	$0C00(a6),d0	; get 32 bit number
   1873 FFFC11FC 3200                        		move.w	d0,d1			; use bits 0 to 8 for y0
   1874 FFFC11FE 4840                        		swap	d0				; and bits 16 to 24 for x0
   1875 FFFC1200 0240 00FF                   		and.w	#$FF,d0		; 0 to 511
   1876 FFFC1204 0241 00FF                   		and.w	#$FF,d1		; 0 to 511
   1877 FFFC1208 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   1878 FFFC120C 242E 0C00                   		move.l	$0C00(a6),d2
   1879 FFFC1210 3602                        		move.w	d2,d3
   1880 FFFC1212 4842                        		swap	d2
   1881 FFFC1214 0242 00FF                   		and.w	#$FF,d2		; 0 to 511
   1882 FFFC1218 0243 00FF                   		and.w	#$FF,d3		; 0 to 511
   1883 FFFC121C 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   1884 FFFC1220 282E 0C00                   		move.l	$0C00(a6),d4
   1885 FFFC1224 0244 7FFF                   		and.w	#RGBMASK,d4		; 9/15 bits color
   1886 FFFC1228 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   1887 FFFC122C                             .0002:
   1888 FFFC122C 3E2D 042C                   		move.w	$42C(a5),d7		; check # queued
   1889 FFFC1230 BE7C 001C                   		cmp.w	#28,d7			; more than 28 queued ?
   1890 FFFC1234 64F6                        		bhs.s	.0002			; too many, wait for queue to empty
   1891 FFFC1236 3B7C 0001 0422              		move.w	#1,$422(a5)		; raster op = COPY
   1892 FFFC123C 3B44 0424                   		move.w	d4,$424(a5)		; set color
   1893 FFFC1240 3B40 0426                   		move.w	d0,$426(a5)		; set x0
   1894 FFFC1244 3B41 0428                   		move.w	d1,$428(a5)		; set y0
   1895 FFFC1248 3B42 0430                   		move.w	d2,$430(a5)		; set x1
   1896 FFFC124C 3B43 0432                   		move.w	d3,$432(a5)		; set y1
   1897 FFFC1250 3B7C 0003 042E              		move.w	#3,$42E(a5)		; pulse command queue (3 = draw rect)
   1898 FFFC1256 5386                        		sub.l	#1,d6
   1899 FFFC1258 669E                        		bne		.0001			; go back and do more lines
   1900 FFFC125A 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Draw lines randomly on the screen.
                                             ;===============================================================================
                                             
   1906 FFFC125C                             DrawLines:
   1907 FFFC125C 4DF9 FFDC 0000              		lea		$FFDC0000,A6	; I/O base
   1908 FFFC1262 4BF9 FFE0 0000              		lea		VDGREG,a5
   1909 FFFC1268 2C3C 0003 0D40              		move.l	#200000,d6		; repeat a few times
   1910 FFFC126E                             .0001:
                                             		; Wait for blitter to be done
   1912 FFFC126E                             .0003:								
   1913 FFFC126E 33FC 000A FFDC 0600         		move.w	#10,leds
   1914 FFFC1276 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   1915 FFFC127A 0800 000E                   		btst	#14,d0
   1916 FFFC127E 6706                        		beq.s	.0004
   1917 FFFC1280 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   1918 FFFC1284 67E8                        		beq.s	.0003				; branch if not done
   1919 FFFC1286                             .0004:
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 33
bootrom.asm
   1920 FFFC1286 33FC 000B FFDC 0600         		move.w	#11,leds
   1921 FFFC128E 202E 0C00                   		move.l	$0C00(a6),d0	; get 32 bit number
   1922 FFFC1292 3200                        		move.w	d0,d1			; use bits 0 to 8 for y0
   1923 FFFC1294 4840                        		swap	d0				; and bits 16 to 24 for x0
   1924 FFFC1296 0240 00FF                   		and.w	#$FF,d0		; 0 to 511
   1925 FFFC129A 0241 00FF                   		and.w	#$FF,d1		; 0 to 511
   1926 FFFC129E 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   1927 FFFC12A2 242E 0C00                   		move.l	$0C00(a6),d2
   1928 FFFC12A6 3602                        		move.w	d2,d3
   1929 FFFC12A8 4842                        		swap	d2
   1930 FFFC12AA 0242 00FF                   		and.w	#$FF,d2		; 0 to 511
   1931 FFFC12AE 0243 00FF                   		and.w	#$FF,d3		; 0 to 511
   1932 FFFC12B2 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   1933 FFFC12B6 282E 0C00                   		move.l	$0C00(a6),d4
   1934 FFFC12BA 0244 7FFF                   		and.w	#RGBMASK,d4		; 9/15 bits color
   1935 FFFC12BE 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   1936 FFFC12C2                             .0002:
   1937 FFFC12C2 3E2D 042C                   		move.w	$42C(a5),d7		; check # queued
   1938 FFFC12C6 BE7C 001C                   		cmp.w	#28,d7			; more than 28 queued ?
   1939 FFFC12CA 64F6                        		bhs.s	.0002			; too many, wait for queue to empty
   1940 FFFC12CC 33FC 000C FFDC 0600         		move.w	#12,leds
   1941 FFFC12D4 3B7C 0001 0422              		move.w	#1,$422(a5)		; raster op = COPY
   1942 FFFC12DA 3B44 0424                   		move.w	d4,$424(a5)		; set color
   1943 FFFC12DE 3B40 0426                   		move.w	d0,$426(a5)		; set x0
   1944 FFFC12E2 3B41 0428                   		move.w	d1,$428(a5)		; set y0
   1945 FFFC12E6 3B42 0430                   		move.w	d2,$430(a5)		; set x1
   1946 FFFC12EA 3B43 0432                   		move.w	d3,$432(a5)		; set y1
   1947 FFFC12EE 3B7C 0002 042E              		move.w	#2,$42E(a5)		; pulse command queue (2 = draw line)
   1948 FFFC12F4 5386                        		sub.l	#1,d6
   1949 FFFC12F6 6600 FF76                   		bne		.0001			; go back and do more lines
   1950 FFFC12FA 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Test Blitter
                                             ;===============================================================================
                                             
   1956 FFFC12FC                             TestBlitter:
                                             		; puts a red rectangle on screen
   1958 FFFC12FC 4BF9 FFE0 0000              		lea		VDGREG,a5
   1959 FFFC1302                             .0003:								
   1960 FFFC1302 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   1961 FFFC1306 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   1962 FFFC130A 67F6                        		beq.s	.0003				; branch if not done
   1963 FFFC130C 2B7C 0000 1F40 04BC         		move.l	#8000,$4BC(a5)		; set transfer count 8000 pixels
   1964 FFFC1314 3B7C 7C00 04A8              		move.w	#RED,$4A8(a5)		; set color red
   1965 FFFC131A 2B7C 0000 0118 0498         		move.l	#280,$498(a5)		; set destination address
   1966 FFFC1322 2B7C 0000 0028 04A4         		move.l	#40,$4A4(a5)		; set destination width
   1967 FFFC132A 2B7C 0000 0118 049C         		move.l	#280,$49C(a5)		; set dst modulo
   1968 FFFC1332 3B7C 8080 04AC              		move.w	#%1000000010000000,$4AC(a5)		; enable channel D, start transfer
                                             
                                             		; makes a copy of the upper left corner of the screen
   1971 FFFC1338                             .0001:								
   1972 FFFC1338 302D 04AC                   		move.w	$4AC(a5),d0			; get blit status
   1973 FFFC133C 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   1974 FFFC1340 67F6                        		beq.s	.0001				; branch if not done
                                             		; Channel A
   1976 FFFC1342 2B7C 0000 03E8 04B0         		move.l	#1000,$4B0(a5)		; set source transfer count 8000 pixels
   1977 FFFC134A 2B7C 0000 0000 0480         		move.l	#0,$480(a5)			; set source bitmap address (address in graphics mem)
   1978 FFFC1352 2B7C 0000 0118 0484         		move.l	#280,$484(a5)		; set src modulo
                                             		; Channel C
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 34
bootrom.asm
   1980 FFFC135A 2B7C 0000 03E8 04B8         		move.l	#1000,$4B8(a5)		; set source transfer count 8000 pixels
   1981 FFFC1362 2B7C 0000 0000 0490         		move.l	#0,$490(a5)			; set source bitmap address (address in graphics mem)
   1982 FFFC136A 2B7C 0000 0118 0494         		move.l	#280,$494(a5)		; set src modulo
                                             		; Channel D
   1984 FFFC1372 2B7C 0000 1F40 04BC         		move.l	#8000,$4BC(a5)		; set destination transfer count 8000 pixels
   1985 FFFC137A 2B7C 0000 00F0 0498         		move.l	#240,$498(a5)		; set destination address
   1986 FFFC1382 2B7C 0000 0118 049C         		move.l	#280,$49C(a5)		; set dst modulo
                                             		
   1988 FFFC138A 2B7C 0000 0028 04A0         		move.l	#40,$4A0(a5)		; set source width
   1989 FFFC1392 2B7C 0000 0028 04A4         		move.l	#40,$4A4(a5)		; set destination width
   1990 FFFC139A 3B7C 0091 04AE              		move.w	#$91,$4AE(a5)		; set op A|C	($11 = copy A)
   1991 FFFC13A0 3B7C 80A2 04AC              		move.w	#%1000000010100010,$4AC(a5)		; enable channel A,C,D, start transfer
   1992 FFFC13A6                             .0002:								
   1993 FFFC13A6 302D 04AC                   		move.w	$4AC(a5),d0			; get blit status
   1994 FFFC13AA 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   1995 FFFC13AE 67F6                        		beq.s	.0002				; branch if not done
   1996 FFFC13B0 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Generic I2C routines
                                             ;===============================================================================
                                             
                                             I2C_PREL	EQU		$0
                                             I2C_PREH	EQU		$2
                                             I2C_CTRL	EQU		$4
                                             I2C_RXR		EQU		$6
                                             I2C_TXR		EQU		$6
                                             I2C_CMD		EQU		$8
                                             I2C_STAT	EQU		$A
                                             
                                             ; i2c
   2011 FFFC13B2                             i2c_setup:
   2012 FFFC13B2 4DF9 FFDC 0E00              		lea		I2C,a6				
   2013 FFFC13B8 3CBC 0013                   		move.w	#19,I2C_PREL(a6)	; setup prescale for 400kHz clock
   2014 FFFC13BC 3D7C 0000 0002              		move.w	#0,I2C_PREH(a6)
   2015 FFFC13C2 4DF9 FFDC 0E10              		lea		I2C2,a6				
   2016 FFFC13C8 3CBC 0013                   		move.w	#19,I2C_PREL(a6)	; setup prescale for 400kHz clock
   2017 FFFC13CC 3D7C 0000 0002              		move.w	#0,I2C_PREH(a6)
   2018 FFFC13D2 4E75                        		rts
                                             
                                             ; Wait for I2C transfer to complete
                                             ;
                                             ; Parameters
                                             ; 	a6 - I2C controller base address
                                             
   2025 FFFC13D4                             i2c_wait_tip:
   2026 FFFC13D4 3F00                        		move.w	d0,-(a7)
   2027 FFFC13D6                             .0001:					
   2028 FFFC13D6 302E 000A                   		move.w	I2C_STAT(a6),d0		; wait for tip to clear
   2029 FFFC13DA 0800 0001                   		btst	#1,d0
   2030 FFFC13DE 66F6                        		bne.s	.0001
   2031 FFFC13E0 301F                        		move.w	(a7)+,d0
   2032 FFFC13E2 4E75                        		rts
                                             
                                             ; Parameters
                                             ;	d0.w - data to transmit
                                             ;	d1.w - command value
                                             ;	a6	 - I2C controller base address
                                             ;
   2039 FFFC13E4                             i2c_wr_cmd:
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 35
bootrom.asm
   2040 FFFC13E4 3D40 0006                   		move.w	d0,I2C_TXR(a6)
   2041 FFFC13E8 3D41 0008                   		move.w	d1,I2C_CMD(a6)
   2042 FFFC13EC 6100 FFE6                   		bsr		i2c_wait_tip
   2043 FFFC13F0 302E 000A                   		move.w	I2C_STAT(a6),d0
   2044 FFFC13F4 4E75                        		rts
                                             
   2046 FFFC13F6                             i2c_xmit1:
   2047 FFFC13F6 3F00                        		move.w	d0,-(a7)
   2048 FFFC13F8 3D7C 0001 0004              		move.w	#1,I2C_CTRL(a6)		; enable the core
   2049 FFFC13FE 7076                        		moveq	#$76,d0				; set slave address = %0111011
   2050 FFFC1400 323C 0090                   		move.w	#$90,d1				; set STA, WR
   2051 FFFC1404 6100 FFDE                   		bsr		i2c_wr_cmd
   2052 FFFC1408 6100 0010                   		bsr		i2c_wait_rx_nack
   2053 FFFC140C 301F                        		move.w	(a7)+,d0
   2054 FFFC140E 323C 0050                   		move.w	#$50,d1				; set STO, WR
   2055 FFFC1412 6100 FFD0                   		bsr		i2c_wr_cmd
   2056 FFFC1416 6100 0002                   		bsr		i2c_wait_rx_nack
                                             
   2058 FFFC141A                             i2c_wait_rx_nack:
   2059 FFFC141A 3F00                        		move.w	d0,-(a7)
   2060 FFFC141C                             .0001:							
   2061 FFFC141C 302E 000A                   		move.w	I2C_STAT(a6),d0		; wait for RXack = 0
   2062 FFFC1420 0800 0007                   		btst	#7,d0
   2063 FFFC1424 66F6                        		bne.s	.0001
   2064 FFFC1426 301F                        		move.w	(a7)+,d0
   2065 FFFC1428 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Audio
                                             ;===============================================================================
                                             
                                             
   2072 FFFC142A                             audio_pll_config:
   2073 FFFC142A 7000                        		moveq	#0,d0
   2074 FFFC142C 720E                        		moveq	#$0E,d1
   2075 FFFC142E 6100 001C                   		bsr		audio_write_reg
   2076 FFFC1432 7002                        		moveq	#2,d0
   2077 FFFC1434 41F9 FFFC 14A6              		lea		audio_tbl1,a0
   2078 FFFC143A 6100 0076                   		bsr		audio_write_reg6
   2079 FFFC143E 4E75                        		rts
                                             
   2081 FFFC1440                             audio_startup_config:
   2082 FFFC1440 4E75                        		rts
                                             
   2084 FFFC1442                             audio_init:
   2085 FFFC1442 6100 FFE6                   		bsr		audio_pll_config
   2086 FFFC1446 6100 FFF8                   		bsr		audio_startup_config
   2087 FFFC144A 4E75                        		rts
                                             
                                             ; d0.w = register number
                                             ; d1.w = data to write
                                             		
   2092 FFFC144C                             audio_write_reg:
   2093 FFFC144C 4DF9 FFDC 0E00              		lea		I2C,a6				
   2094 FFFC1452 3D7C 0001 0004              		move.w	#1,I2C_CTRL(a6)		; enable the core
   2095 FFFC1458 3D7C 0076 0006              		move.w	#$76,I2C_TXR(a6)	; set slave address = %0111011
   2096 FFFC145E 3D7C 0090 0008              		move.w	#$90,I2C_CMD(a6)	; set STA, WR
   2097 FFFC1464 6100 FF6E                   		bsr		i2c_wait_tip	; wait for tip to clear
   2098 FFFC1468 6100 FFB0                   		bsr		i2c_wait_rx_nack
   2099 FFFC146C 3D7C 0040 0006              		move.w	#$40,I2C_TXR(a6)	; all regsister are $40xx
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 36
bootrom.asm
   2100 FFFC1472 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2101 FFFC1478 6100 FF5A                   		bsr		i2c_wait_tip	; wait for tip to clear
   2102 FFFC147C 6100 FF9C                   		bsr		i2c_wait_rx_nack
   2103 FFFC1480 3D40 0006                   		move.w	d0,I2C_TXR(a6)		; send register address
   2104 FFFC1484 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2105 FFFC148A 6100 FF48                   		bsr		i2c_wait_tip	; wait for tip to clear
   2106 FFFC148E 6100 FF8A                   		bsr		i2c_wait_rx_nack
   2107 FFFC1492 3D41 0006                   		move.w	d1,I2C_TXR(a6)		; send data
   2108 FFFC1496 3D7C 0050 0008              		move.w	#$50,I2C_CMD(a6)	; set STO, WR
   2109 FFFC149C 6100 FF36                   		bsr		i2c_wait_tip	; wait for tip to clear
   2110 FFFC14A0 6100 FF78                   		bsr		i2c_wait_rx_nack
   2111 FFFC14A4 4E75                        		rts
                                             
   2113 FFFC14A6                             audio_tbl1:
   2114 FFFC14A6 0000 007D 0000 000C         		dc.w	$00,$7D,$00,$0C,$20,$01
   2115 FFFC14AE 0020 0001                   
                                             ; a0
                                             ;
   2118 FFFC14B2                             audio_write_reg6:
   2119 FFFC14B2 41F9 FFFC 14A6              		lea		audio_tbl1,a0
   2120 FFFC14B8 4DF9 FFDC 0E00              		lea		I2C,a6				
   2121 FFFC14BE 3D7C 0001 0004              		move.w	#1,I2C_CTRL(a6)		; enable the core
   2122 FFFC14C4 3D7C 0076 0006              		move.w	#$76,I2C_TXR(a6)	; set slave address = %0111011
   2123 FFFC14CA 3D7C 0090 0008              		move.w	#$90,I2C_CMD(a6)	; set STA, WR
   2124 FFFC14D0 6100 FF02                   		bsr		i2c_wait_tip	; wait for tip to clear
   2125 FFFC14D4 6100 FF44                   		bsr		i2c_wait_rx_nack
   2126 FFFC14D8 3D7C 0040 0006              		move.w	#$40,I2C_TXR(a6)	; all regsister are $40xx
   2127 FFFC14DE 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2128 FFFC14E4 6100 FEEE                   		bsr		i2c_wait_tip	; wait for tip to clear
   2129 FFFC14E8 6100 FF30                   		bsr		i2c_wait_rx_nack
                                             
   2131 FFFC14EC 3D40 0006                   		move.w	d0,I2C_TXR(a6)		; send register address
   2132 FFFC14F0 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2133 FFFC14F6 6100 FEDC                   		bsr		i2c_wait_tip	; wait for tip to clear
   2134 FFFC14FA 6100 FF1E                   		bsr		i2c_wait_rx_nack
                                             		
   2136 FFFC14FE 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #0
   2137 FFFC1502 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2138 FFFC1508 6100 FECA                   		bsr		i2c_wait_tip	; wait for tip to clear
   2139 FFFC150C 6100 FF0C                   		bsr		i2c_wait_rx_nack
                                             
   2141 FFFC1510 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #1
   2142 FFFC1514 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2143 FFFC151A 6100 FEB8                   		bsr		i2c_wait_tip	; wait for tip to clear
   2144 FFFC151E 6100 FEFA                   		bsr		i2c_wait_rx_nack
                                             
   2146 FFFC1522 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #2
   2147 FFFC1526 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2148 FFFC152C 6100 FEA6                   		bsr		i2c_wait_tip	; wait for tip to clear
   2149 FFFC1530 6100 FEE8                   		bsr		i2c_wait_rx_nack
                                             
   2151 FFFC1534 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #3
   2152 FFFC1538 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2153 FFFC153E 6100 FE94                   		bsr		i2c_wait_tip	; wait for tip to clear
   2154 FFFC1542 6100 FED6                   		bsr		i2c_wait_rx_nack
                                             
   2156 FFFC1546 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #4
   2157 FFFC154A 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2158 FFFC1550 6100 FE82                   		bsr		i2c_wait_tip	; wait for tip to clear
   2159 FFFC1554 6100 FEC4                   		bsr		i2c_wait_rx_nack
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 37
bootrom.asm
                                             
   2161 FFFC1558 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #5
   2162 FFFC155C 3D7C 0050 0008              		move.w	#$50,I2C_CMD(a6)	; set WR, STO
   2163 FFFC1562 6100 FE70                   		bsr		i2c_wait_tip		; wait for tip to clear
   2164 FFFC1566 6100 FEB2                   		bsr		i2c_wait_rx_nack
   2165 FFFC156A 4E75                        		rts
                                             
   2167 FFFC156C                             set_hp_output:
   2168 FFFC156C 7021                        		moveq	#$21,d0				;
   2169 FFFC156E 7200                        		moveq	#0,d1
   2170 FFFC1570 6100 FEDA                   		bsr		audio_write_reg
   2171 FFFC1574 7020                        		moveq	#$20,d0				;
   2172 FFFC1576 6100 FED4                   		bsr		audio_write_reg
   2173 FFFC157A 7023                        		moveq	#$23,d0
   2174 FFFC157C 323C 00E7                   		move.w	#$E7,d1		
   2175 FFFC1580 6100 FECA                   		bsr		audio_write_reg
   2176 FFFC1584 7024                        		moveq	#$24,d0
   2177 FFFC1586 323C 00E7                   		move.w	#$E7,d1		
   2178 FFFC158A 6100 FEC0                   		bsr		audio_write_reg
   2179 FFFC158E 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Realtime clock routines
                                             ;===============================================================================
                                             
   2185 FFFC1590                             rtc_read:
   2186 FFFC1590 2C7C FFDC 0E10              		movea.l	#I2C2,a6
   2187 FFFC1596 4BF9 0001 0600              		lea		RTCBuf,a5
   2188 FFFC159C 3D7C 0080 0004              		move.w	#$80,I2C_CTRL(a6)	; enable I2C
   2189 FFFC15A2 303C 00DE                   		move.w	#$DE,d0				; read address, write op
   2190 FFFC15A6 323C 0090                   		move.w	#$90,d1				; STA + wr bit
   2191 FFFC15AA 6100 FE38                   		bsr		i2c_wr_cmd
   2192 FFFC15AE 4A00                        		tst.b	d0
   2193 FFFC15B0 6B72                        		bmi		.rxerr
   2194 FFFC15B2 303C 0000                   		move.w	#$00,d0				; address zero
   2195 FFFC15B6 323C 0010                   		move.w	#$10,d1				; wr bit
   2196 FFFC15BA 6100 FE28                   		bsr		i2c_wr_cmd
   2197 FFFC15BE 4A00                        		tst.b	d0
   2198 FFFC15C0 6B62                        		bmi		.rxerr
   2199 FFFC15C2 303C 00DF                   		move.w	#$DF,d0				; read address, read op
   2200 FFFC15C6 323C 0090                   		move.w	#$90,d1				; STA + wr bit
   2201 FFFC15CA 6100 FE18                   		bsr		i2c_wr_cmd
   2202 FFFC15CE 4A00                        		tst.b	d0
   2203 FFFC15D0 6B52                        		bmi		.rxerr
                                             		
   2205 FFFC15D2 343C 0020                   		move.w	#$20,d2
   2206 FFFC15D6                             .0001:
   2207 FFFC15D6 3D7C 0020 0008              		move.w	#$20,I2C_CMD(a6)	; rd bit
   2208 FFFC15DC 6100 FDF6                   		bsr		i2c_wait_tip
   2209 FFFC15E0 6100 FE38                   		bsr		i2c_wait_rx_nack
   2210 FFFC15E4 302E 000A                   		move.w	I2C_STAT(a6),d0
   2211 FFFC15E8 4A00                        		tst.b	d0
   2212 FFFC15EA 6B38                        		bmi		.rxerr
   2213 FFFC15EC 302E 0006                   		move.w	I2C_RXR(a6),d0
   2214 FFFC15F0 1B80 2000                   		move.b	d0,(a5,d2.w)
   2215 FFFC15F4 5242                        		add.w	#1,d2
   2216 FFFC15F6 B47C 005F                   		cmp.w	#$5F,d2
   2217 FFFC15FA 66DA                        		bne		.0001
   2218 FFFC15FC 3D7C 0068 0008              		move.w	#$68,I2C_CMD(a6)	; STO, rd bit + nack
   2219 FFFC1602 6100 FDD0                   		bsr		i2c_wait_tip
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 38
bootrom.asm
   2220 FFFC1606 6100 FE12                   		bsr		i2c_wait_rx_nack
   2221 FFFC160A 302E 000A                   		move.w	I2C_STAT(a6),d0
   2222 FFFC160E 4A00                        		tst.b	d0
   2223 FFFC1610 6B12                        		bmi		.rxerr
   2224 FFFC1612 302E 0006                   		move.w	I2C_RXR(a6),d0
   2225 FFFC1616 1B80 2000                   		move.b	d0,(a5,d2.w)
   2226 FFFC161A 3D7C 0000 0004              		move.w	#0,I2C_CTRL(a6)		; disable I2C and return 0
   2227 FFFC1620 7000                        		moveq	#0,d0
   2228 FFFC1622 4E75                        		rts
   2229 FFFC1624                             .rxerr:
   2230 FFFC1624 3D7C 0000 0004              		move.w	#0,I2C_CTRL(a6)		; disable I2C and return status
   2231 FFFC162A 4E75                        		rts
                                             
   2233 FFFC162C                             rtc_write:
   2234 FFFC162C 2C7C FFDC 0E10              		movea.l	#I2C2,a6
   2235 FFFC1632 4BF9 0001 0600              		lea		RTCBuf,a5
   2236 FFFC1638 3D7C 0080 0004              		move.w	#$80,I2C_CTRL(a6)	; enable I2C
   2237 FFFC163E 303C 00DE                   		move.w	#$DE,d0				; read address, write op
   2238 FFFC1642 323C 0090                   		move.w	#$90,d1				; STA + wr bit
   2239 FFFC1646 6100 FD9C                   		bsr		i2c_wr_cmd
   2240 FFFC164A 4A00                        		tst.b	d0
   2241 FFFC164C 6B46                        		bmi		.rxerr
   2242 FFFC164E 303C 0000                   		move.w	#$00,d0				; address zero
   2243 FFFC1652 323C 0010                   		move.w	#$10,d1				; wr bit
   2244 FFFC1656 6100 FD8C                   		bsr		i2c_wr_cmd
   2245 FFFC165A 4A00                        		tst.b	d0
   2246 FFFC165C 6B36                        		bmi		.rxerr
   2247 FFFC165E 343C 0020                   		move.w	#$20,d2
   2248 FFFC1662                             .0001:
   2249 FFFC1662 1035 2000                   		move.b	(a5,d2.w),d0
   2250 FFFC1666 323C 0010                   		move.w	#$10,d1
   2251 FFFC166A 6100 FD78                   		bsr		i2c_wr_cmd
   2252 FFFC166E 4A00                        		tst.b	d0
   2253 FFFC1670 6B22                        		bmi		.rxerr
   2254 FFFC1672 5242                        		add.w	#1,d2
   2255 FFFC1674 B47C 005F                   		cmp.w	#$5F,d2
   2256 FFFC1678 66E8                        		bne.s	.0001
   2257 FFFC167A 1035 2000                   		move.b	(a5,d2.w),d0
   2258 FFFC167E 323C 0050                   		move.w	#$50,d1				; STO, wr bit
   2259 FFFC1682 6100 FD60                   		bsr		i2c_wr_cmd
   2260 FFFC1686 4A00                        		tst.b	d0
   2261 FFFC1688 6B0A                        		bmi		.rxerr
   2262 FFFC168A 3D7C 0000 0004              		move.w	#0,I2C_CTRL(a6)		; disable I2C and return 0
   2263 FFFC1690 7000                        		moveq	#0,d0
   2264 FFFC1692 4E75                        		rts
   2265 FFFC1694                             .rxerr:
   2266 FFFC1694 3D7C 0000 0004              		move.w	#0,I2C_CTRL(a6)		; disable I2C and return status
   2267 FFFC169A 4E75                        		rts
                                             
   2269 FFFC169C                             msgRtcReadFail:
   2270 FFFC169C 52 54 43 20 72 65 61 64     		dc.b	"RTC read/write failed.",$0D,$0A,$00
   2271 FFFC16A4 2F 77 72 69 74 65 20 66     
   2272 FFFC16AC 61 69 6C 65 64 2E 0D 0A     
   2273 FFFC16B4 00                          
                                             
                                             		
                                             ; Randomize the screen	
                                             ;		move.l	#VDGBUF,A0
                                             ;		move.l	#%011011111,D0		; light blue
                                             ;		move.l	#640*512,D1
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 39
bootrom.asm
                                             ;clrscr_loop1:
                                             ;		move.l	$0C00(a6),d0			; get a random number
                                             ;		clr.w	$0C04(a6)				; generate next number
                                             ;		move.w	d0,(a0)+				; store it to the screen
                                             ;		sub.l	#1,d1
                                             ;		bne		clrscr_loop1
                                             
   2287 FFFC16B5                             msg_start:
   2288 FFFC16B5 4E 34 56 20 36 38 6B 20     	dc.b	"N4V 68k System Starting",0
   2289 FFFC16BD 53 79 73 74 65 6D 20 53     
   2290 FFFC16C5 74 61 72 74 69 6E 67 00     
                                             
                                             
                                             ;------------------------------------------------------------------------------
   2294 FFFC16CD                             font8:
   2295 FFFC16CD 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $00
                                             
   2297 FFFC16D5 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2299 FFFC16DD 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2301 FFFC16E5 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2303 FFFC16ED 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $04
                                             
   2305 FFFC16F5 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2307 FFFC16FD 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2309 FFFC1705 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2311 FFFC170D 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $08
                                             
   2313 FFFC1715 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2315 FFFC171D 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2317 FFFC1725 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2319 FFFC172D 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $0C
                                             
   2321 FFFC1735 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2323 FFFC173D 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2325 FFFC1745 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2327 FFFC174D 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $10
                                             
   2329 FFFC1755 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2331 FFFC175D 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2333 FFFC1765 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2335 FFFC176D 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $14
                                             
   2337 FFFC1775 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2339 FFFC177D 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 40
bootrom.asm
                                             
   2341 FFFC1785 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2343 FFFC178D 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $18
                                             
   2345 FFFC1795 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2347 FFFC179D 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2349 FFFC17A5 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2351 FFFC17AD 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $1C
                                             
   2353 FFFC17B5 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2355 FFFC17BD 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2357 FFFC17C5 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2359 FFFC17CD 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; SPACE
                                             
   2361 FFFC17D5 18 18 18 18 18 00 18 00     	dc.b	$18,$18,$18,$18,$18,$00,$18,$00	; !
                                             
   2363 FFFC17DD 6C 6C 00 00 00 00 00 00     	dc.b	$6C,$6C,$00,$00,$00,$00,$00,$00	; "
                                             
   2365 FFFC17E5 6C 6C FE 6C FE 6C 6C 00     	dc.b	$6C,$6C,$FE,$6C,$FE,$6C,$6C,$00	; #
                                             
   2367 FFFC17ED 18 3E 60 3C 06 7C 18 00     	dc.b	$18,$3E,$60,$3C,$06,$7C,$18,$00	; $
                                             
   2369 FFFC17F5 00 66 AC D8 36 6A CC 00     	dc.b	$00,$66,$AC,$D8,$36,$6A,$CC,$00	; %
                                             
   2371 FFFC17FD 38 6C 68 76 DC CE 7B 00     	dc.b	$38,$6C,$68,$76,$DC,$CE,$7B,$00	; &
                                             
   2373 FFFC1805 18 18 30 00 00 00 00 00     	dc.b	$18,$18,$30,$00,$00,$00,$00,$00	; '
                                             
   2375 FFFC180D 0C 18 30 30 30 18 0C 00     	dc.b	$0C,$18,$30,$30,$30,$18,$0C,$00	; (
                                             
   2377 FFFC1815 30 18 0C 0C 0C 18 30 00     	dc.b	$30,$18,$0C,$0C,$0C,$18,$30,$00	; )
                                             
   2379 FFFC181D 00 66 3C FF 3C 66 00 00     	dc.b	$00,$66,$3C,$FF,$3C,$66,$00,$00	; *
                                             
   2381 FFFC1825 00 18 18 7E 18 18 00 00     	dc.b	$00,$18,$18,$7E,$18,$18,$00,$00	; +
                                             
   2383 FFFC182D 00 00 00 00 00 18 18 30     	dc.b	$00,$00,$00,$00,$00,$18,$18,$30	; ,
                                             
   2385 FFFC1835 00 00 00 7E 00 00 00 00     	dc.b	$00,$00,$00,$7E,$00,$00,$00,$00	; -
                                             
   2387 FFFC183D 00 00 00 00 00 18 18 00     	dc.b	$00,$00,$00,$00,$00,$18,$18,$00	; .
                                             
   2389 FFFC1845 03 06 0C 18 30 60 C0 00     	dc.b	$03,$06,$0C,$18,$30,$60,$C0,$00	; /
                                             
   2391 FFFC184D 3C 66 6E 7E 76 66 3C 00     	dc.b	$3C,$66,$6E,$7E,$76,$66,$3C,$00	; 0
                                             
   2393 FFFC1855 18 38 78 18 18 18 18 00     	dc.b	$18,$38,$78,$18,$18,$18,$18,$00	; 1
                                             
   2395 FFFC185D 3C 66 06 0C 18 30 7E 00     	dc.b	$3C,$66,$06,$0C,$18,$30,$7E,$00	; 2
                                             
   2397 FFFC1865 3C 66 06 1C 06 66 3C 00     	dc.b	$3C,$66,$06,$1C,$06,$66,$3C,$00	; 3
                                             
   2399 FFFC186D 1C 3C 6C CC FE 0C 0C 00     	dc.b	$1C,$3C,$6C,$CC,$FE,$0C,$0C,$00	; 4
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 41
bootrom.asm
                                             
   2401 FFFC1875 7E 60 7C 06 06 66 3C 00     	dc.b	$7E,$60,$7C,$06,$06,$66,$3C,$00	; 5
                                             
   2403 FFFC187D 1C 30 60 7C 66 66 3C 00     	dc.b	$1C,$30,$60,$7C,$66,$66,$3C,$00	; 6
                                             
   2405 FFFC1885 7E 06 06 0C 18 18 18 00     	dc.b	$7E,$06,$06,$0C,$18,$18,$18,$00	; 7
                                             
   2407 FFFC188D 3C 66 66 3C 66 66 3C 00     	dc.b	$3C,$66,$66,$3C,$66,$66,$3C,$00	; 8
                                             
   2409 FFFC1895 3C 66 66 3E 06 0C 38 00     	dc.b	$3C,$66,$66,$3E,$06,$0C,$38,$00	; 9
                                             
   2411 FFFC189D 00 18 18 00 00 18 18 00     	dc.b	$00,$18,$18,$00,$00,$18,$18,$00	; :
                                             
   2413 FFFC18A5 00 18 18 00 00 18 18 30     	dc.b	$00,$18,$18,$00,$00,$18,$18,$30	; ;
                                             
   2415 FFFC18AD 00 06 18 60 18 06 00 00     	dc.b	$00,$06,$18,$60,$18,$06,$00,$00	; <
                                             
   2417 FFFC18B5 00 00 7E 00 7E 00 00 00     	dc.b	$00,$00,$7E,$00,$7E,$00,$00,$00	; =
                                             
   2419 FFFC18BD 00 60 18 06 18 60 00 00     	dc.b	$00,$60,$18,$06,$18,$60,$00,$00	; >
                                             
   2421 FFFC18C5 3C 66 06 0C 18 00 18 00     	dc.b	$3C,$66,$06,$0C,$18,$00,$18,$00	; ?
                                             
   2423 FFFC18CD 7C C6 DE D6 DE C0 78 00     	dc.b	$7C,$C6,$DE,$D6,$DE,$C0,$78,$00	; @
                                             
   2425 FFFC18D5 3C 66 66 7E 66 66 66 00     	dc.b	$3C,$66,$66,$7E,$66,$66,$66,$00	; A
                                             
   2427 FFFC18DD 7C 66 66 7C 66 66 7C 00     	dc.b	$7C,$66,$66,$7C,$66,$66,$7C,$00	; B
                                             
   2429 FFFC18E5 1E 30 60 60 60 30 1E 00     	dc.b	$1E,$30,$60,$60,$60,$30,$1E,$00	; C
                                             
   2431 FFFC18ED 78 6C 66 66 66 6C 78 00     	dc.b	$78,$6C,$66,$66,$66,$6C,$78,$00	; D
                                             
   2433 FFFC18F5 7E 60 60 78 60 60 7E 00     	dc.b	$7E,$60,$60,$78,$60,$60,$7E,$00	; E
                                             
   2435 FFFC18FD 7E 60 60 78 60 60 60 00     	dc.b	$7E,$60,$60,$78,$60,$60,$60,$00	; F
                                             
   2437 FFFC1905 3C 66 60 6E 66 66 3E 00     	dc.b	$3C,$66,$60,$6E,$66,$66,$3E,$00	; G
                                             
   2439 FFFC190D 66 66 66 7E 66 66 66 00     	dc.b	$66,$66,$66,$7E,$66,$66,$66,$00	; H
                                             
   2441 FFFC1915 3C 18 18 18 18 18 3C 00     	dc.b	$3C,$18,$18,$18,$18,$18,$3C,$00	; I
                                             
   2443 FFFC191D 06 06 06 06 06 66 3C 00     	dc.b	$06,$06,$06,$06,$06,$66,$3C,$00	; J
                                             
   2445 FFFC1925 C6 CC D8 F0 D8 CC C6 00     	dc.b	$C6,$CC,$D8,$F0,$D8,$CC,$C6,$00	; K
                                             
   2447 FFFC192D 60 60 60 60 60 60 7E 00     	dc.b	$60,$60,$60,$60,$60,$60,$7E,$00	; L
                                             
   2449 FFFC1935 C6 EE FE D6 C6 C6 C6 00     	dc.b	$C6,$EE,$FE,$D6,$C6,$C6,$C6,$00	; M
                                             
   2451 FFFC193D C6 E6 F6 DE CE C6 C6 00     	dc.b	$C6,$E6,$F6,$DE,$CE,$C6,$C6,$00	; N
                                             
   2453 FFFC1945 3C 66 66 66 66 66 3C 00     	dc.b	$3C,$66,$66,$66,$66,$66,$3C,$00	; O
                                             
   2455 FFFC194D 7C 66 66 7C 60 60 60 00     	dc.b	$7C,$66,$66,$7C,$60,$60,$60,$00	; P
                                             
   2457 FFFC1955 78 CC CC CC CC DC 7E 00     	dc.b	$78,$CC,$CC,$CC,$CC,$DC,$7E,$00	; Q
                                             
   2459 FFFC195D 7C 66 66 7C 6C 66 66 00     	dc.b	$7C,$66,$66,$7C,$6C,$66,$66,$00	; R
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 42
bootrom.asm
                                             
   2461 FFFC1965 3C 66 70 3C 0E 66 3C 00     	dc.b	$3C,$66,$70,$3C,$0E,$66,$3C,$00	; S
                                             
   2463 FFFC196D 7E 18 18 18 18 18 18 00     	dc.b	$7E,$18,$18,$18,$18,$18,$18,$00	; T
                                             
   2465 FFFC1975 66 66 66 66 66 66 3C 00     	dc.b	$66,$66,$66,$66,$66,$66,$3C,$00	; U
                                             
   2467 FFFC197D 66 66 66 66 3C 3C 18 00     	dc.b	$66,$66,$66,$66,$3C,$3C,$18,$00	; V
                                             
   2469 FFFC1985 C6 C6 C6 D6 FE EE C6 00     	dc.b	$C6,$C6,$C6,$D6,$FE,$EE,$C6,$00	; W
                                             
   2471 FFFC198D C3 66 3C 18 3C 66 C3 00     	dc.b	$C3,$66,$3C,$18,$3C,$66,$C3,$00	; X
                                             
   2473 FFFC1995 C3 66 3C 18 18 18 18 00     	dc.b	$C3,$66,$3C,$18,$18,$18,$18,$00	; Y
                                             
   2475 FFFC199D FE 0C 18 30 60 C0 FE 00     	dc.b	$FE,$0C,$18,$30,$60,$C0,$FE,$00	; Z
                                             
   2477 FFFC19A5 3C 30 30 30 30 30 3C 00     	dc.b	$3C,$30,$30,$30,$30,$30,$3C,$00	; [
                                             
   2479 FFFC19AD C0 60 30 18 0C 06 03 00     	dc.b	$C0,$60,$30,$18,$0C,$06,$03,$00	; \
                                             
   2481 FFFC19B5 3C 0C 0C 0C 0C 0C 3C 00     	dc.b	$3C,$0C,$0C,$0C,$0C,$0C,$3C,$00	; ]
                                             
   2483 FFFC19BD 10 38 6C C6 00 00 00 00     	dc.b	$10,$38,$6C,$C6,$00,$00,$00,$00	; ^
                                             
   2485 FFFC19C5 00 00 00 00 00 00 00 FE     	dc.b	$00,$00,$00,$00,$00,$00,$00,$FE	; _
                                             
   2487 FFFC19CD 18 18 0C 00 00 00 00 00     	dc.b	$18,$18,$0C,$00,$00,$00,$00,$00	; `
                                             
   2489 FFFC19D5 00 00 3C 06 3E 66 3E 00     	dc.b	$00,$00,$3C,$06,$3E,$66,$3E,$00	; a
                                             
   2491 FFFC19DD 60 60 7C 66 66 66 7C 00     	dc.b	$60,$60,$7C,$66,$66,$66,$7C,$00	; b
                                             
   2493 FFFC19E5 00 00 3C 60 60 60 3C 00     	dc.b	$00,$00,$3C,$60,$60,$60,$3C,$00	; c
                                             
   2495 FFFC19ED 06 06 3E 66 66 66 3E 00     	dc.b	$06,$06,$3E,$66,$66,$66,$3E,$00	; d
                                             
   2497 FFFC19F5 00 00 3C 66 7E 60 3C 00     	dc.b	$00,$00,$3C,$66,$7E,$60,$3C,$00	; e
                                             
   2499 FFFC19FD 1C 30 7C 30 30 30 30 00     	dc.b	$1C,$30,$7C,$30,$30,$30,$30,$00	; f
                                             
   2501 FFFC1A05 00 00 3E 66 66 3E 06 3C     	dc.b	$00,$00,$3E,$66,$66,$3E,$06,$3C	; g
                                             
   2503 FFFC1A0D 60 60 7C 66 66 66 66 00     	dc.b	$60,$60,$7C,$66,$66,$66,$66,$00	; h
                                             
   2505 FFFC1A15 18 00 18 18 18 18 0C 00     	dc.b	$18,$00,$18,$18,$18,$18,$0C,$00	; i
                                             
   2507 FFFC1A1D 0C 00 0C 0C 0C 0C 0C 78     	dc.b	$0C,$00,$0C,$0C,$0C,$0C,$0C,$78	; j
                                             
   2509 FFFC1A25 60 60 66 6C 78 6C 66 00     	dc.b	$60,$60,$66,$6C,$78,$6C,$66,$00	; k
                                             
   2511 FFFC1A2D 18 18 18 18 18 18 0C 00     	dc.b	$18,$18,$18,$18,$18,$18,$0C,$00	; l
                                             
   2513 FFFC1A35 00 00 EC FE D6 C6 C6 00     	dc.b	$00,$00,$EC,$FE,$D6,$C6,$C6,$00	; m
                                             
   2515 FFFC1A3D 00 00 7C 66 66 66 66 00     	dc.b	$00,$00,$7C,$66,$66,$66,$66,$00	; n
                                             
   2517 FFFC1A45 00 00 3C 66 66 66 3C 00     	dc.b	$00,$00,$3C,$66,$66,$66,$3C,$00	; o
                                             
   2519 FFFC1A4D 00 00 7C 66 66 7C 60 60     	dc.b	$00,$00,$7C,$66,$66,$7C,$60,$60	; p
Finitron asm68 assembler    version 5.6   Sat Dec 02 23:22:24 2017     Page 43
bootrom.asm
                                             
   2521 FFFC1A55 00 00 3E 66 66 3E 06 06     	dc.b	$00,$00,$3E,$66,$66,$3E,$06,$06	; q
                                             
   2523 FFFC1A5D 00 00 7C 66 60 60 60 00     	dc.b	$00,$00,$7C,$66,$60,$60,$60,$00	; r
                                             
   2525 FFFC1A65 00 00 3C 60 3C 06 7C 00     	dc.b	$00,$00,$3C,$60,$3C,$06,$7C,$00	; s
                                             
   2527 FFFC1A6D 30 30 7C 30 30 30 1C 00     	dc.b	$30,$30,$7C,$30,$30,$30,$1C,$00	; t
                                             
   2529 FFFC1A75 00 00 66 66 66 66 3E 00     	dc.b	$00,$00,$66,$66,$66,$66,$3E,$00	; u
                                             
   2531 FFFC1A7D 00 00 66 66 66 3C 18 00     	dc.b	$00,$00,$66,$66,$66,$3C,$18,$00	; v
                                             
   2533 FFFC1A85 00 00 C6 C6 D6 FE 6C 00     	dc.b	$00,$00,$C6,$C6,$D6,$FE,$6C,$00	; w
                                             
   2535 FFFC1A8D 00 00 C6 6C 38 6C C6 00     	dc.b	$00,$00,$C6,$6C,$38,$6C,$C6,$00	; x
                                             
   2537 FFFC1A95 00 00 66 66 66 3C 18 30     	dc.b	$00,$00,$66,$66,$66,$3C,$18,$30	; y
                                             
   2539 FFFC1A9D 00 00 7E 0C 18 30 7E 00     	dc.b	$00,$00,$7E,$0C,$18,$30,$7E,$00	; z
                                             
   2541 FFFC1AA5 0E 18 18 70 18 18 0E 00     	dc.b	$0E,$18,$18,$70,$18,$18,$0E,$00	; {
                                             
   2543 FFFC1AAD 18 18 18 18 18 18 18 00     	dc.b	$18,$18,$18,$18,$18,$18,$18,$00	; |
                                             
   2545 FFFC1AB5 70 18 18 0E 18 18 70 00     	dc.b	$70,$18,$18,$0E,$18,$18,$70,$00	; }
                                             
   2547 FFFC1ABD 72 9C 00 00 00 00 00 00     	dc.b	$72,$9C,$00,$00,$00,$00,$00,$00	; ~
                                             
   2549 FFFC1AC5 FE FE FE FE FE FE FE 00     	dc.b	$FE,$FE,$FE,$FE,$FE,$FE,$FE,$00	; 
                                             
