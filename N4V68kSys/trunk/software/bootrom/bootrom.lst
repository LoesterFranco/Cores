Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 1
bootrom.asm

                                             ; N4V68kSys bootrom - (C) 2017 Robert Finch, Waterloo
                                             ;
                                             ; This file is part of N4V68kSys
                                             ;
                                             ; how to build:
                                             ; 1. assemble using "asm68 bootrom.asm /G00 /olyebvm"
                                             ; 2. copy bootrom.vh to the correct directory if not already there
                                             ;
                                             ;------------------------------------------------------------------------------
                                             ;
                                             ; system memory map
                                             ;
                                             ;
                                             ; 00000000 +----------------+
                                             ;          | startup sp,pc  | 8 B
                                             ; 00000008 +----------------+
                                             ;          |                |
                                             ;          |                |
                                             ;          |                |
                                             ;          :  dram memory   : 512 MB
                                             ;          |                |
                                             ;          |                |
                                             ;          |                |
                                             ; 20000000 +----------------+
                                             ;          |                |
                                             ;          :     unused     :
                                             ;          |                |
                                             ; FF800000 +----------------+
                                             ;          |                |
                                             ;          : display buffer : 896k
                                             ;          |                |
                                             ; FF8E0000 +----------------+
                                             ;          |                |
                                             ;          :     unused     :
                                             ;          |                |
                                             ; FFD00000 +----------------+
                                             ;          |                |
                                             ;          :    I/O area    : 1.0 M
                                             ;          |                |
                                             ; FFE00000 +----------------+
                                             ;          |   VDG regs     |
                                             ; FFE01000 +----------------+
                                             ;          |                |
                                             ;          :     unused     :
                                             ;          |                |
                                             ; FFFC0000 +----------------+
                                             ;          |                |
                                             ;          :    boot rom    :
                                             ;          |                |
                                             ; FFFFFFFF +----------------+
                                             ;
                                             ;
                                             RGBMASK		EQU		%0111111111111111
                                             RED			EQU		%0111110000000000
                                             DARK_BLUE	EQU		%0000000000001111
                                             BLACK		EQU		%0000000000000000
                                             WHITE		EQU		%0111111111111111
                                             
                                             CR		EQU		$0D
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 2
bootrom.asm
                                             LF		EQU		$0A
                                             
                                             SC_F12  EQU    $07
                                             SC_C    EQU    $21
                                             SC_T    EQU    $2C
                                             SC_Z    EQU    $1A
                                             SC_KEYUP	EQU		$F0
                                             SC_EXTEND   EQU		$E0
                                             SC_CTRL		EQU		$14
                                             SC_RSHIFT	EQU		$59
                                             SC_NUMLOCK	EQU		$77
                                             SC_SCROLLLOCK	EQU	$7E
                                             SC_CAPSLOCK		EQU	$58
                                             SC_ALT		EQU		$11
                                             SC_LSHIFT	EQU		$12
                                             SC_DEL		EQU		$71		; extend
                                             SC_LCTRL	EQU		$58
                                             SC_TAB      EQU		$0D
                                             
                                             TEXTCOLS	EQU	40
                                             TEXTROWS	EQU	32
                                             
                                             VDGBUF		EQU	$FF800000
                                             VDGREG		EQU	$FFE00000
                                             VDG_CURX	EQU	$0440
                                             VDG_CURY	EQU	$0442
                                             VDG_CURSZ	EQU	$0444
                                             VDG_CURCLR	EQU	$0446
                                             VDG_CURFLSH	EQU	$0448
                                             VDG_CURIMG	EQU	$0460
                                             I2C			EQU	$FFDC0E00
                                             I2C2		EQU	$FFDC0E10
                                             VirtScreen	EQU	$1FFF0000
                                             KEYBD		EQU	$FFDC0000
                                             leds		EQU	$FFDC0600
                                             rand		EQU	$FFDC0C00
                                             
                                             fgcolor		EQU	$10002
                                             bkcolor		EQU	$10004
                                             fntsz		EQU	$10006
                                             memend		EQU	$10008
                                             CursorRow	EQU	$10418
                                             CursorCol	EQU $10419
                                             TextRows	EQU	$1041A
                                             TextCols	EQU	$1041B
                                             TextCurpos	EQU	$1041C
                                             TextScr		EQU	$10420
                                             KeybdEcho		EQU	$10424
                                             KeybdWaitFlag	EQU	$10425
                                             _KeyState1		EQU	$10426
                                             _KeyState2		EQU	$10427
                                             KeybdLEDs		EQU	$10428
                                             
                                             reg_d0			EQU	$10500
                                             reg_d1			EQU	$10504
                                             reg_d2			EQU	$10508
                                             reg_d3			EQU	$1050C
                                             reg_d4			EQU $10510
                                             reg_d5			EQU $10514
                                             reg_d6			EQU	$10518
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 3
bootrom.asm
                                             reg_d7			EQU	$1051C
                                             reg_a0			EQU $10520
                                             reg_a1			EQU	$10524
                                             reg_a2			EQU	$10528
                                             reg_a3			EQU $1052C
                                             reg_a4			EQU $10530
                                             reg_a5			EQU $10534
                                             reg_a6			EQU $10538
                                             reg_ssp			EQU	$1053C
                                             reg_usp			EQU	$10540
                                             reg_pc			EQU $10544
                                             reg_sr			EQU	$10548
                                             
                                             RTCBuf			EQU	$10600
                                             RTFBufEnd		EQU	$10660
                                             
                                             	org		$FFFC0000
                                             
                                             ;------------------------------------------------------------------------------
                                             
    140 FFFC0000 FF401000                    	dc.l	$FF401000	; initial SSP
    141 FFFC0004 FFFC0010                    	dc.l	Start		; initial PC
                                             	
                                             ;------------------------------------------------------------------------------
    144 FFFC0008                             fpga_version:
    145 FFFC0008 41 41 30 30 30 30 30 30     	dc.b	"AA000000"	; FPGA core version - 8 ASCII characters
                                             
                                             
                                             ;------------------------------------------------------------------------------
    149 FFFC0010                             	Start:
                                             ;------------------------------------------------------------------------------
    151 FFFC0010 33FC A1A1 FFDC 0600         		move.w	#$A1A1,leds		; diagnostics
                                             
                                             		; SIM croaked because the upper half of D1 was undefined. This caused
                                             		; problems with a dbra instruction. So the contents of all the registers
                                             		; are defined at startup. This is only needed for SIM.
    156 FFFC0018 7000                        		moveq	#0,D0
    157 FFFC001A 7200                        		moveq	#0,D1				; for SIM
    158 FFFC001C 7400                        		moveq	#0,D2
    159 FFFC001E 7600                        		moveq	#0,D3
    160 FFFC0020 7800                        		moveq	#0,D4
    161 FFFC0022 7A00                        		moveq	#0,D5
    162 FFFC0024 7C00                        		moveq	#0,D6
    163 FFFC0026 7E00                        		moveq	#0,D7
    164 FFFC0028 4288                        		clr.l	A0
    165 FFFC002A 4289                        		clr.l	A1
    166 FFFC002C 428A                        		clr.l	A2
    167 FFFC002E 428B                        		clr.l	A3
    168 FFFC0030 428C                        		clr.l	A4
    169 FFFC0032 428D                        		clr.l	A5
    170 FFFC0034 428E                        		clr.l	A6
    171 FFFC0036 4E67                        		move.l	A7,usp
                                             
    173 FFFC0038 6100 134E                   		bsr		i2c_setup
                                             ;		bsr		rtc_read
    175 FFFC003C 33FC A2A2 FFDC 0600         		move.w	#$A2A2,leds		; diagnostics
                                             
    177 FFFC0044 13FC 0028 0001 041B         		move.b	#TEXTCOLS,TextCols
    178 FFFC004C 13FC 0020 0001 041A         		move.b	#TEXTROWS,TextRows
    179 FFFC0054 4239 0001 0419              		clr.b	CursorCol
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 4
bootrom.asm
    180 FFFC005A 4239 0001 0418              		clr.b	CursorRow
    181 FFFC0060 4279 0001 041C              		clr.w	TextCurpos
    182 FFFC0066 23FC 0002 0000 0001 0420    		move.l	#$00020000,TextScr		; set virtual screen location
                                             
                                             
    185 FFFC0070 6100 03E8                   		bsr		SetCursorColor
    186 FFFC0074 6100 03FC                   		bsr		SetCursorImage
                                             
    188 FFFC0078 4DF9 FFDC 0000              		lea	$FFDC0000,A6	; I/O base
                                             
                                             		; Initialize random number generator
                                             
    192 FFFC007E 426E 0C06                   		clr.w	$0C06(a6)				; select stream #0
    193 FFFC0082 2D7C 8888 8888 0C08         		move.l	#$88888888,$0C08(a6)	; set initial m_z
    194 FFFC008A 2D7C 0123 4567 0C0C         		move.l	#$01234567,$0C0C(a6)	; set initial m_w
                                             
    196 FFFC0092 6100 02BC                   		bsr		BootClearScreen		
    197 FFFC0096 33FC A2A2 FFDC 0600         		move.w	#$A2A2,leds			; diagnostics
                                             		
                                             		; turn on audio test mode
    200 FFFC009E 2A7C FFE0 0000              		movea.l	#VDGREG,a5
    201 FFFC00A4 3B7C 4000 0584              		move.w	#%0100000000000000,$584(a5)
                                             
    203 FFFC00AA 6100 1186                   		bsr		DrawLines
    204 FFFC00AE 6100 1222                   		bsr		TestBlitter
                                             
    206 FFFC00B2 6100 02B2                   		bsr		BootCopyFont
    207 FFFC00B6 33FC A3A3 FFDC 0600         		move.w	#$A3A3,leds			; diagnostics
                                             
    209 FFFC00BE 33FC 7FFF 0001 0002         		move.w	#WHITE,fgcolor		; set text colors
    210 FFFC00C6 33FC 000F 0001 0004         		move.w	#DARK_BLUE,bkcolor
                                             
                                             		; Write startup message to screen
                                             
    214 FFFC00CE 41F9 FFFC 168B              		lea		msg_start,a0
    215 FFFC00D4 7200                        		moveq	#0,d1					; xpos
    216 FFFC00D6 7400                        		moveq	#0,d2					; ypos
    217 FFFC00D8 6100 03D6                   		bsr		DispStringAt
    218 FFFC00DC 33FC A4A4 FFDC 0600         		move.w	#$A4A4,leds			; diagnostics
                                             
    220 FFFC00E4 47F9 FFFC 00EE              		lea		j1,a3
    221 FFFC00EA 6000 0FD8                   		bra		ramtest
    222 FFFC00EE                             j1:
    223 FFFC00EE 60FE                        		bra		j1
                                             
    225 FFFC00F0                             CRLF:
    226 FFFC00F0 2F01                        		move.l	d1,-(a7)
    227 FFFC00F2 123C 000D                   		move.b	#'\r',d1
    228 FFFC00F6 4EB9 FFFC 013A              		jsr		DisplayChar
    229 FFFC00FC 123C 000A                   		move.b	#'\n',d1
    230 FFFC0100 4EB9 FFFC 013A              		jsr		DisplayChar
    231 FFFC0106 221F                        		move.l	(a7)+,d1
    232 FFFC0108 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Calculate screen memory location from CursorRow,CursorCol.
                                             ; Destroys d0,d2,a0
                                             ;------------------------------------------------------------------------------
                                             ;
    239 FFFC010A                             CalcScreenLoc:
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 5
bootrom.asm
    240 FFFC010A 1039 0001 0418              		move.b	CursorRow,d0		; compute screen location
    241 FFFC0110 0240 007F                   		andi.w	#0x7f,d0
    242 FFFC0114 1439 0001 041B              		move.b	TextCols,d2
    243 FFFC011A 4882                        		ext.w	d2
    244 FFFC011C C0C2                        		mulu.w	d2,d0
    245 FFFC011E 1439 0001 0419              		move.b	CursorCol,d2
    246 FFFC0124 0242 00FF                   		andi.w	#0xff,d2
    247 FFFC0128 D042                        		add.w	d2,d0
    248 FFFC012A 33C0 0001 041C              		move.w	d0,TextCurpos
    249 FFFC0130 D0B9 0001 0420              		add.l	TextScr,d0
    250 FFFC0136 2040                        		move.l	d0,a0				; a0 = screen location
    251 FFFC0138 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display a character on the screen
                                             ; d1.b = char to display
                                             ;------------------------------------------------------------------------------
                                             ;
    258 FFFC013A                             DisplayChar:
    259 FFFC013A 0C01 000D                   		cmpi.b	#'\r',d1			; carriage return ?
    260 FFFC013E 6608                        		bne.s	dccr
    261 FFFC0140 4239 0001 0419              		clr.b	CursorCol			; just set cursor column to zero on a CR
    262 FFFC0146 4E75                        		rts
    263 FFFC0148                             dccr:
    264 FFFC0148 0C01 0091                   		cmpi.b	#0x91,d1			; cursor right ?
    265 FFFC014C 6616                        		bne.s   dcx6
    266 FFFC014E 0C39 004F 0001 0419         		cmpi.b	#79,CursorCol
    267 FFFC0156 670A                        		beq.s	dcx7
    268 FFFC0158 5239 0001 0419              		addi.b	#1,CursorCol
    269 FFFC015E 6000 02C4                   		bra		DispCursor
    270 FFFC0162                             dcx7:
    271 FFFC0162 4E75                        		rts
    272 FFFC0164                             dcx6:
    273 FFFC0164 0C01 0090                   		cmpi.b	#0x90,d1			; cursor up ?
    274 FFFC0168 6614                        		bne.s	dcx8
    275 FFFC016A 0C39 0000 0001 0418         		cmpi.b	#0,CursorRow
    276 FFFC0172 67EE                        		beq.s	dcx7
    277 FFFC0174 5339 0001 0418              		subi.b	#1,CursorRow
    278 FFFC017A 6000 02A8                   		bra		DispCursor
    279 FFFC017E                             dcx8:
    280 FFFC017E 0C01 0093                   		cmpi.b	#0x93,d1			; cursor left?
    281 FFFC0182 6614                        		bne.s	dcx9
    282 FFFC0184 0C39 0000 0001 0419         		cmpi.b	#0,CursorCol
    283 FFFC018C 67D4                        		beq.s	dcx7
    284 FFFC018E 5339 0001 0419              		subi.b	#1,CursorCol
    285 FFFC0194 6000 028E                   		bra		DispCursor
    286 FFFC0198                             dcx9:
    287 FFFC0198 0C01 0092                   		cmpi.b	#0x92,d1			; cursor down ?
    288 FFFC019C 6614                        		bne		dcx10
    289 FFFC019E 0C39 003F 0001 0418         		cmpi.b	#63,CursorRow
    290 FFFC01A6 67BA                        		beq		dcx7
    291 FFFC01A8 5279 0001 0418              		addi.w	#1,CursorRow
    292 FFFC01AE 6000 0274                   		bra		DispCursor
    293 FFFC01B2                             dcx10:
    294 FFFC01B2 0C01 0094                   		cmpi.b	#0x94,d1			; cursor home ?
    295 FFFC01B6 661E                        		bne.s	dcx11
    296 FFFC01B8 0C39 0000 0001 0419         		cmpi.b	#0,CursorCol
    297 FFFC01C0 670A                        		beq.s	dcx12
    298 FFFC01C2 4239 0001 0419              		clr.b	CursorCol
    299 FFFC01C8 6000 025A                   		bra		DispCursor
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 6
bootrom.asm
    300 FFFC01CC                             dcx12:
    301 FFFC01CC 4239 0001 0418              		clr.b	CursorRow
    302 FFFC01D2 6000 0250                   		bra		DispCursor
    303 FFFC01D6                             dcx11:
    304 FFFC01D6 48E7 E080                   		movem.l	d0/d1/d2/a0,-(a7)
    305 FFFC01DA 0C01 0099                   		cmpi.b	#0x99,d1			; delete ?
    306 FFFC01DE 660C                        		bne.s	dcx13
    307 FFFC01E0 6100 FF28                   		bsr		CalcScreenLoc
    308 FFFC01E4 1039 0001 0419              		move.b	CursorCol,d0
    309 FFFC01EA 6020                        		bra.s	dcx5
    310 FFFC01EC                             dcx13:
    311 FFFC01EC 0C01 0000                   		cmpi.b	#CTRLH,d1			; backspace ?
    312 FFFC01F0 6632                        		bne.s   dcx3
    313 FFFC01F2 0C39 0000 0001 0419         		cmpi.b	#0,CursorCol
    314 FFFC01FA 6752                        		beq.s   dcx4
    315 FFFC01FC 5339 0001 0419              		subi.b	#1,CursorCol
    316 FFFC0202 6100 FF06                   		bsr		CalcScreenLoc		; a0 = screen location
    317 FFFC0206 1039 0001 0419              		move.b	CursorCol,d0
    318 FFFC020C                             dcx5:
    319 FFFC020C 10E8 0001                   		move.b	1(a0),(a0)+
    320 FFFC0210 5200                        		addi.b	#1,d0
    321 FFFC0212 B039 0001 041B              		cmp.b	TextCols,d0
    322 FFFC0218 65F2                        		blo.s	dcx5
    323 FFFC021A 103C 0020                   		move.b	#32,d0
    324 FFFC021E 1140 FFFF                   		move.b	d0,-1(a0)
    325 FFFC0222 602A                        		bra.s	dcx4
    326 FFFC0224                             dcx3:
    327 FFFC0224 0C01 000A                   		cmpi.b	#'\n',d1		; linefeed ?
    328 FFFC0228 671C                        		beq.s	dclf
                                             
    330 FFFC022A 6100 FEDE                   		bsr		CalcScreenLoc	; a0 = screen location
                                             		;bsr		AsciiToScreen	; convert ascii char to screen char
    332 FFFC022E 1081                        		move.b	d1,(a0)
    333 FFFC0230 1001                        		move.b	d1,d0
    334 FFFC0232 4880                        		ext.w	d0
    335 FFFC0234 6100 0194                   		bsr		DispChar
    336 FFFC0238 6100 001A                   		bsr		IncCursorPos
    337 FFFC023C 6100 01E6                   		bsr		DispCursor
    338 FFFC0240 4CDF 0107                   		movem.l	(a7)+,d0/d1/d2/a0
    339 FFFC0244 4E75                        		rts
    340 FFFC0246                             dclf:
    341 FFFC0246 6100 002C                   		bsr		IncCursorRow
    342 FFFC024A 6100 01D8                   		bsr		DispCursor
    343 FFFC024E                             dcx4:
    344 FFFC024E 4CDF 0107                   		movem.l	(a7)+,d0/d1/d2/a0		; get back a0
    345 FFFC0252 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Increment the cursor position, scroll the screen if needed.
                                             ;------------------------------------------------------------------------------
                                             ;
    351 FFFC0254                             IncCursorPos:
    352 FFFC0254 5279 0001 041C              		addi.w	#1,TextCurpos
    353 FFFC025A 5239 0001 0419              		addi.b	#1,CursorCol
    354 FFFC0260 1039 0001 041B              		move.b	TextCols,d0
    355 FFFC0266 B039 0001 0419              		cmp.b	CursorCol,d0
    356 FFFC026C 643A                        		bhs.s	icc1
    357 FFFC026E 4239 0001 0419              		clr.b	CursorCol
    358 FFFC0274                             IncCursorRow:
    359 FFFC0274 5239 0001 0418              		addi.b	#1,CursorRow
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 7
bootrom.asm
    360 FFFC027A 1039 0001 041A              		move.b	TextRows,d0
    361 FFFC0280 B039 0001 0418              		cmp.b	CursorRow,d0
    362 FFFC0286 6220                        		bhi.s	icc1
    363 FFFC0288 1039 0001 041A              		move.b	TextRows,d0
    364 FFFC028E 13C0 0001 0418              		move.b	d0,CursorRow		; in case CursorRow is way over
    365 FFFC0294 5339 0001 0418              		subi.b	#1,CursorRow
    366 FFFC029A 4880                        		ext.w	d0
    367 FFFC029C E340                        		asl.w	#1,d0
    368 FFFC029E 9179 0001 041C              		sub.w	d0,TextCurpos
    369 FFFC02A4 6100 0B76                   		bsr		ScrollUp
    370 FFFC02A8                             icc1:
    371 FFFC02A8 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display a string on the screen.
                                             ;------------------------------------------------------------------------------
                                             ;
    377 FFFC02AA                             DisplayString:
    378 FFFC02AA 48E7 C040                   		movem.l	d0/d1/a1,-(a7)
    379 FFFC02AE                             dspj1:
    380 FFFC02AE 4281                        		clr.l	d1				; clear upper bits of d1
    381 FFFC02B0 1219                        		move.b	(a1)+,d1		; move string char into d1
    382 FFFC02B2 0C01 0000                   		cmpi.b	#0,d1			; is it end of string ?
    383 FFFC02B6 6706                        		beq		dsret			
    384 FFFC02B8 6100 FE80                   		bsr		DisplayChar		; display character
    385 FFFC02BC 60F0                        		bra		dspj1			; go back for next character
    386 FFFC02BE                             dsret:
    387 FFFC02BE 4CDF 0203                   		movem.l	(a7)+,d0/d1/a1
    388 FFFC02C2 4E75                        		rts
                                             
    390 FFFC02C4                             DisplayStringCRLF:
    391 FFFC02C4 6100 FFE4                   		bsr		DisplayString
    392 FFFC02C8 6000 FE26                   		bra		CRLF
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display a string on the screen. Stop at 255 chars, or NULL or D1.W
                                             ;------------------------------------------------------------------------------
                                             ;
    398 FFFC02CC                             DisplayString1:
    399 FFFC02CC 48E7 C040                   		movem.l	d0/d1/a1,-(a7)
    400 FFFC02D0 0241 00FF                   		andi.w	#255,d1			; max 255 chars
    401 FFFC02D4 2001                        		move.l	d1,d0
    402 FFFC02D6                             dspj11:
    403 FFFC02D6 1219                        		move.b	(a1)+,d1		; move string char into d1
    404 FFFC02D8 0C01 0000                   		cmpi.b	#0,d1			; is it end of string ?
    405 FFFC02DC 6708                        		beq		dsret1			
    406 FFFC02DE 6100 FE5A                   		bsr		DisplayChar		; display character
    407 FFFC02E2 57C8 FFF2                   		dbeq	d0,dspj11		; go back for next character
    408 FFFC02E6                             dsret1:
    409 FFFC02E6 4CDF 0203                   		movem.l	(a7)+,d0/d1/a1
    410 FFFC02EA 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display a string on the screen. Stop at 255 chars, or NULL or D1.W
                                             ; end string with CR,LF
                                             ;------------------------------------------------------------------------------
                                             ;
    417 FFFC02EC                             DisplayString0:
    418 FFFC02EC 6100 FFDE                   		bsr		DisplayString1
    419 FFFC02F0 6000 FDFE                   		bra		CRLF
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 8
bootrom.asm
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Dispatch cursor functions
                                             ;------------------------------------------------------------------------------
                                             ;
    425 FFFC02F4                             Cursor1:
    426 FFFC02F4 0C41 00FF                   		cmpi.w	#0x00ff,d1
    427 FFFC02F8 670E                        		beq		GetCursorPos
    428 FFFC02FA 0C41 FF00                   		cmpi.w	#0xFF00,d1
    429 FFFC02FE 6718                        		beq		SetCursorPos
    430 FFFC0300 4EB9 FFFC 0DDC              		jsr		ClearScreen
    431 FFFC0306 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Get the cursor position.
                                             ; d1.b0 = row
                                             ; d1.b1 = col
                                             ;------------------------------------------------------------------------------
                                             ;
    439 FFFC0308                             GetCursorPos:
    440 FFFC0308 1239 0001 0419              		move.b	CursorCol,d1
    441 FFFC030E E141                        		asl.w	#8,d1
    442 FFFC0310 1239 0001 0418              		move.b	CursorRow,d1
    443 FFFC0316 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Set the position of the cursor, update the linear screen pointer.
                                             ; d1.b0 = row
                                             ; d1.b1 = col
                                             ;------------------------------------------------------------------------------
                                             ;
    451 FFFC0318                             SetCursorPos:
    452 FFFC0318 48E7 6000                   		movem.l	d1/d2,-(a7)
    453 FFFC031C 13C1 0001 0418              		move.b	d1,CursorRow
    454 FFFC0322 E049                        		lsr.w	#8,d1
    455 FFFC0324 13C1 0001 0419              		move.b	d1,CursorCol
    456 FFFC032A 1239 0001 0418              		move.b	CursorRow,d1
    457 FFFC0330 4881                        		ext.w	d1
    458 FFFC0332 1439 0001 041B              		move.b	TextCols,d2
    459 FFFC0338 4882                        		ext.w	d2
    460 FFFC033A C2C2                        		mulu.w	d2,d1
    461 FFFC033C 1439 0001 0419              		move.b	CursorCol,d2
    462 FFFC0342 D242                        		add.w	d2,d1
    463 FFFC0344 33C1 0001 041C              		move.w	d1,TextCurpos
    464 FFFC034A                             scp1:
    465 FFFC034A 4CDF 0006                   		movem.l	(a7)+,d1/d2
    466 FFFC034E 4E75                        		rts
                                             
                                             
                                             ;------------------------------------------------------------------------------
                                             ; clear screen	
                                             ;
                                             ; Trashes:
                                             ;	a0,d0,d1
                                             ;------------------------------------------------------------------------------
                                             
    476 FFFC0350                             BootClearScreen:
    477 FFFC0350 207C FF80 0000              		move.l	#VDGBUF,A0
    478 FFFC0356 700F                        		moveq	#DARK_BLUE,D0			; dark blue
    479 FFFC0358 223C 0001 4000              		move.l	#320*256,D1				; number of pixels
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 9
bootrom.asm
    480 FFFC035E                             .loop1:
    481 FFFC035E 30C0                        		move.w	d0,(a0)+				; store it to the screen
    482 FFFC0360 5381                        		sub.l	#1,d1					; can't use dbra here
    483 FFFC0362 66FA                        		bne.s	.loop1
    484 FFFC0364 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; copy font to VDG ram
                                             ;
                                             ; Trashes:
                                             ;	a0,a1,d0,d1
                                             ;------------------------------------------------------------------------------
                                             
    493 FFFC0366                             BootCopyFont:
    494 FFFC0366 33FC 0707 0001 0006         		move.w	#$0707,fntsz		; set font size
    495 FFFC036E 41F9 FFFC 16A3              		lea		font8,a0
    496 FFFC0374 223C 0000 1000              		move.l	#8*512,d1			; 512 chars * 8 bytes per char
    497 FFFC037A 227C FF8B 8000              		move.l	#$FF8B8000,a1		; font table address
    498 FFFC0380 7000                        		moveq	#0,d0				; zero out high order bits
    499 FFFC0382                             cpyfnt:
    500 FFFC0382 1018                        		move.b	(a0)+,d0			; get a byte
    501 FFFC0384 32C0                        		move.w	d0,(a1)+			; store in font table
    502 FFFC0386 51C9 FFFA                   		dbra	d1,cpyfnt
    503 FFFC038A 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Parameters:
                                             ;	d0.w		character to display
                                             ;	d1.w		x position
                                             ;	d2.w		y position
                                             ; Trashes:
                                             ;	a6
                                             ;------------------------------------------------------------------------------
                                             
    514 FFFC038C                             DispCharAt:
    515 FFFC038C 2C7C FFE0 0000              		move.l	#VDGREG,a6
    516 FFFC0392 4840                        		swap	d0						; save off d0 low
    517 FFFC0394                             .0001:									; wait for character que to empty
    518 FFFC0394 302E 042C                   		move.w	$42C(a6),d0			; read character queue index into d0
    519 FFFC0398 B07C 001C                   		cmp.w	#28,d0					; allow up 28 entries to be in progress
    520 FFFC039C 64F6                        		bhs.s	.0001					; branch if too many chars queued
    521 FFFC039E 4840                        		swap	d0						; get back d0 low
    522 FFFC03A0 3D40 0420                   		move.w	d0,$420(a6)			; set char code
    523 FFFC03A4 3D79 0001 0002 0422         		move.w	fgcolor,$422(a6)		; set fg color
    524 FFFC03AC 3D79 0001 0004 0424         		move.w	bkcolor,$424(a6)		; set bk color
    525 FFFC03B4 3D41 0426                   		move.w	d1,$426(a6)			; set x pos
    526 FFFC03B8 3D42 0428                   		move.w	d2,$428(a6)			; set y pos
    527 FFFC03BC 3D7C 0707 042A              		move.w	#$0707,$42A(a6)		; set font x,y extent
    528 FFFC03C2 3D7C 0000 042E              		move.w	#0,$42E(a6)			; pulse character queue write signal
    529 FFFC03C8 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Parameters:
                                             ;	d0.w		character to display
                                             ;------------------------------------------------------------------------------
                                             
    536 FFFC03CA                             DispChar:
    537 FFFC03CA 48E7 4002                   		movem.l	d1/a6,-(a7)
    538 FFFC03CE 2C7C FFE0 0000              		move.l	#VDGREG,a6
    539 FFFC03D4 4840                        		swap	d0					; save off d0 low
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 10
bootrom.asm
    540 FFFC03D6                             .0001:								; wait for character que to empty
    541 FFFC03D6 302E 042C                   		move.w	$42C(a6),d0			; read character queue index into d0
    542 FFFC03DA B07C 001C                   		cmp.w	#28,d0				; allow up 28 entries to be in progress
    543 FFFC03DE 64F6                        		bhs.s	.0001				; branch if too many chars queued
    544 FFFC03E0 4840                        		swap	d0					; get back d0 low
    545 FFFC03E2 3D40 0420                   		move.w	d0,$420(a6)			; set char code
    546 FFFC03E6 3D79 0001 0002 0422         		move.w	fgcolor,$422(a6)	; set fg color
    547 FFFC03EE 3D79 0001 0004 0424         		move.w	bkcolor,$424(a6)	; set bk color
    548 FFFC03F6 1239 0001 0419              		move.b	CursorCol,d1
    549 FFFC03FC 4881                        		ext.w	d1
    550 FFFC03FE E741                        		asl.w	#3,d1
    551 FFFC0400 3D41 0426                   		move.w	d1,$426(a6)			; set x pos
    552 FFFC0404 1239 0001 0418              		move.b	CursorRow,d1
    553 FFFC040A 4881                        		ext.w	d1
    554 FFFC040C E741                        		asl.w	#3,d1
    555 FFFC040E 3D41 0428                   		move.w	d1,$428(a6)			; set y pos
    556 FFFC0412 3D7C 0707 042A              		move.w	#$0707,$42A(a6)		; set font x,y extent
    557 FFFC0418 3D7C 0000 042E              		move.w	#0,$42E(a6)			; pulse character queue write signal
    558 FFFC041E 4CDF 4002                   		movem.l	(a7)+,d1/a6
    559 FFFC0422 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ;------------------------------------------------------------------------------
                                             
    564 FFFC0424                             DispCursor:
    565 FFFC0424 48E7 4002                   		movem.l	d1/a6,-(a7)
    566 FFFC0428 2C7C FFE0 0000              		move.l	#VDGREG,a6
    567 FFFC042E 3D7C 0A0A 0444              		move.w	#$0A0A,VDG_CURSZ(a6)
    568 FFFC0434 1239 0001 0419              		move.b	CursorCol,d1
    569 FFFC043A 4881                        		ext.w	d1
    570 FFFC043C E741                        		asl.w	#3,d1
    571 FFFC043E 5341                        		sub.w	#1,d1
    572 FFFC0440 3D41 0440                   		move.w	d1,VDG_CURX(a6)
    573 FFFC0444 1239 0001 0418              		move.b	CursorRow,d1
    574 FFFC044A 4881                        		ext.w	d1
    575 FFFC044C E741                        		asl.w	#3,d1
    576 FFFC044E 5341                        		sub.w	#1,d1
    577 FFFC0450 3D41 0442                   		move.w	d1,VDG_CURY(a6)
    578 FFFC0454 4CDF 4002                   		movem.l	(a7)+,d1/a6
    579 FFFC0458 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Cursor Color
                                             ;
                                             ;	fffff-irrrgggbbb
                                             ;	  |   | |  |  |
                                             ;     |   | |  |  +- blue
                                             ;	  |   | |  +---- green
                                             ;     |   | +------- red
                                             ;     |   +--------- invert video (rgb ignored)
                                             ;     +------------- flash rate
                                             ;					 1xxxx = no flash
                                             ;                    00001 = 1/8 vsync (7.5 Hz)
                                             ;				     00010 = 1/16 vsync (3.75 Hz)
                                             ;                    00100 = 1/32 vsync (1.875 Hz)
                                             ;------------------------------------------------------------------------------
                                             
    597 FFFC045A                             SetCursorColor:
    598 FFFC045A 2F0E                        		move.l  a6,-(a7)
    599 FFFC045C 2C7C FFE0 0000              		move.l	#VDGREG,a6
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 11
bootrom.asm
    600 FFFC0462 3D7C 7FFF 0446              		move.w	#%0111111111111111,VDG_CURCLR(a6)
    601 FFFC0468 3D7C 0004 0448              		move.w	#%00100,VDG_CURFLSH(a6)
    602 FFFC046E 2C5F                        		move.l	(a7)+,a6
    603 FFFC0470 4E75                        		rts
                                             		
                                             ;------------------------------------------------------------------------------
                                             ; Cursor Image
                                             ; Cursor may be up to 16x16 pixels.
                                             ;------------------------------------------------------------------------------
                                             
    610 FFFC0472                             SetCursorImage:
    611 FFFC0472 48E7 4082                   		movem.l	d1/a0/a6,-(a7)
    612 FFFC0476 41F9 FFFC 0490              		lea		CursorImage,a0
    613 FFFC047C 2C7C FFE0 0460              		move.l	#VDGREG+VDG_CURIMG,a6
    614 FFFC0482 720F                        		moveq	#15,d1
    615 FFFC0484                             .0001:
    616 FFFC0484 3CD8                        		move.w	(a0)+,(a6)+
    617 FFFC0486 51C9 FFFC                   		dbra	d1,.0001
    618 FFFC048A 4CDF 4102                   		movem.l	(a7)+,d1/a0/a6
    619 FFFC048E 4E75                        		rts
                                             
                                             	align	2
    622 FFFC0490                             CursorImage:
    623 FFFC0490 03FF                        	dc.w	%1111111111
    624 FFFC0492 0201                        	dc.w	%1000000001
    625 FFFC0494 0201                        	dc.w	%1000000001
    626 FFFC0496 0201                        	dc.w	%1000000001
    627 FFFC0498 0201                        	dc.w	%1000000001
    628 FFFC049A 0201                        	dc.w	%1000000001
    629 FFFC049C 0201                        	dc.w	%1000000001
    630 FFFC049E 0201                        	dc.w	%1000000001
    631 FFFC04A0 0231                        	dc.w	%1000110001
    632 FFFC04A2 03FF                        	dc.w	%1111111111
    633 FFFC04A4 0000                        	dc.w	%0000000000
    634 FFFC04A6 0000                        	dc.w	%0000000000
    635 FFFC04A8 0000                        	dc.w	%0000000000
    636 FFFC04AA 0000                        	dc.w	%0000000000
    637 FFFC04AC 0000                        	dc.w	%0000000000
    638 FFFC04AE 0000                        	dc.w	%0000000000
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Parameters:
                                             ;	a0			pointer to string
                                             ;	d1.w		x position
                                             ;	d2.w		y position
                                             ; Returns:
                                             ;	a0			points to byte after NULL character
                                             ;	d1.w		updated x position
                                             ; Trashes:
                                             ;	d0,a6
                                             ;------------------------------------------------------------------------------
                                             
    652 FFFC04B0                             DispStringAt:
    653 FFFC04B0                             .0003:
    654 FFFC04B0 7000                        		moveq	#0,d0					; zero out high order bits
    655 FFFC04B2 1018                        		move.b	(a0)+,d0				; get character from string into d0
    656 FFFC04B4 6708                        		beq.s	.0002					; end of string ?
    657 FFFC04B6 6100 FED4                   		bsr		DispCharAt
    658 FFFC04BA 5041                        		add.w	#8,d1					; increment xpos
    659 FFFC04BC 60F2                        		bra.s	.0003
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 12
bootrom.asm
    660 FFFC04BE                             .0002:
    661 FFFC04BE 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display nybble in D1.B
                                             ;------------------------------------------------------------------------------
                                             ;
    667 FFFC04C0                             DisplayNybble:
    668 FFFC04C0 3F01                        		move.w	d1,-(a7)
    669 FFFC04C2 0201 000F                   		andi.b	#0xF,d1
    670 FFFC04C6 0601 0030                   		addi.b	#'0',d1
    671 FFFC04CA 0C01 0039                   		cmpi.b	#'9',d1
    672 FFFC04CE 6302                        		bls.s	dispnyb1
    673 FFFC04D0 5E01                        		addi.b	#7,d1
    674 FFFC04D2                             dispnyb1:
    675 FFFC04D2 6100 FC66                   		bsr		DisplayChar
    676 FFFC04D6 321F                        		move.w	(a7)+,d1
    677 FFFC04D8 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display the byte in D1.B
                                             ;------------------------------------------------------------------------------
                                             ;
    683 FFFC04DA                             DisplayByte:
    684 FFFC04DA 3F01                        		move.w	d1,-(a7)
    685 FFFC04DC E819                        		ror.b	#4,d1
    686 FFFC04DE 6100 FFE0                   		bsr		DisplayNybble
    687 FFFC04E2 E919                        		rol.b	#4,d1
    688 FFFC04E4 6100 FFDA                   		bsr		DisplayNybble
    689 FFFC04E8 321F                        		move.w	(a7)+,d1
    690 FFFC04EA 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display the 32 bit word in D1.L
                                             ;------------------------------------------------------------------------------
                                             ;
    696 FFFC04EC                             DisplayWord:
    697 FFFC04EC E199                        		rol.l	#8,d1
    698 FFFC04EE 6100 FFEA                   		bsr		DisplayByte
    699 FFFC04F2 E199                        		rol.l	#8,d1
    700 FFFC04F4 6100 FFE4                   		bsr		DisplayByte
    701 FFFC04F8 E199                        		rol.l	#8,d1
    702 FFFC04FA 6100 FFDE                   		bsr		DisplayByte
    703 FFFC04FE E199                        		rol.l	#8,d1
    704 FFFC0500 6100 FFD8                   		bsr		DisplayByte
    705 FFFC0504 4E75                        		rts
                                             
    707 FFFC0506                             DisplayMem:
    708 FFFC0506 123C 003A                   		move.b	#':',d1
    709 FFFC050A 4EB9 FFFC 013A              		jsr		DisplayChar
    710 FFFC0510 2208                        		move.l	a0,d1
    711 FFFC0512 4EB9 FFFC 04EC              		jsr		DisplayWord
    712 FFFC0518 7407                        		moveq	#7,d2
    713 FFFC051A                             dspmem1:
    714 FFFC051A 123C 0020                   		move.b	#' ',d1
    715 FFFC051E 4EB9 FFFC 013A              		jsr		DisplayChar
    716 FFFC0524 1218                        		move.b	(a0)+,d1
    717 FFFC0526 4EB9 FFFC 04DA              		jsr		DisplayByte
    718 FFFC052C 51CA FFEC                   		dbra	d2,dspmem1
    719 FFFC0530 4EF9 FFFC 00F0              		jmp		CRLF
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 13
bootrom.asm
                                             
                                             ;==============================================================================
                                             ; Keyboard stuff
                                             ;
                                             ; KeyState2_
                                             ; 876543210
                                             ; ||||||||+ = shift
                                             ; |||||||+- = alt
                                             ; ||||||+-- = control
                                             ; |||||+--- = numlock
                                             ; ||||+---- = capslock
                                             ; |||+----- = scrolllock
                                             ; ||+------ =
                                             ; |+------- = 
                                             ; +-------- = extended
                                             ;
                                             ;==============================================================================
                                             
    738 FFFC0536                             _KeybdGetStatus:
    739 FFFC0536 1239 FFDC 0001              		move.b	KEYBD+1,d1
    740 FFFC053C 4E75                        		rts
                                             
                                             ; Get the scancode from the keyboard port
                                             ;
    744 FFFC053E                             _KeybdGetScancode:
    745 FFFC053E 7200                        		moveq	#0,d1
    746 FFFC0540 1239 FFDC 0000              		move.b	KEYBD,d1				; get the scan code
    747 FFFC0546 13FC 0000 FFDC 0001         		move.b	#0,KEYBD+1				; clear receive register
    748 FFFC054E 4E75                        		rts
                                             
                                             ; Recieve a byte from the keyboard, used after a command is sent to the
                                             ; keyboard in order to wait for a response.
                                             ;
    753 FFFC0550                             KeybdRecvByte:
    754 FFFC0550 2F03                        		move.l	d3,-(a7)
    755 FFFC0552 363C 0064                   		move.w	#100,d3		; wait up to 1s
    756 FFFC0556                             .0003:
    757 FFFC0556 6100 FFDE                   		bsr		_KeybdGetStatus	; wait for response from keyboard
    758 FFFC055A 4A01                        		tst.b	d1
    759 FFFC055C 6B0E                        		bmi		.0004		; is input buffer full ? yes, branch
    760 FFFC055E 6100 02C4                   		bsr		Wait10ms		; wait a bit
    761 FFFC0562 51CB FFF2                   		dbra	d3,.0003	; go back and try again
    762 FFFC0566 261F                        		move.l	(a7)+,d3
    763 FFFC0568 72FF                        		moveq	#-1,d1			; return -1
    764 FFFC056A 4E75                        		rts
    765 FFFC056C                             .0004:
    766 FFFC056C 6100 FFD0                   		bsr		_KeybdGetScancode
    767 FFFC0570 261F                        		move.l	(a7)+,d3
    768 FFFC0572 4E75                        		rts
                                             
                                             
                                             ; Wait until the keyboard transmit is complete
                                             ; Returns .CF = 1 if successful, .CF=0 timeout
                                             ;
    774 FFFC0574                             KeybdWaitTx:
    775 FFFC0574 48E7 3000                   		movem.l	d2/d3,-(a7)
    776 FFFC0578 7664                        		moveq	#100,d3		; wait a max of 1s
    777 FFFC057A                             .0001:
    778 FFFC057A 6100 FFBA                   		bsr		_KeybdGetStatus
    779 FFFC057E 0801 0006                   		btst	#6,d1		; check for transmit complete bit
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 14
bootrom.asm
    780 FFFC0582 6610                        		bne	    .0002		; branch if bit set
    781 FFFC0584 6100 029E                   		bsr		Wait10ms		; delay a little bit
    782 FFFC0588 51CB FFF0                   		dbra	d3,.0001	; go back and try again
    783 FFFC058C 4CDF 000C                   		movem.l	(a7)+,d2/d3
    784 FFFC0590 72FF                        		moveq	#-1,d1		; return -1
    785 FFFC0592 4E75                        		rts
    786 FFFC0594                             .0002:
    787 FFFC0594 4CDF 000C                   		movem.l	(a7)+,d2/d3
    788 FFFC0598 7200                        		moveq	#0,d1		; return 0
    789 FFFC059A 4E75                        		rts
                                             
                                             
                                             ;------------------------------------------------------------------------------
                                             ; get key pending status into d1.b
                                             ;------------------------------------------------------------------------------
                                             ;
    796 FFFC059C                             CheckForKey:
    797 FFFC059C 1239 FFDC 0001              		move.b	KEYBD+1,d1
    798 FFFC05A2 6A06                        		bpl.s	cfk1
    799 FFFC05A4 123C 0001                   		move.b	#1,d1
    800 FFFC05A8 4E75                        		rts
    801 FFFC05AA                             cfk1:
    802 FFFC05AA 4201                        		clr.b	d1
    803 FFFC05AC 4E75                        		rts
                                             
    805 FFFC05AE                             GetKey:
    806 FFFC05AE 6100 0022                   		bsr		KeybdGetCharWait
    807 FFFC05B2 0C39 0000 0001 0424         		cmpi.b	#0,KeybdEcho	; is keyboard echo on ?
    808 FFFC05BA 670C                        		beq.s	gk1
    809 FFFC05BC 0C01 000D                   		cmpi.b	#'\r',d1		; convert CR keystroke into CRLF
    810 FFFC05C0 6700 FB2E                   		beq		CRLF
    811 FFFC05C4 6100 FB74                   		bsr		DisplayChar
    812 FFFC05C8                             gk1:
    813 FFFC05C8 4E75                        		rts
                                             
                                             
    816 FFFC05CA                             KeybdGetCharNoWait:
    817 FFFC05CA 4239 0001 0425              		clr.b	KeybdWaitFlag
    818 FFFC05D0 6008                        		bra		KeybdGetChar
                                             
    820 FFFC05D2                             KeybdGetCharWait:
    821 FFFC05D2 13FC FFFF 0001 0425         		move.b	#-1,KeybdWaitFlag
                                             
    823 FFFC05DA                             KeybdGetChar:
    824 FFFC05DA 48E7 3080                   		movem.l	d2/d3/a0,-(a7)
    825 FFFC05DE                             .0003:
    826 FFFC05DE 6100 FF56                   		bsr		_KeybdGetStatus			; check keyboard status for key available
    827 FFFC05E2 6B10                        		bmi		.0006					; yes, go process
    828 FFFC05E4 4A39 0001 0425              		tst.b	KeybdWaitFlag			; are we willing to wait for a key ?
    829 FFFC05EA 6BF2                        		bmi		.0003					; yes, branch back
    830 FFFC05EC 4CDF 010C                   		movem.l	(a7)+,d2/d3/a0
    831 FFFC05F0 72FF                        		moveq	#-1,d1					; flag no char available
    832 FFFC05F2 4E75                        		rts
    833 FFFC05F4                             .0006:
    834 FFFC05F4 6100 FF48                   		bsr		_KeybdGetScancode
    835 FFFC05F8                             .0001:
    836 FFFC05F8 33FC 0001 FFDC 0600         		move.w	#1,leds
    837 FFFC0600 B23C 00F0                   		cmp.b	#SC_KEYUP,d1
    838 FFFC0604 6700 00CA                   		beq		.doKeyup
    839 FFFC0608 B23C 00E0                   		cmp.b	#SC_EXTEND,d1
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 15
bootrom.asm
    840 FFFC060C 6700 00CE                   		beq		.doExtend
    841 FFFC0610 B23C 0014                   		cmp.b	#SC_CTRL,d1
    842 FFFC0614 6700 00D2                   		beq		.doCtrl
    843 FFFC0618 B23C 0012                   		cmp.b	#SC_LSHIFT,d1
    844 FFFC061C 6700 0134                   		beq		.doShift
    845 FFFC0620 B23C 0059                   		cmp.b	#SC_RSHIFT,d1
    846 FFFC0624 6700 012C                   		beq		.doShift
    847 FFFC0628 B23C 0077                   		cmp.b	#SC_NUMLOCK,d1
    848 FFFC062C 6700 014C                   		beq		.doNumLock
    849 FFFC0630 B23C 0058                   		cmp.b	#SC_CAPSLOCK,d1
    850 FFFC0634 6700 0154                   		beq		.doCapsLock
    851 FFFC0638 B23C 007E                   		cmp.b	#SC_SCROLLLOCK,d1
    852 FFFC063C 6700 015C                   		beq		.doScrollLock
    853 FFFC0640 B23C 0011                   		cmp.b   #SC_ALT,d1
    854 FFFC0644 6700 00CA                   		beq     .doAlt
    855 FFFC0648 1439 0001 0426              		move.b	_KeyState1,d2			; check key up/down
    856 FFFC064E 13FC 0000 0001 0426         		move.b	#0,_KeyState1			; clear keyup status
    857 FFFC0656 4A02                        		tst.b	d2
    858 FFFC0658 6684                        		bne	    .0003					; ignore key up
    859 FFFC065A B23C 000D                   		cmp.b   #SC_TAB,d1
    860 FFFC065E 6700 00D8                   		beq     .doTab
    861 FFFC0662                             .0013:
    862 FFFC0662 1439 0001 0427              		move.b	_KeyState2,d2
    863 FFFC0668 6A1E                        		bpl		.0010					; is it extended code ?
    864 FFFC066A 0202 007F                   		and.b	#$7F,d2					; clear extended bit
    865 FFFC066E 13C2 0001 0427              		move.b	d2,_KeyState2
    866 FFFC0674 13FC 0000 0001 0426         		move.b	#0,_KeyState1			; clear keyup
    867 FFFC067C 41F9 FFFC 0AB4              		lea		_keybdExtendedCodes,a0
    868 FFFC0682 1230 1000                   		move.b	(a0,d1.w),d1
    869 FFFC0686 603A                        		bra		.0008
    870 FFFC0688                             .0010:
    871 FFFC0688 0802 0002                   		btst	#2,d2					; is it CTRL code ?
    872 FFFC068C 6710                        		beq		.0009
    873 FFFC068E 0241 007F                   		and.w	#$7F,d1
    874 FFFC0692 41F9 FFFC 0A34              		lea		_keybdControlCodes,a0
    875 FFFC0698 1230 1000                   		move.b	(a0,d1.w),d1
    876 FFFC069C 6024                        		bra		.0008
    877 FFFC069E                             .0009:
    878 FFFC069E 0802 0000                   		btst	#0,d2					; is it shift down ?
    879 FFFC06A2 670C                        		beq  	.0007
    880 FFFC06A4 41F9 FFFC 0934              		lea		_shiftedScanCodes,a0
    881 FFFC06AA 1230 1000                   		move.b	(a0,d1.w),d1
    882 FFFC06AE 6012                        		bra		.0008
    883 FFFC06B0                             .0007:
    884 FFFC06B0 41F9 FFFC 0834              		lea		_unshiftedScanCodes,a0
    885 FFFC06B6 1230 1000                   		move.b	(a0,d1.w),d1
    886 FFFC06BA 33FC 0202 FFDC 0600         		move.w	#$0202,leds
    887 FFFC06C2                             .0008:
    888 FFFC06C2 33FC 0303 FFDC 0600         		move.w	#$0303,leds
    889 FFFC06CA 4CDF 010C                   		movem.l	(a7)+,d2/d3/a0
    890 FFFC06CE 4E75                        		rts
    891 FFFC06D0                             .doKeyup:
    892 FFFC06D0 13FC FFFF 0001 0426         		move.b	#-1,_KeyState1
    893 FFFC06D8 6000 FF04                   		bra		.0003
    894 FFFC06DC                             .doExtend:
    895 FFFC06DC 0039 0080 0001 0427         		or.b	#$80,_KeyState2
    896 FFFC06E4 6000 FEF8                   		bra		.0003
    897 FFFC06E8                             .doCtrl:
    898 FFFC06E8 1239 0001 0426              		move.b	_KeyState1,d1
    899 FFFC06EE 4239 0001 0426              		clr.b	_KeyState1
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 16
bootrom.asm
    900 FFFC06F4 4A01                        		tst.b	d1
    901 FFFC06F6 6A0C                        		bpl.s	.0004
    902 FFFC06F8 08B9 0002 0001 0427         		bclr	#2,_KeyState2
    903 FFFC0700 6000 FEDC                   		bra		.0003
    904 FFFC0704                             .0004:
    905 FFFC0704 08F9 0002 0001 0427         		bset	#2,_KeyState2
    906 FFFC070C 6000 FED0                   		bra		.0003
    907 FFFC0710                             .doAlt:
    908 FFFC0710 1239 0001 0426              		move.b	_KeyState1,d1
    909 FFFC0716 4239 0001 0426              		clr.b	_KeyState1
    910 FFFC071C 4A01                        		tst.b	d1
    911 FFFC071E 6A0C                        		bpl		.0011
    912 FFFC0720 08B9 0001 0001 0427         		bclr	#1,_KeyState2
    913 FFFC0728 6000 FEB4                   		bra		.0003
    914 FFFC072C                             .0011:
    915 FFFC072C 08F9 0001 0001 0427         		bset	#1,_KeyState2
    916 FFFC0734 6000 FEA8                   		bra		.0003
    917 FFFC0738                             .doTab:
    918 FFFC0738 2F01                        		move.l	d1,-(a7)
    919 FFFC073A 1239 0001 0427              	    move.b  _KeyState2,d1
    920 FFFC0740 0801 0000                   	    btst	#0,d1                 ; is ALT down ?
    921 FFFC0744 6706                        	    beq     .0012
                                             ;    	inc     _iof_switch
    923 FFFC0746 221F                        	    move.l	(a7)+,d1
    924 FFFC0748 6000 FE94                   	    bra     .0003
    925 FFFC074C                             .0012:
    926 FFFC074C 221F                        	    move.l	(a7)+,d1
    927 FFFC074E 6000 FF12                   	    bra     .0013
    928 FFFC0752                             .doShift:
    929 FFFC0752 1239 0001 0426              		move.b	_KeyState1,d1
    930 FFFC0758 4239 0001 0426              		clr.b	_KeyState1
    931 FFFC075E 4A01                        		tst.b	d1
    932 FFFC0760 6A0C                        		bpl.s	.0005
    933 FFFC0762 08B9 0000 0001 0427         		bclr	#0,_KeyState2
    934 FFFC076A 6000 FE72                   		bra		.0003
    935 FFFC076E                             .0005:
    936 FFFC076E 08F9 0000 0001 0427         		bset	#0,_KeyState2
    937 FFFC0776 6000 FE66                   		bra		.0003
    938 FFFC077A                             .doNumLock:
    939 FFFC077A 0879 0004 0001 0427         		bchg	#4,_KeyState2
    940 FFFC0782 6100 0026                   		bsr		KeybdSetLEDStatus
    941 FFFC0786 6000 FE56                   		bra		.0003
    942 FFFC078A                             .doCapsLock:
    943 FFFC078A 0879 0005 0001 0427         		bchg	#5,_KeyState2
    944 FFFC0792 6100 0016                   		bsr		KeybdSetLEDStatus
    945 FFFC0796 6000 FE46                   		bra		.0003
    946 FFFC079A                             .doScrollLock:
    947 FFFC079A 0879 0006 0001 0427         		bchg	#6,_KeyState2
    948 FFFC07A2 6100 0006                   		bsr		KeybdSetLEDStatus
    949 FFFC07A6 6000 FE36                   		bra		.0003
                                             
    951 FFFC07AA                             KeybdSetLEDStatus:
    952 FFFC07AA 48E7 3000                   		movem.l	d2/d3,-(a7)
    953 FFFC07AE 4239 0001 0428              		clr.b	KeybdLEDs
    954 FFFC07B4 0839 0004 0001 0427         		btst	#4,_KeyState2
    955 FFFC07BC 6708                        		beq.s	.0002
    956 FFFC07BE 13FC 0002 0001 0428         		move.b	#2,KeybdLEDs
    957 FFFC07C6                             .0002:
    958 FFFC07C6 0839 0005 0001 0427         		btst	#5,_KeyState2
    959 FFFC07CE 6708                        		beq.s	.0003
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 17
bootrom.asm
    960 FFFC07D0 08F9 0002 0001 0428         		bset	#2,KeybdLEDs
    961 FFFC07D8                             .0003:
    962 FFFC07D8 0839 0006 0001 0427         		btst	#6,_KeyState2
    963 FFFC07E0 6708                        		beq.s	.0004
    964 FFFC07E2 08F9 0000 0001 0428         		bset	#0,KeybdLEDs
    965 FFFC07EA                             .0004:
    966 FFFC07EA 123C 00ED                   		move.b	#$ED,d1
    967 FFFC07EE 6100 002C                   		bsr		KeybdSendByte
    968 FFFC07F2 6100 FD80                   		bsr		KeybdWaitTx
    969 FFFC07F6 6100 FD58                   		bsr		KeybdRecvByte
    970 FFFC07FA 4A01                        		tst.b	d1
    971 FFFC07FC 6B18                        		bmi		.0001
    972 FFFC07FE B2BC 0000 00FA              		cmp		#$FA,d1
    973 FFFC0804 1239 0001 0428              		move.b	KeybdLEDs,d1
    974 FFFC080A 6100 0010                   		bsr		KeybdSendByte
    975 FFFC080E 6100 FD64                   		bsr		KeybdWaitTx
    976 FFFC0812 6100 FD3C                   		bsr		KeybdRecvByte
    977 FFFC0816                             .0001:
    978 FFFC0816 4CDF 000C                   		movem.l	(a7)+,d2/d3
    979 FFFC081A 4E75                        		rts
                                             
    981 FFFC081C                             KeybdSendByte:
    982 FFFC081C 13C1 FFDC 0000              		move.b	d1,KEYBD
    983 FFFC0822 4E75                        		rts
                                             	
    985 FFFC0824                             Wait10ms:
    986 FFFC0824 2F03                        		move.l	d3,-(a7)
    987 FFFC0826 263C 0000 03E8              		move.l	#1000,d3
    988 FFFC082C                             .0001:
    989 FFFC082C 51CB FFFE                   		dbra	d3,.0001
    990 FFFC0830 261F                        		move.l	(a7)+,d3
    991 FFFC0832 4E75                        		rts
                                             
                                             
                                             ;--------------------------------------------------------------------------
                                             ; PS2 scan codes to ascii conversion tables.
                                             ;--------------------------------------------------------------------------
                                             ;
    998 FFFC0834                             _unshiftedScanCodes:
    999 FFFC0834 2E A9 2E A5 A3 A1 A2 AC     	dc.b	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
                                             
   1001 FFFC083C 2E AA A8 A6 A4 09 60 2E     	dc.b	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
                                             
   1003 FFFC0844 2E 2E 2E 2E 2E 71 31 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
                                             
   1005 FFFC084C 2E 2E 7A 73 61 77 32 2E     	dc.b	$2e,$2e,$7a,$73,$61,$77,$32,$2e
                                             
   1007 FFFC0854 2E 63 78 64 65 34 33 2E     	dc.b	$2e,$63,$78,$64,$65,$34,$33,$2e
                                             
   1009 FFFC085C 2E 20 76 66 74 72 35 2E     	dc.b	$2e,$20,$76,$66,$74,$72,$35,$2e
                                             
   1011 FFFC0864 2E 6E 62 68 67 79 36 2E     	dc.b	$2e,$6e,$62,$68,$67,$79,$36,$2e
                                             
   1013 FFFC086C 2E 2E 6D 6A 75 37 38 2E     	dc.b	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
                                             
   1015 FFFC0874 2E 2C 6B 69 6F 30 39 2E     	dc.b	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
                                             
   1017 FFFC087C 2E 2E 2F 6C 3B 70 2D 2E     	dc.b	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
                                             
   1019 FFFC0884 2E 2E 27 2E 5B 3D 2E 2E     	dc.b	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 18
bootrom.asm
                                             
   1021 FFFC088C AD 2E 0D 5D 2E 5C 2E 2E     	dc.b	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
                                             
   1023 FFFC0894 2E 2E 2E 2E 2E 2E 08 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                             
   1025 FFFC089C 2E 95 2E 93 94 2E 2E 2E     	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
                                             
   1027 FFFC08A4 98 7F 92 2E 91 90 1B AF     	dc.b	$98,$7f,$92,$2e,$91,$90,$1b,$af
                                             
   1029 FFFC08AC AB 2E 97 2E 2E 96 AE 2E     	dc.b	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
                                             
                                             
   1032 FFFC08B4 2E 2E 2E A7 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
                                             
   1034 FFFC08BC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1036 FFFC08C4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1038 FFFC08CC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1040 FFFC08D4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1042 FFFC08DC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1044 FFFC08E4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1046 FFFC08EC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1048 FFFC08F4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1050 FFFC08FC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1052 FFFC0904 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1054 FFFC090C 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1056 FFFC0914 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1058 FFFC091C 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1060 FFFC0924 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1062 FFFC092C 2E 2E FA 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
                                             
                                             
   1065 FFFC0934                             _shiftedScanCodes:
   1066 FFFC0934 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1068 FFFC093C 2E 2E 2E 2E 2E 09 7E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
                                             
   1070 FFFC0944 2E 2E 2E 2E 2E 51 21 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
                                             
   1072 FFFC094C 2E 2E 5A 53 41 57 40 2E     	dc.b	$2e,$2e,$5a,$53,$41,$57,$40,$2e
                                             
   1074 FFFC0954 2E 43 58 44 45 24 23 2E     	dc.b	$2e,$43,$58,$44,$45,$24,$23,$2e
                                             
   1076 FFFC095C 2E 20 56 46 54 52 25 2E     	dc.b	$2e,$20,$56,$46,$54,$52,$25,$2e
                                             
   1078 FFFC0964 2E 4E 42 48 47 59 5E 2E     	dc.b	$2e,$4e,$42,$48,$47,$59,$5e,$2e
                                             
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 19
bootrom.asm
   1080 FFFC096C 2E 2E 4D 4A 55 26 2A 2E     	dc.b	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
                                             
   1082 FFFC0974 2E 3C 4B 49 4F 29 28 2E     	dc.b	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
                                             
   1084 FFFC097C 2E 3E 3F 4C 3A 50 5F 2E     	dc.b	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
                                             
   1086 FFFC0984 2E 2E 22 2E 7B 2B 2E 2E     	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
                                             
   1088 FFFC098C 2E 2E 0D 7D 2E 7C 2E 2E     	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
                                             
   1090 FFFC0994 2E 2E 2E 2E 2E 2E 08 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                             
   1092 FFFC099C 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1094 FFFC09A4 2E 7F 2E 2E 2E 2E 1B 2E     	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
                                             
   1096 FFFC09AC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
                                             
   1099 FFFC09B4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1101 FFFC09BC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1103 FFFC09C4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1105 FFFC09CC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1107 FFFC09D4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1109 FFFC09DC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1111 FFFC09E4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1113 FFFC09EC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1115 FFFC09F4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1117 FFFC09FC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1119 FFFC0A04 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1121 FFFC0A0C 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1123 FFFC0A14 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1125 FFFC0A1C 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1127 FFFC0A24 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1129 FFFC0A2C 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
                                             
                                             ; control
   1133 FFFC0A34                             _keybdControlCodes:
   1134 FFFC0A34 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1136 FFFC0A3C 2E 2E 2E 2E 2E 09 7E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
                                             
   1138 FFFC0A44 2E 2E 2E 2E 2E 11 21 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
                                             
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 20
bootrom.asm
   1140 FFFC0A4C 2E 2E 1A 13 01 17 40 2E     	dc.b	$2e,$2e,$1a,$13,$01,$17,$40,$2e
                                             
   1142 FFFC0A54 2E 03 18 04 05 24 23 2E     	dc.b	$2e,$03,$18,$04,$05,$24,$23,$2e
                                             
   1144 FFFC0A5C 2E 20 16 06 14 12 25 2E     	dc.b	$2e,$20,$16,$06,$14,$12,$25,$2e
                                             
   1146 FFFC0A64 2E 0E 02 08 07 19 5E 2E     	dc.b	$2e,$0e,$02,$08,$07,$19,$5e,$2e
                                             
   1148 FFFC0A6C 2E 2E 0D 0A 15 26 2A 2E     	dc.b	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
                                             
   1150 FFFC0A74 2E 3C 0B 09 0F 29 28 2E     	dc.b	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
                                             
   1152 FFFC0A7C 2E 3E 3F 0C 3A 10 5F 2E     	dc.b	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
                                             
   1154 FFFC0A84 2E 2E 22 2E 7B 2B 2E 2E     	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
                                             
   1156 FFFC0A8C 2E 2E 0D 7D 2E 7C 2E 2E     	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
                                             
   1158 FFFC0A94 2E 2E 2E 2E 2E 2E 08 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                             
   1160 FFFC0A9C 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1162 FFFC0AA4 2E 7F 2E 2E 2E 2E 1B 2E     	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
                                             
   1164 FFFC0AAC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
                                             
   1167 FFFC0AB4                             _keybdExtendedCodes:
   1168 FFFC0AB4 2E 2E 2E 2E A3 A1 A2 2E     	dc.b	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
                                             
   1170 FFFC0ABC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1172 FFFC0AC4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1174 FFFC0ACC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1176 FFFC0AD4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1178 FFFC0ADC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1180 FFFC0AE4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1182 FFFC0AEC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1184 FFFC0AF4 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1186 FFFC0AFC 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1188 FFFC0B04 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1190 FFFC0B0C 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1192 FFFC0B14 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1194 FFFC0B1C 2E 95 2E 93 94 2E 2E 2E     	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
                                             
   1196 FFFC0B24 98 99 92 2E 91 90 2E 2E     	dc.b	$98,$99,$92,$2e,$91,$90,$2e,$2e
                                             
   1198 FFFC0B2C 2E 2E 97 2E 2E 96 2E 2E     	dc.b	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
                                             
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 21
bootrom.asm
                                             
                                             
                                             ;==============================================================================
                                             ;==============================================================================
                                             ; Monitor
                                             ;==============================================================================
                                             ;==============================================================================
                                             ;
   1208 FFFC0B34                             StartMon:
   1209 FFFC0B34                             Monitor:
                                             ;	lea		STACK,a7		; reset the stack pointer
   1211 FFFC0B34 4239 0001 0424              		clr.b	KeybdEcho		; turn off keyboard echo
   1212 FFFC0B3A                             PromptLn:
   1213 FFFC0B3A 6100 F5B4                   		bsr		CRLF
   1214 FFFC0B3E 123C 0024                   		move.b	#'$',d1
   1215 FFFC0B42 6100 F5F6                   		bsr		DisplayChar
                                             
                                             ; Get characters until a CR is keyed
                                             ;
   1219 FFFC0B46                             Prompt3:
   1220 FFFC0B46 6100 FA66                   		bsr		GetKey
   1221 FFFC0B4A 0C01 000D                   		cmpi.b	#CR,d1
   1222 FFFC0B4E 6706                        		beq.s	Prompt1
   1223 FFFC0B50 6100 F5E8                   		bsr		DisplayChar
   1224 FFFC0B54 60F0                        		bra.s	Prompt3
                                             
                                             ; Process the screen line that the CR was keyed on
                                             ;
   1228 FFFC0B56                             Prompt1:
   1229 FFFC0B56 4239 0001 0419              		clr.b	CursorCol		; go back to the start of the line
   1230 FFFC0B5C 6100 F5AC                   		bsr		CalcScreenLoc	; a0 = screen memory location
   1231 FFFC0B60 1218                        		move.b	(a0)+,d1
                                             		;bsr		ScreenToAscii
   1233 FFFC0B62 0C01 0024                   		cmpi.b	#'$',d1			; skip over '$' prompt character
   1234 FFFC0B66 6602                        		bne.s	Prompt2
   1235 FFFC0B68 1218                        		move.b	(a0)+,d1
                                             		;bsr		ScreenToAscii
                                             	
                                             ; Dispatch based on command character
                                             ;
   1240 FFFC0B6A                             Prompt2:
   1241 FFFC0B6A 0C01 0067                   		cmpi.b	#'g',d1
   1242 FFFC0B6E 6700 0640                   		beq		GraphicsDemo
   1243 FFFC0B72 0C01 003A                   		cmpi.b	#':',d1			; $: - edit memory
   1244 FFFC0B76 6700 0156                   		beq		EditMem
   1245 FFFC0B7A 0C01 0044                   		cmpi.b	#'D',d1			; $D - dump memory
   1246 FFFC0B7E 6700 01BC                   		beq		DumpMem
   1247 FFFC0B82 0C01 0046                   		cmpi.b	#'F',d1
   1248 FFFC0B86 6700 00F0                   		beq		FillMem
   1249 FFFC0B8A 0C01 0042                   		cmpi.b	#'B',d1			; $B - start tiny basic
   1250 FFFC0B8E 6700 FFFF                   		beq		START
   1251 FFFC0B92 0C01 004A                   		cmpi.b	#'J',d1			; $J - execute code
   1252 FFFC0B96 6700 0194                   		beq		ExecuteCode
   1253 FFFC0B9A 0C01 004C                   		cmpi.b	#'L',d1			; $L - load S19 file
   1254 FFFC0B9E 6700 0328                   		beq		LoadS19
   1255 FFFC0BA2 0C01 003F                   		cmpi.b	#'?',d1			; $? - display help
   1256 FFFC0BA6 6724                        		beq		DisplayHelp
   1257 FFFC0BA8 0C01 0043                   		cmpi.b	#'C',d1			; $C - clear screen
   1258 FFFC0BAC 6702                        		beq		TestCLS
   1259 FFFC0BAE 6084                        		bra		Monitor
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 22
bootrom.asm
                                             
   1261 FFFC0BB0                             TestCLS:
   1262 FFFC0BB0 1218                        		move.b	(a0)+,d1
   1263 FFFC0BB2 0C01 004C                   		cmpi.b	#'L',d1
   1264 FFFC0BB6 6600 FF7C                   		bne		Monitor
   1265 FFFC0BBA 1218                        		move.b	(a0)+,d1
   1266 FFFC0BBC 0C01 0053                   		cmpi.b	#'S',d1
   1267 FFFC0BC0 6600 FF72                   		bne		Monitor
   1268 FFFC0BC4 6100 0216                   		bsr		ClearScreen
   1269 FFFC0BC8 6000 FF6A                   		bra		Monitor
                                             	
   1271 FFFC0BCC                             DisplayHelp:
   1272 FFFC0BCC 43F9 FFFC 0BDC              		lea		HelpMsg,a1
   1273 FFFC0BD2 4EB9 FFFC 02AA              		jsr		DisplayString
   1274 FFFC0BD8 6000 FF5A                   		bra		Monitor
                                             
   1276 FFFC0BDC                             HelpMsg:
   1277 FFFC0BDC 3F 20 3D 20 44 69 73 70     		dc.b	"? = Display help",CR,LF
   1278 FFFC0BE4 6C 61 79 20 68 65 6C 70     
   1279 FFFC0BEC 0D 0A                       
   1280 FFFC0BEE 43 4C 53 20 3D 20 63 6C     		dc.b	"CLS = clear screen",CR,LF
   1281 FFFC0BF6 65 61 72 20 73 63 72 65     
   1282 FFFC0BFE 65 6E 0D 0A                 
   1283 FFFC0C02 3A 20 3D 20 45 64 69 74     		dc.b	": = Edit memory bytes",CR,LF
   1284 FFFC0C0A 20 6D 65 6D 6F 72 79 20     
   1285 FFFC0C12 62 79 74 65 73 0D 0A        
   1286 FFFC0C19 46 20 3D 20 46 69 6C 6C     		dc.b	"F = Fill memory",CR,LF
   1287 FFFC0C21 20 6D 65 6D 6F 72 79 0D     
   1288 FFFC0C29 0A                          
   1289 FFFC0C2A 4C 20 3D 20 4C 6F 61 64     		dc.b	"L = Load S19 file",CR,LF
   1290 FFFC0C32 20 53 31 39 20 66 69 6C     
   1291 FFFC0C3A 65 0D 0A                    
   1292 FFFC0C3D 44 20 3D 20 44 75 6D 70     		dc.b	"D = Dump memory",CR,LF
   1293 FFFC0C45 20 6D 65 6D 6F 72 79 0D     
   1294 FFFC0C4D 0A                          
   1295 FFFC0C4E 42 20 3D 20 73 74 61 72     		dc.b	"B = start tiny basic",CR,LF
   1296 FFFC0C56 74 20 74 69 6E 79 20 62     
   1297 FFFC0C5E 61 73 69 63 0D 0A           
   1298 FFFC0C64 4A 20 3D 20 4A 75 6D 70     		dc.b	"J = Jump to code",CR,LF,0
   1299 FFFC0C6C 20 74 6F 20 63 6F 64 65     
   1300 FFFC0C74 0D 0A 00                    
   1301 FFFC0C77 FF                         		even
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Fill memory
                                             ; FB = fill bytes		FB 00000010 100 FF	; fill starting at 10 for 256 bytes
                                             ; FW = fill words
                                             ; FL = fill longs
                                             ; F = fill bytes
                                             ;------------------------------------------------------------------------------
                                             ;
   1311 FFFC0C78                             FillMem:
   1312 FFFC0C78 1218                        		move.b	(a0)+,d1
                                             		;bsr		ScreenToAscii
   1314 FFFC0C7A 1801                        		move.b	d1,d4			; d4 = fill size
   1315 FFFC0C7C 6100 0044                   		bsr		ignBlanks
   1316 FFFC0C80 6100 00EE                   		bsr		GetHexNumber
   1317 FFFC0C84 2241                        		move.l	d1,a1			; a1 = start
   1318 FFFC0C86 6100 003A                   		bsr		ignBlanks
   1319 FFFC0C8A 6100 00E4                   		bsr		GetHexNumber
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 23
bootrom.asm
   1320 FFFC0C8E 2601                        		move.l	d1,d3			; d3 = count
   1321 FFFC0C90 6100 0030                   		bsr		ignBlanks
   1322 FFFC0C94 6100 00DA                   		bsr		GetHexNumber	; fill value
   1323 FFFC0C98 0C04 004C                   		cmpi.b	#'L',d4
   1324 FFFC0C9C 660A                        		bne		fmem1
   1325 FFFC0C9E                             fmemL:
   1326 FFFC0C9E 22C1                        		move.l	d1,(a1)+
   1327 FFFC0CA0 51CB FFFC                   		dbra	d3,fmemL
   1328 FFFC0CA4 6000 FE8E                   		bra		Monitor
   1329 FFFC0CA8                             fmem1
   1330 FFFC0CA8 0C04 0057                   		cmpi.b	#'W',d4
   1331 FFFC0CAC 660A                        		bne		fmemB
   1332 FFFC0CAE                             fmemW:
   1333 FFFC0CAE 32C1                        		move.w	d1,(a1)+
   1334 FFFC0CB0 51CB FFFC                   		dbra	d3,fmemW
   1335 FFFC0CB4 6000 FE7E                   		bra		Monitor
   1336 FFFC0CB8                             fmemB:
   1337 FFFC0CB8 12C1                        		move.b	d1,(a1)+
   1338 FFFC0CBA 51CB FFFC                   		dbra	d3,fmemB
   1339 FFFC0CBE 6000 FE74                   		bra		Monitor
                                             
                                             ;------------------------------------------------------------------------------
                                             ;------------------------------------------------------------------------------
                                             ;
   1344 FFFC0CC2                             ignBlanks:
   1345 FFFC0CC2 1218                        		move.b	(a0)+,d1
   1346 FFFC0CC4 0C01 0020                   		cmpi.b	#' ',d1
   1347 FFFC0CC8 67F8                        		beq		ignBlanks
   1348 FFFC0CCA 5388                        		subq	#1,a0
   1349 FFFC0CCC 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Edit memory byte.
                                             ;------------------------------------------------------------------------------
                                             ;
   1355 FFFC0CCE                             EditMem:
   1356 FFFC0CCE 6100 FFF2                   		bsr		ignBlanks
   1357 FFFC0CD2 6100 009C                   		bsr		GetHexNumber
   1358 FFFC0CD6 2241                        		move.l	d1,a1
   1359 FFFC0CD8                             edtmem1:
   1360 FFFC0CD8 6100 FFE8                   		bsr		ignBlanks
   1361 FFFC0CDC 6100 0092                   		bsr		GetHexNumber
   1362 FFFC0CE0 12C1                        		move.b	d1,(a1)+
   1363 FFFC0CE2 6100 FFDE                   		bsr		ignBlanks
   1364 FFFC0CE6 6100 0088                   		bsr		GetHexNumber
   1365 FFFC0CEA 12C1                        		move.b	d1,(a1)+
   1366 FFFC0CEC 6100 FFD4                   		bsr		ignBlanks
   1367 FFFC0CF0 6100 007E                   		bsr		GetHexNumber
   1368 FFFC0CF4 12C1                        		move.b	d1,(a1)+
   1369 FFFC0CF6 6100 FFCA                   		bsr		ignBlanks
   1370 FFFC0CFA 6100 0074                   		bsr		GetHexNumber
   1371 FFFC0CFE 12C1                        		move.b	d1,(a1)+
   1372 FFFC0D00 6100 FFC0                   		bsr		ignBlanks
   1373 FFFC0D04 6100 006A                   		bsr		GetHexNumber
   1374 FFFC0D08 12C1                        		move.b	d1,(a1)+
   1375 FFFC0D0A 6100 FFB6                   		bsr		ignBlanks
   1376 FFFC0D0E 6100 0060                   		bsr		GetHexNumber
   1377 FFFC0D12 12C1                        		move.b	d1,(a1)+
   1378 FFFC0D14 6100 FFAC                   		bsr		ignBlanks
   1379 FFFC0D18 6100 0056                   		bsr		GetHexNumber
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 24
bootrom.asm
   1380 FFFC0D1C 12C1                        		move.b	d1,(a1)+
   1381 FFFC0D1E 6100 FFA2                   		bsr		ignBlanks
   1382 FFFC0D22 6100 004C                   		bsr		GetHexNumber
   1383 FFFC0D26 12C1                        		move.b	d1,(a1)+
   1384 FFFC0D28 6000 FE0A                   		bra		Monitor
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Execute code at the specified address.
                                             ;------------------------------------------------------------------------------
                                             ;
   1390 FFFC0D2C                             ExecuteCode:
   1391 FFFC0D2C 6100 FF94                   		bsr		ignBlanks
   1392 FFFC0D30 6100 003E                   		bsr		GetHexNumber
   1393 FFFC0D34 2041                        		move.l	d1,a0
   1394 FFFC0D36 4E90                        		jsr		(a0)
   1395 FFFC0D38 6000 FDFA                   		bra     Monitor
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Do a memory dump of the requested location.
                                             ;------------------------------------------------------------------------------
                                             ;
   1401 FFFC0D3C                             DumpMem:
   1402 FFFC0D3C 6100 FF84                   		bsr		ignBlanks
   1403 FFFC0D40 6100 002E                   		bsr		GetHexNumber
   1404 FFFC0D44                             DumpMem1:
   1405 FFFC0D44 2041                        		move.l	d1,a0
   1406 FFFC0D46 4EB9 FFFC 00F0              		jsr		CRLF
   1407 FFFC0D4C 6100 F7B8                   		bsr		DisplayMem
   1408 FFFC0D50 6100 F7B4                   		bsr		DisplayMem
   1409 FFFC0D54 6100 F7B0                   		bsr		DisplayMem
   1410 FFFC0D58 6100 F7AC                   		bsr		DisplayMem
   1411 FFFC0D5C 6100 F7A8                   		bsr		DisplayMem
   1412 FFFC0D60 6100 F7A4                   		bsr		DisplayMem
   1413 FFFC0D64 6100 F7A0                   		bsr		DisplayMem
   1414 FFFC0D68 6100 F79C                   		bsr		DisplayMem
   1415 FFFC0D6C 6000 FDC6                   		bra		Monitor
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Get a hexidecimal number. Maximum of eight digits.
                                             ;------------------------------------------------------------------------------
                                             ;
   1421 FFFC0D70                             GetHexNumber:
   1422 FFFC0D70 48E7 A000                   		movem.l	d0/d2,-(a7)
   1423 FFFC0D74 4282                        		clr.l	d2
   1424 FFFC0D76 7007                        		moveq	#7,d0
   1425 FFFC0D78                             gthxn2:
   1426 FFFC0D78 1218                        		move.b	(a0)+,d1
   1427 FFFC0D7A 6100 001E                   		bsr		AsciiToHexNybble
   1428 FFFC0D7E B23C 00FF                   		cmp.b	#0xff,d1
   1429 FFFC0D82 670E                        		beq		gthxn1
   1430 FFFC0D84 E98A                        		lsl.l	#4,d2
   1431 FFFC0D86 0281 0000 000F              		andi.l	#0x0f,d1
   1432 FFFC0D8C 8481                        		or.l	d1,d2
   1433 FFFC0D8E 51C8 FFE8                   		dbra	d0,gthxn2
   1434 FFFC0D92                             gthxn1:
   1435 FFFC0D92 2202                        		move.l	d2,d1
   1436 FFFC0D94 4CDF 0005                   		movem.l	(a7)+,d0/d2
   1437 FFFC0D98 4E75                        		rts	
                                             
                                             ;------------------------------------------------------------------------------
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 25
bootrom.asm
                                             ; Convert ASCII character in the range '0' to '9', 'a' tr 'f' or 'A' to 'F'
                                             ; to a hex nybble.
                                             ;------------------------------------------------------------------------------
                                             ;
   1444 FFFC0D9A                             AsciiToHexNybble:
   1445 FFFC0D9A 0C01 0030                   		cmpi.b	#'0',d1
   1446 FFFC0D9E 6538                        		blo.s	gthx3
   1447 FFFC0DA0 0C01 0039                   		cmpi.b	#'9',d1
   1448 FFFC0DA4 6206                        		bhi.s	gthx5
   1449 FFFC0DA6 0401 0030                   		subi.b	#'0',d1
   1450 FFFC0DAA 4E75                        		rts
   1451 FFFC0DAC                             gthx5:
   1452 FFFC0DAC 0C01 0041                   		cmpi.b	#'A',d1
   1453 FFFC0DB0 6526                        		blo.s	gthx3
   1454 FFFC0DB2 0C01 0046                   		cmpi.b	#'F',d1
   1455 FFFC0DB6 620A                        		bhi.s	gthx6
   1456 FFFC0DB8 0401 0041                   		subi.b	#'A',d1
   1457 FFFC0DBC 0601 000A                   		addi.b	#10,d1
   1458 FFFC0DC0 4E75                        		rts
   1459 FFFC0DC2                             gthx6:
   1460 FFFC0DC2 0C01 0061                   		cmpi.b	#'a',d1
   1461 FFFC0DC6 6510                        		blo.s	gthx3
   1462 FFFC0DC8 0C01 0066                   		cmpi.b	#'f',d1
   1463 FFFC0DCC 620A                        		bhi.s	gthx3
   1464 FFFC0DCE 0401 0061                   		subi.b	#'a',d1
   1465 FFFC0DD2 0601 000A                   		addi.b	#10,d1
   1466 FFFC0DD6 4E75                        		rts
   1467 FFFC0DD8                             gthx3:
   1468 FFFC0DD8 72FF                        		moveq	#-1,d1		; not a hex number
   1469 FFFC0DDA 4E75                        		rts
                                             
                                             ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                             ; The fast way to clear the screen. Uses the blitter.
                                             ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                             
   1475 FFFC0DDC                             ClearScreen:
   1476 FFFC0DDC 4BF9 FFE0 0000              		lea		VDGREG,a5
   1477 FFFC0DE2                             .0003:								
   1478 FFFC0DE2 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   1479 FFFC0DE6 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   1480 FFFC0DEA 67F6                        		beq.s	.0003				; branch if not done
   1481 FFFC0DEC 2B7C 0001 4000 04BC         		move.l	#320*256,$4BC(a5)		; set transfer count  pixels
   1482 FFFC0DF4 3B79 0001 0004 04A8         		move.w	bkcolor,$4A8(a5)	; set color dark blue
   1483 FFFC0DFC 2B7C 0000 0000 0498         		move.l	#0,$498(a5)			; set destination address
   1484 FFFC0E04 2B7C 0000 0140 04A4         		move.l	#320,$4A4(a5)		; set destination width
   1485 FFFC0E0C 2B7C 0000 0000 049C         		move.l	#0,$49C(a5)			; set dst modulo
   1486 FFFC0E14 3B7C 8080 04AC              		move.w	#%1000000010000000,$4AC(a5)		; enable channel D, start transfer
   1487 FFFC0E1A 4E75                        		rts
                                             
   1489 FFFC0E1C                             ScrollUp:
   1490 FFFC0E1C 48E7 8004                   		movem.l	d0/a5,-(a7)
   1491 FFFC0E20 4BF9 FFE0 0000              		lea		VDGREG,a5
   1492 FFFC0E26                             .0003:								
   1493 FFFC0E26 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   1494 FFFC0E2A 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   1495 FFFC0E2E 67F6                        		beq.s	.0003				; branch if not done
                                             		; Channel A
   1497 FFFC0E30 2B7C 0001 3600 04B0         		move.l	#320*248,$4B0(a5)	; set source transfer count pixels
   1498 FFFC0E38 2B7C 0000 0A00 0480         		move.l	#320*8,$480(a5)		; set source bitmap address (address in graphics mem)
   1499 FFFC0E40 2B7C 0000 0000 0484         		move.l	#0,$484(a5)			; set src modulo
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 26
bootrom.asm
                                             		; Channel D
   1501 FFFC0E48 2B7C 0001 3600 04BC         		move.l	#320*248,$4BC(a5)	; set destination transfer count pixels
   1502 FFFC0E50 2B7C 0000 0000 0498         		move.l	#0,$498(a5)			; set destination address
   1503 FFFC0E58 2B7C 0000 0000 049C         		move.l	#0,$49C(a5)			; set dst modulo
                                             
   1505 FFFC0E60 2B7C FFFF FFFF 04A0         		move.l	#-1,$4A0(a5)		; set source width
   1506 FFFC0E68 2B7C FFFF FFFF 04A4         		move.l	#-1,$4A4(a5)		; set destination width
   1507 FFFC0E70 3B7C 0011 04AE              		move.w	#$11,$4AE(a5)		; set op A ($11 = copy A)
   1508 FFFC0E76 3B7C 8082 04AC              		move.w	#%1000000010000010,$4AC(a5)		; enable channel A,D, start transfer
   1509 FFFC0E7C 4CDF 2001                   		movem.l	(a7)+,d0/a5
                                             
   1511 FFFC0E80                             BlankLastLine:
   1512 FFFC0E80 48E7 8004                   		movem.l	d0/a5,-(a7)
                                             		; Channel D
   1514 FFFC0E84 4BF9 FFE0 0000              		lea		VDGREG,a5
   1515 FFFC0E8A                             .0003:								
   1516 FFFC0E8A 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   1517 FFFC0E8E 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   1518 FFFC0E92 67F6                        		beq.s	.0003				; branch if not done
   1519 FFFC0E94 2B7C 0000 0A00 04BC         		move.l	#320*8,$4BC(a5)		; set destination transfer count pixels
   1520 FFFC0E9C 2B7C 0001 3600 0498         		move.l	#320*248,$498(a5)	; set destination address
   1521 FFFC0EA4 2B7C 0000 0000 049C         		move.l	#0,$49C(a5)			; set dst modulo
   1522 FFFC0EAC 2B7C FFFF FFFF 04A4         		move.l	#-1,$4A4(a5)		; set destination width
   1523 FFFC0EB4 3B79 0001 0004 04A8         		move.w	bkcolor,$4A8(a5)	; set color dark blue
   1524 FFFC0EBC 3B7C 8080 04AC              		move.w	#%1000000010000000,$4AC(a5)		; enable channel D, start transfer
   1525 FFFC0EC2 4CDF 2001                   		movem.l	(a7)+,d0/a5
   1526 FFFC0EC6 4E75                        		rts
                                             
                                             ;==============================================================================
                                             ; Load an S19 format file
                                             ;==============================================================================
                                             ;
   1532 FFFC0EC8                             LoadS19:
   1533 FFFC0EC8 600A                        	bra		ProcessRec
   1534 FFFC0ECA                             NextRec:
   1535 FFFC0ECA 6100 017A                   	bsr		sGetChar
   1536 FFFC0ECE 0C00 000A                   	cmpi.b	#LF,d0
   1537 FFFC0ED2 66F6                        	bne		NextRec
   1538 FFFC0ED4                             ProcessRec
   1539 FFFC0ED4 6100 0170                   	bsr		sGetChar
   1540 FFFC0ED8 1800                        	move.b	d0,d4
   1541 FFFC0EDA 0C04 001A                   	cmpi.b	#26,d4		; CTRL-Z ?
   1542 FFFC0EDE 6700 FC54                   	beq		Monitor
   1543 FFFC0EE2 0C04 0053                   	cmpi.b	#'S',d4
   1544 FFFC0EE6 66E2                        	bne		NextRec
   1545 FFFC0EE8 6100 015C                   	bsr		sGetChar
   1546 FFFC0EEC 1800                        	move.b	d0,d4
   1547 FFFC0EEE 0C04 0030                   	cmpi.b	#'0',d4
   1548 FFFC0EF2 65D6                        	blo		NextRec
   1549 FFFC0EF4 0C04 0039                   	cmpi.b	#'9',d4		; d4 = record type
   1550 FFFC0EF8 62D0                        	bhi		NextRec
   1551 FFFC0EFA 6100 014A                   	bsr		sGetChar
   1552 FFFC0EFE 6100 FE9A                   	bsr		AsciiToHexNybble
   1553 FFFC0F02 1401                        	move.b	d1,d2
   1554 FFFC0F04 6100 0140                   	bsr		sGetChar
   1555 FFFC0F08 6100 FE90                   	bsr		AsciiToHexNybble
   1556 FFFC0F0C E90A                        	lsl.b	#4,d2
   1557 FFFC0F0E 8202                        	or.b	d2,d1		; d1 = byte count
   1558 FFFC0F10 1601                        	move.b	d1,d3		; d3 = byte count
   1559 FFFC0F12 0C04 0030                   	cmpi.b	#'0',d4		; manufacturer ID record, ignore
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 27
bootrom.asm
   1560 FFFC0F16 67B2                        	beq		NextRec
   1561 FFFC0F18 0C04 0031                   	cmpi.b	#'1',d4
   1562 FFFC0F1C 676A                        	beq		ProcessS1
   1563 FFFC0F1E 0C04 0032                   	cmpi.b	#'2',d4
   1564 FFFC0F22 676A                        	beq		ProcessS2
   1565 FFFC0F24 0C04 0033                   	cmpi.b	#'3',d4
   1566 FFFC0F28 676A                        	beq		ProcessS3
   1567 FFFC0F2A 0C04 0035                   	cmpi.b	#'5',d4		; record count record, ignore
   1568 FFFC0F2E 679A                        	beq		NextRec
   1569 FFFC0F30 0C04 0037                   	cmpi.b	#'7',d4
   1570 FFFC0F34 6764                        	beq		ProcessS7
   1571 FFFC0F36 0C04 0038                   	cmpi.b	#'8',d4
   1572 FFFC0F3A 676C                        	beq		ProcessS8
   1573 FFFC0F3C 0C04 0039                   	cmpi.b	#'9',d4
   1574 FFFC0F40 6774                        	beq		ProcessS9
   1575 FFFC0F42 6086                        	bra		NextRec
                                             
   1577 FFFC0F44                             pcssxa
   1578 FFFC0F44 0243 00FF                   	andi.w	#0xff,d3
   1579 FFFC0F48 5343                        	subi.w	#1,d3			; one less for dbra
   1580 FFFC0F4A                             pcss1a
   1581 FFFC0F4A 4282                        	clr.l	d2
   1582 FFFC0F4C 6100 00F8                   	bsr		sGetChar
   1583 FFFC0F50 6100 FE48                   	bsr		AsciiToHexNybble
   1584 FFFC0F54 E98A                        	lsl.l	#4,d2
   1585 FFFC0F56 8401                        	or.b	d1,d2
   1586 FFFC0F58 6100 00EC                   	bsr		sGetChar
   1587 FFFC0F5C 6100 FE3C                   	bsr		AsciiToHexNybble
   1588 FFFC0F60 E98A                        	lsl.l	#4,d2
   1589 FFFC0F62 8401                        	or.b	d1,d2
   1590 FFFC0F64 12C2                        	move.b	d2,(a1)+
   1591 FFFC0F66 51CB FFE2                   	dbra	d3,pcss1a
                                             ; Get the checksum byte
   1593 FFFC0F6A 4282                        	clr.l	d2
   1594 FFFC0F6C 6100 00D8                   	bsr		sGetChar
   1595 FFFC0F70 6100 FE28                   	bsr		AsciiToHexNybble
   1596 FFFC0F74 E98A                        	lsl.l	#4,d2
   1597 FFFC0F76 8401                        	or.b	d1,d2
   1598 FFFC0F78 6100 00CC                   	bsr		sGetChar
   1599 FFFC0F7C 6100 FE1C                   	bsr		AsciiToHexNybble
   1600 FFFC0F80 E98A                        	lsl.l	#4,d2
   1601 FFFC0F82 8401                        	or.b	d1,d2
   1602 FFFC0F84 6000 FF44                   	bra		NextRec
                                             
   1604 FFFC0F88                             ProcessS1:
   1605 FFFC0F88 6100 003A                   	bsr		S19Get16BitAddress
   1606 FFFC0F8C 60B6                        	bra		pcssxa
   1607 FFFC0F8E                             ProcessS2:
   1608 FFFC0F8E 6100 0042                   	bsr		S19Get24BitAddress
   1609 FFFC0F92 60B0                        	bra		pcssxa
   1610 FFFC0F94                             ProcessS3:
   1611 FFFC0F94 6100 004A                   	bsr		S19Get32BitAddress
   1612 FFFC0F98 60AA                        	bra		pcssxa
   1613 FFFC0F9A                             ProcessS7:
   1614 FFFC0F9A 6100 0044                   	bsr		S19Get32BitAddress
   1615 FFFC0F9E 23C9 0000 0000              	move.l	a1,S19StartAddress
   1616 FFFC0FA4 6000 FB8E                   	bra		Monitor
   1617 FFFC0FA8                             ProcessS8:
   1618 FFFC0FA8 6100 0028                   	bsr		S19Get24BitAddress
   1619 FFFC0FAC 23C9 0000 0000              	move.l	a1,S19StartAddress
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 28
bootrom.asm
   1620 FFFC0FB2 6000 FB80                   	bra		Monitor
   1621 FFFC0FB6                             ProcessS9:
   1622 FFFC0FB6 6100 000C                   	bsr		S19Get16BitAddress
   1623 FFFC0FBA 23C9 0000 0000              	move.l	a1,S19StartAddress
   1624 FFFC0FC0 6000 FB72                   	bra		Monitor
                                             
   1626 FFFC0FC4                             S19Get16BitAddress:
   1627 FFFC0FC4 4282                        	clr.l	d2
   1628 FFFC0FC6 6100 007E                   	bsr		sGetChar
   1629 FFFC0FCA 6100 FDCE                   	bsr		AsciiToHexNybble
   1630 FFFC0FCE 1401                        	move.b	d1,d2
   1631 FFFC0FD0 604A                        	bra		S1932b
                                             
   1633 FFFC0FD2                             S19Get24BitAddress:
   1634 FFFC0FD2 4282                        	clr.l	d2
   1635 FFFC0FD4 6100 0070                   	bsr		sGetChar
   1636 FFFC0FD8 6100 FDC0                   	bsr		AsciiToHexNybble
   1637 FFFC0FDC 1401                        	move.b	d1,d2
   1638 FFFC0FDE 6024                        	bra		S1932a
                                             
   1640 FFFC0FE0                             S19Get32BitAddress:
   1641 FFFC0FE0 4282                        	clr.l	d2
   1642 FFFC0FE2 6100 0062                   	bsr		sGetChar
   1643 FFFC0FE6 6100 FDB2                   	bsr		AsciiToHexNybble
   1644 FFFC0FEA 1401                        	move.b	d1,d2
   1645 FFFC0FEC 6100 0058                   	bsr		sGetChar
   1646 FFFC0FF0 6100 FDA8                   	bsr		AsciiToHexNybble
   1647 FFFC0FF4 E98A                        	lsl.l	#4,d2
   1648 FFFC0FF6 8401                        	or.b	d1,d2
   1649 FFFC0FF8 6100 004C                   	bsr		sGetChar
   1650 FFFC0FFC 6100 FD9C                   	bsr		AsciiToHexNybble
   1651 FFFC1000 E98A                        	lsl.l	#4,d2
   1652 FFFC1002 8401                        	or.b	d1,d2
   1653 FFFC1004                             S1932a:
   1654 FFFC1004 6100 0040                   	bsr		sGetChar
   1655 FFFC1008 6100 FD90                   	bsr		AsciiToHexNybble
   1656 FFFC100C E98A                        	lsl.l	#4,d2
   1657 FFFC100E 8401                        	or.b	d1,d2
   1658 FFFC1010 6100 0034                   	bsr		sGetChar
   1659 FFFC1014 6100 FD84                   	bsr		AsciiToHexNybble
   1660 FFFC1018 E98A                        	lsl.l	#4,d2
   1661 FFFC101A 8401                        	or.b	d1,d2
   1662 FFFC101C                             S1932b:
   1663 FFFC101C 6100 0028                   	bsr		sGetChar
   1664 FFFC1020 6100 FD78                   	bsr		AsciiToHexNybble
   1665 FFFC1024 E98A                        	lsl.l	#4,d2
   1666 FFFC1026 8401                        	or.b	d1,d2
   1667 FFFC1028 6100 001C                   	bsr		sGetChar
   1668 FFFC102C 6100 FD6C                   	bsr		AsciiToHexNybble
   1669 FFFC1030 E98A                        	lsl.l	#4,d2
   1670 FFFC1032 8401                        	or.b	d1,d2
   1671 FFFC1034 6100 0010                   	bsr		sGetChar
   1672 FFFC1038 6100 FD60                   	bsr		AsciiToHexNybble
   1673 FFFC103C E98A                        	lsl.l	#4,d2
   1674 FFFC103E 8401                        	or.b	d1,d2
   1675 FFFC1040 4284                        	clr.l	d4
   1676 FFFC1042 2242                        	move.l	d2,a1
   1677 FFFC1044 4E75                        	rts
                                             
                                             ;------------------------------------------------------------------------------
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 29
bootrom.asm
                                             ; Get a character from auxillary input, checking the keyboard status for a
                                             ; CTRL-C
                                             ;------------------------------------------------------------------------------
                                             ;
   1684 FFFC1046                             sGetChar:
   1685 FFFC1046 6100 F554                   	bsr		CheckForKey
   1686 FFFC104A 670C                        	beq		sgc1
   1687 FFFC104C 6100 F560                   	bsr		GetKey
   1688 FFFC1050 0C01 0000                   	cmpi.b	#CTRLC,d1
   1689 FFFC1054 6700 FADE                   	beq		Monitor
   1690 FFFC1058                             sgc1:
   1691 FFFC1058 6100 FFFF                   	bsr		AUXIN
   1692 FFFC105C 67E8                        	beq		sGetChar
   1693 FFFC105E 1200                        	move.b	d0,d1
   1694 FFFC1060 4E75                        	rts
                                             
                                             ;==============================================================================
                                             ;==============================================================================
                                             
                                             ;------------------------------------------------------------------------------
                                             ;------------------------------------------------------------------------------
                                             ;
   1702 FFFC1062                             DisplayHexNumber:
   1703 FFFC1062 33FC A6A6 FFDC 0600         		move.w	#$A6A6,leds		; diagnostics
   1704 FFFC106A 2C7C FFE0 0000              		move.l	#VDGREG,a6
   1705 FFFC1070 343C 0007                   		move.w	#7,d2		; number-1 of digits to display
   1706 FFFC1074                             disphnum1:
   1707 FFFC1074 1001                        		move.b	d1,d0		; get digit into d0.b
   1708 FFFC1076 0240 000F                   		andi.w	#$0f,d0
   1709 FFFC107A 0C40 0009                   		cmpi.w	#$09,d0
   1710 FFFC107E 6302                        		bls.s	disphnum2
   1711 FFFC1080 5E40                        		addi.w	#7,d0
   1712 FFFC1082                             disphnum2:
   1713 FFFC1082 0640 0030                   		addi.w	#$30,d0	; convert to display char
   1714 FFFC1086 3602                        		move.w	d2,d3		; char count into d3
   1715 FFFC1088 E743                        		asl.w	#3,d3		; scale * 8
   1716 FFFC108A                             disphnum3:
   1717 FFFC108A 382E 042C                   		move.w	$42C(a6),d4			; read character queue index into d4
   1718 FFFC108E B87C 001C                   		cmp.w	#28,d4					; allow up 28 entries to be in progress
   1719 FFFC1092 64F6                        		bhs.s	disphnum3				; branch if too many chars queued
   1720 FFFC1094 4880                        		ext.w	d0						; zero out high order bits
   1721 FFFC1096 3D40 0420                   		move.w	d0,$420(a6)			; set char code
   1722 FFFC109A 3D7C 7FFF 0422              		move.w	#WHITE,$422(a6)		; set fg color
   1723 FFFC10A0 3D7C 000F 0424              		move.w	#DARK_BLUE,$424(a6)	; set bk color
   1724 FFFC10A6 3D43 0426                   		move.w	d3,$426(a6)			; set x pos
   1725 FFFC10AA 3D7C 0008 0428              		move.w	#8,$428(a6)			; set y pos
   1726 FFFC10B0 3D7C 0707 042A              		move.w	#$0707,$42A(a6)		; set font x,y extent
   1727 FFFC10B6 3D7C 0000 042E              		move.w	#0,$42E(a6)			; pulse character queue write signal
   1728 FFFC10BC E899                        		ror.l	#4,d1					; rot to next digit
   1729 FFFC10BE 57CA FFB4                   		dbeq	d2,disphnum1
   1730 FFFC10C2 4ED5                        		jmp		(a5)
                                             
                                             ;===============================================================================
                                             ;    Perform ram test. (Uses checkerboard testing).
                                             ; 
                                             ;    Return address must be stored in a3 since the stack cannot be used (it
                                             ; would get overwritten in test). Note this routine uses no ram at all.
                                             ;===============================================================================
   1738 FFFC10C4                             ramtest:
   1739 FFFC10C4 33FC A5A5 FFDC 0600         		move.w	#$A5A5,leds		; diagnostics
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 30
bootrom.asm
   1740 FFFC10CC 207C 0003 0000                      movea.l #$30000,a0
   1741 FFFC10D2 203C AAAA 5555                      move.l #$aaaa5555,d0
                                             ;-----------------------------------------------------------
                                             ;   Write checkerboard pattern to ram then read it back to
                                             ; find the highest usable ram address (maybe). This address
                                             ; must be lower than the start of the rom (0xe00000).
                                             ;-----------------------------------------------------------
   1747 FFFC10D8                             ramtest1:
   1748 FFFC10D8 20C0                                move.l 	d0,(a0)+
   1749 FFFC10DA 2208                                move.l	a0,d1
   1750 FFFC10DC 4A41                                tst.w	d1
   1751 FFFC10DE 660A                                bne.s	rmtst1
   1752 FFFC10E0 4BF9 FFFC 10EA                      lea		rmtst1,a5
   1753 FFFC10E6 6000 FF7A                           bra		DisplayHexNumber
   1754 FFFC10EA                             rmtst1:
   1755 FFFC10EA 33FC A9A9 FFDC 0600         		move.w	#$A9A9,leds		; diagnostics
   1756 FFFC10F2 B1FC 0005 FFFC                      cmpa.l 	#$5FFFC,a0
   1757 FFFC10F8 66DE                                bne.s 	ramtest1
   1758 FFFC10FA 7200                                move.l	#0,d1
   1759 FFFC10FC 6100 F00C                           bsr		CalcScreenLoc
   1760 FFFC1100 6000 FC42                           bra		DumpMem1
                                             
                                             ;------------------------------------------------------
                                             ;   Save maximum useable address for later comparison.
                                             ;------------------------------------------------------
   1765 FFFC1104                             ramtest6:
   1766 FFFC1104 33FC A7A7 FFDC 0600         		move.w	#$A7A7,leds		; diagnostics
   1767 FFFC110C 2448                                movea.l a0,a2
   1768 FFFC110E 207C 0003 0000                      movea.l #$30000,a0
                                             ;--------------------------------------------
                                             ;   Read back checkerboard pattern from ram.
                                             ;--------------------------------------------
   1772 FFFC1114                             ramtest2:
   1773 FFFC1114 2A18                                move.l  (a0)+,d5
   1774 FFFC1116 B5C8                                cmpa.l	a0,a2
   1775 FFFC1118 671A                                beq.s	ramtest3
   1776 FFFC111A 2208                                move.l	a0,d1
   1777 FFFC111C 4A41                                tst.w	d1
   1778 FFFC111E 660A                                bne.s	rmtst2
   1779 FFFC1120 4BF9 FFFC 112A                      lea		rmtst2,a5
   1780 FFFC1126 6000 FF3A                           bra		DisplayHexNumber
   1781 FFFC112A                             rmtst2:
   1782 FFFC112A 0C85 AAAA 5555                      cmpi.l 	#$aaaa5555,d5
   1783 FFFC1130 67E2                                beq.s 	ramtest2
   1784 FFFC1132 6678                                bne.s 	ramtest7
                                             ;---------------------------------------------------
                                             ;   The following section does the same test except
                                             ; with the checkerboard order switched around.
                                             ;---------------------------------------------------
   1789 FFFC1134                             ramtest3:                
   1790 FFFC1134 33FC A8A8 FFDC 0600         		move.w	#$A8A8,leds		; diagnostics
   1791 FFFC113C 207C 0003 0000                      movea.l #$30000,a0
   1792 FFFC1142 203C 5555 AAAA                      move.l 	#$5555aaaa,d0
   1793 FFFC1148                             ramtest4:
   1794 FFFC1148 20C0                                move.l 	d0,(a0)+
   1795 FFFC114A 2208                                move.l 	a0,d1
   1796 FFFC114C 4A41                                tst.w	d1
   1797 FFFC114E 660A                                bne.s   rmtst3
   1798 FFFC1150 4BF9 FFFC 115A                      lea		rmtst3,a5
   1799 FFFC1156 6000 FF0A                           bra		DisplayHexNumber
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 31
bootrom.asm
   1800 FFFC115A                             rmtst3:
   1801 FFFC115A B1FC 1FFF FFFC                      cmpa.l 	#$1FFFFFFC,a0
   1802 FFFC1160 66E6                                bne.s 	ramtest4
   1803 FFFC1162                             ramtest8:
   1804 FFFC1162 2448                                movea.l a0,a2
   1805 FFFC1164 207C 0003 0000                      movea.l #$30000,a0
   1806 FFFC116A                             ramtest5:
   1807 FFFC116A 2018                                move.l 	(a0)+,d0
   1808 FFFC116C B5C8                                cmpa.l	a0,a2
   1809 FFFC116E 671A                                beq.s	rmtst5
   1810 FFFC1170 2208                                move.l 	a0,d1
   1811 FFFC1172 4A41                                tst.w	d1
   1812 FFFC1174 660A                                bne.s	rmtst4
   1813 FFFC1176 4BF9 FFFC 1180                      lea		rmtst4,a5
   1814 FFFC117C 6000 FEE4                           bra		DisplayHexNumber
   1815 FFFC1180                             rmtst4:
   1816 FFFC1180 0C80 5555 AAAA                      cmpi.l 	#$5555aaaa,d0
   1817 FFFC1186 67E2                                beq.s 	ramtest5
   1818 FFFC1188 6622                                bne.s 	ramtest7
                                             ;---------------------------------------------------
                                             ;   Save last ram address in end of memory pointer.
                                             ;---------------------------------------------------
   1822 FFFC118A                             rmtst5:
   1823 FFFC118A 23C8 0001 0008                      move.l a0,memend
                                             ;-----------------------------------
                                             ;   Create very first memory block.
                                             ;-----------------------------------
   1827 FFFC1190 91FC 0000 000C                      suba.l 	#12,a0
   1828 FFFC1196 21C8 0404                           move.l 	a0,$0404
   1829 FFFC119A 21FC 4652 4545 0400                 move.l 	#$46524545,$0400
   1830 FFFC11A2 21FC 0000 0408 0408                 move.l 	#$408,$408			; point back-link to self
   1831 FFFC11AA 4ED3                                jmp 	(a3)
                                             ;----------------------------------
                                             ; Error in ram - go no farther.
                                             ;----------------------------------
   1835 FFFC11AC                             ramtest7:
   1836 FFFC11AC 4ED3                        		jmp 	(a3)
   1837 FFFC11AE 60FC                                bra.s 	ramtest7
                                             
                                             
                                             ;===============================================================================
                                             ;===============================================================================
                                             ;===============================================================================
                                             ;===============================================================================
                                             
   1845 FFFC11B0                             GraphicsDemo:
   1846 FFFC11B0 6100 0080                   		bsr		DrawLines
   1847 FFFC11B4 6100 0006                   		bsr		DrawRects
   1848 FFFC11B8 6000 F97A                   		bra		Monitor
                                             
   1850 FFFC11BC                             DrawRects:
   1851 FFFC11BC 4DF9 FFDC 0000              		lea		$FFDC0000,A6	; I/O base
   1852 FFFC11C2 4BF9 FFE0 0000              		lea		VDGREG,a5
   1853 FFFC11C8 2C3C 0003 0D40              		move.l	#200000,d6		; repeat a few times
   1854 FFFC11CE                             .0001:
   1855 FFFC11CE 202E 0C00                   		move.l	$0C00(a6),d0	; get 32 bit number
   1856 FFFC11D2 3200                        		move.w	d0,d1			; use bits 0 to 8 for y0
   1857 FFFC11D4 4840                        		swap	d0				; and bits 16 to 24 for x0
   1858 FFFC11D6 0240 00FF                   		and.w	#$FF,d0		; 0 to 511
   1859 FFFC11DA 0241 00FF                   		and.w	#$FF,d1		; 0 to 511
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 32
bootrom.asm
   1860 FFFC11DE 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   1861 FFFC11E2 242E 0C00                   		move.l	$0C00(a6),d2
   1862 FFFC11E6 3602                        		move.w	d2,d3
   1863 FFFC11E8 4842                        		swap	d2
   1864 FFFC11EA 0242 00FF                   		and.w	#$FF,d2		; 0 to 511
   1865 FFFC11EE 0243 00FF                   		and.w	#$FF,d3		; 0 to 511
   1866 FFFC11F2 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   1867 FFFC11F6 282E 0C00                   		move.l	$0C00(a6),d4
   1868 FFFC11FA 0244 7FFF                   		and.w	#RGBMASK,d4		; 9/15 bits color
   1869 FFFC11FE 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   1870 FFFC1202                             .0002:
   1871 FFFC1202 3E2D 042C                   		move.w	$42C(a5),d7		; check # queued
   1872 FFFC1206 BE7C 001C                   		cmp.w	#28,d7			; more than 28 queued ?
   1873 FFFC120A 64F6                        		bhs.s	.0002			; too many, wait for queue to empty
   1874 FFFC120C 3B7C 0001 0422              		move.w	#1,$422(a5)		; raster op = COPY
   1875 FFFC1212 3B44 0424                   		move.w	d4,$424(a5)		; set color
   1876 FFFC1216 3B40 0426                   		move.w	d0,$426(a5)		; set x0
   1877 FFFC121A 3B41 0428                   		move.w	d1,$428(a5)		; set y0
   1878 FFFC121E 3B42 0430                   		move.w	d2,$430(a5)		; set x1
   1879 FFFC1222 3B43 0432                   		move.w	d3,$432(a5)		; set y1
   1880 FFFC1226 3B7C 0003 042E              		move.w	#3,$42E(a5)		; pulse command queue (3 = draw rect)
   1881 FFFC122C 5386                        		sub.l	#1,d6
   1882 FFFC122E 669E                        		bne		.0001			; go back and do more lines
   1883 FFFC1230 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Draw lines randomly on the screen.
                                             ;===============================================================================
                                             
   1889 FFFC1232                             DrawLines:
   1890 FFFC1232 4DF9 FFDC 0000              		lea		$FFDC0000,A6	; I/O base
   1891 FFFC1238 4BF9 FFE0 0000              		lea		VDGREG,a5
   1892 FFFC123E 2C3C 0003 0D40              		move.l	#200000,d6		; repeat a few times
   1893 FFFC1244                             .0001:
                                             		; Wait for blitter to be done
   1895 FFFC1244                             .0003:								
   1896 FFFC1244 33FC 000A FFDC 0600         		move.w	#10,leds
   1897 FFFC124C 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   1898 FFFC1250 0800 000E                   		btst	#14,d0
   1899 FFFC1254 6706                        		beq.s	.0004
   1900 FFFC1256 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   1901 FFFC125A 67E8                        		beq.s	.0003				; branch if not done
   1902 FFFC125C                             .0004:
   1903 FFFC125C 33FC 000B FFDC 0600         		move.w	#11,leds
   1904 FFFC1264 202E 0C00                   		move.l	$0C00(a6),d0	; get 32 bit number
   1905 FFFC1268 3200                        		move.w	d0,d1			; use bits 0 to 8 for y0
   1906 FFFC126A 4840                        		swap	d0				; and bits 16 to 24 for x0
   1907 FFFC126C 0240 00FF                   		and.w	#$FF,d0		; 0 to 511
   1908 FFFC1270 0241 00FF                   		and.w	#$FF,d1		; 0 to 511
   1909 FFFC1274 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   1910 FFFC1278 242E 0C00                   		move.l	$0C00(a6),d2
   1911 FFFC127C 3602                        		move.w	d2,d3
   1912 FFFC127E 4842                        		swap	d2
   1913 FFFC1280 0242 00FF                   		and.w	#$FF,d2		; 0 to 511
   1914 FFFC1284 0243 00FF                   		and.w	#$FF,d3		; 0 to 511
   1915 FFFC1288 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   1916 FFFC128C 282E 0C00                   		move.l	$0C00(a6),d4
   1917 FFFC1290 0244 7FFF                   		and.w	#RGBMASK,d4		; 9/15 bits color
   1918 FFFC1294 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   1919 FFFC1298                             .0002:
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 33
bootrom.asm
   1920 FFFC1298 3E2D 042C                   		move.w	$42C(a5),d7		; check # queued
   1921 FFFC129C BE7C 001C                   		cmp.w	#28,d7			; more than 28 queued ?
   1922 FFFC12A0 64F6                        		bhs.s	.0002			; too many, wait for queue to empty
   1923 FFFC12A2 33FC 000C FFDC 0600         		move.w	#12,leds
   1924 FFFC12AA 3B7C 0001 0422              		move.w	#1,$422(a5)		; raster op = COPY
   1925 FFFC12B0 3B44 0424                   		move.w	d4,$424(a5)		; set color
   1926 FFFC12B4 3B40 0426                   		move.w	d0,$426(a5)		; set x0
   1927 FFFC12B8 3B41 0428                   		move.w	d1,$428(a5)		; set y0
   1928 FFFC12BC 3B42 0430                   		move.w	d2,$430(a5)		; set x1
   1929 FFFC12C0 3B43 0432                   		move.w	d3,$432(a5)		; set y1
   1930 FFFC12C4 3B7C 0002 042E              		move.w	#2,$42E(a5)		; pulse command queue (2 = draw line)
   1931 FFFC12CA 5386                        		sub.l	#1,d6
   1932 FFFC12CC 6600 FF76                   		bne		.0001			; go back and do more lines
   1933 FFFC12D0 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Test Blitter
                                             ;===============================================================================
                                             
   1939 FFFC12D2                             TestBlitter:
                                             		; puts a red rectangle on screen
   1941 FFFC12D2 4BF9 FFE0 0000              		lea		VDGREG,a5
   1942 FFFC12D8                             .0003:								
   1943 FFFC12D8 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   1944 FFFC12DC 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   1945 FFFC12E0 67F6                        		beq.s	.0003				; branch if not done
   1946 FFFC12E2 2B7C 0000 1F40 04BC         		move.l	#8000,$4BC(a5)		; set transfer count 8000 pixels
   1947 FFFC12EA 3B7C 7C00 04A8              		move.w	#RED,$4A8(a5)		; set color red
   1948 FFFC12F0 2B7C 0000 0118 0498         		move.l	#280,$498(a5)		; set destination address
   1949 FFFC12F8 2B7C 0000 0028 04A4         		move.l	#40,$4A4(a5)		; set destination width
   1950 FFFC1300 2B7C 0000 0118 049C         		move.l	#280,$49C(a5)		; set dst modulo
   1951 FFFC1308 3B7C 8080 04AC              		move.w	#%1000000010000000,$4AC(a5)		; enable channel D, start transfer
                                             
                                             		; makes a copy of the upper left corner of the screen
   1954 FFFC130E                             .0001:								
   1955 FFFC130E 302D 04AC                   		move.w	$4AC(a5),d0			; get blit status
   1956 FFFC1312 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   1957 FFFC1316 67F6                        		beq.s	.0001				; branch if not done
                                             		; Channel A
   1959 FFFC1318 2B7C 0000 03E8 04B0         		move.l	#1000,$4B0(a5)		; set source transfer count 8000 pixels
   1960 FFFC1320 2B7C 0000 0000 0480         		move.l	#0,$480(a5)			; set source bitmap address (address in graphics mem)
   1961 FFFC1328 2B7C 0000 0118 0484         		move.l	#280,$484(a5)		; set src modulo
                                             		; Channel C
   1963 FFFC1330 2B7C 0000 03E8 04B8         		move.l	#1000,$4B8(a5)		; set source transfer count 8000 pixels
   1964 FFFC1338 2B7C 0000 0000 0490         		move.l	#0,$490(a5)			; set source bitmap address (address in graphics mem)
   1965 FFFC1340 2B7C 0000 0118 0494         		move.l	#280,$494(a5)		; set src modulo
                                             		; Channel D
   1967 FFFC1348 2B7C 0000 1F40 04BC         		move.l	#8000,$4BC(a5)		; set destination transfer count 8000 pixels
   1968 FFFC1350 2B7C 0000 00F0 0498         		move.l	#240,$498(a5)		; set destination address
   1969 FFFC1358 2B7C 0000 0118 049C         		move.l	#280,$49C(a5)		; set dst modulo
                                             		
   1971 FFFC1360 2B7C 0000 0028 04A0         		move.l	#40,$4A0(a5)		; set source width
   1972 FFFC1368 2B7C 0000 0028 04A4         		move.l	#40,$4A4(a5)		; set destination width
   1973 FFFC1370 3B7C 0091 04AE              		move.w	#$91,$4AE(a5)		; set op A|C	($11 = copy A)
   1974 FFFC1376 3B7C 80A2 04AC              		move.w	#%1000000010100010,$4AC(a5)		; enable channel A,C,D, start transfer
   1975 FFFC137C                             .0002:								
   1976 FFFC137C 302D 04AC                   		move.w	$4AC(a5),d0			; get blit status
   1977 FFFC1380 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   1978 FFFC1384 67F6                        		beq.s	.0002				; branch if not done
   1979 FFFC1386 4E75                        		rts
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 34
bootrom.asm
                                             
                                             ;===============================================================================
                                             ; Generic I2C routines
                                             ;===============================================================================
                                             
                                             I2C_PREL	EQU		$0
                                             I2C_PREH	EQU		$2
                                             I2C_CTRL	EQU		$4
                                             I2C_RXR		EQU		$6
                                             I2C_TXR		EQU		$6
                                             I2C_CMD		EQU		$8
                                             I2C_STAT	EQU		$A
                                             
                                             ; i2c
   1994 FFFC1388                             i2c_setup:
   1995 FFFC1388 4DF9 FFDC 0E00              		lea		I2C,a6				
   1996 FFFC138E 3CBC 0013                   		move.w	#19,I2C_PREL(a6)	; setup prescale for 400kHz clock
   1997 FFFC1392 3D7C 0000 0002              		move.w	#0,I2C_PREH(a6)
   1998 FFFC1398 4DF9 FFDC 0E10              		lea		I2C2,a6				
   1999 FFFC139E 3CBC 0013                   		move.w	#19,I2C_PREL(a6)	; setup prescale for 400kHz clock
   2000 FFFC13A2 3D7C 0000 0002              		move.w	#0,I2C_PREH(a6)
   2001 FFFC13A8 4E75                        		rts
                                             
                                             ; Wait for I2C transfer to complete
                                             ;
                                             ; Parameters
                                             ; 	a6 - I2C controller base address
                                             
   2008 FFFC13AA                             i2c_wait_tip:
   2009 FFFC13AA 3F00                        		move.w	d0,-(a7)
   2010 FFFC13AC                             .0001:					
   2011 FFFC13AC 302E 000A                   		move.w	I2C_STAT(a6),d0		; wait for tip to clear
   2012 FFFC13B0 0800 0001                   		btst	#1,d0
   2013 FFFC13B4 66F6                        		bne.s	.0001
   2014 FFFC13B6 301F                        		move.w	(a7)+,d0
   2015 FFFC13B8 4E75                        		rts
                                             
                                             ; Parameters
                                             ;	d0.w - data to transmit
                                             ;	d1.w - command value
                                             ;	a6	 - I2C controller base address
                                             ;
   2022 FFFC13BA                             i2c_wr_cmd:
   2023 FFFC13BA 3D40 0006                   		move.w	d0,I2C_TXR(a6)
   2024 FFFC13BE 3D41 0008                   		move.w	d1,I2C_CMD(a6)
   2025 FFFC13C2 6100 FFE6                   		bsr		i2c_wait_tip
   2026 FFFC13C6 302E 000A                   		move.w	I2C_STAT(a6),d0
   2027 FFFC13CA 4E75                        		rts
                                             
   2029 FFFC13CC                             i2c_xmit1:
   2030 FFFC13CC 3F00                        		move.w	d0,-(a7)
   2031 FFFC13CE 3D7C 0001 0004              		move.w	#1,I2C_CTRL(a6)		; enable the core
   2032 FFFC13D4 7076                        		moveq	#$76,d0				; set slave address = %0111011
   2033 FFFC13D6 323C 0090                   		move.w	#$90,d1				; set STA, WR
   2034 FFFC13DA 6100 FFDE                   		bsr		i2c_wr_cmd
   2035 FFFC13DE 6100 0010                   		bsr		i2c_wait_rx_nack
   2036 FFFC13E2 301F                        		move.w	(a7)+,d0
   2037 FFFC13E4 323C 0050                   		move.w	#$50,d1				; set STO, WR
   2038 FFFC13E8 6100 FFD0                   		bsr		i2c_wr_cmd
   2039 FFFC13EC 6100 0002                   		bsr		i2c_wait_rx_nack
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 35
bootrom.asm
                                             
   2041 FFFC13F0                             i2c_wait_rx_nack:
   2042 FFFC13F0 3F00                        		move.w	d0,-(a7)
   2043 FFFC13F2                             .0001:							
   2044 FFFC13F2 302E 000A                   		move.w	I2C_STAT(a6),d0		; wait for RXack = 0
   2045 FFFC13F6 0800 0007                   		btst	#7,d0
   2046 FFFC13FA 66F6                        		bne.s	.0001
   2047 FFFC13FC 301F                        		move.w	(a7)+,d0
   2048 FFFC13FE 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Audio
                                             ;===============================================================================
                                             
                                             
   2055 FFFC1400                             audio_pll_config:
   2056 FFFC1400 7000                        		moveq	#0,d0
   2057 FFFC1402 720E                        		moveq	#$0E,d1
   2058 FFFC1404 6100 001C                   		bsr		audio_write_reg
   2059 FFFC1408 7002                        		moveq	#2,d0
   2060 FFFC140A 41F9 FFFC 147C              		lea		audio_tbl1,a0
   2061 FFFC1410 6100 0076                   		bsr		audio_write_reg6
   2062 FFFC1414 4E75                        		rts
                                             
   2064 FFFC1416                             audio_startup_config:
   2065 FFFC1416 4E75                        		rts
                                             
   2067 FFFC1418                             audio_init:
   2068 FFFC1418 6100 FFE6                   		bsr		audio_pll_config
   2069 FFFC141C 6100 FFF8                   		bsr		audio_startup_config
   2070 FFFC1420 4E75                        		rts
                                             
                                             ; d0.w = register number
                                             ; d1.w = data to write
                                             		
   2075 FFFC1422                             audio_write_reg:
   2076 FFFC1422 4DF9 FFDC 0E00              		lea		I2C,a6				
   2077 FFFC1428 3D7C 0001 0004              		move.w	#1,I2C_CTRL(a6)		; enable the core
   2078 FFFC142E 3D7C 0076 0006              		move.w	#$76,I2C_TXR(a6)	; set slave address = %0111011
   2079 FFFC1434 3D7C 0090 0008              		move.w	#$90,I2C_CMD(a6)	; set STA, WR
   2080 FFFC143A 6100 FF6E                   		bsr		i2c_wait_tip	; wait for tip to clear
   2081 FFFC143E 6100 FFB0                   		bsr		i2c_wait_rx_nack
   2082 FFFC1442 3D7C 0040 0006              		move.w	#$40,I2C_TXR(a6)	; all regsister are $40xx
   2083 FFFC1448 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2084 FFFC144E 6100 FF5A                   		bsr		i2c_wait_tip	; wait for tip to clear
   2085 FFFC1452 6100 FF9C                   		bsr		i2c_wait_rx_nack
   2086 FFFC1456 3D40 0006                   		move.w	d0,I2C_TXR(a6)		; send register address
   2087 FFFC145A 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2088 FFFC1460 6100 FF48                   		bsr		i2c_wait_tip	; wait for tip to clear
   2089 FFFC1464 6100 FF8A                   		bsr		i2c_wait_rx_nack
   2090 FFFC1468 3D41 0006                   		move.w	d1,I2C_TXR(a6)		; send data
   2091 FFFC146C 3D7C 0050 0008              		move.w	#$50,I2C_CMD(a6)	; set STO, WR
   2092 FFFC1472 6100 FF36                   		bsr		i2c_wait_tip	; wait for tip to clear
   2093 FFFC1476 6100 FF78                   		bsr		i2c_wait_rx_nack
   2094 FFFC147A 4E75                        		rts
                                             
   2096 FFFC147C                             audio_tbl1:
   2097 FFFC147C 0000 007D 0000 000C         		dc.w	$00,$7D,$00,$0C,$20,$01
   2098 FFFC1484 0020 0001                   
                                             ; a0
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 36
bootrom.asm
                                             ;
   2101 FFFC1488                             audio_write_reg6:
   2102 FFFC1488 41F9 FFFC 147C              		lea		audio_tbl1,a0
   2103 FFFC148E 4DF9 FFDC 0E00              		lea		I2C,a6				
   2104 FFFC1494 3D7C 0001 0004              		move.w	#1,I2C_CTRL(a6)		; enable the core
   2105 FFFC149A 3D7C 0076 0006              		move.w	#$76,I2C_TXR(a6)	; set slave address = %0111011
   2106 FFFC14A0 3D7C 0090 0008              		move.w	#$90,I2C_CMD(a6)	; set STA, WR
   2107 FFFC14A6 6100 FF02                   		bsr		i2c_wait_tip	; wait for tip to clear
   2108 FFFC14AA 6100 FF44                   		bsr		i2c_wait_rx_nack
   2109 FFFC14AE 3D7C 0040 0006              		move.w	#$40,I2C_TXR(a6)	; all regsister are $40xx
   2110 FFFC14B4 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2111 FFFC14BA 6100 FEEE                   		bsr		i2c_wait_tip	; wait for tip to clear
   2112 FFFC14BE 6100 FF30                   		bsr		i2c_wait_rx_nack
                                             
   2114 FFFC14C2 3D40 0006                   		move.w	d0,I2C_TXR(a6)		; send register address
   2115 FFFC14C6 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2116 FFFC14CC 6100 FEDC                   		bsr		i2c_wait_tip	; wait for tip to clear
   2117 FFFC14D0 6100 FF1E                   		bsr		i2c_wait_rx_nack
                                             		
   2119 FFFC14D4 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #0
   2120 FFFC14D8 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2121 FFFC14DE 6100 FECA                   		bsr		i2c_wait_tip	; wait for tip to clear
   2122 FFFC14E2 6100 FF0C                   		bsr		i2c_wait_rx_nack
                                             
   2124 FFFC14E6 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #1
   2125 FFFC14EA 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2126 FFFC14F0 6100 FEB8                   		bsr		i2c_wait_tip	; wait for tip to clear
   2127 FFFC14F4 6100 FEFA                   		bsr		i2c_wait_rx_nack
                                             
   2129 FFFC14F8 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #2
   2130 FFFC14FC 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2131 FFFC1502 6100 FEA6                   		bsr		i2c_wait_tip	; wait for tip to clear
   2132 FFFC1506 6100 FEE8                   		bsr		i2c_wait_rx_nack
                                             
   2134 FFFC150A 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #3
   2135 FFFC150E 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2136 FFFC1514 6100 FE94                   		bsr		i2c_wait_tip	; wait for tip to clear
   2137 FFFC1518 6100 FED6                   		bsr		i2c_wait_rx_nack
                                             
   2139 FFFC151C 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #4
   2140 FFFC1520 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   2141 FFFC1526 6100 FE82                   		bsr		i2c_wait_tip	; wait for tip to clear
   2142 FFFC152A 6100 FEC4                   		bsr		i2c_wait_rx_nack
                                             
   2144 FFFC152E 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #5
   2145 FFFC1532 3D7C 0050 0008              		move.w	#$50,I2C_CMD(a6)	; set WR, STO
   2146 FFFC1538 6100 FE70                   		bsr		i2c_wait_tip		; wait for tip to clear
   2147 FFFC153C 6100 FEB2                   		bsr		i2c_wait_rx_nack
   2148 FFFC1540 4E75                        		rts
                                             
   2150 FFFC1542                             set_hp_output:
   2151 FFFC1542 7021                        		moveq	#$21,d0				;
   2152 FFFC1544 7200                        		moveq	#0,d1
   2153 FFFC1546 6100 FEDA                   		bsr		audio_write_reg
   2154 FFFC154A 7020                        		moveq	#$20,d0				;
   2155 FFFC154C 6100 FED4                   		bsr		audio_write_reg
   2156 FFFC1550 7023                        		moveq	#$23,d0
   2157 FFFC1552 323C 00E7                   		move.w	#$E7,d1		
   2158 FFFC1556 6100 FECA                   		bsr		audio_write_reg
   2159 FFFC155A 7024                        		moveq	#$24,d0
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 37
bootrom.asm
   2160 FFFC155C 323C 00E7                   		move.w	#$E7,d1		
   2161 FFFC1560 6100 FEC0                   		bsr		audio_write_reg
   2162 FFFC1564 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Realtime clock routines
                                             ;===============================================================================
                                             
   2168 FFFC1566                             rtc_read:
   2169 FFFC1566 2C7C FFDC 0E10              		movea.l	#I2C2,a6
   2170 FFFC156C 4BF9 0001 0600              		lea		RTCBuf,a5
   2171 FFFC1572 3D7C 0080 0004              		move.w	#$80,I2C_CTRL(a6)	; enable I2C
   2172 FFFC1578 303C 00DE                   		move.w	#$DE,d0				; read address, write op
   2173 FFFC157C 323C 0090                   		move.w	#$90,d1				; STA + wr bit
   2174 FFFC1580 6100 FE38                   		bsr		i2c_wr_cmd
   2175 FFFC1584 4A00                        		tst.b	d0
   2176 FFFC1586 6B72                        		bmi		.rxerr
   2177 FFFC1588 303C 0000                   		move.w	#$00,d0				; address zero
   2178 FFFC158C 323C 0010                   		move.w	#$10,d1				; wr bit
   2179 FFFC1590 6100 FE28                   		bsr		i2c_wr_cmd
   2180 FFFC1594 4A00                        		tst.b	d0
   2181 FFFC1596 6B62                        		bmi		.rxerr
   2182 FFFC1598 303C 00DF                   		move.w	#$DF,d0				; read address, read op
   2183 FFFC159C 323C 0090                   		move.w	#$90,d1				; STA + wr bit
   2184 FFFC15A0 6100 FE18                   		bsr		i2c_wr_cmd
   2185 FFFC15A4 4A00                        		tst.b	d0
   2186 FFFC15A6 6B52                        		bmi		.rxerr
                                             		
   2188 FFFC15A8 343C 0020                   		move.w	#$20,d2
   2189 FFFC15AC                             .0001:
   2190 FFFC15AC 3D7C 0020 0008              		move.w	#$20,I2C_CMD(a6)	; rd bit
   2191 FFFC15B2 6100 FDF6                   		bsr		i2c_wait_tip
   2192 FFFC15B6 6100 FE38                   		bsr		i2c_wait_rx_nack
   2193 FFFC15BA 302E 000A                   		move.w	I2C_STAT(a6),d0
   2194 FFFC15BE 4A00                        		tst.b	d0
   2195 FFFC15C0 6B38                        		bmi		.rxerr
   2196 FFFC15C2 302E 0006                   		move.w	I2C_RXR(a6),d0
   2197 FFFC15C6 1B80 2000                   		move.b	d0,(a5,d2.w)
   2198 FFFC15CA 5242                        		add.w	#1,d2
   2199 FFFC15CC B47C 005F                   		cmp.w	#$5F,d2
   2200 FFFC15D0 66DA                        		bne		.0001
   2201 FFFC15D2 3D7C 0068 0008              		move.w	#$68,I2C_CMD(a6)	; STO, rd bit + nack
   2202 FFFC15D8 6100 FDD0                   		bsr		i2c_wait_tip
   2203 FFFC15DC 6100 FE12                   		bsr		i2c_wait_rx_nack
   2204 FFFC15E0 302E 000A                   		move.w	I2C_STAT(a6),d0
   2205 FFFC15E4 4A00                        		tst.b	d0
   2206 FFFC15E6 6B12                        		bmi		.rxerr
   2207 FFFC15E8 302E 0006                   		move.w	I2C_RXR(a6),d0
   2208 FFFC15EC 1B80 2000                   		move.b	d0,(a5,d2.w)
   2209 FFFC15F0 3D7C 0000 0004              		move.w	#0,I2C_CTRL(a6)		; disable I2C and return 0
   2210 FFFC15F6 7000                        		moveq	#0,d0
   2211 FFFC15F8 4E75                        		rts
   2212 FFFC15FA                             .rxerr:
   2213 FFFC15FA 3D7C 0000 0004              		move.w	#0,I2C_CTRL(a6)		; disable I2C and return status
   2214 FFFC1600 4E75                        		rts
                                             
   2216 FFFC1602                             rtc_write:
   2217 FFFC1602 2C7C FFDC 0E10              		movea.l	#I2C2,a6
   2218 FFFC1608 4BF9 0001 0600              		lea		RTCBuf,a5
   2219 FFFC160E 3D7C 0080 0004              		move.w	#$80,I2C_CTRL(a6)	; enable I2C
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 38
bootrom.asm
   2220 FFFC1614 303C 00DE                   		move.w	#$DE,d0				; read address, write op
   2221 FFFC1618 323C 0090                   		move.w	#$90,d1				; STA + wr bit
   2222 FFFC161C 6100 FD9C                   		bsr		i2c_wr_cmd
   2223 FFFC1620 4A00                        		tst.b	d0
   2224 FFFC1622 6B46                        		bmi		.rxerr
   2225 FFFC1624 303C 0000                   		move.w	#$00,d0				; address zero
   2226 FFFC1628 323C 0010                   		move.w	#$10,d1				; wr bit
   2227 FFFC162C 6100 FD8C                   		bsr		i2c_wr_cmd
   2228 FFFC1630 4A00                        		tst.b	d0
   2229 FFFC1632 6B36                        		bmi		.rxerr
   2230 FFFC1634 343C 0020                   		move.w	#$20,d2
   2231 FFFC1638                             .0001:
   2232 FFFC1638 1035 2000                   		move.b	(a5,d2.w),d0
   2233 FFFC163C 323C 0010                   		move.w	#$10,d1
   2234 FFFC1640 6100 FD78                   		bsr		i2c_wr_cmd
   2235 FFFC1644 4A00                        		tst.b	d0
   2236 FFFC1646 6B22                        		bmi		.rxerr
   2237 FFFC1648 5242                        		add.w	#1,d2
   2238 FFFC164A B47C 005F                   		cmp.w	#$5F,d2
   2239 FFFC164E 66E8                        		bne.s	.0001
   2240 FFFC1650 1035 2000                   		move.b	(a5,d2.w),d0
   2241 FFFC1654 323C 0050                   		move.w	#$50,d1				; STO, wr bit
   2242 FFFC1658 6100 FD60                   		bsr		i2c_wr_cmd
   2243 FFFC165C 4A00                        		tst.b	d0
   2244 FFFC165E 6B0A                        		bmi		.rxerr
   2245 FFFC1660 3D7C 0000 0004              		move.w	#0,I2C_CTRL(a6)		; disable I2C and return 0
   2246 FFFC1666 7000                        		moveq	#0,d0
   2247 FFFC1668 4E75                        		rts
   2248 FFFC166A                             .rxerr:
   2249 FFFC166A 3D7C 0000 0004              		move.w	#0,I2C_CTRL(a6)		; disable I2C and return status
   2250 FFFC1670 4E75                        		rts
                                             
   2252 FFFC1672                             msgRtcReadFail:
   2253 FFFC1672 52 54 43 20 72 65 61 64     		dc.b	"RTC read/write failed.",$0D,$0A,$00
   2254 FFFC167A 2F 77 72 69 74 65 20 66     
   2255 FFFC1682 61 69 6C 65 64 2E 0D 0A     
   2256 FFFC168A 00                          
                                             
                                             		
                                             ; Randomize the screen	
                                             ;		move.l	#VDGBUF,A0
                                             ;		move.l	#%011011111,D0		; light blue
                                             ;		move.l	#640*512,D1
                                             ;clrscr_loop1:
                                             ;		move.l	$0C00(a6),d0			; get a random number
                                             ;		clr.w	$0C04(a6)				; generate next number
                                             ;		move.w	d0,(a0)+				; store it to the screen
                                             ;		sub.l	#1,d1
                                             ;		bne		clrscr_loop1
                                             
   2270 FFFC168B                             msg_start:
   2271 FFFC168B 4E 34 56 20 36 38 6B 20     	dc.b	"N4V 68k System Starting",0
   2272 FFFC1693 53 79 73 74 65 6D 20 53     
   2273 FFFC169B 74 61 72 74 69 6E 67 00     
                                             
                                             
                                             ;------------------------------------------------------------------------------
   2277 FFFC16A3                             font8:
   2278 FFFC16A3 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $00
                                             
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 39
bootrom.asm
   2280 FFFC16AB 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2282 FFFC16B3 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2284 FFFC16BB 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2286 FFFC16C3 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $04
                                             
   2288 FFFC16CB 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2290 FFFC16D3 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2292 FFFC16DB 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2294 FFFC16E3 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $08
                                             
   2296 FFFC16EB 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2298 FFFC16F3 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2300 FFFC16FB 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2302 FFFC1703 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $0C
                                             
   2304 FFFC170B 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2306 FFFC1713 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2308 FFFC171B 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2310 FFFC1723 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $10
                                             
   2312 FFFC172B 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2314 FFFC1733 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2316 FFFC173B 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2318 FFFC1743 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $14
                                             
   2320 FFFC174B 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2322 FFFC1753 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2324 FFFC175B 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2326 FFFC1763 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $18
                                             
   2328 FFFC176B 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2330 FFFC1773 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2332 FFFC177B 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2334 FFFC1783 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $1C
                                             
   2336 FFFC178B 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2338 FFFC1793 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 40
bootrom.asm
   2340 FFFC179B 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   2342 FFFC17A3 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; SPACE
                                             
   2344 FFFC17AB 18 18 18 18 18 00 18 00     	dc.b	$18,$18,$18,$18,$18,$00,$18,$00	; !
                                             
   2346 FFFC17B3 6C 6C 00 00 00 00 00 00     	dc.b	$6C,$6C,$00,$00,$00,$00,$00,$00	; "
                                             
   2348 FFFC17BB 6C 6C FE 6C FE 6C 6C 00     	dc.b	$6C,$6C,$FE,$6C,$FE,$6C,$6C,$00	; #
                                             
   2350 FFFC17C3 18 3E 60 3C 06 7C 18 00     	dc.b	$18,$3E,$60,$3C,$06,$7C,$18,$00	; $
                                             
   2352 FFFC17CB 00 66 AC D8 36 6A CC 00     	dc.b	$00,$66,$AC,$D8,$36,$6A,$CC,$00	; %
                                             
   2354 FFFC17D3 38 6C 68 76 DC CE 7B 00     	dc.b	$38,$6C,$68,$76,$DC,$CE,$7B,$00	; &
                                             
   2356 FFFC17DB 18 18 30 00 00 00 00 00     	dc.b	$18,$18,$30,$00,$00,$00,$00,$00	; '
                                             
   2358 FFFC17E3 0C 18 30 30 30 18 0C 00     	dc.b	$0C,$18,$30,$30,$30,$18,$0C,$00	; (
                                             
   2360 FFFC17EB 30 18 0C 0C 0C 18 30 00     	dc.b	$30,$18,$0C,$0C,$0C,$18,$30,$00	; )
                                             
   2362 FFFC17F3 00 66 3C FF 3C 66 00 00     	dc.b	$00,$66,$3C,$FF,$3C,$66,$00,$00	; *
                                             
   2364 FFFC17FB 00 18 18 7E 18 18 00 00     	dc.b	$00,$18,$18,$7E,$18,$18,$00,$00	; +
                                             
   2366 FFFC1803 00 00 00 00 00 18 18 30     	dc.b	$00,$00,$00,$00,$00,$18,$18,$30	; ,
                                             
   2368 FFFC180B 00 00 00 7E 00 00 00 00     	dc.b	$00,$00,$00,$7E,$00,$00,$00,$00	; -
                                             
   2370 FFFC1813 00 00 00 00 00 18 18 00     	dc.b	$00,$00,$00,$00,$00,$18,$18,$00	; .
                                             
   2372 FFFC181B 03 06 0C 18 30 60 C0 00     	dc.b	$03,$06,$0C,$18,$30,$60,$C0,$00	; /
                                             
   2374 FFFC1823 3C 66 6E 7E 76 66 3C 00     	dc.b	$3C,$66,$6E,$7E,$76,$66,$3C,$00	; 0
                                             
   2376 FFFC182B 18 38 78 18 18 18 18 00     	dc.b	$18,$38,$78,$18,$18,$18,$18,$00	; 1
                                             
   2378 FFFC1833 3C 66 06 0C 18 30 7E 00     	dc.b	$3C,$66,$06,$0C,$18,$30,$7E,$00	; 2
                                             
   2380 FFFC183B 3C 66 06 1C 06 66 3C 00     	dc.b	$3C,$66,$06,$1C,$06,$66,$3C,$00	; 3
                                             
   2382 FFFC1843 1C 3C 6C CC FE 0C 0C 00     	dc.b	$1C,$3C,$6C,$CC,$FE,$0C,$0C,$00	; 4
                                             
   2384 FFFC184B 7E 60 7C 06 06 66 3C 00     	dc.b	$7E,$60,$7C,$06,$06,$66,$3C,$00	; 5
                                             
   2386 FFFC1853 1C 30 60 7C 66 66 3C 00     	dc.b	$1C,$30,$60,$7C,$66,$66,$3C,$00	; 6
                                             
   2388 FFFC185B 7E 06 06 0C 18 18 18 00     	dc.b	$7E,$06,$06,$0C,$18,$18,$18,$00	; 7
                                             
   2390 FFFC1863 3C 66 66 3C 66 66 3C 00     	dc.b	$3C,$66,$66,$3C,$66,$66,$3C,$00	; 8
                                             
   2392 FFFC186B 3C 66 66 3E 06 0C 38 00     	dc.b	$3C,$66,$66,$3E,$06,$0C,$38,$00	; 9
                                             
   2394 FFFC1873 00 18 18 00 00 18 18 00     	dc.b	$00,$18,$18,$00,$00,$18,$18,$00	; :
                                             
   2396 FFFC187B 00 18 18 00 00 18 18 30     	dc.b	$00,$18,$18,$00,$00,$18,$18,$30	; ;
                                             
   2398 FFFC1883 00 06 18 60 18 06 00 00     	dc.b	$00,$06,$18,$60,$18,$06,$00,$00	; <
                                             
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 41
bootrom.asm
   2400 FFFC188B 00 00 7E 00 7E 00 00 00     	dc.b	$00,$00,$7E,$00,$7E,$00,$00,$00	; =
                                             
   2402 FFFC1893 00 60 18 06 18 60 00 00     	dc.b	$00,$60,$18,$06,$18,$60,$00,$00	; >
                                             
   2404 FFFC189B 3C 66 06 0C 18 00 18 00     	dc.b	$3C,$66,$06,$0C,$18,$00,$18,$00	; ?
                                             
   2406 FFFC18A3 7C C6 DE D6 DE C0 78 00     	dc.b	$7C,$C6,$DE,$D6,$DE,$C0,$78,$00	; @
                                             
   2408 FFFC18AB 3C 66 66 7E 66 66 66 00     	dc.b	$3C,$66,$66,$7E,$66,$66,$66,$00	; A
                                             
   2410 FFFC18B3 7C 66 66 7C 66 66 7C 00     	dc.b	$7C,$66,$66,$7C,$66,$66,$7C,$00	; B
                                             
   2412 FFFC18BB 1E 30 60 60 60 30 1E 00     	dc.b	$1E,$30,$60,$60,$60,$30,$1E,$00	; C
                                             
   2414 FFFC18C3 78 6C 66 66 66 6C 78 00     	dc.b	$78,$6C,$66,$66,$66,$6C,$78,$00	; D
                                             
   2416 FFFC18CB 7E 60 60 78 60 60 7E 00     	dc.b	$7E,$60,$60,$78,$60,$60,$7E,$00	; E
                                             
   2418 FFFC18D3 7E 60 60 78 60 60 60 00     	dc.b	$7E,$60,$60,$78,$60,$60,$60,$00	; F
                                             
   2420 FFFC18DB 3C 66 60 6E 66 66 3E 00     	dc.b	$3C,$66,$60,$6E,$66,$66,$3E,$00	; G
                                             
   2422 FFFC18E3 66 66 66 7E 66 66 66 00     	dc.b	$66,$66,$66,$7E,$66,$66,$66,$00	; H
                                             
   2424 FFFC18EB 3C 18 18 18 18 18 3C 00     	dc.b	$3C,$18,$18,$18,$18,$18,$3C,$00	; I
                                             
   2426 FFFC18F3 06 06 06 06 06 66 3C 00     	dc.b	$06,$06,$06,$06,$06,$66,$3C,$00	; J
                                             
   2428 FFFC18FB C6 CC D8 F0 D8 CC C6 00     	dc.b	$C6,$CC,$D8,$F0,$D8,$CC,$C6,$00	; K
                                             
   2430 FFFC1903 60 60 60 60 60 60 7E 00     	dc.b	$60,$60,$60,$60,$60,$60,$7E,$00	; L
                                             
   2432 FFFC190B C6 EE FE D6 C6 C6 C6 00     	dc.b	$C6,$EE,$FE,$D6,$C6,$C6,$C6,$00	; M
                                             
   2434 FFFC1913 C6 E6 F6 DE CE C6 C6 00     	dc.b	$C6,$E6,$F6,$DE,$CE,$C6,$C6,$00	; N
                                             
   2436 FFFC191B 3C 66 66 66 66 66 3C 00     	dc.b	$3C,$66,$66,$66,$66,$66,$3C,$00	; O
                                             
   2438 FFFC1923 7C 66 66 7C 60 60 60 00     	dc.b	$7C,$66,$66,$7C,$60,$60,$60,$00	; P
                                             
   2440 FFFC192B 78 CC CC CC CC DC 7E 00     	dc.b	$78,$CC,$CC,$CC,$CC,$DC,$7E,$00	; Q
                                             
   2442 FFFC1933 7C 66 66 7C 6C 66 66 00     	dc.b	$7C,$66,$66,$7C,$6C,$66,$66,$00	; R
                                             
   2444 FFFC193B 3C 66 70 3C 0E 66 3C 00     	dc.b	$3C,$66,$70,$3C,$0E,$66,$3C,$00	; S
                                             
   2446 FFFC1943 7E 18 18 18 18 18 18 00     	dc.b	$7E,$18,$18,$18,$18,$18,$18,$00	; T
                                             
   2448 FFFC194B 66 66 66 66 66 66 3C 00     	dc.b	$66,$66,$66,$66,$66,$66,$3C,$00	; U
                                             
   2450 FFFC1953 66 66 66 66 3C 3C 18 00     	dc.b	$66,$66,$66,$66,$3C,$3C,$18,$00	; V
                                             
   2452 FFFC195B C6 C6 C6 D6 FE EE C6 00     	dc.b	$C6,$C6,$C6,$D6,$FE,$EE,$C6,$00	; W
                                             
   2454 FFFC1963 C3 66 3C 18 3C 66 C3 00     	dc.b	$C3,$66,$3C,$18,$3C,$66,$C3,$00	; X
                                             
   2456 FFFC196B C3 66 3C 18 18 18 18 00     	dc.b	$C3,$66,$3C,$18,$18,$18,$18,$00	; Y
                                             
   2458 FFFC1973 FE 0C 18 30 60 C0 FE 00     	dc.b	$FE,$0C,$18,$30,$60,$C0,$FE,$00	; Z
                                             
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 42
bootrom.asm
   2460 FFFC197B 3C 30 30 30 30 30 3C 00     	dc.b	$3C,$30,$30,$30,$30,$30,$3C,$00	; [
                                             
   2462 FFFC1983 C0 60 30 18 0C 06 03 00     	dc.b	$C0,$60,$30,$18,$0C,$06,$03,$00	; \
                                             
   2464 FFFC198B 3C 0C 0C 0C 0C 0C 3C 00     	dc.b	$3C,$0C,$0C,$0C,$0C,$0C,$3C,$00	; ]
                                             
   2466 FFFC1993 10 38 6C C6 00 00 00 00     	dc.b	$10,$38,$6C,$C6,$00,$00,$00,$00	; ^
                                             
   2468 FFFC199B 00 00 00 00 00 00 00 FE     	dc.b	$00,$00,$00,$00,$00,$00,$00,$FE	; _
                                             
   2470 FFFC19A3 18 18 0C 00 00 00 00 00     	dc.b	$18,$18,$0C,$00,$00,$00,$00,$00	; `
                                             
   2472 FFFC19AB 00 00 3C 06 3E 66 3E 00     	dc.b	$00,$00,$3C,$06,$3E,$66,$3E,$00	; a
                                             
   2474 FFFC19B3 60 60 7C 66 66 66 7C 00     	dc.b	$60,$60,$7C,$66,$66,$66,$7C,$00	; b
                                             
   2476 FFFC19BB 00 00 3C 60 60 60 3C 00     	dc.b	$00,$00,$3C,$60,$60,$60,$3C,$00	; c
                                             
   2478 FFFC19C3 06 06 3E 66 66 66 3E 00     	dc.b	$06,$06,$3E,$66,$66,$66,$3E,$00	; d
                                             
   2480 FFFC19CB 00 00 3C 66 7E 60 3C 00     	dc.b	$00,$00,$3C,$66,$7E,$60,$3C,$00	; e
                                             
   2482 FFFC19D3 1C 30 7C 30 30 30 30 00     	dc.b	$1C,$30,$7C,$30,$30,$30,$30,$00	; f
                                             
   2484 FFFC19DB 00 00 3E 66 66 3E 06 3C     	dc.b	$00,$00,$3E,$66,$66,$3E,$06,$3C	; g
                                             
   2486 FFFC19E3 60 60 7C 66 66 66 66 00     	dc.b	$60,$60,$7C,$66,$66,$66,$66,$00	; h
                                             
   2488 FFFC19EB 18 00 18 18 18 18 0C 00     	dc.b	$18,$00,$18,$18,$18,$18,$0C,$00	; i
                                             
   2490 FFFC19F3 0C 00 0C 0C 0C 0C 0C 78     	dc.b	$0C,$00,$0C,$0C,$0C,$0C,$0C,$78	; j
                                             
   2492 FFFC19FB 60 60 66 6C 78 6C 66 00     	dc.b	$60,$60,$66,$6C,$78,$6C,$66,$00	; k
                                             
   2494 FFFC1A03 18 18 18 18 18 18 0C 00     	dc.b	$18,$18,$18,$18,$18,$18,$0C,$00	; l
                                             
   2496 FFFC1A0B 00 00 EC FE D6 C6 C6 00     	dc.b	$00,$00,$EC,$FE,$D6,$C6,$C6,$00	; m
                                             
   2498 FFFC1A13 00 00 7C 66 66 66 66 00     	dc.b	$00,$00,$7C,$66,$66,$66,$66,$00	; n
                                             
   2500 FFFC1A1B 00 00 3C 66 66 66 3C 00     	dc.b	$00,$00,$3C,$66,$66,$66,$3C,$00	; o
                                             
   2502 FFFC1A23 00 00 7C 66 66 7C 60 60     	dc.b	$00,$00,$7C,$66,$66,$7C,$60,$60	; p
                                             
   2504 FFFC1A2B 00 00 3E 66 66 3E 06 06     	dc.b	$00,$00,$3E,$66,$66,$3E,$06,$06	; q
                                             
   2506 FFFC1A33 00 00 7C 66 60 60 60 00     	dc.b	$00,$00,$7C,$66,$60,$60,$60,$00	; r
                                             
   2508 FFFC1A3B 00 00 3C 60 3C 06 7C 00     	dc.b	$00,$00,$3C,$60,$3C,$06,$7C,$00	; s
                                             
   2510 FFFC1A43 30 30 7C 30 30 30 1C 00     	dc.b	$30,$30,$7C,$30,$30,$30,$1C,$00	; t
                                             
   2512 FFFC1A4B 00 00 66 66 66 66 3E 00     	dc.b	$00,$00,$66,$66,$66,$66,$3E,$00	; u
                                             
   2514 FFFC1A53 00 00 66 66 66 3C 18 00     	dc.b	$00,$00,$66,$66,$66,$3C,$18,$00	; v
                                             
   2516 FFFC1A5B 00 00 C6 C6 D6 FE 6C 00     	dc.b	$00,$00,$C6,$C6,$D6,$FE,$6C,$00	; w
                                             
   2518 FFFC1A63 00 00 C6 6C 38 6C C6 00     	dc.b	$00,$00,$C6,$6C,$38,$6C,$C6,$00	; x
                                             
Finitron asm68 assembler    version 5.6   Sat Dec 02 16:20:54 2017     Page 43
bootrom.asm
   2520 FFFC1A6B 00 00 66 66 66 3C 18 30     	dc.b	$00,$00,$66,$66,$66,$3C,$18,$30	; y
                                             
   2522 FFFC1A73 00 00 7E 0C 18 30 7E 00     	dc.b	$00,$00,$7E,$0C,$18,$30,$7E,$00	; z
                                             
   2524 FFFC1A7B 0E 18 18 70 18 18 0E 00     	dc.b	$0E,$18,$18,$70,$18,$18,$0E,$00	; {
                                             
   2526 FFFC1A83 18 18 18 18 18 18 18 00     	dc.b	$18,$18,$18,$18,$18,$18,$18,$00	; |
                                             
   2528 FFFC1A8B 70 18 18 0E 18 18 70 00     	dc.b	$70,$18,$18,$0E,$18,$18,$70,$00	; }
                                             
   2530 FFFC1A93 72 9C 00 00 00 00 00 00     	dc.b	$72,$9C,$00,$00,$00,$00,$00,$00	; ~
                                             
   2532 FFFC1A9B FE FE FE FE FE FE FE 00     	dc.b	$FE,$FE,$FE,$FE,$FE,$FE,$FE,$00	; 
                                             
