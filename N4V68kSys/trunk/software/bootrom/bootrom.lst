Finitron asm68 assembler    version 5.6   Sun Nov 26 21:33:32 2017     Page 1
bootrom.asm

                                             ; N4V68kSys bootrom - (C) 2017 Robert Finch, Waterloo
                                             ;
                                             ; This file is part of N4V68kSys
                                             ;
                                             ; how to build:
                                             ; 1. assemble using "asm68 bootrom.asm /G00 /olyebvm"
                                             ; 2. copy bootrom.vh to the correct directory if not already there
                                             ;
                                             ;------------------------------------------------------------------------------
                                             ;
                                             ; system memory map
                                             ;
                                             ;
                                             ; 00000000 +----------------+
                                             ;          | startup sp,pc  | 8 B
                                             ; 00000008 +----------------+
                                             ;          |                |
                                             ;          :  dram memory   : 512 MB
                                             ;          |                |
                                             ; 20000000 +----------------+
                                             ;          |                |
                                             ;          :     unused     :
                                             ;          |                |
                                             ; FF400000 +----------------+
                                             ;          :  scratch ram   : 128k
                                             ; FF420000 +----------------+
                                             ;          :     unused     :
                                             ; FF800000 +----------------+
                                             ;          |                |
                                             ;          : display buffer : 768k x 10 bits wide memory
                                             ;          |                |
                                             ; FF980000 +----------------+
                                             ;          |                |
                                             ;          :     unused     :
                                             ;          |                |
                                             ; FFD00000 +----------------+
                                             ;          |                |
                                             ;          :    I/O area    : 1.0 M
                                             ;          |                |
                                             ; FFE00000 +----------------+
                                             ;          |   VDG regs     |
                                             ; FFE01000 +----------------+
                                             ;          |                |
                                             ;          :     unused     :
                                             ;          |                |
                                             ; FFFC0000 +----------------+
                                             ;          |                |
                                             ;          :    boot rom    :
                                             ;          |                |
                                             ; FFFFFFFF +----------------+
                                             ;
                                             VDGBUF		EQU	$FF800000
                                             VDGREG		EQU	$FFE00000
                                             VirtScreen	EQU	$1FFF0000
                                             leds		EQU	$FFDC0600
                                             rand		EQU	$FFDC0C00
                                             
                                             fgcolor		EQU	$FF400000
                                             bkcolor		EQU	$FF400002
Finitron asm68 assembler    version 5.6   Sun Nov 26 21:33:32 2017     Page 2
bootrom.asm
                                             fntsz		EQU	$FF400004
                                             
                                             	org		$FFFC0000
                                             
                                             ;------------------------------------------------------------------------------
                                             
     66 FFFC0000 FF41FFFC                    	dc.l	$FF41FFFC	; initial SSP
     67 FFFC0004 FFFC0010                    	dc.l	Start		; initial PC
                                             	
                                             ;------------------------------------------------------------------------------
     70 FFFC0008                             fpga_version:
     71 FFFC0008 41 41 30 30 30 30 30 30     	dc.b	"AA000000"	; FPGA core version - 8 ASCII characters
                                             
                                             
                                             ;------------------------------------------------------------------------------
     75 FFFC0010                             	Start:
                                             ;------------------------------------------------------------------------------
     77 FFFC0010 33FC A1A1 FFDC 0600         		move.w	#$A1A1,leds		; diagnostics
                                             
                                             		; SIM croaked because the upper half of D1 was undefined. This caused
                                             		; problems with a dbra instruction. So the contents of all the registers
                                             		; are defined at startup. This is only needed for SIM.
     82 FFFC0018 7000                        		moveq	#0,D0
     83 FFFC001A 7200                        		moveq	#0,D1				; for SIM
     84 FFFC001C 7400                        		moveq	#0,D2
     85 FFFC001E 7600                        		moveq	#0,D3
     86 FFFC0020 7800                        		moveq	#0,D4
     87 FFFC0022 7A00                        		moveq	#0,D5
     88 FFFC0024 7C00                        		moveq	#0,D6
     89 FFFC0026 7E00                        		moveq	#0,D7
     90 FFFC0028 4288                        		clr.l	A0
     91 FFFC002A 4289                        		clr.l	A1
     92 FFFC002C 428A                        		clr.l	A2
     93 FFFC002E 428B                        		clr.l	A3
     94 FFFC0030 428C                        		clr.l	A4
     95 FFFC0032 428D                        		clr.l	A5
     96 FFFC0034 428E                        		clr.l	A6
     97 FFFC0036 4E67                        		move.l	A7,usp
                                             
     99 FFFC0038 4DF9 FFDC 0000              		lea	$FFDC0000,A6	; I/O base
                                             
                                             		; Initialize random number generator
                                             
    103 FFFC003E 426E 0C06                   		clr.w	$0C06(a6)				; select stream #0
    104 FFFC0042 2D7C 8888 8888 0C08         		move.l	#$88888888,$0C08(a6)	; set initial m_z
    105 FFFC004A 2D7C 0123 4567 0C0C         		move.l	#$01234567,$0C0C(a6)	; set initial m_w
                                             
    107 FFFC0052 6100 0048                   		bsr		BootClearScreen		
    108 FFFC0056 33FC A2A2 FFDC 0600         		move.w	#$A2A2,leds			; diagnostics
                                             
    110 FFFC005E 6100 0050                   		bsr		BootCopyFont
    111 FFFC0062 33FC A3A3 FFDC 0600         		move.w	#$A3A3,leds			; diagnostics
                                             
    113 FFFC006A 33FC 01FF FF40 0000         		move.w	#%111111111,fgcolor	; set text colors
    114 FFFC0072 33FC 0003 FF40 0002         		move.w	#%000000011,bkcolor
                                             
                                             		; Write startup message to screen
                                             
    118 FFFC007A 41F9 FFFC 0260              		lea		msg_start,a0
    119 FFFC0080 7200                        		moveq	#0,d1					; xpos
Finitron asm68 assembler    version 5.6   Sun Nov 26 21:33:32 2017     Page 3
bootrom.asm
    120 FFFC0082 7400                        		moveq	#0,d2					; ypos
    121 FFFC0084 6100 008E                   		bsr		DispStringAt
    122 FFFC0088 33FC A4A4 FFDC 0600         		move.w	#$A4A4,leds			; diagnostics
                                             
    124 FFFC0090 47F9 FFFC 009A              		lea		j1,a3
    125 FFFC0096 6000 00E8                   		bra		ramtest
    126 FFFC009A                             j1:
    127 FFFC009A 60FE                        		bra		j1
                                             
                                             ;------------------------------------------------------------------------------
                                             ; clear screen	
                                             ;
                                             ; Trashes:
                                             ;	a0,d0,d1
                                             ;------------------------------------------------------------------------------
                                             
    136 FFFC009C                             BootClearScreen:
    137 FFFC009C 207C FF80 0000              		move.l	#VDGBUF,A0
    138 FFFC00A2 7003                        		moveq	#%000000011,D0			; dark blue
    139 FFFC00A4 223C 0005 0000              		move.l	#640*512,D1				; number of pixels
    140 FFFC00AA                             .loop1:
    141 FFFC00AA 30C0                        		move.w	d0,(a0)+				; store it to the screen
    142 FFFC00AC 5381                        		sub.l	#1,d1					; can't use dbra here
                                             		bne.s	d1,.loop1
    144 FFFC00AE 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; copy font to VDG ram
                                             ;
                                             ; Trashes:
                                             ;	a0,a1,d0,d1
                                             ;------------------------------------------------------------------------------
                                             
    153 FFFC00B0                             BootCopyFont:
    154 FFFC00B0 33FC 0707 FF40 0004         		move.w	#$0707,fntsz		; set font size
    155 FFFC00B8 41F9 FFFC 0278              		lea		font8,a0
    156 FFFC00BE 223C 0000 1000              		move.l	#8*512,d1			; 512 chars * 8 bytes per char
    157 FFFC00C4 227C FF97 0000              		move.l	#$FF970000,a1		; font table address
    158 FFFC00CA 7000                        		moveq	#0,d0				; zero out high order bits
    159 FFFC00CC                             cpyfnt:
    160 FFFC00CC 1018                        		move.b	(a0)+,d0			; get a byte
    161 FFFC00CE 32C0                        		move.w	d0,(a1)+			; store in font table
    162 FFFC00D0 51C9 FFFA                   		dbra	d1,cpyfnt
    163 FFFC00D4 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Parameters:
                                             ;	d0.w		character to display
                                             ;	d1.w		x position
                                             ;	d2.w		y position
                                             ; Trashes:
                                             ;	a6
                                             ;------------------------------------------------------------------------------
                                             
    174 FFFC00D6                             DispCharAt:
    175 FFFC00D6 2C7C FFE0 0000              		move.l	#VDGREG,a6
    176 FFFC00DC 4840                        		swap	d0						; save off d0 low
    177 FFFC00DE                             .0001:									; wait for character que to empty
    178 FFFC00DE 302E 042C                   		move.w	$42C(a6),d0			; read character queue index into d0
    179 FFFC00E2 B07C 001C                   		cmp.w	#28,d0					; allow up 28 entries to be in progress
Finitron asm68 assembler    version 5.6   Sun Nov 26 21:33:32 2017     Page 4
bootrom.asm
    180 FFFC00E6 64F6                        		bhs.s	.0001					; branch if too many chars queued
    181 FFFC00E8 4840                        		swap	d0						; get back d0 low
    182 FFFC00EA 3D40 0420                   		move.w	d0,$420(a6)			; set char code
    183 FFFC00EE 3D79 FF40 0000 0422         		move.w	fgcolor,$422(a6)		; set fg color
    184 FFFC00F6 3D79 FF40 0002 0424         		move.w	bkcolor,$424(a6)		; set bk color
    185 FFFC00FE 3D41 0426                   		move.w	d1,$426(a6)			; set x pos
    186 FFFC0102 3D42 0428                   		move.w	d2,$428(a6)			; set y pos
    187 FFFC0106 3D7C 0707 042A              		move.w	#$0707,$42A(a6)		; set font x,y extent
    188 FFFC010C 3D7C 0000 042E              		move.w	#0,$42E(a6)			; pulse character queue write signal
    189 FFFC0112 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Parameters:
                                             ;	a0			pointer to string
                                             ;	d1.w		x position
                                             ;	d2.w		y position
                                             ; Returns:
                                             ;	a0			points to byte after NULL character
                                             ;	d1.w		updated x position
                                             ; Trashes:
                                             ;	d0,a6
                                             ;------------------------------------------------------------------------------
                                             
    203 FFFC0114                             DispStringAt:
    204 FFFC0114                             .0003:
    205 FFFC0114 7000                        		moveq	#0,d0					; zero out high order bits
    206 FFFC0116 1018                        		move.b	(a0)+,d0				; get character from string into d0
    207 FFFC0118 6708                        		beq.s	.0002					; end of string ?
    208 FFFC011A 6100 FFBA                   		bsr		DispCharAt
    209 FFFC011E 5041                        		add.w	#8,d1					; increment xpos
    210 FFFC0120 60F2                        		bra.s	.0003
    211 FFFC0122                             .0002:
    212 FFFC0122 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ;------------------------------------------------------------------------------
                                             ;
    217 FFFC0124                             DisplayHexNumber:
    218 FFFC0124 33FC A6A6 FFDC 0600         		move.w	#$A6A6,leds		; diagnostics
    219 FFFC012C 2C7C FFE0 0000              		move.l	#VDGREG,a6
    220 FFFC0132 343C 0007                   		move.w	#7,d2		; number-1 of digits to display
    221 FFFC0136                             disphnum1:
    222 FFFC0136 1001                        		move.b	d1,d0		; get digit into d0.b
    223 FFFC0138 0240 000F                   		andi.w	#$0f,d0
    224 FFFC013C 0C40 0009                   		cmpi.w	#$09,d0
    225 FFFC0140 6302                        		bls.s	disphnum2
    226 FFFC0142 5E40                        		addi.w	#7,d0
    227 FFFC0144                             disphnum2:
    228 FFFC0144 0640 0030                   		addi.w	#$30,d0	; convert to display char
    229 FFFC0148 3602                        		move.w	d2,d3		; char count into d3
    230 FFFC014A E743                        		asl.w	#3,d3		; scale * 8
    231 FFFC014C                             disphnum3:
    232 FFFC014C 382E 042A                   		move.w	$42A(a6),d4			; read character queue index into d4
    233 FFFC0150 B87C 001C                   		cmp.w	#28,d4					; allow up 28 entries to be in progress
    234 FFFC0154 64F6                        		bhs.s	disphnum3				; branch if too many chars queued
    235 FFFC0156 48C0                        		ext.b	d0						; zero out high order bits
    236 FFFC0158 3D40 0420                   		move.w	d0,$420(a6)			; set char code
    237 FFFC015C 3D7C 01FF 0422              		move.w	#%111111111,$422(a6)	; set fg color
    238 FFFC0162 3D7C 0003 0424              		move.w	#%000000011,$424(a6)	; set bk color
    239 FFFC0168 3D43 0426                   		move.w	d3,$426(a6)			; set x pos
Finitron asm68 assembler    version 5.6   Sun Nov 26 21:33:32 2017     Page 5
bootrom.asm
    240 FFFC016C 3D7C 0008 0428              		move.w	#8,$428(a6)			; set y pos
    241 FFFC0172 3D7C 0000 042E              		move.w	#0,$42E(a6)			; pulse character queue write signal
    242 FFFC0178 E899                        		ror.l	#4,d1					; rot to next digit
    243 FFFC017A 57CA FFBA                   		dbeq	d2,disphnum1
    244 FFFC017E 4ED5                        		jmp		(a5)
                                             
                                             ;===============================================================================
                                             ;    Perform ram test. (Uses checkerboard testing).
                                             ; 
                                             ;    Return address must be stored in a3 since the stack cannot be used (it
                                             ; would get overwritten in test). Note this routine uses no ram at all.
                                             ;===============================================================================
    252 FFFC0180                             ramtest:
    253 FFFC0180 33FC A5A5 FFDC 0600         		move.w	#$A5A5,leds		; diagnostics
    254 FFFC0188 207C 0000 0008                      movea.l #8,a0
    255 FFFC018E 203C AAAA 5555                      move.l #$aaaa5555,d0
                                             ;-----------------------------------------------------------
                                             ;   Write checkerboard pattern to ram then read it back to
                                             ; find the highest usable ram address (maybe). This address
                                             ; must be lower than the start of the rom (0xe00000).
                                             ;-----------------------------------------------------------
    261 FFFC0194                             ramtest1:
    262 FFFC0194 20C0                                move.l 	d0,(a0)+
    263 FFFC0196 2208                                move.l	a0,d1
    264 FFFC0198 4A41                                tst.w	d1
    265 FFFC019A 6608                                bne.s	rmtst1
    266 FFFC019C 4BF9 FFFC 01A4                      lea		rmtst1,a5
    267 FFFC01A2 6080                                bra		DisplayHexNumber
    268 FFFC01A4                             rmtst1:
    269 FFFC01A4 33FC A9A9 FFDC 0600         		move.w	#$A9A9,leds		; diagnostics
    270 FFFC01AC B1FC 1FFF FFFC                      cmpa.l 	#$1FFFFFFC,a0
    271 FFFC01B2 66E0                                bne.s 	ramtest1
                                             ;------------------------------------------------------
                                             ;   Save maximum useable address for later comparison.
                                             ;------------------------------------------------------
    275 FFFC01B4                             ramtest6:
    276 FFFC01B4 33FC A7A7 FFDC 0600         		move.w	#$A7A7,leds		; diagnostics
    277 FFFC01BC 2448                                movea.l a0,a2
    278 FFFC01BE 207C 0000 0008                      movea.l #8,a0
                                             ;--------------------------------------------
                                             ;   Read back checkerboard pattern from ram.
                                             ;--------------------------------------------
    282 FFFC01C4                             ramtest2:
    283 FFFC01C4 2A18                                move.l  (a0)+,d5
    284 FFFC01C6 B5C8                                cmpa.l	a0,a2
    285 FFFC01C8 671A                                beq.s	ramtest3
    286 FFFC01CA 2208                                move.l	a0,d1
    287 FFFC01CC 4A41                                tst.w	d1
    288 FFFC01CE 660A                                bne.s	rmtst2
    289 FFFC01D0 4BF9 FFFC 01DA                      lea		rmtst2,a5
    290 FFFC01D6 6000 FF4C                           bra		DisplayHexNumber
    291 FFFC01DA                             rmtst2:
    292 FFFC01DA 0C85 AAAA 5555                      cmpi.l 	#$aaaa5555,d5
    293 FFFC01E0 67E2                                beq.s 	ramtest2
    294 FFFC01E2 6678                                bne.s 	ramtest7
                                             ;---------------------------------------------------
                                             ;   The following section does the same test except
                                             ; with the checkerboard order switched around.
                                             ;---------------------------------------------------
    299 FFFC01E4                             ramtest3:                
Finitron asm68 assembler    version 5.6   Sun Nov 26 21:33:32 2017     Page 6
bootrom.asm
    300 FFFC01E4 33FC A8A8 FFDC 0600         		move.w	#$A8A8,leds		; diagnostics
    301 FFFC01EC 207C 0000 0008                      movea.l #8,a0
    302 FFFC01F2 203C 5555 AAAA                      move.l 	#$5555aaaa,d0
    303 FFFC01F8                             ramtest4:
    304 FFFC01F8 20C0                                move.l 	d0,(a0)+
    305 FFFC01FA 2208                                move.l 	a0,d1
    306 FFFC01FC 4A41                                tst.w	d1
    307 FFFC01FE 660A                                bne.s   rmtst3
    308 FFFC0200 4BF9 FFFC 020A                      lea		rmtst3,a5
    309 FFFC0206 6000 FF1C                           bra		DisplayHexNumber
    310 FFFC020A                             rmtst3:
    311 FFFC020A B1FC 1FFF FFFC                      cmpa.l 	#$1FFFFFFC,a0
    312 FFFC0210 66E6                                bne.s 	ramtest4
    313 FFFC0212                             ramtest8:
    314 FFFC0212 2448                                movea.l a0,a2
    315 FFFC0214 207C 0000 0008                      movea.l #8,a0
    316 FFFC021A                             ramtest5:
    317 FFFC021A 2018                                move.l 	(a0)+,d0
    318 FFFC021C B5C8                                cmpa.l	a0,a2
    319 FFFC021E 671A                                beq.s	rmtst5
    320 FFFC0220 2208                                move.l 	a0,d1
    321 FFFC0222 4A41                                tst.w	d1
    322 FFFC0224 660A                                bne.s	rmtst4
    323 FFFC0226 4BF9 0000 0000                      lea		tmtst4,a5
    324 FFFC022C 6000 FEF6                           bra		DisplayHexNumber
    325 FFFC0230                             rmtst4:
    326 FFFC0230 0C80 5555 AAAA                      cmpi.l 	#$5555aaaa,d0
    327 FFFC0236 67E2                                beq.s 	ramtest5
    328 FFFC0238 6622                                bne.s 	ramtest7
                                             ;---------------------------------------------------
                                             ;   Save last ram address in end of memory pointer.
                                             ;---------------------------------------------------
    332 FFFC023A                             rmtst5:
    333 FFFC023A 23C8 0000 0000                      move.l a0,memend
                                             ;-----------------------------------
                                             ;   Create very first memory block.
                                             ;-----------------------------------
    337 FFFC0240 91FC 0000 000C                      suba.l 	#12,a0
    338 FFFC0246 21C8 0404                           move.l 	a0,$0404
    339 FFFC024A 21FC 4652 4545 0400                 move.l 	#$46524545,$0400
    340 FFFC0252 21FC 0000 0408 0408                 move.l 	#$408,$408			; point back-link to self
    341 FFFC025A 4ED3                                jmp 	(a3)
                                             ;----------------------------------
                                             ; Error in ram - go no farther.
                                             ;----------------------------------
    345 FFFC025C                             ramtest7:
    346 FFFC025C 4ED3                        		jmp 	(a3)
    347 FFFC025E 60FC                                bra.s 	ramtest7
                                             
                                             
                                             ; Randomize the screen	
                                             ;		move.l	#VDGBUF,A0
                                             ;		move.l	#%011011111,D0		; light blue
                                             ;		move.l	#640*512,D1
                                             ;clrscr_loop1:
                                             ;		move.l	$0C00(a6),d0			; get a random number
                                             ;		clr.w	$0C04(a6)				; generate next number
                                             ;		move.w	d0,(a0)+				; store it to the screen
                                             ;		sub.l	#1,d1
                                             ;		bne		clrscr_loop1
Finitron asm68 assembler    version 5.6   Sun Nov 26 21:33:32 2017     Page 7
bootrom.asm
                                             
    361 FFFC0260                             msg_start:
    362 FFFC0260 4E 34 56 20 36 38 6B 20     	dc.b	"N4V 68k System Starting",0
    363 FFFC0268 53 79 73 74 65 6D 20 53     
    364 FFFC0270 74 61 72 74 69 6E 67 00     
                                             
                                             
                                             ;------------------------------------------------------------------------------
    368 FFFC0278                             font8:
    369 FFFC0278 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $00
                                             
    371 FFFC0280 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
    373 FFFC0288 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
    375 FFFC0290 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
    377 FFFC0298 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $04
                                             
    379 FFFC02A0 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
    381 FFFC02A8 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
    383 FFFC02B0 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
    385 FFFC02B8 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $08
                                             
    387 FFFC02C0 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
    389 FFFC02C8 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
    391 FFFC02D0 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
    393 FFFC02D8 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $0C
                                             
    395 FFFC02E0 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
    397 FFFC02E8 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
    399 FFFC02F0 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
    401 FFFC02F8 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $10
                                             
    403 FFFC0300 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
    405 FFFC0308 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
    407 FFFC0310 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
    409 FFFC0318 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $14
                                             
    411 FFFC0320 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
    413 FFFC0328 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
    415 FFFC0330 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
    417 FFFC0338 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $18
                                             
    419 FFFC0340 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
Finitron asm68 assembler    version 5.6   Sun Nov 26 21:33:32 2017     Page 8
bootrom.asm
                                             
    421 FFFC0348 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
    423 FFFC0350 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
    425 FFFC0358 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $1C
                                             
    427 FFFC0360 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
    429 FFFC0368 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
    431 FFFC0370 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
    433 FFFC0378 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; SPACE
                                             
    435 FFFC0380 18 18 18 18 18 00 18 00     	dc.b	$18,$18,$18,$18,$18,$00,$18,$00	; !
                                             
    437 FFFC0388 6C 6C 00 00 00 00 00 00     	dc.b	$6C,$6C,$00,$00,$00,$00,$00,$00	; "
                                             
    439 FFFC0390 6C 6C FE 6C FE 6C 6C 00     	dc.b	$6C,$6C,$FE,$6C,$FE,$6C,$6C,$00	; #
                                             
    441 FFFC0398 18 3E 60 3C 06 7C 18 00     	dc.b	$18,$3E,$60,$3C,$06,$7C,$18,$00	; $
                                             
    443 FFFC03A0 00 66 AC D8 36 6A CC 00     	dc.b	$00,$66,$AC,$D8,$36,$6A,$CC,$00	; %
                                             
    445 FFFC03A8 38 6C 68 76 DC CE 7B 00     	dc.b	$38,$6C,$68,$76,$DC,$CE,$7B,$00	; &
                                             
    447 FFFC03B0 18 18 30 00 00 00 00 00     	dc.b	$18,$18,$30,$00,$00,$00,$00,$00	; '
                                             
    449 FFFC03B8 0C 18 30 30 30 18 0C 00     	dc.b	$0C,$18,$30,$30,$30,$18,$0C,$00	; (
                                             
    451 FFFC03C0 30 18 0C 0C 0C 18 30 00     	dc.b	$30,$18,$0C,$0C,$0C,$18,$30,$00	; )
                                             
    453 FFFC03C8 00 66 3C FF 3C 66 00 00     	dc.b	$00,$66,$3C,$FF,$3C,$66,$00,$00	; *
                                             
    455 FFFC03D0 00 18 18 7E 18 18 00 00     	dc.b	$00,$18,$18,$7E,$18,$18,$00,$00	; +
                                             
    457 FFFC03D8 00 00 00 00 00 18 18 30     	dc.b	$00,$00,$00,$00,$00,$18,$18,$30	; ,
                                             
    459 FFFC03E0 00 00 00 7E 00 00 00 00     	dc.b	$00,$00,$00,$7E,$00,$00,$00,$00	; -
                                             
    461 FFFC03E8 00 00 00 00 00 18 18 00     	dc.b	$00,$00,$00,$00,$00,$18,$18,$00	; .
                                             
    463 FFFC03F0 03 06 0C 18 30 60 C0 00     	dc.b	$03,$06,$0C,$18,$30,$60,$C0,$00	; /
                                             
    465 FFFC03F8 3C 66 6E 7E 76 66 3C 00     	dc.b	$3C,$66,$6E,$7E,$76,$66,$3C,$00	; 0
                                             
    467 FFFC0400 18 38 78 18 18 18 18 00     	dc.b	$18,$38,$78,$18,$18,$18,$18,$00	; 1
                                             
    469 FFFC0408 3C 66 06 0C 18 30 7E 00     	dc.b	$3C,$66,$06,$0C,$18,$30,$7E,$00	; 2
                                             
    471 FFFC0410 3C 66 06 1C 06 66 3C 00     	dc.b	$3C,$66,$06,$1C,$06,$66,$3C,$00	; 3
                                             
    473 FFFC0418 1C 3C 6C CC FE 0C 0C 00     	dc.b	$1C,$3C,$6C,$CC,$FE,$0C,$0C,$00	; 4
                                             
    475 FFFC0420 7E 60 7C 06 06 66 3C 00     	dc.b	$7E,$60,$7C,$06,$06,$66,$3C,$00	; 5
                                             
    477 FFFC0428 1C 30 60 7C 66 66 3C 00     	dc.b	$1C,$30,$60,$7C,$66,$66,$3C,$00	; 6
                                             
    479 FFFC0430 7E 06 06 0C 18 18 18 00     	dc.b	$7E,$06,$06,$0C,$18,$18,$18,$00	; 7
Finitron asm68 assembler    version 5.6   Sun Nov 26 21:33:32 2017     Page 9
bootrom.asm
                                             
    481 FFFC0438 3C 66 66 3C 66 66 3C 00     	dc.b	$3C,$66,$66,$3C,$66,$66,$3C,$00	; 8
                                             
    483 FFFC0440 3C 66 66 3E 06 0C 38 00     	dc.b	$3C,$66,$66,$3E,$06,$0C,$38,$00	; 9
                                             
    485 FFFC0448 00 18 18 00 00 18 18 00     	dc.b	$00,$18,$18,$00,$00,$18,$18,$00	; :
                                             
    487 FFFC0450 00 18 18 00 00 18 18 30     	dc.b	$00,$18,$18,$00,$00,$18,$18,$30	; ;
                                             
    489 FFFC0458 00 06 18 60 18 06 00 00     	dc.b	$00,$06,$18,$60,$18,$06,$00,$00	; <
                                             
    491 FFFC0460 00 00 7E 00 7E 00 00 00     	dc.b	$00,$00,$7E,$00,$7E,$00,$00,$00	; =
                                             
    493 FFFC0468 00 60 18 06 18 60 00 00     	dc.b	$00,$60,$18,$06,$18,$60,$00,$00	; >
                                             
    495 FFFC0470 3C 66 06 0C 18 00 18 00     	dc.b	$3C,$66,$06,$0C,$18,$00,$18,$00	; ?
                                             
    497 FFFC0478 7C C6 DE D6 DE C0 78 00     	dc.b	$7C,$C6,$DE,$D6,$DE,$C0,$78,$00	; @
                                             
    499 FFFC0480 3C 66 66 7E 66 66 66 00     	dc.b	$3C,$66,$66,$7E,$66,$66,$66,$00	; A
                                             
    501 FFFC0488 7C 66 66 7C 66 66 7C 00     	dc.b	$7C,$66,$66,$7C,$66,$66,$7C,$00	; B
                                             
    503 FFFC0490 1E 30 60 60 60 30 1E 00     	dc.b	$1E,$30,$60,$60,$60,$30,$1E,$00	; C
                                             
    505 FFFC0498 78 6C 66 66 66 6C 78 00     	dc.b	$78,$6C,$66,$66,$66,$6C,$78,$00	; D
                                             
    507 FFFC04A0 7E 60 60 78 60 60 7E 00     	dc.b	$7E,$60,$60,$78,$60,$60,$7E,$00	; E
                                             
    509 FFFC04A8 7E 60 60 78 60 60 60 00     	dc.b	$7E,$60,$60,$78,$60,$60,$60,$00	; F
                                             
    511 FFFC04B0 3C 66 60 6E 66 66 3E 00     	dc.b	$3C,$66,$60,$6E,$66,$66,$3E,$00	; G
                                             
    513 FFFC04B8 66 66 66 7E 66 66 66 00     	dc.b	$66,$66,$66,$7E,$66,$66,$66,$00	; H
                                             
    515 FFFC04C0 3C 18 18 18 18 18 3C 00     	dc.b	$3C,$18,$18,$18,$18,$18,$3C,$00	; I
                                             
    517 FFFC04C8 06 06 06 06 06 66 3C 00     	dc.b	$06,$06,$06,$06,$06,$66,$3C,$00	; J
                                             
    519 FFFC04D0 C6 CC D8 F0 D8 CC C6 00     	dc.b	$C6,$CC,$D8,$F0,$D8,$CC,$C6,$00	; K
                                             
    521 FFFC04D8 60 60 60 60 60 60 7E 00     	dc.b	$60,$60,$60,$60,$60,$60,$7E,$00	; L
                                             
    523 FFFC04E0 C6 EE FE D6 C6 C6 C6 00     	dc.b	$C6,$EE,$FE,$D6,$C6,$C6,$C6,$00	; M
                                             
    525 FFFC04E8 C6 E6 F6 DE CE C6 C6 00     	dc.b	$C6,$E6,$F6,$DE,$CE,$C6,$C6,$00	; N
                                             
    527 FFFC04F0 3C 66 66 66 66 66 3C 00     	dc.b	$3C,$66,$66,$66,$66,$66,$3C,$00	; O
                                             
    529 FFFC04F8 7C 66 66 7C 60 60 60 00     	dc.b	$7C,$66,$66,$7C,$60,$60,$60,$00	; P
                                             
    531 FFFC0500 78 CC CC CC CC DC 7E 00     	dc.b	$78,$CC,$CC,$CC,$CC,$DC,$7E,$00	; Q
                                             
    533 FFFC0508 7C 66 66 7C 6C 66 66 00     	dc.b	$7C,$66,$66,$7C,$6C,$66,$66,$00	; R
                                             
    535 FFFC0510 3C 66 70 3C 0E 66 3C 00     	dc.b	$3C,$66,$70,$3C,$0E,$66,$3C,$00	; S
                                             
    537 FFFC0518 7E 18 18 18 18 18 18 00     	dc.b	$7E,$18,$18,$18,$18,$18,$18,$00	; T
                                             
    539 FFFC0520 66 66 66 66 66 66 3C 00     	dc.b	$66,$66,$66,$66,$66,$66,$3C,$00	; U
Finitron asm68 assembler    version 5.6   Sun Nov 26 21:33:32 2017     Page 10
bootrom.asm
                                             
    541 FFFC0528 66 66 66 66 3C 3C 18 00     	dc.b	$66,$66,$66,$66,$3C,$3C,$18,$00	; V
                                             
    543 FFFC0530 C6 C6 C6 D6 FE EE C6 00     	dc.b	$C6,$C6,$C6,$D6,$FE,$EE,$C6,$00	; W
                                             
    545 FFFC0538 C3 66 3C 18 3C 66 C3 00     	dc.b	$C3,$66,$3C,$18,$3C,$66,$C3,$00	; X
                                             
    547 FFFC0540 C3 66 3C 18 18 18 18 00     	dc.b	$C3,$66,$3C,$18,$18,$18,$18,$00	; Y
                                             
    549 FFFC0548 FE 0C 18 30 60 C0 FE 00     	dc.b	$FE,$0C,$18,$30,$60,$C0,$FE,$00	; Z
                                             
    551 FFFC0550 3C 30 30 30 30 30 3C 00     	dc.b	$3C,$30,$30,$30,$30,$30,$3C,$00	; [
                                             
    553 FFFC0558 C0 60 30 18 0C 06 03 00     	dc.b	$C0,$60,$30,$18,$0C,$06,$03,$00	; \
                                             
    555 FFFC0560 3C 0C 0C 0C 0C 0C 3C 00     	dc.b	$3C,$0C,$0C,$0C,$0C,$0C,$3C,$00	; ]
                                             
    557 FFFC0568 10 38 6C C6 00 00 00 00     	dc.b	$10,$38,$6C,$C6,$00,$00,$00,$00	; ^
                                             
    559 FFFC0570 00 00 00 00 00 00 00 FE     	dc.b	$00,$00,$00,$00,$00,$00,$00,$FE	; _
                                             
    561 FFFC0578 18 18 0C 00 00 00 00 00     	dc.b	$18,$18,$0C,$00,$00,$00,$00,$00	; `
                                             
    563 FFFC0580 00 00 3C 06 3E 66 3E 00     	dc.b	$00,$00,$3C,$06,$3E,$66,$3E,$00	; a
                                             
    565 FFFC0588 60 60 7C 66 66 66 7C 00     	dc.b	$60,$60,$7C,$66,$66,$66,$7C,$00	; b
                                             
    567 FFFC0590 00 00 3C 60 60 60 3C 00     	dc.b	$00,$00,$3C,$60,$60,$60,$3C,$00	; c
                                             
    569 FFFC0598 06 06 3E 66 66 66 3E 00     	dc.b	$06,$06,$3E,$66,$66,$66,$3E,$00	; d
                                             
    571 FFFC05A0 00 00 3C 66 7E 60 3C 00     	dc.b	$00,$00,$3C,$66,$7E,$60,$3C,$00	; e
                                             
    573 FFFC05A8 1C 30 7C 30 30 30 30 00     	dc.b	$1C,$30,$7C,$30,$30,$30,$30,$00	; f
                                             
    575 FFFC05B0 00 00 3E 66 66 3E 06 3C     	dc.b	$00,$00,$3E,$66,$66,$3E,$06,$3C	; g
                                             
    577 FFFC05B8 60 60 7C 66 66 66 66 00     	dc.b	$60,$60,$7C,$66,$66,$66,$66,$00	; h
                                             
    579 FFFC05C0 18 00 18 18 18 18 0C 00     	dc.b	$18,$00,$18,$18,$18,$18,$0C,$00	; i
                                             
    581 FFFC05C8 0C 00 0C 0C 0C 0C 0C 78     	dc.b	$0C,$00,$0C,$0C,$0C,$0C,$0C,$78	; j
                                             
    583 FFFC05D0 60 60 66 6C 78 6C 66 00     	dc.b	$60,$60,$66,$6C,$78,$6C,$66,$00	; k
                                             
    585 FFFC05D8 18 18 18 18 18 18 0C 00     	dc.b	$18,$18,$18,$18,$18,$18,$0C,$00	; l
                                             
    587 FFFC05E0 00 00 EC FE D6 C6 C6 00     	dc.b	$00,$00,$EC,$FE,$D6,$C6,$C6,$00	; m
                                             
    589 FFFC05E8 00 00 7C 66 66 66 66 00     	dc.b	$00,$00,$7C,$66,$66,$66,$66,$00	; n
                                             
    591 FFFC05F0 00 00 3C 66 66 66 3C 00     	dc.b	$00,$00,$3C,$66,$66,$66,$3C,$00	; o
                                             
    593 FFFC05F8 00 00 7C 66 66 7C 60 60     	dc.b	$00,$00,$7C,$66,$66,$7C,$60,$60	; p
                                             
    595 FFFC0600 00 00 3E 66 66 3E 06 06     	dc.b	$00,$00,$3E,$66,$66,$3E,$06,$06	; q
                                             
    597 FFFC0608 00 00 7C 66 60 60 60 00     	dc.b	$00,$00,$7C,$66,$60,$60,$60,$00	; r
                                             
    599 FFFC0610 00 00 3C 60 3C 06 7C 00     	dc.b	$00,$00,$3C,$60,$3C,$06,$7C,$00	; s
Finitron asm68 assembler    version 5.6   Sun Nov 26 21:33:32 2017     Page 11
bootrom.asm
                                             
    601 FFFC0618 30 30 7C 30 30 30 1C 00     	dc.b	$30,$30,$7C,$30,$30,$30,$1C,$00	; t
                                             
    603 FFFC0620 00 00 66 66 66 66 3E 00     	dc.b	$00,$00,$66,$66,$66,$66,$3E,$00	; u
                                             
    605 FFFC0628 00 00 66 66 66 3C 18 00     	dc.b	$00,$00,$66,$66,$66,$3C,$18,$00	; v
                                             
    607 FFFC0630 00 00 C6 C6 D6 FE 6C 00     	dc.b	$00,$00,$C6,$C6,$D6,$FE,$6C,$00	; w
                                             
    609 FFFC0638 00 00 C6 6C 38 6C C6 00     	dc.b	$00,$00,$C6,$6C,$38,$6C,$C6,$00	; x
                                             
    611 FFFC0640 00 00 66 66 66 3C 18 30     	dc.b	$00,$00,$66,$66,$66,$3C,$18,$30	; y
                                             
    613 FFFC0648 00 00 7E 0C 18 30 7E 00     	dc.b	$00,$00,$7E,$0C,$18,$30,$7E,$00	; z
                                             
    615 FFFC0650 0E 18 18 70 18 18 0E 00     	dc.b	$0E,$18,$18,$70,$18,$18,$0E,$00	; {
                                             
    617 FFFC0658 18 18 18 18 18 18 18 00     	dc.b	$18,$18,$18,$18,$18,$18,$18,$00	; |
                                             
    619 FFFC0660 70 18 18 0E 18 18 70 00     	dc.b	$70,$18,$18,$0E,$18,$18,$70,$00	; }
                                             
    621 FFFC0668 72 9C 00 00 00 00 00 00     	dc.b	$72,$9C,$00,$00,$00,$00,$00,$00	; ~
                                             
    623 FFFC0670 FE FE FE FE FE FE FE 00     	dc.b	$FE,$FE,$FE,$FE,$FE,$FE,$FE,$00	; 
                                             
