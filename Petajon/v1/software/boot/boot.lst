                        	.file "boot.r5a",1
                        	.file "boot.r5a",1
                        	.file "../fmtk/const.r5a",1
                        	.file "../fmtk/const.r5a",1
                        	; ============================================================================
                        	;        __
                        	;   \\__/ o\    (C) 2020  Robert Finch, Stratford
                        	;    \  __ /    All rights reserved.
                        	;     \/_//     robfinch<remove>@finitron.ca
                        	;       ||
                        	;  
                        	;
                        	; This source file is free software: you can redistribute it and/or modify 
                        	; it under the terms of the GNU Lesser General Public License as published 
                        	; by the Free Software Foundation, either version 3 of the License, or     
                        	; (at your option) any later version.                                      
                        	;                                                                          
                        	; This source file is distributed in the hope that it will be useful,      
                        	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                        	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                        	; GNU General Public License for more details.                             
                        	;                                                                          
                        	; You should have received a copy of the GNU General Public License        
                        	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                        	;
                        	; ============================================================================
                        	
                        	; First 256 bytes are for integer register set
                        	; Second 256 bytes are for float register set
                        	; Leave some room for 64-bit regs
                        	TCBsegs			EQU		$200		; segment register storage
                        	TCBepc			EQU		$280
                        	TCBStatus		EQU		$288
                        	TCBPriority	EQU		$289
                        	TCBContextSaved	EQU		$28A
                        	TCBWaitMbx	EQU		$28C
                        	TCBStackBot	EQU		$290
                        	TCBMsgD1		EQU		$298
                        	TCBMsgD2		EQU		$2A0
                        	TCBMsgD3		EQU		$2A8
                        	TCBStartTime	EQU		$2B0
                        	TCBEndTime		EQU		$2B8
                        	TCBElapsedTime		EQU		$2C0
                        	TCBException	EQU	$2C8
                        	TCBNext			EQU		$2D0
                        	TCBPrev			EQU		$2D8
                        	TCBTimeout	EQU		$2E0
                        	IOF_NEXT		EQU		$2E8
                        	IOF_PREV		EQU		$2F0
                        	TCBName			EQU		$2F8
                        	TCBKbdHead	EQU		$300
                        	TCBKbdTail	EQU		$301
                        	TCBKbdBuf		EQU		$308
                        	; 328 end of keyboard buffer
                        	TCBResource	EQU		$328
                        	TCBVideoMem	EQU		$330
                        	TCBpVideo		EQU		$338
                        	
                        	TS_NONE			EQU		0
                        	TS_READY		EQU		1
                        	TS_DEAD			EQU		2
                        	TS_MSGRDY		EQU		4
                        	TS_WAITMSG	EQU		8
                        	TS_TIMEOUT	EQU		16
                        	TS_PREEMPT	EQU		32
                        	TS_RUNNING	EQU		128
                        	
                        	; error codes
                        	E_Ok		=		0x00
                        	E_Arg		=		0x01
                        	E_BadMbx	=		0x04
                        	E_QueFull	=		0x05
                        	E_NoThread	=		0x06
                        	E_NotAlloc	=		0x09
                        	E_NoMsg		=		0x0b
                        	E_Timeout	=		0x10
                        	E_BadAlarm	=		0x11
                        	E_NotOwner	=		0x12
                        	E_QueStrategy =		0x13
                        	E_BadDevNum	=		0x18
                        	E_DCBInUse	=		0x19
                        	E_BadCallno	=  0x1A
                        	; Device driver errors
                        	E_BadDevNum	=		0x20
                        	E_NoDev		=		0x21
                        	E_BadDevOp	=		0x22
                        	E_ReadError	=		0x23
                        	E_WriteError =		0x24
                        	E_BadBlockNum	=	0x25
                        	E_TooManyBlocks	=	0x26
                        	
                        	; resource errors
                        	E_NoMoreMbx	=		0x40
                        	E_NoMoreMsgBlks	=	0x41
                        	E_NoMoreAlarmBlks	=0x44
                        	E_NoMoreTCBs	=	0x45
                        	E_NoMem		= 12
                        	
                        	CSR_REGSET	equ		$790
                        	.file "boot.r5a",1
                        	.file "boot.r5a",1
                        	.file "../fmtk/config.r5a",1
                        	.file "../fmtk/config.r5a",1
                        	MAX_TID		EQU		63
                        	MAX_MID		EQU		63
                        	MAX_ASID	EQU		63
                        	NR_TCB		EQU		64
                        	NR_MBX		EQU		256
                        	NR_MSG		EQU		2048
                        	LOG_TCBSZ	EQU		10
                        	LOG_PGSZ	EQU		16
                        	PAGESZ		EQU		65536
                        	PAGES_PER_TASK	EQU		4096	; maximum number of pages per task
                        	PAGES_PER_MAP		EQU		4096
                        	OSPAGES		EQU		3			; pages of memory dedicated to OS
                        	.file "boot.r5a",1
                        	.file "boot.r5a",1
                        	.file "../fmtk/device.r5a",1
                        	.file "../fmtk/device.r5a",1
                        	; ============================================================================
                        	;        __
                        	;   \\__/ o\    (C) 2014-2020  Robert Finch, Stratford
                        	;    \  __ /    All rights reserved.
                        	;     \/_//     robfinch<remove>@finitron.ca
                        	;       ||
                        	;  
                        	;
                        	; This source file is free software: you can redistribute it and/or modify 
                        	; it under the terms of the GNU Lesser General Public License as published 
                        	; by the Free Software Foundation, either version 3 of the License, or     
                        	; (at your option) any later version.                                      
                        	;                                                                          
                        	; This source file is distributed in the hope that it will be useful,      
                        	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                        	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                        	; GNU General Public License for more details.                             
                        	;                                                                          
                        	; You should have received a copy of the GNU General Public License        
                        	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                        	;
                        	; DeviceDriver.inc
                        	; - Device driver structures and constants                                                                         
                        	; ============================================================================
                        	
                        	;	.global			; global constants
                        	
                        	; Device Control Block
                        	;
                        	DCB_Name			EQU		0		; string: first byte is length, 11 chars max
                        	DCB_Type			EQU		0x0C
                        	DCB_nBPB			EQU		0x10
                        	DCB_LastErc			EQU		0x18		; last error code
                        	DCB_StartBlock		EQU		0x20		; starting block number (partitioned devices)
                        	DCB_nBlocks			EQU		0x28		; number of blocks on device
                        	DCB_pCmdProc		EQU		0x30		; pointer to command processor routine
                        	DCB_ReentCount		EQU		0x38		; re-entrancy count (1 to 255)
                        	DCB_fSingleUser		EQU		0x39
                        	DCB_hJob			EQU		0x40		; handle to associated job
                        	DCB_Mbx				EQU		0x48
                        	DCB_pSema			EQU		0x50		; pointer to device semaphore
                        	DCB_Resv1			EQU		0x58		; reserved
                        	DCB_Resv2			EQU		0x60		; reserved
                        	DCB_Size			EQU		0x68
                        	
                        	; Device command opcodes
                        	;
                        	DVC_Nop				EQU		0
                        	DVC_Setup			EQU		1
                        	DVC_Initialize		EQU		2
                        	DVC_Status			EQU		3
                        	DVC_MediaCheck		EQU		4
                        	DVC_BuildBPB		EQU		5
                        	DVC_Open			EQU		6
                        	DVC_Close			EQU		7
                        	DVC_GetChar			EQU		8
                        	DVC_PeekChar		EQU		9
                        	DVC_GetCharDirect	EQU		10
                        	DVC_PeekCharDirect	EQU		11
                        	DVC_InputStatus		EQU		12
                        	DVC_PutChar			EQU		13
                        	DVC_SetPosition		EQU		15
                        	DVC_ReadBlock		EQU		16
                        	DVC_WriteBlock		EQU		17
                        	DVC_VerifyBlock		EQU		18
                        	DVC_OutputStatus	EQU		19
                        	DVC_FlushInput		EQU		20
                        	DVC_FlushOutput		EQU		21
                        	DVC_IRQ				EQU		22
                        	DVC_IsRemoveable	EQU		23
                        	DVC_IOCTRL_READ		EQU		24
                        	DVC_IOCTRL_WRITE	EQU		25
                        	DVC_OutputUntilBusy	EQU		26
                        	
                        	MAX_DEV_OP			EQU		31
                        	
                        	
                        	DRSP_DONE			EQU		1
                        	
                        	;Standard Devices are:
                        	
                        	;#		Device					Standard name
                        	
                        	;0		NULL device 			NUL		(OS built-in)
                        	;1		Keyboard (sequential)	KBD		(OS built-in)
                        	;2		Video (sequential)		VID		(OS built-in)
                        	;3		Printer (parallel 1)	LPT
                        	;4		Printer (parallel 2)	LPT2
                        	;5		RS-232 1				COM1	(OS built-in)
                        	;6		RS-232 2				COM2
                        	;7		RS-232 3				COM3
                        	;8		RS-232 4				COM4
                        	;9		Parallel xfer	  PTI
                        	;10		Floppy					FD0
                        	;11		Floppy					FD1
                        	;12		Hard disk				HD0
                        	;13		Hard disk				HD1
                        	;14
                        	;15
                        	;16		SDCard					CARD1 	(OS built-in)
                        	;17
                        	;18
                        	;19
                        	;20
                        	;21
                        	;22
                        	;23
                        	;24
                        	;25
                        	;26
                        	;27
                        	;28		Audio						PSG1	(OS built-in)
                        	;29
                        	;30   Random Number		PRNG
                        	;31		Debug						DBG
                        	
                        	NR_DCB			EQU		32
                        	.file "boot.r5a",1
                        	.file "boot.r5a",1
                        	.file "../fmtk/macro.r5a",1
                        	.file "../fmtk/macro.r5a",1
                        	; ============================================================================
                        	;        __
                        	;   \\__/ o\    (C) 2020  Robert Finch, Stratford
                        	;    \  __ /    All rights reserved.
                        	;     \/_//     robfinch<remove>@finitron.ca
                        	;       ||
                        	;  
                        	;
                        	; This source file is free software: you can redistribute it and/or modify 
                        	; it under the terms of the GNU Lesser General Public License as published 
                        	; by the Free Software Foundation, either version 3 of the License, or     
                        	; (at your option) any later version.                                      
                        	;                                                                          
                        	; This source file is distributed in the hope that it will be useful,      
                        	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                        	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                        	; GNU General Public License for more details.                             
                        	;                                                                          
                        	; You should have received a copy of the GNU General Public License        
                        	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                        	;
                        	; ============================================================================
                        	
                        	; macros have to be defined before they are encountered.
                        	
                        	; unlock the a semaphore	
                        	macro mUnlockSemaphore (adr)
	ldi		v0,#-1
	sw		v0,adr
endm
                        	
                        	; Look at the asid register for task id
                        	macro mGetCurrentTid
	csrrw	v0,#$181,x0
	and		v0,v0,#MAX_TID
endm
                        	
                        	macro	mHasFocus
	ldi		$a0,#20
	ecall
endm
                        	
                        	macro mSleep(tm)
	ldi		$a0,#5
	ldi		$a1,#tm
	ecall
endm
                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	
                        	macro mWaitForFocus
.WFF1@:
	
	ldi		$a0,#20
	ecall
bne		v1,x0,.HasFocus@
	call	SerialPeekChar	;Direct
	ldi		a0,#$14							; CTRL-T
	bne		$v0,$a0,.WFF2@
	call	SerialGetChar
	ldi		$a0,#21							; switch IO Focus
	ecall
	bra		.WFF1@
.WFF2@:
	
	ldi		$a0,#5
	ldi		$a1,#1
	ecall

	bra		.WFF1@
.HasFocus@:
endm
                        	
                        	;------------------------------------------------------------------------------
                        	; Pop an entry off the timeout list. It is assumed the entry is popped when
                        	; its timeout reached zero. Hence there is no adjustment of the following
                        	; timeout made. Routine used only in the schedulerIRQ, so written as a macro.
                        	;
                        	; Parameters:
                        	;		v0 = top timeout list
                        	; Modifies:
                        	;		v1,t0,t1,t2,t3
                        	;	Returns:
                        	;		v0 = timeout list entry tid
                        	;------------------------------------------------------------------------------
                        	
                        	macro mPopTimeoutList
	sll		$t0,$v0,#LOG_TCBSZ		; tid to pointer
	lbu		$v1,TCBStatus[$t0]		; no longer a waiting status
	and		$t1,$v1,#TS_WAITMSG		; check if waiting for a message
	beqz	$t1,.noWait@
	mMbxRemoveTask							; remove task from mailbox list
.noWait@:
	and		$v1,$v1,#~(TS_WAITMSG|TS_TIMEOUT)
	stb		$v1,TCBStatus[$t0]
	ldw		$v1,TCBNext[$t0]			; get next task on timeout list
	stw		$v1,TimeoutList				; update list head
	ldi		$t1,#NR_TCB						; check valid handle
	bgeu	$v1,$t1,.done@
	ldi		$t1,#-1								;
	sll		$v1,$v1,#LOG_TCBSZ		; v1 = tid to pointer
	stw		$t1,TCBPrev[$v1]			; TimeoutList->prev = -1
.done@:
	ldi		$t1,#-1								; reset next and prev indexes
	stw		$t1,TCBNext[$t0]			; on popped task
	stw		$t1,TCBPrev[$t0]
endm
                        	
                        	
                        	macro mGetVideoPtr:
	
	csrrw	v0,#$181,x0
	and		v0,v0,#MAX_TID
sll		$v0,$v0,#LOG_TCBSZ
	ldo		$v0,TCBpVideo[$v0]
	ldi		$v0,#$FFD00000
endm
                        	
                        	macro mDispIRQLive
	ldo      $v0,$FFD00000+440
	add     	$v0,$v0,#1
	sto      $v0,$FFD00000+440
endm
                        	.file "boot.r5a",1
                        	.file "boot.r5a",1
                        	.file "../fmtk/global.r5a",1
                        	.file "../fmtk/global.r5a",1
                        	; ============================================================================
                        	;        __
                        	;   \\__/ o\    (C) 2020  Robert Finch, Stratford
                        	;    \  __ /    All rights reserved.
                        	;     \/_//     robfinch<remove>@finitron.ca
                        	;       ||
                        	;  
                        	;
                        	; This source file is free software: you can redistribute it and/or modify 
                        	; it under the terms of the GNU Lesser General Public License as published 
                        	; by the Free Software Foundation, either version 3 of the License, or     
                        	; (at your option) any later version.                                      
                        	;                                                                          
                        	; This source file is distributed in the hope that it will be useful,      
                        	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                        	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                        	; GNU General Public License for more details.                             
                        	;                                                                          
                        	; You should have received a copy of the GNU General Public License        
                        	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                        	;
                        	; ============================================================================
                        	;
                        	; 00000000	+-----------------------------------
                        	;						| Task Control Blocks (64 x 1kB)
                        	; 00010000	+-----------------------------------
                        	;						| Message Array (2048 x 32b)
                        	; 00020000	+-----------------------------------
                        	;						| Mailbox Array (256 x 32b)
                        	; 00022000	+-----------------------------------
                        	;						| Device Control Blocks (32 x 256b)
                        	; 00024000	+-----------------------------------
                        	
                        	msgs		EQU		$10000
                        	mbxs		EQU		$20000
                        	mbxs_end	EQU	$22000
                        	; The following must be at least 256 byte aligned
                        	DVF_Base		EQU		$22000
                        	DVF_Limit		EQU		$24000
                        	QNDX		EQU		$24304
                        	READYQ	EQU		$24308
                        	PIDMAP	EQU		$24310
                        	missed_ticks	equ		$24320
                        	TimeoutList		equ		$24328
                        	Tick		EQU		$24330
                        	SysSema	EQU		$24340
                        	FreeMsg	EQU		$24350
                        	RDYQ0		EQU		$24400
                        	RDYQ1		EQU		$24500
                        	RDYQ2		EQU		$24600
                        	RDYQ3		EQU		$24700
                        	CursorX		equ		$24800
                        	CursorY		equ		$24801
                        	DispAttr	equ		$24808
                        	IOFocusNdx		EQU		$24810
                        	IOFocusTbl		EQU		$24818
                        	SwitchIOFocus	EQU		$24820
                        	hKeybdMbx	equ		$24822
                        	_KeyState1	equ		$24824
                        	_KeyState2 equ		$24825
                        	_KeyLED			equ		$24826
                        	NPAGES	equ		$24828
                        	_randStream	equ		$24830
                        	
                        	SerRcvBuf		EQU		$25000
                        	SerXmitBuf	EQU		$25400
                        	SerHeadRcv	EQU		$25800
                        	SerTailRcv	EQU		$25804
                        	SerHeadXmit	EQU		$25808
                        	SerTailXmit	EQU		$2580C
                        	SerRcvXon		EQU		$25810
                        	SerRcvXoff	EQU		$25811
                        	
                        	
                        	
                        	
                        	
                        	
                        	.file "boot.r5a",1
                        	.file "boot.r5a",1
                        	
                        	CTRLC				equ		$03
                        	BS					equ		$08
                        	LNFD				equ		$0A
                        	CR					equ		$0D
                        	XON					equ		$11
                        	XOFF				equ		$13
                        	DEL					equ		$7F
                        	LEDS				equ		$FFDC0600
                        	BUTTONS			equ		$FFDC0600
                        	VIA					equ		$FFDC0600
                        	VIA_PA			equ		$04
                        	VIA_DDRA		equ		$0C
                        	VIA_T1CL		equ		$10
                        	VIA_T1CH		equ		$14
                        	VIA_ACR			equ		$2C
                        	VIA_PCR			equ		$30
                        	VIA_IFR			equ		$34
                        	VIA_IER			equ		$38
                        	VIA_PARAW		equ		$3C
                        	UART				equ		$FFDC0A00
                        	UART_TRB		equ		$00
                        	UART_STAT		equ		$04
                        	UART_CMD		equ		$08
                        			; First 16kB is for TCB's
                        	INBUF				equ		$14100
                        	switchflag	equ		$14200
                        	milliseconds	equ		$14208
                        	
                        	
                        	.file "boot.r5a",32
                        		code	18 bits
                        	;------------------------------------------------------------------------------
                        	; Exception vector table.
                        	;------------------------------------------------------------------------------
                        		org		$FFFC0000				; user mode exception
FFFC0000 0ED0006F		jmp		IRQRout
FFFC0004 00000000		org		$FFFC0040				; supervisor mode exception (not possible)
FFFC0008 00000000
FFFC000C 00000000
FFFC0010 00000000
FFFC0014 00000000
FFFC0018 00000000
FFFC001C 00000000
FFFC0020 00000000
FFFC0024 00000000
FFFC0028 00000000
FFFC002C 00000000
FFFC0030 00000000
FFFC0034 00000000
FFFC0038 00000000
FFFC003C 00000000
FFFC0040 0AD0006F		jmp		IRQRout
FFFC0044 00000000		org		$FFFC0080				; hypervisor mode exception (not possible)
FFFC0048 00000000
FFFC004C 00000000
FFFC0050 00000000
FFFC0054 00000000
FFFC0058 00000000
FFFC005C 00000000
FFFC0060 00000000
FFFC0064 00000000
FFFC0068 00000000
FFFC006C 00000000
FFFC0070 00000000
FFFC0074 00000000
FFFC0078 00000000
FFFC007C 00000000
FFFC0080 06D0006F		jmp		IRQRout
FFFC0084 00000000		org 	$FFFC00C0				; machine mode exception
FFFC0088 00000000
FFFC008C 00000000
FFFC0090 00000000
FFFC0094 00000000
FFFC0098 00000000
FFFC009C 00000000
FFFC00A0 00000000
FFFC00A4 00000000
FFFC00A8 00000000
FFFC00AC 00000000
FFFC00B0 00000000
FFFC00B4 00000000
FFFC00B8 00000000
FFFC00BC 00000000
FFFC00C0 02D0006F		jmp		IRQRout
FFFC00C4 00000000		org		$FFFC00FC				; non-maskable interrupt
FFFC00C8 00000000
FFFC00CC 00000000
FFFC00D0 00000000
FFFC00D4 00000000
FFFC00D8 00000000
FFFC00DC 00000000
FFFC00E0 00000000
FFFC00E4 00000000
FFFC00E8 00000000
FFFC00EC 00000000
FFFC00F0 00000000
FFFC00F4 00000000
FFFC00F8 00000000
FFFC00FC 0040006F		jmp		MachineStart
                        	
                        	;------------------------------------------------------------------------------
                        	; User mode code starts here
                        	;------------------------------------------------------------------------------
                        		org		$FFFC0100
                        	MachineStart:
FFFC0100 1FFFC737		ldi		$sp,#$1FFFBFF8		; setup machine mode stack pointer
FFFC0104 FF870713
                        		; The dram needs a bit of time before it's ready for access. along with
                        		; the video screen which also needs some time. So the first thing done is
                        		; to delay for about 3 seconds.
FFFC0108 FFDC0DB7		ldi		$t1,#VIA
FFFC010C 600D8D93
FFFC0110 0FF06D13		ldi		$t0,#$000000FF		; set via so we can see output on LEDs
FFFC0114 01ADA623		stt		$t0,VIA_DDRA[$t1]
FFFC0118 03938937		ldi		$a0,#60000000			; 3s in 50ns intervals
FFFC011C 70090913
FFFC0120 6D0000EF		call	_MicroDelay
FFFC0124 575000EF		call	MMUInit					; initialize MMU for address space zero.
FFFC0128 545010EF		call	FMTKInit
FFFC012C 0A5010EF		call	VideoInit
FFFC0130 6E8010EF		call	ViaInit
FFFC0134 16C010EF		call	SerialInit
FFFC0138 7C8030EF		call	_KeybdInit
FFFC013C 030010EF		call	PicInit
FFFC0140 750000EF		call	_PRNGInit
FFFC0144 00006D13		ldi		$t0,#0
FFFC0148 181D1073		csrrw	$x0,#$181,$t0		; set ASID
FFFC014C FFFC0D37		ldi		$t0,#$FFFC0000
FFFC0150 000D0D13
FFFC0154 301D1073		csrrw $x0,#$301,$t0		; set tvec
FFFC0158 FFFC0D37		ldi		$t0,#UserStart
FFFC015C 16CD0D13
FFFC0160 341D1073		csrrw	$x0,#$341,$t0		; set mepc
FFFC0164 30046073		csrrs	$x0,#$300,#8		; enable interrupts (on eret)
FFFC0168 10000073		eret									; switch to user mode
                        	UserStart:
FFFC016C 00106913		ldi		$a0,#1
FFFC0170 000069B7		ldi		$a1,#24000
FFFC0174 DC098993
FFFC0178 FFFC0A37		ldi		$a2,#UserStart2
FFFC017C 184A0A13
FFFC0180 00000073		ecall
                        	;	ldi		$a0,#1					; start TinyBasic
                        	;	ldi		$a1,#32000
                        	;	ldi		$a2,#CSTART
                        	;	ecall
                        	.0001:
                        	;	wfi
                        	;	bra		.0001
                        	UserStart2:
FFFC0184 AFFF8737		ldi		$sp,#$AFFF7FF8			; setup user mode stack pointer
FFFC0188 FF870713
FFFC018C 774060EF		call	_SpriteDemo
FFFC0190 03938937		ldi		$a0,#60000000				; 3s in 50ns intervals
FFFC0194 70090913
FFFC0198 658000EF		call	_MicroDelay
FFFC019C 40006913		ldi		$a0,#$400						; clear screen
FFFC01A0 00000073		ecall
FFFC01A4 40106913		ldi		$a0,#$401						; home cursor
FFFC01A8 00000073		ecall
FFFC01AC 00E06913		ldi		$a0,#14							; Get current tid
FFFC01B0 00000073		ecall
FFFC01B4 0008E9B3		mov		$a1,$v1
FFFC01B8 01806913		ldi		$a0,#24							; RequestIOFocus
FFFC01BC 00000073		ecall
                        	;	ldi		$sp,#$1FFF7FF8			; setup user mode stack pointer
                        	;	ldi		$sp,#$AFFFFFFC
FFFC01C0 00406D13		ldi		$t0,#$04						; turn on the LED
FFFC01C4 FFDC0637		stt		$t0,VIA+VIA_PARAW
FFFC01C8 63C60613
FFFC01CC 00060633
FFFC01D0 01A62023
FFFC01D4 01006E13		ldi		$t2,#16							; send an XON just in case
                        	;	ldi		$a3,#XON
                        	;.0004:
                        	;	call	SerialPutChar
                        	;	sub		$t2,$t2,#1
                        	;	bnez	$t2,.0004
                        	.0002:
                        	;	ldi		$a0,#msgStart				; spit out a startup message
                        	;	ldi		$t0,#$FFD00000
                        	;	ldo		$t1,datAttr
                        	.0005:
                        	;	ldbu	$a1,[$a0]
                        	;	add		$a0,$a0,#1
                        	;	beqz	$a1,.0004
                        	;	or		$a1,$a1,$t1
                        	;	sto		$a1,[$t0]
                        	;	add		$t0,$t0,#8
                        	;	bra		.0005
                        	.0004:
FFFC01D8 40306913		ldi		$a0,#$403						; video putstring()
FFFC01DC FFFC19B7		ldi		$a1,#msgStart
FFFC01E0 9BC98993
FFFC01E4 00000073		ecall
                        	;		ldi		a0,#1
                        	;		ldi		a1,#24000
                        	;		ldi		a2,#Monitor
                        	;		ecall
FFFC01E8 615020EF		call	DumpReadyList
FFFC01EC 10000663		bra		MonEntry
                        	
                        			; Now a loop to recieve and echo back characters
                        	.0003:
FFFC01F0 2DC010EF		call	SerialPeekChar
FFFC01F4 FE084EE3		blt		$v0,$x0,.0003
FFFC01F8 00086933		mov		$a0,$v0
FFFC01FC 394010EF		call	SerialPutChar
FFFC0200 FE0008E3		bra		.0003
                        	
FFFC0204 00000000		align	
                        	
                        	datAttr:
FFFC0208 001F0000		dco		$FFFF001F0000
FFFC020C 0000FFFF
                        	
                        		align	8                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	
                        	IdleTask:
FFFC0210 00000063		bra		IdleTask
                        	
                        	;------------------------------------------------------------------------------
                        	; Get a character from input device. Checks for a CTRL-T which indicates to
                        	; switch the I/O focus.
                        	;
                        	; Parameters:
                        	;		none
                        	; Returns:
                        	;		v0 = character, -1 if none available
                        	;------------------------------------------------------------------------------
                        	
                        	Getch:
FFFC0214 FE870713		sub		$sp,$sp,#24
FFFC0218 00173023		sto		$ra,[$sp]
FFFC021C 01273423		sto		$a0,8[$sp]
FFFC0220 01373823		sto		$a1,16[$sp]
                        	;	mWaitForFocus
                        	;	call	SerialGetChar
FFFC0224 00006913		ldi		$a0,#0					; don't block
FFFC0228 359030EF		call	_DBGGetKey
FFFC022C 00073083		ldo		$ra,[$sp]
FFFC0230 00873903		ldo		$a0,8[$sp]
FFFC0234 01073983		ldo		$a1,16[$sp]
FFFC0238 01870713		add		$sp,$sp,#24
FFFC023C 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	
                        	Putch:
FFFC0240 FA870713		sub		$sp,$sp,#88
FFFC0244 00173023		sto		$ra,[$sp]
FFFC0248 01073423		sto		$v0,8[$sp]
FFFC024C 01573823		sto		$a3,16[$sp]
FFFC0250 01173C23		sto		$v1,24[$sp]
FFFC0254 03373023		sto		$a1,32[$sp]
FFFC0258 03A73423		sto		$t0,40[$sp]
FFFC025C 03B73823		sto		$t1,48[$sp]
FFFC0260 03C73C23		sto		$t2,56[$sp]
FFFC0264 05D73023		sto		$t3,64[$sp]
FFFC0268 05E73423		sto		$t4,72[$sp]
FFFC026C 05F73823		sto		$t5,80[$sp]
FFFC0270 00096AB3		mov		$a3,$a0
                        	;	call	SerialPutChar
                        	;	call	VideoPutChar
FFFC0274 40206913		ldi		$a0,#$402
FFFC0278 00000073		ecall
                        	;	ldi		$a1,#5							; serial port = 5
                        	;	call	fputc
                        	;	ldi		$a1,#2							; video = 2
                        	;	call	fputc
FFFC027C 00073083		ldo		$ra,[$sp]
FFFC0280 00873803		ldo		$v0,8[$sp]
FFFC0284 01073A83		ldo		$a3,16[$sp]
FFFC0288 01873883		ldo		$v1,24[$sp]
FFFC028C 02073983		ldo		$a1,32[$sp]
FFFC0290 02873D03		ldo		$t0,40[$sp]
FFFC0294 03073D83		ldo		$t1,48[$sp]
FFFC0298 03873E03		ldo		$t2,56[$sp]
FFFC029C 04073E83		ldo		$t3,64[$sp]
FFFC02A0 04873F03		ldo		$t4,72[$sp]
FFFC02A4 05073F83		ldo		$t5,80[$sp]
FFFC02A8 05870713		add		$sp,$sp,#88
FFFC02AC 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; fputc - put a character to an I/O device. If the task doesn't have the I/O
                        	; focus then it is rescheduled, allowing another task to run.
                        	;
                        	; Stack Space:
                        	;		6 words
                        	; Register Usage:
                        	;		a0 = FMTK_IO specify
                        	;		a2 = device putchar function
                        	; Parameters:
                        	;		a1 = I/O channel
                        	;		a3 = character to put
                        	; Modifies:
                        	;		none
                        	; Returns:
                        	;		none
                        	;------------------------------------------------------------------------------
                        	
                        	fputc:
FFFC02B0 FD070713		sub		$sp,$sp,#48
FFFC02B4 00173023		sto		$ra,[$sp]
FFFC02B8 01073423		sto		$v0,8[$sp]
FFFC02BC 01273823		sto		$a0,16[$sp]
FFFC02C0 01173C23		sto		$v1,24[$sp]
FFFC02C4 03373023		sto		$a1,32[$sp]
FFFC02C8 03473423		sto		$a2,40[$sp]
                        	;	mWaitForFocus
FFFC02CC 01A06913		ldi		$a0,#26							; FMTK_IO
FFFC02D0 00D06A13		ldi		$a2,#13							; putchar function
FFFC02D4 00000073		ecall
FFFC02D8 00073083		ldo		$ra,[$sp]
FFFC02DC 00873803		ldo		$v0,8[$sp]
FFFC02E0 01073903		ldo		$a0,16[$sp]
FFFC02E4 01873883		ldo		$v1,24[$sp]
FFFC02E8 02073983		ldo		$a1,32[$sp]
FFFC02EC 02873A03		ldo		$a2,40[$sp]
FFFC02F0 03070713		add		$sp,$sp,#48
FFFC02F4 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	MonEntry:
                        	;		flw			$f2,fltTen
                        	;		fsw			$f2,f2Save
                        	;		flw			$f1,fltTen
                        	;		fsw			$f1,f1Save
                        	;		fadd		$f18,$f2,$f1
                        	;		fsw			$f18,f18Save
FFFC02F8 00A06913			ldi		$a0,#10
FFFC02FC 00606A13			ldi		$a2,#6
                        	;		call	fltToString
                        	;		ldi		$a0,#STRTMP
                        	;		call	PutString
                        	
                        	Monitor:
FFFC0300 B0000737		ldi		$sp,#$AFFFFFFC
FFFC0304 FFC70713
FFFC0308 3000F073		csrrc	$x0,#$300,#1
                        	;		call	DumpReadyList
                        	;		call	DumpTimeoutList
FFFC030C 3000E073		csrrs	$x0,#$300,#1
FFFC0310 00006213		ldi		$s1,#0					; s1 = input pointer
FFFC0314 00D06913		ldi		$a0,#CR
FFFC0318 F29FF0EF		call	Putch
FFFC031C 00A06913		ldi		$a0,#LNFD
FFFC0320 F21FF0EF		call	Putch
FFFC0324 03E06913		ldi		$a0,#'>'
FFFC0328 F19FF0EF		call	Putch
                        	.0001:
FFFC032C EE9FF0EF			call	Getch						; wait until character pressed
FFFC0330 FE084EE3			blt		$v0,$x0,.0001
FFFC0334 00A84D13			xor		$t0,$v0,#LNFD			; ignore line feed
FFFC0338 0E0D0C63			beq		$t0,$x0,.procLine
FFFC033C 00D84D13			xor		$t0,$v0,#CR
FFFC0340 0E0D0863			beq		$t0,$x0,.procLine
FFFC0344 00884D13			xor		$t0,$v0,#BS
FFFC0348 080D0263			beq		$t0,$x0,.doBackspace
FFFC034C 07F84D13			xor		$t0,$v0,#DEL
FFFC0350 020D0263			beq		$t0,$x0,.doDelete
FFFC0354 00014637			sb		$v0,INBUF[$s1]
FFFC0358 10060613
FFFC035C 00460633
FFFC0360 01060023
FFFC0364 00120213			add		$s1,$s1,#1
FFFC0368 00086933			mov		$a0,$v0
FFFC036C ED5FF0EF			call	Putch
FFFC0370 FA000EE3			bra		.0001
                        	.doDelete:
FFFC0374 000262B3			mov		$s2,$s1
FFFC0378 00128293			add		$s2,$s2,#1
                        	.0002:
FFFC037C 00014637			lb		$t0,INBUF[$s2]
FFFC0380 10060613
FFFC0384 00560633
FFFC0388 00060D03
FFFC038C 00014637			sb		$t0,INBUF-1[$s2]
FFFC0390 0FF60613
FFFC0394 00560633
FFFC0398 01A60023
FFFC039C 00128293			add		$s2,$s2,#1
FFFC03A0 00014637			add		$t0,$s2,#INBUF
FFFC03A4 10060613
FFFC03A8 00560D33
FFFC03AC 00014637			slt		$t0,$t0,#INBUF+$7F
FFFC03B0 17F60613
FFFC03B4 FC0D14E3			bne		$t0,$x0,.0002
FFFC03B8 00014637			sb		$x0,INBUF[$s2]
FFFC03BC 10060613
FFFC03C0 00560633
FFFC03C4 00060023
FFFC03C8 F60002E3			bra		.0001
                        	.doBackspace:
FFFC03CC F60200E3			beq		$s1,$x0,.0001		; can't backspace anymore
FFFC03D0 00086933			mov		$a0,$v0					; show the backspace
FFFC03D4 E6DFF0EF			call	Putch
FFFC03D8 FFF20213			sub		$s1,$s1,#1
FFFC03DC 000262B3			mov		$s2,$s1
                        	.0003:
FFFC03E0 00014637			lb		$t0,INBUF+1[$s2]
FFFC03E4 10160613
FFFC03E8 00560633
FFFC03EC 00060D03
FFFC03F0 00014637			sb		$t0,INBUF[$s2]
FFFC03F4 10060613
FFFC03F8 00560633
FFFC03FC 01A60023
FFFC0400 00128293			add		$s2,$s2,#1
FFFC0404 00014637			add		$t0,$s2,#INBUF
FFFC0408 10060613
FFFC040C 00560D33
FFFC0410 00014637			slt		$t0,$t0,#INBUF+$7F
FFFC0414 17F60613
FFFC0418 FC0D14E3			bne		$t0,$x0,.0003
FFFC041C 00014637			sb		$x0,INBUF[$s2]
FFFC0420 10060613
FFFC0424 00560633
FFFC0428 00060023
FFFC042C F00000E3			bra		.0001
                        	.procLine:
FFFC0430 00014637			sb		$x0,INBUF[$s1]
FFFC0434 10060613
FFFC0438 00460633
FFFC043C 00060023
FFFC0440 00006213			ldi		$s1,#0
                        	.skip:
FFFC0444 00014637			lb		$t0,INBUF[$s1]
FFFC0448 10060613
FFFC044C 00460633
FFFC0450 00060D03
FFFC0454 100D0663			beq		$t0,$x0,.0005
FFFC0458 03ED4D93			xor		$t1,$t0,#'>'
FFFC045C 000D9663			bne		$t1,$x0,.0004
                        	.skip2:
FFFC0460 00120213			add		$s1,$s1,#1
FFFC0464 FE0000E3			bra		.skip
                        	.0004:
FFFC0468 020D4D93			xor		$t1,$t0,#' '
FFFC046C FE0D8AE3			beq		$t1,$x0,.skip2
FFFC0470 009D4D93			xor		$t1,$t0,#'\t'
FFFC0474 FE0D86E3			beq		$t1,$x0,.skip2
FFFC0478 04DD4D93			xor		$t1,$t0,#'M'
FFFC047C 0E0D8463			beq		$t1,$x0,doMem
FFFC0480 04206D93			ldi		$t1,#'B'
FFFC0484 05BD1463			bne		$t0,$t1,.0006
FFFC0488 00106913			ldi		$a0,#1					; Start task
FFFC048C 000089B7			ldi		$a1,#32000			; 32 kB
FFFC0490 D0098993
FFFC0494 FFFC4A37			ldi		$a2,#CSTART			; start address
FFFC0498 330A0A13
FFFC049C 00000073			ecall
FFFC04A0 0008E233			mov		$s1,$v1					; save v1
FFFC04A4 FFFC1937			ldi		$a0,#msgCRLF
FFFC04A8 A8290913
FFFC04AC 310000EF			call	PutString
FFFC04B0 00026933			mov		$a0,$s1					; get back v1
FFFC04B4 2A8000EF			call	PutHexByte
FFFC04B8 FFFC1937			ldi		$a0,#msgTaskStart
FFFC04BC A7490913
FFFC04C0 2FC000EF			call	PutString
FFFC04C4 339020EF			call  DumpReadyList
                        			;ldi		$a0,#5					; Reschedule task
                        			;ldi		$a1,#1					; sleep(0)
                        			;ecall
FFFC04C8 E39FF06F			jmp		Monitor
                        	.0006:
FFFC04CC 04406D93			ldi		$t1,#'D'
FFFC04D0 03BD1663			bne		$t0,$t1,.0007
FFFC04D4 00014637			lb		$t0,INBUF+1[$s1]
FFFC04D8 10160613
FFFC04DC 00460633
FFFC04E0 00060D03
FFFC04E4 05406D93			ldi		$t1,#'T'
FFFC04E8 01BD1663			bne		$t0,$t1,.noT
FFFC04EC 401020EF			call	DumpTimeoutList
FFFC04F0 E11FF06F			jmp		Monitor
                        	.noT:
FFFC04F4 309020EF			call 	DumpReadyList
                        			;ldi		$a0,#15
                        			;ecall
FFFC04F8 E09FF06F			jmp		Monitor
                        	.0007:
FFFC04FC 04506D93			ldi		$t1,#'E'
FFFC0500 01BD1463			bne		$t0,$t1,.0008
FFFC0504 0E80006F			jmp		EditMem
                        	.0008:
FFFC0508 04606D93			ldi		$t1,#'F'
FFFC050C 01BD1463			bne		$t0,$t1,.0009
FFFC0510 0F40006F			jmp		FillMem
                        	.0009:
FFFC0514 05306D93			ldi		$t1,#'S'
FFFC0518 01BD1A63			bne		$t0,$t1,.0010
FFFC051C 00506913			ldi		$a0,#5					; sleep(0)
FFFC0520 00106993			ldi		$a1,#1
FFFC0524 00000073			ecall
FFFC0528 DD9FF06F			jmp		Monitor
                        	.0010:
FFFC052C 04B06D93			ldi		$t1,#'K'
FFFC0530 01BD1C63			bne		$t0,$t1,.0011
FFFC0534 128000EF			call	GetHexNum
FFFC0538 00306913			ldi		$a0,#3					; kill task
FFFC053C 000869B3			mov		$a1,$v0					; a0 = pid
FFFC0540 00000073			ecall
FFFC0544 DBDFF06F			jmp		Monitor
                        	.0011:
FFFC0548 03F06D93			ldi		$t1,#'?'
FFFC054C 01BD1A63			bne		$t0,$t1,.0012
FFFC0550 FFFC1937			ldi		$a0,#msgMonHelp
FFFC0554 9D590913
FFFC0558 264000EF			call	PutString
FFFC055C DA5FF06F			jmp		Monitor
                        	.0012:
                        	.0005:
FFFC0560 DA0000E3			bra		Monitor
                        	
                        	doMem:
FFFC0564 FF870713			sub		$sp,$sp,#8
FFFC0568 00120213			add		$s1,$s1,#1
FFFC056C 00473023			sto		$s1,[$sp]
FFFC0570 00D06913			ldi		$a0,#CR
FFFC0574 CCDFF0EF			call	Putch
FFFC0578 00014937			ldi		$a0,INBUF
FFFC057C 10090913
FFFC0580 23C000EF			call	PutString
FFFC0584 00073203			ldo		$s1,[$sp]
FFFC0588 00870713			add		$sp,$sp,#8
FFFC058C 0D0000EF			call	GetHexNum
FFFC0590 00086333			mov		$s3,$v0
FFFC0594 00120213			add		$s1,$s1,#1
FFFC0598 0C4000EF			call	GetHexNum
FFFC059C 006803B3			add		$s4,$v0,$s3
                        	.loop2:
FFFC05A0 C75FF0EF			call	Getch						; check for ctrl-c
FFFC05A4 00384813			xor		$v0,$v0,#3
FFFC05A8 D4080CE3			beq		$v0,$x0,Monitor
FFFC05AC 00D06913			ldi		$a0,#CR
FFFC05B0 C91FF0EF			call	Putch
FFFC05B4 00036933			mov		$a0,$s3
FFFC05B8 164000EF			call	PutHexWord
FFFC05BC 03A06913			ldi		$a0,#':'
FFFC05C0 C81FF0EF			call	Putch
FFFC05C4 00706293			ldi		$s2,#7
                        	.loop:
FFFC05C8 02006913			ldi		$a0,#' '
FFFC05CC C75FF0EF			call	Putch
FFFC05D0 00030903			ldb		$a0,[$s3]
FFFC05D4 188000EF			call	PutHexByte
FFFC05D8 00130313			add		$s3,$s3,#1
FFFC05DC FFF28293			sub		$s2,$s2,#1
FFFC05E0 FE02D4E3			bge		$s2,$x0,.loop
FFFC05E4 FA736EE3			bltu	$s3,$s4,.loop2
FFFC05E8 D0000CE3			bra		Monitor		
                        	
                        	EditMem:
FFFC05EC 070000EF			call	GetHexNum			; get address to edit
FFFC05F0 00086333			mov		$s3,$v0
FFFC05F4 00120213			add		$s1,$s1,#1
FFFC05F8 064000EF			call	GetHexNum			; get value to set
FFFC05FC 00680023			stb		$s3,[$v0]			; update mem
FFFC0600 D01FF06F			jmp		Monitor
                        	
                        	;------------------------------------------------------------------------------
                        	;	>F 1000 800 EE
                        	; Fills memory beginning at address $1000 for $800 bytes with the value $EE
                        	;------------------------------------------------------------------------------
                        	
                        	FillMem:
FFFC0604 058000EF			call	GetHexNum			; get address
FFFC0608 00086333			mov		$s3,$v0
FFFC060C 00120213			add		$s1,$s1,#1
FFFC0610 04C000EF			call	GetHexNum			; get length
FFFC0614 000863B3			mov		$s4,$v0
FFFC0618 00120213			add		$s1,$s1,#1
FFFC061C 040000EF			call	GetHexNum			; get byte to use
                        	.0001:
FFFC0620 01030023			stb		$v0,[$s3]
FFFC0624 FFF38393			sub		$s4,$s4,#1
FFFC0628 FE704CE3			bgt		$s4,$x0,.0001
FFFC062C CD5FF06F			jmp		Monitor
                        	
                        	;------------------------------------------------------------------------------
                        	; Skip over spaces and tabs in the input buffer.
                        	;------------------------------------------------------------------------------
                        	
                        	SkipSpaces:
                        	.skip2:
FFFC0630 00014637			ldb		$t0,INBUF[$s1]
FFFC0634 10060613
FFFC0638 00460633
FFFC063C 00060D03
FFFC0640 020D4D93			xor		$t1,$t0,#' '
FFFC0644 000D8863			beq		$t1,$x0,.skip1
FFFC0648 009D4D93			xor		$t1,$t0,#'\t'
FFFC064C 000D8463			beq		$t1,$x0,.skip1
FFFC0650 00008067			ret
                        	.skip1:
FFFC0654 00120213			add		$s1,$s1,#1
FFFC0658 FC000CE3			bra		.skip2
                        	
                        	;------------------------------------------------------------------------------
                        	; Get a hex number from the input buffer.
                        	;------------------------------------------------------------------------------
                        	
                        	GetHexNum:
FFFC065C 00006813			ldi		$v0,#0							; v0 = num
FFFC0660 FF870713			sub		$sp,$sp,#8
FFFC0664 00173023			sto		$ra,[$sp]
FFFC0668 FC9FF0EF			call	SkipSpaces
                        	.next:
FFFC066C 00014637			lb		$t0,INBUF[$s1]
FFFC0670 10060613
FFFC0674 00460633
FFFC0678 00060D03
FFFC067C 03006E13			ldi		$t2,#'0'
FFFC0680 03CD4663			blt		$t0,$t2,.0001
FFFC0684 03A06E13			ldi		$t2,#'9'+1
FFFC0688 07CD4063			blt		$t0,$t2,.isDigit
FFFC068C 04106E13			ldi		$t2,#'A'
FFFC0690 01CD4E63			blt		$t0,$t2,.0001
FFFC0694 04706E13			ldi		$t2,#'F'+1
FFFC0698 03CD4063			blt		$t0,$t2,.isHexUpper
FFFC069C 06106E13			ldi		$t2,#'a'
FFFC06A0 01CD4663			blt		$t0,$t2,.0001
FFFC06A4 06706E13			ldi		$t2,#'f'+1
FFFC06A8 03CD4463			blt		$t0,$t2,.isHexLower
                        	.0001:
FFFC06AC 00073083			ldo		$ra,[$sp]
FFFC06B0 00870713			add		$sp,$sp,#8
FFFC06B4 00008067			ret
                        	.isHexUpper:
FFFC06B8 00481813			sll		$v0,$v0,#4
FFFC06BC FBFD0D13			sub		$t0,$t0,#'A'
FFFC06C0 00AD0D13			add		$t0,$t0,#10
FFFC06C4 01A86833			or		$v0,$v0,$t0
FFFC06C8 00120213			add		$s1,$s1,#1
FFFC06CC FA0000E3			bra		.next
                        	.isHexLower:
FFFC06D0 00481813			sll		$v0,$v0,#4
FFFC06D4 F9FD0D13			sub		$t0,$t0,#'a'
FFFC06D8 00AD0D13			add		$t0,$t0,#10
FFFC06DC 01A86833			or		$v0,$v0,$t0
FFFC06E0 00120213			add		$s1,$s1,#1
FFFC06E4 F80004E3			bra		.next
                        	.isDigit:
FFFC06E8 00481813			sll		$v0,$v0,#4
FFFC06EC FD0D0D13			sub		$t0,$t0,#'0'
FFFC06F0 01A86833			or		$v0,$v0,$t0
FFFC06F4 00120213			add		$s1,$s1,#1
FFFC06F8 F6000AE3			bra		.next
                        	
                        	;------------------------------------------------------------------------------
                        	; Output a word as a hex string.
                        	;------------------------------------------------------------------------------
                        	
                        	PutHexDword:
FFFC06FC FF070713			sub		$sp,$sp,#16
FFFC0700 00173023			sto		$ra,[$sp]
FFFC0704 01273423			sto		$a0,8[$sp]
FFFC0708 00095913			srl		$a0,$a0,#32
FFFC070C 010000EF			call	PutHexWord
FFFC0710 00073083			ldo		$ra,[$sp]
FFFC0714 00873903			ldo		$a0,8[$sp]
FFFC0718 01070713			add		$sp,$sp,#16	; fall through to PutHexWord
                        	
                        	;------------------------------------------------------------------------------
                        	; Output a word as a hex string.
                        	;------------------------------------------------------------------------------
                        	
                        	PutHexWord:
FFFC071C FF070713			sub		$sp,$sp,#16
FFFC0720 00173023			sto		$ra,[$sp]
FFFC0724 01273423			sto		$a0,8[$sp]
FFFC0728 01095913			srl		$a0,$a0,#16
FFFC072C 010000EF			call	PutHexHalf
FFFC0730 00073083			ldo		$ra,[$sp]
FFFC0734 00873903			ldo		$a0,8[$sp]
FFFC0738 01070713			add		$sp,$sp,#16	; fall through to PutHexHalf
                        	
                        	;------------------------------------------------------------------------------
                        	; Output a half-word (16 bits) as a hex string.
                        	;------------------------------------------------------------------------------
                        	
                        	PutHexHalf:
FFFC073C FF070713			sub		$sp,$sp,#16
FFFC0740 00173023			sto		$ra,[$sp]
FFFC0744 01273423			sto		$a0,8[$sp]
FFFC0748 00895913			srl		$a0,$a0,#8
FFFC074C 010000EF			call	PutHexByte
FFFC0750 00073083			ldo		$ra,[$sp]
FFFC0754 00873903			ldo		$a0,8[$sp]		
FFFC0758 01070713			add		$sp,$sp,#16	; fall through to PutHexByte
                        	
                        	;------------------------------------------------------------------------------
                        	; Output a byte as a hex string.
                        	;------------------------------------------------------------------------------
                        	
                        	PutHexByte:
FFFC075C FF070713			sub		$sp,$sp,#16
FFFC0760 00173023			sto		$ra,[$sp]
FFFC0764 01273423			sto		$a0,8[$sp]
FFFC0768 00495913			srl		$a0,$a0,#4		; put the high order nybble first
FFFC076C 010000EF			call	PutHexNybble
FFFC0770 00073083			ldo		$ra,[$sp]
FFFC0774 00873903			ldo		$a0,8[$sp]
FFFC0778 01070713			add		$sp,$sp,#16		; fall through to PutHexNybble
                        	
                        	;------------------------------------------------------------------------------
                        	; Output a nybble as a hex string.
                        	;------------------------------------------------------------------------------
                        	
                        	PutHexNybble:
FFFC077C FF070713			sub		$sp,$sp,#16
FFFC0780 00173023			sto		$ra,[$sp]
FFFC0784 01273423			sto		$a0,8[$sp]
FFFC0788 00F97913			and		$a0,$a0,#15		; strip off high order bits
FFFC078C 00A06D13			ldi		$t0,#10
FFFC0790 01A94A63			blt		$a0,$t0,.lt10
FFFC0794 FF690913			sub		$a0,$a0,#10
FFFC0798 04190913			add		$a0,$a0,#'A'
FFFC079C AA5FF0EF			call	Putch
FFFC07A0 00000663			bra		.0001
                        	.lt10:
FFFC07A4 03090913			add		$a0,$a0,#'0'
FFFC07A8 A99FF0EF			call	Putch
                        	.0001:
FFFC07AC 00073083			ldo		$ra,[$sp]
FFFC07B0 00873903			ldo		$a0,8[$sp]
FFFC07B4 01070713			add		$sp,$sp,#16
FFFC07B8 00008067			ret
                        	
                        	;------------------------------------------------------------------------------
                        	; PutString
                        	;    Put a string of characters to output device. Calls the 
                        	; Putch routine, so this routine also blocks if the transmitter is not
                        	; empty.
                        	;
                        	; Parameters:
                        	;		$a0 = pointer to null terminated string to put
                        	; Modifies:
                        	;		$t0 and $t1
                        	; Stack Space:
                        	;		2 words
                        	;------------------------------------------------------------------------------
                        	
                        	PutString:
FFFC07BC FF070713		sub		$sp,$sp,#16				; save link register
FFFC07C0 00173023		sto		$ra,[$sp]
FFFC07C4 01273423		sto		$a0,8[$sp]				; and argument
FFFC07C8 00096DB3		mov		$t1,$a0						; t1 = pointer to string
                        	.0001:
FFFC07CC 000DC903		ldbu	$a0,[$t1]
FFFC07D0 001D8D93		add		$t1,$t1,#1				; advance pointer to next byte
FFFC07D4 00090663		beqz	$a0,.done			; branch if done
FFFC07D8 A69FF0EF		call	Putch							; output character
FFFC07DC FE0008E3		bra		.0001
                        	.done:
FFFC07E0 00073083		ldo		$ra,[$sp]					; restore return address
FFFC07E4 00873903		ldo		$a0,8[$sp]				; and argument
FFFC07E8 01070713		add		$sp,$sp,#16
FFFC07EC 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; MicroDelay - delay for a few clock ticks
                        	;
                        	; Parameters:
                        	;		a0 = wait in ticks (50 ns intervals)
                        	;------------------------------------------------------------------------------
                        	
                        	_MicroDelay:
FFFC07F0 C0001EF3		csrrw	$t3,#$C00,$x0
                        	.0001:
FFFC07F4 C0001F73		csrrw	$t4,#$C00,$x0
FFFC07F8 41DF0F33		sub		$t4,$t4,$t3
FFFC07FC 011F5F93		srl		$t5,$t4,#17
FFFC0800 FFDC0637		stt		$t5,VIA+VIA_PARAW
FFFC0804 63C60613
FFFC0808 00060633
FFFC080C 01F62023
FFFC0810 012F2F33		slt		$t4,$t4,$a0
FFFC0814 FE0F10E3		bnez	$t4,.0001
FFFC0818 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	
                        	DumpMemmap:
FFFC081C FE870713		sub			$sp,$sp,#24
FFFC0820 00173023		sto			$ra,[$sp]
FFFC0824 01073823		sto			$v0,16[$sp]
                        		;mGetCurrentTid
FFFC0828 00096833		mov			$v0,$a0
FFFC082C 01081D93		sll			$t1,$v0,#16
                        	.again:
FFFC0830 03B0090D		mvmap		$a0,$x0,$t1
FFFC0834 01B73423		sto			$t1,8[$sp]
FFFC0838 EE5FF0EF		call		PutHexWord
FFFC083C 00D06913		ldi			$a0,#CR
FFFC0840 A01FF0EF		call		Putch
FFFC0844 00A06913		ldi			$a0,#LNFD
FFFC0848 9F9FF0EF		call		Putch
FFFC084C 00873D83		ldo			$t1,8[$sp]
FFFC0850 001D8D93		add			$t1,$t1,#1
FFFC0854 00FDFD13		and			$t0,$t1,#$F
FFFC0858 FC0D1CE3		bnez		$t0,.again
FFFC085C 00001637		or			$t1,$t1,#$FFF
FFFC0860 FFF60613
FFFC0864 01B66DB3
FFFC0868 03B0090D		mvmap		$a0,$x0,$t1
FFFC086C EB1FF0EF		call		PutHexWord
FFFC0870 00D06913		ldi			$a0,#CR
FFFC0874 9CDFF0EF		call		Putch
FFFC0878 00A06913		ldi			$a0,#LNFD
FFFC087C 9C5FF0EF		call		Putch
FFFC0880 00073083		ldo			$ra,[$sp]
FFFC0884 01073803		ldo			$v0,16[$sp]
FFFC0888 01870713		add			$sp,$sp,#24
FFFC088C 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Initialize PRNG
                        	;------------------------------------------------------------------------------
                        	_PRNGInit:
FFFC0890 00025637			stt		$x0,_randStream
FFFC0894 83060613
FFFC0898 00060633
FFFC089C 00062023
FFFC08A0 FFDC0D37			ldi		$t0,#$FFDC0000
FFFC08A4 000D0D13
FFFC08A8 00001637			stt		$x0,$0C04[$t0]			; select stream #0
FFFC08AC C0460613
FFFC08B0 01A60633
FFFC08B4 00062023
FFFC08B8 88889837			ldi		$v0,#$88888888
FFFC08BC 88880813
FFFC08C0 00001637			stt		$v0,$0C08[$t0]			; set initial m_z
FFFC08C4 C0860613
FFFC08C8 01A60633
FFFC08CC 01062023
FFFC08D0 01234837			ldi		$v0,#$01234567
FFFC08D4 56780813
FFFC08D8 00001637			stt		$v0,$0C0C[$t0]			; set initial m_w
FFFC08DC C0C60613
FFFC08E0 01A60633
FFFC08E4 01062023
FFFC08E8 00008067			ret
                        	
                        	
                        	;------------------------------------------------------------------------------
                        	; Exception processing code starts here.
                        	; As per the RISCV privilege spec, the MSB indicates an external interrupt.
                        	; The system uses cause codes 32 to 63 for external devices. This cause code
                        	; range is reserved in the RISCV spec.
                        	;------------------------------------------------------------------------------
                        	.file "boot.r5a",722
                        		code
                        		align	4                        	
                        	IRQRout:
FFFC08EC 7907ED73		csrrs	$t0,#CSR_REGSET,#15	; get regset,  ensure current regset is selected for all
FFFC08F0 004D5D13		srl		$t0,$t0,#4
FFFC08F4 003D7D13		and		$t0,$t0,#3
FFFC08F8 00AD1D13		sll		$t0,$t0,#10				; 1k stack area
FFFC08FC 20000737		ldi		$sp,#$20000000-8	; setup machine mode stack pointer (top of ram)
FFFC0900 FF870713
FFFC0904 41A70733		sub		$sp,$sp,$t0				; set stack pointer for register set
FFFC0908 34201D73		csrrw	$t0,#$342,$x0			; get cause code
FFFC090C 000D4C63		blt		$t0,$x0,.isIRQ		; irq or ecall?
FFFC0910 00806D93		ldi		$t1,#8
FFFC0914 09BD6E63		bltu	$t0,$t1,.cause0to7
FFFC0918 00B06D93		ldi		$t1,#11
FFFC091C 09ADEA63		bgtu	$t0,$t1,.cause12plus
FFFC0920 2410106F		jmp		OSCALL						; goto operating system call dispatcher
                        	.isIRQ:
FFFC0924 FFD00637		ldo		$v0,$FFD00000+440	; Display IRQ live indicator
FFFC0928 1B860613
FFFC092C 00060633
FFFC0930 00063803
FFFC0934 00180813		add		$v0,$v0,#1
FFFC0938 FFD00637		sto		$v0,$FFD00000+440
FFFC093C 1B860613
FFFC0940 00060633
FFFC0944 01063023
FFFC0948 792168F3		csrrs	$v1,#$792,#2			; check and set interrupt semaphore
FFFC094C 0028F893		and		$v1,$v1,#2
FFFC0950 00088463		beqz	$v1,.doIRQ
FFFC0954 10000073		eret
                        	.doIRQ:
FFFC0958 01FD7D93		and		$t1,$t0,#31				; interrupting device # is low order 5 bits of cause code
FFFC095C 008D9D93		sll		$t1,$t1,#8				; 256 bytes per device func table
FFFC0960 00022637		add		$t1,$t1,#DVF_Base+22*8	; load IRQ routine vector from device func table
FFFC0964 0B060613
FFFC0968 01B60DB3
FFFC096C 000DBD83		ldo		$t1,[$t1]
FFFC0970 000D8463		beq		$t1,$x0,.noIRQ		; make sure there's an address to go to
FFFC0974 000D8067		jmp		[$t1]							; call to the IRQ routine
                        	.noIRQ:
                        		; For now, clear all interrupt sources
                        		; Otherwise the system will hang on an unknown interrupt.
FFFC0978 FFDC0637		stt		$t0,VIA+VIA_PARAW
FFFC097C 63C60613
FFFC0980 00060633
FFFC0984 01A62023
FFFC0988 FFDC1637		ldt		$a1,UART+UART_TRB		; get data from Rx buffer to clear interrupt
FFFC098C A0060613
FFFC0990 00060633
FFFC0994 00062983
FFFC0998 FFDC0637		ldt		$t0,VIA+VIA_T1CL		; clear interrupt
FFFC099C 61060613
FFFC09A0 00060633
FFFC09A4 00062D03
FFFC09A8 79217073		csrrc	$x0,#$792,#2			; clear interrupt semaphore
FFFC09AC 10000073		eret
                        	.cause0to7:
                        	.cause12plus:
FFFC09B0 3000F073		csrrc	$x0,#$300,#1			; disable ints
FFFC09B4 10100073		wfi
FFFC09B8 FE000CE3		bra		.cause0to7				; and loop
                        	
                        	;------------------------------------------------------------------------------
                        	; Message strings
                        	;------------------------------------------------------------------------------
                        	
                        	msgStart:
FFFC09BC 61746550			db		"Petajon System Starting.",13
FFFC09C0 206E6F6A
FFFC09C4 74737953
FFFC09C8 53206D65
FFFC09CC 74726174
FFFC09D0 2E676E69
FFFC09D4 6E6F4D0D
                        	msgMonHelp:
FFFC09D5 696E6F4D			db		"Monitor Commands",13
FFFC09D9 20726F74
FFFC09DD 6D6D6F43
FFFC09E1 73646E61
FFFC09E5 2D20420D
FFFC09E6 202D2042			db		"B - start tiny basic",13
FFFC09EA 72617473
FFFC09EE 69742074
FFFC09F2 6220796E
FFFC09F6 63697361
FFFC09FA 2D20440D
FFFC09FB 202D2044			db		"D - dump ready que",13
FFFC09FF 706D7564
FFFC0A03 61657220
FFFC0A07 71207964
FFFC0A0B 450D6575
FFFC0A0E 202D2045			db		"E - edit memory",13
FFFC0A12 74696465
FFFC0A16 6D656D20
FFFC0A1A 0D79726F
FFFC0A1E 202D2046			db		"F - fill memory",13
FFFC0A22 6C6C6966
FFFC0A26 6D656D20
FFFC0A2A 0D79726F
FFFC0A2E 743C204B			db		"K <tid> - kill task", 13
FFFC0A32 203E6469
FFFC0A36 696B202D
FFFC0A3A 74206C6C
FFFC0A3E 0D6B7361
FFFC0A42 733C204D			db		"M <start> <length>	- dump memory",13
FFFC0A46 74726174
FFFC0A4A 6C3C203E
FFFC0A4E 74676E65
FFFC0A52 2D093E68
FFFC0A56 6D756420
FFFC0A5A 656D2070
FFFC0A5E 79726F6D
FFFC0A62 2D20530D
FFFC0A63 202D2053			db		"S - switch task",13
FFFC0A67 74697773
FFFC0A6B 74206863
FFFC0A6F 0D6B7361
FFFC0A73 61742000			db		0
                        			align 4                        	
                        	msgTaskStart:
FFFC0A74 73617420			db		" task started."
FFFC0A78 7473206B
FFFC0A7C 65747261
FFFC0A80 0A0D2E64
                        	msgCRLF:
FFFC0A82 00000A0D			db		13,10,0
FFFC0A85 00000000			align		
                        	
                        	flt50:
FFFC0A88 00000000		dw	0x00000000,0x00000000,0x00000000,0x40049000
FFFC0A8C 00000000
FFFC0A90 00000000
FFFC0A94 40049000
                        	flt20:
FFFC0A98 00000000		dw	0x00000000,0x00000000,0x00000000,0x40034000
FFFC0A9C 00000000
FFFC0AA0 00000000
FFFC0AA4 40034000
                        	flt10:
FFFC0AA8 00000000		dw	0x00000000,0x00000000,0x00000000,0x40024000
FFFC0AAC 00000000
FFFC0AB0 00000000
FFFC0AB4 40024000
                        	
                        			align		8                        	
                        	
                        	.file "fltToString.r5a",1
                        	.file "fltToString.r5a",1
                        	STRTMP		equ		$0200
                        	
                        	; -----------------------------------------------------------------------------
                        	;		$fa0 = number to convert (f18)
                        	;		$a1	= width
                        	;		$a2 = precision
                        	;		$a3 = E
                        	;		$t2 = ndx
                        	;		$s9 = exp
                        	; -----------------------------------------------------------------------------
                        	
                        	fltToString:
FFFC0AB8 00006E13			ldi		$t2,#0				; $t2 = 0
FFFC0ABC E0090953			fmv		$a0,$f18
FFFC0AC0 7F800637			and		$t0,$a0,#$7F800000
FFFC0AC4 00060613
FFFC0AC8 01267D33
FFFC0ACC 7F800DB7			ldi		$t1,#$7F800000
FFFC0AD0 000D8D93
FFFC0AD4 05BD1263			bne		$t0,$t1,.0001
FFFC0AD8 00800637			and		$t0,$a0,#$007FFFFF
FFFC0ADC FFF60613
FFFC0AE0 01267D33
FFFC0AE4 000D0E63			beq		$t0,$x0,.inf
FFFC0AE8 FFFC1637			ldt		$t0,msgNan
FFFC0AEC E7060613
FFFC0AF0 00060633
FFFC0AF4 00062D03
FFFC0AF8 21A02023			stt		$t0,STRTMP
FFFC0AFC 2E000E63			bra		.prt
                        	.inf:
FFFC0B00 FFFC1637			ldt		$t0,msgInf
FFFC0B04 E6C60613
FFFC0B08 00060633
FFFC0B0C 00062D03
FFFC0B10 21A02023			stt		$t0,STRTMP
FFFC0B14 2E000263			bra		.prt
                        	.0001:
FFFC0B18 80000637			and		$t0,$a0,#$80000000
FFFC0B1C 00060613
FFFC0B20 01267D33
FFFC0B24 000D0E63			beq		$t0,$x0,.pos
FFFC0B28 02D06D13			ldi		$t0,#'-'
FFFC0B2C 21AE0023			stb		$t0,STRTMP[$t2]
FFFC0B30 001E0E13			add		$t2,$t2,#1
FFFC0B34 80000637			and		$a0,$a0,#$7FFFFFFF
FFFC0B38 FFF60613
FFFC0B3C 01267933
                        	.pos:
FFFC0B40 00091A63			bne		$a0,$x0,.notZero
FFFC0B44 03006D13			ldi		$t0,#'0'
FFFC0B48 21AE0023			stb		$t0,STRTMP[$t2]
FFFC0B4C 200E00A3			stb		$x0,STRTMP+1[$t2]
FFFC0B50 2A000463			bra		.prt		
                        	.notZero:
FFFC0B54 00006633			mov		$s9,$x0			; exp = 0.0
                        	;	// Make a small number > 0 so we can get at the digits.
                        	;	if (dbl < 1.0) {
                        	;		while (dbl < 1.0) {
                        	;			dbl *= 1000000.0;
                        	;			exp -= 6;  
                        	;		}
                        	;	}
FFFC0B58 FFFC1637			flw		$f3,fltOne
FFFC0B5C E7460613
FFFC0B60 00060633
FFFC0B64 00062187
FFFC0B68 F0090053			fmv		$f0,$a0
FFFC0B6C A0391D53			flt		$t0,$f18,$f3
FFFC0B70 020D0463			beq		$t0,$x0,.0002
FFFC0B74 FFFC1637			flw		$f4,fltMillion
FFFC0B78 E7C60613
FFFC0B7C 00060633
FFFC0B80 00062207
                        	.0003:
FFFC0B84 A0391D53			flt		$t0,$f18,$f3
FFFC0B88 000D0863			beq		$t0,$x0,.0002
FFFC0B8C 10490953			fmul	$f18,$f18,$f4
FFFC0B90 FFA60613			sub		$s9,$s9,#6
FFFC0B94 FE0008E3			bra		.0003
                        	.0002:
                        	;	// The following is similar to using log10() and pow() functions.
                        	;	// Now dbl is >= 1.0
                        	;	// Create a number dbl2 on the same order of magnitude as dbl, but
                        	;	// less than dbl.
                        	;	dbl2 = 1.0;
                        	;	dbla = dbl2;
                        	;	if (dbl > dbl2) {	// dbl > 1.0 ?
                        	;		while (dbl2 <= dbl) {
                        	;			dbla = dbl2;
                        	;			dbl2 *= 10.0;	// increase power of 10
                        	;			exp++;
                        	;		}
                        	;		// The above loop goes one too far, we want the last value less
                        	;		// than dbl.
                        	;		dbl2 = dbla;
                        	;		exp--;
                        	;	}
FFFC0B98 FFFC1637			flw		$f1,fltOne				; $f1 = dbl2 = 1.0
FFFC0B9C E7460613
FFFC0BA0 00060633
FFFC0BA4 00062087
FFFC0BA8 38008153			fmov	$f2,$f1						; $f2 = dbla = dbl2
FFFC0BAC A1209D53			flt		$t0,$f1,$f18				; if (dbl2 < dbl)
FFFC0BB0 020D0A63			beq		$t0,$x0,.0004
FFFC0BB4 FFFC1637			flw		$f5,fltTen				; $f5 = 10.0
FFFC0BB8 E7860613
FFFC0BBC 00060633
FFFC0BC0 00062287
                        	.0006:
FFFC0BC4 A1208D53			fle		$t0,$f1,$f18				; while ($f1 <= $f18)
FFFC0BC8 000D0A63			beq		$t0,$x0,.0005
FFFC0BCC 38008153			fmov	$f2,$f1						; dbla = dbl2
FFFC0BD0 105080D3			fmul	$f1,$f1,$f5				; dbl2 *= 10.0
FFFC0BD4 00160613			add		$s9,$s9,#1				; exp++;
FFFC0BD8 FE0006E3			bra		.0006
                        	.0005:
FFFC0BDC 380100D3			fmov	$f1,$f2						; dbl2 = dbla
FFFC0BE0 FFF60613			sub		$s9,$s9,#1				; exp--;
                        	.0004:
                        	;	// For small constants < 1000000 try and spit out a whole number
                        	;    if (exp >= 0 && exp < 6) {
                        	;        digits_before_decpt = exp+1;
                        	;		exp = 0;
                        	;	}
                        	;	else if (exp >= -6)
                        	;		digits_before_decpt = 1;
                        	;	else
                        	;		digits_before_decpt = -1;
FFFC0BE4 00064E63			blt		$s9,$x0,.0007
FFFC0BE8 00606413			ldi		$s5,#6
FFFC0BEC 00865A63			bge		$s9,$s5,.0007
FFFC0BF0 FFFFE233			mov		$s1,#s0						; s1 = digits before decpt
FFFC0BF4 00120213			add		$s1,$s1,#1
FFFC0BF8 00006613			ldi		$s9,#0						; exp = 0
FFFC0BFC 00000C63			bra		.0008
                        	.0007:
FFFC0C00 FF906413			ldi		$s5,#-7
FFFC0C04 00864663			blt		$s9,$s5,.0009
FFFC0C08 00106213			ldi		$s1,#1
FFFC0C0C 00000463			bra		.0008
                        	.0009:
FFFC0C10 FFF06213			ldi		$s1,#-1
                        	.0008:
                        	;	// Spit out a leading zero before the decimal point for a small number.
                        	;    if (exp < -6) {
                        	;		buf[ndx] = '0';
                        	;		ndx++;
                        	;        buf[ndx] = '.';
                        	;        ndx++;
                        	;    }
FFFC0C14 FFA06413			ldi		$s5,#-6
FFFC0C18 00865E63			bge		$s9,$s5,.0010
FFFC0C1C 03006D13			ldi		$t0,#'0'
FFFC0C20 21AE0023			stb		$t0,STRTMP[$t2]
FFFC0C24 001E0E13			add		$t2,$t2,#1
FFFC0C28 02E06D13			ldi		$t0,#'.'
FFFC0C2C 21AE0023			stb		$t0,STRTMP[$t2]
FFFC0C30 001E0E13			add		$t2,$t2,#1
                        	.0010:
                        	;	// Now loop processing one digit at a time.
                        	;    for (nn = 0; nn < 30 && precision > 0; nn++) {
                        	;        digit = 0;
                        	;		dbla = dbl;
                        	;		// dbl is on the same order of magnitude as dbl2 so
                        	;		// a repeated subtract can be used to find the digit.
                        	;        while (dbl >= dbl2) {
                        	;            dbl -= dbl2;
                        	;            digit++;
                        	;        }
                        	;        buf[ndx] = digit + '0';
                        	;		// Now go back and perform just a single subtract and
                        	;		// a multiply to find out how much to reduce dbl by.
                        	;		// This should improve the accuracy
                        	;		if (digit > 2)
                        	;			dbl = dbla - dbl2 * digit;
                        	;        ndx++;
                        	;        digits_before_decpt--;
                        	;        if (digits_before_decpt==0) {
                        	;           buf[ndx] = '.';
                        	;           ndx++;
                        	;        }
                        	;        else if (digits_before_decpt < 0)
                        	;            precision--;
                        	;		// Shift the next digit to be tested into position.
                        	;        dbl *= 10.0;
                        	;    }
FFFC0C34 00006313			ldi		$s3,#0						; s3 = nn = 0
FFFC0C38 01E06413			ldi		$s5,#30
FFFC0C3C FFFC1637			flw		$f7,fltTen				; f7 = 10.0
FFFC0C40 E7860613
FFFC0C44 00060633
FFFC0C48 00062387
                        	.0016:
FFFC0C4C 00832D33			slt		$t0,$s3,$s5
FFFC0C50 060D0863			beq		$t0,$x0,.0011
FFFC0C54 00006413			ldi		$s5,#0
FFFC0C58 07445463			bge		$s5,$a2,.0011			; (0 < precision)
FFFC0C5C 00006393			ldi		$s4,#0						; s4 = digit = 0
FFFC0C60 38090153			fmov	$f2,$f18						; dbla = dbl
                        	.0013:
FFFC0C64 A1208D53			fle		$t0,$f1,$f18						; while (dbl2 <= dbl)
FFFC0C68 000D0863			beq		$t0,$x0,.0012
FFFC0C6C 08190953			fsub	$f18,$f18,$f1						; dbl -= dbl2
FFFC0C70 00138393			add		$s4,$s4,#1						; digit++
FFFC0C74 FE0008E3			bra		.0013
                        	.0012:
FFFC0C78 03038413			add		$s5,$s4,#'0'			; buf[ndx] = digit + '0'
FFFC0C7C 208E0023			stb		$s5,STRTMP[$t2]
FFFC0C80 00206413			ldi		$s5,#2						; if (2 < digit)
FFFC0C84 00745863			bge		$s5,$s4,.0014
FFFC0C88 D00382D3			fcvt.s.w	$f5,$s4				; f5 = digit as float
FFFC0C8C 10508353			fmul	$f6,$f1,$f5				; f6 = dbl2 * digit
FFFC0C90 08610953			fsub	$f18,$f2,$f6				; dbl = dbla - dbl2 * digit
                        	.0014:
FFFC0C94 001E0E13			add		$t2,$t2,#1				; ndx++
FFFC0C98 FFF20213			sub		$s1,$s1,#1				; digits_before_decpt--;
FFFC0C9C 00021A63			bne		$s1,$x0,.0015			; if (digits_before_decpt==0)
FFFC0CA0 02E06D13			ldi		$t0,#'.'
FFFC0CA4 21AE0023			stb		$t0,STRTMP[$t2]		; buf[ndx] = '.'
FFFC0CA8 001E0E13			add		$t2,$t2,#1				; ndx++
FFFC0CAC 00000663			bra		.0017
                        	.0015:
FFFC0CB0 00025463			bge		$s1,$x0,.0017			; else if (digits_before_decpt < 0)
FFFC0CB4 FFFA0A13			sub		$a2,$a2,#1				; 	precision--
                        	.0017:
FFFC0CB8 10790953			fmul	$f18,$f18,$f7				; dbl *= 10.0
FFFC0CBC F80008E3			bra		.0016
                        	.0011:
                        	;	// Trim trailing zeros from the number
                        	;    do {
                        	;        ndx--;
                        	;    } while(buf[ndx]=='0');
                        	;    ndx++;
                        	.0018:
FFFC0CC0 FFFE0E13			sub		$t2,$t2,#1				; ndx--
FFFC0CC4 200E0D03			ldb		$t0,STRTMP[$t2]
FFFC0CC8 030D4D13			xor		$t0,$t0,#'0'
FFFC0CCC FE0D0AE3			beq		$t0,$x0,.0018
FFFC0CD0 001E0E13			add		$t2,$t2,#1				; ndx++
                        	;	// Make sure we have at least one digit after the decimal point.
                        	;	if (buf[ndx]=='.') {
                        	;		ndx++;
                        	;		buf[ndx]='0';
                        	;		ndx++;
                        	;        buf[ndx]='\0';
                        	;	}
FFFC0CD4 200E0D03			ldb		$t0,STRTMP[$t2]
FFFC0CD8 02ED4D13			xor		$t0,$t0,#'.'
FFFC0CDC 000D1C63			bne		$t0,$x0,.0019
FFFC0CE0 001E0E13			add		$t2,$t2,#1
FFFC0CE4 03006D13			ldi		$t0,#'0'
FFFC0CE8 21AE0023			stb		$t0,STRTMP[$t2]
FFFC0CEC 001E0E13			add		$t2,$t2,#1
FFFC0CF0 200E0023			stb		$x0,STRTMP[$t2]
                        	.0019:
                        	;	// If the number is times 10^0 don't output the exponent
                        	;   if (exp==0) {
                        	;        buf[ndx]='\0';
                        	;        goto prt;
                        	;    }
FFFC0CF4 00061663			bne		$s9,$x0,.0020
FFFC0CF8 200E0023			stb		$x0,STRTMP[$t2]
FFFC0CFC 0E000E63			bra		.prt
                        	.0020:
                        	;	// Spit out +/-E
                        	;    buf[ndx] = E;
                        	;    ndx++;
                        	;    if (exp < 0) {
                        	;        buf[ndx]='-';
                        	;        ndx++;
                        	;        exp = -exp;
                        	;    }
                        	;    else {
                        	;         buf[ndx]='+';
                        	;         ndx++;
                        	;    }
FFFC0D00 04506D13			ldi		$t0,#'E'
FFFC0D04 21AE0023			stb		$t0,STRTMP[$t2]
FFFC0D08 001E0E13			add		$t2,$t2,#1
FFFC0D0C 00065C63			bge		$s9,$x0,.0021
FFFC0D10 02D06D13			ldi		$t0,#'-'
FFFC0D14 21AE0023			stb		$t0,STRTMP[$t2]
FFFC0D18 001E0E13			add		$t2,$t2,#1
FFFC0D1C 40C00633			sub		$s9,$x0,$s9			; exp = -exp
FFFC0D20 00000863			bra		.0022
                        	.0021:
FFFC0D24 02B06D13			ldi		$t0,#'+'
FFFC0D28 21AE0023			stb		$t0,STRTMP[$t2]
FFFC0D2C 001E0E13			add		$t2,$t2,#1
                        	.0022:
                        	;	// now process the exponent
                        	;    digit = 0;
                        	;    while (exp >= 1000) {
                        	;        exp -= 1000;
                        	;        digit++;
                        	;    }
FFFC0D30 00006393			ldi		$s4,#0
FFFC0D34 3E806D13			ldi		$t0,#1000
                        	.0025:
FFFC0D38 01A65463			bge		$s9,$t0,.0023
FFFC0D3C 00000863			bra		.0024
                        	.0023:
FFFC0D40 41A60633			sub		$s9,$s9,$t0
FFFC0D44 00138393			add		$s4,$s4,#1
FFFC0D48 FE0008E3			bra		.0025
                        	.0024:
                        	;	d1 = digit;
                        	;	if (digit) {
                        	;		buf[ndx] = digit + '0';
                        	;		ndx++;
                        	;	}
FFFC0D4C 0003E4B3			mov		$s6,$s4					; s6 = d1 = s4 = digit
FFFC0D50 00039863			bne		$s4,$x0,.0026
FFFC0D54 03038D13			add		$t0,$s4,#'0'
FFFC0D58 21AE0023			stb		$t0,STRTMP[$t2]
FFFC0D5C 001E0E13			add		$t2,$t2,#1
                        	.0026:
                        	;	digit = 0;
                        	;    while (exp >= 100) {
                        	;        exp -= 100;
                        	;        digit++;
                        	;    }
FFFC0D60 00006393			ldi		$s4,#0
FFFC0D64 06406D13			ldi		$t0,#100
                        	.0027:
FFFC0D68 01A65463			bge		$s9,$t0,.0028
FFFC0D6C 00000863			bra		.0029
                        	.0028:
FFFC0D70 41A60633			sub		$s9,$s9,$t0
FFFC0D74 00138393			add		$s4,$s4,#1
FFFC0D78 FE0008E3			bra		.0027
                        	.0029:	
                        	;	d2 = digit;
                        	;	if (digit==0 && d1==0)
                        	;		;
                        	;	else {
                        	;		buf[ndx] = digit + '0';
                        	;		ndx++;
                        	;	}
FFFC0D7C 0003E533			mov		$s7,$s4				; $s7 = d2
FFFC0D80 00049463			bne		$s6,$x0,.0030
FFFC0D84 00038863			beq		$s4,$x0,.0031
                        	.0030:
FFFC0D88 03038D13			add		$t0,$s4,#'0'
FFFC0D8C 21AE0023			stb		$t0,STRTMP[$t2]
FFFC0D90 001E0E13			add		$t2,$t2,#1
                        	.0031:
                        	;	digit = 0;
                        	;    while (exp >= 10) {
                        	;        exp -= 10;
                        	;        digit++;
                        	;    }
FFFC0D94 00006393			ldi		$s4,#0
FFFC0D98 00A06D13			ldi		$t0,#10
                        	.0032:
FFFC0D9C 01A65463			bge		$s9,$t0,.0034
FFFC0DA0 00000863			bra		.0035
                        	.0034:
FFFC0DA4 41A60633			sub		$s9,$s9,$t0
FFFC0DA8 00138393			add		$s4,$s4,#1
FFFC0DAC FE0008E3			bra		.0032
                        	.0035:	
                        	;	d3 = digit;
                        	;	if (digit==0 && d1==0 && d2==0)
                        	;		;
                        	;	else {
                        	;		buf[ndx] = digit + '0';
                        	;		ndx++;
                        	;	}
FFFC0DB0 0003E5B3			mov		$s8,$s4
FFFC0DB4 00039663			bne		$s4,$x0,.0036
FFFC0DB8 00049463			bne		$s6,$x0,.0036
FFFC0DBC 00050863			beq		$s7,$x0,.0037
                        	.0036:
FFFC0DC0 03038D13			add		$t0,$s4,#'0'
FFFC0DC4 21AE0023			stb		$t0,STRTMP[$t2]
FFFC0DC8 001E0E13			add		$t2,$t2,#1
                        	.0037:
                        	;	digit = 0;
                        	;    while (exp >= 1) {
                        	;        exp -= 1;
                        	;        digit++;
                        	;    }
FFFC0DCC 00006393			ldi		$s4,#0
FFFC0DD0 00106D13			ldi		$t0,#1
                        	.0038:
FFFC0DD4 01A65463			bge		$s9,$t0,.0040
FFFC0DD8 00000863			bra		.0039
                        	.0040:
FFFC0DDC 41A60633			sub		$s9,$s9,$t0
FFFC0DE0 00138393			add		$s4,$s4,#1
FFFC0DE4 FE0008E3			bra		.0038
                        	.0039:	
                        	;    buf[ndx] = digit + '0';
                        	;    ndx++;
                        	;    buf[ndx] = '\0';
FFFC0DE8 03038D13			add		$t0,$s4,#'0'
FFFC0DEC 21AE0023			sb		$t0,STRTMP[$t2]
FFFC0DF0 001E0E13			add		$t2,$t2,#1
FFFC0DF4 200E0023			sb		$x0,STRTMP[$t2]
                        	;	// Now pad the number on the left or right as requested.
                        	.prt:
                        	;    // pad left
                        	;    if (width > 0) {
                        	;        if (ndx < width) {
                        	;            for (nn = 39; nn >= width-ndx; nn--)
                        	;                buf[nn] = buf[nn-(width-ndx)];
                        	;            for (; nn >= 0; nn--)
                        	;                buf[nn] = ' ';
                        	;        }
                        	;    }
FFFC0DF8 0409C663			blt		$a1,$x0,.0041
FFFC0DFC 04098463			beq		$a1,$x0,.0041
FFFC0E00 013E4463			blt		$t2,$a1,.0042
FFFC0E04 04000063			bra		.0041
                        	.0042:
FFFC0E08 02706313			ldi		$s3,#39					; s3 = nn
FFFC0E0C 41C98D33			sub		$t0,$a1,$t2			; width-ndx
                        	.0045:
FFFC0E10 01A35463			bge		$s3,$t0,.0043
FFFC0E14 00000C63			bra		.0044
                        	.0043:
FFFC0E18 41A304B3			sub		$s6,$s3,$t0			; nn-(width-ndx)
FFFC0E1C 20030D83			ldb		$t1,STRTMP[$s3]
FFFC0E20 21B48023			stb		$t1,STRTMP[$s6]
FFFC0E24 FFF30313			sub		$s3,$s3,#1
FFFC0E28 FE0004E3			bra		.0045
                        	.0044:
FFFC0E2C 02006D13			ldi		$t0,#' '
                        	.0048:
FFFC0E30 00035463			bge		$s3,$x0,.0046
FFFC0E34 00000863			bra		.0047
                        	.0046:
FFFC0E38 21A30023			stb		$t0,STRTMP[$s3]
FFFC0E3C FFF30313			sub		$s3,$s3,#1
FFFC0E40 FE0008E3			bra		.0048
                        	.0047:
                        	.0041:
                        	;    // pad right
                        	;    if (width < 0) {
                        	;        width = -width;
                        	;        while (ndx < width) {
                        	;            buf[ndx]=' ';
                        	;            ndx++;
                        	;        }
                        	;        buf[ndx]='\0';
                        	;    }
                        	;    return (ndx);
FFFC0E44 0209D063			bge		$a1,$x0,.0050
FFFC0E48 413009B3			sub		$a1,$x0,$a1
FFFC0E4C 02006D13			ldi		$t0,#' '
                        	.0052:
FFFC0E50 013E5863			bge		$t2,$a1,.0051
FFFC0E54 21AE0023			stb		$t0,STRTMP[$t2]
FFFC0E58 001E0E13			add		$t2,$t2,#1
FFFC0E5C FE000AE3			bra		.0052
                        	.0051:
FFFC0E60 200E0023			stb		$x0,STRTMP[$t2]
                        	.0050:
FFFC0E64 000E6833			mov		$v0,$t2
FFFC0E68 00008067			ret
                        	
                        			align	4                        	
                        	msgInf:
FFFC0E6C 00666E49			db	"Inf",0
                        	msgNan:
FFFC0E70 006E614E			db	"Nan",0
                        	fltOne:
FFFC0E74 3F800000			dw		$3F800000					; 1.0
                        	fltTen:
FFFC0E78 41200000			dw		$41200000					; 10.0
                        	fltMillion:
FFFC0E7C 49742400			dw		$49742400					; 1,000,000
                        	
                        	.file "boot.r5a",1
                        	.file "boot.r5a",1
                        	.file "../bios/bios.r5a",1
                        	.file "../bios/bios.r5a",1
                        	; ============================================================================
                        	;        __
                        	;   \\__/ o\    (C) 2020  Robert Finch, Stratford
                        	;    \  __ /    All rights reserved.
                        	;     \/_//     robfinch<remove>@finitron.ca
                        	;       ||
                        	;  
                        	;
                        	; This source file is free software: you can redistribute it and/or modify 
                        	; it under the terms of the GNU Lesser General Public License as published 
                        	; by the Free Software Foundation, either version 3 of the License, or     
                        	; (at your option) any later version.                                      
                        	;                                                                          
                        	; This source file is distributed in the hope that it will be useful,      
                        	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                        	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                        	; GNU General Public License for more details.                             
                        	;                                                                          
                        	; You should have received a copy of the GNU General Public License        
                        	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                        	;
                        	; ============================================================================
                        	
                        	.file "../bios/bios.r5a",25
                        		code
                        		align	2                        	
                        	BIOSCallTbl:
FFFC0E80 0E8C0E88		dh		BIOS_ClearScreen
FFFC0E82 0E900E8C		dh		BIOS_HomeCursor
FFFC0E84 0E940E90		dh		BIOS_VideoPutChar
FFFC0E86 006F0E94		dh		BIOS_VideoPutString
                        	
                        		align	4                        	
                        	BIOS_ClearScreen:
FFFC0E88 3C10006F		jmp		VideoClearScreen
                        	BIOS_HomeCursor:
FFFC0E8C 4010006F		jmp		VideoHomeCursor
                        	BIOS_VideoPutChar:
FFFC0E90 45D0006F		jmp		VideoPutChar
                        	BIOS_VideoPutString:
FFFC0E94 7450006F		jmp		VideoPutString
                        	
                        	
                        	
                        	
                        	
                        	
                        	.file "boot.r5a",1
                        	.file "boot.r5a",1
                        	.file "../bios/mem.r5a",1
                        	.file "../bios/mem.r5a",1
                        	; ============================================================================
                        	;        __
                        	;   \\__/ o\    (C) 2020  Robert Finch, Stratford
                        	;    \  __ /    All rights reserved.
                        	;     \/_//     robfinch<remove>@finitron.ca
                        	;       ||
                        	;  
                        	;
                        	; This source file is free software: you can redistribute it and/or modify 
                        	; it under the terms of the GNU Lesser General Public License as published 
                        	; by the Free Software Foundation, either version 3 of the License, or     
                        	; (at your option) any later version.                                      
                        	;                                                                          
                        	; This source file is distributed in the hope that it will be useful,      
                        	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                        	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                        	; GNU General Public License for more details.                             
                        	;                                                                          
                        	; You should have received a copy of the GNU General Public License        
                        	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                        	;
                        	; ============================================================================
                        	
                        	.file "../bios/mem.r5a",25
                        			code	18 bits
                        			align	4                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	
                        	MMUInit:
FFFC0E98 FF870713			sub		$sp,$sp,#8
FFFC0E9C 00173023			sto		$ra,[$sp]
FFFC0EA0 00002D37			ldi		$t0,#8189				; set number of available pages (3 pages already allocated)
FFFC0EA4 FFDD0D13
FFFC0EA8 00025637			stt		$t0,NPAGES
FFFC0EAC 82860613
FFFC0EB0 00060633
FFFC0EB4 01A62023
                        			; Free all memory for all tasks			
FFFC0EB8 00006D13			ldi		$t0,#$00
FFFC0EBC 03F06F13			ldi		$t4,#MAX_TID		; task id
                        	.0004:
FFFC0EC0 00006D93			ldi		$t1,#$000				; regno
FFFC0EC4 00001E37			ldi		$t2,#PAGES_PER_MAP	; number of registers to update
FFFC0EC8 000E0E13
FFFC0ECC 00306E93			ldi		$t3,#3					; number of pages pre-allocated
                        	.0001:
FFFC0ED0 010F1213			sll		$s1,$t4,#16			; put tid in place
FFFC0ED4 01B26233			or		$s1,$s1,$t1			; or in page number
FFFC0ED8 024D000D			mvmap	$x0,$t0,$s1
FFFC0EDC 001D0D13			add		$t0,$t0,#$01
FFFC0EE0 001D8D93			add		$t1,$t1,#$01		; increment page number
FFFC0EE4 01DDE463			bltu	$t1,$t3,.0003
FFFC0EE8 00006D33			mov		$t0,$x0					; mark pages unallocated
                        	.0003:
FFFC0EEC FFFE0E13			sub		$t2,$t2,#1
FFFC0EF0 FE0E10E3			bne		$t2,$x0,.0001
FFFC0EF4 FFFF0F13			sub		$t4,$t4,#1
FFFC0EF8 FC0F54E3			bge		$t4,$x0,.0004
                        			; Now ensure all pages in PAM are marked free
FFFC0EFC 00002D37			ldi		$t0,#8191
FFFC0F00 FFFD0D13
                        	.0006:
FFFC0F04 0A0D000D			pfree	$t0
FFFC0F08 FFFD0D13			sub		$t0,$t0,#1
FFFC0F0C FE0D5CE3			bge		$t0,$x0,.0006
                        			; allocate last page for system stack
FFFC0F10 00001DB7			ldi		$t1,#$FFF				
FFFC0F14 FFFD8D93
FFFC0F18 00002D37			ldi		$t0,#$1FFF
FFFC0F1C FFFD0D13
FFFC0F20 03BD000D			mvmap	$x0,$t0,$t1
                        	
                        			; Now setup segment registers
FFFC0F24 00006D13			ldi		$t0,#$0
FFFC0F28 00706D93			ldi		$t1,#$07				; t1 = value to load RWX=111, base = 0
                        	.0002:
FFFC0F2C 01AD800D			mvseg	$x0,$t1,$t0			; move to the segment register identifed by t0
FFFC0F30 001D0D13			add		$t0,$t0,#1			; pick next segment register
FFFC0F34 010D2E13			slt		$t2,$t0,#16			; 16 segment regs
FFFC0F38 FE0E1AE3			bne		$t2,$x0,.0002
FFFC0F3C 00073083			ldo		$ra,[$sp]
FFFC0F40 00870713			add		$sp,$sp,#8
FFFC0F44 00008067			ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Find a run of buckets available for mapping virtual to physical addresses.
                        	;
                        	; Parameters:
                        	;		a0 = mid
                        	;		a1 = number of pages required.
                        	; Modifies:
                        	;		t1,t2,t3,t5
                        	; Returns:
                        	;		v0 = starting bucket number (includes ASID), -1 if no run found
                        	;------------------------------------------------------------------------------
                        	
                        	FindRun:
FFFC0F48 03F97E93		and			$t3,$a0,#MAX_MID	; t3 = mid
FFFC0F4C 010E9E93		sll			$t3,$t3,#16				; shift into usable position
FFFC0F50 000EEE33		mov			$t2,$t3						; t2 = map entry number
FFFC0F54 003E6E13		or			$t2,$t2,#OSPAGES	; start looking at page 3 (others are for OS)
FFFC0F58 00002FB7		ldi			$t5,#8191					; max number of pages - 1
FFFC0F5C FFFF8F93
FFFC0F60 01DFEFB3		or			$t5,$t5,$t3				; t5 = max in ASID
                        	.0003:
FFFC0F64 00006D93		ldi			$t1,#0						; t1 = count of consecutive empty buckets
                        	.0001:
FFFC0F68 03C0080D		mvmap		$v0,$x0,$t2				; get map entry into v0
FFFC0F6C 00080A63		beqz		$v0,.empty0				; is it empty?
FFFC0F70 001E0E13		add			$t2,$t2,#1
FFFC0F74 FFFE6AE3		bltu		$t2,$t5,.0001
                        	.0002:
FFFC0F78 FFF06813		ldi			$v0,#-1						; got here so no run was found
FFFC0F7C 00008067		ret
                        	.empty0:
FFFC0F80 000E6EB3		mov			$t3,$t2						; save first empty bucket
                        	.empty1:
FFFC0F84 FFFE7AE3		bgeu		$t2,$t5,.0002
FFFC0F88 001D8D93		add			$t1,$t1,#1
FFFC0F8C 013DFA63		bgeu		$t1,$a1,.foundEnough
FFFC0F90 001E0E13		add			$t2,$t2,#1				; next bucket
FFFC0F94 03C0080D		mvmap		$v0,$x0,$t2				; get map entry
FFFC0F98 FE0806E3		beqz		$v0,.empty1
FFFC0F9C FC0004E3		bra			.0003							; go back and find another run
                        	.foundEnough:
FFFC0FA0 000EE833		mov			$v0,$t3						; v0 = start of run
FFFC0FA4 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Parameters:
                        	;		a0 = tid
                        	;		a1 = amount of memory to allocate
                        	; Modifies:
                        	;		a1,t0
                        	; Returns:
                        	;		v1 = pointer to allocated memory in virtual address space.
                        	;		v0 = E_Ok for success, E_NotAlloc otherwise
                        	;------------------------------------------------------------------------------
                        	;
                        	AllocInCurrentAS:
                        		
FFFC0FA8 18101873		csrrw	v0,#$181,x0
FFFC0FAC 03F87813		and		v0,v0,#MAX_TID
FFFC0FB0 00086933	mov			$a0,$v0
                        	Alloc:
FFFC0FB4 FE070713		sub			$sp,$sp,#32
FFFC0FB8 00173023		sto			$ra,[$sp]
FFFC0FBC 00473423		sto			$s1,8[$sp]				; these regs must be saved
FFFC0FC0 00573823		sto			$s2,16[$sp]
FFFC0FC4 00673C23		sto			$s3,24[$sp]
                        		; First check if there are enough pages available in the system.
FFFC0FC8 00010637		add			$v0,$a1,#PAGESZ-1	; v0 = round memory request
FFFC0FCC FFF60613
FFFC0FD0 01360833
FFFC0FD4 01085813		srl			$v0,$v0,#LOG_PGSZ	; v0 = convert to pages required
FFFC0FD8 00025637		ldo			$t0,NPAGES				; check number of pages available
FFFC0FDC 82860613
FFFC0FE0 00060633
FFFC0FE4 00063D03
FFFC0FE8 010D7663		bleu		$v0,$t0,.enough
                        	.noRun2:
FFFC0FEC 00006893		ldi			$v1,#0						; not enough, return null
FFFC0FF0 06000263		bra			.noRun
                        	.enough:
                        		; There are enough pages, but is there a run long enough in map space?
FFFC0FF4 000862B3		mov			$s2,$v0						; save required # pages
FFFC0FF8 000869B3		mov			$a1,$v0
FFFC0FFC F4DFF0EF		call		FindRun						; find a run of available slots
FFFC1000 FE0846E3		blt			$v0,$x0,.noRun2
                        		; Now there are enough pages, and a run available, so allocate
FFFC1004 00086233		mov			$s1,$v0						; s1 = start of run
FFFC1008 00025637		ldo			$s3,NPAGES				; decrease number of pages available in system
FFFC100C 82860613
FFFC1010 00060633
FFFC1014 00063303
FFFC1018 40530333		sub			$s3,$s3,$s2
FFFC101C 00025637		sto			$s3,NPAGES
FFFC1020 82860613
FFFC1024 00060633
FFFC1028 00663023
FFFC102C 00086333		mov			$s3,$v0						; s3 = start of run
                        	.0001:
FFFC1030 0800080D		palloc	$v0								; allocate a page (cheat and use hardware)
FFFC1034 02080063		beqz		$v0,.noRun
FFFC1038 0268000D		mvmap		$x0,$v0,$s3				; map the page
FFFC103C 00130313		add			$s3,$s3,#1				; next bucket
FFFC1040 FFF28293		sub			$s2,$s2,#1
FFFC1044 FE5046E3		bgt			$s2,$x0,.0001
FFFC1048 01021893		sll			$v1,$s1,#LOG_PGSZ	; v1 = virtual address of allocated mem.
FFFC104C 00006813		ldi			$v0,#E_Ok
FFFC1050 00000463		bra			.xit
                        	.noRun:
FFFC1054 00906813		ldi			$v0,#E_NotAlloc
                        	.xit
FFFC1058 00073083		ldo			$ra,[$sp]					; restore saved regs
FFFC105C 00873203		ldo			$s1,8[$sp]
FFFC1060 01073283		ldo			$s2,16[$sp]
FFFC1064 01873303		ldo			$s3,24[$sp]
FFFC1068 02070713		add			$sp,$sp,#32
FFFC106C 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Allocate the stack page for a task. The stack is located at the highest
                        	; virtual address ($7FC00).
                        	;
                        	; Parameters:
                        	;		a0 = mid to allocate for
                        	;	Returns:
                        	;		v0 = physical address, 0 if unsuccessful
                        	;		v1 = virtual address, not valid unless successful
                        	;------------------------------------------------------------------------------
                        	
                        	AllocStack:
FFFC1070 FF070713		sub			$sp,$sp,#16
FFFC1074 00173023		sto			$ra,[$sp]
FFFC1078 01273423		sto			$a0,8[$sp]
FFFC107C 01091893		sll			$v1,$a0,#16			; 
FFFC1080 00001637		or			$v1,$v1,#PAGES_PER_MAP-1	; last page of memory is for stack
FFFC1084 FFF60613
FFFC1088 011668B3
FFFC108C 0310080D		mvmap		$v0,$x0,$v1			; check if stack already allocated
FFFC1090 00081E63		bnez		$v0,.0001
FFFC1094 0800080D		palloc	$v0							; allocate a page
FFFC1098 00086933		mov			$a0,$v0
FFFC109C EA0FF0EF		call		PutHexHalf
FFFC10A0 00873903		ldo			$a0,8[$sp]
FFFC10A4 00080E63		beqz		$v0,.xit		; success?
FFFC10A8 0318000D		mvmap		$x0,$v0,$v1
                        	.0001:
FFFC10AC 00001637		and			$v1,$v1,#4095
FFFC10B0 FFF60613
FFFC10B4 011678B3
FFFC10B8 01081813		sll			$v0,$v0,#LOG_PGSZ			; convert pages to addresses
FFFC10BC 01089893		sll			$v1,$v1,#LOG_PGSZ
                        	.xit:
FFFC10C0 00073083		ldo			$ra,[$sp]
FFFC10C4 01070713		add			$sp,$sp,#16
FFFC10C8 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; This routine will de-allocate all the pages associated with a map including
                        	; the stack.
                        	;
                        	; Parameters:
                        	;		a0 = mid to free memory for
                        	;	Modifies:
                        	;		t0,t1,t3,t4
                        	; Returns:
                        	;		none
                        	;------------------------------------------------------------------------------
                        	
                        	FreeAll:
FFFC10CC 00006E93		ldi			$t3,#0
FFFC10D0 01091F13		sll			$t4,$a0,#16
                        	.nxt:
FFFC10D4 00001637		slt			$t1,$t3,#PAGES_PER_MAP		; number of buckets to check
FFFC10D8 00060613
FFFC10DC 040D8863		beqz		$t1,.0001
FFFC10E0 003F0637		and			$t4,$t4,#$3F0000
FFFC10E4 00060613
FFFC10E8 01E67F33
FFFC10EC 01DF6F33		or			$t4,$t4,$t3			; combine mid and bucket number
FFFC10F0 00006D13		ldi			$t0,#0					; new page number to set (indicates free)
FFFC10F4 03ED0D0D		mvmap		$t0,$t0,$t4			; get page mapping and set to zero
FFFC10F8 001E8E93		add			$t3,$t3,#1			; advance to next bucket
FFFC10FC FC0D0CE3		beqz		$t0,.nxt				; 0 = no map in this bucket
FFFC1100 0A0D000D		pfree		$t0							; free the page
FFFC1104 00025637		ldo			$t0,NPAGES			; update the number of available pages
FFFC1108 82860613
FFFC110C 00060633
FFFC1110 00063D03
FFFC1114 001D0D13		add			$t0,$t0,#1
FFFC1118 00025637		sto			$t0,NPAGES
FFFC111C 82860613
FFFC1120 00060633
FFFC1124 01A63023
FFFC1128 FA0006E3		bra			.nxt
                        	.0001:
FFFC112C 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Convert a virtual address to a physical one
                        	;
                        	; Parameters:
                        	;		a0 = map id
                        	;		a1 = virtual address to convert
                        	; Modifies:
                        	;		t0
                        	; Returns:
                        	;		v0 = physical address
                        	;------------------------------------------------------------------------------
                        	
                        	VirtToPhys:
FFFC1130 FF000837		ldi		$v0,#$FF000000
FFFC1134 00080813
FFFC1138 0309F663		bgeu	$a1,$v0,.notMapped
FFFC113C 0109DD13		srl		$t0,$a1,#LOG_PGSZ		; convert virt to page
FFFC1140 01091813		sll		$v0,$a0,#16
FFFC1144 01A86833		or		$v0,$v0,$t0					; and in mid
FFFC1148 0300080D		mvmap	$v0,$x0,$v0					; get the translation
FFFC114C 01081813		sll		$v0,$v0,#LOG_PGSZ		; convert page to address
FFFC1150 00010637		and		$t0,$a1,#$FFFF			; insert LSB's
FFFC1154 FFF60613
FFFC1158 01367D33
FFFC115C 01A86833		or		$v0,$v0,$t0
FFFC1160 00008067		ret
                        	.notMapped:
FFFC1164 0009E833		mov		$v0,$a1
FFFC1168 00008067		ret
                        	.file "boot.r5a",1
                        	.file "boot.r5a",1
                        	.file "../fmtk/pic.r5a",1
                        	.file "../fmtk/pic.r5a",1
                        	; ============================================================================
                        	;        __
                        	;   \\__/ o\    (C) 2020  Robert Finch, Stratford
                        	;    \  __ /    All rights reserved.
                        	;     \/_//     robfinch<remove>@finitron.ca
                        	;       ||
                        	;  
                        	;
                        	; This source file is free software: you can redistribute it and/or modify 
                        	; it under the terms of the GNU Lesser General Public License as published 
                        	; by the Free Software Foundation, either version 3 of the License, or     
                        	; (at your option) any later version.                                      
                        	;                                                                          
                        	; This source file is distributed in the hope that it will be useful,      
                        	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                        	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                        	; GNU General Public License for more details.                             
                        	;                                                                          
                        	; You should have received a copy of the GNU General Public License        
                        	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                        	;
                        	; ============================================================================
                        	;
                        	;  0x80    - irq control for irq #0
                        	;  0x84    - irq control for irq #1
                        	;            bits 0 to 7  = cause code to issue
                        	;            bits 13 to 15 = irq level to issue
                        	;            bit 16 = irq enable
                        	;            bit 17 = edge sensitivity
                        	
                        	PIC				equ		$FFDC0F00
                        	PIC_CH16	equ		$C0
                        	PIC_CH28	equ		$F0
                        	PIC_CH31	equ		$FC
                        	
                        	PicInit:
FFFC116C FFDC1DB7		ldi		$t1,#PIC					; t1 = address of pic
FFFC1170 F00D8D93
FFFC1174 0001ED37		ldi		$t0,#$0001E025		; level sensitive cause 37, interrupt enabled
FFFC1178 025D0D13
FFFC117C 0DADA023		stt		$t0,PIC_CH16[$t1]
FFFC1180 0001ED37		ldi		$t0,#$0001E021		; level sensitive cause 33, interrupt enabled
FFFC1184 021D0D13
FFFC1188 0FADA823		stt		$t0,PIC_CH28[$t1]
FFFC118C 0001ED37		ldi		$t0,#$0001E02F		; level sensitive cause 47, interrupt enabled
FFFC1190 02FD0D13
FFFC1194 0FADAE23		stt		$t0,PIC_CH31[$t1]
FFFC1198 00008067		ret
                        	.file "boot.r5a",1
                        	.file "boot.r5a",1
                        	.file "../fmtk/serial.r5a",1
                        	.file "../fmtk/serial.r5a",1
                        	; ============================================================================
                        	;        __
                        	;   \\__/ o\    (C) 2020  Robert Finch, Stratford
                        	;    \  __ /    All rights reserved.
                        	;     \/_//     robfinch<remove>@finitron.ca
                        	;       ||
                        	;  
                        	;
                        	; This source file is free software: you can redistribute it and/or modify 
                        	; it under the terms of the GNU Lesser General Public License as published 
                        	; by the Free Software Foundation, either version 3 of the License, or     
                        	; (at your option) any later version.                                      
                        	;                                                                          
                        	; This source file is distributed in the hope that it will be useful,      
                        	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                        	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                        	; GNU General Public License for more details.                             
                        	;                                                                          
                        	; You should have received a copy of the GNU General Public License        
                        	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                        	;
                        	; ============================================================================
                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	; Device command 
                        	;
                        	.file "../fmtk/serial.r5a",29
                        		code
FFFC119C 00000000		align	
                        	
                        	SerialFuncTbl:
FFFC11A0 00000000		dco		0							; no operation
FFFC11A4 00000000
FFFC11A8 00000000		dco		0							; setup
FFFC11AC 00000000
FFFC11B0 00000000		dco		0							; initialize
FFFC11B4 00000000
FFFC11B8 00000000		dco		0							; status
FFFC11BC 00000000
FFFC11C0 00000000		dco		0							; media check
FFFC11C4 00000000
FFFC11C8 00000000		dco		0							; build BPB
FFFC11CC 00000000
FFFC11D0 00000000		dco		0							; open
FFFC11D4 00000000
FFFC11D8 00000000		dco		0							; close
FFFC11DC 00000000
FFFC11E0 FFFC13FC		dco		SerialGetChar	; get char
FFFC11E4 00000000
FFFC11E8 FFFC14CC		dco		SerialPeekChar
FFFC11EC 00000000
FFFC11F0 00000000		dco		0							; get char direct
FFFC11F4 00000000
FFFC11F8 FFFC1534		dco		SerialPeekCharDirect	; peek char direct
FFFC11FC 00000000
FFFC1200 00000000		dco		0							; input status
FFFC1204 00000000
FFFC1208 FFFC1590		dco		SerialPutChar
FFFC120C 00000000
FFFC1210 00000000		dco		0							; reserved
FFFC1214 00000000
FFFC1218 00000000		dco		0							; set position
FFFC121C 00000000
FFFC1220 00000000		dco		0							; read block
FFFC1224 00000000
FFFC1228 00000000		dco		0							; write block
FFFC122C 00000000
FFFC1230 00000000		dco		0							; verify block
FFFC1234 00000000
FFFC1238 00000000		dco		0							; output status
FFFC123C 00000000
FFFC1240 00000000		dco		0							; flush input
FFFC1244 00000000
FFFC1248 00000000		dco		0							; flush output
FFFC124C 00000000
FFFC1250 FFFC1644		dco		SerialIRQ			; IRQ routine
FFFC1254 00000000
FFFC1258 00000000		dco		0							; Is removable
FFFC125C 00000000
FFFC1260 00000000		dco		0							; ioctrl read
FFFC1264 00000000
FFFC1268 00000000		dco		0							; ioctrl write
FFFC126C 00000000
FFFC1270 00000000		dco		0							; output until busy
FFFC1274 00000000
FFFC1278 00000000		dco		0							; 27
FFFC127C 00000000
FFFC1280 00000000		dco		0
FFFC1284 00000000
FFFC1288 00000000		dco		0
FFFC128C 00000000
FFFC1290 00000000		dco		0
FFFC1294 00000000
FFFC1298 00000000		dco		0							; 31
FFFC129C 00000000
                        	
                        	MAX_DEV_OP			EQU		31
                        	
                        	;------------------------------------------------------------------------------
                        	; Initialize serial port.
                        	;
                        	; Modifies:
                        	;		$t0
                        	;------------------------------------------------------------------------------
                        	
                        	SerialInit:
FFFC12A0 FF870713		sub		$sp,$sp,#8
FFFC12A4 00173023		sto		$ra,[$sp]
FFFC12A8 00506913		ldi		$a0,#5							; serial device
FFFC12AC FFFC19B7		ldi		$a1,#SerialFuncTbl
FFFC12B0 1A098993
FFFC12B4 218020EF		call	CopyDevFuncTbl
FFFC12B8 00026637		stt		$x0,SerHeadRcv
FFFC12BC 80060613
FFFC12C0 00060633
FFFC12C4 00062023
FFFC12C8 00026637		stt		$x0,SerTailRcv
FFFC12CC 80460613
FFFC12D0 00060633
FFFC12D4 00062023
FFFC12D8 00026637		stt		$x0,SerHeadXmit
FFFC12DC 80860613
FFFC12E0 00060633
FFFC12E4 00062023
FFFC12E8 00026637		stt		$x0,SerTailXmit
FFFC12EC 80C60613
FFFC12F0 00060633
FFFC12F4 00062023
FFFC12F8 00026637		stb		$x0,SerRcvXon
FFFC12FC 81060613
FFFC1300 00060633
FFFC1304 00060023
FFFC1308 00026637		stb		$x0,SerRcvXoff
FFFC130C 81160613
FFFC1310 00060633
FFFC1314 00060023
FFFC1318 00906D13		ldi		$t0,#$09						; dtr,rts active, rxint enabled, no parity
FFFC131C FFDC1637		stt		$t0,UART+8
FFFC1320 A0860613
FFFC1324 00060633
FFFC1328 01A62023
FFFC132C 00060D37		ldi		$t0,#$0006001E			; reset the fifo's
FFFC1330 01ED0D13
FFFC1334 FFDC1637		stt		$t0,UART+12
FFFC1338 A0C60613
FFFC133C 00060633
FFFC1340 01A62023
FFFC1344 01E06D13		ldi		$t0,#$0000001E			; baud 9600, 1 stop bit, 8 bit, internal baud gen
FFFC1348 FFDC1637		stt		$t0,UART+12
FFFC134C A0C60613
FFFC1350 00060633
FFFC1354 01A62023
FFFC1358 00073083		ldo		$ra,[$sp]
FFFC135C 00870713		add		$sp,$sp,#8
FFFC1360 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	
                        	SerialServiceInit:
FFFC1364 00106913		ldi		$a0,#1			; start task
FFFC1368 40006993		ldi		$a1,#1024		; memory required
FFFC136C FFFC1A37		ldi		$a2,#SerialService
FFFC1370 37CA0A13
FFFC1374 00000073		ecall
FFFC1378 00008067		ret
                        	SerialService:
FFFC137C DE870713		sub		$sp,$sp,#512+24
FFFC1380 00E06913		ldi		$a0,#14			; get current tid
FFFC1384 00000073		ecall
FFFC1388 20470A13		add		$a2,$sp,#516
FFFC138C 000869B3		mov		$a1,$v0
FFFC1390 00606913		ldi		$a0,#6			; alloc mailbox
FFFC1394 00000073		ecall
                        	
                        	SerialServiceLoop:
FFFC1398 00A06913		ldi		$a0,#10			; waitmsg
FFFC139C 20470993		add		$a1,$sp,#516
FFFC13A0 20870A13		add		$a2,$sp,#520
FFFC13A4 20C70A93		add		$a3,$sp,#524
FFFC13A8 21070B13		add		$a4,$sp,#528
FFFC13AC FFF06B93		ldi		$a5,#-1
FFFC13B0 00000073		ecall
                        	
FFFC13B4 00072D03		lw		$t0,[$sp]
FFFC13B8 01FD7D13		and		$t0,$t0,#31
FFFC13BC 001D1D13		sll		$t0,$t0,#1
FFFC13C0 FFFC1637		lw		$t0,SerialFuncTbl[$t0]
FFFC13C4 1A060613
FFFC13C8 01A60633
FFFC13CC 00062D03
FFFC13D0 000D0067		jmp		[$t0]
                        	
                        	SerialFinishCmd:
FFFC13D4 00C72983		lw		$a1,12[$sp]		; reply mbx
FFFC13D8 00198993		add		$a1,$a1,#1		; -1 = no reply requested
FFFC13DC 01298E63		beq		$a1,$a0,.0001
FFFC13E0 FFF98993		sub		$a1,$a1,#1
FFFC13E4 00906913		ldi		$a0,#9				; sendmsg
FFFC13E8 FFF06A13		ldi		$a2,#-1
FFFC13EC FFF06A93		ldi		$a3,#-1
FFFC13F0 FFF06B13		ldi		$a4,#-1
FFFC13F4 00000073		ecall
                        	.0001:
FFFC13F8 FA1FF06F		jmp		SerialServiceLoop
                        	
                        	;------------------------------------------------------------------------------
                        	; SerialGetChar
                        	;
                        	; Check the serial port buffer to see if there's a char available. If there's
                        	; a char available then return it. If the buffer is almost empty then send an
                        	; XON.
                        	;
                        	; Stack Space:
                        	;		3 words
                        	; Parameters:
                        	;		none
                        	; Modifies:
                        	;		none
                        	; Returns:
                        	;		$v0 = character or -1
                        	;------------------------------------------------------------------------------
                        	
                        	SerialGetChar:
FFFC13FC FE870713			sub		$sp,$sp,#24
FFFC1400 00173023			sto		$ra,[$sp]
FFFC1404 01173423			sto		$v1,8[$sp]
FFFC1408 00473823			sto		$s1,16[$sp]
FFFC140C 00026637			lb		$s1,SerRcvXon				; skip sending XON if already sent
FFFC1410 81060613
FFFC1414 00060633
FFFC1418 00060203
FFFC141C 3000F273			csrrc	$s1,#$300,#1				; disable interrupts
FFFC1420 04021263			bne		$s1,$x0,.0002
FFFC1424 1E4000EF			call	SerialRcvCount			; check number of chars in receive buffer
FFFC1428 00882813			slt		$v0,$v0,#8					; less than 8?
FFFC142C 02080C63			beq		$v0,$x0,.0002
FFFC1430 01106813			ldi		$v0,#XON						; if <8 send an XON
FFFC1434 00026637			sb		$x0,SerRcvXoff			; clear XOFF status
FFFC1438 81160613
FFFC143C 00060633
FFFC1440 00060023
FFFC1444 00026637			sb		$v0,SerRcvXon				; flag so we don't send it multiple times
FFFC1448 81060613
FFFC144C 00060633
FFFC1450 01060023
FFFC1454 FFDC1637			sb		$v0,UART+UART_TRB
FFFC1458 A0060613
FFFC145C 00060633
FFFC1460 01060023
                        	.0002:
FFFC1464 00026637			lbu		$v1,SerHeadRcv			; check if anything is in buffer
FFFC1468 80060613
FFFC146C 00060633
FFFC1470 00064883
FFFC1474 00026637			lbu		$v0,SerTailRcv
FFFC1478 80460613
FFFC147C 00060633
FFFC1480 00064803
FFFC1484 03180663			beq		$v0,$v1,.noChars		; no?
FFFC1488 00025637			lb		$v0,SerRcvBuf[$v1]	; get byte from buffer
FFFC148C 00060613
FFFC1490 01160633
FFFC1494 00060803
FFFC1498 00188893			add		$v1,$v1,#1					; update head index
FFFC149C 00026637			sb		$v1,SerHeadRcv				
FFFC14A0 80060613
FFFC14A4 00060633
FFFC14A8 01160023
FFFC14AC 00000463			bra		.xit
                        	.noChars:
                        	.0001:
FFFC14B0 FFF06813			ldi		$v0,#-1
                        	.xit
FFFC14B4 30021073			csrrw	$x0,#$300,$s1				; restore interrupts
FFFC14B8 00073083			ldo		$ra,[$sp]
FFFC14BC 00873883			ldo		$v1,8[$sp]
FFFC14C0 01073203			ldo		$s1,16[$sp]
FFFC14C4 01870713			add		$sp,$sp,#24
FFFC14C8 00008067			ret
                        	
                        	;------------------------------------------------------------------------------
                        	; SerialPeekChar
                        	;
                        	; Check the serial port buffer to see if there's a char available. If there's
                        	; a char available then return it. But don't update the buffer indexes. No need
                        	; to send an XON here.
                        	;
                        	; Stack Space:
                        	;		3 words
                        	; Parameters:
                        	;		none
                        	; Modifies:
                        	;		none
                        	; Returns:
                        	;		$v0 = character or -1
                        	;------------------------------------------------------------------------------
                        	
                        	SerialPeekChar:
FFFC14CC FE870713		sub		$sp,$sp,#24
FFFC14D0 00173023		sto		$ra,[$sp]
FFFC14D4 01173423		sto		$v1,8[$sp]
FFFC14D8 00473823		sto		$s1,16[$sp]
FFFC14DC 3000F273		csrrc	$s1,#$300,#1				; disable interrupts
FFFC14E0 00026637		ldbu	$v1,SerHeadRcv			; check if anything is in buffer
FFFC14E4 80060613
FFFC14E8 00060633
FFFC14EC 00064883
FFFC14F0 00026637		ldbu	$v0,SerTailRcv
FFFC14F4 80460613
FFFC14F8 00060633
FFFC14FC 00064803
FFFC1500 01180C63		beq		$v0,$v1,.noChars		; no?
FFFC1504 00025637		ldb		$v0,SerRcvBuf[$v1]	; get byte from buffer
FFFC1508 00060613
FFFC150C 01160633
FFFC1510 00060803
FFFC1514 00000463		bra		.xit
                        	.noChars:
                        	.0001:
FFFC1518 FFF06813		ldi		$v0,#-1
                        	.xit
FFFC151C 30021073		csrrw	$x0,#$300,$s1				; restore interrupts
FFFC1520 00073083		ldo		$ra,[$sp]
FFFC1524 00873883		ldo		$v1,8[$sp]
FFFC1528 01073203		ldo		$s1,16[$sp]
FFFC152C 01870713		add		$sp,$sp,#24
FFFC1530 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; SerialPeekChar
                        	;		Get a character directly from the I/O port. This bypasses the input
                        	; buffer.
                        	;
                        	; Stack Space:
                        	;		3 words
                        	; Parameters:
                        	;		none
                        	; Modifies:
                        	;		none
                        	; Returns:
                        	;		$v0 = character or -1
                        	;------------------------------------------------------------------------------
                        	
                        	SerialPeekCharDirect:
FFFC1534 FE870713		sub		$sp,$sp,#24
FFFC1538 00173023		sto		$ra,[$sp]
FFFC153C 01173423		sto		$v1,8[$sp]
FFFC1540 00473823		sto		$s1,16[$sp]
FFFC1544 3000F273		csrrc	$s1,#$300,#1				; disable interrupts
FFFC1548 FFDC1637		ldb		$v0,UART+UART_STAT
FFFC154C A0460613
FFFC1550 00060633
FFFC1554 00060803
FFFC1558 00887813		and		$v0,$v0,#8					; look for Rx not empty
FFFC155C 00080C63		beq		$v0,$x0,.0001
FFFC1560 FFDC1637		ldb		$v0,UART+UART_TRB
FFFC1564 A0060613
FFFC1568 00060633
FFFC156C 00060803
FFFC1570 00000463		bra		.xit
                        	.0001:
FFFC1574 FFF06813		ldi		$v0,#-1
                        	.xit
FFFC1578 30021073		csrrw	$x0,#$300,$s1				; restore interrupts
FFFC157C 00073083		ldo		$ra,[$sp]
FFFC1580 00873883		ldo		$v1,8[$sp]
FFFC1584 01073203		ldo		$s1,16[$sp]
FFFC1588 01870713		add		$sp,$sp,#24
FFFC158C 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; SerialPutChar
                        	;    Put a character to the serial transmitter. This routine blocks until the
                        	; transmitter is empty. The routine will attempt to transmit the char up to 
                        	; 10 times. If it still can't transmit the char then sleep is called and the
                        	; task is put to sleep for a tick. When it wakes up the routine continues to
                        	; try and send a character.
                        	;
                        	; Stack Space
                        	;		5 words
                        	; Parameters:
                        	;		$a3 = character to put
                        	; Modifies:
                        	;		none
                        	;------------------------------------------------------------------------------
                        	
                        	SerialPutChar:
FFFC1590 FE870713		sub		$sp,$sp,#24
FFFC1594 01073023		sto		$v0,[$sp]
FFFC1598 00173423		sto		$ra,8[$sp]
FFFC159C 01173823		sto		$v1,16[$sp]
                        	.0002:
FFFC15A0 00A06893		ldi		$v1,#10
                        	.0001:
                        	;	sub		$v1,$v1,#1
                        	;	beq		$v1,$x0,.goSleep
FFFC15A4 FFDC1637		ldb		$v0,UART+UART_STAT	; wait until the uart indicates tx empty
FFFC15A8 A0460613
FFFC15AC 00060633
FFFC15B0 00060803
FFFC15B4 01087813		and		$v0,$v0,#16					; bit #4 of the status reg
FFFC15B8 FE0806E3		beqz	$v0,.0001						; branch if transmitter is not empty
FFFC15BC FFDC1637		stb		$a3,UART+UART_TRB		; send the byte
FFFC15C0 A0060613
FFFC15C4 00060633
FFFC15C8 01560023
FFFC15CC 00073803		ldo		$v0,[$sp]
FFFC15D0 00873083		ldo		$ra,8[$sp]
FFFC15D4 01073883		ldo		$v1,16[$sp]
FFFC15D8 01870713		add		$sp,$sp,#24
FFFC15DC 00008067		ret
                        	.goSleep:
FFFC15E0 FF070713		sub		$sp,$sp,#16
FFFC15E4 01273023		sto		$a0,[$sp]
FFFC15E8 01373423		sto		$a1,8[$sp]
FFFC15EC 00506913		ldi		$a0,#5							; sleep function
FFFC15F0 00106993		ldi		$a1,#1							; 1 tick
FFFC15F4 00000073		ecall
FFFC15F8 00073903		ldo		$a0,[$sp]
FFFC15FC 00873983		ldo		$a1,8[$sp]
FFFC1600 01070713		add		$sp,$sp,#16
FFFC1604 F8000EE3		bra		.0002
                        	
                        	;------------------------------------------------------------------------------
                        	; Calculate number of character in input buffer
                        	;------------------------------------------------------------------------------
                        	
                        	SerialRcvCount:
FFFC1608 00026637		ldbu	$v0,SerTailRcv	; v0 = tail index
FFFC160C 80460613
FFFC1610 00060633
FFFC1614 00064803
FFFC1618 00026637		ldbu	$v1,SerHeadRcv	; v1 = head index
FFFC161C 80060613
FFFC1620 00060633
FFFC1624 00064883
FFFC1628 41180D33		sub		$t0,$v0,$v1
FFFC162C 000D5863		bge		$t0,$x0,.xit
FFFC1630 10006D13		ldi		$t0,#256
FFFC1634 411D0D33		sub		$t0,$t0,$v1
FFFC1638 010D0D33		add		$t0,$t0,$v0
                        	.xit:
FFFC163C 000D6833		mov		$v0,$t0
FFFC1640 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	
                        	SerialIRQ:
                        	.nxtByte:
FFFC1644 00897D13		and		$t0,$a0,#$08				; bit 3 = rx full
FFFC1648 0C0D0063		beq		$t0,$x0,.notRxInt
FFFC164C FFDC1637		ldt		$a1,UART+UART_TRB		; get data from Rx buffer to clear interrupt
FFFC1650 A0060613
FFFC1654 00060633
FFFC1658 00062983
FFFC165C 00026637		ldbu	$t2,SerHeadRcv			; get buffer indexes
FFFC1660 80060613
FFFC1664 00060633
FFFC1668 00064E03
FFFC166C 00026637		ldbu	$t3,SerTailRcv
FFFC1670 80460613
FFFC1674 00060633
FFFC1678 00064E83
FFFC167C 001E8E93		add		$t3,$t3,#1					; see if buffer full
FFFC1680 0FFEFE93		and		$t3,$t3,#255
FFFC1684 09DE0263		beq		$t2,$t3,.rxFull
FFFC1688 00026637		stb		$t3,SerTailRcv			; update tail pointer
FFFC168C 80460613
FFFC1690 00060633
FFFC1694 01D60023
FFFC1698 FFFE8E93		sub		$t3,$t3,#1
FFFC169C 0FFEFE13		and		$t2,$t3,#255
FFFC16A0 00025637		stb		$a1,SerRcvBuf[$t2]	; store recieved byte in buffer
FFFC16A4 00060613
FFFC16A8 01C60633
FFFC16AC 01360023
FFFC16B0 00026637		ldb		$v0,SerRcvXoff			; check if xoff already sent
FFFC16B4 81160613
FFFC16B8 00060633
FFFC16BC 00060803
FFFC16C0 02081A63		bne		$v0,$x0,.0001
FFFC16C4 F45FF0EF		call	SerialRcvCount			; if more than 240 chars in buffer
FFFC16C8 0F082813		slt		$v0,$v0,#240				; send an XOFF
FFFC16CC 02081463		bne		$v0,$x0,.0001
FFFC16D0 01306913		ldi		$a0,#XOFF
FFFC16D4 00026637		stb		$x0,SerRcvXon				; clear XON status
FFFC16D8 81060613
FFFC16DC 00060633
FFFC16E0 00060023
FFFC16E4 00026637		stb		$a0,SerRcvXoff			; set XOFF status
FFFC16E8 81160613
FFFC16EC 00060633
FFFC16F0 01260023
                        		stb		UART+UART_TRB
                        	.0001:
FFFC16F4 FFDC1637		ldt		$a0,UART+UART_STAT	; check the status for another byte
FFFC16F8 A0460613
FFFC16FC 00060633
FFFC1700 00062903
FFFC1704 F40000E3		bra		.nxtByte
                        	;	ldi		$a0,#$0B						; dtr,rts active, rxint disabled, no parity
                        	;	sw		$a0,UART+UART_CMD
                        	.rxFull:
                        	.notRxInt:
FFFC1708 79217073		csrrc	$x0,#$792,#2			; clear IRQ semaphore
FFFC170C 10000073		eret
                        	
                        	nmeSerial:
FFFC1710 69726553		db		"Serial",0
FFFC1714 00006C61
                        	.file "boot.r5a",1
                        	.file "boot.r5a",1
                        	.file "../fmtk/via.r5a",1
                        	.file "../fmtk/via.r5a",1
                        	; ============================================================================
                        	;        __
                        	;   \\__/ o\    (C) 2020  Robert Finch, Stratford
                        	;    \  __ /    All rights reserved.
                        	;     \/_//     robfinch<remove>@finitron.ca
                        	;       ||
                        	;  
                        	;
                        	; This source file is free software: you can redistribute it and/or modify 
                        	; it under the terms of the GNU Lesser General Public License as published 
                        	; by the Free Software Foundation, either version 3 of the License, or     
                        	; (at your option) any later version.                                      
                        	;                                                                          
                        	; This source file is distributed in the hope that it will be useful,      
                        	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                        	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                        	; GNU General Public License for more details.                             
                        	;                                                                          
                        	; You should have received a copy of the GNU General Public License        
                        	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                        	;
                        	; ============================================================================
                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	; Device command 
                        	;
FFFC1717 00000000		align	
                        	
                        	ViaFuncTbl:
FFFC1718 00000000		dco		0							; no operation
FFFC171C 00000000
FFFC1720 00000000		dco		0							; setup
FFFC1724 00000000
FFFC1728 00000000		dco		0							; initialize
FFFC172C 00000000
FFFC1730 00000000		dco		0							; status
FFFC1734 00000000
FFFC1738 00000000		dco		0							; media check
FFFC173C 00000000
FFFC1740 00000000		dco		0							; build BPB
FFFC1744 00000000
FFFC1748 00000000		dco		0							; open
FFFC174C 00000000
FFFC1750 00000000		dco		0							; close
FFFC1754 00000000
FFFC1758 00000000		dco		0							; get char
FFFC175C 00000000
FFFC1760 00000000		dco		0							; Peek char
FFFC1764 00000000
FFFC1768 00000000		dco		0							; get char direct
FFFC176C 00000000
FFFC1770 00000000		dco		0							; peek char direct
FFFC1774 00000000
FFFC1778 00000000		dco		0							; input status
FFFC177C 00000000
FFFC1780 00000000		dco		0							; Put char
FFFC1784 00000000
FFFC1788 00000000		dco		0							; reserved
FFFC178C 00000000
FFFC1790 00000000		dco		0							; set position
FFFC1794 00000000
FFFC1798 00000000		dco		0							; read block
FFFC179C 00000000
FFFC17A0 00000000		dco		0							; write block
FFFC17A4 00000000
FFFC17A8 00000000		dco		0							; verify block
FFFC17AC 00000000
FFFC17B0 00000000		dco		0							; output status
FFFC17B4 00000000
FFFC17B8 00000000		dco		0							; flush input
FFFC17BC 00000000
FFFC17C0 00000000		dco		0							; flush output
FFFC17C4 00000000
FFFC17C8 FFFC1874		dco		ViaIRQ				; IRQ routine
FFFC17CC 00000000
FFFC17D0 00000000		dco		0							; Is removable
FFFC17D4 00000000
FFFC17D8 00000000		dco		0							; ioctrl read
FFFC17DC 00000000
FFFC17E0 00000000		dco		0							; ioctrl write
FFFC17E4 00000000
FFFC17E8 00000000		dco		0							; output until busy
FFFC17EC 00000000
FFFC17F0 00000000		dco		0							; 27
FFFC17F4 00000000
FFFC17F8 00000000		dco		0
FFFC17FC 00000000
FFFC1800 00000000		dco		0
FFFC1804 00000000
FFFC1808 00000000		dco		0
FFFC180C 00000000
FFFC1810 00000000		dco		0							; 31
FFFC1814 00000000
                        	
                        	;------------------------------------------------------------------------------
                        	; ViaInit
                        	;
                        	; Initialize the versatile interface adapter.
                        	;------------------------------------------------------------------------------
                        	
                        	ViaInit:
FFFC1818 FF870713		sub		$sp,$sp,#8
FFFC181C 00173023		sto		$ra,[$sp]
FFFC1820 00F06913		ldi		$a0,#15							; VIA device
FFFC1824 FFFC19B7		ldi		$a1,#ViaFuncTbl
FFFC1828 71898993
FFFC182C 4A1010EF		call	CopyDevFuncTbl
                        		; Initialize port A low order eight bits as output, the remaining bits as
                        		; input.
FFFC1830 FFDC0DB7		ldi		$t1,#VIA
FFFC1834 600D8D93
FFFC1838 0FF06D13		ldi		$t0,#$000000FF
FFFC183C 01ADA623		stt		$t0,VIA_DDRA[$t1]
FFFC1840 00106D13		ldi		$t0,#1							; select timer 3 access
FFFC1844 03AD88A3		stb		$t0,VIA_PCR+1[$t1]
FFFC1848 01F06D13		ldi		$t0,#$1F
FFFC184C 03AD86A3		stb		$t0,VIA_ACR+1[$t1]		; set timer 3 mode, timer 1/2 = 64 bit
FFFC1850 0016ED37		ldi		$t0,#$0016E360			;	divider value for 33.333Hz (30 ms)
FFFC1854 360D0D13
FFFC1858 01ADA823		stt		$t0,VIA_T1CL[$t1]
FFFC185C 000DAA23		stt		$x0,VIA_T1CH[$t1]		; trigger transfer to count registers
FFFC1860 18006D13		ldi		$t0,#$180						; enable timer3 interrupts
FFFC1864 03ADAC23		stt		$t0,VIA_IER[$t1]
FFFC1868 00073083		ldo		$ra,[$sp]
FFFC186C 00870713		add		$sp,$sp,#8
FFFC1870 00008067		ret
                        	
                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	
                        	ViaIRQ:
                        		; Was it the VIA that caused the interrupt?
FFFC1874 FFDC0DB7		ldi		$t1,#VIA
FFFC1878 600D8D93
FFFC187C 034D8D03		ldb		$t0,VIA_IFR[$t1]
FFFC1880 040D5463		bge		$t0,$x0,.0003				; no
FFFC1884 00106D13		ldi		$t0,#1							; select timer 3 access
FFFC1888 03AD88A3		stb		$t0,VIA_PCR+1[$t1]
FFFC188C 010DAD03		ldt		$t0,VIA_T1CL[$t1]		; yes, clear interrupt
FFFC1890 00014637		ldo		$t0,milliseconds
FFFC1894 20860613
FFFC1898 00060633
FFFC189C 00063D03
FFFC18A0 01ED0D13		add		$t0,$t0,#30
FFFC18A4 00014637		sto		$t0,milliseconds
FFFC18A8 20860613
FFFC18AC 00060633
FFFC18B0 01A63023
FFFC18B4 00014637		stt		$t0,switchflag
FFFC18B8 20060613
FFFC18BC 00060633
FFFC18C0 01A62023
FFFC18C4 449000EF		call	FMTK_SchedulerIRQ
                        	.0003:
FFFC18C8 79217073		csrrc	$x0,#$792,#2			; clear IRQ semaphore
FFFC18CC 10000073		eret
                        	.file "boot.r5a",1
                        	.file "boot.r5a",1
                        	.file "../fmtk/video.r5a",1
                        	.file "../fmtk/video.r5a",1
                        	; ============================================================================
                        	;        __
                        	;   \\__/ o\    (C) 2020  Robert Finch, Stratford
                        	;    \  __ /    All rights reserved.
                        	;     \/_//     robfinch<remove>@finitron.ca
                        	;       ||
                        	;  
                        	;
                        	; This source file is free software: you can redistribute it and/or modify 
                        	; it under the terms of the GNU Lesser General Public License as published 
                        	; by the Free Software Foundation, either version 3 of the License, or     
                        	; (at your option) any later version.                                      
                        	;                                                                          
                        	; This source file is distributed in the hope that it will be useful,      
                        	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                        	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                        	; GNU General Public License for more details.                             
                        	;                                                                          
                        	; You should have received a copy of the GNU General Public License        
                        	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                        	;
                        	; ============================================================================
                        	
                        	TC64CursorAddr	equ		$FFD1DF1C
                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	; Device command 
                        	;
                        		align	8                        	
                        	VideoFuncTbl:
FFFC18D0 00000000		dco		0							; no operation
FFFC18D4 00000000
FFFC18D8 00000000		dco		0							; setup
FFFC18DC 00000000
FFFC18E0 00000000		dco		0							; initialize
FFFC18E4 00000000
FFFC18E8 00000000		dco		0							; status
FFFC18EC 00000000
FFFC18F0 00000000		dco		0							; media check
FFFC18F4 00000000
FFFC18F8 00000000		dco		0							; build BPB
FFFC18FC 00000000
FFFC1900 00000000		dco		0							; open
FFFC1904 00000000
FFFC1908 00000000		dco		0							; close
FFFC190C 00000000
FFFC1910 00000000		dco		0							; get char
FFFC1914 00000000
FFFC1918 00000000		dco		0							; Peek char
FFFC191C 00000000
FFFC1920 00000000		dco		0							; get char direct
FFFC1924 00000000
FFFC1928 00000000		dco		0							; peek char direct
FFFC192C 00000000
FFFC1930 00000000		dco		0							; input status
FFFC1934 00000000
FFFC1938 FFFC1AEC		dco		VideoPutChar	; Put char
FFFC193C 00000000
FFFC1940 00000000		dco		0							; reserved
FFFC1944 00000000
FFFC1948 00000000		dco		0							; set position
FFFC194C 00000000
FFFC1950 00000000		dco		0							; read block
FFFC1954 00000000
FFFC1958 00000000		dco		0							; write block
FFFC195C 00000000
FFFC1960 00000000		dco		0							; verify block
FFFC1964 00000000
FFFC1968 00000000		dco		0							; output status
FFFC196C 00000000
FFFC1970 00000000		dco		0							; flush input
FFFC1974 00000000
FFFC1978 00000000		dco		0							; flush output
FFFC197C 00000000
FFFC1980 FFFC1E10		dco		VideoIRQ			; IRQ routine
FFFC1984 00000000
FFFC1988 00000000		dco		0							; Is removable
FFFC198C 00000000
FFFC1990 00000000		dco		0							; ioctrl read
FFFC1994 00000000
FFFC1998 00000000		dco		0							; ioctrl write
FFFC199C 00000000
FFFC19A0 00000000		dco		0							; output until busy
FFFC19A4 00000000
FFFC19A8 00000000		dco		0							; 27
FFFC19AC 00000000
FFFC19B0 00000000		dco		0
FFFC19B4 00000000
FFFC19B8 00000000		dco		0
FFFC19BC 00000000
FFFC19C0 00000000		dco		0
FFFC19C4 00000000
FFFC19C8 00000000		dco		0							; 31
FFFC19CC 00000000
                        	
                        	;------------------------------------------------------------------------------
                        	; VideoInit
                        	;
                        	; Initialize the versatile interface adapter.
                        	;------------------------------------------------------------------------------
                        	
                        	VideoInit:
FFFC19D0 FF870713		sub		$sp,$sp,#8
FFFC19D4 00173023		sto		$ra,[$sp]
FFFC19D8 00206913		ldi		$a0,#2							; Video device
FFFC19DC FFFC29B7		ldi		$a1,#VideoFuncTbl
FFFC19E0 8D098993
FFFC19E4 2E9010EF		call	CopyDevFuncTbl
FFFC19E8 00025637		stb		$x0,CursorX
FFFC19EC 80060613
FFFC19F0 00060633
FFFC19F4 00060023
FFFC19F8 00025637		stb		$x0,CursorY
FFFC19FC 80160613
FFFC1A00 00060633
FFFC1A04 00060023
FFFC1A08 000F0D37		ldi		$t0,#$000F0000
FFFC1A0C 000D0D13
FFFC1A10 00025637		stt		$t0,DispAttr
FFFC1A14 80860613
FFFC1A18 00060633
FFFC1A1C 01A62023
FFFC1A20 00210D37		ldi		$t0,#$0020FFFF
FFFC1A24 FFFD0D13
FFFC1A28 00025637		stt		$t0,DispAttr+4
FFFC1A2C 80C60613
FFFC1A30 00060633
FFFC1A34 01A62023
FFFC1A38 010000EF		call	VideoClearScreen
FFFC1A3C 00073083		ldo		$ra,[$sp]
FFFC1A40 00870713		add		$sp,$sp,#8
FFFC1A44 00008067		ret
                        	
                        	VideoClearScreen:
                        	;	csrrs	$x0,#$300,#1				; interrupts on
FFFC1A48 65806D13		ldi		$t0,#56*29
FFFC1A4C 00025637		ldo		$t1,DispAttr
FFFC1A50 80860613
FFFC1A54 00060633
FFFC1A58 00063D83
FFFC1A5C 020DED93		or		$t1,$t1,#' '
                        		
                        		
FFFC1A60 18101873		csrrw	v0,#$181,x0
FFFC1A64 03F87813		and		v0,v0,#MAX_TID
FFFC1A68 00A81813	sll		$v0,$v0,#LOG_TCBSZ
FFFC1A6C 33883803		ldo		$v0,TCBpVideo[$v0]
FFFC1A70 FFD00837		ldi		$v0,#$FFD00000
FFFC1A74 00080813
                        	.0001:
FFFC1A78 01B83023		sto		$t1,[$v0]	
FFFC1A7C 00880813		add		$v0,$v0,#8
FFFC1A80 FFFD0D13		sub		$t0,$t0,#1
FFFC1A84 FFA04AE3		bgt		$t0,$x0,.0001
FFFC1A88 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	
                        	VideoHomeCursor:
FFFC1A8C 00025637		stb		$x0,CursorX
FFFC1A90 80060613
FFFC1A94 00060633
FFFC1A98 00060023
FFFC1A9C 00025637		stb		$x0,CursorY
FFFC1AA0 80160613
FFFC1AA4 00060633
FFFC1AA8 00060023
                        		; fall through into update cursor pos.
                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	
                        	UpdateCursorPos:
FFFC1AAC 00025637		ldbu	$t0,CursorY
FFFC1AB0 80160613
FFFC1AB4 00060633
FFFC1AB8 00064D03
FFFC1ABC 03806D93		ldi		$t1,#56
FFFC1AC0 03BD0D33		mul		$t0,$t0,$t1
FFFC1AC4 00025637		ldbu	$t1,CursorX
FFFC1AC8 80060613
FFFC1ACC 00060633
FFFC1AD0 00064D83
FFFC1AD4 01BD0D33		add		$t0,$t0,$t1
FFFC1AD8 FFD1E637		stw		$t0,TC64CursorAddr
FFFC1ADC F1C60613
FFFC1AE0 00060633
FFFC1AE4 01A61023
FFFC1AE8 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Parameters:
                        	;		a3 = character to display
                        	;------------------------------------------------------------------------------
                        	
                        	VideoPutChar:
FFFC1AEC FF070713		sub		$sp,$sp,#16
FFFC1AF0 00173023		sto		$ra,[$sp]
FFFC1AF4 00473423		sto		$s1,8[$sp]
FFFC1AF8 00D06D13		ldi		$t0,#CR
FFFC1AFC 15AA8063		beq		$a3,$t0,.doCR
FFFC1B00 00A06D13		ldi		$t0,#$0A				; line feed
FFFC1B04 15AA8863		beq		$a3,$t0,.doLF
FFFC1B08 00C06D13		ldi		$t0,#$0C				; CTRL-L
FFFC1B0C 21AA8C63		beq		$a3,$t0,.doCls
FFFC1B10 09106D13		ldi		$t0,#$91
FFFC1B14 15AA8A63		beq		$a3,$t0,.cursorRight
FFFC1B18 09306D13		ldi		$t0,#$93
FFFC1B1C 19AA8063		beq		$a3,$t0,.cursorLeft
FFFC1B20 09006D13		ldi		$t0,#$90
FFFC1B24 1BAA8263		beq		$a3,$t0,.cursorUp
FFFC1B28 09206D13		ldi		$t0,#$92
FFFC1B2C 1DAA8463		beq		$a3,$t0,.cursorDown
FFFC1B30 00806D13		ldi		$t0,#BS
FFFC1B34 1FAA8E63		beq		$a3,$t0,.backspace
FFFC1B38 09906D13		ldi		$t0,#$99
FFFC1B3C 29AA8463		beq		$a3,$t0,.delete
                        		
                        		
FFFC1B40 18101873		csrrw	v0,#$181,x0
FFFC1B44 03F87813		and		v0,v0,#MAX_TID
FFFC1B48 00A81813	sll		$v0,$v0,#LOG_TCBSZ
FFFC1B4C 33883803		ldo		$v0,TCBpVideo[$v0]
FFFC1B50 FFD00837		ldi		$v0,#$FFD00000
FFFC1B54 00080813
FFFC1B58 00086D33	mov		$t0,$v0
FFFC1B5C 00025637		ldbu	$t1,CursorX
FFFC1B60 80060613
FFFC1B64 00060633
FFFC1B68 00064D83
FFFC1B6C 003D9D93		sll		$t1,$t1,#3						; *8 bytes per display cell
FFFC1B70 01BD6D33		or		$t0,$t0,$t1						; add in base address
FFFC1B74 00025637		ldbu	$t1,CursorY
FFFC1B78 80160613
FFFC1B7C 00060633
FFFC1B80 00064D83
FFFC1B84 1C006E13		ldi		$t2,#56*8
FFFC1B88 03CD8DB3		mul		$t1,$t1,$t2
FFFC1B8C 01BD0D33		add		$t0,$t0,$t1
FFFC1B90 00025637		ldo		$t1,DispAttr
FFFC1B94 80860613
FFFC1B98 00060633
FFFC1B9C 00063D83
FFFC1BA0 015DEDB3		or		$t1,$t1,$a3
FFFC1BA4 01BD3023		sto		$t1,[$t0]							; store to screen memory
FFFC1BA8 00025637		ldbu	$t0,CursorX						; increment cursor position
FFFC1BAC 80060613
FFFC1BB0 00060633
FFFC1BB4 00064D03
FFFC1BB8 001D0D13		add		$t0,$t0,#1
FFFC1BBC 03806D93		ldi		$t1,#56
FFFC1BC0 07BD4263		blt		$t0,$t1,.saveX
FFFC1BC4 00006D13		ldi		$t0,#0
                        	.doLF1:
FFFC1BC8 00025637		ldbu	$t2,CursorY
FFFC1BCC 80160613
FFFC1BD0 00060633
FFFC1BD4 00064E03
FFFC1BD8 001E0E13		add		$t2,$t2,#1
FFFC1BDC 01D06D93		ldi		$t1,#29
FFFC1BE0 03BE4A63		blt		$t2,$t1,.saveY
                        		; scroll up
FFFC1BE4 65806E93		ldi		$t3,#56*29
FFFC1BE8 FFD00F37		ldi		$t4,#$FFD00000
FFFC1BEC 000F0F13
                        	.0001:
FFFC1BF0 1C0F3F83		ldo		$t5,56*8[$t4]
FFFC1BF4 01FF3023		sto		$t5,[$t4]
FFFC1BF8 008F0F13		add		$t4,$t4,#8
FFFC1BFC FFFE8E93		sub		$t3,$t3,#1
FFFC1C00 FFD048E3		bgt		$t3,$x0,.0001
                        	.xit:
FFFC1C04 00073083		ldo		$ra,[$sp]
FFFC1C08 00873203		ldo		$s1,8[$sp]
FFFC1C0C 01070713		add		$sp,$sp,#16
FFFC1C10 00008067		ret
                        	.saveY:
FFFC1C14 00025637		stb		$t2,CursorY
FFFC1C18 80160613
FFFC1C1C 00060633
FFFC1C20 01C60023
                        	.saveX:
FFFC1C24 00025637		stb		$t0,CursorX
FFFC1C28 80060613
FFFC1C2C 00060633
FFFC1C30 01A60023
FFFC1C34 E79FF0EF		call	UpdateCursorPos
FFFC1C38 FC0006E3		bra		.xit
                        	.doCR:
FFFC1C3C 00025637		stb		$x0,CursorX
FFFC1C40 80060613
FFFC1C44 00060633
FFFC1C48 00060023
FFFC1C4C E61FF0EF		call	UpdateCursorPos
FFFC1C50 FA000AE3		bra		.xit
                        	.doLF:
FFFC1C54 00025637		ldbu	$t0,CursorX
FFFC1C58 80060613
FFFC1C5C 00060633
FFFC1C60 00064D03
FFFC1C64 F60002E3		bra		.doLF1
                        	.cursorRight:
FFFC1C68 00025637		ldbu	$t0,CursorX
FFFC1C6C 80060613
FFFC1C70 00060633
FFFC1C74 00064D03
FFFC1C78 001D0D13		add		$t0,$t0,#1
FFFC1C7C 03706D93		ldi		$t1,#55
FFFC1C80 01BD5C63		bge		$t0,$t1,.cr1
FFFC1C84 00025637		stb		$t0,CursorX
FFFC1C88 80060613
FFFC1C8C 00060633
FFFC1C90 01A60023
                        	.cr2:
FFFC1C94 E19FF0EF		call	UpdateCursorPos
                        	.cr1:
FFFC1C98 F60006E3		bra		.xit
                        	.cursorLeft:
FFFC1C9C 00025637		ldbu	$t0,CursorX
FFFC1CA0 80060613
FFFC1CA4 00060633
FFFC1CA8 00064D03
FFFC1CAC FFFD0D13		sub		$t0,$t0,#1
FFFC1CB0 FE0D44E3		blt		$t0,$x0,.cr1
FFFC1CB4 00025637		stb		$t0,CursorX
FFFC1CB8 80060613
FFFC1CBC 00060633
FFFC1CC0 01A60023
FFFC1CC4 FC0008E3		bra		.cr2
                        	.cursorUp:
FFFC1CC8 00025637		ldbu	$t0,CursorY
FFFC1CCC 80160613
FFFC1CD0 00060633
FFFC1CD4 00064D03
FFFC1CD8 FFFD0D13		sub		$t0,$t0,#1
FFFC1CDC FA0D4EE3		blt		$t0,$x0,.cr1
FFFC1CE0 00025637		stb		$t0,CursorY
FFFC1CE4 80160613
FFFC1CE8 00060633
FFFC1CEC 01A60023
FFFC1CF0 FA0002E3		bra		.cr2
                        	.cursorDown:
FFFC1CF4 00025637		ldbu	$t0,CursorY
FFFC1CF8 80160613
FFFC1CFC 00060633
FFFC1D00 00064D03
FFFC1D04 001D0D13		add		$t0,$t0,#1
FFFC1D08 01D06D93		ldi		$t1,#29
FFFC1D0C F9BD56E3		bge		$t0,$t1,.cr1
FFFC1D10 00025637		stb		$t0,CursorY
FFFC1D14 80160613
FFFC1D18 00060633
FFFC1D1C 01A60023
FFFC1D20 F6000AE3		bra		.cr2
                        	.doCls:
FFFC1D24 D25FF0EF		call	VideoClearScreen
FFFC1D28 D65FF0EF		call	VideoHomeCursor
FFFC1D2C F60006E3		bra		.cr1
                        	.backspace:
FFFC1D30 00025637		ldbu	$t0,CursorX
FFFC1D34 80060613
FFFC1D38 00060633
FFFC1D3C 00064D03
FFFC1D40 F40D0CE3		beqz	$t0,.cr1
FFFC1D44 FFFD0D13		sub		$t0,$t0,#1
FFFC1D48 00025637		stb		$t0,CursorX
FFFC1D4C 80060613
FFFC1D50 00060633
FFFC1D54 01A60023
                        	.del0001:
FFFC1D58 03706213		ldi		$s1,#55
FFFC1D5C 41A20233		sub		$s1,$s1,$t0
FFFC1D60 D4DFF0EF		call	UpdateCursorPos
FFFC1D64 00025637		ldbu	$t1,CursorY
FFFC1D68 80160613
FFFC1D6C 00060633
FFFC1D70 00064D83
FFFC1D74 1C006E93		ldi		$t3,#56*8
FFFC1D78 03DD8DB3		mul		$t1,$t1,$t3
FFFC1D7C 003D1D13		sll		$t0,$t0,#3
FFFC1D80 01AD8EB3		add		$t3,$t1,$t0
FFFC1D84 FFD00637		add		$t3,$t3,#$FFD00000
FFFC1D88 00060613
FFFC1D8C 01D60EB3
FFFC1D90 00020C63		beqz	$s1,.bs0001
                        	.bs0002:
FFFC1D94 008EBF03		ldo		$t4,8[$t3]
FFFC1D98 01EEB023		sto		$t4,[$t3]
FFFC1D9C 008E8E93		add		$t3,$t3,#8
FFFC1DA0 FFF20213		sub		$s1,$s1,#1
FFFC1DA4 FFFFC8E3		bgt		$s1,.bs0002
                        	.bs0001:
FFFC1DA8 00025637		ldo		$t4,DispAttr
FFFC1DAC 80860613
FFFC1DB0 00060633
FFFC1DB4 00063F03
FFFC1DB8 020F6F13		or		$t4,$t4,#' '
FFFC1DBC 01EEB423		sto		$t4,8[$t3]
FFFC1DC0 E40002E3		bra		.xit
                        	.delete:
FFFC1DC4 00025637		ldbu	$t0,CursorX
FFFC1DC8 80060613
FFFC1DCC 00060633
FFFC1DD0 00064D03
FFFC1DD4 F80002E3		bra		.del0001	
                        	
                        	;------------------------------------------------------------------------------
                        	; Parameters:
                        	;		a1  = pointer to null terminated string
                        	;------------------------------------------------------------------------------
                        	
                        	VideoPutString:
FFFC1DD8 FF870713		sub		$sp,$sp,#8
FFFC1DDC 00173023		sto		$ra,[$sp]
FFFC1DE0 00010D37		ldi		$t0,#$10000
FFFC1DE4 000D0D13
                        	.again:
FFFC1DE8 300D2073		csrrs	$x0,#$300,$t0		; set mprv
FFFC1DEC 0009CA83		ldbu	$a3,[$a1]				; access using passed in memory space
FFFC1DF0 300D3073		csrrc	$x0,#$300,$t0		; clear mprv
FFFC1DF4 00198993		add		$a1,$a1,#1
FFFC1DF8 000A8663		beqz	$a3,.done
FFFC1DFC CF1FF0EF		call	VideoPutChar
FFFC1E00 FE0004E3		bra		.again
                        	.done:
FFFC1E04 00073083		ldo		$ra,[$sp]
FFFC1E08 00870713		add		$sp,$sp,#8
FFFC1E0C 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	
                        	VideoIRQ:
                        		; Was it the Video that caused the interrupt?
                        	.0003:
FFFC1E10 10000073		eret
                        	.file "boot.r5a",1
                        	.file "boot.r5a",1
                        	.file "../fmtk/task.r5a",1
                        	.file "../fmtk/task.r5a",1
                        	; ============================================================================
                        	;        __
                        	;   \\__/ o\    (C) 2020  Robert Finch, Stratford
                        	;    \  __ /    All rights reserved.
                        	;     \/_//     robfinch<remove>@finitron.ca
                        	;       ||
                        	;  
                        	;
                        	; This source file is free software: you can redistribute it and/or modify 
                        	; it under the terms of the GNU Lesser General Public License as published 
                        	; by the Free Software Foundation, either version 3 of the License, or     
                        	; (at your option) any later version.                                      
                        	;                                                                          
                        	; This source file is distributed in the hope that it will be useful,      
                        	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                        	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                        	; GNU General Public License for more details.                             
                        	;                                                                          
                        	; You should have received a copy of the GNU General Public License        
                        	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                        	;
                        	; ============================================================================
                        	
                        	.file "../fmtk/task.r5a",25
                        		code
                        		align	2                        	
                        	OSCallTbl:
FFFC1E14 26C801B8		dh		FMTK_Initialize					; 0
FFFC1E16 27D826C8		dh		FMTK_StartTask					; 1
FFFC1E18 280427D8		dh		FMTK_ExitTask
FFFC1E1A 01BC2804		dh		FMTK_KillTask
FFFC1E1C 240401BC		dh		FMTK_SetTaskPriority
FFFC1E1E 29082404		dh		FMTK_Sleep							; 5
FFFC1E20 297C2908		dh		FMTK_AllocMbx
FFFC1E22 01C0297C		dh		FMTK_FreeMbx
FFFC1E24 2A0C01C0		dh		FMTK_PostMsg
FFFC1E26 2BEC2A0C		dh		FMTK_SendMsg
FFFC1E28 2B1C2BEC		dh		FMTK_WaitMsg						; 10
FFFC1E2A 01C42B1C		dh		FMTK_PeekMsg
FFFC1E2C 205801C4		dh		FMTK_StartApp
FFFC1E2E 1FA42058		dh		FMTK_SaveContext				; 13
FFFC1E30 2FFC1FA4		dh		FMTK_GetCurrentTid
FFFC1E32 00002FFC		dh		DumpReadyList
FFFC1E34 00000000		dh		0
FFFC1E36 00000000		dh		0
FFFC1E38 00000000		dh		0
FFFC1E3A 31EC0000		dh		0
FFFC1E3C 324C31EC		dh		FMTK_HasIOFocus					; 20
FFFC1E3E 339C324C		dh		FMTK_SwitchIOFocus			; 21
FFFC1E40 33A8339C		dh		FMTK_ReleaseIOFocus			; 22
FFFC1E42 330433A8		dh		FMTK_ForceReleaseIOFocus	; 23
FFFC1E44 00003304		dh		FMTK_RequestIOFocus			; 24
FFFC1E46 34840000		dh		0
FFFC1E48 00003484		dh		FMTK_IO									; 26
                        	
                        	qToChk:
FFFC1E4A 01000000		db	0,0,0,1,0,0,2,1
FFFC1E4E 01020000
FFFC1E52 01030000		db	0,0,3,1,0,0,2,1
FFFC1E56 01020000
FFFC1E5A 01000000		db	0,0,0,1,0,0,2,1
FFFC1E5E 01020000
FFFC1E62 01030000		db	0,0,3,1,0,0,2,1
FFFC1E66 01020000
                        	
FFFC1E6A 46370000		align	
                        	
                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	
                        	FMTKInit:
FFFC1E6C 00024637		stt		$x0,QNDX
FFFC1E70 30460613
FFFC1E74 00060633
FFFC1E78 00062023
FFFC1E7C 00024637		sto		$x0,PIDMAP
FFFC1E80 31060613
FFFC1E84 00060633
FFFC1E88 00063023
FFFC1E8C 00024637		stt		$x0,missed_ticks
FFFC1E90 32060613
FFFC1E94 00060633
FFFC1E98 00062023
FFFC1E9C FFF06D13		ldi		$t0,#-1
FFFC1EA0 00024637		stt		$t0,TimeoutList
FFFC1EA4 32860613
FFFC1EA8 00060633
FFFC1EAC 01A62023
FFFC1EB0 00024637		stt		$t0,READYQ
FFFC1EB4 30860613
FFFC1EB8 00060633
FFFC1EBC 01A62023
FFFC1EC0 00024637		stt		$t0,READYQ+4
FFFC1EC4 30C60613
FFFC1EC8 00060633
FFFC1ECC 01A62023
FFFC1ED0 00025637		stw		$t0,hKeybdMbx
FFFC1ED4 82260613
FFFC1ED8 00060633
FFFC1EDC 01A61023
                        	
FFFC1EE0 00025637		stb		$x0,SwitchIOFocus	
FFFC1EE4 82060613
FFFC1EE8 00060633
FFFC1EEC 00060023
FFFC1EF0 00025637		stt		$x0,IOFocusTbl
FFFC1EF4 81860613
FFFC1EF8 00060633
FFFC1EFC 00062023
FFFC1F00 00025637		stt		$t0,IOFocusNdx
FFFC1F04 81060613
FFFC1F08 00060633
FFFC1F0C 01A62023
                        	
                        		; zero out device function table
FFFC1F10 00022D37		ldi		$t0,#DVF_Base
FFFC1F14 000D0D13
FFFC1F18 40006D93		ldi		$t1,#32*32
                        	.0003:
FFFC1F1C 000D3023		sto		$x0,[$t0]
FFFC1F20 008D0D13		add		$t0,$t0,#8
FFFC1F24 FFFD8D93		sub		$t1,$t1,#1
FFFC1F28 FFB04AE3		bgt		$t1,$x0,.0003
                        	
                        		; Initialize mailboxes
FFFC1F2C 00020D37		ldi		$t0,#mbxs
FFFC1F30 000D0D13
FFFC1F34 08006D93		ldi		$t1,#4*32
                        	.0001:
FFFC1F38 000D3023		sto		$x0,[$t0]
FFFC1F3C 008D0D13		add		$t0,$t0,#8
FFFC1F40 FFFD8D93		sub		$t1,$t1,#1
FFFC1F44 FFB04AE3		bgt		$t1,$x0,.0001
                        	
                        		; Initialize free message list
FFFC1F48 00010D37		ldi		$t0,#msgs
FFFC1F4C 000D0D13
FFFC1F50 00024637		sto		$t0,FreeMsg
FFFC1F54 35060613
FFFC1F58 00060633
FFFC1F5C 01A63023
FFFC1F60 00006D93		ldi		$t1,#0
FFFC1F64 00001E37		ldi		$t2,#NR_MSG
FFFC1F68 800E0E13
                        	.0002:
FFFC1F6C 001D8D93		add		$t1,$t1,#1
FFFC1F70 01BD3023		sto		$t1,MSG_LINK[$t0]
FFFC1F74 020D0D13		add		$t0,$t0,#32
FFFC1F78 FFFE0E13		sub		$t2,$t2,#1
FFFC1F7C FFC048E3		bgt		$t2,$x0,.0002
                        	
                        		; unlock the system semaphore	
                        		
FFFC1F80 FFF06813		ldi		v0,#-1
FFFC1F84 00024637		sw		v0,SysSema
FFFC1F88 34060613
FFFC1F8C 00060633
FFFC1F90 01062023
                        	
FFFC1F94 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Get the task id for the currently running task.
                        	;
                        	; Returns:
                        	;		v0 = task id
                        	;------------------------------------------------------------------------------
                        	
                        	GetCurrentTid:
FFFC1F98 18101873		csrrw	$v0,#$181,$x0				; get current asid
FFFC1F9C 03F87813		and		$v0,$v0,#MAX_TID		; mask off extra bits
FFFC1FA0 00008067		ret
                        	
                        	FMTK_GetCurrentTid:
FFFC1FA4 3000E073		csrrs	$x0,#$300,#1				; enable ints
                        		
FFFC1FA8 18101873		csrrw	v0,#$181,x0
FFFC1FAC 03F87813		and		v0,v0,#MAX_TID
FFFC1FB0 000868B3	mov		$v1,$v0
FFFC1FB4 00006813		ldi		$v0,#E_Ok
FFFC1FB8 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Parameters:
                        	;		a0 = task id
                        	;------------------------------------------------------------------------------
                        	
                        	MapOSPages:
FFFC1FBC 00306813		ldi			$v0,#OSPAGES	; number of pages pre-mapped
FFFC1FC0 00006893		ldi			$v1,#0
FFFC1FC4 01091893		sll			$v1,$a0,#16		; put ASID in proper spot
                        	.nxt:
FFFC1FC8 0318800D		mvmap		$x0,$v1,$v1
FFFC1FCC 00188893		add			$v1,$v1,#1
FFFC1FD0 FFF80813		sub			$v0,$v0,#1
FFFC1FD4 FF004AE3		bgt			$v0,$x0,.nxt
FFFC1FD8 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Select the next task to run. The ready lists are searched in a circular
                        	; fashion beginning with the list identified indirectly by QNDX. There are
                        	; four ready lists to hold tasks of four different priorities. 
                        	;
                        	; Parameters:
                        	;		none
                        	; Modifies:
                        	;		v1, t0, t1, t2, t3, t4
                        	;	Returns:
                        	;		v0 = task id of task to run
                        	;------------------------------------------------------------------------------
                        	
                        	SelectTaskToRun:
                        		; Pick the first queue to check, occasionally the queue
                        		; chosen isn't the highest priority one in order to 
                        		; prevent starvation of lower priority tasks.
                        	.searchQ:
FFFC1FDC 3000F073		csrrc	$x0,#$300,#1				; interrupts off
FFFC1FE0 00024637		ldbu	$v1,QNDX						; get index into que check table
FFFC1FE4 30460613
FFFC1FE8 00060633
FFFC1FEC 00064883
FFFC1FF0 00188893		add		$v1,$v1,#1					; increment it, and limit
FFFC1FF4 01F8F893		and		$v1,$v1,#31
FFFC1FF8 00024637		stb		$v1,QNDX						; store back
FFFC1FFC 30460613
FFFC2000 00060633
FFFC2004 01160023
FFFC2008 FFFC2637		ldbu	$v1,qToChk[$v1]			; assume this will be valid
FFFC200C E4A60613
FFFC2010 01160633
FFFC2014 00064883
FFFC2018 00406E13		ldi		$t2,#4							; 4 queues to check
                        	.nxtQ:
FFFC201C 1C08880D		getrdy	$v0,$v1
;	ldw		$v0,READYQ[$v1]			; check queue to see if contains any
FFFC2020 02085663		bge		$v0,$x0,.dq					; yes, go dequeue
                        	.0001:
FFFC2024 00188893		add		$v1,$v1,#1					; no, advance to next queue
FFFC2028 0038F893		and		$v1,$v1,#3					; 4 max
FFFC202C FFFE0E13		sub		$t2,$t2,#1					;
FFFC2030 FFC046E3		bgt		$t2,$x0,.nxtQ				; go back to check next queue
                        		; Here, nothing else is actually ready to run
FFFC2034 3000E073		csrrs	$x0,#$300,#1				; interrupts on
FFFC2038 10100073		wfi
FFFC203C FA0000E3		bra		.searchQ
                        		; just go back to what we were doing.
                        		
FFFC2040 18101873		csrrw	v0,#$181,x0
FFFC2044 03F87813		and		v0,v0,#MAX_TID
FFFC2048 00008067	ret
                        	.dq:
                        	;	ldi		$t3,#MAX_TID				; ensure we have a valid tid
                        	;	bleu	$v0,$t3,.goodTid
                        		; If the tid isn't valid the readyq was screwed up
                        	;	ldi		$t3,#-1							; indicate queue empty
                        	;	stw		$t3,READYQ[$v1]
                        	;	bra		.0001								; and try next queue
                        	.goodTid:
FFFC204C 3000E073		csrrs	$x0,#$300,#1				; interrupts on
FFFC2050 18181073		csrrw	$x0,#$181,$v0
                        		;sll		$t1,$v0,#LOG_TCBSZ
                        		;ldw		$t0,TCBNext[$t1]		; update head of ready queue
                        		;stw		$t0,READYQ[$v1]
FFFC2054 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	
                        	FMTK_SaveContext:
                        		
FFFC2058 18101873		csrrw	v0,#$181,x0
FFFC205C 03F87813		and		v0,v0,#MAX_TID
FFFC2060 00A81213	sll		$s1,$v0,#LOG_TCBSZ
                        	SaveContext:
FFFC2064 28A20D03		ldb		$t0,TCBContextSaved[$s1]
FFFC2068 0A0D1C63		bnez	$t0,.xit
                        		; Save outgoing register set in TCB
FFFC206C 79027073		csrrc	$x0,#CSR_REGSET,#4	; select previous (user) register set for Rs2
FFFC2070 00123423		sto		$x1,8[$s1]
FFFC2074 00223823		sto		$x2,16[$s1]
FFFC2078 00323C23		sto		$x3,24[$s1]
FFFC207C 02423023		sto		$x4,32[$s1]
FFFC2080 02523423		sto		$x5,40[$s1]
FFFC2084 02623823		sto		$x6,48[$s1]
FFFC2088 02723C23		sto		$x7,56[$s1]
FFFC208C 04823023		sto		$x8,64[$s1]
FFFC2090 04923423		sto		$x9,72[$s1]
FFFC2094 04A23823		sto		$x10,80[$s1]
FFFC2098 04B23C23		sto		$x11,88[$s1]
FFFC209C 06C23023		sto		$x12,96[$s1]
FFFC20A0 06D23423		sto		$x13,104[$s1]
FFFC20A4 06E23823		sto		$x14,112[$s1]
FFFC20A8 06F23C23		sto		$x15,120[$s1]
FFFC20AC 09023023		sto		$x16,128[$s1]
FFFC20B0 09123423		sto		$x17,136[$s1]
FFFC20B4 09223823		sto		$x18,144[$s1]
FFFC20B8 09323C23		sto		$x19,152[$s1]
FFFC20BC 0B423023		sto		$x20,160[$s1]
FFFC20C0 0B523423		sto		$x21,168[$s1]
FFFC20C4 0B623823		sto		$x22,176[$s1]
FFFC20C8 0B723C23		sto		$x23,184[$s1]
FFFC20CC 0D823023		sto		$x24,192[$s1]
FFFC20D0 0D923423		sto		$x25,200[$s1]
FFFC20D4 0DA23823		sto		$x26,208[$s1]
FFFC20D8 0DB23C23		sto		$x27,216[$s1]
FFFC20DC 0FC23023		sto		$x28,224[$s1]
FFFC20E0 0FD23423		sto		$x29,232[$s1]
FFFC20E4 0FE23823		sto		$x30,240[$s1]
FFFC20E8 0FF23C23		sto		$x31,248[$s1]
FFFC20EC 79026073		csrrs	$x0,#CSR_REGSET,#4				; select current register set for Rs2
FFFC20F0 34101173		csrrw	$x2,#$341,$x0				; save off mepc
FFFC20F4 28223023		sto		$x2,TCBepc[$s1]
                        		; Now save off segment registers
FFFC20F8 00006D93		ldi		$t1,#0
                        	.svseg:
FFFC20FC 01B00D0D		mvseg	$t0,$x0,$t1
FFFC2100 003D9113		sll		$x2,$t1,#3
FFFC2104 00410133		add		$x2,$x2,$s1
FFFC2108 21A13023		sto		$t0,TCBsegs[$x2]
FFFC210C 001D8D93		add		$t1,$t1,#1
FFFC2110 00FDFD93		and		$t1,$t1,#15
FFFC2114 FE0D94E3		bne		$t1,$x0,.svseg
FFFC2118 00106D13		ldi		$t0,#1
FFFC211C 29A20523		stb		$t0,TCBContextSaved[$s1]
                        	.xit:
FFFC2120 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	
                        	RestoreContext:
                        		; Switch memory maps
FFFC2124 00A2D813		srl		$v0,$s2,#10					; convert pointer to tid
FFFC2128 03F87813		and		$v0,$v0,#$3F				; mask to 64 task
FFFC212C 181818F3		csrrw	$v1,#$181,$v0				; set ASID
                        	
                        		; Restore segment register set
FFFC2130 00006D93		ldi		$t1,#0
                        	.rsseg:
FFFC2134 003D9113		sll		$x2,$t1,#3
FFFC2138 00510133		add		$x2,$x2,$s2
FFFC213C 20013D03		ldo		$t0,TCBsegs[$x2]
FFFC2140 01BD000D		mvseg	$x0,$t0,$t1
FFFC2144 001D8D93		add		$t1,$t1,#1
FFFC2148 00FDFD93		and		$t1,$t1,#15
FFFC214C FE0D94E3		bne		$t1,$x0,.rsseg
                        	
FFFC2150 2802B103		ldo		$x2,TCBepc[$s2]			; restore epc
FFFC2154 34111073		csrrw	$x0,#$341,$x2
                        		; Restore incoming registers
FFFC2158 7900F073		csrrc	$x0,#CSR_REGSET,#1				; select previous regset for Rd
FFFC215C 0082B083		ldo		$x1,8[$s2]
FFFC2160 0102B103		ldo		$x2,16[$s2]
FFFC2164 0182B183		ldo		$x3,24[$s2]
FFFC2168 0202B203		ldo		$x4,32[$s2]
FFFC216C 0282B283		ldo		$x5,40[$s2]
FFFC2170 0302B303		ldo		$x6,48[$s2]
FFFC2174 0382B383		ldo		$x7,56[$s2]
FFFC2178 0402B403		ldo		$x8,64[$s2]
FFFC217C 0482B483		ldo		$x9,72[$s2]
FFFC2180 0502B503		ldo		$x10,80[$s2]
FFFC2184 0582B583		ldo		$x11,88[$s2]
FFFC2188 0602B603		ldo		$x12,96[$s2]
FFFC218C 0682B683		ldo		$x13,104[$s2]
FFFC2190 0702B703		ldo		$x14,112[$s2]
FFFC2194 0782B783		ldo		$x15,120[$s2]
FFFC2198 0802B803		ldo		$x16,128[$s2]
FFFC219C 0882B883		ldo		$x17,136[$s2]
FFFC21A0 0902B903		ldo		$x18,144[$s2]
FFFC21A4 0982B983		ldo		$x19,152[$s2]
FFFC21A8 0A02BA03		ldo		$x20,160[$s2]
FFFC21AC 0A82BA83		ldo		$x21,168[$s2]
FFFC21B0 0B02BB03		ldo		$x22,176[$s2]
FFFC21B4 0B82BB83		ldo		$x23,184[$s2]
FFFC21B8 0C02BC03		ldo		$x24,192[$s2]
FFFC21BC 0C82BC83		ldo		$x25,200[$s2]
FFFC21C0 0D02BD03		ldo		$x26,208[$s2]
FFFC21C4 0D82BD83		ldo		$x27,216[$s2]
FFFC21C8 0E02BE03		ldo		$x28,224[$s2]
FFFC21CC 0E82BE83		ldo		$x29,232[$s2]
FFFC21D0 0F02BF03		ldo		$x30,240[$s2]
FFFC21D4 0F82BF83		ldo		$x31,248[$s2]
FFFC21D8 7900E073		csrrs	$x0,#CSR_REGSET,#1				; select current regset for Rd
FFFC21DC 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Swap from outgoing context to incoming context.
                        	;
                        	; Parameters:
                        	;		s1 = pointer to TCB of outgoing context
                        	;		s2 = pointer to TCB of incoming context
                        	;------------------------------------------------------------------------------
                        	
                        	SwapContext:
FFFC21E0 16520E63		beq		$s1,$s2,.noCtxSwitch@
FFFC21E4 3000FE73		csrrc	$t2,#$300,#1							; interrupts off
FFFC21E8 79001873		csrrw	$v0,#CSR_REGSET,$x0				; get register set
FFFC21EC F3F87893		and		$v1,$v0,#$FFFFFF3F				; set previous to user regset
FFFC21F0 79089073		csrrw	$x0,#CSR_REGSET,$v1	
FFFC21F4 28A20883		ldb		$v1,TCBContextSaved[$s1]
FFFC21F8 0A089863		bnez	$v1,.savedAlready
                        		; Save outgoing register set in TCB
FFFC21FC 79027073		csrrc	$x0,#CSR_REGSET,#4				; select previous (user) register set for Rs2
FFFC2200 00123423		sto		$x1,8[$s1]
FFFC2204 00223823		sto		$x2,16[$s1]
FFFC2208 00323C23		sto		$x3,24[$s1]
FFFC220C 02423023		sto		$x4,32[$s1]
FFFC2210 02523423		sto		$x5,40[$s1]
FFFC2214 02623823		sto		$x6,48[$s1]
FFFC2218 02723C23		sto		$x7,56[$s1]
FFFC221C 04823023		sto		$x8,64[$s1]
FFFC2220 04923423		sto		$x9,72[$s1]
FFFC2224 04A23823		sto		$x10,80[$s1]
FFFC2228 04B23C23		sto		$x11,88[$s1]
FFFC222C 06C23023		sto		$x12,96[$s1]
FFFC2230 06D23423		sto		$x13,104[$s1]
FFFC2234 06E23823		sto		$x14,112[$s1]
FFFC2238 06F23C23		sto		$x15,120[$s1]
FFFC223C 09023023		sto		$x16,128[$s1]
FFFC2240 09123423		sto		$x17,136[$s1]
FFFC2244 09223823		sto		$x18,144[$s1]
FFFC2248 09323C23		sto		$x19,152[$s1]
FFFC224C 0B423023		sto		$x20,160[$s1]
FFFC2250 0B523423		sto		$x21,168[$s1]
FFFC2254 0B623823		sto		$x22,176[$s1]
FFFC2258 0B723C23		sto		$x23,184[$s1]
FFFC225C 0D823023		sto		$x24,192[$s1]
FFFC2260 0D923423		sto		$x25,200[$s1]
FFFC2264 0DA23823		sto		$x26,208[$s1]
FFFC2268 0DB23C23		sto		$x27,216[$s1]
FFFC226C 0FC23023		sto		$x28,224[$s1]
FFFC2270 0FD23423		sto		$x29,232[$s1]
FFFC2274 0FE23823		sto		$x30,240[$s1]
FFFC2278 0FF23C23		sto		$x31,248[$s1]
FFFC227C 79026073		csrrs	$x0,#CSR_REGSET,#4				; select current register set for Rs2
FFFC2280 34101173		csrrw	$x2,#$341,$x0				; save off mepc
FFFC2284 28223023		sto		$x2,TCBepc[$s1]
                        		; Now save off segment registers
FFFC2288 00006D93		ldi		$t1,#0
                        	.svseg:
FFFC228C 01B00D0D		mvseg	$t0,$x0,$t1
FFFC2290 003D9113		sll		$x2,$t1,#3
FFFC2294 00410133		add		$x2,$x2,$s1
FFFC2298 21A13023		sto		$t0,TCBsegs[$x2]
FFFC229C 001D8D93		add		$t1,$t1,#1
FFFC22A0 00FDFD93		and		$t1,$t1,#15
FFFC22A4 FE0D94E3		bne		$t1,$x0,.svseg
                        	
                        	.savedAlready:
                        		; Restore segment register set
FFFC22A8 00006D93		ldi		$t1,#0
                        	.rsseg:
FFFC22AC 003D9113		sll		$x2,$t1,#3
FFFC22B0 00510133		add		$x2,$x2,$s2
FFFC22B4 20013D03		ldo		$t0,TCBsegs[$x2]
FFFC22B8 01BD000D		mvseg	$x0,$t0,$t1
FFFC22BC 001D8D93		add		$t1,$t1,#1
FFFC22C0 00FDFD93		and		$t1,$t1,#15
FFFC22C4 FE0D94E3		bne		$t1,$x0,.rsseg
                        	
FFFC22C8 2802B103		ldo		$x2,TCBepc[$s2]			; restore epc
FFFC22CC 34111073		csrrw	$x0,#$341,$x2
                        		; Restore incoming registers
FFFC22D0 7900F073		csrrc	$x0,#CSR_REGSET,#1				; select previous regset for Rd
FFFC22D4 0082B083		ldo		$x1,8[$s2]
FFFC22D8 0102B103		ldo		$x2,16[$s2]
FFFC22DC 0182B183		ldo		$x3,24[$s2]
FFFC22E0 0202B203		ldo		$x4,32[$s2]
FFFC22E4 0282B283		ldo		$x5,40[$s2]
FFFC22E8 0302B303		ldo		$x6,48[$s2]
FFFC22EC 0382B383		ldo		$x7,56[$s2]
FFFC22F0 0402B403		ldo		$x8,64[$s2]
FFFC22F4 0482B483		ldo		$x9,72[$s2]
FFFC22F8 0502B503		ldo		$x10,80[$s2]
FFFC22FC 0582B583		ldo		$x11,88[$s2]
FFFC2300 0602B603		ldo		$x12,96[$s2]
FFFC2304 0682B683		ldo		$x13,104[$s2]
FFFC2308 0702B703		ldo		$x14,112[$s2]
FFFC230C 0782B783		ldo		$x15,120[$s2]
FFFC2310 0802B803		ldo		$x16,128[$s2]
FFFC2314 0882B883		ldo		$x17,136[$s2]
FFFC2318 0902B903		ldo		$x18,144[$s2]
FFFC231C 0982B983		ldo		$x19,152[$s2]
FFFC2320 0A02BA03		ldo		$x20,160[$s2]
FFFC2324 0A82BA83		ldo		$x21,168[$s2]
FFFC2328 0B02BB03		ldo		$x22,176[$s2]
FFFC232C 0B82BB83		ldo		$x23,184[$s2]
FFFC2330 0C02BC03		ldo		$x24,192[$s2]
FFFC2334 0C82BC83		ldo		$x25,200[$s2]
FFFC2338 0D02BD03		ldo		$x26,208[$s2]
FFFC233C 0D82BD83		ldo		$x27,216[$s2]
FFFC2340 0E02BE03		ldo		$x28,224[$s2]
FFFC2344 0E82BE83		ldo		$x29,232[$s2]
FFFC2348 0F02BF03		ldo		$x30,240[$s2]
FFFC234C 0F82BF83		ldo		$x31,248[$s2]
FFFC2350 28028523		stb		$x0,TCBContextSaved[$s2]
FFFC2354 79081073		csrrw	$x0,#CSR_REGSET,$v0				; restore register set selections
FFFC2358 300E1073		csrrw	$x0,#$300,$t2							; restore interrupts
                        	.noCtxSwitch:
FFFC235C 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Operating system call dispatcher.
                        	;------------------------------------------------------------------------------
                        	
                        	OSCALL:
FFFC2360 79017073		csrrc	$x0,#CSR_REGSET,#2		; select previous regs for Rs1		
FFFC2364 00096933		mov		$a0,$a0								; move previous to current
FFFC2368 0009E9B3		mov		$a1,$a1
FFFC236C 000A6A33		mov		$a2,$a2
FFFC2370 000AEAB3		mov		$a3,$a3
FFFC2374 000B6B33		mov		$a4,$a4
FFFC2378 000BEBB3		mov		$a5,$a5
FFFC237C 79016073		csrrs	$x0,#CSR_REGSET,#2		; get back current registers for all
FFFC2380 40006D13		ldi		$t0,#1024
FFFC2384 03A96A63		bltu	$a0,$t0,.oscall
FFFC2388 01F97913		and		$a0,$a0,#31
FFFC238C 00191913		sll		$a0,$a0,#1
FFFC2390 FFFC1637		lhu		$t0,BIOSCallTbl[$a0]
FFFC2394 E8060613
FFFC2398 01260633
FFFC239C 00065D03
FFFC23A0 040D0E63		beqz	$t0,.zero
FFFC23A4 FFFC0637		or		$t0,$t0,#$FFFC0000
FFFC23A8 00060613
FFFC23AC 01A66D33
FFFC23B0 000D00E7		call	[$t0]									; call the BIOS Function
FFFC23B4 02000A63		bra		.xit
                        	.oscall:
FFFC23B8 01F97913		and		$a0,$a0,#31
FFFC23BC 04090063		beqz	$a0,.zero
FFFC23C0 00191913		sll		$a0,$a0,#1
FFFC23C4 FFFC2637		lhu		$t0,OSCallTbl[$a0]
FFFC23C8 E1460613
FFFC23CC 01260633
FFFC23D0 00065D03
FFFC23D4 020D0463		beqz	$t0,.zero
FFFC23D8 FFFC0637		or		$t0,$t0,#$FFFC0000
FFFC23DC 00060613
FFFC23E0 01A66D33
FFFC23E4 000D00E7		call	[$t0]									; call the OS Function
                        	.xit:
FFFC23E8 7900F073		csrrc	$x0,#CSR_REGSET,#1		; select previous regs for Rd
FFFC23EC 00086833		mov		$v0,$v0
FFFC23F0 0008E8B3		mov		$v1,$v1
FFFC23F4 7900E073		csrrs	$x0,#CSR_REGSET,#1		; select current regs for Rd
FFFC23F8 10000073		eret
                        	.zero:
FFFC23FC 01A06813		ldi		$v0,#E_BadCallno
FFFC2400 FE0004E3		bra		.xit
                        	
                        	;------------------------------------------------------------------------------
                        	; Sleep for a number of ticks. Tick interval determined by the VIA timer #3.
                        	; Passing a time of zero or less causes the function to return right away.
                        	;
                        	; Parameters:
                        	;		a1 = length of time to sleep (must be >= 0)
                        	; Returns:
                        	;		none
                        	;------------------------------------------------------------------------------
                        	
                        	FMTK_Sleep:
FFFC2404 3000E073		csrrs	$x0,#$300,#1				; enable ints
FFFC2408 FF870713		sub		$sp,$sp,#8
FFFC240C 00173023		sto		$ra,[$sp]
FFFC2410 0E09C863		bltz	$a1,.xit
                        		
FFFC2414 18101873		csrrw	v0,#$181,x0
FFFC2418 03F87813		and		v0,v0,#MAX_TID
FFFC241C 00A81213	sll		$s1,$v0,#LOG_TCBSZ
                        		; First thing: set end time. We don't want to include time spent in the OS in
                        		; the time accounting, so we set the end time as soon as possible.
FFFC2420 70101E73		csrrw	$t2,#$701,$x0					; get time
FFFC2424 2BC23C23		sto		$t2,TCBEndTime[$s1]
FFFC2428 00098C63		beqz	$a1,.0001
FFFC242C 00086933		mov		$a0,$v0								; a0 = current tid
FFFC2430 3000F073		csrrc	$x0,#$300,#1					; disable ints
FFFC2434 0E1000EF		call	RemoveFromReadyList
FFFC2438 195000EF		call	InsertIntoTimeoutList	; a1 = timeout
FFFC243C 3000E073		csrrs	$x0,#$300,#1					; enable ints
                        	.0001:
FFFC2440 28824803		ldbu	$v0,TCBStatus[$s1]		; flag task as no longer running
FFFC2444 F7F87813		and		$v0,$v0,#~TS_RUNNING
FFFC2448 29020423		stb		$v0,TCBStatus[$s1]
                        	
                        		;	AccountTime
FFFC244C 2B823E03		ldo		$t2,TCBEndTime[$s1]		; get back end time
FFFC2450 2B023E83		ldo		$t3,TCBStartTime[$s1]
FFFC2454 41DE0F33		sub		$t4,$t2,$t3						; end - start
FFFC2458 2C023F83		ldo		$t5,TCBElapsedTime[$s1]
FFFC245C 01EF8FB3		add		$t5,$t5,$t4						; ticks + (end - start)
FFFC2460 2DF23023		sto		$t5,TCBElapsedTime[$s1]
                        		; Will switch to target memory map.
FFFC2464 B79FF0EF		call	SelectTaskToRun
                        	
FFFC2468 00A81293		sll		$s2,$v0,#LOG_TCBSZ		; s2 = pointer to incoming TCB
FFFC246C 2882C103		ldbu	$x2,TCBStatus[$s2]		; x2 = incoming status
FFFC2470 08116E13		or		$t2,$x2,#TS_RUNNING|TS_READY	; set status = running
FFFC2474 2C82A103		ldt		$x2,TCBException[$s2]	;
FFFC2478 00010A63		beqz	$x2,.noException
                        		; set link register to catch handler address
                        		;{
                        		;	t->regs[29] = t->regs[28];   // set link register to catch handler
                        		;	t->epc = t->regs[28];        // and the PC register
                        		;	t->regs[1] = t->exception;    // r1 = exception value
                        		;	t->exception = 0;
                        		;	t->regs[2] = 45;              // r2 = exception type
                        		;}
FFFC247C 0022B423		sto		$x2,8[$s2]						; r1 = exception
FFFC2480 2C02A423		stt		$x0,TCBException[$s2]	; tcb->exception = 0
FFFC2484 02D06113		ldi		$x2,#45
FFFC2488 0022B823		sto		$x2,16[$s2]						; r2 = 45
                        	.noException:
                        	
                        		; If a message is ready, update status to ready and put
                        		; message in target memory. The task will be returning
                        		; from a WaitMsg so a return status of E_Ok is also set.
FFFC248C 004E7113		and		$x2,$t2,#TS_MSGRDY
FFFC2490 04010E63		beqz	$x2,.noMsg
FFFC2494 00010D37		ldi		$t0,#$10000						; mprv bit
FFFC2498 000D0D13
FFFC249C 0A02B903		ldo		$a0,160[$s2]					; user a2 (x20)
FFFC24A0 00090A63		beqz	$a0,.0002
FFFC24A4 2982B103		ldo		$x2,TCBMsgD1[$s2]
FFFC24A8 300D2073		csrrs	$x0,#$300,$t0					; set mprv
FFFC24AC 00293023		sto		$x2,[$a0]							; store to user space
FFFC24B0 300D3073		csrrc	$x0,#$300,$t0					; clear mprv
                        	.0002:
FFFC24B4 0A82B903		ldo		$a0,168[$s2]
FFFC24B8 00090A63		beqz	$a0,.0003
FFFC24BC 2A02B103		ldo		$x2,TCBMsgD2[$s2]
FFFC24C0 300D2073		csrrs	$x0,#$300,$t0					; set mprv
FFFC24C4 00293023		sto		$x2,[$a0]
FFFC24C8 300D3073		csrrc	$x0,#$300,$t0					; set mprv
                        	.0003:
FFFC24CC 0B02B903		ldo		$a0,176[$s2]
FFFC24D0 00090A63		beqz	$a0,.0004
FFFC24D4 2A82B103		ldo		$x2,TCBMsgD3[$s2]
FFFC24D8 300D2073		csrrs	$x0,#$300,$t0					; set mprv
FFFC24DC 00293023		sto		$x2,[$a0]
FFFC24E0 300D3073		csrrc	$x0,#$300,$t0					; set mprv
                        	.0004:
FFFC24E4 00006113		ldi		$x2,#E_Ok						; setup to return E_Ok
FFFC24E8 0822B023		sto		$x2,128[$s2]					; in v0
                        	
                        	.noMsg:
FFFC24EC FFBE7E13		and		$t2,$t2,#~TS_MSGRDY		; mask out message ready status
FFFC24F0 29C28423		stb		$t2,TCBStatus[$s2]
                        	
                        		; A context switch will be performed by the scheduler IRQ when a tick occurs.
                        		; Go to a low power mode while waiting for the interrupt.
                        		; The context switch will return after the wfi. However, another interrupt
                        		; might have occurred that didn't switch the context. So, the task status
                        		; is checked to see if it's ready yet. If not the wait continues.
                        		; What's really wanted is a wait for scheduler task interrupt.
FFFC24F4 CEDFF0EF		call	SwapContext
                        	;.wait:
                        	;	wfi
                        	;	ldbu	$t2,TCBStatus[$s1]
                        	;	and		$t2,$t2,#TS_READY
                        	;	beqz	$t2,.wait
                        	
                        		; As above, we want to minimize the impact of the OS on the tasks scheduled
                        		; time. So we set the start time as late as possible.
FFFC24F8 70101E73		csrrw	$t2,#$701,$x0					; get time
FFFC24FC 2BC23823		sto		$t2,TCBStartTime[$s1]
                        	.xit:
FFFC2500 00073083		ldo		$ra,[$sp]
FFFC2504 00870713		add		$sp,$sp,#8
FFFC2508 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; SchedulerIRQ meant to be called from the timer ISR.
                        	;------------------------------------------------------------------------------
                        	
                        	FMTK_SchedulerIRQ:
FFFC250C 7920E873		csrrs	$v0,#$792,#1					; check and set semaphore
FFFC2510 00187813		and		$v0,$v0,#1
FFFC2514 00080463		beqz	$v0,.doSchedule				; do scheduling only if semaphore clear
FFFC2518 00008067		ret
                        	.doSchedule:
FFFC251C 3000E073		csrrs	$x0,#$300,#1					; enable ints
                        		
FFFC2520 18101873		csrrw	v0,#$181,x0
FFFC2524 03F87813		and		v0,v0,#MAX_TID
FFFC2528 00A81213	sll		$s1,$v0,#LOG_TCBSZ		; compute pointer to TCB
FFFC252C 70101E73		csrrw	$t2,#$701,$x0					; get time
FFFC2530 2BC23C23		sto		$t2,TCBEndTime[$s1]
FFFC2534 1600000D		decto												; decrement timeouts (takes 64 clock cycles async)
FFFC2538 FF870713		sub		$sp,$sp,#8
FFFC253C 00173023		sto		$ra,[$sp]
FFFC2540 00024937		ldi		$a0,#SysSema
FFFC2544 34090913
FFFC2548 01406993		ldi		$a1,#20
                        	;	call	LockSemaphore
                        	;	beq		$v0,$x0,.noLock
                        	; Might need the following if the external timer isn't used.
                        	;	csrrw	$v0,#$701,$x0					; get the time
                        	;	add		$v0,$v0,#300000				; wait 300,000 cycles @40MHz (30ms)
                        	;	csrrw	$x0,#$321,$v0					; set next interrupt time
                        		;	AccountTime
FFFC254C 2B023E83		ldo		$t3,TCBStartTime[$s1]
FFFC2550 41DE0F33		sub		$t4,$t2,$t3						; end - start
FFFC2554 2C023F83		ldo		$t5,TCBElapsedTime[$s1]
FFFC2558 01EF8FB3		add		$t5,$t5,$t4						; ticks + (end - start)
FFFC255C 2DF23023		sto		$t5,TCBElapsedTime[$s1]
                        	
FFFC2560 28824F83		ldbu	$t5,TCBStatus[$s1]
FFFC2564 020FEF93		or		$t5,$t5,#TS_PREEMPT
FFFC2568 F7FFFF93		and		$t5,$t5,#~TS_RUNNING	; no longer running, but may still be ready
FFFC256C 29F20423		stb		$t5,TCBStatus[$s1]
                        		; Keep popping the timeout list as long as there are tasks on it with
                        		; expired timeouts.
FFFC2570 00006913		ldi		$a0,#0
FFFC2574 1400038D		getzl	$s4		; Get list of tasks whose timeout is zero
                        	.0001:
FFFC2578 00A91F13		sll		$t4,$a0,#10
FFFC257C 288F4E03		lbu		$t2,TCBStatus[$t4]
FFFC2580 010E7E13		and		$t2,$t2,#TS_TIMEOUT
FFFC2584 020E0463		beqz	$t2,.noTimeout
FFFC2588 0013FE13		and		$t2,$s4,#1					; is zero bit set?
FFFC258C 020E0063		beqz	$t2,.notZero
FFFC2590 288F4E03		lbu		$t2,TCBStatus[$t4]
FFFC2594 FE7E7E13		and		$t2,$t2,#~(TS_TIMEOUT|TS_WAITMSG)
	sb		$t2,TCBStatus[$t4]
FFFC2598 29CF0423
FFFC259C 3000F073		csrrc	$x0,#$300,#1				; disable ints
FFFC25A0 308000EF		call	MbxRemoveTask
FFFC25A4 6CC000EF		call	InsertIntoReadyList
FFFC25A8 3000E073		csrrs	$x0,#$300,#1				; enable ints
                        	.notZero:
                        	.noTimeout:
FFFC25AC 00190913		add		$a0,$a0,#1
FFFC25B0 0013D393		srl		$s4,$s4,#1	
FFFC25B4 FC0392E3		bnez	$s4,.0001
                        	
                        		; The ready list was just updated, there could be new tasks
                        		; ready to run. Will switch to target memory map.
                        	.searchQ:
FFFC25B8 00024637		ldbu	$v1,QNDX						; get index into que check table
FFFC25BC 30460613
FFFC25C0 00060633
FFFC25C4 00064883
FFFC25C8 00188893		add		$v1,$v1,#1					; increment it, and limit
FFFC25CC 01F8F893		and		$v1,$v1,#31
FFFC25D0 00024637		stb		$v1,QNDX						; store back
FFFC25D4 30460613
FFFC25D8 00060633
FFFC25DC 01160023
FFFC25E0 FFFC2637		ldbu	$v1,qToChk[$v1]			; assume this will be valid
FFFC25E4 E4A60613
FFFC25E8 01160633
FFFC25EC 00064883
FFFC25F0 00406E13		ldi		$t2,#4							; 4 queues to check
                        	.nxtQ:
FFFC25F4 1C08880D		getrdy	$v0,$v1
;	ldw		$v0,READYQ[$v1]			; check queue to see if contains any
FFFC25F8 00085E63		bge		$v0,$x0,.dq					; yes, go dequeue
FFFC25FC 00188893		add		$v1,$v1,#1					; no, advance to next queue
FFFC2600 0038F893		and		$v1,$v1,#3					; 4 max
FFFC2604 FFFE0E13		sub		$t2,$t2,#1					;
FFFC2608 FFC046E3		bgt		$t2,$x0,.nxtQ				; go back to check next queue
                        		; Here, nothing else is actually ready to run
                        		; just go back to what we were doing.
                        		
FFFC260C 18101873		csrrw	v0,#$181,x0
FFFC2610 03F87813		and		v0,v0,#MAX_TID
                        	.dq:
                        	.goodTid:
FFFC2614 18181073		csrrw	$x0,#$181,$v0
                        	
FFFC2618 00A81293		sll		$s2,$v0,#LOG_TCBSZ	; s2 = pointer to incoming TCB
FFFC261C 2882C103		lbu		$x2,TCBStatus[$s2]	; x2 = incoming status
FFFC2620 08116E13		or		$t2,$x2,#TS_RUNNING|TS_READY	; status = running
FFFC2624 2C82B103		ldo		$x2,TCBException[$s2]	;
FFFC2628 00010263		beqz	$x2,.noException
                        		; set link register to catch handler address
                        		;{
                        		;	t->regs[29] = t->regs[28];   // set link register to catch handler
                        		;	t->epc = t->regs[28];        // and the PC register
                        		;	t->regs[1] = t->exception;    // r1 = exception value
                        		;	t->exception = 0;
                        		;	t->regs[2] = 45;              // r2 = exception type
                        		;}
                        	.noException:
                        	
                        		; If a message is ready, update status to ready and put
                        		; message in target memory. The task will be returning
                        		; from a WaitMsg so a return status of E_Ok is also set.
FFFC262C 06000263		bra		.noMsg
FFFC2630 004E7113		and		$x2,$t2,#TS_MSGRDY
FFFC2634 04010E63		beq		$x2,$x0,.noMsg
FFFC2638 00010D37		ldi		$t0,#$10000						; mprv bit
FFFC263C 000D0D13
FFFC2640 0A02B903		ldo		$a0,160[$s2]					; user a2 (x20)
FFFC2644 00090A63		beq		$a0,$x0,.0002
FFFC2648 2982B103		ldo		$x2,TCBMsgD1[$s2]
FFFC264C 300D2073		csrrs	$x0,#$300,$t0					; set mprv
FFFC2650 00293023		sto		$x2,[$a0]
FFFC2654 300D3073		csrrc	$x0,#$300,$t0					; set mprv
                        	.0002:
FFFC2658 0A82B903		ldo		$a0,168[$s2]
FFFC265C 00090A63		beq		$a0,$x0,.0003
FFFC2660 2A02B103		ldo		$x2,TCBMsgD2[$s2]
FFFC2664 300D2073		csrrs	$x0,#$300,$t0					; set mprv
FFFC2668 00293023		sto		$x2,[$a0]
FFFC266C 300D3073		csrrc	$x0,#$300,$t0					; set mprv
                        	.0003:
FFFC2670 0B02B903		ldo		$a0,176[$s2]
FFFC2674 00090A63		beq		$a0,$x0,.0004
FFFC2678 2A82B103		ldo		$x2,TCBMsgD3[$s2]
FFFC267C 300D2073		csrrs	$x0,#$300,$t0					; set mprv
FFFC2680 00293023		sto		$x2,[$a0]
FFFC2684 300D3073		csrrc	$x0,#$300,$t0					; set mprv
                        	.0004:
FFFC2688 00006113		ldi		$x2,#E_Ok						; setup to return E_Ok
FFFC268C 0822B023		sto		$x2,128[$s2]				; in v0
                        	
                        	.noMsg:
FFFC2690 FFBE7E13		and		$t2,$t2,#~TS_MSGRDY		; mask out message ready status
FFFC2694 29C28423		stb		$t2,TCBStatus[$s2]
                        	
                        		
FFFC2698 FFF06813		ldi		v0,#-1
FFFC269C 00024637		sw		v0,SysSema
FFFC26A0 34060613
FFFC26A4 00060633
FFFC26A8 01062023
                        	
                        	.noLock:
FFFC26AC B35FF0EF		call	SwapContext
FFFC26B0 00073083		ldo		$ra,[$sp]
FFFC26B4 00870713		add		$sp,$sp,#8
FFFC26B8 70101E73		csrrw	$t2,#$701,$x0					; get low time
FFFC26BC 2BC2B823		sto		$t2,TCBStartTime[$s2]
FFFC26C0 7920F073		csrrc	$x0,#$792,#1				; clear scheduling semaphore
FFFC26C4 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Start a task.
                        	;	Task status is set to ready, priority normal, and the task is inserted into
                        	; the ready list. Segment registers are setup for a flat memory model.
                        	; 
                        	;	Parameters:
                        	;		a1 = memory required
                        	;		a2 = start pc (usually $100)
                        	;	Modifies:
                        	;		a0 = mid
                        	;	Returns:
                        	;		v0 = E_Ok if successful
                        	;		v1 = tid of started task if successful
                        	;------------------------------------------------------------------------------
                        	;
                        	FMTK_StartTask:
FFFC26C8 3000E073		csrrs	$x0,#$300,#1				; enable ints
FFFC26CC FF870713		sub		$sp,$sp,#8
FFFC26D0 00173023		sto		$ra,[$sp]
FFFC26D4 07D000EF		call	AllocTCB
FFFC26D8 00004637		stb		$v1,$4321
FFFC26DC 32160613
FFFC26E0 00060633
FFFC26E4 01160023
FFFC26E8 0E081263		bnez	$v0,.err
FFFC26EC 0008E933		mov		$a0,$v1
FFFC26F0 9DDFE0EF		call	FreeAll
FFFC26F4 8C9FF0EF		call	MapOSPages			; Map OS pages into address space
FFFC26F8 00A91213		sll		$s1,$a0,#LOG_TCBSZ	; compute TCB address
FFFC26FC 975FE0EF		call	AllocStack
FFFC2700 00096333		mov		$s3,$a0
FFFC2704 00086933		mov		$a0,$v0
FFFC2708 814FE0EF		call	PutHexWord
FFFC270C 00036933		mov		$a0,$s3
FFFC2710 A0010637		add		$t0,$v1,#$A000FFFC	; set stack pointer
FFFC2714 FFC60613
FFFC2718 01160D33
FFFC271C 07A23823		sto		$t0,112[$s1]
FFFC2720 29423023		sto		$a2,TCBepc[$s1]	; address task will begin at
FFFC2724 891FE0EF		call	Alloc
FFFC2728 00004637		stb		$v0,$4320
FFFC272C 32060613
FFFC2730 00060633
FFFC2734 01060023
FFFC2738 08081A63		bnez	$v0,.err
FFFC273C 00106D13		ldi		$t0,#TS_READY
FFFC2740 29A20423		stb		$t0,TCBStatus[$s1]
FFFC2744 00206D13		ldi		$t0,#2					; normal execution priority
FFFC2748 29A204A3		stb		$t0,TCBPriority[$s1]
                        		; leave segment base at $0, flat memory model
FFFC274C 00606D13		ldi		$t0,#6							; read,write
FFFC2750 21A23023		sto		$t0,TCBsegs[$s1]			; segs 0 to 11
FFFC2754 21A23423		sto		$t0,TCBsegs+8[$s1]
FFFC2758 21A23823		sto		$t0,TCBsegs+16[$s1]
FFFC275C 21A23C23		sto		$t0,TCBsegs+24[$s1]
FFFC2760 23A23023		sto		$t0,TCBsegs+32[$s1]
FFFC2764 23A23423		sto		$t0,TCBsegs+40[$s1]
FFFC2768 23A23823		sto		$t0,TCBsegs+48[$s1]
FFFC276C 23A23C23		sto		$t0,TCBsegs+56[$s1]
FFFC2770 25A23023		sto		$t0,TCBsegs+64[$s1]
FFFC2774 25A23423		sto		$t0,TCBsegs+72[$s1]
FFFC2778 25A23823		sto		$t0,TCBsegs+80[$s1]
FFFC277C 25A23C23		sto		$t0,TCBsegs+88[$s1]
FFFC2780 00506D13		ldi		$t0,#5							; read,execute
FFFC2784 27A23023		sto		$t0,TCBsegs+96[$s1]	; segs 12 to 15
FFFC2788 27A23423		sto		$t0,TCBsegs+104[$s1]
FFFC278C 27A23823		sto		$t0,TCBsegs+112[$s1]
FFFC2790 27A23C23		sto		$t0,TCBsegs+120[$s1]
FFFC2794 00106993		ldi		$a1,#1
FFFC2798 81DFE0EF		call	Alloc
FFFC279C 33123823		sto		$v1,TCBVideoMem[$s1]
FFFC27A0 FFD00D37		ldi		$t0,#$FFD00000
FFFC27A4 000D0D13
FFFC27A8 33A23C23		sto		$t0,TCBpVideo[$s1]
FFFC27AC 00A25913		srl		$a0,$s1,#LOG_TCBSZ	; need the tid again
FFFC27B0 3000F073		csrrc	$x0,#$300,#1				; disable ints
FFFC27B4 4BC000EF		call	InsertIntoReadyList
FFFC27B8 000968B3		mov		$v1,$a0
FFFC27BC 860FE0EF		call	DumpMemmap
                        	.xit:
FFFC27C0 00073083		ldo		$ra,[$sp]
FFFC27C4 00870713		add		$sp,$sp,#8
FFFC27C8 00008067		ret
                        	.err:
FFFC27CC 00000013		nop
FFFC27D0 00000013		nop
FFFC27D4 FE000CE3		bra		.err
                        	
                        	;------------------------------------------------------------------------------
                        	; Exit the current task.
                        	;
                        	; Parameters:
                        	;		none
                        	; Modifies:
                        	;		a1 = task id
                        	;------------------------------------------------------------------------------
                        	
                        	FMTK_ExitTask:
FFFC27D8 3000E073		csrrs	$x0,#$300,#1				; enable ints
FFFC27DC FF870713		sub		$sp,$sp,#8
FFFC27E0 00173023		sto		$ra,[$sp]
                        		
FFFC27E4 18101873		csrrw	v0,#$181,x0
FFFC27E8 03F87813		and		v0,v0,#MAX_TID
FFFC27EC 000869B3	mov		a1,v0
FFFC27F0 00000637		call	KillTask
FFFC27F4 204600E7
                        	.xit:
FFFC27F8 00073083		ldo		$ra,[$sp]
FFFC27FC 00870713		add		$sp,$sp,#8
FFFC2800 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Parameters:
                        	;		a1 = tid of task to kill
                        	;------------------------------------------------------------------------------
                        	
                        	FMTK_KillTask:
FFFC2804 3000E073		csrrs	$x0,#$300,#1				; enable ints
FFFC2808 FF870713		sub		$sp,$sp,#8
FFFC280C 00173023		sto		$ra,[$sp]
FFFC2810 04098A63		beqz	$a1,.immortal		; tid #0 is immortal (the system)
FFFC2814 00206D13		ldi		$t0,#TS_DEAD				; flag task as dead (prevents it from being re-queued)
FFFC2818 03F9FD93		and		$t1,$a1,#MAX_TID		; limit tid
FFFC281C 00AD9D93		sll		$t1,$t1,#LOG_TCBSZ	; convert to TCB address
FFFC2820 29AD8423		stb		$t0,TCBStatus[$t1]
FFFC2824 0009E933		mov		$a0,$a1								; a0 = pid
FFFC2828 3000F073		csrrc	$x0,#$300,#1				; disable ints
FFFC282C 4E8000EF		call	RemoveFromReadyList
FFFC2830 89DFE0EF		call	FreeAll							; free all the memory associated with the task
                        		; Now make process ID available for reuse
FFFC2834 00024637		ldo		$t1,PIDMAP
FFFC2838 31060613
FFFC283C 00060633
FFFC2840 00063D83
FFFC2844 00106D13		ldi		$t0,#1							; generate bit "off" mask
FFFC2848 013D1D33		sll		$t0,$t0,$a1
FFFC284C FFFD4D13		xor		$t0,$t0,#-1					; complment for inverted mask
FFFC2850 01ADFDB3		and		$t1,$t1,$t0
FFFC2854 00024637		sto		$t1,PIDMAP
FFFC2858 31060613
FFFC285C 00060633
FFFC2860 01B63023
                        	.immortal:
FFFC2864 00006813		ldi		$v0,#E_Ok
                        	.xit:
FFFC2868 00073083		ldo		$ra,[$sp]
FFFC286C 00870713		add		$sp,$sp,#8
FFFC2870 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	
                        	FMTK_AllocVideoBuf:
                        		
FFFC2874 18101873		csrrw	v0,#$181,x0
FFFC2878 03F87813		and		v0,v0,#MAX_TID
FFFC287C 00086933	mov		$a0,$v0
FFFC2880 00106993		ldi		$a1,#1			; request 1 byte to get 1 page (64kB)
FFFC2884 F30FE0EF		call	Alloc
FFFC2888 00081E63		bnez	$v0,.err
FFFC288C 00A91213		sll		$s1,$a0,#LOG_TCBSZ
FFFC2890 00000637		sto		$v1,TCBVidMem[$s1]
FFFC2894 20A60613
FFFC2898 00460633
FFFC289C 01163023
FFFC28A0 33123C23		sto		$v1,TCBpVideo[$s1]
                        	.err:
FFFC28A4 00008067		ret
                        	
                        	.file "boot.r5a",1
                        	.file "boot.r5a",1
                        	.file "../fmtk/msg.r5a",1
                        	.file "../fmtk/msg.r5a",1
                        	; ============================================================================
                        	;        __
                        	;   \\__/ o\    (C) 2020  Robert Finch, Stratford
                        	;    \  __ /    All rights reserved.
                        	;     \/_//     robfinch<remove>@finitron.ca
                        	;       ||
                        	;  
                        	;
                        	; This source file is free software: you can redistribute it and/or modify 
                        	; it under the terms of the GNU Lesser General Public License as published 
                        	; by the Free Software Foundation, either version 3 of the License, or     
                        	; (at your option) any later version.                                      
                        	;                                                                          
                        	; This source file is distributed in the hope that it will be useful,      
                        	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                        	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                        	; GNU General Public License for more details.                             
                        	;                                                                          
                        	; You should have received a copy of the GNU General Public License        
                        	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                        	;
                        	; ============================================================================
                        	
                        	MBX_OWNER			equ		0		; tid of owning task
                        	MBX_WTIDS			equ		8		; tasks waiting at mailbox
                        	MBX_MQHEAD		equ		16		
                        	MBX_MQTAIL		equ		24
                        	MBX_SIZE			equ		32
                        	LOG_MBXSZ			equ		5
                        	
                        	MSG_LINK	equ		0
                        	MSG_D1		equ		8
                        	MSG_D2		equ		16
                        	MSG_D3		equ		24
                        	MSG_SIZE	equ		32
                        	LOG_MSGSZ	equ		5
                        	
                        	;	bss
                        	;	align 4
                        	;FreeMsg	dw	0
                        	;msgs:
                        	;	fill.b	MSG_SIZE*1024,0
                        	;mbxs:
                        	;	fill.b	MBX_SIZE*32,0
                        	;mbxs_end:
                        	
                        	.file "../fmtk/msg.r5a",48
                        		code
                        		align	4                        	
                        	
                        	;------------------------------------------------------------------------------
                        	; Remove the task from the list of tasks waiting at the mailbox.
                        	; This routine is only called from a couple of places and it is convenient
                        	; not to stack the return address. So, it is implemented as a macro.
                        	;
                        	; Parameters:
                        	;		a0 = task id
                        	;------------------------------------------------------------------------------
                        	
                        	MbxRemoveTask:
FFFC28A8 FE070713		sub		$sp,$sp,#32
FFFC28AC 00473023		sto		$s1,[$sp]
FFFC28B0 01A73423		sto		$t0,8[$sp]
FFFC28B4 01B73823		sto		$t1,16[$sp]
FFFC28B8 01C73C23		sto		$t2,24[$sp]
FFFC28BC 00A91213		sll		$s1,$a0,#LOG_TCBSZ		; tid to pointer
FFFC28C0 28C21D03		lh		$t0,TCBWaitMbx[$s1]		; get mailbox handle
FFFC28C4 020D4663		blt		$t0,$x0,.xit					; handle good?
FFFC28C8 005D1D13		sll		$t0,$t0,#LOG_MBXSZ		; convert to pointer
FFFC28CC 00020637		add		$t0,$t0,#mbxs					; by adding base address
FFFC28D0 00060613
FFFC28D4 01A60D33
FFFC28D8 008D3D83		ldo		$t1,MBX_WTIDS[$t0]		; get waiting task list
FFFC28DC 00106E13		ldi		$t2,#1								; create a mask for given task id
FFFC28E0 012E1E33		sll		$t2,$t2,$a0
FFFC28E4 FFFE4E13		xor		$t2,$t2,#-1
FFFC28E8 01CDFDB3		and		$t1,$t1,$t2						; clear bit
FFFC28EC 01BD3423		sto		$t1,MBX_WTIDS[$t0]		; update waiting task list
                        	.xit:
FFFC28F0 00073203		ldo		$s1,[$sp]
FFFC28F4 00873D03		ldo		$t0,8[$sp]
FFFC28F8 01073D83		ldo		$t1,16[$sp]
FFFC28FC 01873E03		ldo		$t2,24[$sp]
FFFC2900 02070713		add		$sp,$sp,#32
FFFC2904 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Allocate a mailbox.
                        	;
                        	; Parameters:
                        	;		a1 = task id of owner
                        	;		a2 = pointer where to store handle
                        	; Returns:
                        	;		v0 = E_Ok
                        	;------------------------------------------------------------------------------
                        	
                        	FMTK_AllocMbx:
                        		; Enable interrupts
FFFC2908 3000E073		csrrs	$x0,#$300,#1				
FFFC290C FF870713		sub		$sp,$sp,#8
FFFC2910 00173023		sto		$ra,[$sp]
FFFC2914 040A0C63		beq		$a2,$x0,.badArg
FFFC2918 00020D37		ldi		$t0,#mbxs
FFFC291C 000D0D13
                        	.nxt:
FFFC2920 000D4D83		ldbu	$t1,MBX_OWNER[$t0]
FFFC2924 000D8E63		beq		$t1,$x0,.noOwner
FFFC2928 020D0D13		add		$t0,$t0,#MBX_SIZE
FFFC292C 00022637		slt		$t1,$t0,#mbxs_end
FFFC2930 00060613
FFFC2934 FE0D96E3		bne		$t1,$x0,.nxt
FFFC2938 04006813		ldi		$v0,#E_NoMoreMbx
FFFC293C 02000A63		bra		.xit
                        	.noOwner:
FFFC2940 013D0023		stb		$a1,MBX_OWNER[$t0]
FFFC2944 FFFE0637		sub		$t5,$t0,#mbxs				; convert pointer to handle
FFFC2948 00060613
FFFC294C 41A60FB3
FFFC2950 005FDF93		srl		$t5,$t5,#LOG_MBXSZ
FFFC2954 0009E933		mov		$a0,$a1
FFFC2958 000A69B3		mov		$a1,$a2
FFFC295C FD4FE0EF		call	VirtToPhys
FFFC2960 01F83023		sto		$t5,[$v0]
FFFC2964 00006813		ldi		$v0,#E_Ok
FFFC2968 00000463		bra		.xit
                        	.badArg:
FFFC296C 00106813		ldi		$v0,#E_Arg
                        	.xit:
FFFC2970 00073083		ldo		$ra,[$sp]
FFFC2974 00870713		add		$sp,$sp,#8
FFFC2978 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Free a mailbox
                        	;
                        	;------------------------------------------------------------------------------
                        	
                        	FMTK_FreeMbx:
                        		; Enable interrupts
FFFC297C 3000E073		csrrs	$x0,#$300,#1				
FFFC2980 FF870713		sub		$sp,$sp,#8
FFFC2984 00173023		sto		$ra,[$sp]
FFFC2988 1009A213		slt		$s1,$a1,#NR_MBX
FFFC298C 06020863		beq		$s1,$x0,.badMbx
FFFC2990 00599213		sll		$s1,$a1,#LOG_MBXSZ		; convert handle to pointer
FFFC2994 00020637		add		$s1,$s1,#mbxs
FFFC2998 00060613
FFFC299C 00460233
FFFC29A0 00006293		ldi		$s2,#0
FFFC29A4 04006393		ldi		$s4,#NR_TCB						; possibly 64 tasks
FFFC29A8 00823483		ldo		$s6,MBX_WTIDS[$s1]
                        	.0002:
FFFC29AC 0014F313		and		$s3,$s6,#1
FFFC29B0 02030C63		beq		$s3,$x0,.0001
FFFC29B4 00A29413		sll		$s5,$s2,#LOG_TCBSZ		; tid to pointer
FFFC29B8 28844803		lbu		$v0,TCBStatus[$s5]
FFFC29BC FF787813		and		$v0,$v0,#~TS_WAITMSG	; no longer waiting
FFFC29C0 29040423		stb		$v0,TCBStatus[$s5]
FFFC29C4 01087813		and		$v0,$v0,#TS_TIMEOUT
FFFC29C8 0002E933		mov		$a0,$s2
                        		; Disable interrupts
FFFC29CC 3000F073		csrrc	$x0,#$300,#1
FFFC29D0 00080463		beqz	$v0,.0003
FFFC29D4 4DC000EF		call	RemoveFromTimeoutList
                        	.0003:
FFFC29D8 298000EF		call	InsertIntoReadyList
FFFC29DC 3000E073		csrrs	$x0,#$300,#1					; enable ints
FFFC29E0 00B06813		ldi		$v0,#E_NoMsg					; but no message
FFFC29E4 09043023		sto		$v0,128[$s5]					; v0 = E_NoMsg
                        	.0001:
FFFC29E8 0014D493		srl		$s6,$s6,#1
FFFC29EC 00128293		add		$s2,$s2,#1
FFFC29F0 FA72EEE3		bltu	$s2,$s4,.0002
FFFC29F4 00006813		ldi		$v0,#E_Ok
FFFC29F8 00000463		bra		.xit
                        	.badMbx:
FFFC29FC 00406813		ldi		$v0,#E_BadMbx				; return null pointer if bad mailbox
                        	.xit:
FFFC2A00 00073083		ldo		$ra,[$sp]
FFFC2A04 00870713		add		$sp,$sp,#8
FFFC2A08 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Send a message to a mailbox.
                        	; The message will be broadcast to any waiting tasks. Waiting tasks will then
                        	; be moved to the ready list. If there are no waiting tasks then the message
                        	; is queued at the mailbox.
                        	;
                        	; Register Usage:
                        	;		t0 = mailbox pointer
                        	;		t1 = message pointer
                        	;		s1 = task id of waiting task
                        	; Modifies:
                        	;		a0
                        	; Parameters:
                        	;		a1 = mailbox handle
                        	;		a2 = message d1
                        	;		a3 = message d2
                        	;		a4 = message d3
                        	;------------------------------------------------------------------------------
                        	
                        	FMTK_SendMsg:
FFFC2A0C 3000E073		csrrs	$x0,#$300,#1				; enable ints
FFFC2A10 FF870713		sub		$sp,$sp,#8
FFFC2A14 00173023		sto		$ra,[$sp]
FFFC2A18 1009BD13		sltu	$t0,$a1,#NR_MBX
FFFC2A1C 0E0D0863		beq		$t0,$x0,.badMbx
FFFC2A20 00599D13		sll		$t0,$a1,#LOG_MBXSZ	; convert handle to pointer
FFFC2A24 00020637		add		$t0,$t0,#mbxs
FFFC2A28 00060613
FFFC2A2C 01A60D33
FFFC2A30 008D3F83		ldo		$t5,MBX_WTIDS[$t0]
FFFC2A34 060F8463		beq		$t5,$x0,.noWaiters	; no waiters = go queue message
FFFC2A38 00006213		ldi		$s1,#0
                        	.0001:
FFFC2A3C 001FF313		and		$s3,$t5,#1					; is tid waiting?
FFFC2A40 04030063		beq		$s3,$x0,.nxtTid
FFFC2A44 00A21313		sll		$s3,$s1,#LOG_TCBSZ	; convert tid to TCB pointer
FFFC2A48 29433C23		sto		$a2,TCBMsgD1[$s3]		; copy message to TCB
FFFC2A4C 2B533023		sto		$a3,TCBMsgD2[$s3]
FFFC2A50 2B633423		sto		$a4,TCBMsgD3[$s3]
FFFC2A54 28834E03		ldbu	$t2,TCBStatus[$s3]
FFFC2A58 004E6E13		or		$t2,$t2,#TS_MSGRDY
FFFC2A5C 29C30423		stb		$t2,TCBStatus[$s3]
FFFC2A60 00026933		mov		$a0,$s1
FFFC2A64 FF070713		sub		$sp,$sp,#16
FFFC2A68 00173023		sto		$ra,[$sp]
FFFC2A6C 01A73423		sto		$t0,8[$sp]						; push t0
FFFC2A70 200000EF		call	InsertIntoReadyList
FFFC2A74 00073083		ldo		$ra,[$sp]
FFFC2A78 00873D03		ldo		$t0,8[$sp]						; pop t0
FFFC2A7C 01070713		add		$sp,$sp,#16
                        	.nxtTid:
FFFC2A80 001FDF93		srl		$t5,$t5,#1					; check next task
FFFC2A84 00120213		add		$s1,$s1,#1
FFFC2A88 03F27213		and		$s1,$s1,#63
FFFC2A8C FA0218E3		bne		$s1,$x0,.0001
FFFC2A90 000D3423		sto		$x0,MBX_WTIDS[$t0]	; clear waiters
FFFC2A94 00006813		ldi		$v0,#E_Ok
FFFC2A98 06000C63		bra		.xit
                        	.noWaiters:
FFFC2A9C 00024637		ldo		$t1,FreeMsg
FFFC2AA0 35060613
FFFC2AA4 00060633
FFFC2AA8 00063D83
FFFC2AAC 040D8C63		beq		$t1,$x0,.noMsg			; message available?
FFFC2AB0 3000F073		csrrc	$x0,#$300,#1				; disable ints
FFFC2AB4 000DBE03		ldo		$t2,MSG_LINK[$t1]
FFFC2AB8 00024637		sto		$t2,FreeMsg
FFFC2ABC 35060613
FFFC2AC0 00060633
FFFC2AC4 01C63023
FFFC2AC8 3000E073		csrrs	$x0,#$300,#1				; enable ints
FFFC2ACC 014DB423		sto		$a2,MSG_D1[$t1]
FFFC2AD0 015DB823		sto		$a3,MSG_D2[$t1]
FFFC2AD4 016DBC23		sto		$a4,MSG_D3[$t1]
FFFC2AD8 3000F073		csrrc	$x0,#$300,#1				; diable ints
FFFC2ADC 018D3E83		ldo		$t3,MBX_MQTAIL[$t0]
FFFC2AE0 000E8A63		beq		$t3,$x0,.mbxEmpty
FFFC2AE4 01BEB023		sto		$t1,MSG_LINK[$t3]
FFFC2AE8 01BD3C23		sto		$t1,MBX_MQTAIL[$t0]
FFFC2AEC 00006813		ldi		$v0,#E_Ok
FFFC2AF0 02000063		bra		.xit
                        	.mbxEmpty:
FFFC2AF4 01BD3823		sto		$t1,MBX_MQHEAD[$t0]
FFFC2AF8 01BD3C23		sto		$t1,MBX_MQTAIL[$t0]
FFFC2AFC 00006813		ldi		$v0,#E_Ok
FFFC2B00 00000863		bra		.xit
                        	.noMsg:
FFFC2B04 00B06813		ldi		$v0,#E_NoMsg
FFFC2B08 00000463		bra		.xit
                        	.badMbx:
FFFC2B0C 00406813		ldi		$v0,#E_BadMbx				; return null pointer if bad mailbox
                        	.xit:
FFFC2B10 00073083		ldo		$ra,[$sp]
FFFC2B14 00870713		add		$sp,$sp,#8
FFFC2B18 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; PeekMsg will check for a message at a mailbox optionally dequeuing it.
                        	; If no message is available PeekMsg returns to the caller with a E_NoMsg
                        	; status.
                        	;
                        	; Parameters:
                        	;		a1 = mailbox handle
                        	;		a2 = pointer where to put message D1
                        	;		a3 = pointer where to put message D2
                        	;		a4 = pointer where to put message D3
                        	;		a5 = 1 = remove from queue
                        	;------------------------------------------------------------------------------
                        	
                        	FMTK_PeekMsg:
FFFC2B1C 3000E073		csrrs	$x0,#$300,#1				; enable ints
FFFC2B20 FF870713		sub		$sp,$sp,#8
FFFC2B24 00173023		sto		$ra,[$sp]
FFFC2B28 FF870713		sub		$sp,$sp,#8
FFFC2B2C 00173023		sto		$ra,[$sp]
FFFC2B30 0209AD13		slt		$t0,$a1,#32
FFFC2B34 0A0D0463		beq		$t0,$x0,.badMbx
FFFC2B38 00599E13		sll		$t2,$a1,#LOG_MBXSZ	; convert handle to pointer
FFFC2B3C 00020637		add		$t2,$t2,#mbxs
FFFC2B40 00060613
FFFC2B44 01C60E33
FFFC2B48 3000F073		csrrc	$x0,#$300,#1				; disable ints
FFFC2B4C 010E3D83		ldo		$t1,MBX_MQHEAD[$t2]
FFFC2B50 080D8263		beq		$t1,$x0,.noMsg
FFFC2B54 020B8863		beq		$a5,$x0,.nodq
FFFC2B58 000DBE83		ldo		$t3,MSG_LINK[$t1]
FFFC2B5C 01DE3823		sto		$t3,MBX_MQHEAD[$t2]
                        		; This is done here only because interrupts are disabled
FFFC2B60 00024637		ldo		$t3,FreeMsg
FFFC2B64 35060613
FFFC2B68 00060633
FFFC2B6C 00063E83
FFFC2B70 01DDB023		sto		$t3,MSG_LINK[$t1]
FFFC2B74 00024637		sto		$t1,FreeMsg
FFFC2B78 35060613
FFFC2B7C 00060633
FFFC2B80 01B63023
                        	.nodq:
FFFC2B84 00010D37		ldi		$t0,#$10000
FFFC2B88 000D0D13
FFFC2B8C 3000E073		csrrs	$x0,#$300,#1				; enable ints
FFFC2B90 000A0A63		beqz	$a2,.nod1
FFFC2B94 008DBE83		ldo		$t3,MSG_D1[$t1]
FFFC2B98 300D2073		csrrs	$x0,#$300,$t0				; set mprv
FFFC2B9C 01DA3023		sto		$t3,[$a2]
FFFC2BA0 300D3073		csrrc	$x0,#$300,$t0				; clear mprv
                        	.nod1:
FFFC2BA4 000A8A63		beqz	$a3,.nod2
FFFC2BA8 010DBE83		ldo		$t3,MSG_D2[$t1]
FFFC2BAC 300D2073		csrrs	$x0,#$300,$t0				; set mprv
FFFC2BB0 01DAB023		sto		$t3,[$a3]
FFFC2BB4 300D3073		csrrc	$x0,#$300,$t0				; clear mprv
                        	.nod2:
FFFC2BB8 000B0A63		beqz	$a4,.nod3
FFFC2BBC 018DBE83		ldo		$t3,MSG_D3[$t1]
FFFC2BC0 300D2073		csrrs	$x0,#$300,$t0				; set mprv
FFFC2BC4 01DB3023		sto		$t3,[$a4]
FFFC2BC8 300D3073		csrrc	$x0,#$300,$t0				; clear mprv
                        	.nod3:
FFFC2BCC 00006813		ldi		$v0,#E_Ok
FFFC2BD0 00000863		bra		.ret
                        	.noMsg:
FFFC2BD4 00B06813		ldi		$v0,#E_NoMsg
FFFC2BD8 00000463		bra		.ret
                        	.badMbx:
FFFC2BDC 00406813		ldi		$v0,#E_BadMbx				; return null pointer if bad mailbox
                        	.ret:
FFFC2BE0 00073083		ldo		$ra,[$sp]
FFFC2BE4 00870713		add		$sp,$sp,#8
FFFC2BE8 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Calling WaitMsg will cause the task to be queued at the mailbox and a task
                        	; switch to occur if there are no messages at the mailbox.
                        	;
                        	; Parameters:
                        	;		a1 = mailbox handle
                        	;		a2 = pointer where to put message D1
                        	;		a3 = pointer where to put message D2
                        	;		a4 = pointer where to put message D3
                        	;		a5 = time limit
                        	;------------------------------------------------------------------------------
                        	
                        	FMTK_WaitMsg:
FFFC2BEC 3000E073		csrrs	$x0,#$300,#1				; enable ints
FFFC2BF0 FF870713		sub		$sp,$sp,#8
FFFC2BF4 00173023		sto		$ra,[$sp]
FFFC2BF8 000BE433		mov		$s5,$a5
FFFC2BFC 00106B93		ldi		$a5,#1
FFFC2C00 F1DFF0EF		call	FMTK_PeekMsg				; check for a message, return if available
FFFC2C04 00B06D93		ldi		$t1,#E_NoMsg
FFFC2C08 01B80463		beq		$v0,$t1,.qt					; no message? Then go queue task
FFFC2C0C 04000C63		bra		.xit
                        	.qt:
                        		
FFFC2C10 18101873		csrrw	v0,#$181,x0
FFFC2C14 03F87813		and		v0,v0,#MAX_TID
FFFC2C18 00106E13	ldi		$t2,#1
FFFC2C1C 010E1E33		sll		$t2,$t2,$v0
FFFC2C20 00599E93		sll		$t3,$a1,#LOG_MBXSZ	; convert handle to pointer
FFFC2C24 00020637		add		$t3,$t3,#mbxs
FFFC2C28 00060613
FFFC2C2C 01D60EB3
FFFC2C30 3000F073		csrrc	$x0,#$300,#1				; disable ints
FFFC2C34 008EBF03		ldo		$t4,MBX_WTIDS[$t3]	; get waiting task list
FFFC2C38 01CF6F33		or		$t4,$t4,$t2					; set bit for tid
FFFC2C3C 01EEB423		sto		$t4,MBX_WTIDS[$t3]	; save task list
FFFC2C40 3000E073		csrrs	$x0,#$300,#1				; enable ints
FFFC2C44 00A81F13		sll		$t4,$v0,#LOG_TCBSZ	; convert tid to TCB pointer
FFFC2C48 288F4E83		ldbu	$t3,TCBStatus[$t4]
FFFC2C4C 008EEE93		or		$t3,$t3,#TS_WAITMSG	; set waiting for message status
FFFC2C50 FFEEFE93		and		$t3,$t3,#~TS_READY	; not ready
FFFC2C54 29DF0423		stb		$t3,TCBStatus[$t4]
FFFC2C58 293F0623		stb		$a1,TCBWaitMbx[$t4]	; set mailbox task is waiting for
FFFC2C5C 000BE9B3		mov		$a1,$a5
                        		; Continue by switching tasks
FFFC2C60 FA4FF0EF		call		FMTK_Sleep
                        	.xit:
FFFC2C64 00073083		ldo		$ra,[$sp]
FFFC2C68 00870713		add		$sp,$sp,#8
FFFC2C6C 00008067		ret
                        	
                        	
                        	.file "boot.r5a",1
                        	.file "boot.r5a",1
                        	.file "../fmtk/tcb.r5a",1
                        	.file "../fmtk/tcb.r5a",1
                        	; ============================================================================
                        	;        __
                        	;   \\__/ o\    (C) 2020  Robert Finch, Stratford
                        	;    \  __ /    All rights reserved.
                        	;     \/_//     robfinch<remove>@finitron.ca
                        	;       ||
                        	;  
                        	;
                        	; This source file is free software: you can redistribute it and/or modify 
                        	; it under the terms of the GNU Lesser General Public License as published 
                        	; by the Free Software Foundation, either version 3 of the License, or     
                        	; (at your option) any later version.                                      
                        	;                                                                          
                        	; This source file is distributed in the hope that it will be useful,      
                        	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                        	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                        	; GNU General Public License for more details.                             
                        	;                                                                          
                        	; You should have received a copy of the GNU General Public License        
                        	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                        	;
                        	; ============================================================================
                        	
                        	.file "../fmtk/tcb.r5a",25
                        		code
                        		align	4                        	
                        	;------------------------------------------------------------------------------
                        	; Insert task into ready list. The list is a doubly linked circular list.
                        	;
                        	; Parameters:
                        	;		a0 = tid to insert
                        	; Modifies:
                        	;		v1,t0,t1,t2
                        	; Returns:
                        	;		v0 = 1 for success, 0 if failed
                        	;------------------------------------------------------------------------------
                        	
                        	InsertIntoReadyList:
FFFC2C70 00006813		ldi		$v0,#E_Ok						; setup for ok
FFFC2C74 03F06893		ldi		$v1,#MAX_TID				; check argument
FFFC2C78 0928EA63		bgtu	$a0,$v1,.badTid
FFFC2C7C 00A91E93		sll		$t3,$a0,#LOG_TCBSZ	; tid to pointer
FFFC2C80 288ECD03		ldbu	$t0,TCBStatus[$t3]	; set status to ready
FFFC2C84 001D6D13		or		$t0,$t0,#TS_READY
FFFC2C88 29AE8423		sb		$t0,TCBStatus[$t3]
FFFC2C8C 289E8D03		ldb		$t0,TCBPriority[$t3]
FFFC2C90 19A9000D		insrdy	$a0,$t0
	ret
FFFC2C94 00008067
FFFC2C98 003D7D13		and		$t0,$t0,#3					; limit to four
FFFC2C9C 001D1D13		sll		$t0,$t0,#1					; *2 for indexing
FFFC2CA0 00024637		ldw		$t1,READYQ[$t0]			; get head of queue for that priority
FFFC2CA4 30860613
FFFC2CA8 01A60633
FFFC2CAC 00061D83
FFFC2CB0 020DD063		bge		$t1,$x0,.insert			; Is there a head?
                        		; level 0 insert - nothing in list, create a ring to self
FFFC2CB4 00024637		stw		$a0,READYQ[$t0]			; no head, simple to insert
FFFC2CB8 30860613
FFFC2CBC 01A60633
FFFC2CC0 01261023
FFFC2CC4 2D2E9823		stw		$a0,TCBNext[$t3]		; remember it's a ring
FFFC2CC8 2D2E9C23		stw		$a0,TCBPrev[$t3]
FFFC2CCC 00008067		ret
                        		; Insert at tail of list, which is just before the head.
                        	.insert:
FFFC2CD0 00AD9F13		sll		$t4,$t1,#LOG_TCBSZ	; tid to pointer
FFFC2CD4 2D8F1E03		ldw		$t2,TCBPrev[$t4]		; t2 = head->prev
FFFC2CD8 01BE1C63		bne		$t2,$t1,.level2
                        		;level 1 insert - only 1 item currently in list, items point to each other
                        		; This bit probably redundant code as normal insertion should work as well.
FFFC2CDC 2D2F1C23		stw		$a0,TCBPrev[$t4]		; simple to insert
FFFC2CE0 2D2F1823		stw		$a0,TCBNext[$t4]		; head->prev = head->next = arg
FFFC2CE4 2DBE9C23		stw		$t1,TCBPrev[$t3]		; arg->prev = arg->next = head
FFFC2CE8 2DBE9823		stw		$t1,TCBNext[$t3]
FFFC2CEC 00008067		ret
                        		; Here there will be three or more entries in the list. Arg is inserted
                        		; between head and head->prev to make it the last on the list.
                        	.level2:
FFFC2CF0 2DCE9C23		stw		$t2,TCBPrev[$t3]		; arg->prev = head->prev
FFFC2CF4 2DBE9823		stw		$t1,TCBNext[$t3]		; arg->next = head, arg links are now set
                        		; If there's a head there should be a head->prev and head->next at least pointing to the head
FFFC2CF8 000E4663		bltz	$t2,.0001						; head->prev valid?
FFFC2CFC 00AE1E93		sll		$t3,$t2,#LOG_TCBSZ	; t3 = head->prev (as a pointer)
FFFC2D00 2D2E9823		stw		$a0,TCBNext[$t3]		; head->prev->next = arg
                        	.0001:
FFFC2D04 2D2F1C23		stw		$a0,TCBPrev[$t4]		; head->prev = arg
FFFC2D08 00008067		ret
                        	.badTid:
FFFC2D0C 00106813		ldi		$v0,#E_Arg
FFFC2D10 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; The ready list is a doubly linked list to make it easier and faster to
                        	; remove items from the list. There's no need to search the list for the item
                        	; to remove.
                        	;
                        	; Parameters:
                        	;		a0 = tid to remove
                        	; Modifies:
                        	;		t0,t1,t2,t3,t4,t5
                        	; Returns:
                        	;		v0 = E_Ok for success
                        	;------------------------------------------------------------------------------
                        	
                        	RemoveFromReadyList:
FFFC2D14 03F06893		ldi		$v1,#MAX_TID					; check arg
FFFC2D18 0128F863		bleu	$a0,$v1,.tidOk
FFFC2D1C 00106813		ldi		$v0,#E_Arg
FFFC2D20 00000637		jmp		ERETx
FFFC2D24 23660067
                        	.tidOk:
FFFC2D28 1A09000D		rmvrdy	$a0									; cheat and use hardware
FFFC2D2C 00A91F13		sll		$t4,$a0,#LOG_TCBSZ		; s1 = pointer to tcb
FFFC2D30 288F0D03		ldb		$t0,TCBStatus[$t4]		; set status no longer ready or running
FFFC2D34 F7ED7D13		and		$t0,$t0,#~(TS_READY|TS_RUNNING)
	stb		$t0,TCBStatus[$t4]
FFFC2D38 29AF0423
FFFC2D3C 00008067		ret
                        	
                        	RemoveFromReadyList2:
FFFC2D40 03F06893		ldi		$v1,#MAX_TID					; check arg
FFFC2D44 0928E063		bgtu	$a0,$v1,.badTid
FFFC2D48 00A91F13		sll		$t4,$a0,#LOG_TCBSZ		; s1 = pointer to tcb
FFFC2D4C 288F0D03		ldb		$t0,TCBStatus[$t4]		; set status no longer ready or running
FFFC2D50 F7ED7D13		and		$t0,$t0,#~(TS_READY|TS_RUNNING)
	stb		$t0,TCBStatus[$t4]
FFFC2D54 29AF0423
FFFC2D58 289F0D03		ldb		$t0,TCBPriority[$t4]	; t0 = priority
FFFC2D5C 003D7D13		and		$t0,$t0,#3						; limit to 0-3
FFFC2D60 001D1D13		sll		$t0,$t0,#1						; *2 for indexing
FFFC2D64 00024637		ldw		$t1,READYQ[$t0]				; get head tid
FFFC2D68 30860613
FFFC2D6C 01A60633
FFFC2D70 00061D83
FFFC2D74 2D0F1E03		ldw		$t2,TCBNext[$t4]			; get arg->next
FFFC2D78 012D9E63		bne		$t1,$a0,.0001					; removing head of list?
FFFC2D7C 012E1463		bne		$t2,$a0,.0003					; list emptying? (if arg->next points back to arg)
FFFC2D80 FFF06E13		ldi		$t2,#-1
                        	.0003:
FFFC2D84 00024637		stw		$t2,READYQ[$t0]				; yes, set new head to arg->next
FFFC2D88 30860613
FFFC2D8C 01A60633
FFFC2D90 01C61023
                        	.0001:
FFFC2D94 000E4E63		bltz	$t2,.0002							; validate t2 (arg->next)
FFFC2D98 011E7C63		bgeu	$t2,$v1,.0002					; there should always be an arg->next, arg->prev
FFFC2D9C 2D8F1E83		ldw		$t3,TCBPrev[$t4]			; because the list is circular t3=arg->prev
FFFC2DA0 00AE9F93		sll		$t5,$t3,#LOG_TCBSZ		; t5 = arg->prev as a pointer
FFFC2DA4 2DCF9823		stw		$t2,TCBNext[$t5]			; arg->prev->next = arg->next
FFFC2DA8 00AE1F93		sll		$t5,$t2,#LOG_TCBSZ		; t5 = arg->next as a pointer
FFFC2DAC 2DDF9C23		stw		$t3,TCBPrev[$t5]			; arg->next->prev = arg->prev
                        		; Now indicate links in TCB are not in use.
                        	.0002:
FFFC2DB0 FFF06813		ldi		$v0,#-1
FFFC2DB4 2D0F1823		stw		$v0,TCBNext[$t4]
FFFC2DB8 2D0F1C23		stw		$v0,TCBPrev[$t4]
FFFC2DBC 00006813		ldi		$v0,#E_Ok							; we're ok
FFFC2DC0 00008067		ret
                        	.badTid:
FFFC2DC4 00106813		ldi		$v0,#E_Arg
FFFC2DC8 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Parameters:
                        	;		a0 = task id to insert
                        	;		a1 = timeout value
                        	; Modifies:
                        	;		t0,t1,t2,t3,t4,t5
                        	;------------------------------------------------------------------------------
                        	
                        	InsertIntoTimeoutList:
FFFC2DCC 1139000D		setto	$a0,$a1
	sll		$t5,$a0,#LOG_TCBSZ		; tid to pointer
FFFC2DD0 00A91F93
FFFC2DD4 288FCE03		ldbu	$t2,TCBStatus[$t5]		; set status to timing out
FFFC2DD8 010E6E13		or		$t2,$t2,#TS_TIMEOUT
FFFC2DDC 29CF8423		stb		$t2,TCBStatus[$t5]
FFFC2DE0 00006813		ldi		$v0,#E_Ok
FFFC2DE4 00008067		ret
FFFC2DE8 FFF06D13		ldi		$t0,#-1						
FFFC2DEC 2DAF9823		stw		$t0,TCBNext[$t5]			; initialize indexes to -1
FFFC2DF0 2DAF9C23		stw		$t0,TCBPrev[$t5]
FFFC2DF4 00024637		ldw		$t0,TimeoutList
FFFC2DF8 32860613
FFFC2DFC 00060633
FFFC2E00 00061D03
FFFC2E04 020D5063		bge		$t0,$x0,.0001
                        		; Here the timeout list was empty, easy to insert.
FFFC2E08 2F3FA023		stt		$a1,TCBTimeout[$t5]		; set timeout for task
FFFC2E0C 00024637		stw		$a0,TimeoutList				; set head of list
FFFC2E10 32860613
FFFC2E14 00060633
FFFC2E18 01261023
FFFC2E1C 00006813		ldi		$v0,#E_Ok							; and return
FFFC2E20 00008067		ret
                        	.0001:
FFFC2E24 FFF06D93		ldi		$t1,#-1								; t1 used as previous index
FFFC2E28 000D6E33		mov		$t2,$t0								; t2 = head of timeout list index
FFFC2E2C 00AE1E93		sll		$t3,$t2,#LOG_TCBSZ		; t3 = head of timeout list as a pointer
                        		; Search the timeout list for the proper insertion point. The timeouts are
                        		; relative, so the requested amount is decremented by the amounts in the
                        		; list as it is searched.
                        	.beginWhile:
FFFC2E30 2E0EAF03		ldt		$t4,TCBTimeout[$t3]		; get the timeout
FFFC2E34 033F5663		ble		$a1,$t4,.endWhile			; is it greater than the requested timeout ?
FFFC2E38 41E989B3		sub		$a1,$a1,$t4						; decrement by list amount
FFFC2E3C 000EEDB3		mov		$t1,$t3								; t1 = pointer to previous entry
FFFC2E40 2D0E9E83		ldw		$t3,TCBNext[$t3]			; get the next entry in list
FFFC2E44 000EC663		bltz	$t3,.endOfList					; end of list?
FFFC2E48 00AE9E93		sll		$t3,$t3,#LOG_TCBSZ		; no, set pointer to current entry
FFFC2E4C FFBE92E3		bne		$t3,$t1,.beginWhile		; list screwed up? (This test should always be true)
                        	.endOfList:
                        		; Here the end of the list was reached, insert as last entry
FFFC2E50 2D2D9823		stw		$a0,TCBNext[$t1]			; entry->next = arg
FFFC2E54 2DBF9C23		stw		$t1,TCBPrev[$t5]			; arg->prev = entry
FFFC2E58 2F3FA023		stt		$a1,TCBTimeout[$t5]
FFFC2E5C 04000063		bra		.0003
                        	.endWhile:
                        		; Here we found a timeout greater than the requested amount. Insert before.
FFFC2E60 20AEDE13		sra		$t2,$t3,#LOG_TCBSZ		; pointer to tid
FFFC2E64 2DCF9823		stw		$t2,TCBNext[$t5]			; arg->next = entry
FFFC2E68 20ADDE13		sra		$t2,$t1,#LOG_TCBSZ
FFFC2E6C 2DCF9C23		stw		$t2,TCBPrev[$t5]			; arg->prev = prev entry
FFFC2E70 2E0EAE03		ldt		$t2,TCBTimeout[$t3]		; update timeout of entry by subtracting off
FFFC2E74 413E0E33		sub		$t2,$t2,$a1						; the arg's timeout
FFFC2E78 2FCEA023		stt		$t2,TCBTimeout[$t3]
FFFC2E7C 2D2E9C23		stw		$a0,TCBPrev[$t3]			; entry->prev = arg
FFFC2E80 000DC663		bltz	$t1,.0002							; previous entry? no - go update list head
FFFC2E84 2D2D9823		stw		$a0,TCBNext[$t1]			; prev entry->next = arg
FFFC2E88 00000A63		bra		.0003
                        	.0002:
FFFC2E8C 00024637		stw		$a0,TimeoutList				; list head = arg
FFFC2E90 32860613
FFFC2E94 00060633
FFFC2E98 01261023
                        	.0003:
FFFC2E9C 288FCE03		ldbu	$t2,TCBStatus[$t5]		; set status to timing out
FFFC2EA0 010E6E13		or		$t2,$t2,#TS_TIMEOUT
FFFC2EA4 29CF8423		stb		$t2,TCBStatus[$t5]
FFFC2EA8 00006813		ldi		$v0,#E_Ok
FFFC2EAC 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Remove a task from the timeout list. The timeouts of following tasks are
                        	; adjusted. Called when a mailbox is freed and a task is waiting at the
                        	; mailbox. From within scheduling code mPopTimeoutList is used instead.
                        	;
                        	; Parameters:
                        	;		a0 = task id to remove
                        	; Modifies:
                        	;		t0,t3,t4
                        	; Returns:
                        	;		none
                        	;------------------------------------------------------------------------------
                        	
                        	RemoveFromTimeoutList:
FFFC2EB0 00A91E93		sll		$t3,$a0,#LOG_TCBSZ		; tid to pointer
FFFC2EB4 288ECD03		ldbu	$t0,TCBStatus[$t3]		; check if waiting at a mailbox
FFFC2EB8 008D7D13		and		$t0,$t0,#TS_WAITMSG
FFFC2EBC 000D0463		beqz	$t0,.noWait				
FFFC2EC0 9E9FF0EF		call	MbxRemoveTask					; remove task from mailbox
                        	.noWait:
FFFC2EC4 FE7D7D13		and		$t0,$t0,#~(TS_TIMEOUT|TS_WAITMSG)
	stb		$t0,TCBStatus[$t3]
FFFC2EC8 29AE8423
FFFC2ECC 1009000D		setto	$a0,$x0
	ldi		$v0,#E_Ok
FFFC2ED0 00006813
FFFC2ED4 00008067		ret
                        	
FFFC2ED8 00024637		ldw		$t1,TimeoutList
FFFC2EDC 32860613
FFFC2EE0 00060633
FFFC2EE4 00061D83
FFFC2EE8 2D0E9D03		ldw		$t0,TCBNext[$t3]			; t0 = arg->next
FFFC2EEC 01B91A63		bne		$a0,$t1,.0001					; check removing head of list
FFFC2EF0 00024637		stw		$t0,TimeoutList				; set new head = arg->next
FFFC2EF4 32860613
FFFC2EF8 00060633
FFFC2EFC 01A61023
                        	.0001:
FFFC2F00 020D4063		bltz	$t0,.noNext
FFFC2F04 00AD1F13		sll		$t4,$t0,#LOG_TCBSZ
FFFC2F08 2D8E9D83		ldw		$t1,TCBPrev[$t3]			; next->prev = arg->prev
FFFC2F0C 2DBF1C23		stw		$t1,TCBPrev[$t4]			
FFFC2F10 2E0F2D83		ldt		$t1,TCBTimeout[$t4]		; next->timeout += arg->timeout
FFFC2F14 2E0EAE03		ldt		$t2,TCBTimeout[$t3]
FFFC2F18 01CD8DB3		add		$t1,$t1,$t2
FFFC2F1C 2FBF2023		stt		$t1,TCBTimeout[$t4]
                        	.noNext:
FFFC2F20 2D8E9D03		ldw		$t0,TCBPrev[$t3]			; check for previous
FFFC2F24 000D4863		bltz	$t0,.noPrev
FFFC2F28 00AD1F13		sll		$t4,$t0,#LOG_TCBSZ
FFFC2F2C 2D0E9D03		ldw		$t0,TCBNext[$t3]			; prev->next = arg->next
FFFC2F30 2DAF1823		stw		$t0,TCBNext[$t4]
                        	.noPrev:
FFFC2F34 288E8D03		ldb		$t0,TCBStatus[$t3]		; no longer timing out
FFFC2F38 FE7D7D13		and		$t0,$t0,#~(TS_TIMEOUT|TS_WAITMSG)
	stb		$t0,TCBStatus[$t3]
FFFC2F3C 29AE8423
FFFC2F40 FFF06D13		ldi		$t0,#-1								; reset links
FFFC2F44 2DAE9823		stw		$t0,TCBNext[$t3]
FFFC2F48 2DAE9C23		stw		$t0,TCBPrev[$t3]
FFFC2F4C 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Returns:
                        	;		v1 = process id
                        	;------------------------------------------------------------------------------
                        	
                        	AllocTCB:
FFFC2F50 00006D93		ldi		$t1,#0
FFFC2F54 00024637		ldwu	$v1,PIDMAP
FFFC2F58 31060613
FFFC2F5C 00060633
FFFC2F60 00065883
                        	.0001:
FFFC2F64 0018FD13		and		$t0,$v1,#1
FFFC2F68 020D0463		beqz	$t0,.allocTid
FFFC2F6C 0018D893		srl		$v1,$v1,#1
FFFC2F70 00008637		or		$v1,$v1,#$8000
FFFC2F74 00060613
FFFC2F78 011668B3
FFFC2F7C 001D8D93		add		$t1,$t1,#1
FFFC2F80 00FDFD93		and		$t1,$t1,#15
FFFC2F84 FE0D90E3		bne		$t1,$x0,.0001
                        	; here no tcbs available
FFFC2F88 04506813		ldi		$v0,#E_NoMoreTCBs
FFFC2F8C 00008067		ret
                        	.allocTid:
FFFC2F90 000DE833		mov		$v0,$t1
FFFC2F94 0018E893		or		$v1,$v1,#1
FFFC2F98 000D8A63		beqz	$t1,.0003
                        	.0002:
FFFC2F9C 00189893		sll		$v1,$v1,#1
FFFC2FA0 0018E893		or		$v1,$v1,#1
FFFC2FA4 FFFD8D93		sub		$t1,$t1,#1
FFFC2FA8 FE0D9AE3		bnez	$t1,.0002
                        	.0003:
FFFC2FAC 00024637		stw		$v1,PIDMAP
FFFC2FB0 31060613
FFFC2FB4 00060633
FFFC2FB8 01161023
FFFC2FBC 000868B3		mov		$v1,$v0
FFFC2FC0 00006813		ldi		$v0,#E_Ok
FFFC2FC4 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	
                        	FreeTCB:
FFFC2FC8 00106D13		ldi		$t0,#1
FFFC2FCC 012D1D33		sll		$t0,$t0,$a0
FFFC2FD0 FFFD4D13		xor		$t0,$t0,#-1
FFFC2FD4 00024637		lhu		$t1,PIDMAP
FFFC2FD8 31060613
FFFC2FDC 00060633
FFFC2FE0 00065D83
FFFC2FE4 01ADFDB3		and		$t1,$t1,$t0
FFFC2FE8 00024637		stw		$t1,PIDMAP
FFFC2FEC 31060613
FFFC2FF0 00060633
FFFC2FF4 01B61023
FFFC2FF8 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Diagnostics
                        	;------------------------------------------------------------------------------
                        	
                        	DumpReadyList:
FFFC2FFC FC070713		sub		$sp,$sp,#64
FFFC3000 00173023		sto		$ra,[$sp]
FFFC3004 01273423		sto		$a0,8[$sp]
FFFC3008 01473823		sto		$a2,16[$sp]
FFFC300C 01573C23		sto		$a3,24[$sp]
FFFC3010 03B73023		sto		$t1,32[$sp]
FFFC3014 03C73423		sto		$t2,40[$sp]
FFFC3018 03D73823		sto		$t3,48[$sp]
FFFC301C 02473C23		sto		$s1,56[$sp]
FFFC3020 FFFC3937		ldi		$a0,#msgReadyList
FFFC3024 18C90913
FFFC3028 F94FD0EF		call	PutString
FFFC302C 00006D93		ldi		$t1,#0
FFFC3030 3000F273		csrrc	$s1,#$300,#1
                        	.0002:
FFFC3034 D00FE0EF		call	SerialPeekCharDirect
FFFC3038 00384813		xor		$v0,$v0,#CTRLC
FFFC303C 08080263		beqz	$v0,.brk
FFFC3040 00D06913		ldi		$a0,#CR
FFFC3044 9FCFD0EF		call	Putch
FFFC3048 05106913		ldi		$a0,#'Q'
FFFC304C 9F4FD0EF		call	Putch
FFFC3050 001DD913		srl		$a0,$t1,#1
FFFC3054 F28FD0EF		call	PutHexNybble
FFFC3058 03A06913		ldi		$a0,#':'
FFFC305C 9E4FD0EF		call	Putch
FFFC3060 00024637		ldw		$a2,READYQ[$t1]
FFFC3064 30860613
FFFC3068 01B60633
FFFC306C 00061A03
FFFC3070 040A4263		blt		$a2,$x0,.nxt
FFFC3074 000A6AB3		mov		$a3,$a2
                        	.0001:
FFFC3078 000AE933		mov		$a0,$a3
FFFC307C EC0FD0EF		call	PutHexHalf
FFFC3080 02006913		ldi		$a0,#' '
FFFC3084 9BCFD0EF		call	Putch
FFFC3088 00AA9A93		sll		$a3,$a3,#LOG_TCBSZ
FFFC308C 2D0A9903		ldw		$a0,TCBNext[$a3]
FFFC3090 EACFD0EF		call	PutHexHalf
FFFC3094 02006913		ldi		$a0,#' '
FFFC3098 9A8FD0EF		call	Putch
FFFC309C 2D8A9903		ldw		$a0,TCBPrev[$a3]
FFFC30A0 E9CFD0EF		call	PutHexHalf
FFFC30A4 00D06913		ldi		$a0,#CR
FFFC30A8 998FD0EF		call	Putch
FFFC30AC 2D0A9A83		ldw		$a3,TCBNext[$a3]
FFFC30B0 FD5A14E3		bne		$a2,$a3,.0001
                        	.nxt:
FFFC30B4 002D8D93		add		$t1,$t1,#2
FFFC30B8 008DAE13		slt		$t2,$t1,#8
FFFC30BC F60E1CE3		bnez	$t2,.0002
                        	.brk:
FFFC30C0 30021073		csrrw	$x0,#$300,$s1
FFFC30C4 00073083		ldo		$ra,[$sp]
FFFC30C8 00873903		ldo		$a0,8[$sp]
FFFC30CC 01073A03		ldo		$a2,16[$sp]
FFFC30D0 01873A83		ldo		$a3,24[$sp]
FFFC30D4 02073D83		ldo		$t1,32[$sp]
FFFC30D8 02873E03		ldo		$t2,40[$sp]
FFFC30DC 03073E83		ldo		$t3,48[$sp]
FFFC30E0 03873203		ldo		$s1,56[$sp]
FFFC30E4 04070713		add		$sp,$sp,#64
FFFC30E8 00008067		ret
                        	
                        	DumpTimeoutList:
FFFC30EC FE070713		sub		$sp,$sp,#32
FFFC30F0 00172023		stt		$ra,[$sp]
FFFC30F4 01272223		stt		$a0,4[$sp]
FFFC30F8 01472423		stt		$a2,8[$sp]
FFFC30FC 01572623		stt		$a3,12[$sp]
FFFC3100 01B72823		stt		$t1,16[$sp]
FFFC3104 01C72A23		stt		$t2,20[$sp]
FFFC3108 01D72C23		stt		$t3,24[$sp]
FFFC310C 00472E23		stt		$s1,28[$sp]
FFFC3110 FFFC3937		ldi		$a0,#msgTimeoutList
FFFC3114 1BD90913
FFFC3118 EA4FD0EF		call	PutString
FFFC311C 00006D93		ldi		$t1,#0
FFFC3120 3000F273		csrrc	$s1,#$300,#1
FFFC3124 00006A93		ldi		$a3,#0
                        	.0002:
FFFC3128 C0CFE0EF		call	SerialPeekCharDirect
FFFC312C 00384813		xor		$v0,$v0,#CTRLC
FFFC3130 02080863		beqz	$v0,.brk
FFFC3134 00D06913		ldi		$a0,#CR
FFFC3138 908FD0EF		call	Putch
                        	;	ldw		$a2,TimeoutList
                        	;	bltz	$a2,.brk
                        	;	mov		$a3,$a2
                        	;.0001:
FFFC313C 000AE933		mov		$a0,$a3
FFFC3140 DFCFD0EF		call	PutHexHalf
FFFC3144 02D06913		ldi		$a0,#'-'
FFFC3148 8F8FD0EF		call	Putch
FFFC314C 120D890D		getto	$a0,$t1
;	sll		$a3,$a3,#LOG_TCBSZ
                        	;	ldt		$a0,TCBTimeout[$a3]
FFFC3150 DCCFD0EF		call	PutHexWord
                        	;	ldi		$a0,#CR
                        	;	call	Putch
FFFC3154 001A8A93		add		$a3,$a3,#1
FFFC3158 00FAFA93		and		$a3,$a3,#15
FFFC315C FD5046E3		bgt		$a3,$x0,.0002
                        	;	ldw		$a3,TCBNext[$a3]
                        	;	bge		$a3,$x0,.0001
                        	.brk:
FFFC3160 30021073		csrrw	$x0,#$300,$s1
FFFC3164 00072083		ldt		$ra,[$sp]
FFFC3168 00472903		ldt		$a0,4[$sp]
FFFC316C 00872A03		ldt		$a2,8[$sp]
FFFC3170 00C72A83		ldt		$a3,12[$sp]
FFFC3174 01072D83		ldt		$t1,16[$sp]
FFFC3178 01472E03		ldt		$t2,20[$sp]
FFFC317C 01872E83		ldt		$t3,24[$sp]
FFFC3180 01C72203		ldt		$s1,28[$sp]
FFFC3184 02070713		add		$sp,$sp,#32
FFFC3188 00008067		ret
                        	
                        	msgReadyList:
FFFC318C 6165520D		db	CR,"Ready List",CR
FFFC3190 4C207964
FFFC3194 0D747369
FFFC3198 20657551		db	"Que Tid  Prv  Nxt",CR
FFFC319C 20646954
FFFC31A0 76725020
FFFC31A4 784E2020
FFFC31A8 2D2D0D74
FFFC31AA 2D2D2D2D		db	"-----------------",CR,0
FFFC31AE 2D2D2D2D
FFFC31B2 2D2D2D2D
FFFC31B6 2D2D2D2D
FFFC31BA 0D000D2D
                        	
                        	msgTimeoutList:
FFFC31BD 6D69540D		db	CR,"Timeout List",CR
FFFC31C1 74756F65
FFFC31C5 73694C20
FFFC31C9 54200D74
FFFC31CB 64695420		db	" Tid - Timeout",CR
FFFC31CF 54202D20
FFFC31D3 6F656D69
FFFC31D7 2D0D7475
FFFC31DA 2D2D2D2D		db	"--------------",CR,0
FFFC31DE 2D2D2D2D
FFFC31E2 2D2D2D2D
FFFC31E6 000D2D2D
                        	
FFFC31EA E0730000		align 
                        	
                        	.file "boot.r5a",1
                        	.file "boot.r5a",1
                        	.file "../fmtk/iofocus.r5a",1
                        	.file "../fmtk/iofocus.r5a",1
                        	; ============================================================================
                        	;        __
                        	;   \\__/ o\    (C) 2020  Robert Finch, Stratford
                        	;    \  __ /    All rights reserved.
                        	;     \/_//     robfinch<remove>@finitron.ca
                        	;       ||
                        	;  
                        	;
                        	; This source file is free software: you can redistribute it and/or modify 
                        	; it under the terms of the GNU Lesser General Public License as published 
                        	; by the Free Software Foundation, either version 3 of the License, or     
                        	; (at your option) any later version.                                      
                        	;                                                                          
                        	; This source file is distributed in the hope that it will be useful,      
                        	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                        	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                        	; GNU General Public License for more details.                             
                        	;                                                                          
                        	; You should have received a copy of the GNU General Public License        
                        	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                        	;
                        	; ============================================================================
                        	
                        	;-----------------------------------------------------------------------------
                        	; IO Focus routines complicated by the fact that the base address of TCB
                        	; zero is zero (looks like a null pointer but isn't). So the value -1 is 
                        	; used to indicate no focus index.
                        	;-----------------------------------------------------------------------------
                        	
                        	.file "../fmtk/iofocus.r5a",31
                        		code
                        		align	4                        	
                        	
                        	;-----------------------------------------------------------------------------
                        	; Determine if the currently running task has the I/O focus.
                        	;
                        	; Stack Space:
                        	;		2 words
                        	; Parameters:
                        	;		none
                        	; Modifies:
                        	;		none
                        	; Returns:
                        	;		v0 = E_Ok
                        	;		v1 = 1 if task has IO focus, 0 otherwise
                        	;-----------------------------------------------------------------------------
                        	
                        	FMTK_HasIOFocus:
                        		; Enable interrupts
FFFC31EC 3000E073		csrrs	$x0,#$300,#1				
FFFC31F0 00025637		ldb		$v0,SwitchIOFocus
FFFC31F4 82060613
FFFC31F8 00060633
FFFC31FC 00060803
FFFC3200 00080C63		beqz	$v0,.noSwitch
FFFC3204 00025637		stb		$x0,SwitchIOFocus
FFFC3208 82060613
FFFC320C 00060633
FFFC3210 00060023
FFFC3214 038000EF		call	FMTK_SwitchIOFocus
                        	.noSwitch:
                        		
FFFC3218 18101873		csrrw	v0,#$181,x0
FFFC321C 03F87813		and		v0,v0,#MAX_TID
FFFC3220 00A81813	sll		$v0,$v0,#LOG_TCBSZ
FFFC3224 3000F073		csrrc	$x0,#$300,#1				; disable ints
FFFC3228 2400088D		nxtiof	$v1
FFFC322C 2600088D		prviof	$v1
FFFC3230 3000E073		csrrs	$x0,#$300,#1				
                        	;	ldo		$v1,IOFocusNdx
FFFC3234 01180663		beq		$v0,$v1,.hasFocus
FFFC3238 00006893		ldi		$v1,#0
FFFC323C 00000463		bra		.xit
                        	.hasFocus:
FFFC3240 00106893		ldi		$v1,#1
                        	.xit:
FFFC3244 00006813		ldi		$v0,#E_Ok
FFFC3248 00008067		ret
                        	
                        	;-----------------------------------------------------------------------------
                        	; First check if it's even possible to switch the focus to another
                        	; task. The I/O focus list could be empty or there may be only a
                        	; single task in the list. In either case it's not possible to
                        	; switch.
                        	;
                        	;	Parameters:
                        	;		none
                        	;	Modifies:
                        	;		a0,a1,t0,t1,t2,t3
                        	;	Returns:
                        	;		v0 = E_Ok
                        	;-----------------------------------------------------------------------------
                        	
                        	FMTK_SwitchIOFocus:
FFFC324C FF870713		sub		$sp,$sp,#8
FFFC3250 00173023		sto		$ra,[$sp]
FFFC3254 24000D0D		nxtiof	$t0
FFFC3258 26000D8D		prviof	$t1
FFFC325C 09BD0C63		beq		$t0,$t1,.sameFocus
FFFC3260 080D4A63		bltz	$t0,.noFocus
FFFC3264 24000D0D		nxtiof	$t0
                        	
                        	;	ldo		$t0,IOFocusNdx			; get focus pointer
                        	;	bltz	$t0,.noFocus				; is it -1?
                        	;	ldo		$t1,IOF_NEXT[$t0]
                        	;	beq		$t1,$t0,.sameFocus
                        	;	bltz	$t1,.noFocus
FFFC3268 3000E073		csrrs	$x0,#$300,#1				; enable interrupts
                        		; swap virtual text screens
FFFC326C 65806213		ldi		$s1,#56*29
FFFC3270 330D3E03		ldo		$t2,TCBVideoMem[$t0]
FFFC3274 020E0A63		beqz	$t2,.0002
FFFC3278 33CD3C23		sto		$t2,TCBpVideo[$t0]
FFFC327C FFD00EB7		ldi		$t3,#$FFD00000
FFFC3280 000E8E93
FFFC3284 00AD5913		srl		$a0,$t0,#LOG_TCBSZ
FFFC3288 000E69B3		mov		$a1,$t2
FFFC328C EA5FD0EF		call	VirtToPhys
                        	.0001:
FFFC3290 000EBF03		ldo		$t4,[$t3]
FFFC3294 01E83023		sto		$t4,[$v0]
FFFC3298 008E8E93		add		$t3,$t3,#8
FFFC329C 00880813		add		$v0,$v0,#8
FFFC32A0 FFF20213		sub		$s1,$s1,#1
FFFC32A4 FE4046E3		bgt		$s1,$x0,.0001
                        	.0002:
FFFC32A8 65806213		ldi		$s1,#56*29
FFFC32AC 330DBE03		ldo		$t2,TCBVideoMem[$t1]
FFFC32B0 020E0A63		beqz	$t2,.0004
FFFC32B4 FFD00EB7		ldi		$t3,#$FFD00000
FFFC32B8 000E8E93
FFFC32BC 33DDBC23		sto		$t3,TCBpVideo[$t1]
FFFC32C0 00ADD913		srl		$a0,$t1,#LOG_TCBSZ
FFFC32C4 000E69B3		mov		$a1,$t2
FFFC32C8 E69FD0EF		call	VirtToPhys
                        	.0003:
FFFC32CC 00083F03		ldo		$t4,[$v0]
FFFC32D0 01EEB023		sto		$t4,[$t3]
FFFC32D4 008E8E93		add		$t3,$t3,#8
FFFC32D8 00880813		add		$v0,$v0,#8
FFFC32DC FFF20213		sub		$s1,$s1,#1
FFFC32E0 FE4046E3		bgt		$s1,$x0,.0003
                        	.0004:
FFFC32E4 00025637		sto		$t1,IOFocusNdx
FFFC32E8 81060613
FFFC32EC 00060633
FFFC32F0 01B63023
                        	.sameFocus:
                        	.noFocus:
FFFC32F4 00006813		ldi		$v0,#E_Ok
FFFC32F8 00073083		ldo		$ra,[$sp]
FFFC32FC 00870713		add		$sp,$sp,#8
FFFC3300 00008067		ret
                        	
                        	;-----------------------------------------------------------------------------
                        	; The I/O focus list is an array indicating which jobs are requesting the
                        	; I/O focus. The I/O focus is user controlled by pressing CNTRL-T on the
                        	; keyboard.
                        	;
                        	; Parameters:
                        	;		a1 = task id requesting focus for
                        	;-----------------------------------------------------------------------------
                        	
                        	FMTK_RequestIOFocus:
FFFC3304 2009800D		insiof	$a1
FFFC3308 00006813		ldi		$v0,#E_Ok
FFFC330C 00008067		ret
                        	
FFFC3310 00106D13		ldi		$t0,#1
FFFC3314 013D1D33		sll		$t0,$t0,$a1
FFFC3318 00025637		ldo		$t1,IOFocusTbl			; Is the task already included in the IO focus?
FFFC331C 81860613
FFFC3320 00060633
FFFC3324 00063D83
FFFC3328 01ADFE33		and		$t2,$t1,$t0					; test bit
FFFC332C 060E1463		bnez	$t2,.ret						; If so, don't add again
FFFC3330 01ADEDB3		or		$t1,$t1,$t0					; set bit indicator
FFFC3334 00025637		sto		$t1,IOFocusTbl
FFFC3338 81860613
FFFC333C 00060633
FFFC3340 01B63023
                        		; Disable interrupts while manipulating IO focus list
FFFC3344 3000F073		csrrc	$x0,#$300,#1				
FFFC3348 00025637		ldo		$t0,IOFocusNdx			; get current index
FFFC334C 81060613
FFFC3350 00060633
FFFC3354 00063D03
FFFC3358 00A99D93		sll		$t1,$a1,#LOG_TCBSZ	; t1 = pointer to TCB
FFFC335C 020D5063		bge		$t0,$x0,.notEmpty		; is there one? (!= -1)
FFFC3360 00025637		sto		$t1,IOFocusNdx			; no current index, so set equal to requester
FFFC3364 81060613
FFFC3368 00060633
FFFC336C 01B63023
FFFC3370 2FBDB423		sto		$t1,IOF_NEXT[$t1]		; and loop back to self
FFFC3374 2FBDB823		sto		$t1,IOF_PREV[$t1]
FFFC3378 00000E63		bra		.ret
                        	.notEmpty:
FFFC337C 2F0D3E03		ldo		$t2,IOF_PREV[$t0]		; insert t1 into focus ring
FFFC3380 2FCDB823		sto		$t2,IOF_PREV[$t1]
FFFC3384 2FADB423		sto		$t0,IOF_NEXT[$t1]
FFFC3388 2F0D3E03		ldo		$t2,IOF_PREV[$t0]
FFFC338C 2FBE3423		sto		$t1,IOF_NEXT[$t2]
FFFC3390 2FBD3823		sto		$t1,IOF_PREV[$t0]
                        	.ret:
FFFC3394 00006813		ldi		$v0,#E_Ok
FFFC3398 00008067		ret
                        	
                        	;-----------------------------------------------------------------------------
                        	; ReleaseIOFocus called when the task no longer desires to be on the I/O
                        	; focus list.
                        	;-----------------------------------------------------------------------------
                        	
                        	FMTK_ReleaseIOFocus:
                        		
FFFC339C 18101873		csrrw	v0,#$181,x0
FFFC33A0 03F87813		and		v0,v0,#MAX_TID
FFFC33A4 000869B3	mov		$a1,$v0
                        		; fall into ForceReleaseIOFocus
                        	
                        	;-----------------------------------------------------------------------------
                        	; Releasing the I/O focus causes the focus to switch if the running job
                        	; had the I/O focus.
                        	; ForceReleaseIOFocus forces the release of the IO focus for a job
                        	; different than the one currently running.
                        	; 
                        	; Stack Space:
                        	;		2 words
                        	; Parameters:
                        	;		a1 = task id to release
                        	; Returns:
                        	;		v0 = E_Ok
                        	;-----------------------------------------------------------------------------
                        	
                        	FMTK_ForceReleaseIOFocus:
FFFC33A8 FF870713		sub		$sp,$sp,#8
FFFC33AC 00173023		sto		$ra,[$sp]
FFFC33B0 2209880D		rmviof	$v0,$a1
	beqz	$v0,.noSwitch
FFFC33B4 00080463
FFFC33B8 E95FF0EF		call	FMTK_SwitchIOFocus
                        	.noSwitch:
FFFC33BC 00073083		ldo		$ra,[$sp]
FFFC33C0 00870713		add		$sp,$sp,#8
FFFC33C4 00006813		ldi		$v0,#E_Ok
FFFC33C8 00008067		ret
                        	
FFFC33CC 3000E073		csrrs	$x0,#$300,#1				; enable interrupts
FFFC33D0 00106D13		ldi		$t0,#1
FFFC33D4 013D1D33		sll		$t0,$t0,$a1
FFFC33D8 00025637		ldo		$t1,IOFocusTbl
FFFC33DC 81860613
FFFC33E0 00060633
FFFC33E4 00063D83
FFFC33E8 01ADFE33		and		$t2,$t1,$t0				; test bit for task
FFFC33EC 080E0863		beq		$t2,$x0,.noFocus	; does it even have the focus?
FFFC33F0 FFFD4D13		xor		$t0,$t0,#-1				; get inverted mask
FFFC33F4 01ADFDB3		and		$t1,$t1,$t0				; clear bit for task
FFFC33F8 00025637		sto		$t1,IOFocusTbl
FFFC33FC 81860613
FFFC3400 00060633
FFFC3404 01B63023
FFFC3408 00025637		ldo		$t1,IOFocusNdx		; check if the focus being released is the current
FFFC340C 81060613
FFFC3410 00060633
FFFC3414 00063D83
FFFC3418 00A99D13		sll		$t0,$a1,#LOG_TCBSZ	; io focus. If so, switch focus
FFFC341C 03BD1063		bne		$t0,$t1,.notSame
FFFC3420 FF070713		sub		$sp,$sp,#16
FFFC3424 01A73023		sto		$t0,[$sp]
FFFC3428 01B73423		sto		$t1,8[$sp]
FFFC342C E21FF0EF		call	FMTK_SwitchIOFocus
FFFC3430 00073D03		ldo		$t0,[$sp]
FFFC3434 00873D83		ldo		$t1,8[$sp]
FFFC3438 01070713		add		$sp,$sp,#16
                        	.notSame:
                        		; Disable interrupts while manipulating IO focus list
FFFC343C 3000F073		csrrc	$x0,#$300,#1				
FFFC3440 2E8D3E03		ldo		$t2,IOF_NEXT[$t0]
FFFC3444 020E4C63		blt		$t2,$x0,.done
FFFC3448 01AE0A63		beq		$t2,$t0,.pjSame
FFFC344C 2F0D3D83		ldo		$t1,IOF_PREV[$t0]
FFFC3450 2FBE3823		sto		$t1,IOF_PREV[$t2]
FFFC3454 2FCDB423		sto		$t2,IOF_NEXT[$t1]
FFFC3458 00000C63		bra		.0001
                        	.pjSame:
FFFC345C FFF06D93		ldi		$t1,#-1
FFFC3460 00025637		sto		$t1,IOFocusNdx
FFFC3464 81060613
FFFC3468 00060633
FFFC346C 01B63023
                        	.0001:
FFFC3470 FFF06D93		ldi		$t1,#-1
FFFC3474 2FBD3423		sto		$t1,IOF_NEXT[$t0]	
FFFC3478 2FBD3823		sto		$t1,IOF_PREV[$t0]	
                        	.done:
                        	.noFocus:
FFFC347C 00006813		ldi		$v0,#E_Ok
FFFC3480 00008067		ret
                        	.file "boot.r5a",1
                        	.file "boot.r5a",1
                        	.file "../fmtk/io.r5a",1
                        	.file "../fmtk/io.r5a",1
                        	; ============================================================================
                        	;        __
                        	;   \\__/ o\    (C) 2020  Robert Finch, Stratford
                        	;    \  __ /    All rights reserved.
                        	;     \/_//     robfinch<remove>@finitron.ca
                        	;       ||
                        	;  
                        	;
                        	; This source file is free software: you can redistribute it and/or modify 
                        	; it under the terms of the GNU Lesser General Public License as published 
                        	; by the Free Software Foundation, either version 3 of the License, or     
                        	; (at your option) any later version.                                      
                        	;                                                                          
                        	; This source file is distributed in the hope that it will be useful,      
                        	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                        	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                        	; GNU General Public License for more details.                             
                        	;                                                                          
                        	; You should have received a copy of the GNU General Public License        
                        	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                        	;
                        	; ============================================================================
                        	
                        	;Standard Devices are:
                        	
                        	;#		Device					Standard name
                        	
                        	;0		NULL device 			NUL		(OS built-in)
                        	;1		Keyboard (sequential)	KBD		(OS built-in)
                        	;2		Video (sequential)		VID		(OS built-in)
                        	;3		Printer (parallel 1)	LPT
                        	;4		Printer (parallel 2)	LPT2
                        	;5		RS-232 1				COM1	(OS built-in)
                        	;6		RS-232 2				COM2
                        	;7		RS-232 3				COM3
                        	;8		RS-232 4				COM4
                        	;9		Parallel xfer	  PTI
                        	;10		Floppy					FD0
                        	;11		Floppy					FD1
                        	;12		Hard disk				HD0
                        	;13		Hard disk				HD1
                        	;14
                        	;15   VIA							VIA1
                        	;16		SDCard					CARD1 	(OS built-in)
                        	;17
                        	;18
                        	;19
                        	;20
                        	;21
                        	;22
                        	;23
                        	;24
                        	;25
                        	;26
                        	;27
                        	;28		Audio						PSG1	(OS built-in)
                        	;29
                        	;30   Random Number		PRNG
                        	;31		Debug						DBG
                        	
                        	;------------------------------------------------------------------------------
                        	; Parameters:
                        	;		a1 = I/O channel
                        	;		a2 = function
                        	;		a3 = data
                        	;------------------------------------------------------------------------------
                        	
                        	FMTK_IO:
FFFC3484 02006813		ldi		$v0,#32
FFFC3488 0309FE63		bgeu	$a1,$v0,.badDev
FFFC348C 02006893		ldi		$v1,#32
FFFC3490 031A7663		bgeu	$a2,$v1,.badFunc
FFFC3494 00899813		sll		$v0,$a1,#8					; each device allowed 32 functions (*256)
FFFC3498 003A1893		sll		$v1,$a2,#3					; function number *8
FFFC349C 00022637		add		$v0,$v0,#DVF_Base		; base address of function table
FFFC34A0 00060613
FFFC34A4 01060833
FFFC34A8 01186833		or		$v0,$v0,$v1
FFFC34AC 00083803		ldo		$v0,[$v0]
FFFC34B0 00080663		beq		$v0,$x0,.badFunc
FFFC34B4 000800E7		call	[$v0]
                        	.xit:
FFFC34B8 00008067		ret
                        	.badFunc:
FFFC34BC 02206813		ldi		$v0,#E_BadDevOp
FFFC34C0 FE000CE3		bra		.xit
                        	.badDev:
FFFC34C4 02006813		ldi		$v0,#E_BadDevNum
FFFC34C8 FE0008E3		bra		.xit
                        	
                        	;------------------------------------------------------------------------------
                        	; Parameters:
                        	;		a0 = I/O channel
                        	;		a1 = points to function table
                        	;------------------------------------------------------------------------------
                        	
                        	CopyDevFuncTbl:
FFFC34CC 00891813		sll		$v0,$a0,#8					; each device allowed 32 functions (*256)
FFFC34D0 00022637		add		$v0,$v0,#DVF_Base		; base address of function table
FFFC34D4 00060613
FFFC34D8 01060833
FFFC34DC 02006D13		ldi		$t0,#32							; 32 functions to copy
                        	.again:
FFFC34E0 0009BE03		ldo		$t2,[$a1]
FFFC34E4 01C83023		sto		$t2,[$v0]
FFFC34E8 00898993		add		$a1,$a1,#8
FFFC34EC 00880813		add		$v0,$v0,#8
FFFC34F0 FFFD0D13		sub		$t0,$t0,#1
FFFC34F4 FFA046E3		bgt		$t0,$x0,.again
FFFC34F8 00008067		ret
                        	
                        	.file "boot.r5a",1
                        	.file "boot.r5a",1
                        	.file "../fmtk/scancodes.r5a",1
                        	.file "../fmtk/scancodes.r5a",1
                        		;--------------------------------------------------------------------------
                        		; PS2 scan codes to ascii conversion tables.
                        		;--------------------------------------------------------------------------
                        		;
FFFC34FC 00000000		align	
                        	
                        	_unshiftedScanCodes:
FFFC3500 A52EA92E		.byte	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
FFFC3504 ACA2A1A3
FFFC3508 A6A8AA2E		.byte	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
FFFC350C 2E6009A4
FFFC3510 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
FFFC3514 2E31712E
FFFC3518 737A2E2E		.byte	$2e,$2e,$7a,$73,$61,$77,$32,$2e
FFFC351C 2E327761
FFFC3520 6478632E		.byte	$2e,$63,$78,$64,$65,$34,$33,$2e
FFFC3524 2E333465
FFFC3528 6676202E		.byte	$2e,$20,$76,$66,$74,$72,$35,$2e
FFFC352C 2E357274
FFFC3530 68626E2E		.byte	$2e,$6e,$62,$68,$67,$79,$36,$2e
FFFC3534 2E367967
FFFC3538 6A6D2E2E		.byte	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
FFFC353C 2E383775
FFFC3540 696B2C2E		.byte	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
FFFC3544 2E39306F
FFFC3548 6C2F2E2E		.byte	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
FFFC354C 2E2D703B
FFFC3550 2E272E2E		.byte	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
FFFC3554 2E2E3D5B
FFFC3558 5D0D2EAD		.byte	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
FFFC355C 2E2E5C2E
FFFC3560 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
FFFC3564 2E082E2E
FFFC3568 932E952E		.byte	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
FFFC356C 2E2E2E94
FFFC3570 2E927F98		.byte	$98,$7f,$92,$2e,$91,$90,$1b,$af
FFFC3574 AF1B9091
FFFC3578 2E972EAB		.byte	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
FFFC357C 2EAE962E
                        	
FFFC3580 A72E2E2E		.byte	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
FFFC3584 2E2E2E2E
FFFC3588 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC358C 2E2E2E2E
FFFC3590 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC3594 2E2E2E2E
FFFC3598 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC359C 2E2E2E2E
FFFC35A0 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC35A4 2E2E2E2E
FFFC35A8 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC35AC 2E2E2E2E
FFFC35B0 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC35B4 2E2E2E2E
FFFC35B8 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC35BC 2E2E2E2E
FFFC35C0 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC35C4 2E2E2E2E
FFFC35C8 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC35CC 2E2E2E2E
FFFC35D0 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC35D4 2E2E2E2E
FFFC35D8 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC35DC 2E2E2E2E
FFFC35E0 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC35E4 2E2E2E2E
FFFC35E8 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC35EC 2E2E2E2E
FFFC35F0 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC35F4 2E2E2E2E
FFFC35F8 2EFA2E2E		.byte	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
FFFC35FC 2E2E2E2E
                        	
                        	_shiftedScanCodes:
FFFC3600 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC3604 2E2E2E2E
FFFC3608 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
FFFC360C 2E7E092E
FFFC3610 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
FFFC3614 2E21512E
FFFC3618 535A2E2E		.byte	$2e,$2e,$5a,$53,$41,$57,$40,$2e
FFFC361C 2E405741
FFFC3620 4458432E		.byte	$2e,$43,$58,$44,$45,$24,$23,$2e
FFFC3624 2E232445
FFFC3628 4656202E		.byte	$2e,$20,$56,$46,$54,$52,$25,$2e
FFFC362C 2E255254
FFFC3630 48424E2E		.byte	$2e,$4e,$42,$48,$47,$59,$5e,$2e
FFFC3634 2E5E5947
FFFC3638 4A4D2E2E		.byte	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
FFFC363C 2E2A2655
FFFC3640 494B3C2E		.byte	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
FFFC3644 2E28294F
FFFC3648 4C3F3E2E		.byte	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
FFFC364C 2E5F503A
FFFC3650 2E222E2E		.byte	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
FFFC3654 2E2E2B7B
FFFC3658 7D0D2E2E		.byte	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
FFFC365C 2E2E7C2E
FFFC3660 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
FFFC3664 2E082E2E
FFFC3668 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC366C 2E2E2E2E
FFFC3670 2E2E7F2E		.byte	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
FFFC3674 2E1B2E2E
FFFC3678 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC367C 2E2E2E2E
                        	
FFFC3680 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC3684 2E2E2E2E
FFFC3688 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC368C 2E2E2E2E
FFFC3690 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC3694 2E2E2E2E
FFFC3698 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC369C 2E2E2E2E
FFFC36A0 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC36A4 2E2E2E2E
FFFC36A8 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC36AC 2E2E2E2E
FFFC36B0 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC36B4 2E2E2E2E
FFFC36B8 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC36BC 2E2E2E2E
FFFC36C0 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC36C4 2E2E2E2E
FFFC36C8 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC36CC 2E2E2E2E
FFFC36D0 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC36D4 2E2E2E2E
FFFC36D8 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC36DC 2E2E2E2E
FFFC36E0 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC36E4 2E2E2E2E
FFFC36E8 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC36EC 2E2E2E2E
FFFC36F0 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC36F4 2E2E2E2E
FFFC36F8 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC36FC 2E2E2E2E
                        	
                        	; control
                        	_keybdControlCodes:
FFFC3700 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC3704 2E2E2E2E
FFFC3708 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
FFFC370C 2E7E092E
FFFC3710 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
FFFC3714 2E21112E
FFFC3718 131A2E2E		.byte	$2e,$2e,$1a,$13,$01,$17,$40,$2e
FFFC371C 2E401701
FFFC3720 0418032E		.byte	$2e,$03,$18,$04,$05,$24,$23,$2e
FFFC3724 2E232405
FFFC3728 0616202E		.byte	$2e,$20,$16,$06,$14,$12,$25,$2e
FFFC372C 2E251214
FFFC3730 08020E2E		.byte	$2e,$0e,$02,$08,$07,$19,$5e,$2e
FFFC3734 2E5E1907
FFFC3738 0A0D2E2E		.byte	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
FFFC373C 2E2A2615
FFFC3740 090B3C2E		.byte	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
FFFC3744 2E28290F
FFFC3748 0C3F3E2E		.byte	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
FFFC374C 2E5F103A
FFFC3750 2E222E2E		.byte	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
FFFC3754 2E2E2B7B
FFFC3758 7D0D2E2E		.byte	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
FFFC375C 2E2E7C2E
FFFC3760 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
FFFC3764 2E082E2E
FFFC3768 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC376C 2E2E2E2E
FFFC3770 2E2E7F2E		.byte	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
FFFC3774 2E1B2E2E
FFFC3778 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC377C 2E2E2E2E
                        	
                        	_keybdExtendedCodes:
FFFC3780 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
FFFC3784 2EA2A1A3
FFFC3788 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC378C 2E2E2E2E
FFFC3790 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC3794 2E2E2E2E
FFFC3798 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC379C 2E2E2E2E
FFFC37A0 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC37A4 2E2E2E2E
FFFC37A8 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC37AC 2E2E2E2E
FFFC37B0 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC37B4 2E2E2E2E
FFFC37B8 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC37BC 2E2E2E2E
FFFC37C0 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC37C4 2E2E2E2E
FFFC37C8 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC37CC 2E2E2E2E
FFFC37D0 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC37D4 2E2E2E2E
FFFC37D8 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC37DC 2E2E2E2E
FFFC37E0 2E2E2E2E		.byte	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
FFFC37E4 2E2E2E2E
FFFC37E8 932E952E		.byte	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
FFFC37EC 2E2E2E94
FFFC37F0 2E929998		.byte	$98,$99,$92,$2e,$91,$90,$2e,$2e
FFFC37F4 2E2E9091
FFFC37F8 2E972E2E		.byte	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
FFFC37FC 2E2E962E
                        	
                        	.file "boot.r5a",1
                        	.file "boot.r5a",1
                        	.file "../fmtk/keybd_driver_asm.r5a",1
                        	.file "../fmtk/keybd_driver_asm.r5a",1
                        	; ============================================================================
                        	;        __
                        	;   \\__/ o\    (C) 2020  Robert Finch, Stratford
                        	;    \  __ /    All rights reserved.
                        	;     \/_//     robfinch<remove>@finitron.ca
                        	;       ||
                        	;  
                        	;
                        	; This source file is free software: you can redistribute it and/or modify 
                        	; it under the terms of the GNU Lesser General Public License as published 
                        	; by the Free Software Foundation, either version 3 of the License, or     
                        	; (at your option) any later version.                                      
                        	;                                                                          
                        	; This source file is distributed in the hope that it will be useful,      
                        	; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                        	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                        	; GNU General Public License for more details.                             
                        	;                                                                          
                        	; You should have received a copy of the GNU General Public License        
                        	; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                        	;
                        	; ============================================================================
                        	
                        	;------------------------------------------------------------------------------
                        	;------------------------------------------------------------------------------
                        	; Device command 
                        	;
                        		align	8                        	
                        	KeybdFuncTbl:
FFFC3800 00000000		dco		0							; no operation
FFFC3804 00000000
FFFC3808 00000000		dco		0							; setup
FFFC380C 00000000
FFFC3810 00000000		dco		0							; initialize
FFFC3814 00000000
FFFC3818 00000000		dco		0							; status
FFFC381C 00000000
FFFC3820 00000000		dco		0							; media check
FFFC3824 00000000
FFFC3828 00000000		dco		0							; build BPB
FFFC382C 00000000
FFFC3830 00000000		dco		0							; open
FFFC3834 00000000
FFFC3838 00000000		dco		0							; close
FFFC383C 00000000
FFFC3840 00000000		dco		0							; get char
FFFC3844 00000000
FFFC3848 00000000		dco		0							; Peek char
FFFC384C 00000000
FFFC3850 FFFC3BB8		dco		_KeybdGetScancode		; get char direct
FFFC3854 00000000
FFFC3858 FFFC3BA4		dco		_KeybdPeekScancode	; Peek char direct
FFFC385C 00000000
FFFC3860 00000000		dco		0							; input status
FFFC3864 00000000
FFFC3868 00000000		dco		0							; Put char
FFFC386C 00000000
FFFC3870 FFFC3B28		dco		_KeybdSendByte	; reserved
FFFC3874 00000000
FFFC3878 00000000		dco		0							; set position
FFFC387C 00000000
FFFC3880 00000000		dco		0							; read block
FFFC3884 00000000
FFFC3888 00000000		dco		0							; write block
FFFC388C 00000000
FFFC3890 00000000		dco		0							; verify block
FFFC3894 00000000
FFFC3898 00000000		dco		0							; output status
FFFC389C 00000000
FFFC38A0 00000000		dco		0							; flush input
FFFC38A4 00000000
FFFC38A8 00000000		dco		0							; flush output
FFFC38AC 00000000
FFFC38B0 FFFC3BDC		dco		KeybdIRQ			; IRQ routine
FFFC38B4 00000000
FFFC38B8 00000000		dco		0							; Is removable
FFFC38BC 00000000
FFFC38C0 00000000		dco		0							; ioctrl read
FFFC38C4 00000000
FFFC38C8 00000000		dco		0							; ioctrl write
FFFC38CC 00000000
FFFC38D0 00000000		dco		0							; output until busy
FFFC38D4 00000000
FFFC38D8 00000000		dco		0							; 27
FFFC38DC 00000000
FFFC38E0 00000000		dco		0
FFFC38E4 00000000
FFFC38E8 00000000		dco		0
FFFC38EC 00000000
FFFC38F0 00000000		dco		0
FFFC38F4 00000000
FFFC38F8 00000000		dco		0							; 31
FFFC38FC 00000000
                        	
                        	;===============================================================================
                        	; Keyboard routines
                        	;===============================================================================
                        	
                        	SC_C		equ		$21
                        	SC_Z		equ		$1A
                        	SC_TAB	equ		$0D
                        	
                        	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                        	; Initialize the keyboard.
                        	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                        		align	4                        			; we don't know what was before
                        	_KeybdInit:
FFFC3900 FF070713		sub		$sp,$sp,#16
FFFC3904 00173023		sto		$ra,[$sp]
FFFC3908 00106913		ldi		$a0,#1					; Keyboard device
FFFC390C FFFC49B7		ldi		$a1,#KeybdFuncTbl
FFFC3910 80098993
FFFC3914 BB9FF0EF		call	CopyDevFuncTbl
FFFC3918 00006993		ldi		$a1,#0
FFFC391C 00025A37		ldi		$a2,#hKeybdMbx
FFFC3920 822A0A13
FFFC3924 FE5FE0EF		call	FMTK_AllocMbx
FFFC3928 0E000C63		bra		.xit
FFFC392C 00506E93		ldi		$t3,#5
                        	.0002:
FFFC3930 00031937		ldi		$a0,#200000			; 10ms wait
FFFC3934 D4090913
FFFC3938 01D73423		sto		$t3,8[$sp]
FFFC393C EB5FC0EF		call	_MicroDelay
FFFC3940 FFF06913		ldi		$a0,#-1					; send reset code to keyboard
FFFC3944 00000637		stb		$a0,KEYBD+1			; write $FF to status reg to clear TX state
FFFC3948 27760613
FFFC394C 00060633
FFFC3950 01260023
FFFC3954 1D4000EF		call	_KeybdSendByte	; now write to transmit register
FFFC3958 1E4000EF		call	_KeybdWaitTx		; wait until no longer busy
FFFC395C 178000EF		call	_KeybdRecvByte	; look for an ACK ($FA)
FFFC3960 0FA84E13		xor		$t2,$v0,#$FA
FFFC3964 040E1863		bnez	$t2,.tryAgain
FFFC3968 16C000EF		call	_KeybdRecvByte	; look for BAT completion code ($AA)
FFFC396C 0FC84E13		xor		$t2,$v0,#$FC		; reset error ?
FFFC3970 040E0263		beqz	$t2,.tryAgain
FFFC3974 0AA84813		xor		$v0,$v0,#$AA	; reset complete okay ?
FFFC3978 02081E63		bnez	$v0,.tryAgain
                        	
                        		; After a reset, scan code set #2 should be active
                        	.config:
FFFC397C 0F006913		ldi		$a0,#$F0			; send scan code select
FFFC3980 FFDC0637		stb		$a0,LEDS
FFFC3984 60060613
FFFC3988 00060633
FFFC398C 01260023
FFFC3990 198000EF		call	_KeybdSendByte
FFFC3994 1A8000EF		call	_KeybdWaitTx
FFFC3998 08087813		and		$v0,$v0,#$80
FFFC399C 00081C63		bnez	$v0,.tryAgain
FFFC39A0 134000EF		call	_KeybdRecvByte	; wait for response from keyboard
FFFC39A4 08087893		and		$v1,$v0,#$80
FFFC39A8 00089663		bnez	$v1,.tryAgain
FFFC39AC 0FA84E13		xor		$t2,$v0,#$FA
FFFC39B0 020E0463		beqz	$t2,.0004
                        	.tryAgain:
FFFC39B4 00873E83		ldo		$t3,8[$sp]
FFFC39B8 FFFE8E93	  sub   $t3,$t3,#1
FFFC39BC F60E9AE3		bnez	$t3,.0002
                        	.keybdErr:
FFFC39C0 00000937		ldi		$a0,#msgBadKeybd
FFFC39C4 27D90913
FFFC39C8 FF870713		sub		$sp,$sp,#8
FFFC39CC 01273023		sto		$a0,[$sp]
FFFC39D0 DEDFC0EF		call	PutString		; _DBGDisplayAsciiStringCRLF
FFFC39D4 02000863		bra		.ledxit
                        	.0004:
FFFC39D8 00206913		ldi		$a0,#2			; select scan code set #2
FFFC39DC 14C000EF		call	_KeybdSendByte
FFFC39E0 15C000EF		call	_KeybdWaitTx
FFFC39E4 08087813		and		$v0,$v0,#$80
FFFC39E8 FC0816E3		bnez	$v0,.tryAgain
FFFC39EC 0E8000EF		call	_KeybdRecvByte	; wait for response from keyboard
FFFC39F0 08087893		and		$v1,$v0,#$80
FFFC39F4 FC0890E3		bnez	$v1,.tryAgain
FFFC39F8 0FA84E13		xor		$t2,$v0,#$FA
FFFC39FC FA0E1CE3		bnez	$t2,.tryAgain
FFFC3A00 06C000EF		call	_KeybdGetID
                        	.ledxit:
FFFC3A04 00706913		ldi		$a0,#$07
FFFC3A08 024000EF		call	_KeybdSetLED
FFFC3A0C 005B9937		ldi		$a0,#6000000	; 300 ms
FFFC3A10 D8090913
FFFC3A14 DDDFC0EF		call	_MicroDelay
FFFC3A18 00006913		ldi		$a0,#$00
FFFC3A1C 010000EF		call	_KeybdSetLED
                        	.xit:
FFFC3A20 00073083		ldo		$ra,[$sp]
FFFC3A24 01070713		add		$sp,$sp,#16
FFFC3A28 00008067		ret
                        	
                        	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                        	; Set the LEDs on the keyboard.
                        	;
                        	; Parameters: $a0 LED status to set
                        	; Returns: none
                        	; Modifies: none
                        	; Stack Space: 2 words
                        	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                        	
                        	_KeybdSetLED:
FFFC3A2C FF070713		sub		$sp,$sp,#16
FFFC3A30 00173023		sto		$ra,[$sp]
FFFC3A34 00096E33		mov		$t2,$a0
FFFC3A38 0ED06913		ldi		$a0,#$ED
FFFC3A3C 01C73423		sto		$t2,8[$sp]
FFFC3A40 0E8000EF		call	_KeybdSendByte
FFFC3A44 0F8000EF		call	_KeybdWaitTx
FFFC3A48 08C000EF		call	_KeybdRecvByte	; should be an ack
FFFC3A4C 00873E03		ldo		$t2,8[$sp]
FFFC3A50 000E6933		mov		$a0,$t2
FFFC3A54 0D4000EF		call	_KeybdSendByte
FFFC3A58 0E4000EF		call	_KeybdWaitTx
FFFC3A5C 078000EF		call	_KeybdRecvByte	; should be an ack
FFFC3A60 00073083		ldo		$ra,[$sp]
FFFC3A64 01070713		add		$sp,$sp,#16
FFFC3A68 00008067		ret
                        	
                        	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                        	; Get ID - get the keyboards identifier code.
                        	;
                        	; Parameters: none
                        	; Returns: r1 = $AB83, $00 on fail
                        	; Modifies: r1, KeybdID updated
                        	; Stack Space: 2 words
                        	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                        	
                        	_KeybdGetID:
FFFC3A6C FF870713		sub		$sp,$sp,#8
FFFC3A70 00173023		sto		$ra,[$sp]
FFFC3A74 0F206913		ldi		$a0,#$F2
FFFC3A78 0B0000EF		call	_KeybdSendByte
FFFC3A7C 0C0000EF		call	_KeybdWaitTx
FFFC3A80 054000EF		call	_KeybdRecvByte
FFFC3A84 08087893		and		$v1,$v0,#$80
FFFC3A88 04089263		bnez	$v1,.notKbd
FFFC3A8C 0AB84E13		xor		$t2,$v0,#$AB
FFFC3A90 020E1E63		bnez	$t2,.notKbd
FFFC3A94 040000EF		call	_KeybdRecvByte
FFFC3A98 08087893		and		$v1,$v0,#$80
FFFC3A9C 02089863		bnez	$v1,.notKbd
FFFC3AA0 08384E13		xor		$t2,$v0,#$83
FFFC3AA4 020E1463		bnez	$t2,.notKbd
FFFC3AA8 0000B837		ldi		$v0,#$AB83
FFFC3AAC B8380813
                        	.0001:
FFFC3AB0 00000637		stt		$v0,_KeybdID
FFFC3AB4 28360613
FFFC3AB8 00060633
FFFC3ABC 01062023
FFFC3AC0 00073083		ldo		$ra,[$sp]
FFFC3AC4 00870713		add		$sp,$sp,#8
FFFC3AC8 00008067		ret
                        	.notKbd:
FFFC3ACC 00006813		ldi		$v0,#$00
FFFC3AD0 FE0000E3		bra		.0001
                        	
                        	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                        	; Recieve a byte from the keyboard, used after a command is sent to the
                        	; keyboard in order to wait for a response.
                        	;
                        	; Parameters: none
                        	; Returns: r1 = recieved byte ($00 to $FF), -1 on timeout
                        	; Modifies: r1
                        	; Stack Space: 2 words
                        	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                        	
                        	_KeybdRecvByte:
FFFC3AD4 FF070713		sub		$sp,$sp,#16
FFFC3AD8 00173023		sto		$ra,[$sp]
FFFC3ADC 06406E93		ldi		$t3,#100				; wait up to 1s
                        	.0003:
FFFC3AE0 0B0000EF		call	_KeybdGetStatus	; wait for response from keyboard
FFFC3AE4 08087813		and		$v0,$v0,#$80		; is input buffer full ? yes, branch
FFFC3AE8 02081863		bnez	$v0,.0004
FFFC3AEC 00031937		ldi		$a0,#200000
FFFC3AF0 D4090913
FFFC3AF4 01D73423		sto		$t3,8[$sp]
FFFC3AF8 CF9FC0EF		call	_MicroDelay
FFFC3AFC 00873E83		ldo		$t3,8[$sp]
FFFC3B00 FFFE8E93		sub   $t3,$t3,#1
FFFC3B04 FC0E9EE3		bnez	$t3,.0003				; go back and try again
FFFC3B08 FFF06813		ldi		$v0,#-1				; return -1
FFFC3B0C 00073083		ldo		$ra,[$sp]
FFFC3B10 01070713		add		$sp,$sp,#16
FFFC3B14 00008067		ret
                        	.0004:
FFFC3B18 0A0000EF		call	_KeybdGetScancode
FFFC3B1C 00073083		ldo		$ra,[$sp]
FFFC3B20 01070713		add		$sp,$sp,#16
FFFC3B24 00008067		ret
                        	
                        	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                        	; Send a byte to the keyboard.
                        	;
                        	; Parameters: $a0 byte to send
                        	; Returns: none
                        	; Modifies: none
                        	; Stack Space: 0 words
                        	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                        	
                        	_KeybdSendByte:
FFFC3B28 00000637		stb		$a0,KEYBD
FFFC3B2C 27660613
FFFC3B30 00060633
FFFC3B34 01260023
FFFC3B38 00008067		ret
                        	
                        	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                        	; Wait until the keyboard transmit is complete
                        	;
                        	; Parameters: none
                        	; Returns: r1 = 0 if successful, r1 = -1 timeout
                        	; Modifies: v0,t3
                        	; Stack Space: 1 words
                        	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                        	
                        	_KeybdWaitTx:
FFFC3B3C FF070713		sub		$sp,$sp,#16
FFFC3B40 00173023		sto		$ra,[$sp]
FFFC3B44 06406E93		ldi		$t3,#100			; wait a max of 1s
                        	.0001:
FFFC3B48 048000EF		call	_KeybdGetStatus
FFFC3B4C 04087813		and		$v0,$v0,#$40	; check for transmit complete bit; branch if bit set
FFFC3B50 02081863		bnez	$v0,.0002
FFFC3B54 01D73423		sto		$t3,8[$sp]
FFFC3B58 00031937		ldi		$a0,#200000		; 10 ms @20MHz
FFFC3B5C D4090913
FFFC3B60 C91FC0EF		call	_MicroDelay		; delay a little bit
FFFC3B64 00873E83		ldo		$t3,8[$sp]
FFFC3B68 FFFE8E93		sub		$t3,$t3,#1
FFFC3B6C FC0E9EE3		bnez	$t3,.0001
FFFC3B70 00073083		ldo		$ra,[$sp]			; timed out
FFFC3B74 00870713		add		$sp,$sp,#8
FFFC3B78 FFF06813		ldi		$v0,#-1
FFFC3B7C 00008067		ret		
                        	.0002:
FFFC3B80 00073083		ldo		$ra,[$sp]			; timed out
FFFC3B84 01070713		add		$sp,$sp,#16
FFFC3B88 00006813		ldi		$v0,#0
FFFC3B8C 00008067		ret		
                        	
                        	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                        	; Get the keyboard status
                        	;
                        	; Parameters: none
                        	; Returns: r1 = status
                        	; Modifies: r1
                        	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                        	
                        	_KeybdGetStatus:
FFFC3B90 00000637		ldb		$v0,KEYBD+1
FFFC3B94 27760613
FFFC3B98 00060633
FFFC3B9C 00060803
FFFC3BA0 00008067		ret
                        	
                        	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                        	; Get the scancode from the keyboard port. Getting the scancode clears the
                        	; interrupt status.
                        	;
                        	; Parameters: none
                        	; Returns: r1 = scancode
                        	; Modifies: r1
                        	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                        	
                        	_KeybdPeekScancode:
FFFC3BA4 00000637		ldbu		$v0,KEYBD			; get the scan code
FFFC3BA8 27660613
FFFC3BAC 00060633
FFFC3BB0 00064803
FFFC3BB4 00008067		ret
                        	
                        	_KeybdGetScancode:
FFFC3BB8 00000637		ldbu		$v0,KEYBD			; get the scan code
FFFC3BBC 27660613
FFFC3BC0 00060633
FFFC3BC4 00064803
FFFC3BC8 00000637		stb			$x0,KEYBD+1		; clear receive register
FFFC3BCC 27760613
FFFC3BD0 00060633
FFFC3BD4 00060023
FFFC3BD8 00008067		ret
                        	
                        	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                        	; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                        	
                        	KeybdIRQ:
FFFC3BDC FB5FF0EF		call	_KeybdGetStatus
FFFC3BE0 0E085263		bge		$v0,$x0,.notKbd
FFFC3BE4 FD5FF0EF		call	_KeybdGetScancode
FFFC3BE8 00025637		ldo		$s1,IOFocusNdx
FFFC3BEC 81060613
FFFC3BF0 00060633
FFFC3BF4 00063203
FFFC3BF8 0C020663		beqz	$s1,.notKbd
FFFC3BFC 30024D03		ldbu	$t0,TCBKbdHead[$s1]
FFFC3C00 30124D83		ldbu	$t1,TCBKbdTail[$s1]
FFFC3C04 001D0D13		add		$t0,$t0,#1
FFFC3C08 01FD7D13		and		$t0,$t0,#31
FFFC3C0C 01BD0663		beq		$t0,$t1,.noRoom
FFFC3C10 31A20023		stb		$t0,TCBKbdHead[$s1]
FFFC3C14 31020423		stb		$v0,TCBKbdBuf[$s1]
                        	.noRoom:
                        		; check trigger debugger
                        		; check CTRL-C
FFFC3C18 00000637		lbu		$t0,TCBKbdState2
FFFC3C1C 28B60613
FFFC3C20 00060633
FFFC3C24 00064D03
FFFC3C28 004D7D93		and		$t1,$t0,#4
FFFC3C2C 020D8E63		beqz	$t1,.notCtrl
FFFC3C30 02106D13		ldi		$t0,#SC_C
FFFC3C34 01A81863		bne		$v0,$t0,.notCtrlC
FFFC3C38 00306D13		ldi		$t0,#3
FFFC3C3C 2DA23423		sto		$t0,TCBException[$s1]
FFFC3C40 02000463		bra		.0001
                        	.notCtrlC:
FFFC3C44 01A06D13		ldi		$t0,#SC_Z
FFFC3C48 03A81063		bne		$v0,$t0,.notCtrlZ
FFFC3C4C 01A06D13		ldi		$t0,#26
                        		
FFFC3C50 18101873		csrrw	v0,#$181,x0
FFFC3C54 03F87813		and		v0,v0,#MAX_TID
FFFC3C58 00081813	sll		$v0,$v0,#32
FFFC3C5C 01A86833		or		$v0,$v0,$t0
FFFC3C60 2D023423		sto		$v0,TCBException[$s1]
FFFC3C64 00000263		bra		.0001
                        	.notCtrlZ:
                        	.0001:
                        	.notCtrl:
FFFC3C68 002D7D93		and		$t1,$t0,#2
FFFC3C6C 620D8263		beqz	$t1,.notAlt
FFFC3C70 00D06D13		ldi		$t0,#SC_TAB
FFFC3C74 01A81A63		bne		$v0,$t0,.notAltTab
FFFC3C78 00025637		stb		$t0,SwitchIOFocus
FFFC3C7C 82060613
FFFC3C80 00060633
FFFC3C84 01A60023
                        	.notAltTab:
                        		; Send a message indicating a key is available
                        		; Keyboard mailbox setup yet?
FFFC3C88 00025637		ldw		$a1,hKeybdMbx
FFFC3C8C 82260613
FFFC3C90 00060633
FFFC3C94 00061983
FFFC3C98 0209C663		blt		$a1,$x0,.notKbd
                        		; If there's already a keyboard message, don't send another one.
FFFC3C9C 00599213		sll		$s1,$a1,#LOG_MBXSZ
FFFC3CA0 00020637		add		$s1,$s1,#mbxs
FFFC3CA4 00060613
FFFC3CA8 00460233
FFFC3CAC 01823D03		ldo		$t0,MBX_MQTAIL[$s1]
FFFC3CB0 000D1A63		bnez	$t0,.notKbd
FFFC3CB4 FFF06A13		ldi		$a2,#-1
FFFC3CB8 FFF06A93		ldi		$a3,#-1
FFFC3CBC FFF06B13		ldi		$a4,#-1
FFFC3CC0 D4DFE0EF		call	FMTK_SendMsg
                        	.notKbd:
FFFC3CC4 79217073		csrrc	$x0,#$792,#2			; clear IRQ semaphore
FFFC3CC8 10000073		eret
                        	
                        	; Return -1 if there is a scancode available in the buffer.
                        	
                        	_KeybdGetBufferStatus:
                        		
FFFC3CCC 18101873		csrrw	v0,#$181,x0
FFFC3CD0 03F87813		and		v0,v0,#MAX_TID
FFFC3CD4 00A81213	sll		$s1,$v0,#LOG_TCBSZ
FFFC3CD8 3000F2F3		csrrc	$s2,#$300,#1						; disable interrupts
FFFC3CDC 30024D03		ldbu	$t0,TCBKbdHead[$s1]
FFFC3CE0 30124D83		ldbu	$t1,TCBKbdTail[$s1]
FFFC3CE4 30029073		csrrw	$x0,#$300,$s2						; restore interrupts
FFFC3CE8 01BD0663		beq		$t0,$t1,.empty
FFFC3CEC FFF06813		ldi		$v0,#-1
FFFC3CF0 00008067		ret
                        	.empty:
FFFC3CF4 00006813		ldi		$v0,#0
FFFC3CF8 00008067		ret
                        	
                        	_KeybdGetBufferedScancode:	
                        		
FFFC3CFC 18101873		csrrw	v0,#$181,x0
FFFC3D00 03F87813		and		v0,v0,#MAX_TID
FFFC3D04 00A81213	sll		$s1,$v0,#LOG_TCBSZ
FFFC3D08 00006813		ldi		$v0,#0									; $v0 = scancode
FFFC3D0C 3000F2F3		csrrc	$s2,#$300,#1						; disable interrupts
FFFC3D10 30024D03		ldbu	$t0,TCBKbdHead[$s1]
FFFC3D14 30124D83		ldbu	$t1,TCBKbdTail[$s1]
FFFC3D18 01BD0C63		beq		$t0,$t1,.empty					; return 0 if empty
FFFC3D1C 004D8D33		add		$t0,$t1,$s1							; calc pointer to buffer entry
FFFC3D20 308D4803		ldbu	$v0,TCBKbdBuf[$t0]			; get buffer entry
FFFC3D24 001D8D93		add		$t1,$t1,#1							; increment tail pointer
FFFC3D28 01FDFD93		and		$t1,$t1,#31
FFFC3D2C 31B200A3		stb		$t1,TCBKbdTail[$s1]			; store tail pointer
                        	.empty:
FFFC3D30 30029073		csrrw	$x0,#$300,$s2						; restore interrupts
FFFC3D34 00008067		ret
                        	
                        	; Parameters:
                        	;		a0 = scancode
                        	
                        	_XlatScancode:
FFFC3D38 00008067		ret
                        	
                        	.file "boot.r5a",1
                        	.file "boot.r5a",1
                        	.file "../fmtk/source/drivers/prgn_driver_asm.r5a",1
                        	.file "../fmtk/source/drivers/prgn_driver_asm.r5a",1
                        	.file "boot.r5a",1
                        	.file "boot.r5a",1
                        	.file "../fmtk/source/kernel/DBGKeybd.s",1
                        	.file "../fmtk/source/kernel/DBGKeybd.s",1
                        	.file "../fmtk/source/kernel/DBGKeybd.s",94
                        		code
FFFC3D3C 00000000		align	1
                        	
                        	;====================================================
                        	; Basic Block 0
                        	;====================================================
FFFC3D40 FE070713	public code _DBGCheckForKey:
	      	sub      	$sp,$sp,#32
FFFC3D44 00273023		      	sto      	$fp,[$sp]
FFFC3D48 00073423		      	sto      	$x0,8[$sp]
FFFC3D4C 00173C23		      	sto      	$ra,24[$sp]
FFFC3D50 00076133		      	mov      	$fp,$sp
FFFC3D54 E3DFF0EF		      	call     	_KeybdGetStatus
FFFC3D58 00086D33		      	mov      	$t0,$v0
FFFC3D5C 000D6833		      	mov      	$v0,$t0
                        	DBGKeybd_5:
                        	DBGKeybd_8:
FFFC3D60 00016733		      	mov      	$sp,$fp
FFFC3D64 00073103		      	ldo      	$fp,[$sp]
FFFC3D68 01873083		      	ldo      	$ra,24[$sp]
FFFC3D6C 02070713		      	add      	$sp,$sp,#32
FFFC3D70 00008067		      	ret      
                        	endpublic
                        	
                        	.file "../fmtk/source/kernel/DBGKeybd.s",119
                        		code
FFFC3D74 00000000		align	1
FFFC3D78 00000000
FFFC3D7C 00000000
                        	
                        	;====================================================
                        	; Basic Block 0
                        	;====================================================
FFFC3D80 FE070713	public code _DBGGetKey:
	      	sub      	$sp,$sp,#32
FFFC3D84 00273023		      	sto      	$fp,[$sp]
FFFC3D88 00073423		      	sto      	$x0,8[$sp]
FFFC3D8C 00173C23		      	sto      	$ra,24[$sp]
FFFC3D90 00076133		      	mov      	$fp,$sp
FFFC3D94 FC270713		      	sub      	$sp,$sp,#62
FFFC3D98 00473023		      	sto      	$s1,0[$sp]
FFFC3D9C 00573423		      	sto      	$s2,8[$sp]
FFFC3DA0 00673823		      	sto      	$s3,16[$sp]
FFFC3DA4 00773C23		      	sto      	$s4,24[$sp]
FFFC3DA8 FEE13203		      	ldo      	$s1,-18[$fp]
FFFC3DAC FF710283		      	ldb      	$s2,-9[$fp]
FFFC3DB0 FF813303		      	ldo      	$s3,-8[$fp]
FFFC3DB4 0000A3B7		      	ldi      	$s4,#40000
FFFC3DB8 C4038393
                        	DBGKeybd_66:
                        	; 		for (count = 0; (KeybdGetStatus() & 0x40) != 0 && count < 40000; count++);
FFFC3DBC 00006233		      	mov      	$s1,$x0
FFFC3DC0 DD1FF0EF		      	call     	_KeybdGetStatus
FFFC3DC4 00086DB3		      	mov      	$t1,$v0
FFFC3DC8 040DFD13		      	and      	$t0,$t1,#64
FFFC3DCC 020D0063		      	beq      	$t0,$x0,DBGKeybd_69
FFFC3DD0 00725E63		      	bge      	$s1,$s4,DBGKeybd_69
                        	DBGKeybd_68:
FFFC3DD4 00120213		      	add      	$s1,$s1,#1
FFFC3DD8 DB9FF0EF		      	call     	_KeybdGetStatus
FFFC3DDC 00086DB3		      	mov      	$t1,$v0
FFFC3DE0 040DFD13		      	and      	$t0,$t1,#64
FFFC3DE4 000D0463		      	beq      	$t0,$x0,DBGKeybd_71
FFFC3DE8 FE7246E3		      	blt      	$s1,$s4,DBGKeybd_68
                        	DBGKeybd_71:
                        	DBGKeybd_69:
                        	; 		while ((KeybdGetStatus() & 0x80) == 0) {
FFFC3DEC DA5FF0EF		      	call     	_KeybdGetStatus
FFFC3DF0 00086DB3		      	mov      	$t1,$v0
FFFC3DF4 080DFD13		      	and      	$t0,$t1,#128
FFFC3DF8 040D1063		      	bne      	$t0,$x0,DBGKeybd_73
                        	DBGKeybd_72:
                        	; 			if (!block)
FFFC3DFC 02091663		      	bne      	$a0,$x0,DBGKeybd_74
                        	; 				return (-1);
FFFC3E00 FFF06813		      	ldi      	$v0,#-1
                        	DBGKeybd_62:
                        	DBGKeybd_65:
FFFC3E04 00073203		      	ldo      	$s1,0[$sp]
FFFC3E08 00873283		      	ldo      	$s2,8[$sp]
FFFC3E0C 01073303		      	ldo      	$s3,16[$sp]
FFFC3E10 01873383		      	ldo      	$s4,24[$sp]
FFFC3E14 00016733		      	mov      	$sp,$fp
FFFC3E18 00073103		      	ldo      	$fp,[$sp]
FFFC3E1C 01873083		      	ldo      	$ra,24[$sp]
FFFC3E20 02070713		      	add      	$sp,$sp,#32
FFFC3E24 00008067		      	ret      
                        	DBGKeybd_74:
FFFC3E28 D69FF0EF		      	call     	_KeybdGetStatus
FFFC3E2C 00086DB3		      	mov      	$t1,$v0
FFFC3E30 080DFD13		      	and      	$t0,$t1,#128
FFFC3E34 FC0D04E3		      	beq      	$t0,$x0,DBGKeybd_72
                        	DBGKeybd_73:
                        	; 		sc = KeybdGetScancode() & 0xff;
FFFC3E38 D81FF0EF		      	call     	_KeybdGetScancode
FFFC3E3C 00086DB3		      	mov      	$t1,$v0
FFFC3E40 0FFDFD13		      	and      	$t0,$t1,#255
FFFC3E44 000D6333		      	mov      	$s3,$t0
                        	; 		for (count = 0; count < 20; count++)
FFFC3E48 00006233		      	mov      	$s1,$x0
FFFC3E4C 01422D13		      	slt      	$t0,$s1,#20
FFFC3E50 000D0863		      	beqz     	$t0,DBGKeybd_77
                        	DBGKeybd_76:
                        	; 			;
FFFC3E54 00120213		      	add      	$s1,$s1,#1
FFFC3E58 01422D13		      	slt      	$t0,$s1,#20
FFFC3E5C FE0D1CE3		      	bnez     	$t0,DBGKeybd_76
                        	DBGKeybd_77:
                        	; 	  case 0xF0:
FFFC3E60 0F034D13		      	xor      	$t0,$s3,#240
FFFC3E64 040D0063		      	beq      	$t0,$x0,DBGKeybd_90
                        	; 	  case 0xE0:
FFFC3E68 0E034D13		      	xor      	$t0,$s3,#224
FFFC3E6C 040D0863		      	beq      	$t0,$x0,DBGKeybd_91
                        	; 	  case 0x14:
FFFC3E70 01434D13		      	xor      	$t0,$s3,#20
FFFC3E74 060D0863		      	beq      	$t0,$x0,DBGKeybd_92
                        	; 	  case 0x59:
FFFC3E78 05934D13		      	xor      	$t0,$s3,#89
FFFC3E7C 0C0D0E63		      	beq      	$t0,$x0,DBGKeybd_93
                        	; 	  case 0x77:
FFFC3E80 07734D13		      	xor      	$t0,$s3,#119
FFFC3E84 140D0463		      	beq      	$t0,$x0,DBGKeybd_94
                        	; 	  case 0x58:
FFFC3E88 05834D13		      	xor      	$t0,$s3,#88
FFFC3E8C 1A0D0063		      	beq      	$t0,$x0,DBGKeybd_95
                        	; 	  case 0x7E:
FFFC3E90 07E34D13		      	xor      	$t0,$s3,#126
FFFC3E94 1E0D0C63		      	beq      	$t0,$x0,DBGKeybd_96
                        	; 	  case 0x11:
FFFC3E98 01134D13		      	xor      	$t0,$s3,#17
FFFC3E9C 240D0863		      	beq      	$t0,$x0,DBGKeybd_97
                        	; 	  default:
FFFC3EA0 2C000063		      	bra      	DBGKeybd_98
                        	DBGKeybd_90:
                        	;       KeyState1 = -1;
FFFC3EA4 FFF06D13		      	ldi      	$t0,#-1
FFFC3EA8 00025637		      	stb      	$t0,_KeyState1
FFFC3EAC 82460613
FFFC3EB0 00060633
FFFC3EB4 01A60023
                        	;       break;
FFFC3EB8 3C000663		      	bra      	DBGKeybd_79
                        	DBGKeybd_91:
                        	;       KeyState2 |= 0x80;
FFFC3EBC 00025637		      	ldb      	$t0,_KeyState2
FFFC3EC0 82560613
FFFC3EC4 00060633
FFFC3EC8 00060D03
FFFC3ECC 080D6D13		      	or       	$t0,$t0,#128
FFFC3ED0 00025637		      	stb      	$t0,_KeyState2
FFFC3ED4 82560613
FFFC3ED8 00060633
FFFC3EDC 01A60023
                        	;       break;
FFFC3EE0 3A000263		      	bra      	DBGKeybd_79
                        	DBGKeybd_92:
                        	;       if (KeyState1 >= 0)
FFFC3EE4 00025637		      	ldb      	$t0,_KeyState1
FFFC3EE8 82460613
FFFC3EEC 00060633
FFFC3EF0 00060D03
FFFC3EF4 020D4663		      	blt      	$t0,$x0,DBGKeybd_99
                        	;         KeyState2 |= 4;
FFFC3EF8 00025637		      	ldb      	$t0,_KeyState2
FFFC3EFC 82560613
FFFC3F00 00060633
FFFC3F04 00060D03
FFFC3F08 004D6D13		      	or       	$t0,$t0,#4
FFFC3F0C 00025637		      	stb      	$t0,_KeyState2
FFFC3F10 82560613
FFFC3F14 00060633
FFFC3F18 01A60023
FFFC3F1C 02000463		      	bra      	DBGKeybd_100
                        	DBGKeybd_99:
                        	;         KeyState2 &= ~4;
FFFC3F20 00025637		      	ldb      	$t0,_KeyState2
FFFC3F24 82560613
FFFC3F28 00060633
FFFC3F2C 00060D03
FFFC3F30 FFBD7D13		      	and      	$t0,$t0,#-5
FFFC3F34 00025637		      	stb      	$t0,_KeyState2
FFFC3F38 82560613
FFFC3F3C 00060633
FFFC3F40 01A60023
                        	DBGKeybd_100:
                        	;       KeyState1 = 0;
FFFC3F44 00025637		      	stb      	$x0,_KeyState1
FFFC3F48 82460613
FFFC3F4C 00060633
FFFC3F50 00060023
                        	;       break;
FFFC3F54 32000863		      	bra      	DBGKeybd_79
                        	DBGKeybd_93:
                        	;       if (KeyState1 >= 0)
FFFC3F58 00025637		      	ldb      	$t0,_KeyState1
FFFC3F5C 82460613
FFFC3F60 00060633
FFFC3F64 00060D03
FFFC3F68 020D4663		      	blt      	$t0,$x0,DBGKeybd_101
                        	;         KeyState2 |= 1;
FFFC3F6C 00025637		      	ldb      	$t0,_KeyState2
FFFC3F70 82560613
FFFC3F74 00060633
FFFC3F78 00060D03
FFFC3F7C 001D6D13		      	or       	$t0,$t0,#1
FFFC3F80 00025637		      	stb      	$t0,_KeyState2
FFFC3F84 82560613
FFFC3F88 00060633
FFFC3F8C 01A60023
FFFC3F90 02000463		      	bra      	DBGKeybd_102
                        	DBGKeybd_101:
                        	;         KeyState2 &= ~1;
FFFC3F94 00025637		      	ldb      	$t0,_KeyState2
FFFC3F98 82560613
FFFC3F9C 00060633
FFFC3FA0 00060D03
FFFC3FA4 FFED7D13		      	and      	$t0,$t0,#-2
FFFC3FA8 00025637		      	stb      	$t0,_KeyState2
FFFC3FAC 82560613
FFFC3FB0 00060633
FFFC3FB4 01A60023
                        	DBGKeybd_102:
                        	;       KeyState1 = 0;
FFFC3FB8 00025637		      	stb      	$x0,_KeyState1
FFFC3FBC 82460613
FFFC3FC0 00060633
FFFC3FC4 00060023
                        	;       break;
FFFC3FC8 2A000E63		      	bra      	DBGKeybd_79
                        	DBGKeybd_94:
                        	;       KeyState2 ^= 16;
FFFC3FCC 00025637		      	ldb      	$t0,_KeyState2
FFFC3FD0 82560613
FFFC3FD4 00060633
FFFC3FD8 00060D03
FFFC3FDC 010D4D13		      	xor      	$t0,$t0,#16
FFFC3FE0 00025637		      	stb      	$t0,_KeyState2
FFFC3FE4 82560613
FFFC3FE8 00060633
FFFC3FEC 01A60023
                        	;       KeyLED ^= 2;
FFFC3FF0 00025637		      	ldb      	$t0,_KeyLED
FFFC3FF4 82660613
FFFC3FF8 00060633
FFFC3FFC 00060D03
FFFC4000 002D4D13		      	xor      	$t0,$t0,#2
FFFC4004 00025637		      	stb      	$t0,_KeyLED
FFFC4008 82660613
FFFC400C 00060633
FFFC4010 01A60023
                        	;       KeybdSetLED(KeyLED);
FFFC4014 00025637		      	ldb      	$a0,_KeyLED
FFFC4018 82660613
FFFC401C 00060633
FFFC4020 00060903
FFFC4024 A09FF0EF		      	call     	_KeybdSetLED
                        	;       break;
FFFC4028 24000E63		      	bra      	DBGKeybd_79
                        	DBGKeybd_95:
                        	;       KeyState2 ^= 32;
FFFC402C 00025637		      	ldb      	$t0,_KeyState2
FFFC4030 82560613
FFFC4034 00060633
FFFC4038 00060D03
FFFC403C 020D4D13		      	xor      	$t0,$t0,#32
FFFC4040 00025637		      	stb      	$t0,_KeyState2
FFFC4044 82560613
FFFC4048 00060633
FFFC404C 01A60023
                        	;       KeyLED ^= 4;
FFFC4050 00025637		      	ldb      	$t0,_KeyLED
FFFC4054 82660613
FFFC4058 00060633
FFFC405C 00060D03
FFFC4060 004D4D13		      	xor      	$t0,$t0,#4
FFFC4064 00025637		      	stb      	$t0,_KeyLED
FFFC4068 82660613
FFFC406C 00060633
FFFC4070 01A60023
                        	;       KeybdSetLED(KeyLED);
FFFC4074 00025637		      	ldb      	$a0,_KeyLED
FFFC4078 82660613
FFFC407C 00060633
FFFC4080 00060903
FFFC4084 9A9FF0EF		      	call     	_KeybdSetLED
                        	;       break;
FFFC4088 1E000E63		      	bra      	DBGKeybd_79
                        	DBGKeybd_96:
                        	;       KeyState2 ^= 64;
FFFC408C 00025637		      	ldb      	$t0,_KeyState2
FFFC4090 82560613
FFFC4094 00060633
FFFC4098 00060D03
FFFC409C 040D4D13		      	xor      	$t0,$t0,#64
FFFC40A0 00025637		      	stb      	$t0,_KeyState2
FFFC40A4 82560613
FFFC40A8 00060633
FFFC40AC 01A60023
                        	;       KeyLED ^= 1;
FFFC40B0 00025637		      	ldb      	$t0,_KeyLED
FFFC40B4 82660613
FFFC40B8 00060633
FFFC40BC 00060D03
FFFC40C0 001D4D13		      	xor      	$t0,$t0,#1
FFFC40C4 00025637		      	stb      	$t0,_KeyLED
FFFC40C8 82660613
FFFC40CC 00060633
FFFC40D0 01A60023
                        	;       KeybdSetLED(KeyLED);
FFFC40D4 00025637		      	ldb      	$a0,_KeyLED
FFFC40D8 82660613
FFFC40DC 00060633
FFFC40E0 00060903
FFFC40E4 949FF0EF		      	call     	_KeybdSetLED
                        	;       break;
FFFC40E8 18000E63		      	bra      	DBGKeybd_79
                        	DBGKeybd_97:
                        	;       if (KeyState1 >= 0)
FFFC40EC 00025637		      	ldb      	$t0,_KeyState1
FFFC40F0 82460613
FFFC40F4 00060633
FFFC40F8 00060D03
FFFC40FC 020D4663		      	blt      	$t0,$x0,DBGKeybd_103
                        	;         KeyState2 |= 2;
FFFC4100 00025637		      	ldb      	$t0,_KeyState2
FFFC4104 82560613
FFFC4108 00060633
FFFC410C 00060D03
FFFC4110 002D6D13		      	or       	$t0,$t0,#2
FFFC4114 00025637		      	stb      	$t0,_KeyState2
FFFC4118 82560613
FFFC411C 00060633
FFFC4120 01A60023
FFFC4124 02000463		      	bra      	DBGKeybd_104
                        	DBGKeybd_103:
                        	;         KeyState2 &= ~2;
FFFC4128 00025637		      	ldb      	$t0,_KeyState2
FFFC412C 82560613
FFFC4130 00060633
FFFC4134 00060D03
FFFC4138 FFDD7D13		      	and      	$t0,$t0,#-3
FFFC413C 00025637		      	stb      	$t0,_KeyState2
FFFC4140 82560613
FFFC4144 00060633
FFFC4148 01A60023
                        	DBGKeybd_104:
                        	;       KeyState1 = 0;
FFFC414C 00025637		      	stb      	$x0,_KeyState1
FFFC4150 82460613
FFFC4154 00060633
FFFC4158 00060023
                        	;       break;
FFFC415C 12000463		      	bra      	DBGKeybd_79
                        	DBGKeybd_98:
                        	; 				if (KeyState1) {
FFFC4160 00025637		      	ldb      	$t0,_KeyState1
FFFC4164 82460613
FFFC4168 00060633
FFFC416C 00060D03
FFFC4170 000D0C63		      	beq      	$t0,$x0,DBGKeybd_105
                        	; 					KeyState1 = 0;
FFFC4174 00025637		      	stb      	$x0,_KeyState1
FFFC4178 82460613
FFFC417C 00060633
FFFC4180 00060023
FFFC4184 10000063		      	bra      	DBGKeybd_106
                        	DBGKeybd_105:
                        	; 					if (((KeyState2 & 0x06)==0x06) && sc==0x71) {
FFFC4188 00025637		      	ldb      	$t1,_KeyState2
FFFC418C 82560613
FFFC4190 00060633
FFFC4194 00060D83
FFFC4198 006DFD13		      	and      	$t0,$t1,#6
FFFC419C 006D4D93		      	xor      	$t1,$t0,#6
FFFC41A0 000D9C63		      	bnez     	$t1,DBGKeybd_107
FFFC41A4 07134D13		      	xor      	$t0,$s3,#113
FFFC41A8 000D1863		      	bnez     	$t0,DBGKeybd_107
                        	; 						__asm {
                        		      	;asm     	
FFFC41AC 00000637				jmp		$FFFC0100
FFFC41B0 2B760067
                        	; 						}
FFFC41B4 0C000863		      	bra      	DBGKeybd_108
                        	DBGKeybd_107:
                        	; 					else if (KeyState2 & 0x80) { // Extended code ?
FFFC41B8 00025637		      	ldb      	$t1,_KeyState2
FFFC41BC 82560613
FFFC41C0 00060633
FFFC41C4 00060D83
FFFC41C8 080DFD13		      	and      	$t0,$t1,#128
FFFC41CC 040D0063		      	beq      	$t0,$x0,DBGKeybd_109
                        	; 						KeyState2 &= ~0x80;
FFFC41D0 00025637		      	ldb      	$t0,_KeyState2
FFFC41D4 82560613
FFFC41D8 00060633
FFFC41DC 00060D03
FFFC41E0 F7FD7D13		      	and      	$t0,$t0,#-129
FFFC41E4 00025637		      	stb      	$t0,_KeyState2
FFFC41E8 82560613
FFFC41EC 00060633
FFFC41F0 01A60023
                        	; 						ch = keybdExtendedCodes[sc];
FFFC41F4 FFFC3637		      	ldb      	$s2,_keybdExtendedCodes[$s3]
FFFC41F8 78060613
FFFC41FC 00660633
FFFC4200 00060283
                        	; 						return (ch);
FFFC4204 0002E833		      	mov      	$v0,$s2
FFFC4208 BE000EE3		      	bra      	DBGKeybd_65
                        	DBGKeybd_109:
                        	; 					else if (KeyState2 & 0x04) { // control ?
FFFC420C 00025637		      	ldb      	$t1,_KeyState2
FFFC4210 82560613
FFFC4214 00060633
FFFC4218 00060D83
FFFC421C 004DFD13		      	and      	$t0,$t1,#4
FFFC4220 000D0E63		      	beq      	$t0,$x0,DBGKeybd_111
                        	; 						ch = keybdControlCodes[sc];
FFFC4224 FFFC3637		      	ldb      	$s2,_keybdControlCodes[$s3]
FFFC4228 70060613
FFFC422C 00660633
FFFC4230 00060283
                        	; 						return (ch);
FFFC4234 0002E833		      	mov      	$v0,$s2
FFFC4238 BC0006E3		      	bra      	DBGKeybd_65
                        	DBGKeybd_111:
                        	; 					else if (KeyState2 & 0x01) { // shifted ?
FFFC423C 00025637		      	ldb      	$t1,_KeyState2
FFFC4240 82560613
FFFC4244 00060633
FFFC4248 00060D83
FFFC424C 001DFD13		      	and      	$t0,$t1,#1
FFFC4250 000D0E63		      	beq      	$t0,$x0,DBGKeybd_113
                        	; 						ch = shiftedScanCodes[sc];
FFFC4254 FFFC3637		      	ldb      	$s2,_shiftedScanCodes[$s3]
FFFC4258 60060613
FFFC425C 00660633
FFFC4260 00060283
                        	; 						return (ch);
FFFC4264 0002E833		      	mov      	$v0,$s2
FFFC4268 B8000EE3		      	bra      	DBGKeybd_65
                        	DBGKeybd_113:
                        	; 						ch = unshiftedScanCodes[sc];
FFFC426C FFFC3637		      	ldb      	$s2,_unshiftedScanCodes[$s3]
FFFC4270 50060613
FFFC4274 00660633
FFFC4278 00060283
                        	; 						return (ch);
FFFC427C 0002E833		      	mov      	$v0,$s2
FFFC4280 B80002E3		      	bra      	DBGKeybd_65
                        	DBGKeybd_108:
                        	DBGKeybd_106:
                        	DBGKeybd_79:
FFFC4284 B2000CE3		      	bra      	DBGKeybd_66
                        	endpublic
                        	
                        	.file "TinyBasic.r5a",84
                        			code
FFFC4288 00000000			align	25
FFFC428C 00000000
FFFC4290 00000000
FFFC4294 00000000
FFFC4298 00000000
FFFC429C 00000000
FFFC42A0 00000000
FFFC42A4 00000000
FFFC42A8 00000000
FFFC42AC 00000000
FFFC42B0 00000000
FFFC42B4 00000000
FFFC42B8 00000000
FFFC42BC 00000000
FFFC42C0 00000000
FFFC42C4 00000000
FFFC42C8 00000000
FFFC42CC 00000000
FFFC42D0 00000000
FFFC42D4 00000000
FFFC42D8 00000000
FFFC42DC 00000000
FFFC42E0 00000000
FFFC42E4 00000000
FFFC42E8 00000000
FFFC42EC 00000000
FFFC42F0 00000000
FFFC42F4 00000000
FFFC42F8 00000000
FFFC42FC 00000000
                        	
                        	;
                        	; Standard jump table. You can change these addresses if you are
                        	; customizing this interpreter for a different environment.
                        	;
                        	TinyBasic:
                        	GOSTART:	
FFFC4300 0300006F			jmp	CSTART	;	Cold Start entry point
                        	GOWARM:	
FFFC4304 1200006F			jmp	WSTART	;	Warm Start entry point
                        	GOOUT:	
FFFC4308 17C0206F			jmp	OUTC	;	Jump to character-out routine
                        	GOIN:	
FFFC430C 17C0206F			jmp	INCH	;Jump to character-in routine
                        	GOAUXO:	
FFFC4310 00000637			jmp	AUXOUT	;	Jump to auxiliary-out routine
FFFC4314 2C560067
                        	GOAUXI:	
FFFC4318 00000637			jmp	AUXIN	;	Jump to auxiliary-in routine
FFFC431C 2C760067
                        	GOBYE:	
FFFC4320 1980206F			jmp	BYEBYE	;	Jump to monitor, DOS, etc.
                        	
FFFC4324 00000000		align	1
FFFC4328 00000000
FFFC432C 00000000
                        	
                        	//message "CSTART"
FFFC4330 CECFC0EF	public CSTART:
	call	DumpMemmap
                        		; First save off the link register and OS sp value
FFFC4334 00030637		sto		$sp,OSSP
FFFC4338 00060613
FFFC433C 00060633
FFFC4340 00E63023
FFFC4344 AFFFC737		ldi		$sp,#STACKOFFS	; initialize stack pointer
FFFC4348 00070713
FFFC434C 00E06913		ldi		$a0,#14							; Get current tid
FFFC4350 00000073		ecall
FFFC4354 0008E9B3		mov		$a1,$v1
FFFC4358 01806913		ldi		$a0,#24							; RequestIOFocus
FFFC435C 00000073		ecall
                        	;	call	_DBGHomeCursor[pc]
FFFC4360 00006933		mov		a0,r0			; turn off keyboard echoing
                        	//	call	SetKeyboardEcho
                        	//	stz		CursorFlash
                        	//	ldx		#0x10000020	; black chars, yellow background
                        	;	stx		charToPrint
                        	;	call	_DBGClearScreen[pc]
FFFC4364 FFFC6937		ldi		a0,#msgInit	;	tell who we are
FFFC4368 4CC90913
FFFC436C 71D010EF		call	PRMESG
FFFC4370 00032937		ldi		a0,#TXTBGN	;	init. end-of-program pointer
FFFC4374 80090913
FFFC4378 00030637		sw		a0,TXTUNF
FFFC437C 00460613
FFFC4380 00060633
FFFC4384 01262023
FFFC4388 00040937		ldi		a0,#ENDMEM	;	get address of end of memory
FFFC438C FFC90913
FFFC4390 00080937		ldi		a0,#$7F800
FFFC4394 80090913
FFFC4398 00030637		sw		a0,STKBOT
FFFC439C 09C60613
FFFC43A0 00060633
FFFC43A4 01262023
FFFC43A8 00040937		ldi		a0,#ENDMEM
FFFC43AC FFC90913
FFFC43B0 00030637		sw		a0,VAREND
FFFC43B4 00C60613
FFFC43B8 00060633
FFFC43BC 01262023
FFFC43C0 CE090913		sub		a0,a0,#800 	;   100 vars
FFFC43C4 00030637		sw    a0,VARBGN
FFFC43C8 00860613
FFFC43CC 00060633
FFFC43D0 01262023
FFFC43D4 598000EF		call  clearVars   ; clear the variable area
FFFC43D8 00030637		sw		r0,IRQROUT
FFFC43DC 0A460613
FFFC43E0 00060633
FFFC43E4 00062023
FFFC43E8 00030637		lw    a0,VARBGN   ; calculate number of bytes free
FFFC43EC 00860613
FFFC43F0 00060633
FFFC43F4 00062903
FFFC43F8 00030637		lw		a1,TXTUNF
FFFC43FC 00460613
FFFC4400 00060633
FFFC4404 00062983
FFFC4408 41390933		sub   a0,a0,a1
FFFC440C 00606993		ldi		a1,#6		; max 6 digits
FFFC4410 00A06A13		ldi		a2,#10	; base 10
FFFC4414 399010EF		call  PRTNUM
FFFC4418 FFFC6937		ldi		a0,#msgBytesFree
FFFC441C 56D90913
FFFC4420 669010EF		call	PRMESG
                        	WSTART:
FFFC4424 00030637		sw		x0,LOPVAR   ; initialize internal variables
FFFC4428 01060613
FFFC442C 00060633
FFFC4430 00062023
FFFC4434 00030637		sw		x0,STKGOS
FFFC4438 01460613
FFFC443C 00060633
FFFC4440 00062023
FFFC4444 00030637		sw		x0,CURRNT	;	current line number pointer = 0
FFFC4448 01860613
FFFC444C 00060633
FFFC4450 00062023
FFFC4454 AFFFC737		ldi		$sp,#STACKOFFS	;	init S.P. again, just in case
FFFC4458 00070713
FFFC445C FFFC6937		ldi		a0,#msgReady	;	display "Ready"
FFFC4460 57A90913
FFFC4464 625010EF		call	PRMESG
                        	BASPRMPT:
FFFC4468 00E06913		ldi		a0,#14		; get current tid
FFFC446C 00000073		ecall
FFFC4470 0008E933		mov		a0,v1
FFFC4474 AE8FC0EF		call	PutHexByte
FFFC4478 03E06913		ldi		a0,#'>'		; Prompt with a '>' and
FFFC447C 758010EF		call	GETLN		; read a line.
FFFC4480 555010EF		call	TOUPBUF 	; convert to upper case
FFFC4484 000E64B3		mov		$s6,$t2		; save pointer to end of line
FFFC4488 00030E37		ldi		$t2,#BUFFER	; point to the beginning of line
FFFC448C 01CE0E13
FFFC4490 4A1010EF		call	TSTNUM		; is there a number there?
FFFC4494 511010EF		call	IGNBLK		; skip trailing blanks
FFFC4498 000E4483		lbu		$s6,[$t2]
FFFC449C 00D4C493		xor		$s6,$s6,#CR	; s6 = flag empty line
                        	; does line no. exist? (or nonzero?)
FFFC44A0 2C088063		beq		v1,x0,DIRECT		; if not, it's a direct statement
FFFC44A4 00100DB7		ldi		$t1,#$FFFFF
FFFC44A8 FFFD8D93
FFFC44AC 010DD863		ble		v0,$t1,ST2	; see if line no. is <= 16 bits
FFFC44B0 FFFC6937		ldi		a0,#msgLineRange	; if not, we've overflowed
FFFC44B4 59590913
FFFC44B8 6C00106F		jmp		ERROR
                        	ST2:
FFFC44BC 00086933	  mov		$a0,$v0		; a0 = line number
FFFC44C0 000E6433	  mov		$s5,$t2			; save line buffer pointer
FFFC44C4 FFCE0E13		sub		$t2,$t2,#4
FFFC44C8 012E2023	  sw		$a0,[$t2]		;	This will end up in buffer
FFFC44CC 015010EF		call	FNDLN		; find this line in save area
FFFC44D0 000EE533		mov		$s7,$t3		; save possible line pointer
FFFC44D4 00080663		beq		$v0,$x0,INSLINE	; if not found, insert
FFFC44D8 000EE933		mov		$a0,$t3
FFFC44DC 044000EF		call	DeleteLine
                        	INSLINE:
FFFC44E0 F80484E3		beq		$s6,$x0,BASPRMPT	; line was empty
FFFC44E4 00046933		mov		$a0,$s5			; a0 = buffer pointer	
                        		; GetBuflen just get the length of the text.
                        		; A line number is stuffed just before the text
                        		; so length needs to be adjusted by 4.
FFFC44E8 0B8000EF		call	GetBuflen
FFFC44EC 00480393		add		$s4,$v0,#4
FFFC44F0 00056933		mov		$a0,$s7
FFFC44F4 0003E9B3		mov		$a1,$s4
FFFC44F8 0D4000EF		call	OpenSpace
FFFC44FC 00081863		bne		$v0,$x0,.0001	; space available?
FFFC4500 FFFC6937		ldi		a0,#msgTooBig	; no space available
FFFC4504 66790913
FFFC4508 6700106F		jmp		ERROR
                        	.0001:
FFFC450C 00056933		mov		$a0,$s7			; target
FFFC4510 FFC40993		sub		$a1,$s5,#4	; source (incl lineno)
FFFC4514 0003EA33		mov		$a2,$s4			; length
FFFC4518 068000EF		call	InsertLine
FFFC451C F40006E3		bra		BASPRMPT
                        	
                        	;------------------------------------------------------------------------------
                        	; Parameters:
                        	;		a0 = pointer to line to delete
                        	; Modifies:
                        	;		t0,t1,t2,t3
                        	; Returns:
                        	;		none
                        	;------------------------------------------------------------------------------
                        	
                        	DeleteLine:
                        		; Find the end of the line to delete
FFFC4520 00490D13		add		$t0,$a0,#4		; t0 = pointer to line past line number
FFFC4524 00D06E13		ldi		$t2,#CR
FFFC4528 00030637		lw		$t3,TXTUNF		; last text address
FFFC452C 00460613
FFFC4530 00060633
FFFC4534 00062E83
                        	.0002:
FFFC4538 000D4D83		lbu		$t1,[$t0]
FFFC453C 000D8A63		beq		$t1,$x0,.0003	; might be null
FFFC4540 01CD8663		beq		$t1,$t2,.0001	; lines end with CR
FFFC4544 001D0D13		add		$t0,$t0,#1
FFFC4548 FFDD68E3		bltu	$t0,$t3,.0002	; end of program?
                        	.0001:
FFFC454C 001D0D13		add		$t0,$t0,#1
                        	.0003:
                        		; pull text after eol overtop
FFFC4550 000D4F03		lbu		$t4,[$t0]			; copy from next line
FFFC4554 01E90023		sb		$t4,[$a0]			; overtop deleted line
FFFC4558 001D0D13		add		$t0,$t0,#1		; increment pointers
FFFC455C 00190913		add		$a0,$a0,#1
FFFC4560 FFAEF8E3		bleu	$t0,$t3,.0003	; to end of program
                        		; update end of text
FFFC4564 412D0933		sub		$a0,$t0,$a0		; difference of pointers = length
FFFC4568 412E8EB3		sub		$t3,$t3,$a0		
FFFC456C 00030637		sw		$t3,TXTUNF
FFFC4570 00460613
FFFC4574 00060633
FFFC4578 01D62023
FFFC457C 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Parameters:
                        	; 	a0 = insertion point
                        	; 	a1 = source buffer
                        	; 	a2 = length
                        	; Modifies:
                        	;		a0,a1,a2,t1
                        	; Returns:
                        	;		none
                        	;------------------------------------------------------------------------------
                        	
                        	InsertLine:
FFFC4580 000A0E63		beq		$a2,$x0,.done		; zero length? Probably a SW error
                        	.0001:
FFFC4584 0009CD83		lbu		$t1,[$a1]				; get from source text
FFFC4588 01B90023		sb		$t1,[$a0]				; store to insertion point
FFFC458C 00198993		add		$a1,$a1,#1			; increment pointers
FFFC4590 00190913		add		$a0,$a0,#1
FFFC4594 FFFA0A13		sub		$a2,$a2,#1			; decrement length
FFFC4598 FF4066E3		bgtu	$a2,$x0,.0001
                        	.done:
FFFC459C 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; GetBuflen - get the length of text in a buffer. The length is taken up to
                        	; the first null character or carriage return character encountered.
                        	;
                        	; Parameters:
                        	;		a0 = pointer to buffer
                        	; Modifies:
                        	;		t2,t3,t5
                        	; Returns:
                        	;		v0 = length of data in buffer
                        	;------------------------------------------------------------------------------
                        	
                        	GetBuflen:
FFFC45A0 00006813		ldi		$v0,#0
FFFC45A4 00D06E93		ldi		$t3,#CR
FFFC45A8 00096FB3		mov		$t5,$a0
                        	.0002:
FFFC45AC 000FCE03		lbu		$t2,[$t5]
FFFC45B0 001F8F93		add		$t5,$t5,#1
FFFC45B4 000E0A63		beq		$t2,$x0,.0001
FFFC45B8 01DE0663		beq		$t2,$t3,.0004
FFFC45BC 00180813		add		$v0,$v0,#1
FFFC45C0 FE0006E3		bra		.0002
                        	.0004:
FFFC45C4 00180813		add		$v0,$v0,#1
                        	.0001:
FFFC45C8 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	; Parameters:
                        	; 	a0 = place to insert line
                        	; 	a1 = buffer length
                        	; Modifies:
                        	;		t1,t2,t3,t5
                        	; Returns:
                        	;		v0 = 1 if successful, 0 if not enough room available
                        	;------------------------------------------------------------------------------
                        	
                        	OpenSpace:
FFFC45CC 00030637		lw		$t2,TXTUNF
FFFC45D0 00460613
FFFC45D4 00060633
FFFC45D8 00062E03
FFFC45DC 000E6EB3		mov		$t3,$t2				; t3 = old end of text
FFFC45E0 013E0E33		add		$t2,$t2,$a1		; increment end of text by buffer length
FFFC45E4 00030637		lw		$t1,VARBGN		; compare to start of variables
FFFC45E8 00860613
FFFC45EC 00060633
FFFC45F0 00062D83
FFFC45F4 03BE7863		bgeu	$t2,$t1,.noSpace	; enough room?
FFFC45F8 00030637		sw		$t2,TXTUNF		; yes, set new end of text
FFFC45FC 00460613
FFFC4600 00060633
FFFC4604 01C62023
                        	.0003:
FFFC4608 000ECF83		lbu		$t5,[$t3]			; copy old text
FFFC460C 01FE0023		sb		$t5,[$t2]			; to new text loc
FFFC4610 FFFE8E93		sub		$t3,$t3,#1		; decrement pointers
FFFC4614 FFFE0E13		sub		$t2,$t2,#1
FFFC4618 FF2EF8E3		bgeu	$t3,$a0,.0003	; until insert point reached
FFFC461C 00106813		ldi		$v0,#1				; return success
FFFC4620 00008067		ret
                        	.noSpace:
FFFC4624 00006813		ldi		$v0,#0
FFFC4628 00008067		ret	
                        	
                        	;******************************************************************
                        	;
                        	; *** Tables *** DIRECT *** EXEC ***
                        	;
                        	; This section of the code tests a string against a table. When
                        	; a match is found, control is transferred to the section of
                        	; code according to the table.
                        	;
                        	; At 'EXEC', r8 should point to the string, r9 should point to
                        	; the character table, and r10 should point to the execution
                        	; table. At 'DIRECT', r8 should point to the string, r9 and
                        	; r10 will be set up to point to TAB1 and TAB1_1, which are
                        	; the tables of all direct and statement commands.
                        	;
                        	; A '.' in the string will terminate the test and the partial
                        	; match will be considered as a match, e.g. 'P.', 'PR.','PRI.',
                        	; 'PRIN.', or 'PRINT' will all match 'PRINT'.
                        	;
                        	; There are two tables: the character table and the execution
                        	; table. The character table consists of any number of text items.
                        	; Each item is a string of characters with the last character's
                        	; high bit set to one. The execution table holds a 32-bit
                        	; execution addresses that correspond to each entry in the
                        	; character table.
                        	;
                        	; The end of the character table is a 0 byte which corresponds
                        	; to the default routine in the execution table, which is
                        	; executed if none of the other table items are matched.
                        	;
                        	; Character-matching tables:
                        	TAB1:
FFFC462C D453494C		db	"LIS",'T'+0x80        ; Direct commands
FFFC4630 C4414F4C		db	"LOA",'D'+0x80
FFFC4634 52D7454E		db	"NE",'W'+0x80
FFFC4637 53CE5552		db	"RU",'N'+0x80
FFFC463A C5564153		db	"SAV",'E'+0x80
                        	TAB2:
FFFC463E D458454E		db	"NEX",'T'+0x80         ; Direct / statement
FFFC4642 49D4454C		db	"LE",'T'+0x80
FFFC4645 4F47C649		db	"I",'F'+0x80
FFFC4647 CF544F47		db	"GOT",'O'+0x80
FFFC464B 55534F47		db	"GOSU",'B'+0x80
FFFC464F 544552C2
FFFC4650 55544552		db	"RETUR",'N'+0x80
FFFC4654 4552CE52
FFFC4656 46CD4552		db	"RE",'M'+0x80
FFFC4659 49D24F46		db	"FO",'R'+0x80
FFFC465C 55504E49		db	"INPU",'T'+0x80
FFFC4660 495250D4
FFFC4661 4E495250		db	"PRIN",'T'+0x80
FFFC4665 4B4F50D4
FFFC4666 C54B4F50		db	"POK",'E'+0x80
FFFC466A 454B4F50		db	"POKE",'W'+0x80
FFFC466E 4B4F50D7
FFFC466F 454B4F50		db	"POKE",'H'+0x80
FFFC4673 454959C8
FFFC4674 4C454959		db	"YIEL",'D'+0x80
FFFC4678 4F5453C4
FFFC4679 D04F5453		db	"STO",'P'+0x80
FFFC467D 53C55942		db	"BY",'E'+0x80
FFFC4680 43D35953		db	"SY",'S'+0x80
FFFC4683 43D34C43		db	"CL",'S'+0x80
FFFC4686 52D24C43	    db  "CL",'R'+0x80
FFFC4689 C6434452	    db	"RDC",'F'+0x80
FFFC468D 52494E4F	    db	"ONIR",'Q'+0x80
FFFC4691 494157D1
FFFC4692 D4494157	    db	"WAI",'T'+0x80
FFFC4696 45455000		db	0
                        	TAB4:
FFFC4697 CB454550		db	"PEE",'K'+0x80         ;Functions
FFFC469B 4B454550		db	"PEEK",'W'+0x80
FFFC469F 454550D7
FFFC46A0 4B454550		db	"PEEK",'H'+0x80
FFFC46A4 C44E52C8
FFFC46A5 41C44E52		db	"RN",'D'+0x80
FFFC46A8 53D34241		db	"AB",'S'+0x80
FFFC46AB 54CE4753		db  "SG",'N'+0x80
FFFC46AE CB434954		db	"TIC",'K'+0x80
FFFC46B2 C55A4953		db	"SIZ",'E'+0x80
FFFC46B6 41D25355		db  "US",'R'+0x80
FFFC46B9 4F4C4C41	  db	"ALLOCMB",'X'+0x80
FFFC46BD D8424D43
FFFC46C1 444E4553	  db	"SENDMS",'G'+0x80
FFFC46C5 57C7534D
FFFC46C8 54494157	  db	"WAITMS",'G'+0x80
FFFC46CC 00C7534D
FFFC46CF 00CF5400		db	0
                        	TAB5:
FFFC46D0 5300CF54		db	"T",'O'+0x80           ;"TO" in "FOR"
FFFC46D2 45545300		db	0
                        	TAB6:
FFFC46D3 D0455453		db	"STE",'P'+0x80         ;"STEP" in "FOR"
FFFC46D7 3CBD3E00		db	0
                        	TAB8:
FFFC46D8 BE3CBD3E		db	'>','='+0x80           ;Relational operators
FFFC46DA BDBEBE3C		db	'<','>'+0x80
FFFC46DC BD3CBDBE		db	'>'+0x80
FFFC46DD BCBD3CBD		db	'='+0x80
FFFC46DE 00BCBD3C		db	'<','='+0x80
FFFC46E0 4E4100BC		db	'<'+0x80
FFFC46E1 C44E4100		db	0
                        	TAB9:
FFFC46E2 00C44E41	    db  "AN",'D'+0x80
FFFC46E5 00D24F00	    db  0
                        	TAB10:
FFFC46E6 0000D24F	    db  "O",'R'+0x80
FFFC46E8 4A0C0000	    db  0
                        	
                        	;* Execution address tables:
                        	; We save some bytes by specifiying only the low order 16 bits of the address
                        	;
FFFC46E9 404A0C00		align	
                        	
                        	TAB1_1:
FFFC46EA 50404A0C		dh	LISTX			;Direct commands
FFFC46EC 47E85040		dh	LOAD3
FFFC46EE 481C47E8		dh	NEW
FFFC46F0 50A8481C		dh	RUN
FFFC46F2 4CBC50A8		dh	SAVE3
                        	TAB2_1:
FFFC46F4 4ED44CBC		dh	NEXT		;	Direct / statement
FFFC46F6 4D7C4ED4		dh	LET
FFFC46F8 49404D7C		dh	IF0
FFFC46FA 4B004940		dh	GOTO
FFFC46FC 4B744B00		dh	GOSUB
FFFC46FE 4D884B74		dh	RETURN
FFFC4700 4BDC4D88		dh	IF2			; REM
FFFC4702 4DD44BDC		dh	FOR
FFFC4704 4A604DD4		dh	INPUT
FFFC4706 521C4A60		dh	PRINT
FFFC4708 5248521C		dh	POKE
FFFC470A 52745248		dh	POKEW
FFFC470C 48105274		dh	POKEH
FFFC470E 48084810		dh	YIELD0
FFFC4710 43204808		dh	STOP
FFFC4712 52AC4320		dh	GOBYE
FFFC4714 031752AC		dh	SYSX
FFFC4716 49640317		dh	_cls
FFFC4718 03194964		dh  _clr
FFFC471A 49B00319		dh	_rdcf
FFFC471C 49F049B0		dh  ONIRQ
FFFC471E 4EC849F0		dh	WAITIRQ
FFFC4720 58EC4EC8		dh	DEFLT
                        	TAB4_1:
FFFC4722 590458EC		dh	PEEK			;Functions
FFFC4724 591C5904		dh	PEEKW
FFFC4726 5980591C		dh	PEEKH
FFFC4728 00005980		dh	RND
FFFC472A 5A140000		dh	ABS
FFFC472C 5A005A14		dh  SGN
FFFC472E 5A505A00		dh	TICKX
FFFC4730 59345A50		dh	SIZEX
FFFC4732 62A05934		dh  USRX
FFFC4734 631062A0		dh	ALLOCMBX
FFFC4736 63AC6310		dh	SENDMSG
FFFC4738 56A463AC		dh	WAITMSG
FFFC473A 4C0856A4		dh	XP40
                        	TAB5_1
FFFC473C 5B704C08		dh	FR1			;"TO" in "FOR"
FFFC473E 4C305B70		dh	QWHAT
                        	TAB6_1
FFFC4740 4C384C30		dh	FR2			;"STEP" in "FOR"
FFFC4742 545C4C38		dh	FR3
                        	TAB8_1
FFFC4744 5474545C		dh	XP11	;>=		Relational operators
FFFC4746 548C5474		dh	XP12	;<>
FFFC4748 54BC548C		dh	XP13	;>
FFFC474A 54A454BC		dh	XP15	;=
FFFC474C 54D454A4		dh	XP14	;<=
FFFC474E 551454D4		dh	XP16	;<
FFFC4750 536C5514		dh	XP17
                        	TAB9_1
FFFC4752 5380536C	    dh  XP_AND
FFFC4754 530C5380	    dh  XP_ANDX
                        	TAB10_1
FFFC4756 5320530C	    dh  XP_OR
FFFC4758 00005320	    dh  XP_ORX
                        	
                        	;*
                        	; r3 = match flag (trashed)
                        	; r9 = text table
                        	; r10 = exec table
                        	; r11 = trashed
FFFC475A 00000000		align	1
FFFC475E 4EB70000
                        	
                        	//message "DIRECT"
                        	DIRECT:
FFFC4760 FFFC4EB7		ldi		$t3,#TAB1
FFFC4764 62CE8E93
FFFC4768 FFFC4F37		ldi		$t4,#TAB1_1
FFFC476C 6EAF0F13
                        	EXEC:
FFFC4770 235010EF		call	IGNBLK		; ignore leading blanks
FFFC4774 000E6FB3		mov		$t5,$t2		; save the pointer
FFFC4778 000061B3		mov		r3,r0		; clear match flag
                        	EXLP:
FFFC477C 000E4903		lbu		a0,[$t2]		; get the program character
FFFC4780 001E0E13		add		$t2,$t2,#1
FFFC4784 000EC983		lbu		a1,[$t3]		; get the table character
FFFC4788 00099663		bne		a1,x0,EXNGO		; If end of table,
FFFC478C 000FEE33		mov		$t2,$t5		;	restore the text pointer and...
FFFC4790 04000263		bra		EXGO		;   execute the default.
                        	EXNGO:
FFFC4794 04390063		beq		a0,r3,EXGO	; Else check for period... if so, execute
FFFC4798 07F9F993		and		a1,a1,#0x7f	; ignore the table's high bit
FFFC479C 03298263		beq		a1,a0,EXMAT	;		is there a match?
FFFC47A0 002F0F13		add		$t4,$t4,#2	;if not, try the next entry
FFFC47A4 000FEE33		mov		$t2,$t5		; reset the program pointer
FFFC47A8 000061B3		mov		r3,x0		; sorry, no match
                        	EX1:
FFFC47AC 000EC903		lbu		a0,[$t3]		; get to the end of the entry
FFFC47B0 001E8E93		add		$t3,$t3,#1
FFFC47B4 08097D93		and		$t1,$a0,#$80
FFFC47B8 FE0D8AE3		beq		$t1,$r0,EX1	; test for bit 7 set
FFFC47BC FC0000E3		bra		EXLP		; back for more matching
                        	EXMAT:
FFFC47C0 02E06193		ldi		r3,#'.'		; we've got a match so far
FFFC47C4 000EC903		lbu		a0,[$t3]		; end of table entry?
FFFC47C8 001E8E93		add		$t3,$t3,#1
FFFC47CC 08097D93		and		$t1,$a0,#$80
FFFC47D0 FA0D86E3		beq		$t1,$r0,EXLP		; test for bit 7 set, if not, go back for more
                        	EXGO:
                        		; execute the appropriate routine
FFFC47D4 000F5903		lhu		a0,[$t4]	; get the low mid order byte
FFFC47D8 FFFC0637		or		a0,a0,#$FFFC0000	; add in ROM base
FFFC47DC 00060613
FFFC47E0 01266933
FFFC47E4 00090067		jmp		[a0]
                        	
                        	    
                        	;******************************************************************
                        	;
                        	; What follows is the code to execute direct and statement
                        	; commands. Control is transferred to these points via the command
                        	; table lookup code of 'DIRECT' and 'EXEC' in the last section.
                        	; After the command is executed, control is transferred to other
                        	; sections as follows:
                        	;
                        	; For 'LISTX', 'NEW', and 'STOP': go back to the warm start point.
                        	; For 'RUN': go execute the first stored line if any; else go
                        	; back to the warm start point.
                        	; For 'GOTO' and 'GOSUB': go execute the target line.
                        	; For 'RETURN' and 'NEXT'; go back to saved return line.
                        	; For all others: if 'CURRNT' is 0, go to warm start; else go
                        	; execute next command. (This is done in 'FINISH'.)
                        	;
                        	;******************************************************************
                        	;
                        	; *** NEW *** STOP *** RUN (& friends) *** GOTO ***
                        	;
                        	; 'NEW<CR>' sets TXTUNF to point to TXTBGN
                        	;
                        	
                        	NEW:
FFFC47E8 340010EF		call	ENDCHK
FFFC47EC 00032837		ldi		v0,#TXTBGN
FFFC47F0 80080813
FFFC47F4 00030637		sw		v0,TXTUNF	;	set the end pointer
FFFC47F8 00460613
FFFC47FC 00060633
FFFC4800 01062023
FFFC4804 168000EF		call  clearVars
                        	
                        	; 'STOP<CR>' goes back to WSTART
                        	;
                        	STOP:
FFFC4808 320010EF		call	ENDCHK
FFFC480C C19FF06F		jmp		WSTART		; WSTART will reset the stack
                        	
                        	;------------------------------------------------------------------------------
                        	; YIELD suspends execution of TinyBasic by switching to the next ready task.
                        	;------------------------------------------------------------------------------
                        	
                        	YIELD0:
FFFC4810 00D06913		ldi		a0,#13
FFFC4814 00000073		ecall
FFFC4818 2E00006F		jmp		FINISH
                        	
                        	;------------------------------------------------------------------------------
                        	; 'RUN<CR>' finds the first stored line, stores its address
                        	; in CURRNT, and starts executing it. Note that only those
                        	; commands in TAB2 are legal for a stored program.
                        	;
                        	; There are 3 more entries in 'RUN':
                        	; 'RUNNXL' finds next line, stores it's address and executes it.
                        	; 'RUNTSL' stores the address of this line and executes it.
                        	; 'RUNSML' continues the execution on same line.
                        	;
                        	RUN:
FFFC481C 30C010EF		call	ENDCHK
FFFC4820 00032E37		ldi		$t2,#TXTBGN	;	set pointer to beginning
FFFC4824 800E0E13
FFFC4828 00030637		sw		$t2,CURRNT
FFFC482C 01860613
FFFC4830 00060633
FFFC4834 01C62023
FFFC4838 134000EF		call  clearVars
                        	
                        	RUNNXL:					; RUN <next line>
FFFC483C 00030637		lw		$t2,CURRNT	; executing a program?
FFFC4840 01860613
FFFC4844 00060633
FFFC4848 00062E03
FFFC484C 000E1463		bne		$t2,x0,RUN3	; if not, we've finished a direct stat.
                        	RUN2:
FFFC4850 BD5FF06F		jmp		WSTART
                        	RUN3:
FFFC4854 00030637		lw		a0,IRQROUT		; are we handling IRQ's ?
FFFC4858 0A460613
FFFC485C 00060633
FFFC4860 00062903
FFFC4864 08090863		beq		a0,x0,RUN1
FFFC4868 00030637		lw		$t1,IRQFlag		; was there an IRQ ?
FFFC486C 0B460613
FFFC4870 00060633
FFFC4874 00062D83
FFFC4878 060D8E63		beq		$t1,x0,RUN1
FFFC487C 00030637		sw		x0,IRQFlag
FFFC4880 0B460613
FFFC4884 00060633
FFFC4888 00062023
FFFC488C 598010EF		call	PUSHA_		; the same code as a GOSUB
FFFC4890 FF470713		sub		$sp,$sp,#12
FFFC4894 00030637		lw		a0,STKGOS
FFFC4898 01460613
FFFC489C 00060633
FFFC48A0 00062903
FFFC48A4 01272023		sw		a0,[$sp]
FFFC48A8 00030637		lw		a0,CURRNT
FFFC48AC 01860613
FFFC48B0 00060633
FFFC48B4 00062903
FFFC48B8 01272223		sw		a0,4[$sp]
FFFC48BC 01C72423		sw		$t2,8[$sp]
FFFC48C0 00030637		sw		x0,LOPVAR		; load new values
FFFC48C4 01060613
FFFC48C8 00060633
FFFC48CC 00062023
FFFC48D0 00030637		sw		$sp,STKGOS
FFFC48D4 01460613
FFFC48D8 00060633
FFFC48DC 00E62023
FFFC48E0 00030637		lw		$t3,IRQROUT
FFFC48E4 0A460613
FFFC48E8 00060633
FFFC48EC 00062E83
FFFC48F0 02000263		bra		RUNTSL
                        	RUN1:
FFFC48F4 000E6EB3		mov		$t3,$t2
FFFC48F8 00006933		mov		a0,x0
FFFC48FC 404010EF		call	FNDLNP		; else find the next line number
FFFC4900 00030637		lw		$t1,TXTUNF	; if we've fallen off the end, stop
FFFC4904 00460613
FFFC4908 00060633
FFFC490C 00062D83
FFFC4910 F5BEF0E3		bgeu	$t3,$t1,RUN2
                        	
                        	RUNTSL:					; RUN <this line>
FFFC4914 00030637		sw		$t3,CURRNT	; set CURRNT to point to the line no.
FFFC4918 01860613
FFFC491C 00060633
FFFC4920 01D62023
FFFC4924 004E8E13		add		$t2,$t3,#4	; set the text pointer to
                        	
                        	RUNSML:                 ; RUN <same line>
FFFC4928 131010EF		call	CHKIO		; see if a control-C was pressed
FFFC492C FFFC4EB7		ldi		$t3,#TAB2		; find command in TAB2
FFFC4930 63EE8E93
FFFC4934 FFFC4F37		ldi		$t4,#TAB2_1
FFFC4938 6F4F0F13
FFFC493C E35FF06F		jmp		EXEC		; and execute it
                        	
                        	
                        	;******************************************************************
                        	; 'GOTO expr<CR>' evaluates the expression, finds the target
                        	; line, and jumps to 'RUNTSL' to do it.
                        	;******************************************************************
                        	;
                        	GOTO:
FFFC4940 199000EF		call	OREXPR		;evaluate the following expression
FFFC4944 000862B3		mov   r5,v0
FFFC4948 1E0010EF		call 	ENDCHK		;must find end of line
FFFC494C 0002E933		mov   a0,r5
FFFC4950 390010EF		call 	FNDLN		; find the target line
FFFC4954 FC0810E3		bne		v0,x0,RUNTSL; go do it
FFFC4958 FFFC6937		ldi		a0,#msgBadGotoGosub
FFFC495C 63590913
FFFC4960 2180106F		jmp		ERROR		; no such line no.
                        	
                        	_clr:
FFFC4964 008000EF	    call    clearVars
FFFC4968 1900006F	    jmp     FINISH
                        	
                        	; Clear the variable area of memory
                        	clearVars:
FFFC496C FF870713		sub		$sp,$sp,#8
FFFC4970 00672023		sw		r6,[$sp]
FFFC4974 00172223		sw		$ra,4[$sp]
FFFC4978 06406313	  ldi   r6,#100    	; number of word pairs to clear
FFFC497C 00030637	  lw    v0,VARBGN
FFFC4980 00860613
FFFC4984 00060633
FFFC4988 00062803
                        	.cv1:
FFFC498C 00082023	  sw		x0,[$v0]		; variable name
FFFC4990 00082223	  sw		x0,4[$v0]		; and value
FFFC4994 00880813	  add		v0,v0,#8
FFFC4998 FFF30313	  sub		r6,r6,#1
FFFC499C FE6048E3		bgt		r6,x0,.cv1
FFFC49A0 00072303	  lw		r6,[$sp]
FFFC49A4 00472083	  lw		$ra,4[$sp]
FFFC49A8 00870713	  add		$sp,$sp,#8
FFFC49AC 00008067	  ret
                        	
                        	;******************************************************************
                        	; ONIRQ <line number>
                        	; ONIRQ sets up an interrupt handler which acts like a specialized
                        	; subroutine call. ONIRQ is coded like a GOTO that never executes.
                        	;******************************************************************
                        	;
                        	ONIRQ:
FFFC49B0 129000EF		call	OREXPR		;evaluate the following expression
FFFC49B4 000862B3		mov   r5,v0
FFFC49B8 170010EF		call 	ENDCHK		;must find end of line
FFFC49BC 0002E933		mov   a0,r5
FFFC49C0 320010EF		call 	FNDLN		; find the target line
FFFC49C4 00081C63		bne		v0,r0,ONIRQ1
FFFC49C8 00030637		sw		x0,IRQROUT
FFFC49CC 0A460613
FFFC49D0 00060633
FFFC49D4 00062023
FFFC49D8 1200006F		jmp		FINISH
                        	ONIRQ1:
FFFC49DC 00030637		sw		$t3,IRQROUT
FFFC49E0 0A460613
FFFC49E4 00060633
FFFC49E8 01D62023
FFFC49EC 10C0006F		jmp		FINISH
                        	
                        	WAITIRQ:
FFFC49F0 069010EF		call	CHKIO		; see if a control-C was pressed
FFFC49F4 00030637		lw		$t1,IRQFlag
FFFC49F8 0B460613
FFFC49FC 00060633
FFFC4A00 00062D83
FFFC4A04 FE0D86E3		beq		$t1,x0,WAITIRQ
FFFC4A08 0F00006F		jmp		FINISH
                        	
                        	
                        	;******************************************************************
                        	; LIST
                        	;
                        	; LISTX has two forms:
                        	; 'LIST<CR>' lists all saved lines
                        	; 'LIST #<CR>' starts listing at the line #
                        	; Control-S pauses the listing, control-C stops it.
                        	;******************************************************************
                        	;
                        	LISTX:
FFFC4A0C 724010EF		call		TSTNUM		; see if there's a line no.
FFFC4A10 000862B3		mov      r5,v0
FFFC4A14 114010EF		call		ENDCHK		; if not, we get a zero
FFFC4A18 0002E933		mov      a0,r5
FFFC4A1C 2C4010EF		call		FNDLN		; find this or next line
                        	LS1:
FFFC4A20 00081C63		bne		v0,r0,LS4
                        	LS5:
FFFC4A24 00030637		lw		$t1,TXTUNF
FFFC4A28 00460613
FFFC4A2C 00060633
FFFC4A30 00062D83
FFFC4A34 9FBEF8E3		bgeu	$t3,$t1,WSTART	; warm start if we passed the end
                        	LS4:
FFFC4A38 000EE933		mov		a0,$t3
FFFC4A3C 64C010EF		call	PRTLN		; print the line
FFFC4A40 00086EB3		mov		$t3,$v0		; set pointer for next
FFFC4A44 015010EF		call	CHKIO		; check for listing halt request
FFFC4A48 00080A63		beq		v0,x0,LS3
FFFC4A4C 01306D93		ldi		$t1,#CTRLS
FFFC4A50 01B81663		bne		v0,$t1,LS3; pause the listing?
                        	LS2:
FFFC4A54 005010EF		call 	CHKIO		; if so, wait for another keypress
FFFC4A58 FE080EE3		beq		v0,r0,LS2
                        	LS3:
                        	;	mov		$v0,$x0
FFFC4A5C FC0004E3		bra		LS5
                        	;	mov		a0,r0
                        	;	call	FNDSKP	;FNDLNP		; find the next line
                        	;	bra		LS1
                        	
                        	
                        	;******************************************************************
                        	; PRINT command is 'PRINT ....:' or 'PRINT ....<CR>'
                        	; where '....' is a list of expressions, formats, back-arrows,
                        	; and strings.	These items a separated by commas.
                        	;
                        	; A format is a pound sign followed by a number.  It controls
                        	; the number of spaces the value of an expression is going to
                        	; be printed in.  It stays effective for the rest of the print
                        	; command unless changed by another format.  If no format is
                        	; specified, 11 positions will be used.
                        	;
                        	; A string is quoted in a pair of single- or double-quotes.
                        	;
                        	; An underline (back-arrow) means generate a <CR> without a <LF>
                        	;
                        	; A <CR LF> is generated after the entire list has been printed
                        	; or if the list is empty.  If the list ends with a semicolon,
                        	; however, no <CR LF> is generated.
                        	;******************************************************************
                        	;
                        	PRINT:
FFFC4A60 00B06293		ldi		r5,#11		; D4 = number of print spaces
FFFC4A64 680010EF		call	TSTC		; if null list and ":"
FFFC4A68 0000003A		dw		':'
FFFC4A6C 00000663		bra		PR2
FFFC4A70 011010EF		call	CRLF		; give CR-LF and continue
FFFC4A74 EB5FF06F		jmp		RUNSML		;		execution on the same line
                        	PR2:
FFFC4A78 66C010EF		call	TSTC		;if null list and <CR>
FFFC4A7C 0000000D		dw		CR
FFFC4A80 00000663		bra		PR0
FFFC4A84 7FC010EF		call	CRLF		;also give CR-LF and
FFFC4A88 DB5FF06F		jmp		RUNNXL		;execute the next line
                        	PR0:
FFFC4A8C 658010EF		call	TSTC		;else is it a format?
FFFC4A90 00000023		dw		'#'
FFFC4A94 00000863		bra		PR1
FFFC4A98 041000EF		call	OREXPR		; yes, evaluate expression
FFFC4A9C 000862B3		mov		r5,v0	; and save it as print width
FFFC4AA0 02000263		bra		PR3		; look for more to print
                        	PR1:
FFFC4AA4 640010EF		call	TSTC	;	is character expression? (MRL)
FFFC4AA8 00000024		dw		'$'
FFFC4AAC 00000863		bra		PR4
FFFC4AB0 029000EF		call	OREXPR	;	yep. Evaluate expression (MRL)
FFFC4AB4 855FF0EF		call	GOOUT	;	print low byte (MRL)
FFFC4AB8 00000663		bra		PR3		;look for more. (MRL)
                        	PR4:
FFFC4ABC 45C010EF		call	QTSTG	;	is it a string?
                        		; the following branch must occupy only 1 word!
FFFC4AC0 02000063		bra		PR8		;	if not, must be an expression
                        	PR3:
FFFC4AC4 620010EF		call		TSTC	;	if ",", go find next
FFFC4AC8 0000002C		dw		','
FFFC4ACC 00000663		bra		PR6
FFFC4AD0 01C010EF		call		FIN		;in the list.
FFFC4AD4 FA000CE3		bra		PR0
                        	PR6:
FFFC4AD8 7A8010EF		call		CRLF		;list ends here
FFFC4ADC 01C0006F		jmp		FINISH
                        	PR8:
FFFC4AE0 7F8000EF		call	OREXPR		; evaluate the expression
FFFC4AE4 00086933		mov		a0,v0
FFFC4AE8 00506993		ldi		a1,#5		; set the width
FFFC4AEC 00A06A13		ldi		a2,#10
FFFC4AF0 4BC010EF		call	PRTNUM		; print its value
FFFC4AF4 FC0008E3		bra		PR3			; more to print?
                        	
                        	
                        	FINISH:
FFFC4AF8 7F5000EF		call	FIN		; Check end of command
FFFC4AFC 0740106F		jmp		QWHAT	; print "What?" if wrong
                        	
                        	
                        	;*******************************************************************
                        	;
                        	; *** GOSUB *** & RETURN ***
                        	;
                        	; 'GOSUB expr:' or 'GOSUB expr<CR>' is like the 'GOTO' command,
                        	; except that the current text pointer, stack pointer, etc. are
                        	; saved so that execution can be continued after the subroutine
                        	; 'RETURN's.  In order that 'GOSUB' can be nested (and even
                        	; recursive), the save area must be stacked.  The stack pointer
                        	; is saved in 'STKGOS'.  The old 'STKGOS' is saved on the stack.
                        	; If we are in the main routine, 'STKGOS' is zero (this was done
                        	; in the initialization section of the interpreter), but we still
                        	; save it as a flag for no further 'RETURN's.
                        	;******************************************************************
                        	;
                        	GOSUB:
FFFC4B00 324010EF		call	PUSHA_		; save the current 'FOR' parameters
FFFC4B04 7D4000EF		call	OREXPR		; get line number
FFFC4B08 00086933		mov		$a0,$v0
FFFC4B0C 1D4010EF		call	FNDLN		; find the target line
FFFC4B10 00081863		bne		v0,r0,gosub1
FFFC4B14 FFFC6937		ldi		a0,#msgBadGotoGosub
FFFC4B18 63590913
FFFC4B1C 05C0106F		jmp		ERROR		; if not there, say "How?"
                        	gosub1:
FFFC4B20 FF470713		sub		$sp,$sp,#12
FFFC4B24 00030637		lw		a0,STKGOS	; 'STKGOS'
FFFC4B28 01460613
FFFC4B2C 00060633
FFFC4B30 00062903
FFFC4B34 01272023		sw		a0,[$sp]
FFFC4B38 00030637		lw		a0,CURRNT	; found it, save old 'CURRNT'...
FFFC4B3C 01860613
FFFC4B40 00060633
FFFC4B44 00062903
FFFC4B48 01272223		sw		a0,4[$sp]
FFFC4B4C 01C72423		sw		$t2,8[$sp]
FFFC4B50 00030637		sw		$x0,LOPVAR		; load new values
FFFC4B54 01060613
FFFC4B58 00060633
FFFC4B5C 00062023
FFFC4B60 00030637		sw		$sp,STKGOS
FFFC4B64 01460613
FFFC4B68 00060633
FFFC4B6C 00E62023
FFFC4B70 DA5FF06F		jmp		RUNTSL
                        	
                        	
                        	;******************************************************************
                        	; 'RETURN<CR>' undoes everything that 'GOSUB' did, and thus
                        	; returns the execution to the command after the most recent
                        	; 'GOSUB'.  If 'STKGOS' is zero, it indicates that we never had
                        	; a 'GOSUB' and is thus an error.
                        	;******************************************************************
                        	;
                        	RETURN:
FFFC4B74 7B5000EF		call	ENDCHK		; there should be just a <CR>
FFFC4B78 00030637		lw		a1,STKGOS		; get old stack pointer
FFFC4B7C 01460613
FFFC4B80 00060633
FFFC4B84 00062983
FFFC4B88 00099863		bne		a1,x0,return1
FFFC4B8C FFFC6937		ldi		a0,#msgRetWoGosub
FFFC4B90 65190913
FFFC4B94 7E50006F		jmp		ERROR		; if zero, it doesn't exist
                        	return1:
FFFC4B98 0009E733		mov		$sp,a1		; else restore it
FFFC4B9C 00072903		lw		a0,[$sp]
FFFC4BA0 00470713		add		$sp,$sp,#4
FFFC4BA4 00030637		sw		a0,STKGOS	; and the old 'STKGOS'
FFFC4BA8 01460613
FFFC4BAC 00060633
FFFC4BB0 01262023
FFFC4BB4 00072903		lw		a0,[$sp]
FFFC4BB8 00470713		add		$sp,$sp,#4
FFFC4BBC 00030637		sw		a0,CURRNT	; and the old 'CURRNT'
FFFC4BC0 01860613
FFFC4BC4 00060633
FFFC4BC8 01262023
FFFC4BCC 00072E03		lw		$t2,[$sp]	; and the old text pointer
FFFC4BD0 00470713		add		$sp,$sp,#4
FFFC4BD4 1DC010EF		call	POPA_		;and the old 'FOR' parameters
FFFC4BD8 F21FF06F		jmp		FINISH		;and we are back home
                        	
                        	;******************************************************************
                        	; *** FOR *** & NEXT ***
                        	;
                        	; 'FOR' has two forms:
                        	; 'FOR var=exp1 TO exp2 STEP exp1' and 'FOR var=exp1 TO exp2'
                        	; The second form means the same thing as the first form with a
                        	; STEP of positive 1.  The interpreter will find the variable 'var'
                        	; and set its value to the current value of 'exp1'.  It also
                        	; evaluates 'exp2' and 'exp1' and saves all these together with
                        	; the text pointer, etc. in the 'FOR' save area, which consists of
                        	; 'LOPVAR', 'LOPINC', 'LOPLMT', 'LOPLN', and 'LOPPT'.  If there is
                        	; already something in the save area (indicated by a non-zero
                        	; 'LOPVAR'), then the old save area is saved on the stack before
                        	; the new values are stored.  The interpreter will then dig in the
                        	; stack and find out if this same variable was used in another
                        	; currently active 'FOR' loop.  If that is the case, then the old
                        	; 'FOR' loop is deactivated. (i.e. purged from the stack)
                        	;******************************************************************
                        	;
                        	FOR:
FFFC4BDC 248010EF		call	PUSHA_		; save the old 'FOR' save area
FFFC4BE0 6A5000EF		call	SETVAL		; set the control variable
FFFC4BE4 00030637		sw		v0,LOPVAR		; save its address
FFFC4BE8 01060613
FFFC4BEC 00060633
FFFC4BF0 01062023
FFFC4BF4 FFFC4EB7		ldi		$t3,#TAB5
FFFC4BF8 6D0E8E93
FFFC4BFC FFFC4F37		ldi		$t4,#TAB5_1	; use 'EXEC' to test for 'TO'
FFFC4C00 73CF0F13
FFFC4C04 B6DFF06F		jmp		EXEC
                        	FR1:
FFFC4C08 6D0000EF		call	OREXPR		; evaluate the limit
FFFC4C0C 00030637		sw		v0,LOPLMT	; save that
FFFC4C10 07C60613
FFFC4C14 00060633
FFFC4C18 01062023
FFFC4C1C FFFC4EB7		ldi		$t3,#TAB6
FFFC4C20 6D3E8E93
FFFC4C24 FFFC4F37		ldi		$t4,#TAB6_1	; use 'EXEC' to test for the word 'STEP
FFFC4C28 740F0F13
FFFC4C2C B45FF06F		jmp		EXEC
                        	FR2:
FFFC4C30 6A8000EF		call	OREXPR		; found it, get the step value
FFFC4C34 00000463		bra		FR4
                        	FR3:
FFFC4C38 00106813		ldi		v0,#1		; not found, step defaults to 1
                        	FR4:
FFFC4C3C 00030637		sw		v0,LOPINC	; save that too
FFFC4C40 07860613
FFFC4C44 00060633
FFFC4C48 01062023
                        	FR5:
FFFC4C4C 00030637		lw		a1,CURRNT
FFFC4C50 01860613
FFFC4C54 00060633
FFFC4C58 00062983
FFFC4C5C 00030637		sw		a1,LOPLN	; save address of current line number
FFFC4C60 07460613
FFFC4C64 00060633
FFFC4C68 01362023
FFFC4C6C 00030637		sw		$t2,LOPPT	; and text pointer
FFFC4C70 07060613
FFFC4C74 00060633
FFFC4C78 01C62023
FFFC4C7C 000761B3		mov		r3,$sp		; dig into the stack to find 'LOPVAR'
FFFC4C80 00030637		lw		r6,LOPVAR
FFFC4C84 01060613
FFFC4C88 00060633
FFFC4C8C 00062303
FFFC4C90 00000463		bra		FR7
                        	FR6:
FFFC4C94 01418193		add		r3,r3,#20	; look at next stack frame
                        	FR7:
FFFC4C98 0001A983		lw		a1,[r3]		; is it zero?
FFFC4C9C 00098E63		beq		a1,x0,FR8	; if so, we're done
FFFC4CA0 FE699AE3		bne		a1,r6,FR6	; same as current LOPVAR? nope, look some more
                        	
FFFC4CA4 0001E933	  mov		a0,r3	   ; Else remove 5 words from...
FFFC4CA8 000769B3		mov		a1,$sp
FFFC4CAC 01418A13		add		a2,r3,#20  ; inside the stack.
FFFC4CB0 0F8010EF		call	MVDOWN
FFFC4CB4 01470713		add		$sp,$sp,#20	; set the SP 5 long words up
                        	;	lw		a0,[$sp]		; ???
                        	;	add		$sp,$sp,#4
                        	FR8:
FFFC4CB8 E41FF06F	  jmp	    FINISH		; and continue execution
                        	
                        	
                        	;******************************************************************
                        	; 'NEXT var' serves as the logical (not necessarily physical) end
                        	; of the 'FOR' loop.  The control variable 'var' is checked with
                        	; the 'LOPVAR'.  If they are not the same, the interpreter digs in
                        	; the stack to find the right one and purges all those that didn't
                        	; match.  Either way, it then adds the 'STEP' to that variable and
                        	; checks the result with against the limit value.  If it is within
                        	; the limit, control loops back to the command following the
                        	; 'FOR'.  If it's outside the limit, the save area is purged and
                        	; execution continues.
                        	;******************************************************************
                        	;
                        	NEXT:
FFFC4CBC 00006933		mov		a0,x0		; don't allocate it
FFFC4CC0 259000EF		call	TSTV		; get address of variable
FFFC4CC4 00081863		bne		v0,x0,NX4
FFFC4CC8 FFFC6937		ldi		a0,#msgNextVar
FFFC4CCC 61290913
FFFC4CD0 6A0004E3		bra		ERROR		; if no variable, say "What?"
                        	NX4:
FFFC4CD4 00086EB3		mov		$t3,v0	; save variable's address
                        	NX0:
FFFC4CD8 00030637		lw		a0,LOPVAR	; If 'LOPVAR' is zero, we never...
FFFC4CDC 01060613
FFFC4CE0 00060633
FFFC4CE4 00062903
FFFC4CE8 00091863		bne		a0,x0,NX5	; had a FOR loop
FFFC4CEC FFFC6937		ldi		a0,#msgNextFor
FFFC4CF0 60090913
FFFC4CF4 680002E3		bra		ERROR
                        	NX5:
FFFC4CF8 01D90663		beq		a0,$t3,NX2	; else we check them OK, they agree
FFFC4CFC 0B4010EF		call	POPA_		; nope, let's see the next frame
FFFC4D00 FC000CE3		bra		NX0
                        	NX2:
FFFC4D04 000EA903		lw		a0,[$t3]		; get control variable's value
FFFC4D08 00030637		lw		a1,LOPINC
FFFC4D0C 07860613
FFFC4D10 00060633
FFFC4D14 00062983
FFFC4D18 01390933		add		a0,a0,a1	; add in loop increment
                        	;	BVS.L	QHOW		say "How?" for 32-bit overflow
FFFC4D1C 012EA023		sw		a0,[$t3]		; save control variable's new value
FFFC4D20 00030637		lw		r3,LOPLMT	; get loop's limit value
FFFC4D24 07C60613
FFFC4D28 00060633
FFFC4D2C 00062183
FFFC4D30 0009D663		bge		a1,x0,NX1	; check loop increment, branch if loop increment is positive
FFFC4D34 04394063		blt		a0,r3,NXPurge	; test against limit
FFFC4D38 00000463		bra     NX3
                        	NX1:
FFFC4D3C 0321CC63		bgt		a0,r3,NXPurge
                        	NX3:
FFFC4D40 00030637		lw		$t2,LOPLN	; Within limit, go back to the...
FFFC4D44 07460613
FFFC4D48 00060633
FFFC4D4C 00062E03
FFFC4D50 00030637		sw		$t2,CURRNT
FFFC4D54 01860613
FFFC4D58 00060633
FFFC4D5C 01C62023
FFFC4D60 00030637		lw		$t2,LOPPT	; saved 'CURRNT' and text pointer.
FFFC4D64 07060613
FFFC4D68 00060633
FFFC4D6C 00062E03
FFFC4D70 D89FF06F		jmp		FINISH
                        	NXPurge:
FFFC4D74 03C010EF	  call    POPA_        ; purge this loop
FFFC4D78 D81FF06F	  jmp     FINISH
                        	
                        	
                        	;******************************************************************
                        	; *** REM *** IF *** INPUT *** LET (& DEFLT) ***
                        	;
                        	; 'REM' can be followed by anything and is ignored by the
                        	; interpreter.
                        	;
                        	;REM
                        	;    br	    IF2		    ; skip the rest of the line
                        	; 'IF' is followed by an expression, as a condition and one or
                        	; more commands (including other 'IF's) separated by colons.
                        	; Note that the word 'THEN' is not used.  The interpreter evaluates
                        	; the expression.  If it is non-zero, execution continues.  If it
                        	; is zero, the commands that follow are ignored and execution
                        	; continues on the next line.
                        	;******************************************************************
                        	;
                        	IF0:
FFFC4D7C 55C000EF	  call	OREXPR		; evaluate the expression
                        	IF1:
FFFC4D80 00080463	  beq	  v0,x0,IF2	; is it zero? if not, continue
FFFC4D84 BA5FF06F	  jmp		RUNSML
                        	IF2:
FFFC4D88 000E6EB3	  mov		$t3,$t2	; set lookup pointer
FFFC4D8C 00006933		mov		a0,x0		; find line #0 (impossible)
FFFC4D90 7DD000EF		call	FNDSKP		; if so, skip the rest of the line
FFFC4D94 00081463		bne		v0,x0,IF3; if no next line, do a warm start
FFFC4D98 E8CFF06F		jmp		WSTART
                        	IF3:
FFFC4D9C B79FF06F		jmp		RUNTSL		; run the next line
                        	
                        	
                        	;******************************************************************
                        	; INPUT is called first and establishes a stack frame
                        	INPERR:
FFFC4DA0 00030637		lw		$sp,STKINP		; restore the old stack pointer
FFFC4DA4 09860613
FFFC4DA8 00060633
FFFC4DAC 00062703
FFFC4DB0 00072903		lw		a0,[$sp]
FFFC4DB4 00470713		add		$sp,$sp,#4
FFFC4DB8 00030637		sw		a0,CURRNT		; and old 'CURRNT'
FFFC4DBC 01860613
FFFC4DC0 00060633
FFFC4DC4 01262023
FFFC4DC8 00072E03		lw		$t2,[$sp]		; and old text pointer
FFFC4DCC 00470713		add		$sp,$sp,#4
FFFC4DD0 01470713		add		$sp,$sp,#20	; fall through will subtract 20
                        	
                        	; 'INPUT' is like the 'PRINT' command, and is followed by a list
                        	; of items.  If the item is a string in single or double quotes,
                        	; or is an underline (back arrow), it has the same effect as in
                        	; 'PRINT'.  If an item is a variable, this variable name is
                        	; printed out followed by a colon, then the interpreter waits for
                        	; an expression to be typed in.  The variable is then set to the
                        	; value of this expression.  If the variable is preceeded by a
                        	; string (again in single or double quotes), the string will be
                        	; displayed followed by a colon.  The interpreter the waits for an
                        	; expression to be entered and sets the variable equal to the
                        	; expression's value.  If the input expression is invalid, the
                        	; interpreter will print "What?", "How?", or "Sorry" and reprint
                        	; the prompt and redo the input.  The execution will not terminate
                        	; unless you press control-C.  This is handled in 'INPERR'.
                        	;
                        	INPUT:
FFFC4DD4 FEC70713		sub		$sp,$sp,#20	; allocate five words on stack
FFFC4DD8 00572823		sw		r5,16[$sp]	; save off r5 into stack var
                        	IP6:
FFFC4DDC 01C72023		sw		$t2,[$sp]	; save in case of error
FFFC4DE0 138010EF		call	QTSTG		; is next item a string?
FFFC4DE4 00000C63		bra		IP2			; nope - this branch must take only 1 word
FFFC4DE8 00106913		ldi		a0,#1		; allocate var
FFFC4DEC 12D000EF		call	TSTV		; yes, but is it followed by a variable?
FFFC4DF0 0A090E63		beq    a0,r0,IP4   ; if not, brnch
FFFC4DF4 00096F33		mov		$t4,a0		; put away the variable's address
FFFC4DF8 04000063		bra		IP3			; if so, input to variable
                        	IP2:
FFFC4DFC 01C72223		sw		$t2,4[$sp]	; save off in stack var for 'PRTSTG'
FFFC4E00 00106913		ldi		a0,#1
FFFC4E04 115000EF		call	TSTV		; must be a variable now
FFFC4E08 00091A63		bne		a0,r0,IP7
FFFC4E0C FFFC6937		ldi		a0,#msgInputVar
FFFC4E10 5E490913
FFFC4E14 01470713		add		$sp,$sp,#20	; cleanup stack
FFFC4E18 560000E3		bra		ERROR		; "What?" it isn't?
                        	IP7:
FFFC4E1C 00096F33		mov		$t4,a0		; put away the variable's address
FFFC4E20 000E4283		lbu		r5,[$t2]		; get ready for 'PRTSTG' by null terminating
FFFC4E24 000E0023		sb		x0,[$t2]
FFFC4E28 000069B3		mov		a1,x0
FFFC4E2C 00472903		lw		a0,4[$sp]	; get back text pointer
FFFC4E30 080010EF		call	PRTSTG		; print string as prompt
FFFC4E34 005E0023		sb		r5,[$t2]		; un-null terminate
                        	IP3
FFFC4E38 01C72223		sw		$t2,4[$sp]	; save in case of error
FFFC4E3C 00030637		lw		a0,CURRNT
FFFC4E40 01860613
FFFC4E44 00060633
FFFC4E48 00062903
FFFC4E4C 01272423		sw		a0,8[$sp]	; also save 'CURRNT'
FFFC4E50 FFF06913		ldi		a0,#-1
FFFC4E54 00030637		sw		a0,CURRNT	; flag that we are in INPUT
FFFC4E58 01860613
FFFC4E5C 00060633
FFFC4E60 01262023
FFFC4E64 00030637		sw		$sp,STKINP	; save the stack pointer too
FFFC4E68 09860613
FFFC4E6C 00060633
FFFC4E70 00E62023
FFFC4E74 01E72623		sw		$t4,12[$sp]	; save the variable address
FFFC4E78 03A06913		ldi		a0,#':'		; print a colon first
FFFC4E7C 559000EF		call	GETLN		; then get an input line
FFFC4E80 00030E37		ldi		$t2,#BUFFER	; point to the buffer
FFFC4E84 01CE0E13
FFFC4E88 450000EF		call	OREXPR		; evaluate the input
FFFC4E8C 00C72F03		lw		$t4,12[$sp]	; restore the variable address
FFFC4E90 012F2023		sw		a0,[$t4]	; save value in variable
FFFC4E94 00872903		lw		a0,8[$sp]	; restore old 'CURRNT'
FFFC4E98 00030637		sw		a0,CURRNT
FFFC4E9C 01860613
FFFC4EA0 00060633
FFFC4EA4 01262023
FFFC4EA8 00472E03		lw		$t2,4[$sp]	; and the old text pointer
                        	IP4:
FFFC4EAC 238010EF		call	TSTC
FFFC4EB0 0000002C		dw		','
FFFC4EB4 00000463		bra		IP5
FFFC4EB8 F20002E3		bra		IP6			; yes, more items
                        	IP5:
FFFC4EBC 01072283		lw		r5,16[$sp]
FFFC4EC0 01470713		add		$sp,$sp,#20	; cleanup stack
FFFC4EC4 C35FF06F	 	jmp		FINISH
                        	
                        	
                        	DEFLT:
FFFC4EC8 000E4903	  lbu    	a0,[$t2]
FFFC4ECC 00D06D93	  ldi			$t1,#CR
FFFC4ED0 C3B904E3		beq	    a0,$t1,FINISH	    ; empty line is OK else it is 'LET'
                        	
                        	
                        	;******************************************************************
                        	; 'LET' is followed by a list of items separated by commas.
                        	; Each item consists of a variable, an equals sign, and an
                        	; expression.  The interpreter evaluates the expression and sets
                        	; the variable to that value.  The interpreter will also handle
                        	; 'LET' commands without the word 'LET'.  This is done by 'DEFLT'.
                        	;******************************************************************
                        	;
                        	LET:
FFFC4ED4 3B1000EF	  call	SETVAL		; do the assignment
FFFC4ED8 20C010EF		call	TSTC		; check for more 'LET' items
FFFC4EDC 0000002C		dw		','
FFFC4EE0 C19FF06F		jmp		FINISH
FFFC4EE4 FE0008E3		bra	    LET
                        	LT1:
FFFC4EE8 C11FF06F	  jmp	    FINISH		; until we are finished.
                        	
                        	
                        	;******************************************************************
                        	; *** LOAD *** & SAVE ***
                        	;
                        	; These two commands transfer a program to/from an auxiliary
                        	; device such as a cassette, another computer, etc.  The program
                        	; is converted to an easily-stored format: each line starts with
                        	; a colon, the line no. as 4 hex digits, and the rest of the line.
                        	; At the end, a line starting with an '@' sign is sent.  This
                        	; format can be read back with a minimum of processing time by
                        	; the RTF65002
                        	;******************************************************************
                        	;
                        	LOAD
FFFC4EEC 00032E37		ldi		$t2,#TXTBGN	; set pointer to start of prog. area
FFFC4EF0 800E0E13
FFFC4EF4 00D06913		ldi		a0,#CR		; For a CP/M host, tell it we're ready...
FFFC4EF8 C18FF0EF		call	GOAUXO		; by sending a CR to finish PIP command.
                        	LOD1:
FFFC4EFC C1CFF0EF		call	GOAUXI		; look for start of line
FFFC4F00 FF205EE3		ble		a0,r0,LOD1
FFFC4F04 04006D93		ldi		$t1,#'@'
FFFC4F08 03B90E63		beq		a0,$t1,LODEND	; end of program?
FFFC4F0C 01A06D93		ldi		$t1,#$1A
FFFC4F10 03B90A63		beq		a0,$t1,LODEND	; or EOF marker
FFFC4F14 03A06D93		ldi		$t1,#':'
FFFC4F18 FFB912E3		bne		a0,$t1,LOD1	; if not, is it start of line? if not, wait for it
FFFC4F1C 03C000EF		call	GCHAR		; get line number
FFFC4F20 012E2023		sw		a0,[$t2]		; store it
FFFC4F24 004E0E13		add		$t2,$t2,#4
                        	LOD2:
FFFC4F28 BF0FF0EF		call	GOAUXI		; get another text char.
FFFC4F2C FF205EE3		ble		a0,r0,LOD2
FFFC4F30 012E0023		sb		a0,[$t2]		; store it
FFFC4F34 001E0E13		add		$t2,$t2,#1
FFFC4F38 00D06D93		ldi		$t1,#CR
FFFC4F3C FFB916E3		bne		a0,$t1,LOD2		; is it the end of the line? if not, go back for more
FFFC4F40 FA000EE3		bra		LOD1		; if so, start a new line
                        	LODEND:
FFFC4F44 00030637		sw		$t2,TXTUNF	; set end-of program pointer
FFFC4F48 00460613
FFFC4F4C 00060633
FFFC4F50 01C62023
FFFC4F54 CD0FF06F		jmp		WSTART		; back to direct mode
                        	
                        	
                        	; get character from input (32 bit value)
                        	GCHAR:
FFFC4F58 FF470713		sub		$sp,$sp,#12
FFFC4F5C 00572023		sw		r5,[$sp]
FFFC4F60 00672223		sw		r6,4[$sp]
FFFC4F64 00172423		sw		$ra,8[$sp]
FFFC4F68 00806313		ldi		r6,#8       ; repeat ten times
FFFC4F6C 00006293		ldi		r5,#0
                        	GCHAR1:
FFFC4F70 BA8FF0EF		call	GOAUXI		; get a char
FFFC4F74 FF205EE3		ble		a0,r0,GCHAR1
FFFC4F78 02C000EF		call	asciiToHex
FFFC4F7C 00429293		sll		r5,r5,#4
FFFC4F80 0122E2B3		or		r5,r5,a0
FFFC4F84 FFF30313		sub		r6,r6,#1
FFFC4F88 FE6064E3		bgtu	r6,r0,GCHAR1
FFFC4F8C 0002E933		mov		a0,r5
FFFC4F90 00072283		lw		r5,[$sp]
FFFC4F94 00472303		lw		r6,4[$sp]
FFFC4F98 00872083		lw		$ra,8[$sp]
FFFC4F9C 00C70713		add		$sp,$sp,#12
FFFC4FA0 00008067		ret
                        	
                        	; convert an ascii char to hex code
                        	; input
                        	;	a0 = char to convert
                        	
                        	asciiToHex:
FFFC4FA4 03906D93		ldi		$t1,#'9'
FFFC4FA8 012DF463		bleu	a0,$t1,a2h1; less than '9'
FFFC4FAC FF990913		sub		a0,a0,#7	; shift 'A' to '9'+1
                        	a2h1:
FFFC4FB0 FD090913		sub		a0,a0,#'0'
FFFC4FB4 00F97913		and		a0,a0,#15	; make sure a nybble
FFFC4FB8 00008067		ret
                        	
                        	GetFilename:
FFFC4FBC FFC70713		sub		$sp,$sp,#4
FFFC4FC0 00172023		sw		$ra,[$sp]
FFFC4FC4 120010EF		call	TSTC
FFFC4FC8 00000022		dw		'"'
FFFC4FCC 06000863		bra		gfn1
FFFC4FD0 000061B3		mov		r3,r0
                        	gfn2:
FFFC4FD4 000E4903		lbu		a0,[$t2]		; get text character
FFFC4FD8 001E0E13		add		$t2,$t2,#1
FFFC4FDC 02206D93		ldi		$t1,#'"'
FFFC4FE0 03B90863		beq		a0,$t1,gfn3
FFFC4FE4 02090663		beq		a0,r0,gfn3
FFFC4FE8 0003F637		sb		a0,FILENAME[r3]
FFFC4FEC 6C060613
FFFC4FF0 00360633
FFFC4FF4 01260023
FFFC4FF8 00118193		add		r3,r3,#1
FFFC4FFC 04006D93		ldi		$t1,#64
FFFC5000 FDB1EAE3		bltu	r3,$t1,gfn2
FFFC5004 00072083		lw		$ra,[$sp]
FFFC5008 00470713		add		$sp,$sp,#4
FFFC500C 00008067		ret
                        	gfn3:
FFFC5010 02006913		ldi		a0,#' '
FFFC5014 0003F637		sb		a0,FILENAME[r3]
FFFC5018 6C060613
FFFC501C 00360633
FFFC5020 01260023
FFFC5024 00118193		add		r3,r3,#1
FFFC5028 04006D93		ldi		$t1,#64
FFFC502C FFB1E2E3		bltu	r3,$t1,gfn3
FFFC5030 00072083		lw		$ra,[$sp]
FFFC5034 00470713		add		$sp,$sp,#4
FFFC5038 00008067		ret
                        	gfn1:
FFFC503C BE8FF06F		jmp		WSTART
                        	
                        	LOAD3:
FFFC5040 F7DFF0EF		call	GetFilename
FFFC5044 00000637		call	AUXIN_INIT
FFFC5048 39A600E7
FFFC504C EA1FF06F		jmp		LOAD
                        	
                        	;	call		OREXPR		;evaluate the following expression
                        	;	ld		a0,#5000
FFFC5050 000019B7		ldi		a1,#$E00
FFFC5054 E0098993
FFFC5058 00000637		call	SDReadSector
FFFC505C 39B600E7
FFFC5060 00190913		add		a0,a0,#1
FFFC5064 000329B7		ldi		a1,#TXTBGN
FFFC5068 80098993
                        	LOAD4:
FFFC506C FFC70713		sub		$sp,$sp,#4
FFFC5070 01272023		sw		a0,[$sp]
FFFC5074 00000637		call	SDReadSector
FFFC5078 39B600E7
FFFC507C 20098993		add		a1,a1,#512
FFFC5080 00072903		lw		a0,[$sp]
FFFC5084 00470713		add		$sp,$sp,#4
FFFC5088 00190913		add		a0,a0,#1
FFFC508C 00032237		ldi		r4,#TXTBGN
FFFC5090 80020213
FFFC5094 00010637		add		r4,r4,#65536
FFFC5098 00060613
FFFC509C 00460233
FFFC50A0 FC49C6E3		blt		a1,r4,LOAD4
                        	LOAD5:
FFFC50A4 B8000063		bra		WSTART
                        	
                        	
                        	SAVE3:
FFFC50A8 F15FF0EF		call	GetFilename
FFFC50AC 00000637		call	AUXOUT_INIT
FFFC50B0 39E600E7
FFFC50B4 0600006F		jmp		SAVE
                        	
FFFC50B8 220000EF		call	OREXPR		;evaluate the following expression
                        	;	lda		#5000		; starting sector
FFFC50BC 000019B7		ldi		a1,#$E00	; starting address to write
FFFC50C0 E0098993
FFFC50C4 00000637		call	SDWriteSector
FFFC50C8 3A0600E7
FFFC50CC 00190913		add		a0,a0,#1
FFFC50D0 000329B7		ldi		a1,#TXTBGN
FFFC50D4 80098993
                        	SAVE4:
FFFC50D8 FFC70713		sub		$sp,$sp,#4
FFFC50DC 01272023		sw		a0,[$sp]
FFFC50E0 00000637		call	SDWriteSector
FFFC50E4 3A0600E7
FFFC50E8 20098993		add		a1,a1,#512
FFFC50EC 00072903		lw		a0,[$sp]
FFFC50F0 00470713		add		$sp,$sp,#4
FFFC50F4 00190913		add		a0,a0,#1
FFFC50F8 00032237		ldi		r4,#TXTBGN
FFFC50FC 80020213
FFFC5100 00010637		add		r4,r4,#65536
FFFC5104 00060613
FFFC5108 00460233
FFFC510C FC49C6E3		blt		a1,r4,SAVE4
FFFC5110 B0000A63		bra		WSTART
                        	
                        	SAVE:
FFFC5114 00032E37		ldi		$t2,#TXTBGN	;set pointer to start of prog. area
FFFC5118 800E0E13
FFFC511C 00030637		lw		$t3,TXTUNF	;set pointer to end of prog. area
FFFC5120 00460613
FFFC5124 00060633
FFFC5128 00062E83
                        	SAVE1:
FFFC512C 054000EF		call	AUXOCRLF    ; send out a CR & LF (CP/M likes this)
FFFC5130 03CEC863		bgt		$t2,$t3,SAVEND; are we finished?
FFFC5134 03A06913		ldi		a0,#':'		; if not, start a line
FFFC5138 9D8FF0EF		call	GOAUXO
FFFC513C 000E2903		lw		a0,[$t2]		; get line number
FFFC5140 004E0E13		add		$t2,$t2,#4
FFFC5144 060000EF		call	PWORD       ; output line number as 5-digit hex
                        	SAVE2:
FFFC5148 000E4903		lbu		a0,[$t2]		; get a text char.
FFFC514C 001E0E13		add		$t2,$t2,#1
FFFC5150 00D06D93		ldi		$t1,#CR
FFFC5154 FDB90CE3		beq		a0,$t1,SAVE1	; is it the end of the line? if so, send CR & LF and start new line
FFFC5158 9B8FF0EF		call	GOAUXO		; send it out
FFFC515C FE0006E3		bra		SAVE2		; go back for more text
                        	SAVEND:
FFFC5160 04006913		ldi		a0,#'@'		; send end-of-program indicator
FFFC5164 9ACFF0EF		call	GOAUXO
FFFC5168 018000EF		call	AUXOCRLF    ; followed by a CR & LF
FFFC516C 01A06913		ldi		a0,#$1A		; and a control-Z to end the CP/M file
FFFC5170 9A0FF0EF		call	GOAUXO
FFFC5174 00000637		call	AUXOUT_FLUSH
FFFC5178 3A7600E7
FFFC517C AA000463		bra		WSTART		; then go do a warm start
                        	
                        	; output a CR LF sequence to auxillary output
                        	; Registers Affected
                        	;   r3 = LF
                        	AUXOCRLF:
FFFC5180 FFC70713		sub		$sp,$sp,#4
FFFC5184 00172023		sw		$ra,[$sp]
FFFC5188 00D06913	  ldi		a0,#CR
FFFC518C 984FF0EF	  call	GOAUXO
FFFC5190 00A06913	  ldi		a0,#LINEFD
FFFC5194 97CFF0EF	  call	GOAUXO
FFFC5198 00072083	  lw		$ra,[$sp]
FFFC519C 00470713	  add		$sp,$sp,#4
FFFC51A0 00008067	  ret
                        	
                        	
                        	; output a word in hex format
                        	; tricky because of the need to reverse the order of the chars
                        	PWORD:
FFFC51A4 FF870713		sub		$sp,$sp,#8
FFFC51A8 00572023		sw		r5,[$sp]
FFFC51AC 00172223		sw		$ra,4[$sp]
FFFC51B0 000302B7		ldi		r5,#NUMWKA+14
FFFC51B4 0A228293
FFFC51B8 00096233		mov		r4,a0		; r4 = value
                        	pword1:
FFFC51BC 00026933	  mov   a0,r4	    ; a0 = value
FFFC51C0 00425213	  srl		r4,r4,#4	; shift over to next nybble
FFFC51C4 040000EF	  call	toAsciiHex  ; convert LS nybble to ascii hex
FFFC51C8 01228023	  sb    a0,[r5]		; save in work area
FFFC51CC FFF28293	  sub		r5,r5,#1
FFFC51D0 00030DB7	  ldi		$t1,#NUMWKA
FFFC51D4 094D8D93
FFFC51D8 FFB2D2E3		bge		r5,$t1,pword1
                        	pword2:
FFFC51DC 00128293	  add		r5,r5,#1
FFFC51E0 0002C903	  lbu   a0,[r5]     ; get char to output
FFFC51E4 92CFF0EF		call	GOAUXO		; send it
FFFC51E8 00030DB7		ldi		$t1,#NUMWKA+14
FFFC51EC 0A2D8D93
FFFC51F0 FFB2C6E3		blt		r5,$t1,pword2
FFFC51F4 00072283		lw		r5,[$sp]
FFFC51F8 00472083		lw		$ra,4[$sp]
FFFC51FC 00870713		add		$sp,$sp,#8
FFFC5200 00008067		ret
                        	
                        	; convert nybble in a1 to ascii hex chaa1
                        	; a1 = character to convert
                        	
                        	toAsciiHex:
FFFC5204 00F97913		and		a0,a0,#15	; make sure it's a nybble
FFFC5208 00A06D93		ldi		$t1,#10
FFFC520C 01B94463		blt		a0,$t1,tah1	; > 10 ?
FFFC5210 00790913		add		a0,a0,#7	; bump it up to the letter 'A'
                        	tah1:
FFFC5214 03090913		add		a0,a0,#'0'	; bump up to ascii '0'
FFFC5218 00008067		ret
                        	
                        	
                        	;******************************************************************
                        	; *** POKE ***
                        	;
                        	; 'POKE expr1,expa1' stores the byte from 'expa1' into the memory
                        	; address specified by 'expr1'.
                        	; 'POKEW expr1,expa1' stores the word from 'expa1' into the memory
                        	; address specified by 'expr1'.
                        	; 'POKEH expr1,expa1' stores the half-word from 'expa1' into the memory
                        	; address specified by 'expr1'.
                        	;******************************************************************
                        	;
                        	POKE:
FFFC521C 0BC000EF		call	OREXPR		; get the memory address
FFFC5220 6C5000EF		call	TSTC		; it must be followed by a comma
FFFC5224 0000002C		dw		','
FFFC5228 06000C63		bra		PKER
FFFC522C FFC70713		sub		$sp,$sp,#4
FFFC5230 01272023		sw		a0,[$sp]	; save the address
FFFC5234 0A4000EF		call	OREXPR		; get the byte to be POKE'd
FFFC5238 00072983		lw		a1,[$sp]	; get the address back
FFFC523C 00470713		add		$sp,$sp,#4
FFFC5240 01298023		sb		a0,[a1]		; store the byte in memory
FFFC5244 8B5FF06F		jmp		FINISH
                        	
                        	POKEW:
FFFC5248 090000EF		call	OREXPR		; get the memory address
FFFC524C 699000EF		call	TSTC		; it must be followed by a comma
FFFC5250 0000002C		dw		','
FFFC5254 04000663		bra		PKER
FFFC5258 FFC70713		sub		$sp,$sp,#4
FFFC525C 01272023		sw		a0,[$sp]	; save the address
FFFC5260 078000EF		call	OREXPR		; get the byte to be POKE'd
FFFC5264 00072983		lw		a1,[$sp]	; get the address back
FFFC5268 00470713		add		$sp,$sp,#4
FFFC526C 0129A023		sw		a0,[a1]		; store the byte in memory
FFFC5270 889FF06F		jmp		FINISH
                        	
                        	POKEH:
FFFC5274 064000EF		call	OREXPR		; get the memory address
FFFC5278 66D000EF		call	TSTC		; it must be followed by a comma
FFFC527C 0000002C		dw		','
FFFC5280 02000063		bra		PKER
FFFC5284 FFC70713		sub		$sp,$sp,#4
FFFC5288 01272023		sw		a0,[$sp]	; save the address
FFFC528C 04C000EF		call	OREXPR		; get the byte to be POKE'd
FFFC5290 00072983		lw		a1,[$sp]	; get the address back
FFFC5294 00470713		add		$sp,$sp,#4
FFFC5298 01299023		sh		a0,[a1]		; store the byte in memory
FFFC529C 85DFF06F		jmp		FINISH
                        	
                        	PKER:
FFFC52A0 FFFC6937		ldi		a0,#msgComma
FFFC52A4 58290913
FFFC52A8 0D10006F		jmp		ERROR		; if no comma, say "What?"
                        	
                        	;******************************************************************
                        	; 'SYSX expr' jumps to the machine language subroutine whose
                        	; starting address is specified by 'expr'.  The subroutine can use
                        	; all registers but must leave the stack the way it found it.
                        	; The subroutine returns to the interpreter by executing an RTS.
                        	;******************************************************************
                        	
                        	SYSX:
FFFC52AC 02C000EF		call	OREXPR		; get the subroutine's address
FFFC52B0 00081863		bne		v0,r0,sysx1; make sure we got a valid address
FFFC52B4 FFFC6937		ldi		a0,#msgSYSBad
FFFC52B8 5D390913
FFFC52BC 0BD0006F		jmp		ERROR
                        	sysx1:
FFFC52C0 FFC70713		sub		$sp,$sp,#4
FFFC52C4 01C72023		stt		$t2,[$sp]	; save the text pointer
FFFC52C8 000800E7		call	[v0]			; jump to the subroutine
FFFC52CC 00072E03		ldt		$t2,[$sp]	; restore the text pointer
FFFC52D0 00470713		add		$sp,$sp,#4
FFFC52D4 825FF06F		jmp		FINISH
                        	
                        	;******************************************************************
                        	; *** EXPR ***
                        	;
                        	; 'EXPR' evaluates arithmetical or logical expressions.
                        	; <OREXPR>::= <ANDEXPR> OR <ANDEXPR> ...
                        	; <ANDEXPR>::=<EXPR> AND <EXPR> ...
                        	; <EXPR>::=<ADDEXPR>
                        	;	   <ADDEXPR><rel.op.><ADDEXPR>
                        	; where <rel.op.> is one of the operators in TAB8 and the result
                        	; of these operations is 1 if true and 0 if false.
                        	; <ADDEXPR>::=(+ or -)<MULEXPR>(+ or -)<MULEXPR>(...
                        	; where () are optional and (... are optional repeats.
                        	; <MULEXPR>::=<FUNCEXPR>( <* or /><FUNCEXPR> )(...
                        	; <FUNCEXPR>::=<variable>
                        	;	    <function>
                        	;	    (<EXPR>)
                        	; <EXPR> is recursive so that the variable '@' can have an <EXPR>
                        	; as an index, functions can have an <EXPR> as arguments, and
                        	; <FUNCEXPR> can be an <EXPR> in parenthesis.
                        	;
                        	
                        	; <OREXPR>::=<ANDEXPR> OR <ANDEXPR> ...
                        	;
                        	OREXPR:
FFFC52D8 FF470713		sub		$sp,$sp,#12
FFFC52DC 00172023		sw		$ra,[$sp]
FFFC52E0 00372223		sw		r3,4[$sp]
FFFC52E4 00472423		sw		r4,8[$sp]
FFFC52E8 058000EF		call	ANDEXPR		; get first <ANDEXPR>
                        	XP_OR1:
FFFC52EC FF870713		sub		$sp,$sp,#8
FFFC52F0 01072023		sw		$v0,[$sp]		; save <ANDEXPR> value
FFFC52F4 01172223		sw		$v1,4[$sp]	; save type
FFFC52F8 FFFC4EB7		ldi		$t3,#TAB10	; look up a logical operator
FFFC52FC 6E6E8E93
FFFC5300 FFFC4F37		ldi		$t4,#TAB10_1
FFFC5304 756F0F13
FFFC5308 C68FF06F		jmp		EXEC		; go do it
                        	XP_OR:
FFFC530C 034000EF	  call	ANDEXPR
FFFC5310 00072903	  lw		$a0,[$sp]
FFFC5314 00870713	  add		$sp,$sp,#8
FFFC5318 01286833	  or    v0,v0,a0
FFFC531C FC0008E3	  bra   XP_OR1
                        	XP_ORX:
FFFC5320 00072803	  lw		$v0,[$sp]
FFFC5324 00472883	  lw		$v1,4[$sp]
FFFC5328 00870713	  add		$sp,$sp,#8
FFFC532C 00072083		lw		$ra,[$sp]
FFFC5330 00472183		lw		r3,4[$sp]
FFFC5334 00872203		lw		r4,8[$sp]
FFFC5338 00C70713		add		$sp,$sp,#12
FFFC533C 00008067	  ret
                        	
                        	
                        	; <ANDEXPR>::=<EXPR> AND <EXPR> ...
                        	;
                        	ANDEXPR:
FFFC5340 FFC70713		sub		$sp,$sp,#4
FFFC5344 00172023		sw		$ra,[$sp]
FFFC5348 0E8000EF		call	EXPR		; get first <EXPR>
                        	XP_AND1:
FFFC534C FF870713		sub		$sp,$sp,#8
FFFC5350 01072023		sw		$v0,[$sp]		; save <EXPR> value
FFFC5354 01172223		sw		$v1,4[$sp]	; save type
FFFC5358 FFFC4EB7		ldi		$t3,#TAB9		; look up a logical operator
FFFC535C 6E2E8E93
FFFC5360 FFFC4F37		ldi		$t4,#TAB9_1
FFFC5364 752F0F13
FFFC5368 C08FF06F		jmp		EXEC		; go do it
                        	XP_AND:
FFFC536C 0C4000EF	  call	EXPR
FFFC5370 00072903	  lw		$a0,[$sp]
FFFC5374 00870713	  add		$sp,$sp,#8
FFFC5378 01287833	  and   v0,v0,a0
FFFC537C FC0008E3	  bra   XP_AND1
                        	XP_ANDX:
FFFC5380 00072803	  lw		$v0,[$sp]
FFFC5384 00472883	  lw		$v1,4[$sp]
FFFC5388 00870713	  add		$sp,$sp,#8
FFFC538C 00072083		lw		$ra,[$sp]
FFFC5390 00470713		add		$sp,$sp,#4
FFFC5394 00008067	  ret
                        	
                        	
                        	; Determine if the character is a digit
                        	;   Parameters
                        	;       a0 = char to test
                        	;   Returns
                        	;       a0 = 1 if digit, otherwise 0
                        	;
                        	isDigit:
FFFC5398 03006D93		ldi		$t1,#'0'
FFFC539C 01B94A63		blt		a0,$t1,isDigitFalse
FFFC53A0 03906D93		ldi		$t1,#'9'
FFFC53A4 012DC663		bgt		a0,$t1,isDigitFalse
FFFC53A8 00106813		ldi		v0,#1
FFFC53AC 00008067	  ret
                        	isDigitFalse:
FFFC53B0 00006833	  mov		v0,r0
FFFC53B4 00008067	  ret
                        	
                        	
                        	; Determine if the character is a alphabetic
                        	;   Parameters
                        	;       a0 = char to test
                        	;   Returns
                        	;       a0 = 1 if alpha, otherwise 0
                        	;
                        	isAlpha:
FFFC53B8 04106D93		ldi		$t1,#'A'
FFFC53BC 03B94263		blt		a0,$t1,isAlphaFalse
FFFC53C0 05A06D93		ldi		$t1,#'Z'
FFFC53C4 012DDA63		ble		a0,$t1,isAlphaTrue
FFFC53C8 06106D93		ldi		$t1,#'a'
FFFC53CC 01B94A63		blt		a0,$t1,isAlphaFalse
FFFC53D0 07A06D93		ldi		$t1,#'z'
FFFC53D4 012DC663		bgt		a0,$t1,isAlphaFalse
                        	isAlphaTrue:
FFFC53D8 00106813	  ldi		v0,#1
FFFC53DC 00008067	  ret
                        	isAlphaFalse:
FFFC53E0 00006833	  mov		v0,r0
FFFC53E4 00008067	  ret
                        	
                        	
                        	; Determine if the character is a alphanumeric
                        	;   Parameters
                        	;       a0 = char to test
                        	;   Returns
                        	;       a0 = 1 if alpha, otherwise 0
                        	;
                        	isAlnum:
FFFC53E8 FFC70713		sub		$sp,$sp,#4
FFFC53EC 00172023		sw		$ra,[$sp]
FFFC53F0 FA9FF0EF	  call	isDigit
FFFC53F4 00081463		bne		v0,r0,isDigitx	; if it is a digit
FFFC53F8 FC1FF0EF	  call  isAlpha
                        	isDigitx:
FFFC53FC 00072083		lw		$ra,[$sp]
FFFC5400 00470713		add		$sp,$sp,#4
FFFC5404 00008067	  ret
                        	
                        	FORCEFIT:
FFFC5408 03198263		beq		a1,v1,.0001				; types match
FFFC540C 00006D13		ldi		$t0,#0
FFFC5410 01A98663		beq		a1,$t0,.intAnd
                        	;	itof	$f1,$v0
FFFC5414 00106913		ldi		a0,#1
FFFC5418 00008067		ret
                        	.intAnd:
FFFC541C 00106D13		ldi		$t0,#1
FFFC5420 01A89663		bne		$v1,$t0,.0001
                        	;	itof	$f2,$a1
FFFC5424 00106993		ldi		$a1,#1
FFFC5428 00008067		ret
                        	.0001:
FFFC542C 00008067		ret
                        	
                        	EXPR:
FFFC5430 FFC70713		sub		$sp,$sp,#4
FFFC5434 00172023		sw		$ra,[$sp]
FFFC5438 11C000EF		call	ADDEXPR
FFFC543C FF870713		sub		$sp,$sp,#8				; save <ADDEXPR> value
FFFC5440 01072023		sw		v0,[$sp]
FFFC5444 01172223		sw		v1,4[$sp]					; save type
FFFC5448 FFFC4EB7		ldi		$t3,#TAB8		; look up a relational operator
FFFC544C 6D8E8E93
FFFC5450 FFFC4F37		ldi		$t4,#TAB8_1
FFFC5454 744F0F13
FFFC5458 B18FF06F		jmp		EXEC		; go do it
                        	XP11:
FFFC545C 00072903		lw		a0,[$sp]
FFFC5460 00472983		lw		a1,4[$sp]
FFFC5464 00870713		add		$sp,$sp,#8
FFFC5468 0C4000EF		call	XP18	; is it ">="?
FFFC546C 09095A63		bge		a0,v0,XPRT1	; no, return v0=1
FFFC5470 06000E63		bra		XPRT0	; else return v0=0
                        	XP12:
FFFC5474 00072903		lw		a0,[$sp]
FFFC5478 00472983		lw		a1,4[$sp]
FFFC547C 00870713		add		$sp,$sp,#8
FFFC5480 0AC000EF		call	XP18	; is it "<>"?
FFFC5484 07091E63		bne		a0,v0,XPRT1	; no, return a1=1
FFFC5488 06000263		bra		XPRT0	; else return a1=0
                        	XP13:
FFFC548C 00072903		lw		a0,[$sp]
FFFC5490 00472983		lw		a1,4[$sp]
FFFC5494 00870713		add		$sp,$sp,#8
FFFC5498 094000EF		call	XP18	; is it ">"?
FFFC549C 07284263		bgt		a0,v0,XPRT1	; no, return a1=1
FFFC54A0 04000663		bra		XPRT0	; else return a1=0
                        	XP14:
FFFC54A4 00072903		lw		a0,[$sp]
FFFC54A8 00472983		lw		a1,4[$sp]
FFFC54AC 00870713		add		$sp,$sp,#8
FFFC54B0 07C000EF		call	XP18	; is it "<="?
FFFC54B4 05285663		ble		a0,v0,XPRT1	; no, return a1=1
FFFC54B8 02000A63		bra		XPRT0	; else return a1=0
                        	XP15:
FFFC54BC 00072903		lw		a0,[$sp]
FFFC54C0 00472983		lw		a1,4[$sp]
FFFC54C4 00870713		add		$sp,$sp,#8
FFFC54C8 064000EF		call	XP18	; is it "="?
FFFC54CC 03090A63		beq		a0,v0,XPRT1	; if not, return a1=1
FFFC54D0 00000E63		bra		XPRT0	; else return a1=0
                        	XP16:
FFFC54D4 00072903		lw		a0,[$sp]
FFFC54D8 00472983		lw		a1,4[$sp]
FFFC54DC 00870713		add		$sp,$sp,#8
FFFC54E0 04C000EF		call	XP18	; is it "<"?
FFFC54E4 01094E63		blt		a0,v0,XPRT1	; if not, return a1=1
FFFC54E8 00000263		bra		XPRT0	; else return a1=0
                        	XPRT0:
FFFC54EC 00006833		mov		v0,x0   ; return a0=0 (false)
FFFC54F0 000068B3		mov		v1,x0		; type = int
FFFC54F4 00072083		lw		$ra,[$sp]
FFFC54F8 00470713		add		$sp,$sp,#4
FFFC54FC 00008067		ret
                        	XPRT1:
FFFC5500 00106813		ldi		v0,#1	; return a0=1 (true)
FFFC5504 00006893		ldi		v1,#0	; type = int
FFFC5508 00072083		lw		$ra,[$sp]
FFFC550C 00470713		add		$sp,$sp,#4
FFFC5510 00008067		ret
                        	
                        	XP17:				; it's not a rel. operator
FFFC5514 00072803		lw		v0,[$sp]; return a1=<ADDEXPR>
FFFC5518 00472883		lw		v1,4[$sp]
FFFC551C 00870713		add		$sp,$sp,#8
FFFC5520 00072083		lw		$ra,[$sp]
FFFC5524 00470713		add		$sp,$sp,#4
FFFC5528 00008067		ret
                        	
                        	XP18:
FFFC552C FF470713		sub		$sp,$sp,#12
FFFC5530 00172023		sw		$ra,[$sp]
FFFC5534 01072223		sw		v0,4[$sp]
FFFC5538 01172423		sw		v1,8[$sp]
FFFC553C 018000EF		call	ADDEXPR		; do a second <ADDEXPR>
FFFC5540 00472903		lw		a0,4[$sp]
FFFC5544 00872983		lw		a1,8[$sp]
FFFC5548 00072083		lw		$ra,[$sp]
FFFC554C 00C70713		add		$sp,$sp,#12
FFFC5550 00008067		ret
                        	
                        	; <ADDEXPR>::=(+ or -)<MULEXPR>(+ or -)<MULEXPR>(...
                        	//message "ADDEXPR"
                        	ADDEXPR:
FFFC5554 FFC70713		sub		$sp,$sp,#4
FFFC5558 00172023		sw		$ra,[$sp]
FFFC555C 389000EF		call	TSTC		; negative sign?
FFFC5560 0000002D		dw		'-'
FFFC5564 00000C63		bra		XP21
FFFC5568 00006833		mov		v0,r0		; yes, fake '0-'
FFFC556C FF870713		sub		$sp,$sp,#8
FFFC5570 01072023		sw		v0,[$sp]
FFFC5574 01172223		sw		v1,4[$sp]
FFFC5578 04000863		bra		XP26
                        	XP21:
FFFC557C 369000EF		call	TSTC		; positive sign? ignore it
FFFC5580 0000002B		dw		'+'
FFFC5584 00000263		bra		XP22
                        	XP22:
FFFC5588 064000EF		call	MULEXPR		; first <MULEXPR>
                        	XP23:
FFFC558C FF870713		sub		$sp,$sp,#8; yes, save the value
FFFC5590 01072023		sw		v0,[$sp]
FFFC5594 01172223		sw		v1,4[$sp]	; and type
FFFC5598 34D000EF		call	TSTC		; add?
FFFC559C 0000002B		dw		'+'
FFFC55A0 00000E63		bra		XP25
FFFC55A4 048000EF		call	MULEXPR		; get the second <MULEXPR>
                        	XP24:
FFFC55A8 00072903		lw		a0,[$sp]
FFFC55AC 00472983		lw		a1,4[$sp]
FFFC55B0 00870713		add		$sp,$sp,#8
FFFC55B4 01280833		add		v0,v0,a0	; add it to the first <MULEXPR>
                        	;	BVS.L	QHOW		brnch if there's an overflow
FFFC55B8 FC000AE3		bra		XP23		; else go back for more operations
                        	XP25:
FFFC55BC 329000EF		call	TSTC		; subtract?
FFFC55C0 0000002D		dw		'-'
FFFC55C4 00000863		bra		XP45
                        	XP26:
FFFC55C8 024000EF		call	MULEXPR		; get second <MULEXPR>
FFFC55CC 41000833		sub		v0,r0,v0	; change its sign
FFFC55D0 FC000CE3		bra		XP24		; and do an addition
                        	XP45:
FFFC55D4 00072803		lw		v0,[$sp]
FFFC55D8 00472883		lw		v1,4[$sp]
FFFC55DC 00870713		add		$sp,$sp,#8
FFFC55E0 00072083		lw		$ra,[$sp]
FFFC55E4 00470713		add		$sp,$sp,#4
FFFC55E8 00008067		ret
                        	
                        	
                        	; <MULEXPR>::=<FUNCEXPR>( <* or /><FUNCEXPR> )(...
                        	
                        	MULEXPR:
FFFC55EC FFC70713		sub		$sp,$sp,#4
FFFC55F0 00172023		sw		$ra,[$sp]
FFFC55F4 094000EF		call	FUNCEXPR		; get first <FUNCEXPR>
                        	XP31:
FFFC55F8 FF870713		sub		$sp,$sp,#8
FFFC55FC 01072023		sw		v0,[$sp]; yes, save that first result
FFFC5600 01172223		sw		v1,4[$sp]
FFFC5604 2E1000EF		call	TSTC		; multiply?
FFFC5608 0000002A		dw		'*'
FFFC560C 00000E63		bra		XP34
FFFC5610 078000EF		call	FUNCEXPR		; get second <FUNCEXPR>
FFFC5614 00072903		lw		a0,[$sp]
FFFC5618 00472983		lw		a1,4[$sp]
FFFC561C 00870713		add		$sp,$sp,#8
FFFC5620 03280833		mul		v0,v0,a0	; multiply the two
FFFC5624 FC000AE3		bra		XP31        ; then look for more terms
                        	XP34:
FFFC5628 2BD000EF		call	TSTC		; divide?
FFFC562C 0000002F		dw		'/'
FFFC5630 00000E63		bra		XP35
FFFC5634 054000EF		call	FUNCEXPR		; get second <FUNCEXPR>
FFFC5638 00072903		lw		a0,[$sp]
FFFC563C 00472983		lw		a1,4[$sp]
FFFC5640 00870713		add		$sp,$sp,#8
FFFC5644 03284833		div		v0,v0,a0	; do the division
FFFC5648 FA0008E3		bra		XP31		; go back for any more terms
                        	XP35:
FFFC564C 299000EF		call	TSTC
FFFC5650 00000025		dw		'%'
FFFC5654 00000E63		bra		XP47
FFFC5658 030000EF		call	FUNCEXPR
FFFC565C 00072903		lw		a0,[$sp]
FFFC5660 00472983		lw		a1,4[$sp]
FFFC5664 00870713		add		$sp,$sp,#8
FFFC5668 03286833		rem		v0,v0,a0
FFFC566C F80006E3		bra		XP31
                        	XP47:
FFFC5670 00072803		lw		v0,[$sp]
FFFC5674 00472883		lw		v1,4[$sp]
FFFC5678 00870713		add		$sp,$sp,#8
FFFC567C 00072083		lw		$ra,[$sp]
FFFC5680 00470713		add		$sp,$sp,#4
FFFC5684 00008067		ret
                        	
                        	
                        	; Functions are called through FUNCEXPR
                        	; <FUNCEXPR>::=<variable>
                        	;	    <function>
                        	;	    (<EXPR>)
                        	
                        	FUNCEXPR:
FFFC5688 FFC70713		sub		$sp,$sp,#4
FFFC568C 00172023		sw		$ra,[$sp]
FFFC5690 FFFC4EB7	  ldi		$t3,#TAB4		; find possible function
FFFC5694 697E8E93
FFFC5698 FFFC4F37	  ldi		$t4,#TAB4_1
FFFC569C 722F0F13
FFFC56A0 8D0FF06F		jmp		EXEC        ; branch to function which does subsequent ret for FUNCEXPR
                        	XP40:                   ; we get here if it wasn't a function
FFFC56A4 00006933		mov		a0,x0
FFFC56A8 070000EF		call	TSTV
FFFC56AC 00080A63		beq   v0,x0,XP41	; not a variable
FFFC56B0 00082803		lw		$v0,[$v0]		; if a variable, return its value in v0
FFFC56B4 00072083		lw		$ra,[$sp]
FFFC56B8 00470713		add		$sp,$sp,#4
FFFC56BC 00008067		ret
                        	XP41:
FFFC56C0 271000EF		call	TSTNUM		; or is it a number?
FFFC56C4 00089463		bne		v1,x0,XP46	; (if not, # of digits will be zero) if so, return it in v0
FFFC56C8 010000EF		call	PARN        ; check for (EXPR)
                        	XP46:
FFFC56CC 00072083		lw		$ra,[$sp]
FFFC56D0 00470713		add		$sp,$sp,#4
FFFC56D4 00008067		ret
                        	
                        	
                        	; Check for a parenthesized expression
                        	PARN:
FFFC56D8 FFC70713		sub		$sp,$sp,#4
FFFC56DC 00172023		sw		$ra,[$sp]	
FFFC56E0 205000EF		call	TSTC		; else look for ( OREXPR )
FFFC56E4 00000028		dw		'('
FFFC56E8 02000063		bra		XP43
FFFC56EC BEDFF0EF		call	OREXPR
FFFC56F0 1F5000EF		call	TSTC
FFFC56F4 00000029		dw		')'
FFFC56F8 00000863		bra		XP43
                        	XP42:
FFFC56FC 00072083		lw		$ra,[$sp]
FFFC5700 00470713		add		$sp,$sp,#4
FFFC5704 00008067		ret
                        	XP43:
FFFC5708 00470713		add		$sp,$sp,#4		; get rid of return address
FFFC570C FFFC6937		ldi		a0,#msgWhat
FFFC5710 50890913
FFFC5714 4640006F		jmp		ERROR
                        	
                        	
                        	; ===== Test for a valid variable name.  Returns Z=1 if not
                        	;	found, else returns Z=0 and the address of the
                        	;	variable in a0.
                        	; Parameters
                        	;		a0 = 1 = allocate if not found
                        	; Returns
                        	;		v0 = address of variable, zero if not found
                        	
                        	TSTV:
FFFC5718 FF870713		sub		$sp,$sp,#8
FFFC571C 00572023		sw		r5,[$sp]
FFFC5720 00172223		sw		$ra,4[$sp]
FFFC5724 000962B3		mov		r5,a0		; r5=allocate flag
FFFC5728 27D000EF		call	IGNBLK
FFFC572C 000E4903		lbu		a0,[$t2]		; look at the program text
FFFC5730 04006D93		ldi		$t1,#'@'
FFFC5734 07B94863		blt		a0,$t1,tstv_notfound	; C=1: not a variable
FFFC5738 05B91463		bne		a0,$t1,TV1				; brnch if not "@" array
FFFC573C 001E0E13		add		$t2,$t2,#1	; If it is, it should be
FFFC5740 F99FF0EF		call	PARN		; followed by (EXPR) as its index.
                        	;	BCS.L	QHOW		say "How?" if index is too big
FFFC5744 00000263		bra		TV3
                        	TV3:
FFFC5748 FFC70713		sub		$sp,$sp,#4	; save the index
FFFC574C 01072023		sw		v0,[$sp]
FFFC5750 300000EF		call	SIZEX		; get amount of free memory
FFFC5754 00072983		lw		a1,[$sp]
FFFC5758 00470713		add		$sp,$sp,#4	; get back the index
FFFC575C 0109C663		blt		a1,v0,TV2		; see if there's enough memory
FFFC5760 00870713		add		$sp,$sp,#8
FFFC5764 4000006F		jmp   QSORRY		; if not, say "Sorry"
                        	TV2:
FFFC5768 00030637		lw		a0,VARBGN	; put address of array element...
FFFC576C 00860613
FFFC5770 00060633
FFFC5774 00062903
FFFC5778 41390833		sub   v0,a0,a1    ; into a0 (neg. offset is used)
FFFC577C 00000C63		bra   TSTVRT
                        	TV1:	
FFFC5780 038000EF	  call	getVarName      ; get variable name
FFFC5784 00080863	  beq   v0,x0,TSTVRT    ; if not, return v0=0
FFFC5788 00086933	  mov		a0,v0
FFFC578C 0002E9B3	  mov		a1,r5
FFFC5790 0D4000EF	  call	findVar     ; find or allocate
                        	TSTVRT:
FFFC5794 00072283		lw		r5,[$sp]
FFFC5798 00472083		lw		$ra,4[$sp]
FFFC579C 00870713		add		$sp,$sp,#8
FFFC57A0 00008067		ret								; v0<>0 (if found)
                        	tstv_notfound:
FFFC57A4 00072283		lw		r5,[$sp]
FFFC57A8 00472083		lw		$ra,4[$sp]
FFFC57AC 00870713		add		$sp,$sp,#8
FFFC57B0 00006833		mov		v0,x0				; v0=0 if not found
FFFC57B4 00008067	  ret
                        	
                        	; Get a variable name. Called after blanks have been ignored.
                        	;
                        	; Returns
                        	;   v0 = 3 character variable name + type
                        	;
                        	getVarName:
FFFC57B8 FF470713		sub		$sp,$sp,#12
FFFC57BC 00572023		sw		r5,[$sp]
FFFC57C0 00172223		sw		$ra,4[$sp]
FFFC57C4 000E4903	  lbu   a0,[$t2]		; get first character
FFFC57C8 01272423	  sw		a0,8[$sp]		; save off current name
FFFC57CC BEDFF0EF	  call	isAlpha
FFFC57D0 08080063	  beq   v0,r0,gvn1
FFFC57D4 00206293	  ldi	  r5,#2       ; loop two more times
                        	
                        		; check for second/third character
                        	gvn4:
FFFC57D8 001E0E13		add		$t2,$t2,#1
FFFC57DC 000E4903		lbu   a0,[$t2]		; do we have another char ?
FFFC57E0 C09FF0EF		call	isAlnum
FFFC57E4 02080863		beq   v0,x0,gvn2	; nope
FFFC57E8 00872903		lw		a0,8[$sp]		; get varname
FFFC57EC 00891913		sll		a0,a0,#8
FFFC57F0 000E4983		lbu   a1,[$t2]
FFFC57F4 01396933		or    a0,a0,a1   	; add in new char
FFFC57F8 01272423	  sw		a0,8[$sp]		; save off current name again
FFFC57FC FFF28293	  sub		r5,r5,#1
FFFC5800 FC504CE3	  bgt		r5,x0,gvn4
                        	
                        	 	; now ignore extra variable name characters
                        	gvn6:
FFFC5804 001E0E13		add		$t2,$t2,#1
FFFC5808 000E4903		lbu   a0,[$t2]		; do we have another char ?
FFFC580C BDDFF0EF	  call  isAlnum
FFFC5810 FE081AE3	  bne   v0,x0,gvn6	; keep looping as long as we have identifier chars
                        	
                        	  ; check for a variable type
                        	gvn2:
FFFC5814 000E4983		lbu   a1,[$t2]
FFFC5818 02506D93		ldi		$t1,#'%'
FFFC581C 01B98A63		beq		a1,$t1,gvn3
FFFC5820 02406D93		ldi		$t1,#'$'
FFFC5824 01B98663		beq		a1,$t1,gvn3
FFFC5828 FFFE0E13	  sub		$t2,$t2,#1
FFFC582C 02E06993	  ldi		$a1,#'.'		; if no variable type assume float
                        	
                        	  ; insert variable type indicator and return
                        	gvn3:
FFFC5830 001E0E13		add		$t2,$t2,#1
FFFC5834 00872903		lw		a0,8[$sp]		; get varname
FFFC5838 00891913		sll		a0,a0,#8
FFFC583C 01396833	  or    v0,a0,a1    ; add in variable type
FFFC5840 00072283	  lw		r5,[$sp]
FFFC5844 00472083	  lw		$ra,4[$sp]
FFFC5848 00C70713	  add		$sp,$sp,#12
FFFC584C 00008067	  ret								; return a0 = varname
                        	
                        	  ; not a variable name
                        	gvn1:
FFFC5850 00072283		lw		r5,[$sp]
FFFC5854 00472083	  lw		$ra,4[$sp]
FFFC5858 00C70713		add		$sp,$sp,#12
FFFC585C 00006833	  mov		v0,x0       ; return v0 = 0 if not a varname
FFFC5860 00008067	  ret
                        	
                        	
                        	; Find variable
                        	;   a0 = varname
                        	;		a1 = allocate flag
                        	; Returns
                        	;   v0 = variable address, Z =0 if found / allocated, Z=1 if not found
                        	
                        	findVar:
FFFC5864 FF870713		sub		$sp,$sp,#8
FFFC5868 00772023		sw		x7,[$sp]
FFFC586C 00372223		sw		x3,4[$sp]
FFFC5870 00030637	  lw    x3,VARBGN
FFFC5874 00860613
FFFC5878 00060633
FFFC587C 00062183
                        	fv4:
FFFC5880 0001A383	  lw    x7,[x3]     ; get varname / type
FFFC5884 02038C63	  beq   x7,x0,fv3		; no more vars ?
FFFC5888 02790E63	  beq   a0,x7,fv1		; match ?
FFFC588C 00818193		add		x3,x3,#8		; move to next var
FFFC5890 00030637	  lw    x7,VAREND		; 
FFFC5894 00C60613
FFFC5898 00060633
FFFC589C 00062383
FFFC58A0 FE71C0E3	  blt   x3,x7,fv4		; loop back to look at next var
                        	
                        	  ; variable not found
                        	  ; no more memory
FFFC58A4 00072383	  lw		x7,[$sp]
FFFC58A8 00472183	  lw		x3,4[$sp]
FFFC58AC 00870713	  add		$sp,$sp,#8
FFFC58B0 FFFC6937	  ldi		a0,#msgVarSpace
FFFC58B4 55690913
FFFC58B8 2C00006F	  jmp   ERROR
                        	
                        	  ; variable not found
                        	  ; allocate new ?
                        	fv3:
FFFC58BC 00098E63		beq		a1,x0,fv2
FFFC58C0 0121A023	  sw    a0,[x3]     ; save varname / type
                        	  ; found variable
                        	  ; return address
                        	fv1:
FFFC58C4 00418813	  add		v0,x3,#4
FFFC58C8 00072383	  lw		x7,[$sp]
FFFC58CC 00472183	  lw		x3,4[$sp]
FFFC58D0 00870713	  add		$sp,$sp,#8
FFFC58D4 00008067	  ret			    			; v0 = address
                        	
                        	  ; didn't find var and not allocating
                        	fv2:
FFFC58D8 00072383	  lw		x7,[$sp]
FFFC58DC 00472183	  lw		x3,4[$sp]
FFFC58E0 00870713	  add		$sp,$sp,#8
FFFC58E4 00006833		mov		v0,x0				; v0 = nullptr
FFFC58E8 00008067	  ret
                        	
                        	; The following functions are entered via a jump instruction with
                        	; the return address already saved.
                        	
                        	; ===== The PEEK function returns the byte stored at the address
                        	;	contained in the following expression.
                        	;
                        	PEEK:
FFFC58EC DEDFF0EF		call	PARN		; get the memory address
FFFC58F0 00080803		lb		v0,[v0]		; get the addressed byte
FFFC58F4 000068B3		mov		v1,x0			; type = int
FFFC58F8 00072083		lw		$ra,[$sp]
FFFC58FC 00470713		add		$sp,$sp,#4
FFFC5900 00008067		ret
                        	PEEKW:
FFFC5904 DD5FF0EF		call	PARN		; get the memory address
FFFC5908 00082803		lw		v0,[v0]		; get the addressed word
FFFC590C 000068B3		mov		v1,x0			; type = int
FFFC5910 00072083		lw		$ra,[$sp]
FFFC5914 00470713		add		$sp,$sp,#4
FFFC5918 00008067		ret
                        	PEEKH:
FFFC591C DBDFF0EF		call	PARN		; get the memory address
FFFC5920 00081803		lh		v0,[v0]		; get the addressed byte
FFFC5924 000068B3		mov		v1,x0			; type = int
FFFC5928 00072083		lw		$ra,[$sp]
FFFC592C 00470713		add		$sp,$sp,#4
FFFC5930 00008067		ret
                        	
                        	
                        	; user function call
                        	; call the user function with argument in a0, type in a1
                        	USRX:
FFFC5934 FFC70713		sub		$sp,$sp,#4
FFFC5938 01A72023		sw		$t0,[$sp]
FFFC593C D9DFF0EF		call	PARN		; get expression value
FFFC5940 00086933		mov		a0,v0
FFFC5944 0008E9B3		mov		a1,v1
FFFC5948 FFC70713		sub		$sp,$sp,#4	; save the text pointer
FFFC594C 01C72023		sw		$t2,[$sp]
FFFC5950 00030637		lw		$t0,usrJmp
FFFC5954 0A060613
FFFC5958 00060633
FFFC595C 00062D03
FFFC5960 000D00E7		call	[$t0]			; get usr vector, jump to the subroutine
FFFC5964 00072E03		lw		$t2,[$sp]	; restore the text pointer
FFFC5968 00470713		add		$sp,$sp,#4
FFFC596C 00072D03		lw		$t0,[$sp]
FFFC5970 00470713		add		$sp,$sp,#4
FFFC5974 00072083		lw		$ra,[$sp]
FFFC5978 00470713		add		$sp,$sp,#4
FFFC597C 00008067		ret
                        	
                        	
                        	; ===== The RND function returns a random number from 1 to
                        	;	the value of the following expression in D0.
                        	;
                        	RND:
FFFC5980 D59FF0EF		call	PARN		; get the upper limit
FFFC5984 04080063		beq		v0,r0,rnd2	; it must be positive and non-zero
FFFC5988 02084663		blt		v0,r0,rnd1
FFFC598C 000869B3		mov		a1,v0
FFFC5990 000868B3		mov		v1,v0
FFFC5994 00000637		call	gen_rand	; generate a random number
FFFC5998 3EC600E7
FFFC599C 03186833		rem		v0,v0,v1
FFFC59A0 00180813		add		v0,v0,#1
FFFC59A4 000068B3		mov		v1,x0
FFFC59A8 00072083		lw		$ra,[$sp]
FFFC59AC 00470713		add		$sp,$sp,#4
FFFC59B0 00008067		ret
                        	rnd1:
FFFC59B4 FFFC6937		ldi		a0,#msgRNDBad
FFFC59B8 5C090913
FFFC59BC 00470713		add		$sp,$sp,#4
FFFC59C0 1B80006F		jmp		ERROR
                        	rnd2:
FFFC59C4 00000637		call	gen_rand	; generate a random number
FFFC59C8 3EC600E7
FFFC59CC 000068B3		mov		v1,x0
FFFC59D0 00072083		lw		$ra,[$sp]
FFFC59D4 00470713		add		$sp,$sp,#4
FFFC59D8 00008067		ret
                        	
                        	; ===== The ABS function returns an absolute value in a1.
                        	;
                        	ABS:
FFFC59DC CFDFF0EF		call	PARN		; get the following expr.'s value
FFFC59E0 00084863		blt		v0,r0,ABS1
FFFC59E4 00072083		lw		$ra,[$sp]
FFFC59E8 00470713		add		$sp,$sp,#4
FFFC59EC 00008067		ret
                        	ABS1:
FFFC59F0 41000833		sub		v0,x0,v0
FFFC59F4 00072083		lw		$ra,[$sp]
FFFC59F8 00470713		add		$sp,$sp,#4
FFFC59FC 00008067		ret
                        	
                        	
                        	;==== The TICK function returns the cpu tick value in a0.
                        	;
                        	TICKX:
FFFC5A00 C0001873		csrrw	v0,#$C00,x0
FFFC5A04 000068B3		mov		v1,x0
FFFC5A08 00072083		lw		$ra,[$sp]
FFFC5A0C 00470713		add		$sp,$sp,#4
FFFC5A10 00008067		ret
                        	
                        	; ===== The SGN function returns the sign in a0. +1,0, or -1
                        	;
                        	SGN:
FFFC5A14 CC5FF0EF		call	PARN		; get the following expr.'s value
FFFC5A18 000068B3		mov		v1,x0
FFFC5A1C 02080463		beq		v0,r0,SGN1
FFFC5A20 00084A63		blt		v0,r0,SGN2
FFFC5A24 00106813		ldi		v0,#1
FFFC5A28 00072083		lw		$ra,[$sp]
FFFC5A2C 00470713		add		$sp,$sp,#4
FFFC5A30 00008067		ret
                        	SGN2:
FFFC5A34 FFF06813		ldi		v0,#-1
FFFC5A38 00072083		lw		$ra,[$sp]
FFFC5A3C 00470713		add		$sp,$sp,#4
FFFC5A40 00008067		ret
                        	SGN1:
FFFC5A44 00072083		lw		$ra,[$sp]
FFFC5A48 00470713		add		$sp,$sp,#4
FFFC5A4C 00008067		ret	
                        	
                        	; ===== The SIZE function returns the size of free memory in v0.
                        	; does not consider memory used by @()
                        	;
                        	SIZEX:
FFFC5A50 00030637		lw		v0,VARBGN	; get the number of free bytes...
FFFC5A54 00860613
FFFC5A58 00060633
FFFC5A5C 00062803
FFFC5A60 00030637		lw		v1,TXTUNF	; between 'TXTUNF' and 'VARBGN'
FFFC5A64 00460613
FFFC5A68 00060633
FFFC5A6C 00062883
FFFC5A70 41180833		sub		v0,v0,v1
FFFC5A74 000068B3		mov		v1,x0			; type = int
FFFC5A78 00072083		lw		$ra,[$sp]
FFFC5A7C 00470713		add		$sp,$sp,#4
FFFC5A80 00008067		ret					; return the number in v0
                        	
                        	
                        	;******************************************************************
                        	;
                        	; *** SETVAL *** FIN *** ENDCHK *** ERROR (& friends) ***
                        	;
                        	; 'SETVAL' expects a variable, followed by an equal sign and then
                        	; an expression.  It evaluates the expression and sets the variable
                        	; to that value.
                        	;
                        	; returns
                        	; a1 = variable's address
                        	;
                        	SETVAL:
FFFC5A84 FFC70713		sub		$sp,$sp,#4
FFFC5A88 00172023		sw		$ra,[$sp]
FFFC5A8C 00106913	  ldi		a0,#1		; allocate var
FFFC5A90 C89FF0EF	  call	TSTV		; variable name?
FFFC5A94 00081A63	  bne		v0,x0,.sv2
FFFC5A98 FFFC6937	 	ldi		a0,#msgVar
FFFC5A9C 5AA90913
FFFC5AA0 00470713		add		$sp,$sp,#4
FFFC5AA4 0D40006F	 	jmp		ERROR 
                        	.sv2:
FFFC5AA8 FFC70713		sub		$sp,$sp,#4
FFFC5AAC 01072023		sw		v0,[$sp]	; save the variable's address
FFFC5AB0 634000EF		call	TSTC			; get past the "=" sign
FFFC5AB4 0000003D		dw		'='
FFFC5AB8 02000663		bra		SV1
FFFC5ABC 81DFF0EF		call	OREXPR		; evaluate the expression
FFFC5AC0 00072983		lw		a1,[$sp]	; get back the variable's address
FFFC5AC4 00470713		add		$sp,$sp,#4
FFFC5AC8 0109A023		sw    v0,[a1]   ; and save value in the variable
FFFC5ACC 0009E833		mov		v0,a1			; return v0 = variable address
FFFC5AD0 FFC9A883		lw		v1,-4[a1]
FFFC5AD4 0FF8F893		and		v1,v1,#$FF
FFFC5AD8 00072083		lw		$ra,[$sp]
FFFC5ADC 00470713		add		$sp,$sp,#4
FFFC5AE0 00008067		ret
                        	SV1:
FFFC5AE4 00470713		add		$sp,$sp,#4
FFFC5AE8 0880006F	  jmp	  QWHAT		; if no "=" sign
                        	
                        	
                        	; 'FIN' checks the end of a command.  If it ended with ":",
                        	; execution continues.	If it ended with a CR, it finds the
                        	; the next line and continues from there.
                        	;
                        	FIN:
FFFC5AEC FFC70713		sub		$sp,$sp,#4
FFFC5AF0 00172023		sw		$ra,[$sp]
FFFC5AF4 5F0000EF		call	TSTC		; *** FIN ***
FFFC5AF8 0000003A		dw		':'
FFFC5AFC 00000663		bra		FI1
FFFC5B00 00470713		add		$sp,$sp,#4	; if ":", discard return address
FFFC5B04 E25FE06F		jmp		RUNSML		; continue on the same line
                        	FI1:
FFFC5B08 5DC000EF		call	TSTC		; not ":", is it a CR?
FFFC5B0C 0000000D		dw		CR
FFFC5B10 00000663		bra		FI2
                        							; else return to the caller
FFFC5B14 00470713		add		$sp,$sp,#4	; yes, purge return address
FFFC5B18 D25FE06F		jmp		RUNNXL		; execute the next line
                        	FI2:
FFFC5B1C 00072083		lw		$ra,[$sp]
FFFC5B20 00470713		add		$sp,$sp,#4
FFFC5B24 00008067		ret					; else return to the caller
                        	
                        	
                        	; 'ENDCHK' checks if a command is ended with a CR. This is
                        	; required in certain commands, such as GOTO, RETURN, STOP, etc.
                        	;
                        	; Check that there is nothing else on the line
                        	; Registers Affected
                        	;   a0
                        	;
                        	ENDCHK:
FFFC5B28 FFC70713		sub		$sp,$sp,#4
FFFC5B2C 00172023		sw		$ra,[$sp]
FFFC5B30 674000EF		call	IGNBLK
FFFC5B34 000E4903		lbu		a0,[$t2]
FFFC5B38 00D06D93		ldi		$t1,#CR
FFFC5B3C 01B90863		beq		a0,$t1,ec1	; does it end with a CR?
FFFC5B40 FFFC6937		ldi		a0,#msgExtraChars
FFFC5B44 67B90913
FFFC5B48 0300006F		jmp		ERROR
                        	ec1:
FFFC5B4C 00072083		lw		$ra,[$sp]
FFFC5B50 00470713		add		$sp,$sp,#4
FFFC5B54 00008067		ret
                        	
                        	; 'ERROR' prints the string pointed to by a0. It then prints the
                        	; line pointed to by CURRNT with a "?" inserted at where the
                        	; old text pointer (should be on top of the stack) points to.
                        	; Execution of Tiny BASIC is stopped and a warm start is done.
                        	; If CURRNT is zero (indicating a direct command), the direct
                        	; command is not printed. If CURRNT is -1 (indicating
                        	; 'INPUT' command in progress), the input line is not printed
                        	; and execution is not terminated but continues at 'INPERR'.
                        	;
                        	; Related to 'ERROR' are the following:
                        	; 'QWHAT' saves text pointer on stack and gets "What?" message.
                        	; 'AWHAT' just gets the "What?" message and jumps to 'ERROR'.
                        	; 'QSORRY' and 'ASORRY' do the same kind of thing.
                        	; 'QHOW' and 'AHOW' also do this for "How?".
                        	;
                        	TOOBIG:
FFFC5B58 FFFC6937		ldi		a0,#msgTooBig
FFFC5B5C 66790913
FFFC5B60 00000C63		bra		ERROR
                        	QSORRY:
FFFC5B64 FFFC6937	  ldi		a0,#SRYMSG
FFFC5B68 50F90913
FFFC5B6C 00000663		bra	    ERROR
                        	QWHAT:
FFFC5B70 FFFC6937		ldi		a0,#msgWhat
FFFC5B74 50890913
                        	ERROR:
FFFC5B78 710000EF		call	PRMESG		; display the error message
FFFC5B7C 00030637		lw		a0,CURRNT	; get the current line pointer
FFFC5B80 01860613
FFFC5B84 00060633
FFFC5B88 00062903
FFFC5B8C 04090263		beq		a0,r0,ERROR1	; if zero, do a warm start
FFFC5B90 FFF06D93		ldi		$t1,#-1
FFFC5B94 A1B90663		beq		a0,$t1,INPERR	; is the line no. pointer = -1? if so, redo input
FFFC5B98 000E4283		lbu		r5,[$t2]		; save the char. pointed to
FFFC5B9C 000E0023		sb		x0,[$t2]		; put a zero where the error is
FFFC5BA0 00030637		lw		a0,CURRNT	; point to start of current line
FFFC5BA4 01860613
FFFC5BA8 00060633
FFFC5BAC 00062903
FFFC5BB0 4D8000EF		call	PRTLN		; display the line in error up to the 0
FFFC5BB4 00096333		mov     r6,a0	    ; save off end pointer
FFFC5BB8 005E0023		sb		r5,[$t2]		; restore the character
FFFC5BBC 03F06913		ldi		a0,#'?'		; display a "?"
FFFC5BC0 F48FE0EF		call	GOOUT
FFFC5BC4 000069B3		mov		a1,r0		; stop char = 0
FFFC5BC8 FFF30913		sub		a0,r6,#1	; point back to the error char.
FFFC5BCC 2E4000EF		call	PRTSTG		; display the rest of the line
                        	ERROR1:
FFFC5BD0 855FE06F		jmp	    WSTART		; and do a warm start
                        	
                        	;******************************************************************
                        	;
                        	; *** GETLN *** FNDLN (& friends) ***
                        	;
                        	; 'GETLN' reads in input line into 'BUFFER'. It first prompts with
                        	; the character in r3 (given by the caller), then it fills the
                        	; buffer and echos. It ignores LF's but still echos
                        	; them back. Control-H is used to delete the last character
                        	; entered (if there is one), and control-X is used to delete the
                        	; whole line and start over again. CR signals the end of a line,
                        	; and causes 'GETLN' to return.
                        	;
                        	;
                        	GETLN:
FFFC5BD4 FF870713		sub		$sp,$sp,#8
FFFC5BD8 00572023		sw		r5,[$sp]
FFFC5BDC 00172223		sw		$ra,4[$sp]
FFFC5BE0 F28FE0EF		call	GOOUT		; display the prompt
FFFC5BE4 00106913		ldi		a0,#1
                        	;	sw		a0,CursorFlash	; turn on cursor flash
FFFC5BE8 02006913		ldi		a0,#' '		; and a space
FFFC5BEC F1CFE0EF		call	GOOUT
FFFC5BF0 00030E37		ldi		$t2,#BUFFER	; $t2 is the buffer pointer
FFFC5BF4 01CE0E13
                        	.GL1:
FFFC5BF8 660000EF		call	CHKIO		; check keyboard
FFFC5BFC FE080EE3		beq		v0,x0,.GL1	; wait for a char. to come in
FFFC5C00 00806D93		ldi		$t1,#CTRLH
FFFC5C04 05B80863		beq		v0,$t1,.GL3	; delete last character? if so
FFFC5C08 01806D93		ldi		$t1,#CTRLX
FFFC5C0C 07B80A63		beq		v0,$t1,.GL4	; delete the whole line?
FFFC5C10 00D06D93		ldi		$t1,#CR
FFFC5C14 01B80663		beq		v0,$t1,.GL2		; accept a CR
FFFC5C18 02006D93		ldi		$t1,#' '
FFFC5C1C FDB84EE3		blt		v0,$t1,.GL1	; if other control char., discard it
                        	.GL2:
FFFC5C20 010E0023		sb		v0,[$t2]		; save the char.
FFFC5C24 001E0E13		add		$t2,$t2,#1
FFFC5C28 FFC70713		sub		$sp,$sp,#4
FFFC5C2C 01072023		sw		v0,[$sp]
FFFC5C30 00086933		mov		$a0,$v0
FFFC5C34 ED4FE0EF		call	GOOUT		; echo the char back out
FFFC5C38 00072803		lw		v0,[$sp]; get char back (GOOUT destroys a0)
FFFC5C3C 00470713		add		$sp,$sp,#4
FFFC5C40 00D06D93		ldi		$t1,#CR
FFFC5C44 09B80063		beq		v0,$t1,.GL7			; if it's a CR, end the line
FFFC5C48 00030DB7		ldi		$t1,#BUFFER+BUFLEN-1
FFFC5C4C 06FD8D93
FFFC5C50 FBBE44E3		blt		$t2,$t1,.GL1		; any more room? ; yes: get some more, else delete last char.
                        	.GL3:
FFFC5C54 00806913		ldi		a0,#CTRLH	; delete a char. if possible
FFFC5C58 EB0FE0EF		call	GOOUT
FFFC5C5C 02006913		ldi		a0,#' '
FFFC5C60 EA8FE0EF		call	GOOUT
FFFC5C64 00030DB7		ldi		$t1,#BUFFER
FFFC5C68 01CD8D93
FFFC5C6C F9CDD6E3		ble		$t2,$t1,.GL1	; any char.'s left?	; if not
FFFC5C70 00806913		ldi		a0,#CTRLH		; if so, finish the BS-space-BS sequence
FFFC5C74 E94FE0EF		call	GOOUT
FFFC5C78 FFFE0E13		sub		$t2,$t2,#1	; decrement the text pointer
FFFC5C7C F6000EE3		bra		.GL1		; back for more
                        	.GL4:
FFFC5C80 000E6933		mov		a0,$t2		; delete the whole line
FFFC5C84 FFFD0637		sub		r5,a0,#BUFFER   ; figure out how many backspaces we need
FFFC5C88 FE460613
FFFC5C8C 412602B3
FFFC5C90 02028463		beq		r5,r0,.GL6		; if none needed, brnch
FFFC5C94 FFF28293		sub		r5,r5,#1		; loop count is one less
                        	.GL5:
FFFC5C98 00806913		ldi		a0,#CTRLH		; and display BS-space-BS sequences
FFFC5C9C E6CFE0EF		call	GOOUT
FFFC5CA0 02006913		ldi		a0,#' '
FFFC5CA4 E64FE0EF		call	GOOUT
FFFC5CA8 00806913		ldi		a0,#CTRLH
FFFC5CAC E5CFE0EF		call	GOOUT
FFFC5CB0 FFF28293		sub		r5,r5,#1
FFFC5CB4 FE0292E3		bne		r5,r0,.GL5
                        	.GL6:
FFFC5CB8 00030E37		ldi		$t2,#BUFFER	; reinitialize the text pointer
FFFC5CBC 01CE0E13
FFFC5CC0 F2000CE3		bra		.GL1		; and go back for more
                        	.GL7:
FFFC5CC4 000E0023		sb		x0,[$t2]		; null terminate line
                        	;	sw		x0,CursorFlash	; turn off cursor flash
FFFC5CC8 00A06913		ldi		a0,#LINEFD	; echo a LF for the CR
FFFC5CCC E3CFE0EF		call	GOOUT
FFFC5CD0 00072283		lw		r5,[$sp]
FFFC5CD4 00472083		lw		$ra,4[$sp]
FFFC5CD8 00870713		add		$sp,$sp,#8
FFFC5CDC 00008067		ret
                        	
                        	
                        	; 'FNDLN' finds a line with a given line no. (in a0) in the
                        	; text save area.  $t3 is used as the text pointer. If the line
                        	; is found, $t3 will point to the beginning of that line
                        	; (i.e. the high byte of the line no.), and $v0 = 1.
                        	; If that line is not there and a line with a higher line no.
                        	; is found, $t3 points there and $v0 = 0. If we reached
                        	; the end of the text save area and cannot find the line, flags
                        	; $t3 = 0, $v0 = 0.
                        	; $v0=1 if line found
                        	; r0 = 1	<= line is found
                        	;	$t3 = pointer to line
                        	; r0 = 0    <= line is not found
                        	;	r9 = zero, if end of text area
                        	;	r9 = otherwise higher line number
                        	;
                        	; 'FNDLN' will initialize $t3 to the beginning of the text save
                        	; area to start the search. Some other entries of this routine
                        	; will not initialize $t3 and do the search.
                        	; 'FNDLNP' will start with $t3 and search for the line no.
                        	; 'FNDNXT' will bump $t3 by 4, find a CR and then start search.
                        	; 'FNDSKP' uses $t3 to find a CR, and then starts the search.
                        	; return Z=1 if line is found, r9 = pointer to line
                        	;
                        	; Parameters
                        	;	a0 = line number to find
                        	;
                        	FNDLN:
FFFC5CE0 00100DB7		ldi		$t1,#$FFFFF
FFFC5CE4 FFFD8D93
FFFC5CE8 01B94863		blt		a0,$t1,fl1	; line no. must be < 65535
FFFC5CEC FFFC6937		ldi		a0,#msgLineRange
FFFC5CF0 59590913
FFFC5CF4 E85FF06F		jmp		ERROR
                        	fl1:
FFFC5CF8 00032EB7		ldi		$t3,#TXTBGN	; init. the text save pointer
FFFC5CFC 800E8E93
                        	
                        	FNDLNP:
FFFC5D00 00030637		lw		$t4,TXTUNF	; check if we passed the end
FFFC5D04 00460613
FFFC5D08 00060633
FFFC5D0C 00062F03
FFFC5D10 05EEF463		bgeu	$t3,$t4,FNDRET1; if so, return with r9=0,a0=0
FFFC5D14 FF870713		sub		$sp,$sp,#8	; push a0
FFFC5D18 01272023		sw		a0,[$sp]
FFFC5D1C 00172223		sw		ra,4[$sp]
FFFC5D20 000EE933		mov		a0,t3
FFFC5D24 338000EF		call	LoadWord		; get line number
FFFC5D28 00072903		lw		a0,[$sp]		; pop a0
FFFC5D2C 00472083		lw		ra,4[$sp]
FFFC5D30 00870713		add		$sp,$sp,#8
FFFC5D34 03280663		beq		v0,a0,FNDRET2
FFFC5D38 03286863		bltu	v0,a0,FNDNXT	; is this the line we want? no, not there yet
                        	FNDRET:
FFFC5D3C 004E8E93		add		$t3,$t3,#4	; find the next line, skip over line number
                        	.0001:
FFFC5D40 000EC883		lbu		v1,[$t3]
FFFC5D44 001E8E93		add		$t3,$t3,#1
FFFC5D48 00D06D93		ldi		$t1,#CR
FFFC5D4C FFB89AE3		bne		v1,$t1,.0001	; try to find a CR, keep looking
FFFC5D50 00006833		mov		v0,x0	; line not found, but $t3=next line pointer
FFFC5D54 00008067		ret
                        	FNDRET1:
                        	;	eor		r9,r9,r9	; no higher line
FFFC5D58 00006833		mov		v0,x0	; line not found
FFFC5D5C 00008067		ret
                        	FNDRET2:
FFFC5D60 00106813		ldi		v0,#1	; line found
FFFC5D64 00008067		ret
                        	
                        	FNDNXT:
FFFC5D68 004E8E93		add		$t3,$t3,#4	; find the next line
                        	
                        	FNDSKP:
FFFC5D6C 000EC883		lbu		v1,[$t3]
FFFC5D70 001E8E93		add		$t3,$t3,#1
FFFC5D74 00D06D93		ldi		$t1,#CR
FFFC5D78 FFB89AE3		bne		v1,$t1,FNDSKP	; try to find a CR, keep looking
FFFC5D7C F80002E3		bra		FNDLNP		; check if end of text
                        	
                        	
                        	;******************************************************************
                        	; 'MVUP' moves a block up from where a0 points to where a1 points
                        	; until a0=a2
                        	;
                        	MVUP1:
FFFC5D80 00090203		lb		r4,[a0]
FFFC5D84 00498023		sb		r4,[a1]
FFFC5D88 00190913		add		a0,a0,#1
FFFC5D8C 00198993		add		a1,a1,#1
                        	MVUP:
FFFC5D90 FF4918E3		bne		a0,a2,MVUP1
FFFC5D94 00008067		ret
                        	
                        	
                        	; 'MVDOWN' moves a block down from where a0 points to where a1
                        	; points until a0=a2
                        	;
                        	MVDOWN1:
FFFC5D98 FFF90913		sub		a0,a0,#1
FFFC5D9C FFF98993		sub		a1,a1,#1
FFFC5DA0 00090203		lb		r4,[a0]
FFFC5DA4 00498023		sb		r4,[a1]
                        	MVDOWN:
FFFC5DA8 FF4918E3		bne		a0,a2,MVDOWN1
FFFC5DAC 00008067		ret
                        	
                        	
                        	; 'POPA_' restores the 'FOR' loop variable save area from the stack
                        	;
                        	; 'PUSHA_' stacks for 'FOR' loop variable save area onto the stack
                        	;
                        	; Note: a single zero word is stored on the stack in the
                        	; case that no FOR loops need to be saved. This needs to be
                        	; done because PUSHA_ / POPA_ is called all the time.
                        	//message "POPA_"
                        	POPA_:
FFFC5DB0 00072903		lw		a0,[$sp]
FFFC5DB4 00470713		add		$sp,$sp,#4
FFFC5DB8 00030637		sw		a0,LOPVAR	; restore LOPVAR, but zero means no more
FFFC5DBC 01060613
FFFC5DC0 00060633
FFFC5DC4 01262023
FFFC5DC8 04090C63		beq		a0,x0,PP1
FFFC5DCC 00072903		lw		a0,[$sp]
FFFC5DD0 00030637		sw		a0,LOPPT
FFFC5DD4 07060613
FFFC5DD8 00060633
FFFC5DDC 01262023
FFFC5DE0 00472903		lw		a0,4[$sp]
FFFC5DE4 00030637		sw		a0,LOPLN
FFFC5DE8 07460613
FFFC5DEC 00060633
FFFC5DF0 01262023
FFFC5DF4 00872903		lw		a0,8[$sp]
FFFC5DF8 00030637		sw		a0,LOPLMT
FFFC5DFC 07C60613
FFFC5E00 00060633
FFFC5E04 01262023
FFFC5E08 00C72903		lw		a0,12[$sp]
FFFC5E0C 00030637		sw		a0,LOPINC
FFFC5E10 07860613
FFFC5E14 00060633
FFFC5E18 01262023
FFFC5E1C 01070713		add		$sp,$sp,#16
                        	PP1:
FFFC5E20 00008067		ret
                        	
                        	
                        	PUSHA_:
FFFC5E24 00030637		lw		a0,STKBOT	; Are we running out of stack room?
FFFC5E28 09C60613
FFFC5E2C 00060633
FFFC5E30 00062903
FFFC5E34 01490913		add		a0,a0,#20	; we might need this many bytes
FFFC5E38 D32746E3		blt		$sp,a0,QSORRY	; out of stack space
FFFC5E3C 00030637		lw		a1,LOPVAR		; save loop variables
FFFC5E40 01060613
FFFC5E44 00060633
FFFC5E48 00062983
FFFC5E4C 04098C63		beq		a1,x0,PU1		; if LOPVAR is zero, that's all
FFFC5E50 FF070713		sub		$sp,$sp,#16
FFFC5E54 00030637		lw		a0,LOPPT
FFFC5E58 07060613
FFFC5E5C 00060633
FFFC5E60 00062903
FFFC5E64 01272023		sw		a0,[$sp]
FFFC5E68 00030637		lw		a0,LOPLN
FFFC5E6C 07460613
FFFC5E70 00060633
FFFC5E74 00062903
FFFC5E78 01272223		sw		a0,4[$sp]
FFFC5E7C 00030637		lw		a0,LOPLMT
FFFC5E80 07C60613
FFFC5E84 00060633
FFFC5E88 00062903
FFFC5E8C 01272423		sw		a0,8[$sp]
FFFC5E90 00030637		lw		a0,LOPINC
FFFC5E94 07860613
FFFC5E98 00060633
FFFC5E9C 00062903
FFFC5EA0 01272623		sw		a0,12[$sp]
                        	PU1:
FFFC5EA4 FFC70713		sub		$sp,$sp,#4
FFFC5EA8 01372023		sw		a1,[$sp]
FFFC5EAC 00008067		ret
                        	
                        	
                        	;******************************************************************
                        	;
                        	; 'PRTSTG' prints a string pointed to by a0. It stops printing
                        	; and returns to the caller when either a CR is printed or when
                        	; the next byte is the same as what was passed in a1 by the
                        	; caller.
                        	;
                        	; 'PRTLN' prints the saved text line pointed to by r3
                        	; with line no. and all.
                        	;
                        	
                        	; a0 = pointer to string
                        	; a1 = stop character
                        	; return v0 = pointer to end of line + 1
                        	
                        	PRTSTG:
FFFC5EB0 FEC70713		sub		$sp,$sp,#20
FFFC5EB4 00572023		sw		r5,[$sp]
FFFC5EB8 00672223		sw		r6,4[$sp]
FFFC5EBC 00772423		sw		r7,8[$sp]
FFFC5EC0 00172623		sw		$ra,12[$sp]
FFFC5EC4 01272823		sw		$a0,16[$sp]
FFFC5EC8 000962B3		mov   r5,a0	    ; r5 = pointer
FFFC5ECC 0009E333		mov   r6,a1	    ; r6 = stop char
                        	.PS1:
FFFC5ED0 0002C383	  lbu   r7,[r5]     ; get a text character
FFFC5ED4 00128293		add		r5,r5,#1
FFFC5ED8 00638E63		beq	  r7,r6,.PRTRET	; same as stop character? if so, return
FFFC5EDC 0003E933		mov   a0,r7
FFFC5EE0 C28FE0EF		call	GOOUT		; display the char.
FFFC5EE4 00D06D93		ldi		$t1,#CR
FFFC5EE8 FFB394E3		bne   r7,$t1,.PS1	; is it a C.R.? no, go back for more
FFFC5EEC 00A06913		ldi		a0,#LINEFD  ; yes, add a L.F.
FFFC5EF0 C18FE0EF		call	GOOUT
                        	.PRTRET:
FFFC5EF4 0003E8B3	  mov   v1,r7	    ; return a1 = stop char
FFFC5EF8 0002E833		mov		v0,r5		; return a0 = line pointer
FFFC5EFC 00072283		lw		$r5,[$sp]
FFFC5F00 00472303		lw		$r6,4[$sp]
FFFC5F04 00872383		lw		$r7,8[$sp]
FFFC5F08 00C72083		lw		$ra,12[$sp]
FFFC5F0C 01072903		lw		$a0,16[$sp]
FFFC5F10 01470713		add		$sp,$sp,#20
FFFC5F14 00008067	  ret					; then return
                        	
                        	
                        	; 'QTSTG' looks for an underline (back-arrow on some systems),
                        	; single-quote, or double-quote.  If none of these are found, returns
                        	; to the caller.  If underline, outputs a CR without a LF.  If single
                        	; or double quote, prints the quoted string and demands a matching
                        	; end quote.  After the printing, the next i-word of the caller is
                        	; skipped over (usually a branch instruction).
                        	;
                        	QTSTG:
FFFC5F18 FFC70713		sub		$sp,$sp,#4
FFFC5F1C 00172023		sw		$ra,[$sp]
FFFC5F20 1C4000EF		call	TSTC		; *** QTSTG ***
FFFC5F24 00000022		dw		'"'
FFFC5F28 02000063		bra		QT3
FFFC5F2C 02206993		ldi		a1,#'"'		; it is a "
                        	QT1:
FFFC5F30 000E6933		mov		a0,$t2
FFFC5F34 F7DFF0EF		call	PRTSTG		; print until another
FFFC5F38 00086E33		mov		$t2,v0
FFFC5F3C 00D06D93		ldi		$t1,#CR
FFFC5F40 03B89863		bne		v1,$t1,QT2	; was last one a CR?
FFFC5F44 8F9FE06F		jmp		RUNNXL		; if so run next line
                        	QT3:
FFFC5F48 19C000EF		call	TSTC		; is it a single quote?
FFFC5F4C 0000005C		dw		'\''
FFFC5F50 00000663		bra		QT4
FFFC5F54 02706993		ldi		a1,#'\''	; if so, do same as above
FFFC5F58 FC000CE3		bra		QT1
                        	QT4:
FFFC5F5C 188000EF		call	TSTC		; is it an underline?
FFFC5F60 0000005F		dw		'_'
FFFC5F64 00000C63		bra		QT5
FFFC5F68 00D06913		ldi		a0,#CR		; if so, output a CR without LF
FFFC5F6C B9CFE0EF		call	GOOUT
                        	QT2:
FFFC5F70 00072083		lw		$ra,[$sp]		; get return address
FFFC5F74 00470713		add		$sp,$sp,#4
FFFC5F78 00408067		jmp		4[$ra]		; skip following branch
                        	QT5:					; not " ' or _
FFFC5F7C 00072083		lw		$ra,[$sp]		; get return address
FFFC5F80 00470713		add		$sp,$sp,#4
FFFC5F84 00008067		ret
                        	
                        	; Output a CR LF sequence
                        	;
                        	prCRLF:
FFFC5F88 FFC70713		sub		$sp,$sp,#4
FFFC5F8C 00172023		sw		$ra,[$sp]
FFFC5F90 00D06913		ldi		a0,#CR
FFFC5F94 B74FE0EF		call	GOOUT
FFFC5F98 00A06913		ldi		a0,#LINEFD
FFFC5F9C B6CFE0EF		call	GOOUT
FFFC5FA0 00072083		lw		$ra,[$sp]
FFFC5FA4 00470713		add		$sp,$sp,#4
FFFC5FA8 00008067		ret
                        	
                        	;-------------------------------------------------------------------------------
                        	; 'PRTNUM' prints the 32 bit number in a0, leading blanks are added if
                        	; needed to pad the number of spaces to the number in a1.
                        	; However, if the number of digits is larger than the no. in
                        	; a1, all digits are printed anyway. Negative sign is also
                        	; printed and counted in, positive sign is not.
                        	;
                        	; Parameters
                        	; 	a0 = number to print
                        	; 	a1 = number of digits
                        	;		a2 = base (eg 10, 16)
                        	; Register Usage
                        	;		s2 = number of padding spaces
                        	; Modifies:
                        	;		a0,a1,t1
                        	; Returns:
                        	;		none
                        	;-------------------------------------------------------------------------------
                        	
FFFC5FAC FEC70713	public PRTNUM:
	sub		$sp,$sp,#20
FFFC5FB0 00472023		sw		$s1,[$sp]
FFFC5FB4 00572223		sw		$s2,4[$sp]
FFFC5FB8 00672423		sw		$s3,8[$sp]
FFFC5FBC 00772623		sw		$s4,12[$sp]
FFFC5FC0 00172823		sw		$ra,16[$sp]
FFFC5FC4 000303B7		ldi		s4,#NUMWKA	; r7 = pointer to numeric work area
FFFC5FC8 09438393
FFFC5FCC 00096333		mov		s3,a0		; save number for later
FFFC5FD0 0009E2B3		mov		s2,a1		; s2 = min number of chars
FFFC5FD4 00095663		bge		a0,x0,.PN2	; is it negative? if not
FFFC5FD8 41200933		sub		a0,x0,a0	; else make it positive
FFFC5FDC FFF28293		sub		s2,s2,#1	; one less for width count
                        	.PN2:
FFFC5FE0 00A06D93		ldi		$t1,#10
                        	.PN1:
FFFC5FE4 034969B3		rem		a1,a0,a2	; a1 = a0 mod 10
FFFC5FE8 03494933		div		a0,a0,a2	; a0 /= 10 divide by 10
FFFC5FEC 013A7463		bleu	a1,a2,.PN7
FFFC5FF0 00798993		add		a1,a1,#'A'-10-'0'
                        	.PN7:
FFFC5FF4 03098993		add		a1,a1,#'0'	; convert remainder to ascii
FFFC5FF8 01338023		sb		a1,[$s4]		; and store in buffer
FFFC5FFC 00138393		add		s4,s4,#1
FFFC6000 FFF28293		sub		s2,s2,#1	; decrement width
FFFC6004 FE0910E3		bne		a0,x0,.PN1
FFFC6008 00505A63		ble		$s2,$x0,.PN4	; test pad count, skip padding if not needed
                        	.PN3:
FFFC600C 02006913		ldi		$a0,#' '		; display the required leading spaces
FFFC6010 AF8FE0EF		call	GOOUT
FFFC6014 FFF28293		sub		$s2,$s2,#1
FFFC6018 FE504AE3		bgt		$s2,$x0,.PN3
                        	.PN4:
FFFC601C 00035663		bge		$s3,$x0,.PN5	; is number negative?
FFFC6020 02D06913		ldi		$a0,#'-'		; if so, display the sign
FFFC6024 AE4FE0EF		call	GOOUT
                        	.PN5:
FFFC6028 00030DB7		ldi		$t1,#NUMWKA
FFFC602C 094D8D93
                        	.PN6:
FFFC6030 FFF38393		sub		$s4,$s4,#1
FFFC6034 0003C903		lbu		$a0,[$s4]		; now unstack the digits and display
FFFC6038 AD0FE0EF		call	GOOUT
FFFC603C FE7DEAE3		bgtu	$s4,$t1,.PN6
                        	
FFFC6040 00072203		lw		$s1,[$sp]
FFFC6044 00472283		lw		$s2,4[$sp]
FFFC6048 00872303		lw		$s3,8[$sp]
FFFC604C 00C72383		lw		$s4,12[$sp]
FFFC6050 01072083		lw		$ra,16[$sp]
FFFC6054 01470713		add		$sp,$sp,#20
FFFC6058 00008067		ret
                        	
                        	;-------------------------------------------------------------------------------
                        	; Load a word from memory using unaligned access.
                        	; Moves forwards through memory
                        	;
                        	; Parameters:
                        	;		a0 = pointer to word
                        	; Returns:
                        	;		v0 = word loaded
                        	;-------------------------------------------------------------------------------
                        	LoadWord:
FFFC605C 00094803	  lbu		$v0,[$a0]	
FFFC6060 00194883	  lbu		$v1,1[$a0]
FFFC6064 00889893	  sll		$v1,$v1,#8
FFFC6068 01186833	  or		$v0,$v0,$v1
FFFC606C 00294883	  lbu		$v1,2[$a0]
FFFC6070 01089893	  sll		$v1,$v1,#16
FFFC6074 01186833	  or		$v0,$v0,$v1
FFFC6078 00394883	  lbu		$v1,3[$a0]
FFFC607C 01889893	  sll		$v1,$v1,#24
FFFC6080 01186833	  or		$v0,$v0,$v1
FFFC6084 00008067		ret
                        	
                        	;-------------------------------------------------------------------------------
                        	; Parameters:
                        	; 	a0 = pointer to line
                        	; Returns:
                        	;		v0 = pointer to end of line + 1
                        	;-------------------------------------------------------------------------------
                        	
                        	PRTLN:
FFFC6088 FF070713		sub		$sp,$sp,#16
FFFC608C 00572023		sw		$r5,[$sp]
FFFC6090 00172223		sw		$ra,4[$sp]
FFFC6094 01272423		sw		$a0,8[$sp]
FFFC6098 01372623		sw		$a1,12[$sp]
FFFC609C 000962B3	  mov		$r5,$a0		; r5 = pointer
                        	  ; get the line number stored as binary
                        	  ; assume unaligned loads not allowed
FFFC60A0 FBDFF0EF	  call	LoadWord
FFFC60A4 00086933	  mov		a0,v0
                        	
FFFC60A8 00428293		add		r5,r5,#4
FFFC60AC 00506993	  ldi		a1,#5       ; display a 0 or more digit line no.
FFFC60B0 00A06A13	  ldi		a2,#10
FFFC60B4 EF9FF0EF		call	PRTNUM
FFFC60B8 02006913		ldi		a0,#' '     ; followed by a blank
FFFC60BC A4CFE0EF		call	GOOUT
FFFC60C0 000069B3		mov		a1,r0       ; stop char. is a zero
FFFC60C4 0002E933		mov		a0,r5
FFFC60C8 DE9FF0EF		call  PRTSTG		; display the rest of the line
FFFC60CC 00072283		lw		$r5,[$sp]
FFFC60D0 00472083		lw		$ra,4[$sp]
FFFC60D4 00872903		lw		$a0,8[$sp]
FFFC60D8 00C72983		lw		$a1,12[$sp]
FFFC60DC 01070713		add		$sp,$sp,#16
FFFC60E0 00008067		ret
                        	
                        	
                        	; ===== Test text byte following the call to this subroutine. If it
                        	;	equals the byte pointed to by t2, return to the code following
                        	;	the call. 
                        	;
                        	; Parameters:
                        	;		<static> word byte to look for
                        	;		<static> branch if not found
                        	; Registers Affected
                        	;   none
                        	; Returns
                        	;		t2 = updated text pointer
                        	;
                        	TSTC:
FFFC60E4 FF470713		sub		$sp,$sp,#12
FFFC60E8 01272023		sw		$a0,[$sp]
FFFC60EC 00172223		sw		$ra,4[$sp]
FFFC60F0 01372423		sw		$a1,8[$sp]
FFFC60F4 0B0000EF		call	IGNBLK		; ignore leading blanks
FFFC60F8 00472083		lw		$ra,4[$sp]	; get return address, it's needed for a reference
FFFC60FC 000E4903		lbu		$a0,[$t2]
FFFC6100 0000C983		lbu		$a1,[$ra]
FFFC6104 01298A63		beq		$a1,$a0,TC1	; is it = to what t2 points to? if so
FFFC6108 00072903		lw		$a0,[$sp]		; restore a0
FFFC610C 00872983		lw		$a1,8[$sp]
FFFC6110 00C70713		add		$sp,$sp,#12	;
FFFC6114 00408067		jmp		4[$ra]			; jump to the routine skip param
                        	TC1:
FFFC6118 001E0E13		add		$t2,$t2,#1	; if equal, bump text pointer
FFFC611C 00072903		lw		$a0,[$sp]
FFFC6120 00472083		lw		$ra,4[$sp]
FFFC6124 00872983		lw		$a1,8[$sp]
FFFC6128 00C70713		add		$sp,$sp,#12
FFFC612C 00808067		jmp		8[$ra]			; jump back, skip parm and branch
                        	
                        	
                        	; ===== See if the text pointed to by $t2 is a number. If so,
                        	;	return the number in $v0 and the number of digits in $v1,
                        	;	else return zero in $v0 and $v1.
                        	; Registers Affected
                        	;   a0,a1,r3,r4
                        	; Returns
                        	; 	v0 = number
                        	;		v1 = number of digits in number
                        	;	t2 = updated text pointer
                        	;
                        	TSTNUM:
FFFC6130 FF870713		sub		$sp,$sp,#8
FFFC6134 00172223		sw		$ra,4[$sp]
FFFC6138 00372023		sw		r3,[$sp]
FFFC613C 068000EF		call	IGNBLK		; skip over blanks
FFFC6140 00006833		mov		$v0,$x0		; initialize return parameters
FFFC6144 000068B3		mov		$v1,$x0
                        	TN1:
FFFC6148 000E4183		lbu		r3,[$t2]
FFFC614C 03006D93		ldi		$t1,#'0'
FFFC6150 05B1C263		blt		r3,$t1,TSNMRET; is it less than zero?
FFFC6154 03906D93		ldi		$t1,#'9'
FFFC6158 023DCE63		bgt		r3,$t1,TSNMRET; is it greater than nine?
FFFC615C 00000DB7		ldi		$t1,#$7FFFFFFFFFFFFFF
FFFC6160 FFFD8D93
FFFC6164 010DF863		bleu	$v0,$t1,TN2; see if there's room for new digit
FFFC6168 FFFC6937		ldi		$a0,#msgNumTooBig
FFFC616C 53190913
FFFC6170 A09FF06F		jmp		ERROR		; if not, we've overflowd
                        	TN2:
FFFC6174 001E0E13		add		$t2,$t2,#1	; adjust text pointer
FFFC6178 00181E93		sll		$t3,$v0,#1	; quickly multiply result by 10
FFFC617C 00381813		sll		$v0,$v0,#3	; *8
FFFC6180 01D80833		add		$v0,$v0,$t3	; *8 + *2
FFFC6184 00F1F193		and		r3,r3,#$0F	; add in the new digit
FFFC6188 00380833		add		$v0,$v0,r3
FFFC618C 00188893		add		$v1,$v1,#1	; increment the no. of digits
FFFC6190 FA000CE3		bra		TN1
                        	TSNMRET:
FFFC6194 00072183		lw		r3,[$sp]
FFFC6198 00472083		lw		$ra,4[$sp]
FFFC619C 00870713		add		$sp,$sp,#8
FFFC61A0 00008067		ret
                        	
                        	
                        	;===== Skip over blanks in the text pointed to by $t2.
                        	;
                        	; Registers Affected:
                        	;	$t2
                        	; Returns
                        	;	$t2 = pointer updateded past any spaces or tabs
                        	;
                        	IGNBLK:
FFFC61A4 FFC70713		sub		$sp,$sp,#4
FFFC61A8 01272023		sw		$a0,[$sp]
                        	IGB2:
FFFC61AC 000E4903		lbu		a0,[$t2]			; get char
FFFC61B0 02006D93		ldi		$t1,#' '
FFFC61B4 01B90663		beq		$a0,$t1,IGB1	; see if it's a space
FFFC61B8 00906D93		ldi		$t1,#'\t'
FFFC61BC 01B91663		bne		a0,$t1,IGBRET	; or a tab
                        	IGB1:
FFFC61C0 001E0E13		add		$t2,$t2,#1		; increment the text pointer
FFFC61C4 FE0004E3		bra		IGB2
                        	IGBRET:
FFFC61C8 00072903		lw		$a0,[$sp]
FFFC61CC 00470713		add		$sp,$sp,#4
FFFC61D0 00008067		ret
                        	
                        	; ===== Convert the line of text in the input buffer to upper
                        	;	case (except for stuff between quotes).
                        	;
                        	; Registers Affected
                        	;   a0,r3
                        	; Returns
                        	;	r8 = pointing to end of text in buffer
                        	;
                        	TOUPBUF:
FFFC61D4 FFC70713		sub		$sp,$sp,#4
FFFC61D8 00172023		sw		$ra,[$sp]
FFFC61DC 00030E37		ldi		$t2,#BUFFER	; set up text pointer
FFFC61E0 01CE0E13
FFFC61E4 000061B3		mov		r3,x0		; clear quote flag
                        	TOUPB1:
FFFC61E8 000E4903		lbu		a0,[$t2]		; get the next text char.
FFFC61EC 001E0E13		add		$t2,$t2,#1
FFFC61F0 00D06D93		ldi		$t1,#CR
FFFC61F4 03B90E63		beq		a0,$t1,TOUPBRT		; is it end of line?
FFFC61F8 02206D93		ldi		$t1,#'"'
FFFC61FC 01B90E63		beq		a0,$t1,DOQUO	; a double quote?
FFFC6200 02706D93		ldi		$t1,#'\''
FFFC6204 01B90A63		beq		a0,$t1,DOQUO	; or a single quote?
FFFC6208 FE0190E3		bne		r3,x0,TOUPB1	; inside quotes?
FFFC620C 030000EF		call	toUpper 	; convert to upper case
FFFC6210 FF0E0FA3		sb		v0,-1[$t2]	; store it
FFFC6214 FC000AE3		bra		TOUPB1		; and go back for more
                        	DOQUO:
FFFC6218 00019663		bne		r3,x0,DOQUO1; are we inside quotes?
FFFC621C 000961B3		mov		r3,a0		; if not, toggle inside-quotes flag
FFFC6220 FC0004E3		bra		TOUPB1
                        	DOQUO1:
FFFC6224 FD2192E3		bne		r3,a0,TOUPB1; make sure we're ending proper quote
FFFC6228 000061B3		mov		r3,r0		; else clear quote flag
FFFC622C FA000EE3		bra		TOUPB1
                        	TOUPBRT:
FFFC6230 00072083		lw		$ra,[$sp]
FFFC6234 00470713		add		$sp,$sp,#4
FFFC6238 00008067		ret
                        	
                        	
                        	; ===== Convert the character in a0 to upper case
                        	;
                        	toUpper:
FFFC623C 00096833		mov		$v0,$a0
FFFC6240 06182D93		slt		$t1,$v0,#'a'
FFFC6244 000D9863		bne   $t1,$x0,TOUPRET	; is it < 'a'?
FFFC6248 07A06D93		ldi		$t1,#'z'
FFFC624C 010DC463		bgt		$v0,$t1,TOUPRET	; or > 'z'?
FFFC6250 FE080813		sub		$v0,$v0,#32	  ; if not, make it upper case
                        	TOUPRET:
FFFC6254 00008067		ret
                        	
                        	; 'CHKIO' checks the input. If there's no input, it will return
                        	; to the caller with the a0=0. If there is input, the input byte is in a0.
                        	; However, if a control-C is read, 'CHKIO' will warm-start BASIC and will
                        	; not return to the caller.
                        	;
                        	//message "CHKIO"
                        	CHKIO:
FFFC6258 FFC70713		sub		$sp,$sp,#4
FFFC625C 00172023		sw		$ra,[$sp]
FFFC6260 228000EF		call	INCH		; get input if possible
FFFC6264 00080863		beq		$v0,$x0,CHKRET	; if Zero, no input
FFFC6268 00384893		xor		$v1,$v0,#CTRLC
FFFC626C 00089463		bne		$v1,$x0,CHKRET; is it control-C?
FFFC6270 9B4FE06F		jmp		WSTART		; if so, do a warm start
                        	CHKRET:
FFFC6274 00072083		lw		$ra,[$sp]
FFFC6278 00470713		add		$sp,$sp,#4
FFFC627C 00008067		ret
                        	
                        	; ===== Display a CR-LF sequence
                        	;
                        	CRLF:
FFFC6280 FFFC6937		ldi		a0,#CLMSG
FFFC6284 51590913
                        	
                        	; ===== Display a zero-ended string pointed to by register a0
                        	; Registers Affected
                        	;   a0,a1,r4
                        	;
                        	PRMESG:
FFFC6288 FFC70713		sub		$sp,$sp,#4
FFFC628C 00172023		sw		$ra,[$sp]
FFFC6290 D2CFA0EF		call	PutString
FFFC6294 00072083		lw		$ra,[$sp]
FFFC6298 00470713		add		$sp,$sp,#4
FFFC629C 00008067		ret
                        	
                        	;------------------------------------------------------------------------------
                        	;	erc = ALLOCMBX (<handle var>)
                        	;------------------------------------------------------------------------------
                        	
                        	ALLOCMBX:
FFFC62A0 E45FF0EF		call	TSTC		; else look for ( OREXPR )
FFFC62A4 00000028		dw		'('
FFFC62A8 04000E63		bra		.paren
FFFC62AC 00106913		ldi		a0,#1
FFFC62B0 C68FF0EF		call	TSTV
FFFC62B4 00081863		bne		v0,x0,.0001
FFFC62B8 FFFC6937		ldi		a0,#msgVar
FFFC62BC 5AA90913
FFFC62C0 8B9FF06F		jmp		ERROR
                        	.0001:
FFFC62C4 E21FF0EF		call	TSTC		; else look for ( OREXPR )
FFFC62C8 00000029		dw		')'
FFFC62CC 02000C63		bra		.paren
FFFC62D0 00086233		mov		s1,v0
FFFC62D4 00E06913		ldi		a0,#14			; get current tid
FFFC62D8 00000073		ecall
FFFC62DC 0008E9B3		mov		a1,v1
FFFC62E0 00026A33		mov		a2,s1
FFFC62E4 00606913		ldi		a0,#6
FFFC62E8 00000073		ecall
FFFC62EC 00081463		bne		v0,x0,.0002
FFFC62F0 01122023		sw		v1,[s1]				; save handle in variable
                        	.0002:
FFFC62F4 000068B3		mov		v1,x0
FFFC62F8 00072083		lw		$ra,[$sp]
FFFC62FC 00470713		add		$sp,$sp,#4
FFFC6300 00008067		ret
                        	.paren:
FFFC6304 FFFC6937		ldi		a0,#msgParen
FFFC6308 6B790913
FFFC630C 86DFF06F		jmp		ERROR
                        	
                        	;------------------------------------------------------------------------------
                        	; erc = SENDMSG (<handle var>, <msg data 1>, <msg data 2>, <msg data 3>)
                        	;------------------------------------------------------------------------------
                        	
                        	SENDMSG:
FFFC6310 DD5FF0EF		call	TSTC		; else look for ( OREXPR )
FFFC6314 00000028		dw		'('
FFFC6318 08000463		bra		.paren
FFFC631C FBDFE0EF		call	OREXPR	; get the mailbox handle
FFFC6320 00086233		mov		s1,v0
FFFC6324 DC1FF0EF		call	TSTC		; it must be followed by a comma
FFFC6328 0000002C		dw		','
FFFC632C 06000463		bra		.err
FFFC6330 FA9FE0EF		call	OREXPR	; get the memory address
FFFC6334 000862B3		mov		s2,v0
FFFC6338 DADFF0EF		call	TSTC		; it must be followed by a comma
FFFC633C 0000002C		dw		','
FFFC6340 04000A63		bra		.err
FFFC6344 F95FE0EF		call	OREXPR	; get the memory address
FFFC6348 00086333		mov		s3,v0
FFFC634C D99FF0EF		call	TSTC		; it must be followed by a comma
FFFC6350 0000002C		dw		','
FFFC6354 04000063		bra		.err
FFFC6358 F81FE0EF		call	OREXPR	; get the memory address
FFFC635C 000863B3		mov		s4,v0
FFFC6360 D85FF0EF		call	TSTC		; else look for ( OREXPR )
FFFC6364 00000029		dw		')'
FFFC6368 02000C63		bra		.paren
FFFC636C 00906913		ldi		a0,#9		; SendMsg
FFFC6370 000269B3		mov		a1,s1
FFFC6374 0002EA33		mov		a2,s2
FFFC6378 00036AB3		mov		a3,s3
FFFC637C 0003EB33		mov		a4,s4
FFFC6380 00000073		ecall
FFFC6384 000068B3		mov		v1,x0
FFFC6388 00072083		lw		$ra,[$sp]
FFFC638C 00470713		add		$sp,$sp,#4
FFFC6390 00008067		ret
                        	.err:
FFFC6394 FFFC6937		ldi		a0,#msgComma
FFFC6398 58290913
FFFC639C FDCFF06F		jmp		ERROR
                        	.paren:
FFFC63A0 FFFC6937		ldi		a0,#msgParen
FFFC63A4 6B790913
FFFC63A8 FD0FF06F		jmp		ERROR
                        	
                        	;------------------------------------------------------------------------------
                        	; WAITMSG <handle var>, <var for data 1>, <var for data 2>, <var for data 3>,
                        	;		<expr>
                        	;------------------------------------------------------------------------------
                        	
                        	WAITMSG:
FFFC63AC D39FF0EF		call	TSTC		; else look for ( OREXPR )
FFFC63B0 00000028		dw		'('
FFFC63B4 0C000263		bra		.paren
FFFC63B8 F21FE0EF		call	OREXPR	; get the mailbox handle
FFFC63BC 00086233		mov		s1,v0
FFFC63C0 D25FF0EF		call	TSTC		; it must be followed by a comma
FFFC63C4 0000002C		dw		','
FFFC63C8 0A000263		bra		.err
FFFC63CC 00106913		ldi		a0,#1
FFFC63D0 B48FF0EF		call	TSTV
FFFC63D4 00081863		bne		v0,x0,.0001
                        	.0002:
FFFC63D8 FFFC6937		ldi		a0,#msgVar
FFFC63DC 5AA90913
FFFC63E0 F98FF06F		jmp		ERROR
                        	.0001:
FFFC63E4 D01FF0EF		call	TSTC		; it must be followed by a comma
FFFC63E8 0000002C		dw		','
FFFC63EC 08000063		bra		.err
FFFC63F0 000862B3		mov		s2,v0
FFFC63F4 00106913		ldi		a0,#1
FFFC63F8 B20FF0EF		call	TSTV
FFFC63FC FC080EE3		beq		v0,x0,.0002
FFFC6400 CE5FF0EF		call	TSTC		; it must be followed by a comma
FFFC6404 0000002C		dw		','
FFFC6408 06000263		bra		.err
FFFC640C 00086333		mov		s3,v0
FFFC6410 00106913		ldi		a0,#1
FFFC6414 B04FF0EF		call	TSTV
FFFC6418 FC0800E3		beq		v0,x0,.0002
FFFC641C 000863B3		mov		s4,v0
FFFC6420 CC5FF0EF		call	TSTC		; it must be followed by a comma
FFFC6424 0000002C		dw		','
FFFC6428 04000263		bra		.err
FFFC642C EADFE0EF		call	OREXPR	; get queue remove flag
FFFC6430 00086BB3		mov		a5,v0
FFFC6434 000863B3		mov		s4,v0
FFFC6438 CADFF0EF		call	TSTC		; else look for ( OREXPR )
FFFC643C 00000029		dw		')'
FFFC6440 02000C63		bra		.paren
FFFC6444 00A06913		ldi		a0,#10		; WaitMsg
FFFC6448 000269B3		mov		a1,s1
FFFC644C 0002EA33		mov		a2,s2
FFFC6450 00036AB3		mov		a3,s3
FFFC6454 0003EB33		mov		a4,s4
FFFC6458 00000073		ecall
FFFC645C 000068B3		mov		v1,x0
FFFC6460 00072083		lw		$ra,[$sp]
FFFC6464 00470713		add		$sp,$sp,#4
FFFC6468 00008067		ret
                        	.err:
FFFC646C FFFC6937		ldi		a0,#msgComma
FFFC6470 58290913
FFFC6474 F04FF06F		jmp		ERROR
                        	.paren:
FFFC6478 FFFC6937		ldi		a0,#msgParen
FFFC647C 6B790913
FFFC6480 EF8FF06F		jmp		ERROR
                        	
                        	;*****************************************************
                        	; The following routines are the only ones that need *
                        	; to be changed for a different I/O environment.     *
                        	;*****************************************************
                        	
                        	; ===== Output character to the console (Port 1) from register a0
                        	;	(Preserves all registers.)
                        	;
                        	OUTC:
FFFC6484 DBDF906F		jmp		Putch
                        	
                        	; ===== Input a character from the console into register v0 (or
                        	;	return Zero status if there's no character available).
                        	;
                        	INCH:
FFFC6488 FFC70713		sub 	$sp,$sp,#4
FFFC648C 00172023		sw		$ra,[$sp]
FFFC6490 D85F90EF		call	Getch
FFFC6494 00180813		add		$v0,$v0,#1				; prepare test -1
FFFC6498 00080A63		beq		$v0,$x0,INCH1			; was = -1
FFFC649C FFF80813		sub		$v0,$v0,#1				; get char back
FFFC64A0 00072083		lw		$ra,[$sp]
FFFC64A4 00470713		add		$sp,$sp,#4
FFFC64A8 00008067		ret
                        	INCH1:
FFFC64AC 00072083		lw		$ra,[$sp]		; return a zero for no-char
FFFC64B0 00470713		add		$sp,$sp,#4
FFFC64B4 00008067		ret
                        	
                        	; ===== Return to the resident monitor, operating system, etc.
                        	;
                        	//message "BYEBYE"
                        	BYEBYE:
                        	//	call	ReleaseIOFocus
FFFC64B8 00030637		lw		$sp,OSSP
FFFC64BC 00060613
FFFC64C0 00060633
FFFC64C4 00062703
FFFC64C8 E39F906F		jmp		Monitor
                        	 
                        	
FFFC64CC 53430A0D	msgInit	db	CR,LINEFD,"CS01 Tiny BASIC v1.0",CR,LINEFD,"(C) 2017-2020  Robert Finch",CR,CR,0
FFFC64D0 54203130
FFFC64D4 20796E69
FFFC64D8 49534142
FFFC64DC 31762043
FFFC64E0 0A0D302E
FFFC64E4 20294328
FFFC64E8 37313032
FFFC64EC 3230322D
FFFC64F0 52202030
FFFC64F4 7265626F
FFFC64F8 69462074
FFFC64FC 0D68636E
FFFC6500 0A0D000D
FFFC6502 4B4F0A0D	OKMSG	db	CR,LINEFD,"OK",CR,0
FFFC6506 6857000D
FFFC6508 74616857	msgWhat	db	"What?",CR,0
FFFC650C 53000D3F
FFFC650F 72726F53	SRYMSG	db	"Sorry."
FFFC6513 000D2E79
FFFC6515 6F43000D	CLMSG	db	CR,0
FFFC6517 706D6F43	msgReadError	db	"Compact FLASH read error",CR,0
FFFC651B 20746361
FFFC651F 53414C46
FFFC6523 65722048
FFFC6527 65206461
FFFC652B 726F7272
FFFC652F 754E000D
FFFC6531 626D754E	msgNumTooBig	db	"Number is too big",CR,0
FFFC6535 69207265
FFFC6539 6F742073
FFFC653D 6962206F
FFFC6541 44000D67
FFFC6544 69766944	msgDivZero		db	"Division by zero",CR,0
FFFC6548 6E6F6973
FFFC654C 20796220
FFFC6550 6F72657A
FFFC6554 754F000D
FFFC6556 2074754F	msgVarSpace     db  "Out of variable space",CR,0
FFFC655A 7620666F
FFFC655E 61697261
FFFC6562 20656C62
FFFC6566 63617073
FFFC656A 20000D65
FFFC656D 74796220	msgBytesFree	db	" bytes free",CR,0
FFFC6571 66207365
FFFC6575 0D656572
FFFC6579 65520D00
FFFC657A 6165520D	msgReady		db	CR,"Ready",CR,0
FFFC657E 000D7964
FFFC6582 65707845	msgComma		db	"Expecting a comma",CR,0
FFFC6586 6E697463
FFFC658A 20612067
FFFC658E 6D6D6F63
FFFC6592 4C000D61
FFFC6595 656E694C	msgLineRange	db	"Line number too big",CR,0
FFFC6599 6D756E20
FFFC659D 20726562
FFFC65A1 206F6F74
FFFC65A5 0D676962
FFFC65A9 70784500
FFFC65AA 65707845	msgVar			db "Expecting a variable",CR,0
FFFC65AE 6E697463
FFFC65B2 20612067
FFFC65B6 69726176
FFFC65BA 656C6261
FFFC65BE 4E52000D
FFFC65C0 20444E52	msgRNDBad		db	"RND bad parameter",CR,0
FFFC65C4 20646162
FFFC65C8 61726170
FFFC65CC 6574656D
FFFC65D0 53000D72
FFFC65D3 20535953	msgSYSBad		db	"SYS bad address",CR,0
FFFC65D7 20646162
FFFC65DB 72646461
FFFC65DF 0D737365
FFFC65E3 504E4900
FFFC65E4 55504E49	msgInputVar		db	"INPUT expecting a variable",CR,0
FFFC65E8 78652054
FFFC65EC 74636570
FFFC65F0 20676E69
FFFC65F4 61762061
FFFC65F8 62616972
FFFC65FC 000D656C
FFFC6600 5458454E	msgNextFor		db	"NEXT without FOR",CR,0
FFFC6604 74697720
FFFC6608 74756F68
FFFC660C 524F4620
FFFC6610 454E000D
FFFC6612 5458454E	msgNextVar		db	"NEXT expecting a defined variable",CR,0
FFFC6616 70786520
FFFC661A 69746365
FFFC661E 6120676E
FFFC6622 66656420
FFFC6626 64656E69
FFFC662A 72617620
FFFC662E 6C626169
FFFC6632 47000D65
FFFC6635 4F544F47	msgBadGotoGosub	db	"GOTO/GOSUB bad line number",CR,0
FFFC6639 534F472F
FFFC663D 62204255
FFFC6641 6C206461
FFFC6645 20656E69
FFFC6649 626D756E
FFFC664D 000D7265
FFFC6651 55544552	msgRetWoGosub   db	"RETURN without GOSUB",CR,0
FFFC6655 77204E52
FFFC6659 6F687469
FFFC665D 47207475
FFFC6661 4255534F
FFFC6665 7250000D
FFFC6667 676F7250	msgTooBig		db	"Program is too big",CR,0
FFFC666B 206D6172
FFFC666F 74207369
FFFC6673 62206F6F
FFFC6677 000D6769
FFFC667B 72747845	msgExtraChars	db	"Extra characters on line ignored",CR,0
FFFC667F 68632061
FFFC6683 63617261
FFFC6687 73726574
FFFC668B 206E6F20
FFFC668F 656E696C
FFFC6693 6E676920
FFFC6697 6465726F
FFFC669B 4520000D
FFFC669D 766E4520	msgEnvFail		db	" Environment call failed",CR,0
FFFC66A1 6E6F7269
FFFC66A5 746E656D
FFFC66A9 6C616320
FFFC66AD 6166206C
FFFC66B1 64656C69
FFFC66B5 7845000D
FFFC66B7 65707845	msgParen		db	"Expecting parenthesis",CR,0
FFFC66BB 6E697463
FFFC66BF 61702067
FFFC66C3 746E6572
FFFC66C7 69736568
FFFC66CB 00000D73
                        	
                        	LSTROM	equ	*		; end of possible ROM area
;	END
                        	
                        	.file "boot.r5a",1
                        	.file "boot.r5a",1
                        	.file "SpriteDemo.s",1
                        	.file "SpriteDemo.s",1
                        	.file "SpriteDemo.s",2
                        		code
FFFC66CE E6370000		align	1
                        	
                        	;====================================================
                        	; Basic Block 0
                        	;====================================================
                        	public code _EnableSprite:
; 	pSPRCTRL[0x180] = pSPRCTRL[0x180] | (1 << spriteno);
FFFC66D0 FFDAE637		      	ldo      	$t1,4292530176+3072
FFFC66D4 C0060613
FFFC66D8 00060633
FFFC66DC 00063D83
FFFC66E0 00106E93		      	ldi      	$t3,#1
FFFC66E4 00073F03		      	ldo      	$t4,0[$sp]
FFFC66E8 01EE9E33		      	sll      	$t2,$t3,$t4
FFFC66EC 01CDED33		      	or       	$t0,$t1,$t2
FFFC66F0 FFDAE637		      	sto      	$t0,4292530176+3072
FFFC66F4 C0060613
FFFC66F8 00060633
FFFC66FC 01A63023
                        	SpriteDemo_9:
FFFC6700 02070713		      	add      	$sp,$sp,#32
FFFC6704 00008067		      	ret      
                        	endpublic
                        	
                        	;====================================================
                        	; Basic Block 0
                        	;====================================================
FFFC6708 FE070713	public code _RandomizeSpriteColors:
	      	sub      	$sp,$sp,#32
FFFC670C 00273023		      	sto      	$fp,[$sp]
FFFC6710 00073423		      	sto      	$x0,8[$sp]
FFFC6714 00173C23		      	sto      	$ra,24[$sp]
FFFC6718 00076133		      	mov      	$fp,$sp
FFFC671C FD470713		      	sub      	$sp,$sp,#44
FFFC6720 00473023		      	sto      	$s1,0[$sp]
FFFC6724 FF813203		      	ldo      	$s1,-8[$fp]
                        	; 	randStream = 0;
FFFC6728 00025637		      	sto      	$x0,_randStream
FFFC672C 83060613
FFFC6730 00060633
FFFC6734 00063023
                        	; 	for (colorno = 2; colorno < 256; colorno++) {
FFFC6738 00206213		      	ldi      	$s1,#2
FFFC673C 10022D13		      	slt      	$t0,$s1,#256
FFFC6740 040D0463		      	beqz     	$t0,SpriteDemo_22
                        	SpriteDemo_21:
                        	; 		pSprite[colorno] = GetRand(randStream) & 0xffffffff;
FFFC6744 00321D13		      	sll      	$t0,$s1,#3
FFFC6748 FFDAD637		      	add      	$t1,$t0,#4292530176
FFFC674C 00060613
FFFC6750 01A60DB3
FFFC6754 FFB13223		      	sto      	$t1,-28[$fp]
FFFC6758 00025637		      	ldo      	$a0,_randStream
FFFC675C 83060613
FFFC6760 00060633
FFFC6764 00063903
FFFC6768 00000637		      	call     	_GetRand
FFFC676C 000600E7
FFFC6770 00086E33		      	mov      	$t2,$v0
FFFC6774 FFFE7D93		      	and      	$t1,$t2,#4294967295
FFFC6778 01BDB023		      	sto      	$t1,[$t1]
                        	SpriteDemo_23:
FFFC677C 00120213		      	add      	$s1,$s1,#1
FFFC6780 10022D13		      	slt      	$t0,$s1,#256
FFFC6784 FC0D10E3		      	bnez     	$t0,SpriteDemo_21
                        	SpriteDemo_22:
                        	SpriteDemo_17:
                        	SpriteDemo_20:
FFFC6788 00073203		      	ldo      	$s1,0[$sp]
FFFC678C 00016733		      	mov      	$sp,$fp
FFFC6790 00073103		      	ldo      	$fp,[$sp]
FFFC6794 01873083		      	ldo      	$ra,24[$sp]
FFFC6798 02070713		      	add      	$sp,$sp,#32
FFFC679C 00008067		      	ret      
                        	endpublic
                        	
                        	;====================================================
                        	; Basic Block 0
                        	;====================================================
FFFC67A0 FE070713	public code _SetSpritePos:
	      	sub      	$sp,$sp,#32
FFFC67A4 00273023		      	sto      	$fp,[$sp]
FFFC67A8 00073423		      	sto      	$x0,8[$sp]
FFFC67AC 00076133		      	mov      	$fp,$sp
FFFC67B0 FEE70713		      	sub      	$sp,$sp,#18
FFFC67B4 00473023		      	sto      	$s1,0[$sp]
                        	; 	__int32 *pSprite = &((unsigned __int64 *)0xFFDAD000)[0x100];
FFFC67B8 FFDAE237		      	ldi      	$s1,#4292532224
FFFC67BC 80020213
                        	; 	pSprite[spriteno*4 + 2] = (y << 16) | x;
FFFC67C0 02013E83		      	ldo      	$t3,32[$fp]
FFFC67C4 002E9E13		      	sll      	$t2,$t3,#2
FFFC67C8 002E1D93		      	sll      	$t1,$t2,#2
FFFC67CC 004D8D33		      	add      	$t0,$t1,$s1
FFFC67D0 03413E83		      	ldo      	$t3,52[$fp]
FFFC67D4 010E9E13		      	sll      	$t2,$t3,#16
FFFC67D8 02A13E83		      	ldo      	$t3,42[$fp]
FFFC67DC 01DE6DB3		      	or       	$t1,$t2,$t3
FFFC67E0 01BD2423		      	stt      	$t1,8[$t0]
                        	SpriteDemo_31:
FFFC67E4 00073203		      	ldo      	$s1,0[$sp]
FFFC67E8 00016733		      	mov      	$sp,$fp
FFFC67EC 00073103		      	ldo      	$fp,[$sp]
FFFC67F0 02070713		      	add      	$sp,$sp,#32
FFFC67F4 00008067		      	ret      
                        	endpublic
                        	
                        	.file "SpriteDemo.s",97
                        		code
FFFC67F8 00000000		align	1
FFFC67FC 00000000
                        	
                        	;====================================================
                        	; Basic Block 0
                        	;====================================================
FFFC6800 FE070713	public code _RandomizeSpritePositions:
	      	sub      	$sp,$sp,#32
FFFC6804 00273023		      	sto      	$fp,[$sp]
FFFC6808 00073423		      	sto      	$x0,8[$sp]
FFFC680C 00173C23		      	sto      	$ra,24[$sp]
FFFC6810 00076133		      	mov      	$fp,$sp
FFFC6814 FB870713		      	sub      	$sp,$sp,#72
FFFC6818 00473023		      	sto      	$s1,0[$sp]
FFFC681C 00573423		      	sto      	$s2,8[$sp]
FFFC6820 00673823		      	sto      	$s3,16[$sp]
FFFC6824 00773C23		      	sto      	$s4,24[$sp]
FFFC6828 FF813203		      	ldo      	$s1,-8[$fp]
FFFC682C FD813283		      	ldo      	$s2,-40[$fp]
FFFC6830 FE413303		      	ldo      	$s3,-28[$fp]
FFFC6834 FEE13383		      	ldo      	$s4,-18[$fp]
                        	; 	int spriteno;
FFFC6838 FFDAE2B7		      	ldi      	$s2,#4292532224
FFFC683C 80028293
                        	; 	randStream = 0;
FFFC6840 00025637		      	sto      	$x0,_randStream
FFFC6844 83060613
FFFC6848 00060633
FFFC684C 00063023
                        	; 	for (spriteno = 0; spriteno < 64; spriteno++) {
FFFC6850 00006233		      	mov      	$s1,$x0
FFFC6854 04022D13		      	slt      	$t0,$s1,#64
FFFC6858 080D0263		      	beqz     	$t0,SpriteDemo_44
                        	SpriteDemo_43:
                        	; 		x = (GetRand(randStream) % 800) + 256;
FFFC685C 00025637		      	ldo      	$a0,_randStream
FFFC6860 83060613
FFFC6864 00060633
FFFC6868 00063903
FFFC686C 00000637		      	call     	_GetRand
FFFC6870 000600E7
FFFC6874 00086E33		      	mov      	$t2,$v0
FFFC6878 32006E93		      	ldi      	$t3,#800
FFFC687C 100D8D13		      	add      	$t0,$t1,#256
FFFC6880 000D63B3		      	mov      	$s4,$t0
                        	; 		y = (GetRand(randStream) % 600) + 28;
FFFC6884 00025637		      	ldo      	$a0,_randStream
FFFC6888 83060613
FFFC688C 00060633
FFFC6890 00063903
FFFC6894 00000637		      	call     	_GetRand
FFFC6898 000600E7
FFFC689C 00086E33		      	mov      	$t2,$v0
FFFC68A0 25806E93		      	ldi      	$t3,#600
FFFC68A4 01CD8D13		      	add      	$t0,$t1,#28
FFFC68A8 000D6333		      	mov      	$s3,$t0
                        	; 		pSprite[1] = (2560 << 48) | (y << 16) | x;
FFFC68AC 01031E13		      	sll      	$t2,$s3,#16
FFFC68B0 FFFC7637		      	ldo      	$t3,SpriteDemo_longlit0
FFFC68B4 00060613
FFFC68B8 00060633
FFFC68BC 00063E83
FFFC68C0 01DE6DB3		      	or       	$t1,$t2,$t3
FFFC68C4 007DED33		      	or       	$t0,$t1,$s4
FFFC68C8 01A2B423		      	sto      	$t0,8[$s2]
                        	; 		pSprite += 2;
FFFC68CC 01028293		      	add      	$s2,$s2,#16
FFFC68D0 00120213		      	add      	$s1,$s1,#1
FFFC68D4 04022D13		      	slt      	$t0,$s1,#64
FFFC68D8 F80D12E3		      	bnez     	$t0,SpriteDemo_43
                        	SpriteDemo_44:
                        	SpriteDemo_39:
                        	SpriteDemo_42:
FFFC68DC 00073203		      	ldo      	$s1,0[$sp]
FFFC68E0 00873283		      	ldo      	$s2,8[$sp]
FFFC68E4 01073303		      	ldo      	$s3,16[$sp]
FFFC68E8 01873383		      	ldo      	$s4,24[$sp]
FFFC68EC 00016733		      	mov      	$sp,$fp
FFFC68F0 00073103		      	ldo      	$fp,[$sp]
FFFC68F4 01873083		      	ldo      	$ra,24[$sp]
FFFC68F8 02070713		      	add      	$sp,$sp,#32
FFFC68FC 00008067		      	ret      
                        	endpublic
                        	
                        	.file "SpriteDemo.s",176
                        		code
                        		align	16                        	
                        	;====================================================
                        	; Basic Block 0
                        	;====================================================
FFFC6900 FE070713	public code _SpriteDemo:
	      	sub      	$sp,$sp,#32
FFFC6904 00273023		      	sto      	$fp,[$sp]
FFFC6908 00073423		      	sto      	$x0,8[$sp]
FFFC690C 00173C23		      	sto      	$ra,24[$sp]
FFFC6910 00076133		      	mov      	$fp,$sp
FFFC6914 B3E70713		      	sub      	$sp,$sp,#1218
FFFC6918 00473023		      	sto      	$s1,0[$sp]
FFFC691C 00573423		      	sto      	$s2,8[$sp]
FFFC6920 00673823		      	sto      	$s3,16[$sp]
FFFC6924 00773C23		      	sto      	$s4,24[$sp]
FFFC6928 02873023		      	sto      	$s5,32[$sp]
FFFC692C 02973423		      	sto      	$s6,40[$sp]
FFFC6930 02A73823		      	sto      	$s7,48[$sp]
FFFC6934 02B73C23		      	sto      	$s8,56[$sp]
FFFC6938 04C73023		      	sto      	$s9,64[$sp]
FFFC693C FF813203		      	ldo      	$s1,-8[$fp]
FFFC6940 BDE13283		      	ldo      	$s2,-1058[$fp]
FFFC6944 BD413303		      	ldo      	$s3,-1068[$fp]
FFFC6948 EF610393		      	lea      	$s4,-266[$fp]
FFFC694C DF210413		      	lea      	$s5,-526[$fp]
FFFC6950 BEA10493		      	lea      	$s6,-1046[$fp]
FFFC6954 BC013503		      	ldo      	$s7,-1088[$fp]
FFFC6958 CEE10593		      	lea      	$s8,-786[$fp]
FFFC695C BB613603		      	ldo      	$s9,-1098[$fp]
                        	; 	int spriteno;
FFFC6960 FFDAED37		      	ldi      	$t0,#4292532224
FFFC6964 800D0D13
FFFC6968 BBA13423		      	sto      	$t0,-1112[$fp]
                        	; 	randStream = 0;
FFFC696C 00025637		      	sto      	$x0,_randStream
FFFC6970 83060613
FFFC6974 00060633
FFFC6978 00063023
                        	; 	RandomizeSpriteColors();
FFFC697C D8DFF0EF		      	call     	_RandomizeSpriteColors
                        	; 	EnableSprites(-1);
FFFC6980 FF870713		      	sub      	$sp,$sp,#8
FFFC6984 FFF06D13		      	ldi      	$t0,#-1
FFFC6988 01A73023		      	sto      	$t0,0[$sp]
FFFC698C 00000637		      	call     	_EnableSprites
FFFC6990 000600E7
FFFC6994 00870713		      	add      	$sp,$sp,#8
                        	; 	for (n = 0; n < 64 * 32 * 4; n = n + 1)
FFFC6998 000062B3		      	mov      	$s2,$x0
FFFC699C 00002637		      	slt      	$t0,$s2,#8192
FFFC69A0 00060613
FFFC69A4 060D0863		      	beqz     	$t0,SpriteDemo_88
                        	SpriteDemo_87:
                        	; 		pImages[n] = GetRand(randStream)|(GetRand(randStream)<<32);
FFFC69A8 00329D13		      	sll      	$t0,$s2,#3
FFFC69AC 1E000637		      	add      	$t1,$t0,#503316480
FFFC69B0 00060613
FFFC69B4 01A60DB3
FFFC69B8 B9B13723		      	sto      	$t1,-1138[$fp]
FFFC69BC 00025637		      	ldo      	$a0,_randStream
FFFC69C0 83060613
FFFC69C4 00060633
FFFC69C8 00063903
FFFC69CC 00000637		      	call     	_GetRand
FFFC69D0 000600E7
FFFC69D4 00086E33		      	mov      	$t2,$v0
FFFC69D8 00025637		      	ldo      	$a0,_randStream
FFFC69DC 83060613
FFFC69E0 00060633
FFFC69E4 00063903
FFFC69E8 00000637		      	call     	_GetRand
FFFC69EC 000600E7
FFFC69F0 00086F33		      	mov      	$t4,$v0
FFFC69F4 000F1E93		      	sll      	$t3,$t4,#32
FFFC69F8 01DE6DB3		      	or       	$t1,$t2,$t3
FFFC69FC 01BDB023		      	sto      	$t1,[$t1]
FFFC6A00 00128D13		      	add      	$t0,$s2,#1
FFFC6A04 000D62B3		      	mov      	$s2,$t0
FFFC6A08 00002637		      	slt      	$t0,$s2,#8192
FFFC6A0C 00060613
FFFC6A10 F80D1CE3		      	bnez     	$t0,SpriteDemo_87
                        	SpriteDemo_88:
                        	; 	x = 256; y = 64;
FFFC6A14 10006513		      	ldi      	$s7,#256
FFFC6A18 04006613		      	ldi      	$s9,#64
                        	; 	for (spriteno = 0; spriteno < 64; spriteno++) {
FFFC6A1C 00006233		      	mov      	$s1,$x0
FFFC6A20 04022D13		      	slt      	$t0,$s1,#64
FFFC6A24 080D0063		      	beqz     	$t0,SpriteDemo_91
                        	SpriteDemo_90:
                        	; 		pSprite[spriteno*2] = (int)&pImages[spriteno * 128];
FFFC6A28 00121D93		      	sll      	$t1,$s1,#1
FFFC6A2C 003D9D13		      	sll      	$t0,$t1,#3
FFFC6A30 BA813D83		      	ldo      	$t1,-1112[$fp]
FFFC6A34 01AD8E33		      	add      	$t2,$t1,$t0
FFFC6A38 B9C13723		      	sto      	$t2,-1138[$fp]
FFFC6A3C 00721E93		      	sll      	$t3,$s1,#7
FFFC6A40 003E9E13		      	sll      	$t2,$t3,#3
FFFC6A44 1E000637		      	add      	$t1,$t2,#503316480
FFFC6A48 00060613
FFFC6A4C 01C60DB3
FFFC6A50 01BE3023		      	sto      	$t1,[$t2]
                        	; 		xpos[spriteno] = x;
FFFC6A54 00221D13		      	sll      	$t0,$s1,#2
FFFC6A58 01A38DB3		      	add      	$t1,$s4,$t0
FFFC6A5C 00ADA023		      	stt      	$s7,[$t1]
                        	; 		ypos[spriteno] = y;
FFFC6A60 00221D13		      	sll      	$t0,$s1,#2
FFFC6A64 01A40DB3		      	add      	$t1,$s5,$t0
FFFC6A68 00CDA023		      	stt      	$s9,[$t1]
                        	; 		SetSpritePos(spriteno, x, y);
FFFC6A6C FE870713		      	sub      	$sp,$sp,#24
FFFC6A70 00473023		      	sto      	$s1,0[$sp]
FFFC6A74 00A73423		      	sto      	$s7,8[$sp]
FFFC6A78 00C73823		      	sto      	$s9,16[$sp]
FFFC6A7C D25FF0EF		      	call     	_SetSpritePos
FFFC6A80 01870713		      	add      	$sp,$sp,#24
                        	; 		x += 20;
FFFC6A84 01450513		      	add      	$s7,$s7,#20
                        	; 		if (x >= 800) {
FFFC6A88 32052D13		      	slt      	$t0,$s7,#800
FFFC6A8C 000D1663		      	bnez     	$t0,SpriteDemo_93
                        	; 			x = 256;
FFFC6A90 10006513		      	ldi      	$s7,#256
                        	; 			y += 64;
FFFC6A94 04060613		      	add      	$s9,$s9,#64
                        	SpriteDemo_93:
FFFC6A98 00120213		      	add      	$s1,$s1,#1
FFFC6A9C 04022D13		      	slt      	$t0,$s1,#64
FFFC6AA0 F80D14E3		      	bnez     	$t0,SpriteDemo_90
                        	SpriteDemo_91:
                        	; 	for (spriteno = 0; spriteno < 64; spriteno++) {
FFFC6AA4 00006233		      	mov      	$s1,$x0
FFFC6AA8 04022D13		      	slt      	$t0,$s1,#64
FFFC6AAC 060D0C63		      	beqz     	$t0,SpriteDemo_96
                        	SpriteDemo_95:
                        	; 		dx[spriteno] = (GetRand(randStream) & 15) - 8;
FFFC6AB0 00221D13		      	sll      	$t0,$s1,#2
FFFC6AB4 01A58DB3		      	add      	$t1,$s8,$t0
FFFC6AB8 B9B13723		      	sto      	$t1,-1138[$fp]
FFFC6ABC 00025637		      	ldo      	$a0,_randStream
FFFC6AC0 83060613
FFFC6AC4 00060633
FFFC6AC8 00063903
FFFC6ACC 00000637		      	call     	_GetRand
FFFC6AD0 000600E7
FFFC6AD4 00086EB3		      	mov      	$t3,$v0
FFFC6AD8 00FEFE13		      	and      	$t2,$t3,#15
FFFC6ADC FF8E0D93		      	sub      	$t1,$t2,#8
FFFC6AE0 01BDA023		      	stt      	$t1,[$t1]
                        	; 		dy[spriteno] = (GetRand(randStream) & 15) - 8;
FFFC6AE4 00221D13		      	sll      	$t0,$s1,#2
FFFC6AE8 01A48DB3		      	add      	$t1,$s6,$t0
FFFC6AEC B9B13723		      	sto      	$t1,-1138[$fp]
FFFC6AF0 00025637		      	ldo      	$a0,_randStream
FFFC6AF4 83060613
FFFC6AF8 00060633
FFFC6AFC 00063903
FFFC6B00 00000637		      	call     	_GetRand
FFFC6B04 000600E7
FFFC6B08 00086EB3		      	mov      	$t3,$v0
FFFC6B0C 00FEFE13		      	and      	$t2,$t3,#15
FFFC6B10 FF8E0D93		      	sub      	$t1,$t2,#8
FFFC6B14 01BDA023		      	stt      	$t1,[$t1]
FFFC6B18 00120213		      	add      	$s1,$s1,#1
FFFC6B1C 04022D13		      	slt      	$t0,$s1,#64
FFFC6B20 F80D18E3		      	bnez     	$t0,SpriteDemo_95
                        	SpriteDemo_96:
                        	; 	for (n = 0; n < 64 * 32 * 2; n = n + 1)
FFFC6B24 000062B3		      	mov      	$s2,$x0
FFFC6B28 00001637		      	slt      	$t0,$s2,#4096
FFFC6B2C 00060613
FFFC6B30 040D0663		      	beqz     	$t0,SpriteDemo_99
                        	SpriteDemo_98:
                        	; 		pImages[n] = GetRand(randStream);
FFFC6B34 00329D13		      	sll      	$t0,$s2,#3
FFFC6B38 1E000637		      	add      	$t1,$t0,#503316480
FFFC6B3C 00060613
FFFC6B40 01A60DB3
FFFC6B44 B9B13723		      	sto      	$t1,-1138[$fp]
FFFC6B48 00025637		      	ldo      	$a0,_randStream
FFFC6B4C 83060613
FFFC6B50 00060633
FFFC6B54 00063903
FFFC6B58 00000637		      	call     	_GetRand
FFFC6B5C 000600E7
FFFC6B60 00086DB3		      	mov      	$t1,$v0
FFFC6B64 01BDB023		      	sto      	$t1,[$t1]
FFFC6B68 00128D13		      	add      	$t0,$s2,#1
FFFC6B6C 000D62B3		      	mov      	$s2,$t0
FFFC6B70 00001637		      	slt      	$t0,$s2,#4096
FFFC6B74 00060613
FFFC6B78 FA0D1EE3		      	bnez     	$t0,SpriteDemo_98
                        	SpriteDemo_99:
                        	SpriteDemo_101:
                        	; 	__asm {
                        		      	;asm     	
FFFC6B7C FFDC0637				ldt		$v0,BUTTONS
FFFC6B80 60060613
FFFC6B84 00060633
FFFC6B88 00062803
FFFC6B8C 01085813				srl		$v0,$v0,#16
FFFC6B90 01F87813				and		$v0,$v0,#$1F
                        	; 	}
FFFC6B94 00086D33		      	mov      	$t0,$v0
FFFC6B98 BDA13523		      	sto      	$t0,-1078[$fp]
                        	; 		for (m = 0; m < 50000; m++);	// Timing delay
FFFC6B9C 00006333		      	mov      	$s3,$x0
FFFC6BA0 0000C637		      	slt      	$t0,$s3,#50000
FFFC6BA4 35060613
FFFC6BA8 000D0A63		      	beqz     	$t0,SpriteDemo_107
                        	SpriteDemo_106:
FFFC6BAC 00130313		      	add      	$s3,$s3,#1
FFFC6BB0 0000C637		      	slt      	$t0,$s3,#50000
FFFC6BB4 35060613
FFFC6BB8 FE0D1AE3		      	bnez     	$t0,SpriteDemo_106
                        	SpriteDemo_107:
                        	; 		for (spriteno = 0; spriteno < 64; spriteno++) {
FFFC6BBC 00006233		      	mov      	$s1,$x0
FFFC6BC0 04022D13		      	slt      	$t0,$s1,#64
FFFC6BC4 160D0063		      	beqz     	$t0,SpriteDemo_110
                        	SpriteDemo_109:
                        	; 			xpos[spriteno] = xpos[spriteno] + dx[spriteno];
FFFC6BC8 00221D13		      	sll      	$t0,$s1,#2
FFFC6BCC 01A38DB3		      	add      	$t1,$s4,$t0
FFFC6BD0 B9B13723		      	sto      	$t1,-1138[$fp]
FFFC6BD4 00221E13		      	sll      	$t2,$s1,#2
FFFC6BD8 01C38EB3		      	add      	$t3,$s4,$t2
FFFC6BDC B9D13723		      	sto      	$t3,-1138[$fp]
FFFC6BE0 00221E93		      	sll      	$t3,$s1,#2
FFFC6BE4 01D58F33		      	add      	$t4,$s8,$t3
FFFC6BE8 01EE8DB3		      	add      	$t1,$t3,$t4
FFFC6BEC 01BDA023		      	stt      	$t1,[$t1]
                        	; 			ypos[spriteno] = ypos[spriteno] + dy[spriteno];
FFFC6BF0 00221D13		      	sll      	$t0,$s1,#2
FFFC6BF4 01A40DB3		      	add      	$t1,$s5,$t0
FFFC6BF8 B9B13723		      	sto      	$t1,-1138[$fp]
FFFC6BFC 00221E13		      	sll      	$t2,$s1,#2
FFFC6C00 01C40EB3		      	add      	$t3,$s5,$t2
FFFC6C04 B9D13723		      	sto      	$t3,-1138[$fp]
FFFC6C08 00221E93		      	sll      	$t3,$s1,#2
FFFC6C0C 01D48F33		      	add      	$t4,$s6,$t3
FFFC6C10 01EE8DB3		      	add      	$t1,$t3,$t4
FFFC6C14 01BDA023		      	stt      	$t1,[$t1]
                        	; 			if (xpos[spriteno] < 256) {
FFFC6C18 00221D13		      	sll      	$t0,$s1,#2
FFFC6C1C 01A38DB3		      	add      	$t1,$s4,$t0
FFFC6C20 B9B13723		      	sto      	$t1,-1138[$fp]
FFFC6C24 100DAD93		      	slt      	$t1,$t1,#256
FFFC6C28 020D8863		      	beqz     	$t1,SpriteDemo_112
                        	; 				xpos[spriteno] = 256;
FFFC6C2C 00221D13		      	sll      	$t0,$s1,#2
FFFC6C30 10006D93		      	ldi      	$t1,#256
                        	; 				dx[spriteno] = -dx[spriteno];
FFFC6C34 00221D13		      	sll      	$t0,$s1,#2
FFFC6C38 01A58DB3		      	add      	$t1,$s8,$t0
FFFC6C3C B9B13723		      	sto      	$t1,-1138[$fp]
FFFC6C40 00221E13		      	sll      	$t2,$s1,#2
FFFC6C44 01C58EB3		      	add      	$t3,$s8,$t2
FFFC6C48 001B1D01		      	neg      	$t1,$t3
FFFC6C4C 1B010005
FFFC6C4D 1B1B0100		      	sxh      	$t1,$t1
FFFC6C51 23000A00
FFFC6C53 BDA02300		      	stt      	$t1,[$t1]
FFFC6C57 221D1301
                        	SpriteDemo_112:
                        	; 			if (xpos[spriteno] >= 816) {
FFFC6C58 00221D13		      	sll      	$t0,$s1,#2
FFFC6C5C 01A38DB3		      	add      	$t1,$s4,$t0
FFFC6C60 B9B13723		      	sto      	$t1,-1138[$fp]
FFFC6C64 330DAD93		      	slt      	$t1,$t1,#816
FFFC6C68 020D9863		      	bnez     	$t1,SpriteDemo_114
                        	; 				xpos[spriteno] = 816;
FFFC6C6C 00221D13		      	sll      	$t0,$s1,#2
FFFC6C70 33006D93		      	ldi      	$t1,#816
                        	; 				dx[spriteno] = -dx[spriteno];
FFFC6C74 00221D13		      	sll      	$t0,$s1,#2
FFFC6C78 01A58DB3		      	add      	$t1,$s8,$t0
FFFC6C7C B9B13723		      	sto      	$t1,-1138[$fp]
FFFC6C80 00221E13		      	sll      	$t2,$s1,#2
FFFC6C84 01C58EB3		      	add      	$t3,$s8,$t2
FFFC6C88 001B1D01		      	neg      	$t1,$t3
FFFC6C8C 1B010005
FFFC6C8D 1B1B0100		      	sxh      	$t1,$t1
FFFC6C91 23000A00
FFFC6C93 BDA02300		      	stt      	$t1,[$t1]
FFFC6C97 221D1301
                        	SpriteDemo_114:
                        	; 			if (ypos[spriteno] < 28) {
FFFC6C98 00221D13		      	sll      	$t0,$s1,#2
FFFC6C9C 01A40DB3		      	add      	$t1,$s5,$t0
FFFC6CA0 B9B13723		      	sto      	$t1,-1138[$fp]
FFFC6CA4 01CDAD93		      	slt      	$t1,$t1,#28
FFFC6CA8 020D8863		      	beqz     	$t1,SpriteDemo_116
                        	; 				ypos[spriteno] = 28;
FFFC6CAC 00221D13		      	sll      	$t0,$s1,#2
FFFC6CB0 01C06D93		      	ldi      	$t1,#28
                        	; 				dy[spriteno] = -dy[spriteno];
FFFC6CB4 00221D13		      	sll      	$t0,$s1,#2
FFFC6CB8 01A48DB3		      	add      	$t1,$s6,$t0
FFFC6CBC B9B13723		      	sto      	$t1,-1138[$fp]
FFFC6CC0 00221E13		      	sll      	$t2,$s1,#2
FFFC6CC4 01C48EB3		      	add      	$t3,$s6,$t2
FFFC6CC8 001B1D01		      	neg      	$t1,$t3
FFFC6CCC 1B010005
FFFC6CCD 1B1B0100		      	sxh      	$t1,$t1
FFFC6CD1 23000A00
FFFC6CD3 BDA02300		      	stt      	$t1,[$t1]
FFFC6CD7 221D1301
                        	SpriteDemo_116:
                        	; 			if (ypos[spriteno] >= 614)
FFFC6CD8 00221D13		      	sll      	$t0,$s1,#2
FFFC6CDC 01A40DB3		      	add      	$t1,$s5,$t0
FFFC6CE0 B9B13723		      	sto      	$t1,-1138[$fp]
FFFC6CE4 266DAD93		      	slt      	$t1,$t1,#614
FFFC6CE8 000D9663		      	bnez     	$t1,SpriteDemo_118
                        	; 				ypos[spriteno] = 614;
FFFC6CEC 00221D13		      	sll      	$t0,$s1,#2
FFFC6CF0 26606D93		      	ldi      	$t1,#614
                        	SpriteDemo_118:
                        	; 				dy[spriteno] = -dy[spriteno];
FFFC6CF4 00221D13		      	sll      	$t0,$s1,#2
FFFC6CF8 01A48DB3		      	add      	$t1,$s6,$t0
FFFC6CFC B9B13723		      	sto      	$t1,-1138[$fp]
FFFC6D00 00221E13		      	sll      	$t2,$s1,#2
FFFC6D04 01C48EB3		      	add      	$t3,$s6,$t2
FFFC6D08 001B1D01		      	neg      	$t1,$t3
FFFC6D0C 1B010005
FFFC6D0D 1B1B0100		      	sxh      	$t1,$t1
FFFC6D11 23000A00
FFFC6D13 BDA02300		      	stt      	$t1,[$t1]
FFFC6D17 12021301
FFFC6D18 00120213		      	add      	$s1,$s1,#1
FFFC6D1C 04022D13		      	slt      	$t0,$s1,#64
FFFC6D20 EA0D14E3		      	bnez     	$t0,SpriteDemo_109
                        	SpriteDemo_110:
                        	; 			SetSpritePos(spriteno, (int)xpos[spriteno], (int)ypos[spriteno]);
FFFC6D24 FE870713		      	sub      	$sp,$sp,#24
FFFC6D28 00473023		      	sto      	$s1,0[$sp]
FFFC6D2C 00221D13		      	sll      	$t0,$s1,#2
FFFC6D30 01A38DB3		      	add      	$t1,$s4,$t0
FFFC6D34 01B73423		      	sto      	$t1,8[$sp]
FFFC6D38 00221D13		      	sll      	$t0,$s1,#2
FFFC6D3C 01A40DB3		      	add      	$t1,$s5,$t0
FFFC6D40 01B73823		      	sto      	$t1,16[$sp]
FFFC6D44 A5DFF0EF		      	call     	_SetSpritePos
FFFC6D48 01870713		      	add      	$sp,$sp,#24
FFFC6D4C E20008E3		      	bra      	SpriteDemo_101
                        	SpriteDemo_83:
                        	SpriteDemo_86:
FFFC6D50 00073203		      	ldo      	$s1,0[$sp]
FFFC6D54 00873283		      	ldo      	$s2,8[$sp]
FFFC6D58 01073303		      	ldo      	$s3,16[$sp]
FFFC6D5C 01873383		      	ldo      	$s4,24[$sp]
FFFC6D60 02073403		      	ldo      	$s5,32[$sp]
FFFC6D64 02873483		      	ldo      	$s6,40[$sp]
FFFC6D68 03073503		      	ldo      	$s7,48[$sp]
FFFC6D6C 03873583		      	ldo      	$s8,56[$sp]
FFFC6D70 04073603		      	ldo      	$s9,64[$sp]
FFFC6D74 00016733		      	mov      	$sp,$fp
FFFC6D78 00073103		      	ldo      	$fp,[$sp]
FFFC6D7C 01873083		      	ldo      	$ra,24[$sp]
FFFC6D80 02070713		      	add      	$sp,$sp,#32
FFFC6D84 00008067		      	ret      
                        	endpublic
                        	
                        		rodata
                        		align	16                        	
                        		extern	_tcbs
	extern	_nMsgBlk
	extern	_mmu_Free512kPage
	extern	_mmu_Alloc8kPage
	extern	_mmu_alloc
	extern	_IOFocusTbl
	extern	_outb
	extern	_outc
	extern	_mmu_MapCardMemory
	extern	_FMTK_StartApp
	extern	_outh
	extern	_irq_stack
	extern	_IOFocusNdx
	extern	_DumpTaskList
;	global	_GetImLevel
                        		extern	_outw
	extern	_fmtk_irq_stack
	extern	_mmu_SetOperateKey
	extern	_keybdControlCodes
	extern	_fmtk_sys_stack
	extern	_message
	extern	_mailbox
	extern	_FMTK_Inited
;	global	_UnlockIOFSemaphore
                        		extern	_KeybdSetLED
	extern	_mmu_AllocateMap
	extern	_FMTK_StartThread
;	global	_DBGCheckForKey
                        		extern	_GetRunningACBPtr
	extern	_KeyLED
	extern	_hFocusSwitchMbx
	extern	_KeybdClearRcv
	extern	_missed_ticks
;	global	_SetVBA
                        		extern	_mmu_SetMapEntry
	extern	_LockIOFSemaphore
	extern	_chkTCB
;	global	_UnlockSemaphore
                        	;	global	_DBGGetKey
                        		extern	_mmu_Alloc512kPage
	extern	_GetVecno
	extern	_GetACBPtr
;	global	_UnlockKbdSemaphore
                        		extern	_video_bufs
	extern	_getCPU
;	global	_LEDS
                        		extern	_hasUltraHighPriorityTasks
	extern	_LockSemaphore
	extern	_keybdExtendedCodes
	extern	_iof_switch
	extern	_KeybdGetScancode
	extern	_kbd_sema
	extern	_DeviceTable
	extern	_nMailbox
	extern	_unshiftedScanCodes
	extern	_set_vector
	extern	_LockKbdSemaphore
	extern	_FMTK_SendMsg
	extern	_iof_sema
	extern	_sys_stacks
	extern	_FocusSwitcher
	extern	_BIOS_RespMbx
	extern	_FMTK_WaitMsg
	extern	_mmu_FreeMap
	extern	_mmu_Free8kPage
	extern	_mmu_free
	extern	_mmu_SetAccessKey
	extern	_shiftedScanCodes
	extern	_KeyState1
	extern	_KeyState2
	extern	_BIOS1_sema
	extern	_sys_sema
	extern	_readyQ
	extern	_LockSysSemaphore
	extern	_ACBPtrs
	extern	_sysstack
	extern	_freeTCB
	extern	_RequestIOFocus
	extern	_TimeoutList
	extern	_RemoveFromTimeoutList
	extern	_stacks
	extern	_freeMSG
	extern	_freeMBX
	extern	_SetBound50
	extern	_SetBound51
	extern	_GetAppHandle
	extern	_SetBound48
	extern	_SetBound49
	extern	_InsertIntoTimeoutList
;	global	_RestoreImLevel
                        		extern	_RemoveFromReadyList
	extern	_KeybdGetStatus
	extern	_bios_stacks
	extern	_FMTK_Reschedule
	extern	_InsertIntoReadyList
.file "boot.r5a",1
                        	.file "TinyBasic.r5a",1
                        	;****************************************************************;
                        	;                                                                ;
                        	;		Tiny BASIC for the CS01                                      ;
                        	;                                                                ;
                        	; Derived from a 68000 derivative of Palo Alto Tiny BASIC as     ;
                        	; published in the May 1976 issue of Dr. Dobb's Journal.         ;
                        	; Adapted to the 68000 by:                                       ;
                        	;	Gordon brndly						                         ;
                        	;	12147 - 51 Street					                         ;
                        	;	Edmonton AB  T5W 3G8					                     ;
                        	;	Canada							                             ;
                        	;	(updated mailing address for 1996)			                 ;
                        	;                                                                ;
                        	; Adapted to the CS01 by:                                        ;
                        	;    Robert Finch                                                ;
                        	;    Ontario, Canada                                             ;
                        	;	 robfinch<remove>@finitron.ca    	                             ;  
                        	;****************************************************************;
                        	;  Copyright (C) 2016-2020 by Robert Finch. This program may be	 ;
                        	;    freely distributed for personal use only. All commercial	 ;
                        	;		       rights are reserved.			                     ;
                        	;****************************************************************;
                        	;
                        	; Register Usage
                        	; $t2 = text pointer (global usage)
                        	; r3,r4 = inputs parameters to subroutines
                        	; a1 = return value
                        	;
                        	;* Vers. 1.0  1984/7/17	- Original version by Gordon brndly
                        	;*	1.1  1984/12/9	- Addition of '0x' print term by Marvin Lipford
                        	;*	1.2  1985/4/9	- Bug fix in multiply routine by Rick Murray
                        	
                        	CR		EQU	0x0D		;ASCII equates
                        	LINEFD	EQU	0x0A		; Don't use LF (same as load float instruction)
                        	TAB		EQU	0x09
                        	CTRLC	EQU	0x03
                        	CTRLH	EQU	0x08
                        	CTRLI	EQU	0x09
                        	CTRLJ	EQU	0x0A
                        	CTRLK	EQU	0x0B
                        	CTRLM   EQU 0x0D
                        	CTRLS	EQU	0x13
                        	CTRLX	EQU	0x18
                        	XON		EQU	0x11
                        	XOFF	EQU	0x13
                        	
                        	FILENAME	EQU		0x3F6C0
                        	FILEBUF		EQU		0x03F600
                        	OSSP		EQU		0x30000
                        	TXTUNF		EQU		OSSP+4
                        	VARBGN		EQU		TXTUNF+4
                        	VAREND		EQU		VARBGN+4
                        	LOPVAR		EQU		VAREND+4
                        	STKGOS		EQU		LOPVAR+4
                        	CURRNT		EQU		STKGOS+4
                        	BUFFER		EQU		CURRNT+4
                        	BUFLEN		EQU		84
                        	LOPPT		EQU		BUFFER+84
                        	LOPLN		EQU		LOPPT+4
                        	LOPINC		EQU		LOPLN+4
                        	LOPLMT		EQU		LOPINC+4
                        	NUMWKA		EQU		LOPLMT+24
                        	STKINP		EQU		NUMWKA+4
                        	STKBOT		EQU		STKINP+4
                        	usrJmp		EQU		STKBOT+4
                        	IRQROUT		EQU		usrJmp+4
                        	
                        	OUTPTR		EQU		IRQROUT+4
                        	INPPTR		EQU		OUTPTR+4
                        	CursorFlash	EQU		INPPTR+4
                        	IRQFlag		EQU		CursorFlash+4
                        	
                        	;
                        	; Modifiable system constants:
                        	;
                        	;THRD_AREA	dw	0x04000000	; threading switch area 0x04000000-0x40FFFFF
                        	;bitmap dw	0x00100000	; bitmap graphics memory 0x04100000-0x417FFFF
                        	TXTBGN		EQU		0x031800	;TXT ;beginning of program memory
                        	ENDMEM		EQU		0x03FFFC	; end of available memory
                        	STACKOFFS	EQU		0xAFFFC000	; stack offset
                        	
                        	
                        		rodata
                        		align	16                        	
                        		align	8                        	
                        	SpriteDemo_longlit0:
FFFC7000 0000046E80000000		dco	A00000000000000
                        		extern	_GetRand
;	global	_EnableSprite
                        	;	global	_SetSpritePos
                        	;	global	_RandomizeSpritePositions
                        	;	global	_SpriteDemo
                        		extern	_randStream
	extern	_EnableSprites
;	global	_RandomizeSpriteColors
                        	.file "boot.r5a",1
                        	.file "boot.r5a",1
                        	
                        		rodata
                        		align 8                        	
                        	begin_init_data:
                        	_begin_init_data:
                        		data
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
FFFC8000 00000000            		fill.b	4,0x00
FFFC8004 00000000            		align	
                        	
                        		align	8                        	
                        		align	8                        	
FFFC8008 00000000            		fill.b	4,0x00
FFFC800C 00000000            		align	
                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
FFFC8010 0000000000000000		fill.b	40,0x00
FFFC8018 0000000000000000
FFFC8020 0000000000000000
FFFC8028 0000000000000000
FFFC8030 0000000000000000
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
FFFC8038 0000000000000000		fill.b	6,0x00
FFFC803E 00000000            		align	
                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
FFFC8040 0000000000000000		fill.b	20,0x00
FFFC8048 0000000000000000
FFFC8050 00000000            
FFFC8054 00000000            		align	
                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
FFFC8058 0000000000000000		fill.b	8,0x00
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
FFFC8060 0000000000000000		fill.b	944,0x00
FFFC8068 0000000000000000
FFFC8070 0000000000000000
FFFC8078 0000000000000000
FFFC8080 0000000000000000
FFFC8088 0000000000000000
FFFC8090 0000000000000000
FFFC8098 0000000000000000
FFFC80A0 0000000000000000
FFFC80A8 0000000000000000
FFFC80B0 0000000000000000
FFFC80B8 0000000000000000
FFFC80C0 0000000000000000
FFFC80C8 0000000000000000
FFFC80D0 0000000000000000
FFFC80D8 0000000000000000
FFFC80E0 0000000000000000
FFFC80E8 0000000000000000
FFFC80F0 0000000000000000
FFFC80F8 0000000000000000
FFFC8100 0000000000000000
FFFC8108 0000000000000000
FFFC8110 0000000000000000
FFFC8118 0000000000000000
FFFC8120 0000000000000000
FFFC8128 0000000000000000
FFFC8130 0000000000000000
FFFC8138 0000000000000000
FFFC8140 0000000000000000
FFFC8148 0000000000000000
FFFC8150 0000000000000000
FFFC8158 0000000000000000
FFFC8160 0000000000000000
FFFC8168 0000000000000000
FFFC8170 0000000000000000
FFFC8178 0000000000000000
FFFC8180 0000000000000000
FFFC8188 0000000000000000
FFFC8190 0000000000000000
FFFC8198 0000000000000000
FFFC81A0 0000000000000000
FFFC81A8 0000000000000000
FFFC81B0 0000000000000000
FFFC81B8 0000000000000000
FFFC81C0 0000000000000000
FFFC81C8 0000000000000000
FFFC81D0 0000000000000000
FFFC81D8 0000000000000000
FFFC81E0 0000000000000000
FFFC81E8 0000000000000000
FFFC81F0 0000000000000000
FFFC81F8 0000000000000000
FFFC8200 0000000000000000
FFFC8208 0000000000000000
FFFC8210 0000000000000000
FFFC8218 0000000000000000
FFFC8220 0000000000000000
FFFC8228 0000000000000000
FFFC8230 0000000000000000
FFFC8238 0000000000000000
FFFC8240 0000000000000000
FFFC8248 0000000000000000
FFFC8250 0000000000000000
FFFC8258 0000000000000000
FFFC8260 0000000000000000
FFFC8268 0000000000000000
FFFC8270 0000000000000000
FFFC8278 0000000000000000
FFFC8280 0000000000000000
FFFC8288 0000000000000000
FFFC8290 0000000000000000
FFFC8298 0000000000000000
FFFC82A0 0000000000000000
FFFC82A8 0000000000000000
FFFC82B0 0000000000000000
FFFC82B8 0000000000000000
FFFC82C0 0000000000000000
FFFC82C8 0000000000000000
FFFC82D0 0000000000000000
FFFC82D8 0000000000000000
FFFC82E0 0000000000000000
FFFC82E8 0000000000000000
FFFC82F0 0000000000000000
FFFC82F8 0000000000000000
FFFC8300 0000000000000000
FFFC8308 0000000000000000
FFFC8310 0000000000000000
FFFC8318 0000000000000000
FFFC8320 0000000000000000
FFFC8328 0000000000000000
FFFC8330 0000000000000000
FFFC8338 0000000000000000
FFFC8340 0000000000000000
FFFC8348 0000000000000000
FFFC8350 0000000000000000
FFFC8358 0000000000000000
FFFC8360 0000000000000000
FFFC8368 0000000000000000
FFFC8370 0000000000000000
FFFC8378 0000000000000000
FFFC8380 0000000000000000
FFFC8388 0000000000000000
FFFC8390 0000000000000000
FFFC8398 0000000000000000
FFFC83A0 0000000000000000
FFFC83A8 0000000000000000
FFFC83B0 0000000000000000
FFFC83B8 0000000000000000
FFFC83C0 0000000000000000
FFFC83C8 0000000000000000
FFFC83D0 0000000000000000
FFFC83D8 0000000000000000
FFFC83E0 0000000000000000
FFFC83E8 0000000000000000
FFFC83F0 0000000000000000
FFFC83F8 0000000000000000
FFFC8400 0000000000000000
FFFC8408 0000000000000000
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
FFFC8410 0000000000000000		fill.b	8,0x00
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		data
                        		align	8                        	
                        		data
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		data
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        	
FFFC8418 0000000000000000		rodata
FFFC8420 0000000000000000
FFFC8428 0000000000000000
FFFC8430 0000000000000000
FFFC8438 0000000000000000
FFFC8440 0000000000000000
FFFC8448 0000000000000000
FFFC8450 0000000000000000
FFFC8458 0000000000000000
FFFC8460 0000000000000000
FFFC8468 0000000000000000
FFFC8470 0000000000000000
FFFC8478 0000000000000000
FFFC8480 0000000000000000
FFFC8488 0000000000000000
FFFC8490 0000000000000000
FFFC8498 0000000000000000
FFFC84A0 0000000000000000
FFFC84A8 0000000000000000
FFFC84B0 0000000000000000
FFFC84B8 0000000000000000
FFFC84C0 0000000000000000
FFFC84C8 0000000000000000
FFFC84D0 0000000000000000
FFFC84D8 0000000000000000
FFFC84E0 0000000000000000
FFFC84E8 0000000000000000
FFFC84F0 0000000000000000
FFFC84F8 0000000000000000
FFFC8500 0000000000000000
FFFC8508 0000000000000000
FFFC8510 0000000000000000
FFFC8518 0000000000000000
FFFC8520 0000000000000000
FFFC8528 0000000000000000
FFFC8530 0000000000000000
FFFC8538 0000000000000000
FFFC8540 0000000000000000
FFFC8548 0000000000000000
FFFC8550 0000000000000000
FFFC8558 0000000000000000
FFFC8560 0000000000000000
FFFC8568 0000000000000000
FFFC8570 0000000000000000
FFFC8578 0000000000000000
FFFC8580 0000000000000000
FFFC8588 0000000000000000
FFFC8590 0000000000000000
FFFC8598 0000000000000000
FFFC85A0 0000000000000000
FFFC85A8 0000000000000000
FFFC85B0 0000000000000000
FFFC85B8 0000000000000000
FFFC85C0 0000000000000000
FFFC85C8 0000000000000000
FFFC85D0 0000000000000000
FFFC85D8 0000000000000000
FFFC85E0 0000000000000000
FFFC85E8 0000000000000000
FFFC85F0 0000000000000000
FFFC85F8 0000000000000000
FFFC8600 0000000000000000
FFFC8608 0000000000000000
FFFC8610 0000000000000000
FFFC8618 0000000000000000
FFFC8620 0000000000000000
FFFC8628 0000000000000000
FFFC8630 0000000000000000
FFFC8638 0000000000000000
FFFC8640 0000000000000000
FFFC8648 0000000000000000
FFFC8650 0000000000000000
FFFC8658 0000000000000000
FFFC8660 0000000000000000
FFFC8668 0000000000000000
FFFC8670 0000000000000000
FFFC8678 0000000000000000
FFFC8680 0000000000000000
FFFC8688 0000000000000000
FFFC8690 0000000000000000
FFFC8698 0000000000000000
FFFC86A0 0000000000000000
FFFC86A8 0000000000000000
FFFC86B0 0000000000000000
FFFC86B8 0000000000000000
FFFC86C0 0000000000000000
FFFC86C8 0000000000000000
FFFC86D0 0000000000000000
FFFC86D8 0000000000000000
FFFC86E0 0000000000000000
FFFC86E8 0000000000000000
FFFC86F0 0000000000000000
FFFC86F8 0000000000000000
FFFC8700 0000000000000000
FFFC8708 0000000000000000
FFFC8710 0000000000000000
FFFC8718 0000000000000000
FFFC8720 0000000000000000
FFFC8728 0000000000000000
FFFC8730 0000000000000000
FFFC8738 0000000000000000
FFFC8740 0000000000000000
FFFC8748 0000000000000000
FFFC8750 0000000000000000
FFFC8758 0000000000000000
FFFC8760 0000000000000000
FFFC8768 0000000000000000
FFFC8770 0000000000000000
FFFC8778 0000000000000000
FFFC8780 0000000000000000
FFFC8788 0000000000000000
FFFC8790 0000000000000000
FFFC8798 0000000000000000
FFFC87A0 0000000000000000
FFFC87A8 0000000000000000
FFFC87B0 0000000000000000
FFFC87B8 0000000000000000
FFFC87C0 0000000000000000
FFFC87C8 0000000000000000
FFFC87D0 0000000000000000
FFFC87D8 0000000000000000
FFFC87E0 0000000000000000
FFFC87E8 0000000000000000
FFFC87F0 0000000000000000
FFFC87F8 0000000000000000
FFFC8800 0000000000000000
FFFC8808 0000000000000000
FFFC8810 0000000000000000
FFFC8818 0000000000000000
FFFC8820 0000000000000000
FFFC8828 0000000000000000
FFFC8830 0000000000000000
FFFC8838 0000000000000000
FFFC8840 0000000000000000
FFFC8848 0000000000000000
FFFC8850 0000000000000000
FFFC8858 0000000000000000
FFFC8860 0000000000000000
FFFC8868 0000000000000000
FFFC8870 0000000000000000
FFFC8878 0000000000000000
FFFC8880 0000000000000000
FFFC8888 0000000000000000
FFFC8890 0000000000000000
FFFC8898 0000000000000000
FFFC88A0 0000000000000000
FFFC88A8 0000000000000000
FFFC88B0 0000000000000000
FFFC88B8 0000000000000000
FFFC88C0 0000000000000000
FFFC88C8 0000000000000000
FFFC88D0 0000000000000000
FFFC88D8 0000000000000000
FFFC88E0 0000000000000000
FFFC88E8 0000000000000000
FFFC88F0 0000000000000000
FFFC88F8 0000000000000000
FFFC8900 0000000000000000
FFFC8908 0000000000000000
FFFC8910 0000000000000000
FFFC8918 0000000000000000
FFFC8920 0000000000000000
FFFC8928 0000000000000000
FFFC8930 0000000000000000
FFFC8938 0000000000000000
FFFC8940 0000000000000000
FFFC8948 0000000000000000
FFFC8950 0000000000000000
FFFC8958 0000000000000000
FFFC8960 0000000000000000
FFFC8968 0000000000000000
FFFC8970 0000000000000000
FFFC8978 0000000000000000
FFFC8980 0000000000000000
FFFC8988 0000000000000000
FFFC8990 0000000000000000
FFFC8998 0000000000000000
FFFC89A0 0000000000000000
FFFC89A8 0000000000000000
FFFC89B0 0000000000000000
FFFC89B8 0000000000000000
FFFC89C0 0000000000000000
FFFC89C8 0000000000000000
FFFC89D0 0000000000000000
FFFC89D8 0000000000000000
FFFC89E0 0000000000000000
FFFC89E8 0000000000000000
FFFC89F0 0000000000000000
FFFC89F8 0000000000000000
FFFC8A00 0000000000000000
FFFC8A08 0000000000000000
FFFC8A10 0000000000000000
FFFC8A18 0000000000000000
FFFC8A20 0000000000000000
FFFC8A28 0000000000000000
FFFC8A30 0000000000000000
FFFC8A38 0000000000000000
FFFC8A40 0000000000000000
FFFC8A48 0000000000000000
FFFC8A50 0000000000000000
FFFC8A58 0000000000000000
FFFC8A60 0000000000000000
FFFC8A68 0000000000000000
FFFC8A70 0000000000000000
FFFC8A78 0000000000000000
FFFC8A80 0000000000000000
FFFC8A88 0000000000000000
FFFC8A90 0000000000000000
FFFC8A98 0000000000000000
FFFC8AA0 0000000000000000
FFFC8AA8 0000000000000000
FFFC8AB0 0000000000000000
FFFC8AB8 0000000000000000
FFFC8AC0 0000000000000000
FFFC8AC8 0000000000000000
FFFC8AD0 0000000000000000
FFFC8AD8 0000000000000000
FFFC8AE0 0000000000000000
FFFC8AE8 0000000000000000
FFFC8AF0 0000000000000000
FFFC8AF8 0000000000000000
FFFC8B00 0000000000000000
FFFC8B08 0000000000000000
FFFC8B10 0000000000000000
FFFC8B18 0000000000000000
FFFC8B20 0000000000000000
FFFC8B28 0000000000000000
FFFC8B30 0000000000000000
FFFC8B38 0000000000000000
FFFC8B40 0000000000000000
FFFC8B48 0000000000000000
FFFC8B50 0000000000000000
FFFC8B58 0000000000000000
FFFC8B60 0000000000000000
FFFC8B68 0000000000000000
FFFC8B70 0000000000000000
FFFC8B78 0000000000000000
FFFC8B80 0000000000000000
FFFC8B88 0000000000000000
FFFC8B90 0000000000000000
FFFC8B98 0000000000000000
FFFC8BA0 0000000000000000
FFFC8BA8 0000000000000000
FFFC8BB0 0000000000000000
FFFC8BB8 0000000000000000
FFFC8BC0 0000000000000000
FFFC8BC8 0000000000000000
FFFC8BD0 0000000000000000
FFFC8BD8 0000000000000000
FFFC8BE0 0000000000000000
FFFC8BE8 0000000000000000
FFFC8BF0 0000000000000000
FFFC8BF8 0000000000000000
FFFC8C00 0000000000000000
FFFC8C08 0000000000000000
FFFC8C10 0000000000000000
FFFC8C18 0000000000000000
FFFC8C20 0000000000000000
FFFC8C28 0000000000000000
FFFC8C30 0000000000000000
FFFC8C38 0000000000000000
FFFC8C40 0000000000000000
FFFC8C48 0000000000000000
FFFC8C50 0000000000000000
FFFC8C58 0000000000000000
FFFC8C60 0000000000000000
FFFC8C68 0000000000000000
FFFC8C70 0000000000000000
FFFC8C78 0000000000000000
FFFC8C80 0000000000000000
FFFC8C88 0000000000000000
FFFC8C90 0000000000000000
FFFC8C98 0000000000000000
FFFC8CA0 0000000000000000
FFFC8CA8 0000000000000000
FFFC8CB0 0000000000000000
FFFC8CB8 0000000000000000
FFFC8CC0 0000000000000000
FFFC8CC8 0000000000000000
FFFC8CD0 0000000000000000
FFFC8CD8 0000000000000000
FFFC8CE0 0000000000000000
FFFC8CE8 0000000000000000
FFFC8CF0 0000000000000000
FFFC8CF8 0000000000000000
FFFC8D00 0000000000000000
FFFC8D08 0000000000000000
FFFC8D10 0000000000000000
FFFC8D18 0000000000000000
FFFC8D20 0000000000000000
FFFC8D28 0000000000000000
FFFC8D30 0000000000000000
FFFC8D38 0000000000000000
FFFC8D40 0000000000000000
FFFC8D48 0000000000000000
FFFC8D50 0000000000000000
FFFC8D58 0000000000000000
FFFC8D60 0000000000000000
FFFC8D68 0000000000000000
FFFC8D70 0000000000000000
FFFC8D78 0000000000000000
FFFC8D80 0000000000000000
FFFC8D88 0000000000000000
FFFC8D90 0000000000000000
FFFC8D98 0000000000000000
FFFC8DA0 0000000000000000
FFFC8DA8 0000000000000000
FFFC8DB0 0000000000000000
FFFC8DB8 0000000000000000
FFFC8DC0 0000000000000000
FFFC8DC8 0000000000000000
FFFC8DD0 0000000000000000
FFFC8DD8 0000000000000000
FFFC8DE0 0000000000000000
FFFC8DE8 0000000000000000
FFFC8DF0 0000000000000000
FFFC8DF8 0000000000000000
FFFC8E00 0000000000000000
FFFC8E08 0000000000000000
FFFC8E10 0000000000000000
FFFC8E18 0000000000000000
FFFC8E20 0000000000000000
FFFC8E28 0000000000000000
FFFC8E30 0000000000000000
FFFC8E38 0000000000000000
FFFC8E40 0000000000000000
FFFC8E48 0000000000000000
FFFC8E50 0000000000000000
FFFC8E58 0000000000000000
FFFC8E60 0000000000000000
FFFC8E68 0000000000000000
FFFC8E70 0000000000000000
FFFC8E78 0000000000000000
FFFC8E80 0000000000000000
FFFC8E88 0000000000000000
FFFC8E90 0000000000000000
FFFC8E98 0000000000000000
FFFC8EA0 0000000000000000
FFFC8EA8 0000000000000000
FFFC8EB0 0000000000000000
FFFC8EB8 0000000000000000
FFFC8EC0 0000000000000000
FFFC8EC8 0000000000000000
FFFC8ED0 0000000000000000
FFFC8ED8 0000000000000000
FFFC8EE0 0000000000000000
FFFC8EE8 0000000000000000
FFFC8EF0 0000000000000000
FFFC8EF8 0000000000000000
FFFC8F00 0000000000000000
FFFC8F08 0000000000000000
FFFC8F10 0000000000000000
FFFC8F18 0000000000000000
FFFC8F20 0000000000000000
FFFC8F28 0000000000000000
FFFC8F30 0000000000000000
FFFC8F38 0000000000000000
FFFC8F40 0000000000000000
FFFC8F48 0000000000000000
FFFC8F50 0000000000000000
FFFC8F58 0000000000000000
FFFC8F60 0000000000000000
FFFC8F68 0000000000000000
FFFC8F70 0000000000000000
FFFC8F78 0000000000000000
FFFC8F80 0000000000000000
FFFC8F88 0000000000000000
FFFC8F90 0000000000000000
FFFC8F98 0000000000000000
FFFC8FA0 0000000000000000
FFFC8FA8 0000000000000000
FFFC8FB0 0000000000000000
FFFC8FB8 0000000000000000
FFFC8FC0 0000000000000000
FFFC8FC8 0000000000000000
FFFC8FD0 0000000000000000
FFFC8FD8 0000000000000000
FFFC8FE0 0000000000000000
FFFC8FE8 0000000000000000
FFFC8FF0 0000000000000000
FFFC8FF8 0000000000000000
                        		align 8                        	
                        	end_init_data:
                        	_end_init_data:
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
FFFC8418 00000000            		fill.b	4,0x00
FFFC841C 00000000            		align	
                        	
                        		align	8                        	
                        		align	8                        	
FFFC8420 00000000            		fill.b	4,0x00
FFFC8424 00000000            		align	
                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
FFFC8428 0000000000000000		fill.b	40,0x00
FFFC8430 0000000000000000
FFFC8438 0000000000000000
FFFC8440 0000000000000000
FFFC8448 0000000000000000
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
FFFC8450 0000000000000000		fill.b	6,0x00
FFFC8456 00000000            		align	
                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
FFFC8458 0000000000000000		fill.b	20,0x00
FFFC8460 0000000000000000
FFFC8468 00000000            
FFFC846C 00000000            		align	
                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
FFFC8470 0000000000000000		fill.b	8,0x00
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
FFFC8478 0000000000000000		fill.b	944,0x00
FFFC8480 0000000000000000
FFFC8488 0000000000000000
FFFC8490 0000000000000000
FFFC8498 0000000000000000
FFFC84A0 0000000000000000
FFFC84A8 0000000000000000
FFFC84B0 0000000000000000
FFFC84B8 0000000000000000
FFFC84C0 0000000000000000
FFFC84C8 0000000000000000
FFFC84D0 0000000000000000
FFFC84D8 0000000000000000
FFFC84E0 0000000000000000
FFFC84E8 0000000000000000
FFFC84F0 0000000000000000
FFFC84F8 0000000000000000
FFFC8500 0000000000000000
FFFC8508 0000000000000000
FFFC8510 0000000000000000
FFFC8518 0000000000000000
FFFC8520 0000000000000000
FFFC8528 0000000000000000
FFFC8530 0000000000000000
FFFC8538 0000000000000000
FFFC8540 0000000000000000
FFFC8548 0000000000000000
FFFC8550 0000000000000000
FFFC8558 0000000000000000
FFFC8560 0000000000000000
FFFC8568 0000000000000000
FFFC8570 0000000000000000
FFFC8578 0000000000000000
FFFC8580 0000000000000000
FFFC8588 0000000000000000
FFFC8590 0000000000000000
FFFC8598 0000000000000000
FFFC85A0 0000000000000000
FFFC85A8 0000000000000000
FFFC85B0 0000000000000000
FFFC85B8 0000000000000000
FFFC85C0 0000000000000000
FFFC85C8 0000000000000000
FFFC85D0 0000000000000000
FFFC85D8 0000000000000000
FFFC85E0 0000000000000000
FFFC85E8 0000000000000000
FFFC85F0 0000000000000000
FFFC85F8 0000000000000000
FFFC8600 0000000000000000
FFFC8608 0000000000000000
FFFC8610 0000000000000000
FFFC8618 0000000000000000
FFFC8620 0000000000000000
FFFC8628 0000000000000000
FFFC8630 0000000000000000
FFFC8638 0000000000000000
FFFC8640 0000000000000000
FFFC8648 0000000000000000
FFFC8650 0000000000000000
FFFC8658 0000000000000000
FFFC8660 0000000000000000
FFFC8668 0000000000000000
FFFC8670 0000000000000000
FFFC8678 0000000000000000
FFFC8680 0000000000000000
FFFC8688 0000000000000000
FFFC8690 0000000000000000
FFFC8698 0000000000000000
FFFC86A0 0000000000000000
FFFC86A8 0000000000000000
FFFC86B0 0000000000000000
FFFC86B8 0000000000000000
FFFC86C0 0000000000000000
FFFC86C8 0000000000000000
FFFC86D0 0000000000000000
FFFC86D8 0000000000000000
FFFC86E0 0000000000000000
FFFC86E8 0000000000000000
FFFC86F0 0000000000000000
FFFC86F8 0000000000000000
FFFC8700 0000000000000000
FFFC8708 0000000000000000
FFFC8710 0000000000000000
FFFC8718 0000000000000000
FFFC8720 0000000000000000
FFFC8728 0000000000000000
FFFC8730 0000000000000000
FFFC8738 0000000000000000
FFFC8740 0000000000000000
FFFC8748 0000000000000000
FFFC8750 0000000000000000
FFFC8758 0000000000000000
FFFC8760 0000000000000000
FFFC8768 0000000000000000
FFFC8770 0000000000000000
FFFC8778 0000000000000000
FFFC8780 0000000000000000
FFFC8788 0000000000000000
FFFC8790 0000000000000000
FFFC8798 0000000000000000
FFFC87A0 0000000000000000
FFFC87A8 0000000000000000
FFFC87B0 0000000000000000
FFFC87B8 0000000000000000
FFFC87C0 0000000000000000
FFFC87C8 0000000000000000
FFFC87D0 0000000000000000
FFFC87D8 0000000000000000
FFFC87E0 0000000000000000
FFFC87E8 0000000000000000
FFFC87F0 0000000000000000
FFFC87F8 0000000000000000
FFFC8800 0000000000000000
FFFC8808 0000000000000000
FFFC8810 0000000000000000
FFFC8818 0000000000000000
FFFC8820 0000000000000000
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
FFFC8828 0000000000000000		fill.b	8,0x00
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		data
                        		align	8                        	
                        		data
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		data
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
                        		align	8                        	
1217 symbols
  Symbol Name                              seg     address bits
  A00000000000000                          rodata  800000000000046e 32
  ABS                                        code  fffc59dc 18
  ABS1                                       code  fffc59f0 18
  ADDEXPR                                    code  fffc5554 18
  ALLOCMBX                                   code  fffc62a0 18
  ALLOCMBX.0001                              code  fffc62c4 18
  ALLOCMBX.0002                              code  fffc62f4 18
  ALLOCMBX.paren                             code  fffc6304 18
  ANDEXPR                                    code  fffc5340 18
  AUXIN                                      code  80000000000002c7 32
  AUXIN_INIT                                 code  800000000000039a 32
  AUXOCRLF                                   code  fffc5180 18
  AUXOUT                                     code  80000000000002c5 32
  AUXOUT_FLUSH                               code  80000000000003a7 32
  AUXOUT_INIT                                code  800000000000039e 32
  Alloc                                      code  fffc0fb4 18
  Alloc.0001                                 code  fffc1030 18
  Alloc.enough                               code  fffc0ff4 18
  Alloc.noRun                                code  fffc1054 18
  Alloc.noRun2                               code  fffc0fec 18
  Alloc.xit                                  code  fffc1058 18
  AllocInCurrentAS                           code  fffc0fa8 18
  AllocStack                                 code  fffc1070 18
  AllocStack.0001                            code  fffc10ac 18
  AllocStack.xit                             code  fffc10c0 18
  AllocTCB                                   code  fffc2f50 18
  AllocTCB.0001                              code  fffc2f64 18
  AllocTCB.0002                              code  fffc2f9c 18
  AllocTCB.0003                              code  fffc2fac 18
  AllocTCB.allocTid                          code  fffc2f90 18
  BASPRMPT                                   code  fffc4468 18
  BIOSCallTbl                                code  fffc0e80 18
  BIOS_ClearScreen                           code  fffc0e88 18
  BIOS_HomeCursor                            code  fffc0e8c 18
  BIOS_VideoPutChar                          code  fffc0e90 18
  BIOS_VideoPutString                        code  fffc0e94 18
  BS                                        const  000008 5
  BUFFER                                    const  03001c 19
  BUFLEN                                    const  000054 8
  BUTTONS                                   const  ffdc0600 33
  BYEBYE                                     code  fffc64b8 18
  CHKIO                                      code  fffc6258 18
  CHKRET                                     code  fffc6274 18
  CLMSG                                      code  fffc6515 18
  CR                                        const  00000d 5
  CRLF                                       code  fffc6280 18
  CSR_REGSET                                const  000790 12
  CSTART                                     code  fffc4330 32
  CTRLC                                     const  000003 3
  CTRLH                                     const  000008 5
  CTRLI                                     const  000009 5
  CTRLJ                                     const  00000a 5
  CTRLK                                     const  00000b 5
  CTRLM                                     const  00000d 5
  CTRLS                                     const  000013 6
  CTRLX                                     const  000018 6
  CURRNT                                    const  030018 19
  CopyDevFuncTbl                             code  fffc34cc 18
  CopyDevFuncTbl.again                       code  fffc34e0 18
  CursorFlash                               const  0300b0 19
  CursorX                                   const  024800 19
  CursorY                                   const  024801 19
  DBGKeybd_100                               code  fffc3f44 18
  DBGKeybd_101                               code  fffc3f94 18
  DBGKeybd_102                               code  fffc3fb8 18
  DBGKeybd_103                               code  fffc4128 18
  DBGKeybd_104                               code  fffc414c 18
  DBGKeybd_105                               code  fffc4188 18
  DBGKeybd_106                               code  fffc4284 18
  DBGKeybd_107                               code  fffc41b8 18
  DBGKeybd_108                               code  fffc4284 18
  DBGKeybd_109                               code  fffc420c 18
  DBGKeybd_111                               code  fffc423c 18
  DBGKeybd_113                               code  fffc426c 18
  DBGKeybd_5                                 code  fffc3d60 18
  DBGKeybd_62                                code  fffc3e04 18
  DBGKeybd_65                                code  fffc3e04 18
  DBGKeybd_66                                code  fffc3dbc 18
  DBGKeybd_68                                code  fffc3dd4 18
  DBGKeybd_69                                code  fffc3dec 18
  DBGKeybd_71                                code  fffc3dec 18
  DBGKeybd_72                                code  fffc3dfc 18
  DBGKeybd_73                                code  fffc3e38 18
  DBGKeybd_74                                code  fffc3e28 18
  DBGKeybd_76                                code  fffc3e54 18
  DBGKeybd_77                                code  fffc3e60 18
  DBGKeybd_79                                code  fffc4284 18
  DBGKeybd_8                                 code  fffc3d60 18
  DBGKeybd_90                                code  fffc3ea4 18
  DBGKeybd_91                                code  fffc3ebc 18
  DBGKeybd_92                                code  fffc3ee4 18
  DBGKeybd_93                                code  fffc3f58 18
  DBGKeybd_94                                code  fffc3fcc 18
  DBGKeybd_95                                code  fffc402c 18
  DBGKeybd_96                                code  fffc408c 18
  DBGKeybd_97                                code  fffc40ec 18
  DBGKeybd_98                                code  fffc4160 18
  DBGKeybd_99                                code  fffc3f20 18
  DCB_LastErc                               const  000018 6
  DCB_Mbx                                   const  000048 8
  DCB_Name                                  const  000000 1
  DCB_ReentCount                            const  000038 7
  DCB_Resv1                                 const  000058 8
  DCB_Resv2                                 const  000060 8
  DCB_Size                                  const  000068 8
  DCB_StartBlock                            const  000020 7
  DCB_Type                                  const  00000c 5
  DCB_fSingleUser                           const  000039 7
  DCB_hJob                                  const  000040 8
  DCB_nBPB                                  const  000010 6
  DCB_nBlocks                               const  000028 7
  DCB_pCmdProc                              const  000030 7
  DCB_pSema                                 const  000050 8
  DEFLT                                      code  fffc4ec8 18
  DEL                                       const  00007f 8
  DIRECT                                     code  fffc4760 18
  DOQUO                                      code  fffc6218 18
  DOQUO1                                     code  fffc6224 18
  DRSP_DONE                                 const  000001 2
  DVC_BuildBPB                              const  000005 4
  DVC_Close                                 const  000007 4
  DVC_FlushInput                            const  000014 6
  DVC_FlushOutput                           const  000015 6
  DVC_GetChar                               const  000008 5
  DVC_GetCharDirect                         const  00000a 5
  DVC_IOCTRL_READ                           const  000018 6
  DVC_IOCTRL_WRITE                          const  000019 6
  DVC_IRQ                                   const  000016 6
  DVC_Initialize                            const  000002 3
  DVC_InputStatus                           const  00000c 5
  DVC_IsRemoveable                          const  000017 6
  DVC_MediaCheck                            const  000004 4
  DVC_Nop                                   const  000000 1
  DVC_Open                                  const  000006 4
  DVC_OutputStatus                          const  000013 6
  DVC_OutputUntilBusy                       const  00001a 6
  DVC_PeekChar                              const  000009 5
  DVC_PeekCharDirect                        const  00000b 5
  DVC_PutChar                               const  00000d 5
  DVC_ReadBlock                             const  000010 6
  DVC_SetPosition                           const  00000f 5
  DVC_Setup                                 const  000001 2
  DVC_Status                                const  000003 3
  DVC_VerifyBlock                           const  000012 6
  DVC_WriteBlock                            const  000011 6
  DVF_Base                                  const  022000 19
  DVF_Limit                                 const  024000 19
  DeleteLine                                 code  fffc4520 18
  DeleteLine.0001                            code  fffc454c 18
  DeleteLine.0002                            code  fffc4538 18
  DeleteLine.0003                            code  fffc4550 18
  DispAttr                                  const  024808 19
  DumpMemmap                                 code  fffc081c 18
  DumpMemmap.again                           code  fffc0830 18
  DumpReadyList                              code  fffc2ffc 18
  DumpReadyList.0001                         code  fffc3078 18
  DumpReadyList.0002                         code  fffc3034 18
  DumpReadyList.brk                          code  fffc30c0 18
  DumpReadyList.nxt                          code  fffc30b4 18
  DumpTimeoutList                            code  fffc30ec 18
  DumpTimeoutList.0002                       code  fffc3128 18
  DumpTimeoutList.brk                        code  fffc3160 18
  ENDCHK                                     code  fffc5b28 18
  ENDMEM                                    const  03fffc 19
  ERETx                                      code  8000000000000236 32
  ERROR                                      code  fffc5b78 18
  ERROR1                                     code  fffc5bd0 18
  EX1                                        code  fffc47ac 18
  EXEC                                       code  fffc4770 18
  EXGO                                       code  fffc47d4 18
  EXLP                                       code  fffc477c 18
  EXMAT                                      code  fffc47c0 18
  EXNGO                                      code  fffc4794 18
  EXPR                                       code  fffc5430 18
  E_Arg                                     const  000001 2
  E_BadAlarm                                const  000011 6
  E_BadBlockNum                             const  000025 7
  E_BadCallno                               const  00001a 6
  E_BadDevNum                               const  000020 7
  E_BadDevOp                                const  000022 7
  E_BadMbx                                  const  000004 4
  E_DCBInUse                                const  000019 6
  E_NoDev                                   const  000021 7
  E_NoMem                                   const  00000c 5
  E_NoMoreAlarmBlks                         const  000044 8
  E_NoMoreMbx                               const  000040 8
  E_NoMoreMsgBlks                           const  000041 8
  E_NoMoreTCBs                              const  000045 8
  E_NoMsg                                   const  00000b 5
  E_NoThread                                const  000006 4
  E_NotAlloc                                const  000009 5
  E_NotOwner                                const  000012 6
  E_Ok                                      const  000000 1
  E_QueFull                                 const  000005 4
  E_QueStrategy                             const  000013 6
  E_ReadError                               const  000023 7
  E_Timeout                                 const  000010 6
  E_TooManyBlocks                           const  000026 7
  E_WriteError                              const  000024 7
  EditMem                                    code  fffc05ec 18
  FFFC0100                                   code  80000000000002b7 32
  FI1                                        code  fffc5b08 18
  FI2                                        code  fffc5b1c 18
  FILEBUF                                   const  03f600 19
  FILENAME                                  const  03f6c0 19
  FIN                                        code  fffc5aec 18
  FINISH                                     code  fffc4af8 18
  FMTKInit                                   code  fffc1e6c 18
  FMTKInit.0001                              code  fffc1f38 18
  FMTKInit.0002                              code  fffc1f6c 18
  FMTKInit.0003                              code  fffc1f1c 18
  FMTK_AllocMbx                              code  fffc2908 18
  FMTK_AllocMbx.badArg                       code  fffc296c 18
  FMTK_AllocMbx.noOwner                      code  fffc2940 18
  FMTK_AllocMbx.nxt                          code  fffc2920 18
  FMTK_AllocMbx.xit                          code  fffc2970 18
  FMTK_AllocVideoBuf                         code  fffc2874 18
  FMTK_AllocVideoBuf.err                     code  fffc28a4 18
  FMTK_ExitTask                              code  fffc27d8 18
  FMTK_ExitTask.xit                          code  fffc27f8 18
  FMTK_ForceReleaseIOFocus                   code  fffc33a8 18
  FMTK_ForceReleaseIOFocus.0001              code  fffc3470 18
  FMTK_ForceReleaseIOFocus.done              code  fffc347c 18
  FMTK_ForceReleaseIOFocus.noFocus           code  fffc347c 18
  FMTK_ForceReleaseIOFocus.noSwitch          code  fffc33bc 18
  FMTK_ForceReleaseIOFocus.notSame           code  fffc343c 18
  FMTK_ForceReleaseIOFocus.pjSame            code  fffc345c 18
  FMTK_FreeMbx                               code  fffc297c 18
  FMTK_FreeMbx.0001                          code  fffc29e8 18
  FMTK_FreeMbx.0002                          code  fffc29ac 18
  FMTK_FreeMbx.0003                          code  fffc29d8 18
  FMTK_FreeMbx.badMbx                        code  fffc29fc 18
  FMTK_FreeMbx.xit                           code  fffc2a00 18
  FMTK_GetCurrentTid                         code  fffc1fa4 18
  FMTK_HasIOFocus                            code  fffc31ec 18
  FMTK_HasIOFocus.hasFocus                   code  fffc3240 18
  FMTK_HasIOFocus.noSwitch                   code  fffc3218 18
  FMTK_HasIOFocus.xit                        code  fffc3244 18
  FMTK_IO                                    code  fffc3484 18
  FMTK_IO.badDev                             code  fffc34c4 18
  FMTK_IO.badFunc                            code  fffc34bc 18
  FMTK_IO.xit                                code  fffc34b8 18
  FMTK_Initialize                            code  80000000000001b8 32
  FMTK_KillTask                              code  fffc2804 18
  FMTK_KillTask.immortal                     code  fffc2864 18
  FMTK_KillTask.xit                          code  fffc2868 18
  FMTK_PeekMsg                               code  fffc2b1c 18
  FMTK_PeekMsg.badMbx                        code  fffc2bdc 18
  FMTK_PeekMsg.noMsg                         code  fffc2bd4 18
  FMTK_PeekMsg.nod1                          code  fffc2ba4 18
  FMTK_PeekMsg.nod2                          code  fffc2bb8 18
  FMTK_PeekMsg.nod3                          code  fffc2bcc 18
  FMTK_PeekMsg.nodq                          code  fffc2b84 18
  FMTK_PeekMsg.ret                           code  fffc2be0 18
  FMTK_PostMsg                               code  80000000000001c0 32
  FMTK_ReleaseIOFocus                        code  fffc339c 18
  FMTK_RequestIOFocus                        code  fffc3304 18
  FMTK_RequestIOFocus.notEmpty               code  fffc337c 18
  FMTK_RequestIOFocus.ret                    code  fffc3394 18
  FMTK_SaveContext                           code  fffc2058 18
  FMTK_SchedulerIRQ                          code  fffc250c 18
  FMTK_SchedulerIRQ.0001                     code  fffc2578 18
  FMTK_SchedulerIRQ.0002                     code  fffc2658 18
  FMTK_SchedulerIRQ.0003                     code  fffc2670 18
  FMTK_SchedulerIRQ.0004                     code  fffc2688 18
  FMTK_SchedulerIRQ.doSchedule               code  fffc251c 18
  FMTK_SchedulerIRQ.dq                       code  fffc2614 18
  FMTK_SchedulerIRQ.goodTid                  code  fffc2614 18
  FMTK_SchedulerIRQ.noException              code  fffc262c 18
  FMTK_SchedulerIRQ.noLock                   code  fffc26ac 18
  FMTK_SchedulerIRQ.noMsg                    code  fffc2690 18
  FMTK_SchedulerIRQ.noTimeout                code  fffc25ac 18
  FMTK_SchedulerIRQ.notZero                  code  fffc25ac 18
  FMTK_SchedulerIRQ.nxtQ                     code  fffc25f4 18
  FMTK_SchedulerIRQ.searchQ                  code  fffc25b8 18
  FMTK_SendMsg                               code  fffc2a0c 18
  FMTK_SendMsg.0001                          code  fffc2a3c 18
  FMTK_SendMsg.badMbx                        code  fffc2b0c 18
  FMTK_SendMsg.mbxEmpty                      code  fffc2af4 18
  FMTK_SendMsg.noMsg                         code  fffc2b04 18
  FMTK_SendMsg.noWaiters                     code  fffc2a9c 18
  FMTK_SendMsg.nxtTid                        code  fffc2a80 18
  FMTK_SendMsg.xit                           code  fffc2b10 18
  FMTK_SetTaskPriority                       code  80000000000001bc 32
  FMTK_Sleep                                 code  fffc2404 18
  FMTK_Sleep.0001                            code  fffc2440 18
  FMTK_Sleep.0002                            code  fffc24b4 18
  FMTK_Sleep.0003                            code  fffc24cc 18
  FMTK_Sleep.0004                            code  fffc24e4 18
  FMTK_Sleep.noException                     code  fffc248c 18
  FMTK_Sleep.noMsg                           code  fffc24ec 18
  FMTK_Sleep.xit                             code  fffc2500 18
  FMTK_StartApp                              code  80000000000001c4 32
  FMTK_StartTask                             code  fffc26c8 18
  FMTK_StartTask.err                         code  fffc27cc 18
  FMTK_StartTask.xit                         code  fffc27c0 18
  FMTK_SwitchIOFocus                         code  fffc324c 18
  FMTK_SwitchIOFocus.0001                    code  fffc3290 18
  FMTK_SwitchIOFocus.0002                    code  fffc32a8 18
  FMTK_SwitchIOFocus.0003                    code  fffc32cc 18
  FMTK_SwitchIOFocus.0004                    code  fffc32e4 18
  FMTK_SwitchIOFocus.noFocus                 code  fffc32f4 18
  FMTK_SwitchIOFocus.sameFocus               code  fffc32f4 18
  FMTK_WaitMsg                               code  fffc2bec 18
  FMTK_WaitMsg.qt                            code  fffc2c10 18
  FMTK_WaitMsg.xit                           code  fffc2c64 18
  FNDLN                                      code  fffc5ce0 18
  FNDLNP                                     code  fffc5d00 18
  FNDNXT                                     code  fffc5d68 18
  FNDRET                                     code  fffc5d3c 18
  FNDRET.0001                                code  fffc5d40 18
  FNDRET1                                    code  fffc5d58 18
  FNDRET2                                    code  fffc5d60 18
  FNDSKP                                     code  fffc5d6c 18
  FOR                                        code  fffc4bdc 18
  FORCEFIT                                   code  fffc5408 18
  FORCEFIT.0001                              code  fffc542c 18
  FORCEFIT.intAnd                            code  fffc541c 18
  FR1                                        code  fffc4c08 18
  FR2                                        code  fffc4c30 18
  FR3                                        code  fffc4c38 18
  FR4                                        code  fffc4c3c 18
  FR5                                        code  fffc4c4c 18
  FR6                                        code  fffc4c94 18
  FR7                                        code  fffc4c98 18
  FR8                                        code  fffc4cb8 18
  FUNCEXPR                                   code  fffc5688 18
  FillMem                                    code  fffc0604 18
  FillMem.0001                               code  fffc0620 18
  FindRun                                    code  fffc0f48 18
  FindRun.0001                               code  fffc0f68 18
  FindRun.0002                               code  fffc0f78 18
  FindRun.0003                               code  fffc0f64 18
  FindRun.empty0                             code  fffc0f80 18
  FindRun.empty1                             code  fffc0f84 18
  FindRun.foundEnough                        code  fffc0fa0 18
  FreeAll                                    code  fffc10cc 18
  FreeAll.0001                               code  fffc112c 18
  FreeAll.nxt                                code  fffc10d4 18
  FreeMsg                                   const  024350 19
  FreeTCB                                    code  fffc2fc8 18
  GCHAR                                      code  fffc4f58 18
  GCHAR1                                     code  fffc4f70 18
  GETLN                                      code  fffc5bd4 18
  GETLN.GL1                                  code  fffc5bf8 18
  GETLN.GL2                                  code  fffc5c20 18
  GETLN.GL3                                  code  fffc5c54 18
  GETLN.GL4                                  code  fffc5c80 18
  GETLN.GL5                                  code  fffc5c98 18
  GETLN.GL6                                  code  fffc5cb8 18
  GETLN.GL7                                  code  fffc5cc4 18
  GOAUXI                                     code  fffc4318 18
  GOAUXO                                     code  fffc4310 18
  GOBYE                                      code  fffc4320 18
  GOIN                                       code  fffc430c 18
  GOOUT                                      code  fffc4308 18
  GOSTART                                    code  fffc4300 18
  GOSUB                                      code  fffc4b00 18
  GOTO                                       code  fffc4940 18
  GOWARM                                     code  fffc4304 18
  GetBuflen                                  code  fffc45a0 18
  GetBuflen.0001                             code  fffc45c8 18
  GetBuflen.0002                             code  fffc45ac 18
  GetBuflen.0004                             code  fffc45c4 18
  GetCurrentTid                              code  fffc1f98 18
  GetFilename                                code  fffc4fbc 18
  GetHexNum                                  code  fffc065c 18
  GetHexNum.0001                             code  fffc06ac 18
  GetHexNum.isDigit                          code  fffc06e8 18
  GetHexNum.isHexLower                       code  fffc06d0 18
  GetHexNum.isHexUpper                       code  fffc06b8 18
  GetHexNum.next                             code  fffc066c 18
  Getch                                      code  fffc0214 18
  IF0                                        code  fffc4d7c 18
  IF1                                        code  fffc4d80 18
  IF2                                        code  fffc4d88 18
  IF3                                        code  fffc4d9c 18
  IGB1                                       code  fffc61c0 18
  IGB2                                       code  fffc61ac 18
  IGBRET                                     code  fffc61c8 18
  IGNBLK                                     code  fffc61a4 18
  INBUF                                     const  014100 18
  INCH                                       code  fffc6488 18
  INCH1                                      code  fffc64ac 18
  INPERR                                     code  fffc4da0 18
  INPPTR                                    const  0300ac 19
  INPUT                                      code  fffc4dd4 18
  INSLINE                                    code  fffc44e0 18
  INSLINE.0001                               code  fffc450c 18
  IOF_NEXT                                  const  0002e8 11
  IOF_PREV                                  const  0002f0 11
  IOFocusNdx                                const  024810 19
  IOFocusTbl                                const  024818 19
  IP2                                        code  fffc4dfc 18
  IP3                                        code  fffc4e38 18
  IP4                                        code  fffc4eac 18
  IP5                                        code  fffc4ebc 18
  IP6                                        code  fffc4ddc 18
  IP7                                        code  fffc4e1c 18
  IRQFlag                                   const  0300b4 19
  IRQROUT                                   const  0300a4 19
  IRQRout                                    code  fffc08ec 18
  IRQRout.cause0to7                          code  fffc09b0 18
  IRQRout.cause12plus                        code  fffc09b0 18
  IRQRout.doIRQ                              code  fffc0958 18
  IRQRout.isIRQ                              code  fffc0924 18
  IRQRout.noIRQ                              code  fffc0978 18
  IdleTask                                   code  fffc0210 18
  InsertIntoReadyList                        code  fffc2c70 18
  InsertIntoReadyList.0001                   code  fffc2d04 18
  InsertIntoReadyList.badTid                 code  fffc2d0c 18
  InsertIntoReadyList.insert                 code  fffc2cd0 18
  InsertIntoReadyList.level2                 code  fffc2cf0 18
  InsertIntoTimeoutList                      code  fffc2dcc 18
  InsertIntoTimeoutList.0001                 code  fffc2e24 18
  InsertIntoTimeoutList.0002                 code  fffc2e8c 18
  InsertIntoTimeoutList.0003                 code  fffc2e9c 18
  InsertIntoTimeoutList.beginWhile           code  fffc2e30 18
  InsertIntoTimeoutList.endOfList            code  fffc2e50 18
  InsertIntoTimeoutList.endWhile             code  fffc2e60 18
  InsertLine                                 code  fffc4580 18
  InsertLine.0001                            code  fffc4584 18
  InsertLine.done                            code  fffc459c 18
  KEYBD                                      code  8000000000000276 32
  KeybdFuncTbl                               code  fffc3800 18
  KeybdIRQ                                   code  fffc3bdc 18
  KeybdIRQ.0001                              code  fffc3c68 18
  KeybdIRQ.noRoom                            code  fffc3c18 18
  KeybdIRQ.notAlt                            code  8000000000000290 32
  KeybdIRQ.notAltTab                         code  fffc3c88 18
  KeybdIRQ.notCtrl                           code  fffc3c68 18
  KeybdIRQ.notCtrlC                          code  fffc3c44 18
  KeybdIRQ.notCtrlZ                          code  fffc3c68 18
  KeybdIRQ.notKbd                            code  fffc3cc4 18
  KillTask                                   code  8000000000000204 32
  LEDS                                      const  ffdc0600 33
  LET                                        code  fffc4ed4 18
  LINEFD                                    const  00000a 5
  LISTX                                      code  fffc4a0c 18
  LNFD                                      const  00000a 5
  LOAD                                       code  fffc4eec 18
  LOAD3                                      code  fffc5040 18
  LOAD4                                      code  fffc506c 18
  LOAD5                                      code  fffc50a4 18
  LOD1                                       code  fffc4efc 18
  LOD2                                       code  fffc4f28 18
  LODEND                                     code  fffc4f44 18
  LOG_MBXSZ                                 const  000005 4
  LOG_MSGSZ                                 const  000005 4
  LOG_PGSZ                                  const  000010 6
  LOG_TCBSZ                                 const  00000a 5
  LOPINC                                    const  030078 19
  LOPLMT                                    const  03007c 19
  LOPLN                                     const  030074 19
  LOPPT                                     const  030070 19
  LOPVAR                                    const  030010 19
  LS1                                        code  fffc4a20 18
  LS2                                        code  fffc4a54 18
  LS3                                        code  fffc4a5c 18
  LS4                                        code  fffc4a38 18
  LS5                                        code  fffc4a24 18
  LSTROM                                    const  000000 1
  LT1                                        code  fffc4ee8 18
  LoadWord                                   code  fffc605c 18
  MAX_ASID                                  const  00003f 7
  MAX_DEV_OP                                const  00001f 6
  MAX_MID                                   const  00003f 7
  MAX_TID                                   const  00003f 7
  MBX_MQHEAD                                const  000010 6
  MBX_MQTAIL                                const  000018 6
  MBX_OWNER                                 const  000000 1
  MBX_SIZE                                  const  000020 7
  MBX_WTIDS                                 const  000008 5
  MMUInit                                    code  fffc0e98 18
  MMUInit.0001                               code  fffc0ed0 18
  MMUInit.0002                               code  fffc0f2c 18
  MMUInit.0003                               code  fffc0eec 18
  MMUInit.0004                               code  fffc0ec0 18
  MMUInit.0006                               code  fffc0f04 18
  MSG_D1                                    const  000008 5
  MSG_D2                                    const  000010 6
  MSG_D3                                    const  000018 6
  MSG_LINK                                  const  000000 1
  MSG_SIZE                                  const  000020 7
  MULEXPR                                    code  fffc55ec 18
  MVDOWN                                     code  fffc5da8 18
  MVDOWN1                                    code  fffc5d98 18
  MVUP                                       code  fffc5d90 18
  MVUP1                                      code  fffc5d80 18
  MachineStart                               code  fffc0100 18
  MapOSPages                                 code  fffc1fbc 18
  MapOSPages.nxt                             code  fffc1fc8 18
  MbxRemoveTask                              code  fffc28a8 18
  MbxRemoveTask.xit                          code  fffc28f0 18
  MonEntry                                   code  fffc02f8 18
  Monitor                                    code  fffc0300 18
  Monitor.0001                               code  fffc032c 18
  Monitor.0002                               code  fffc037c 18
  Monitor.0003                               code  fffc03e0 18
  Monitor.0004                               code  fffc0468 18
  Monitor.0005                               code  fffc0560 18
  Monitor.0006                               code  fffc04cc 18
  Monitor.0007                               code  fffc04fc 18
  Monitor.0008                               code  fffc0508 18
  Monitor.0009                               code  fffc0514 18
  Monitor.0010                               code  fffc052c 18
  Monitor.0011                               code  fffc0548 18
  Monitor.0012                               code  fffc0560 18
  Monitor.doBackspace                        code  fffc03cc 18
  Monitor.doDelete                           code  fffc0374 18
  Monitor.noT                                code  fffc04f4 18
  Monitor.procLine                           code  fffc0430 18
  Monitor.skip                               code  fffc0444 18
  Monitor.skip2                              code  fffc0460 18
  NEW                                        code  fffc47e8 18
  NEXT                                       code  fffc4cbc 18
  NPAGES                                    const  024828 19
  NR_DCB                                    const  000020 7
  NR_MBX                                    const  000100 10
  NR_MSG                                    const  000800 13
  NR_TCB                                    const  000040 8
  NUMWKA                                    const  030094 19
  NX0                                        code  fffc4cd8 18
  NX1                                        code  fffc4d3c 18
  NX2                                        code  fffc4d04 18
  NX3                                        code  fffc4d40 18
  NX4                                        code  fffc4cd4 18
  NX5                                        code  fffc4cf8 18
  NXPurge                                    code  fffc4d74 18
  OKMSG                                      code  fffc6502 18
  ONIRQ                                      code  fffc49b0 18
  ONIRQ1                                     code  fffc49dc 18
  OREXPR                                     code  fffc52d8 18
  OSCALL                                     code  fffc2360 18
  OSCALL.oscall                              code  fffc23b8 18
  OSCALL.xit                                 code  fffc23e8 18
  OSCALL.zero                                code  fffc23fc 18
  OSCallTbl                                  code  fffc1e14 18
  OSPAGES                                   const  000003 3
  OSSP                                      const  030000 19
  OUTC                                       code  fffc6484 18
  OUTPTR                                    const  0300a8 19
  OpenSpace                                  code  fffc45cc 18
  OpenSpace.0003                             code  fffc4608 18
  OpenSpace.noSpace                          code  fffc4624 18
  PAGESZ                                    const  010000 18
  PAGES_PER_MAP                             const  001000 14
  PAGES_PER_TASK                            const  001000 14
  PARN                                       code  fffc56d8 18
  PEEK                                       code  fffc58ec 18
  PEEKH                                      code  fffc591c 18
  PEEKW                                      code  fffc5904 18
  PIC                                       const  ffdc0f00 33
  PIC_CH16                                  const  0000c0 9
  PIC_CH28                                  const  0000f0 9
  PIC_CH31                                  const  0000fc 9
  PIDMAP                                    const  024310 19
  PKER                                       code  fffc52a0 18
  POKE                                       code  fffc521c 18
  POKEH                                      code  fffc5274 18
  POKEW                                      code  fffc5248 18
  POPA_                                      code  fffc5db0 18
  PP1                                        code  fffc5e20 18
  PR0                                        code  fffc4a8c 18
  PR1                                        code  fffc4aa4 18
  PR2                                        code  fffc4a78 18
  PR3                                        code  fffc4ac4 18
  PR4                                        code  fffc4abc 18
  PR6                                        code  fffc4ad8 18
  PR8                                        code  fffc4ae0 18
  PRINT                                      code  fffc4a60 18
  PRMESG                                     code  fffc6288 18
  PRTLN                                      code  fffc6088 18
  PRTNUM                                     code  fffc5fac 32
  PRTNUM.PN1                                 code  fffc5fe4 18
  PRTNUM.PN2                                 code  fffc5fe0 18
  PRTNUM.PN3                                 code  fffc600c 18
  PRTNUM.PN4                                 code  fffc601c 18
  PRTNUM.PN5                                 code  fffc6028 18
  PRTNUM.PN6                                 code  fffc6030 18
  PRTNUM.PN7                                 code  fffc5ff4 18
  PRTSTG                                     code  fffc5eb0 18
  PRTSTG.PRTRET                              code  fffc5ef4 18
  PRTSTG.PS1                                 code  fffc5ed0 18
  PU1                                        code  fffc5ea4 18
  PUSHA_                                     code  fffc5e24 18
  PWORD                                      code  fffc51a4 18
  PicInit                                    code  fffc116c 18
  PutHexByte                                 code  fffc075c 18
  PutHexDword                                code  fffc06fc 18
  PutHexHalf                                 code  fffc073c 18
  PutHexNybble                               code  fffc077c 18
  PutHexNybble.0001                          code  fffc07ac 18
  PutHexNybble.lt10                          code  fffc07a4 18
  PutHexWord                                 code  fffc071c 18
  PutString                                  code  fffc07bc 18
  PutString.0001                             code  fffc07cc 18
  PutString.done                             code  fffc07e0 18
  Putch                                      code  fffc0240 18
  QNDX                                      const  024304 19
  QSORRY                                     code  fffc5b64 18
  QT1                                        code  fffc5f30 18
  QT2                                        code  fffc5f70 18
  QT3                                        code  fffc5f48 18
  QT4                                        code  fffc5f5c 18
  QT5                                        code  fffc5f7c 18
  QTSTG                                      code  fffc5f18 18
  QWHAT                                      code  fffc5b70 18
  RDYQ0                                     const  024400 19
  RDYQ1                                     const  024500 19
  RDYQ2                                     const  024600 19
  RDYQ3                                     const  024700 19
  READYQ                                    const  024308 19
  RETURN                                     code  fffc4b74 18
  RND                                        code  fffc5980 18
  RUN                                        code  fffc481c 18
  RUN1                                       code  fffc48f4 18
  RUN2                                       code  fffc4850 18
  RUN3                                       code  fffc4854 18
  RUNNXL                                     code  fffc483c 18
  RUNSML                                     code  fffc4928 18
  RUNTSL                                     code  fffc4914 18
  RemoveFromReadyList                        code  fffc2d14 18
  RemoveFromReadyList.tidOk                  code  fffc2d28 18
  RemoveFromReadyList2                       code  fffc2d40 18
  RemoveFromReadyList2.0001                  code  fffc2d94 18
  RemoveFromReadyList2.0002                  code  fffc2db0 18
  RemoveFromReadyList2.0003                  code  fffc2d84 18
  RemoveFromReadyList2.badTid                code  fffc2dc4 18
  RemoveFromTimeoutList                      code  fffc2eb0 18
  RemoveFromTimeoutList.0001                 code  fffc2f00 18
  RemoveFromTimeoutList.noNext               code  fffc2f20 18
  RemoveFromTimeoutList.noPrev               code  fffc2f34 18
  RemoveFromTimeoutList.noWait               code  fffc2ec4 18
  RestoreContext                             code  fffc2124 18
  RestoreContext.rsseg                       code  fffc2134 18
  SAVE                                       code  fffc5114 18
  SAVE1                                      code  fffc512c 18
  SAVE2                                      code  fffc5148 18
  SAVE3                                      code  fffc50a8 18
  SAVE4                                      code  fffc50d8 18
  SAVEND                                     code  fffc5160 18
  SC_C                                      const  000021 7
  SC_TAB                                    const  00000d 5
  SC_Z                                      const  00001a 6
  SDReadSector                               code  800000000000039b 32
  SDWriteSector                              code  80000000000003a0 32
  SENDMSG                                    code  fffc6310 18
  SENDMSG.err                                code  fffc6394 18
  SENDMSG.paren                              code  fffc63a0 18
  SETVAL                                     code  fffc5a84 18
  SETVAL.sv2                                 code  fffc5aa8 18
  SGN                                        code  fffc5a14 18
  SGN1                                       code  fffc5a44 18
  SGN2                                       code  fffc5a34 18
  SIZEX                                      code  fffc5a50 18
  SRYMSG                                     code  fffc650f 18
  ST2                                        code  fffc44bc 18
  STACKOFFS                                 const  afffc000 33
  STKBOT                                    const  03009c 19
  STKGOS                                    const  030014 19
  STKINP                                    const  030098 19
  STOP                                       code  fffc4808 18
  STRTMP                                    const  000200 11
  SV1                                        code  fffc5ae4 18
  SYSX                                       code  fffc52ac 18
  SaveContext                                code  fffc2064 18
  SaveContext.svseg                          code  fffc20fc 18
  SaveContext.xit                            code  fffc2120 18
  SelectTaskToRun                            code  fffc1fdc 18
  SelectTaskToRun.0001                       code  fffc2024 18
  SelectTaskToRun.dq                         code  fffc204c 18
  SelectTaskToRun.goodTid                    code  fffc204c 18
  SelectTaskToRun.nxtQ                       code  fffc201c 18
  SelectTaskToRun.searchQ                    code  fffc1fdc 18
  SerHeadRcv                                const  025800 19
  SerHeadXmit                               const  025808 19
  SerRcvBuf                                 const  025000 19
  SerRcvXoff                                const  025811 19
  SerRcvXon                                 const  025810 19
  SerTailRcv                                const  025804 19
  SerTailXmit                               const  02580c 19
  SerXmitBuf                                const  025400 19
  SerialFinishCmd                            code  fffc13d4 18
  SerialFinishCmd.0001                       code  fffc13f8 18
  SerialFuncTbl                              code  fffc11a0 18
  SerialGetChar                              code  fffc13fc 18
  SerialGetChar.0001                         code  fffc14b0 18
  SerialGetChar.0002                         code  fffc1464 18
  SerialGetChar.noChars                      code  fffc14b0 18
  SerialGetChar.xit                          code  fffc14b4 18
  SerialIRQ                                  code  fffc1644 18
  SerialIRQ.0001                             code  fffc16f4 18
  SerialIRQ.notRxInt                         code  fffc1708 18
  SerialIRQ.nxtByte                          code  fffc1644 18
  SerialIRQ.rxFull                           code  fffc1708 18
  SerialInit                                 code  fffc12a0 18
  SerialPeekChar                             code  fffc14cc 18
  SerialPeekChar.0001                        code  fffc1518 18
  SerialPeekChar.noChars                     code  fffc1518 18
  SerialPeekChar.xit                         code  fffc151c 18
  SerialPeekCharDirect                       code  fffc1534 18
  SerialPeekCharDirect.0001                  code  fffc1574 18
  SerialPeekCharDirect.xit                   code  fffc1578 18
  SerialPutChar                              code  fffc1590 18
  SerialPutChar.0001                         code  fffc15a4 18
  SerialPutChar.0002                         code  fffc15a0 18
  SerialPutChar.goSleep                      code  fffc15e0 18
  SerialRcvCount                             code  fffc1608 18
  SerialRcvCount.xit                         code  fffc163c 18
  SerialService                              code  fffc137c 18
  SerialServiceInit                          code  fffc1364 18
  SerialServiceLoop                          code  fffc1398 18
  SkipSpaces                                 code  fffc0630 18
  SkipSpaces.skip1                           code  fffc0654 18
  SkipSpaces.skip2                           code  fffc0630 18
  SpriteDemo_101                             code  fffc6b7c 18
  SpriteDemo_106                             code  fffc6bac 18
  SpriteDemo_107                             code  fffc6bbc 18
  SpriteDemo_109                             code  fffc6bc8 18
  SpriteDemo_110                             code  fffc6d24 18
  SpriteDemo_112                             code  fffc6c58 18
  SpriteDemo_114                             code  fffc6c98 18
  SpriteDemo_116                             code  fffc6cd8 18
  SpriteDemo_118                             code  fffc6cf4 18
  SpriteDemo_17                              code  fffc6788 18
  SpriteDemo_20                              code  fffc6788 18
  SpriteDemo_21                              code  fffc6744 18
  SpriteDemo_22                              code  fffc6788 18
  SpriteDemo_23                              code  fffc677c 18
  SpriteDemo_31                              code  fffc67e4 18
  SpriteDemo_39                              code  fffc68dc 18
  SpriteDemo_42                              code  fffc68dc 18
  SpriteDemo_43                              code  fffc685c 18
  SpriteDemo_44                              code  fffc68dc 18
  SpriteDemo_83                              code  fffc6d50 18
  SpriteDemo_86                              code  fffc6d50 18
  SpriteDemo_87                              code  fffc69a8 18
  SpriteDemo_88                              code  fffc6a14 18
  SpriteDemo_9                               code  fffc6700 18
  SpriteDemo_90                              code  fffc6a28 18
  SpriteDemo_91                              code  fffc6aa4 18
  SpriteDemo_93                              code  fffc6a98 18
  SpriteDemo_95                              code  fffc6ab0 18
  SpriteDemo_96                              code  fffc6b24 18
  SpriteDemo_98                              code  fffc6b34 18
  SpriteDemo_99                              code  fffc6b7c 18
  SpriteDemo_longlit0                      rodata  fffc7000 32
  SwapContext                                code  fffc21e0 18
  SwapContext.noCtxSwitch                    code  fffc235c 18
  SwapContext.rsseg                          code  fffc22ac 18
  SwapContext.savedAlready                   code  fffc22a8 18
  SwapContext.svseg                          code  fffc228c 18
  SwitchIOFocus                             const  024820 19
  SysSema                                   const  024340 19
  TAB                                       const  000009 5
  TAB1                                       code  fffc462c 18
  TAB10                                      code  fffc46e6 18
  TAB10_1                                    code  fffc4756 18
  TAB1_1                                     code  fffc46ea 18
  TAB2                                       code  fffc463e 18
  TAB2_1                                     code  fffc46f4 18
  TAB4                                       code  fffc4697 18
  TAB4_1                                     code  fffc4722 18
  TAB5                                       code  fffc46d0 18
  TAB5_1                                     code  fffc473c 18
  TAB6                                       code  fffc46d3 18
  TAB6_1                                     code  fffc4740 18
  TAB8                                       code  fffc46d8 18
  TAB8_1                                     code  fffc4744 18
  TAB9                                       code  fffc46e2 18
  TAB9_1                                     code  fffc4752 18
  TC1                                        code  fffc6118 18
  TC64CursorAddr                            const  ffd1df1c 33
  TCBContextSaved                           const  00028a 11
  TCBElapsedTime                            const  0002c0 11
  TCBEndTime                                const  0002b8 11
  TCBException                              const  0002c8 11
  TCBKbdBuf                                 const  000308 11
  TCBKbdHead                                const  000300 11
  TCBKbdState2                               code  800000000000028b 32
  TCBKbdTail                                const  000301 11
  TCBMsgD1                                  const  000298 11
  TCBMsgD2                                  const  0002a0 11
  TCBMsgD3                                  const  0002a8 11
  TCBName                                   const  0002f8 11
  TCBNext                                   const  0002d0 11
  TCBPrev                                   const  0002d8 11
  TCBPriority                               const  000289 11
  TCBResource                               const  000328 11
  TCBStackBot                               const  000290 11
  TCBStartTime                              const  0002b0 11
  TCBStatus                                 const  000288 11
  TCBTimeout                                const  0002e0 11
  TCBVidMem                                  code  800000000000020a 32
  TCBVideoMem                               const  000330 11
  TCBWaitMbx                                const  00028c 11
  TCBepc                                    const  000280 11
  TCBpVideo                                 const  000338 11
  TCBsegs                                   const  000200 11
  TICKX                                      code  fffc5a00 18
  TN1                                        code  fffc6148 18
  TN2                                        code  fffc6174 18
  TOOBIG                                     code  fffc5b58 18
  TOUPB1                                     code  fffc61e8 18
  TOUPBRT                                    code  fffc6230 18
  TOUPBUF                                    code  fffc61d4 18
  TOUPRET                                    code  fffc6254 18
  TSNMRET                                    code  fffc6194 18
  TSTC                                       code  fffc60e4 18
  TSTNUM                                     code  fffc6130 18
  TSTV                                       code  fffc5718 18
  TSTVRT                                     code  fffc5794 18
  TS_DEAD                                   const  000002 3
  TS_MSGRDY                                 const  000004 4
  TS_NONE                                   const  000000 1
  TS_PREEMPT                                const  000020 7
  TS_READY                                  const  000001 2
  TS_RUNNING                                const  000080 9
  TS_TIMEOUT                                const  000010 6
  TS_WAITMSG                                const  000008 5
  TV1                                        code  fffc5780 18
  TV2                                        code  fffc5768 18
  TV3                                        code  fffc5748 18
  TXTBGN                                    const  031800 19
  TXTUNF                                    const  030004 19
  Tick                                      const  024330 19
  TimeoutList                               const  024328 19
  TinyBasic                                  code  fffc4300 18
  UART                                      const  ffdc0a00 33
  UART_CMD                                  const  000008 5
  UART_STAT                                 const  000004 4
  UART_TRB                                  const  000000 1
  USRX                                       code  fffc5934 18
  UpdateCursorPos                            code  fffc1aac 18
  UserStart                                  code  fffc016c 18
  UserStart.0001                             code  fffc0184 18
  UserStart2                                 code  fffc0184 18
  UserStart2.0002                            code  fffc01d8 18
  UserStart2.0003                            code  fffc01f0 18
  UserStart2.0004                            code  fffc01d8 18
  UserStart2.0005                            code  fffc01d8 18
  VARBGN                                    const  030008 19
  VAREND                                    const  03000c 19
  VIA                                       const  ffdc0600 33
  VIA_ACR                                   const  00002c 7
  VIA_DDRA                                  const  00000c 5
  VIA_IER                                   const  000038 7
  VIA_IFR                                   const  000034 7
  VIA_PA                                    const  000004 4
  VIA_PARAW                                 const  00003c 7
  VIA_PCR                                   const  000030 7
  VIA_T1CH                                  const  000014 6
  VIA_T1CL                                  const  000010 6
  ViaFuncTbl                                 code  fffc1718 18
  ViaIRQ                                     code  fffc1874 18
  ViaIRQ.0003                                code  fffc18c8 18
  ViaInit                                    code  fffc1818 18
  VideoClearScreen                           code  fffc1a48 18
  VideoClearScreen.0001                      code  fffc1a78 18
  VideoFuncTbl                               code  fffc18d0 18
  VideoHomeCursor                            code  fffc1a8c 18
  VideoIRQ                                   code  fffc1e10 18
  VideoIRQ.0003                              code  fffc1e10 18
  VideoInit                                  code  fffc19d0 18
  VideoPutChar                               code  fffc1aec 18
  VideoPutChar.0001                          code  fffc1bf0 18
  VideoPutChar.backspace                     code  fffc1d30 18
  VideoPutChar.bs0001                        code  fffc1da8 18
  VideoPutChar.bs0002                        code  fffc1d94 18
  VideoPutChar.cr1                           code  fffc1c98 18
  VideoPutChar.cr2                           code  fffc1c94 18
  VideoPutChar.cursorDown                    code  fffc1cf4 18
  VideoPutChar.cursorLeft                    code  fffc1c9c 18
  VideoPutChar.cursorRight                   code  fffc1c68 18
  VideoPutChar.cursorUp                      code  fffc1cc8 18
  VideoPutChar.del0001                       code  fffc1d58 18
  VideoPutChar.delete                        code  fffc1dc4 18
  VideoPutChar.doCR                          code  fffc1c3c 18
  VideoPutChar.doCls                         code  fffc1d24 18
  VideoPutChar.doLF                          code  fffc1c54 18
  VideoPutChar.doLF1                         code  fffc1bc8 18
  VideoPutChar.saveX                         code  fffc1c24 18
  VideoPutChar.saveY                         code  fffc1c14 18
  VideoPutChar.xit                           code  fffc1c04 18
  VideoPutString                             code  fffc1dd8 18
  VideoPutString.again                       code  fffc1de8 18
  VideoPutString.done                        code  fffc1e04 18
  VirtToPhys                                 code  fffc1130 18
  VirtToPhys.notMapped                       code  fffc1164 18
  WAITIRQ                                    code  fffc49f0 18
  WAITMSG                                    code  fffc63ac 18
  WAITMSG.0001                               code  fffc63e4 18
  WAITMSG.0002                               code  fffc63d8 18
  WAITMSG.err                                code  fffc646c 18
  WAITMSG.paren                              code  fffc6478 18
  WSTART                                     code  fffc4424 18
  XOFF                                      const  000013 6
  XON                                       const  000011 6
  XP11                                       code  fffc545c 18
  XP12                                       code  fffc5474 18
  XP13                                       code  fffc548c 18
  XP14                                       code  fffc54a4 18
  XP15                                       code  fffc54bc 18
  XP16                                       code  fffc54d4 18
  XP17                                       code  fffc5514 18
  XP18                                       code  fffc552c 18
  XP21                                       code  fffc557c 18
  XP22                                       code  fffc5588 18
  XP23                                       code  fffc558c 18
  XP24                                       code  fffc55a8 18
  XP25                                       code  fffc55bc 18
  XP26                                       code  fffc55c8 18
  XP31                                       code  fffc55f8 18
  XP34                                       code  fffc5628 18
  XP35                                       code  fffc564c 18
  XP40                                       code  fffc56a4 18
  XP41                                       code  fffc56c0 18
  XP42                                       code  fffc56fc 18
  XP43                                       code  fffc5708 18
  XP45                                       code  fffc55d4 18
  XP46                                       code  fffc56cc 18
  XP47                                       code  fffc5670 18
  XPRT0                                      code  fffc54ec 18
  XPRT1                                      code  fffc5500 18
  XP_AND                                     code  fffc536c 18
  XP_AND1                                    code  fffc534c 18
  XP_ANDX                                    code  fffc5380 18
  XP_OR                                      code  fffc530c 18
  XP_OR1                                     code  fffc52ec 18
  XP_ORX                                     code  fffc5320 18
  YIELD0                                     code  fffc4810 18
  _ACBPtrs                                 rodata  000000 32
  _BIOS1_sema                              rodata  000000 32
  _BIOS_RespMbx                            rodata  000000 32
  _DBGCheckForKey                            code  fffc3d40 32
  _DBGGetKey                                 code  fffc3d80 32
  _DeviceTable                             rodata  000000 32
  _DumpTaskList                            rodata  000000 32
  _EnableSprite                              code  fffc66d0 32
  _EnableSprites                           rodata  000000 32
  _FMTK_Inited                             rodata  000000 32
  _FMTK_Reschedule                         rodata  000000 32
  _FMTK_SendMsg                            rodata  000000 32
  _FMTK_StartApp                           rodata  000000 32
  _FMTK_StartThread                        rodata  000000 32
  _FMTK_WaitMsg                            rodata  000000 32
  _FocusSwitcher                           rodata  000000 32
  _GetACBPtr                               rodata  000000 32
  _GetAppHandle                            rodata  000000 32
  _GetRand                                 rodata  000000 32
  _GetRunningACBPtr                        rodata  000000 32
  _GetVecno                                rodata  000000 32
  _IOFocusNdx                              rodata  000000 32
  _IOFocusTbl                              rodata  000000 32
  _InsertIntoReadyList                     rodata  000000 32
  _InsertIntoTimeoutList                   rodata  000000 32
  _KeyLED                                  rodata  024826 32
  _KeyState1                               rodata  024824 32
  _KeyState2                               rodata  024825 32
  _KeybdClearRcv                           rodata  000000 32
  _KeybdGetBufferStatus                      code  fffc3ccc 18
  _KeybdGetBufferStatus.empty                code  fffc3cf4 18
  _KeybdGetBufferedScancode                  code  fffc3cfc 18
  _KeybdGetBufferedScancode.empty            code  fffc3d30 18
  _KeybdGetID                                code  fffc3a6c 18
  _KeybdGetID.0001                           code  fffc3ab0 18
  _KeybdGetID.notKbd                         code  fffc3acc 18
  _KeybdGetScancode                        rodata  fffc3bb8 32
  _KeybdGetStatus                          rodata  fffc3b90 32
  _KeybdID                                   code  8000000000000283 32
  _KeybdInit                                 code  fffc3900 18
  _KeybdInit.0002                            code  fffc3930 18
  _KeybdInit.0004                            code  fffc39d8 18
  _KeybdInit.config                          code  fffc397c 18
  _KeybdInit.keybdErr                        code  fffc39c0 18
  _KeybdInit.ledxit                          code  fffc3a04 18
  _KeybdInit.tryAgain                        code  fffc39b4 18
  _KeybdInit.xit                             code  fffc3a20 18
  _KeybdPeekScancode                         code  fffc3ba4 18
  _KeybdRecvByte                             code  fffc3ad4 18
  _KeybdRecvByte.0003                        code  fffc3ae0 18
  _KeybdRecvByte.0004                        code  fffc3b18 18
  _KeybdSendByte                             code  fffc3b28 18
  _KeybdSetLED                             rodata  fffc3a2c 32
  _KeybdWaitTx                               code  fffc3b3c 18
  _KeybdWaitTx.0001                          code  fffc3b48 18
  _KeybdWaitTx.0002                          code  fffc3b80 18
  _LockIOFSemaphore                        rodata  000000 32
  _LockKbdSemaphore                        rodata  000000 32
  _LockSemaphore                           rodata  000000 32
  _LockSysSemaphore                        rodata  000000 32
  _MicroDelay                                code  fffc07f0 18
  _MicroDelay.0001                           code  fffc07f4 18
  _PRNGInit                                  code  fffc0890 18
  _RandomizeSpriteColors                     code  fffc6708 32
  _RandomizeSpritePositions                  code  fffc6800 32
  _RemoveFromReadyList                     rodata  000000 32
  _RemoveFromTimeoutList                   rodata  000000 32
  _RequestIOFocus                          rodata  000000 32
  _SetBound48                              rodata  000000 32
  _SetBound49                              rodata  000000 32
  _SetBound50                              rodata  000000 32
  _SetBound51                              rodata  000000 32
  _SetSpritePos                              code  fffc67a0 32
  _SpriteDemo                                code  fffc6900 32
  _TimeoutList                             rodata  000000 32
  _XlatScancode                              code  fffc3d38 18
  _bios_stacks                             rodata  000000 32
  _chkTCB                                  rodata  000000 32
  _clr                                       code  fffc4964 18
  _cls                                       code  8000000000000317 32
  _end_init_data                           rodata  fffc8000 32
  _fmtk_irq_stack                          rodata  000000 32
  _fmtk_sys_stack                          rodata  000000 32
  _freeMBX                                 rodata  000000 32
  _freeMSG                                 rodata  000000 32
  _freeTCB                                 rodata  000000 32
  _getCPU                                  rodata  000000 32
  _hFocusSwitchMbx                         rodata  000000 32
  _hasUltraHighPriorityTasks               rodata  000000 32
  _iof_sema                                rodata  000000 32
  _iof_switch                              rodata  000000 32
  _irq_stack                               rodata  000000 32
  _kbd_sema                                rodata  000000 32
  _keybdControlCodes                       rodata  fffc3700 32
  _keybdExtendedCodes                      rodata  fffc3780 32
  _mailbox                                 rodata  000000 32
  _message                                 rodata  000000 32
  _missed_ticks                            rodata  000000 32
  _mmu_Alloc512kPage                       rodata  000000 32
  _mmu_Alloc8kPage                         rodata  000000 32
  _mmu_AllocateMap                         rodata  000000 32
  _mmu_Free512kPage                        rodata  000000 32
  _mmu_Free8kPage                          rodata  000000 32
  _mmu_FreeMap                             rodata  000000 32
  _mmu_MapCardMemory                       rodata  000000 32
  _mmu_SetAccessKey                        rodata  000000 32
  _mmu_SetMapEntry                         rodata  000000 32
  _mmu_SetOperateKey                       rodata  000000 32
  _mmu_alloc                               rodata  000000 32
  _mmu_free                                rodata  000000 32
  _nMailbox                                rodata  000000 32
  _nMsgBlk                                 rodata  000000 32
  _outb                                    rodata  000000 32
  _outc                                    rodata  000000 32
  _outh                                    rodata  000000 32
  _outw                                    rodata  000000 32
  _randStream                              rodata  024830 32
  _rdcf                                      code  8000000000000319 32
  _readyQ                                  rodata  000000 32
  _set_vector                              rodata  000000 32
  _shiftedScanCodes                        rodata  fffc3600 32
  _stacks                                  rodata  000000 32
  _sys_sema                                rodata  000000 32
  _sys_stacks                              rodata  000000 32
  _sysstack                                rodata  000000 32
  _tcbs                                    rodata  000000 32
  _unshiftedScanCodes                      rodata  fffc3500 32
  _video_bufs                              rodata  000000 32
  a2h1                                       code  fffc4fb0 18
  asciiToHex                                 code  fffc4fa4 18
  begin_init_data                          rodata  fffc7008 32
  clearVars                                  code  fffc496c 18
  clearVars.cv1                              code  fffc498c 18
  datAttr                                    code  fffc0208 18
  doMem                                      code  fffc0564 18
  doMem.loop                                 code  fffc05c8 18
  doMem.loop2                                code  fffc05a0 18
  ec1                                        code  fffc5b4c 18
  end_init_data                            rodata  fffc8000 32
  findVar                                    code  fffc5864 18
  fl1                                        code  fffc5cf8 18
  flt10                                      code  fffc0aa8 18
  flt20                                      code  fffc0a98 18
  flt50                                      code  fffc0a88 18
  fltMillion                                 code  fffc0e7c 18
  fltOne                                     code  fffc0e74 18
  fltTen                                     code  fffc0e78 18
  fltToString                                code  fffc0ab8 18
  fltToString.0001                           code  fffc0b18 18
  fltToString.0002                           code  fffc0b98 18
  fltToString.0003                           code  fffc0b84 18
  fltToString.0004                           code  fffc0be4 18
  fltToString.0005                           code  fffc0bdc 18
  fltToString.0006                           code  fffc0bc4 18
  fltToString.0007                           code  fffc0c00 18
  fltToString.0008                           code  fffc0c14 18
  fltToString.0009                           code  fffc0c10 18
  fltToString.0010                           code  fffc0c34 18
  fltToString.0011                           code  fffc0cc0 18
  fltToString.0012                           code  fffc0c78 18
  fltToString.0013                           code  fffc0c64 18
  fltToString.0014                           code  fffc0c94 18
  fltToString.0015                           code  fffc0cb0 18
  fltToString.0016                           code  fffc0c4c 18
  fltToString.0017                           code  fffc0cb8 18
  fltToString.0018                           code  fffc0cc0 18
  fltToString.0019                           code  fffc0cf4 18
  fltToString.0020                           code  fffc0d00 18
  fltToString.0021                           code  fffc0d24 18
  fltToString.0022                           code  fffc0d30 18
  fltToString.0023                           code  fffc0d40 18
  fltToString.0024                           code  fffc0d4c 18
  fltToString.0025                           code  fffc0d38 18
  fltToString.0026                           code  fffc0d60 18
  fltToString.0027                           code  fffc0d68 18
  fltToString.0028                           code  fffc0d70 18
  fltToString.0029                           code  fffc0d7c 18
  fltToString.0030                           code  fffc0d88 18
  fltToString.0031                           code  fffc0d94 18
  fltToString.0032                           code  fffc0d9c 18
  fltToString.0034                           code  fffc0da4 18
  fltToString.0035                           code  fffc0db0 18
  fltToString.0036                           code  fffc0dc0 18
  fltToString.0037                           code  fffc0dcc 18
  fltToString.0038                           code  fffc0dd4 18
  fltToString.0039                           code  fffc0de8 18
  fltToString.0040                           code  fffc0ddc 18
  fltToString.0041                           code  fffc0e44 18
  fltToString.0042                           code  fffc0e08 18
  fltToString.0043                           code  fffc0e18 18
  fltToString.0044                           code  fffc0e2c 18
  fltToString.0045                           code  fffc0e10 18
  fltToString.0046                           code  fffc0e38 18
  fltToString.0047                           code  fffc0e44 18
  fltToString.0048                           code  fffc0e30 18
  fltToString.0050                           code  fffc0e64 18
  fltToString.0051                           code  fffc0e60 18
  fltToString.0052                           code  fffc0e50 18
  fltToString.inf                            code  fffc0b00 18
  fltToString.notZero                        code  fffc0b54 18
  fltToString.pos                            code  fffc0b40 18
  fltToString.prt                            code  fffc0df8 18
  fputc                                      code  fffc02b0 18
  fv1                                        code  fffc58c4 18
  fv2                                        code  fffc58d8 18
  fv3                                        code  fffc58bc 18
  fv4                                        code  fffc5880 18
  gen_rand                                   code  80000000000003ec 32
  getVarName                                 code  fffc57b8 18
  gfn1                                       code  fffc503c 18
  gfn2                                       code  fffc4fd4 18
  gfn3                                       code  fffc5010 18
  gosub1                                     code  fffc4b20 18
  gvn1                                       code  fffc5850 18
  gvn2                                       code  fffc5814 18
  gvn3                                       code  fffc5830 18
  gvn4                                       code  fffc57d8 18
  gvn6                                       code  fffc5804 18
  hKeybdMbx                                 const  024822 19
  isAlnum                                    code  fffc53e8 18
  isAlpha                                    code  fffc53b8 18
  isAlphaFalse                               code  fffc53e0 18
  isAlphaTrue                                code  fffc53d8 18
  isDigit                                    code  fffc5398 18
  isDigitFalse                               code  fffc53b0 18
  isDigitx                                   code  fffc53fc 18
  mbxs                                      const  020000 19
  mbxs_end                                  const  022000 19
  milliseconds                              const  014208 18
  missed_ticks                              const  024320 19
  msgBadGotoGosub                            code  fffc6635 18
  msgBadKeybd                                code  800000000000027d 32
  msgBytesFree                               code  fffc656d 18
  msgCRLF                                    code  fffc0a82 18
  msgComma                                   code  fffc6582 18
  msgDivZero                                 code  fffc6544 18
  msgEnvFail                                 code  fffc669d 18
  msgExtraChars                              code  fffc667b 18
  msgInf                                     code  fffc0e6c 18
  msgInit                                    code  fffc64cc 18
  msgInputVar                                code  fffc65e4 18
  msgLineRange                               code  fffc6595 18
  msgMonHelp                                 code  fffc09d5 18
  msgNan                                     code  fffc0e70 18
  msgNextFor                                 code  fffc6600 18
  msgNextVar                                 code  fffc6612 18
  msgNumTooBig                               code  fffc6531 18
  msgParen                                   code  fffc66b7 18
  msgRNDBad                                  code  fffc65c0 18
  msgReadError                               code  fffc6517 18
  msgReady                                   code  fffc657a 18
  msgReadyList                               code  fffc318c 18
  msgRetWoGosub                              code  fffc6651 18
  msgSYSBad                                  code  fffc65d3 18
  msgStart                                   code  fffc09bc 18
  msgTaskStart                               code  fffc0a74 18
  msgTimeoutList                             code  fffc31bd 18
  msgTooBig                                  code  fffc6667 18
  msgVar                                     code  fffc65aa 18
  msgVarSpace                                code  fffc6556 18
  msgWhat                                    code  fffc6508 18
  msgs                                      const  010000 18
  nmeSerial                                  code  fffc1710 18
  prCRLF                                     code  fffc5f88 18
  pword1                                     code  fffc51bc 18
  pword2                                     code  fffc51dc 18
  qToChk                                     code  fffc1e4a 18
  return1                                    code  fffc4b98 18
  rnd1                                       code  fffc59b4 18
  rnd2                                       code  fffc59c4 18
  switchflag                                const  014200 18
  sysx1                                      code  fffc52c0 18
  tah1                                       code  fffc5214 18
  toAsciiHex                                 code  fffc5204 18
  toUpper                                    code  fffc623c 18
  tstv_notfound                              code  fffc57a4 18
  usrJmp                                    const  0300a0 19

Undefined Symbols
  A00000000000000                          rodata  800000000000046e 32
  AUXIN                                      code  80000000000002c7 32
  AUXIN_INIT                                 code  800000000000039a 32
  AUXOUT                                     code  80000000000002c5 32
  AUXOUT_FLUSH                               code  80000000000003a7 32
  AUXOUT_INIT                                code  800000000000039e 32
  ERETx                                      code  8000000000000236 32
  FFFC0100                                   code  80000000000002b7 32
  FMTK_Initialize                            code  80000000000001b8 32
  FMTK_PostMsg                               code  80000000000001c0 32
  FMTK_SetTaskPriority                       code  80000000000001bc 32
  FMTK_StartApp                              code  80000000000001c4 32
  KEYBD                                      code  8000000000000276 32
  KeybdIRQ.notAlt                            code  8000000000000290 32
  KillTask                                   code  8000000000000204 32
  SDReadSector                               code  800000000000039b 32
  SDWriteSector                              code  80000000000003a0 32
  TCBKbdState2                               code  800000000000028b 32
  TCBVidMem                                  code  800000000000020a 32
  _ACBPtrs                                 rodata  000000 32
  _BIOS1_sema                              rodata  000000 32
  _BIOS_RespMbx                            rodata  000000 32
  _DeviceTable                             rodata  000000 32
  _DumpTaskList                            rodata  000000 32
  _EnableSprites                           rodata  000000 32
  _FMTK_Inited                             rodata  000000 32
  _FMTK_Reschedule                         rodata  000000 32
  _FMTK_SendMsg                            rodata  000000 32
  _FMTK_StartApp                           rodata  000000 32
  _FMTK_StartThread                        rodata  000000 32
  _FMTK_WaitMsg                            rodata  000000 32
  _FocusSwitcher                           rodata  000000 32
  _GetACBPtr                               rodata  000000 32
  _GetAppHandle                            rodata  000000 32
  _GetRand                                 rodata  000000 32
  _GetRunningACBPtr                        rodata  000000 32
  _GetVecno                                rodata  000000 32
  _IOFocusNdx                              rodata  000000 32
  _IOFocusTbl                              rodata  000000 32
  _InsertIntoReadyList                     rodata  000000 32
  _InsertIntoTimeoutList                   rodata  000000 32
  _KeyLED                                  rodata  024826 32
  _KeyState1                               rodata  024824 32
  _KeyState2                               rodata  024825 32
  _KeybdClearRcv                           rodata  000000 32
  _KeybdGetScancode                        rodata  fffc3bb8 32
  _KeybdGetStatus                          rodata  fffc3b90 32
  _KeybdID                                   code  8000000000000283 32
  _KeybdSetLED                             rodata  fffc3a2c 32
  _LockIOFSemaphore                        rodata  000000 32
  _LockKbdSemaphore                        rodata  000000 32
  _LockSemaphore                           rodata  000000 32
  _LockSysSemaphore                        rodata  000000 32
  _RemoveFromReadyList                     rodata  000000 32
  _RemoveFromTimeoutList                   rodata  000000 32
  _RequestIOFocus                          rodata  000000 32
  _SetBound48                              rodata  000000 32
  _SetBound49                              rodata  000000 32
  _SetBound50                              rodata  000000 32
  _SetBound51                              rodata  000000 32
  _TimeoutList                             rodata  000000 32
  _bios_stacks                             rodata  000000 32
  _chkTCB                                  rodata  000000 32
  _cls                                       code  8000000000000317 32
  _fmtk_irq_stack                          rodata  000000 32
  _fmtk_sys_stack                          rodata  000000 32
  _freeMBX                                 rodata  000000 32
  _freeMSG                                 rodata  000000 32
  _freeTCB                                 rodata  000000 32
  _getCPU                                  rodata  000000 32
  _hFocusSwitchMbx                         rodata  000000 32
  _hasUltraHighPriorityTasks               rodata  000000 32
  _iof_sema                                rodata  000000 32
  _iof_switch                              rodata  000000 32
  _irq_stack                               rodata  000000 32
  _kbd_sema                                rodata  000000 32
  _keybdControlCodes                       rodata  fffc3700 32
  _keybdExtendedCodes                      rodata  fffc3780 32
  _mailbox                                 rodata  000000 32
  _message                                 rodata  000000 32
  _missed_ticks                            rodata  000000 32
  _mmu_Alloc512kPage                       rodata  000000 32
  _mmu_Alloc8kPage                         rodata  000000 32
  _mmu_AllocateMap                         rodata  000000 32
  _mmu_Free512kPage                        rodata  000000 32
  _mmu_Free8kPage                          rodata  000000 32
  _mmu_FreeMap                             rodata  000000 32
  _mmu_MapCardMemory                       rodata  000000 32
  _mmu_SetAccessKey                        rodata  000000 32
  _mmu_SetMapEntry                         rodata  000000 32
  _mmu_SetOperateKey                       rodata  000000 32
  _mmu_alloc                               rodata  000000 32
  _mmu_free                                rodata  000000 32
  _nMailbox                                rodata  000000 32
  _nMsgBlk                                 rodata  000000 32
  _outb                                    rodata  000000 32
  _outc                                    rodata  000000 32
  _outh                                    rodata  000000 32
  _outw                                    rodata  000000 32
  _randStream                              rodata  024830 32
  _rdcf                                      code  8000000000000319 32
  _readyQ                                  rodata  000000 32
  _set_vector                              rodata  000000 32
  _shiftedScanCodes                        rodata  fffc3600 32
  _stacks                                  rodata  000000 32
  _sys_sema                                rodata  000000 32
  _sys_stacks                              rodata  000000 32
  _sysstack                                rodata  000000 32
  _tcbs                                    rodata  000000 32
  _unshiftedScanCodes                      rodata  fffc3500 32
  _video_bufs                              rodata  000000 32
  gen_rand                                   code  80000000000003ec 32
  msgBadKeybd                                code  800000000000027d 32

  Macro Name
 mDispIRQLive                              -842150451

	ldo      $v0,$FFD00000+440
	add     	$v0,$v0,#1
	sto      $v0,$FFD00000+440

 mGetCurrentTid                            -842150451

	csrrw	v0,#$181,x0
	and		v0,v0,#MAX_TID

 mGetVideoPtr                              -842150451

	
	csrrw	v0,#$181,x0
	and		v0,v0,#MAX_TID
sll		$v0,$v0,#LOG_TCBSZ
	ldo		$v0,TCBpVideo[$v0]
	ldi		$v0,#$FFD00000

 mHasFocus                                 -842150451

	ldi		$a0,#20
	ecall

 mPopTimeoutList                           -842150451

	sll		$t0,$v0,#LOG_TCBSZ		; tid to pointer
	lbu		$v1,TCBStatus[$t0]		; no longer a waiting status
	and		$t1,$v1,#TS_WAITMSG		; check if waiting for a message
	beqz	$t1,.noWait@
	mMbxRemoveTask							; remove task from mailbox list
.noWait@:
	and		$v1,$v1,#~(TS_WAITMSG|TS_TIMEOUT)
	stb		$v1,TCBStatus[$t0]
	ldw		$v1,TCBNext[$t0]			; get next task on timeout list
	stw		$v1,TimeoutList				; update list head
	ldi		$t1,#NR_TCB						; check valid handle
	bgeu	$v1,$t1,.done@
	ldi		$t1,#-1								;
	sll		$v1,$v1,#LOG_TCBSZ		; v1 = tid to pointer
	stw		$t1,TCBPrev[$v1]			; TimeoutList->prev = -1
.done@:
	ldi		$t1,#-1								; reset next and prev indexes
	stw		$t1,TCBNext[$t0]			; on popped task
	stw		$t1,TCBPrev[$t0]

 mSleep                                    1

	ldi		$a0,#5
	ldi		$a1,#0
	ecall

 mUnlockSemaphore                          1

	ldi		v0,#-1
	sw		v0,0

 mWaitForFocus                             -842150451

.WFF1@:
	
	ldi		$a0,#20
	ecall
bne		v1,x0,.HasFocus@
	call	SerialPeekChar	;Direct
	ldi		a0,#$14							; CTRL-T
	bne		$v0,$a0,.WFF2@
	call	SerialGetChar
	ldi		$a0,#21							; switch IO Focus
	ecall
	bra		.WFF1@
.WFF2@:
	
	ldi		$a0,#5
	ldi		$a1,#1
	ecall

	bra		.WFF1@
.HasFocus@:

0 compressable instructions
The top 1024 are:
Comp  Opcode  Count
